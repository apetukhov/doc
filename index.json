{
  "dev/build-server.html": {
    "href": "dev/build-server.html",
    "title": "Build Server Notes | Npgsql Documentation",
    "keywords": "This page describes the steps used to set up the Npgsql build server. If you're upgrading the TeamCity version, see \"Give agent service start/stop permissions\" below. Install all supported versions of the Postgresql backend At the time of writing, this means 9.1, 9.2, 9.3, 9.4, 9.5. They are configured on ports 5491, 5492, 5493, 5494, 5495. For SSPI/GSS tests, you need to set up a user with the same name as the user that will be running the tests (i.e. teamcity_agent). You must also add the following lines at the top of each PG's pg_hba.conf to set up SSPI/GSS for that user: host all teamcity_agent 127.0.0.1/32 sspi include_realm=0 host all teamcity_agent ::1/128 sspi include_realm=0 See this page on SSPI . Install a TeamCity-dedicated Postgresql cluster TeamCity itself requires an SQL database, but we don't want it to run in the same environment as that used for the unit tests. So choosing the latest stable Postgresql version (9.6 at time of writing), we create a new Postgresql cluster: initdb -U postgres -W c:\\dev\\TeamcityPostgresData Next we set up a Windows service that starts up the new cluster: pg_ctl register -N postgresql-9.6-teamcity -U teamcity -P <password> -D c:\\dev\\TeamcityPostgresData Finally, create a a user and database and point TeamCity to it. Install .NET SDKs for all supported .NET versions .NET 4.0 (Windows 7 SDK): http://www.microsoft.com/en-us/download/details.aspx?id=8279 .NET 4.5 (Windows 8 SDK): http://msdn.microsoft.com/en-us/windows/hardware/hh852363.aspx .NET 4.5.1 (Windows 8.1 SDK): http://msdn.microsoft.com/en-us/windows/hardware/bg162891.aspx While installing the SDK for .NET 4.0, I had this problem: http://support.microsoft.com/kb/2717426 Give agent service start/stop permissions When upgrading TeamCity, the agent needs to be able to stop and start the Windows service. This is how you can grant a normal user specific permissions on specific services: Download and install subinacl from http://www.microsoft.com/en-us/download/details.aspx?id=23510 cd C:\\Program Files (x86)\\Windows Resource Kits\\Tools\\ subinacl /service TCBuildAgent /grant=teamcity_agent=TO Update build status back in github Download the plugin from https://github.com/jonnyzzz/TeamCity.GitHub , get the ZIP Drop the ZIP in the TeamCity content dir's plugins subdir Add the Build Feature \"Report change status to GitHub\". Configure everything appropriately, and be sure the user you set up has push access to the repository! Install assorted dev utilities GitVersion (with Chocolatey) WiX toolset (v3.10.1 at time of writing) Install WiX WiX 3.10 has a dependency on .NET Framework 3.5, but there's some issue blocking its installation on Windows Server 2012 R2 (at least on Azure). A good workaround is to simply install via Powershell ( Add-WindowsFeature NET-Framework-Core ), see https://msdn.microsoft.com/en-us/library/dn169001(v=nav.70).aspx#InstallNET35 . Note that ICE validation is disabled because apparently it requires an interactive account or admin privileges, which doesn't work in continuous integration."
  },
  "dev/index.html": {
    "href": "dev/index.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Tests We maintain a large regression test suite, if you're planning to submit code, please provide a test that reproduces the bug or tests your new feature. See this page for information on the Npgsql test suite. Build Server We have a TeamCity build server running continuous integration builds on commits pushed to our github repository. The Npgsql testsuite is executed over all officially supported PostgreSQL versions to catch errors as early as possible. CI NuGet packages are automatically pushed to our unstable feed at MyGet . For some information about the build server setup, see this page . Thanks to Dave Page at PostgreSQL for donating a VM for this! Release Checklist These are the steps needed to publish release 3.0.6: Merge --no-ff hotfix/3.0.6 into master Tag master with v3.0.6 Push both master and v3.0.6 to Github Wait for the build to complete In TeamCity, go to the artifacts for the build and download them all as a single ZIP Nuget push the packages Write release notes on npgsql.org, publish Create release on github, pointing to npgsql.org Upload MSI to the github release Delete hotfix/3.0.6 both locally and on github Create new branch hotfix/3.0.7 off of master, push to github Close the Github 3.0.6 milestone, create new 3.0.7 milestone Twitter Other stuff Emil compiled a list of PostgreSQL types and their wire representations ."
  },
  "dev/tests.html": {
    "href": "dev/tests.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Overview Npgsql comes with an extensive test suite to make sure no regressions occur. All tests are run on our build server on all supported .NET versions (including a recent version of mono) and all supported PostgreSQL backends. There is also a growing suite of speed tests to be able to measure performance. These tests are currently marked [Explicit] and aren't executed automatically. Simple setup The Npgsql test suite requires a PostgreSQL backend to test against. Simply use the latest version of PostgreSQL on your dev machine on the default port (5432). By default, all tests will be run using user npgsql_tests , and password npgsql_tests . Npgsql will automatically create a database called npgsql_tests and run its tests against this. To set this up, connect to PostgreSQL as the admin user as follows: psql -h localhost -U postgres <enter the admin password> create user npgsql_tests password 'npgsql_tests' superuser; And you're done. Superuser access is needed for some tests, e.g. loading the hstore extension, creating and dropping test databases in the Entity Framework tests..."
  },
  "dev/types.html": {
    "href": "dev/types.html",
    "title": "PostgreSQL Types | Npgsql Documentation",
    "keywords": "Overview The following are notes by Emil Lenngren on PostgreSQL wire representation of types: bool: text: t or f binary: a byte: 1 or 0 bytea: text: either \\x followed by hex-characters (lowercase by default), or plain characters, where non-printable characters (between 0x20 and 0x7e, inclusive) are written as \\nnn (octal) and \\ is written as \\\\ binary: the bytes as they are char: This type holds a single char/byte. (Not to be confused with bpchar (blank-padded char) which is PostgreSQL's alias to the SQL standard's char). The char may be the null-character text: the char as a byte, encoding seems to be ignored binary: the char as a byte name: A null-padded string of NAMEDATALEN (currently 64) bytes (the last byte must be a null-character). Used in pg catalog. text: the name as a string binary: the name as a string int2/int4/int8: text: text representation in base 10 binary: binary version of the integer int2vector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as int2[] oidvector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as oid[] regproc: internally just an OID (UInt32) text: -, name of procedure, or numeric if not found binary: only the OID in binary regprocedure/regoper/regoperator/regclass/regconfig/regdictionary: similar to regproc text: text: the string as it is binary: the string as it is oid: A 32-bit unsigned integer used for internal object identification. text: the text-representation of this integer in base 10 binary: the UInt32 tid: tuple id Internally a tuple of a BlockNumber (UInt32) and an OffsetNumber (UInt16) text: (blockNumber,offsetNumber) binary: the block number in binary followed by offset number in binary xid: transaction id Internally just a TransactionId (UInt32) text: the number binary: the number in binary cid: command id Internally just a CommandId (UInt32) text: the number binary: the number in binary json: json text: the json an text binary: the json as text jsonb: json internally stored in an efficient binary format text: the json as text binary: An Int32 (version number, currently 1), followed by data (currently just json as text) xml: Xml. It is probably most efficient to use the text format, especially when receiving from client. text: the xml as text (when sent from the server: encoding removed, when receiving: assuming database encoding) binary: the xml as text (when sent from the server: in the client's specified encoding, when receiving: figures out itself) pg_node_tree: used as type for the column typdefaultbin in pg_type does not accept input text: text binary: text smgr: storage manager can only have the value \"magnetic disk\" text: magnetic disk binary: not available point: A tuple of two float8 text: (x,y) The floats are interpreted with the C strtod function. The floats are written with the snprintf function, with %.*g format. NaN/-Inf/+Inf can be written, but not interpretability depends on platform. The extra_float_digits setting is honored. For linux, NaN, [+-]Infinity, [+-]Inf works, but not on Windows. Windows also have other output syntax for these special numbers. (1.#QNAN for example) binary: the two floats lseg: A tuple of two points text: [(x1,y1),(x2,y2)] see point for details binary: the four floats in the order x1, y1, x2, y2 path: A boolean whether the path is opened or closed + a vector of points. text: [(x1,y1),...] for open path and ((x1,y1),...) for closed paths. See point for details. binary: first a byte indicating open (0) or close (1), then the number of points (Int32), then a vector of points box: A tuple of two points. The coordinates will be reordered so that the first is the upper right and the second is the lower left. text: (x1,y1),(x2,y2) see point for details binary: the four floats in the order x1, y1, x2, y2 (doesn't really matter since they will be reordered) polygon: Same as path but with two differences: is always closed and internally stores the bounding box. text: same as closed path binary: the number of points (Int32), then a vector of points line (version 9.4): Ax + By + C = 0. Stored with three float8. Constraint: A and B must not both be zero (only checked on text input, not binary). text: {A,B,C} see point for details about the string representation of floats. Can also use the same input format as a path with two different points, representing the line between those. binary: the three floats circle: <(x,y),r> (center point and radius), stored with three float8. text: <(x,y),r> see point for details about the string representation of floats. binary: the three floats x, y, r in that order float4/float8: text: (leading/trailing whitespace is skipped) interpreted with the C strtod function, but since it has problems with NaN, [+-]Infinity, [+-]Inf, those strings are identified (case-insensitively) separately. when outputting: NaN, [+-]Infinity is treated separately, otherwise the string is printed with snprintf %.*g and the extra_float_digits setting is honored. binary: the float abstime: A unix timestamp stored as a 32-bit signed integer with seconds-precision (seconds since 1970-01-01 00:00:00), in UTC Has three special values: Invalid (2^31-1), infinity (2^31-3), -infinity (-2^31) text: same format as timestamptz, or \"invalid\", \"infinity\", \"-infinity\" binary: Int32 reltime: A time interval with seconds-precision (stored as an 32-bit signed integer) text: same as interval binary: Int32 tinterval: Consists of a status (Int32) and two abstimes. Status is valid (1) iff both abstimes are valid, else 0. Note that the docs incorrectly states that ' is used as quote instead of \" text: [\"<abstime>\" \"<abstime>\"] binary: Int32 (status), Int32 (abstime 1), Int32 (abstime 2) unknown: text: text binary: text money: A 64-bit signed integer. For example, $123.45 is stored as the integer 12345. Number of fraction digits is locale-dependent. text: a locale-depedent string binary: the raw 64-bit integer macaddr: 6 bytes text: the 6 bytes in hex (always two characters per byte) separated by : binary: the 6 bytes appearing in the same order as when written in text inet/cidr: Struct of Family (byte: ipv4=2, ipv6=3), Netmask (byte with number of bits in the netmask), Ipaddr bytes (16) Text: The IP-address in text format and /netmask. /netmask is omitted in inet if the netmask is the whole address. Binary: family byte, netmask byte, byte (cidr=1, inet=0), number of bytes in address, bytes of the address aclitem: Access list item used in pg_class Text: Something like postgres=arwdDxt/postgres Binary: not available bpchar: Blank-padded char. The type modifier is used to blank-pad the input. text: text binary: text varchar: Variable-length char. The type modifier is used to check the input's length. text: text binary: text date: A signed 32-bit integer of a date. 0 = 2000-01-01. Infinity: INT_MAX, -Infinity: INT_MIN Text: Date only using the specified date style Binary: Int32 time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer timetz: A struct of Time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. Zone: A signed 32-bit integer representing the zone (in seconds). Note that the sign is inverted. So GMT+1h is stored as -1h. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer followed by the 32-bit integer timestamp: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 Infinity is LONG_MAX and -Infinity is LONG_MIN (Infinity would be 294277-01-09 04:00:54.775807) Earliest possible timestamp is 4714-11-24 00:00:00 BC. Even earlier would be possible, but due to internal calculations those are forbidden. text: dependent on date style binary: the 64-bit integer timestamptz: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 UTC. (Time zone is not stored). Infinity is LONG_MAX and -Infinity is LONG_MIN text: first converted to the time zone in the db settings, then printed according to the date style binary: the 64-bit integer interval: A struct of Time (Int64): all time units other than days, months and years (microseconds) Day (Int32): days, after time for alignment Month (Int32): months and years, after time for alignment text: Style dependent, but for example: \"-11 mons +15435 days -11111111:53:00\" binary: all fields in the struct bit/varbit: First a signed 32-bit integer containing the number of bits (negative length not allowed). Then all the bits in big end first. So a varbit of length 1 has the first (and only) byte set to either 0x80 or 0x00. Last byte is assumed (and is automatically zero-padded in recv) to be zero-padded. text: when sending from backend: all the bits, written with 1s and 0s. when receiving from client: (optionally b or B followed by) all the bits as 1s and 0s, or a x or X followed by hexadecimal digits (upper- or lowercase), big endian first. binary: the 32-bit length followed by the bytes containing the bits numeric: A variable-length numeric value, can be negative. text: NaN or first - if it is negative, then the digits with . as decimal separator binary: first a header of 4 16-bit signed integers: number of digits in the digits array that follows (can be 0, but not negative), weight of the first digit (10000^weight), can be both negative, positive or 0, sign: negative=0x4000, positive=0x0000, NaN=0xC000 dscale: number of digits (in base 10) to print after the decimal separator then the array of digits: The digits are stored in base 10000, where each digit is a 16-bit integer. Trailing zeros are not stored in this array, to save space. The digits are stored such that, if written as base 10000, the decimal separator can be inserted between two digits in base 10000, i.e. when this is to be printed in base 10, only the first digit in base 10000 can (possibly) be printed with less than 4 characters. Note that this does not apply for the digits after the decimal separator; the digits should be printed out in chunks of 4 characters and then truncated with the given dscale. refcursor: uses the same routines as text record: Describes a tuple. Is also the \"base class\" for composite types (i.e. it uses the same i/o functions). text: ( followed by a list of comma-separated text-encoded values followed by ). Empty element means null. Quoted with \" and \" if necessary. \" is escaped with \"\" and \\ is escaped with \\\\ (this differs from arrays where \" is escaped with \\\"). Must be quoted if it is an empty string or contains one of \"\\,() or a space. binary: First a 32-bit integer with the number of columns, then for each column: An OID indicating the type of the column The length of the column (32-bit integer), or -1 if null The column data encoded as binary cstring: text/binary: all characters are sent without the trailing null-character void: Used for example as return value in SELECT * FROM func_returning_void() text: an empty string binary: zero bytes uuid: A 16-byte uuid. text: group of 8, 4, 4, 4, 12 hexadecimal lower-case characters, separated by -. The first byte is written first. It is allowed to surround it with {}. binary: the 16 bytes txid_snapshot: (txid is a UInt64) A struct of UInt32 nxip (size of the xip array) txid xmin (no values in xip is smaller than this) txid xmax (no values in xip is larger than or equal this) txid[] xip (is ordered in ascending order) text: xmin:xmax:1,2,3,4 binary: all fields in the structure tsvector: Used for text searching. Example of tsvector: 'a':1,6,10 'on':5 'and':8 'ate':9A 'cat':3 'fat':2,11 'mat':7 'rat':12 'sat':4 Max length for each lexeme string is 2046 bytes (excluding the trailing null-char) The words are sorted when parsed, and only written once. Positions are also sorted and only written once. For some reason, the unique check does not seem to be made for binary input, only text input... text: As seen above. ' is escaped with '' and \\ is escaped with \\\\. binary: UInt32 number of lexemes for each lexeme: lexeme text in client encoding, null-terminated UInt16 number of positions for each position: UInt16 WordEntryPos, where the most significant 2 bits is weight, and the 14 least significant bits is pos (can't be 0). Weights 3,2,1,0 represent A,B,C,D tsquery: A tree with operands and operators (&, |, !). Operands are strings, with optional weight (bitmask of ABCD) and prefix search (yes/no, written with *). text: the tree written in infix notation. Example: ( 'abc':*B | 'def' ) & !'ghi' binary: the tree written in prefix notation: First the number of tokens (a token is an operand or an operator). For each token: UInt8 type (1 = val, 2 = oper) followed by For val: UInt8 weight + UInt8 prefix (1 = yes / 0 = no) + null-terminated string, For oper: UInt8 oper (1 = not, 2 = and, 3 = or, 4 = phrase). In case of phrase oper code, an additional UInt16 field is sent (distance value of operator). Default is 1 for <->, otherwise the n value in '<n>'. enum: Simple text gtsvector: GiST for tsvector. Probably internal type. int4range/numrange/tsrange/tstzrange/daterange/int8range and user-defined range types: /* A range's flags byte contains these bits: */ #define RANGE_EMPTY 0x01 /* range is empty */ #define RANGE_LB_INC 0x02 /* lower bound is inclusive */ #define RANGE_UB_INC 0x04 /* upper bound is inclusive */ #define RANGE_LB_INF 0x08 /* lower bound is -infinity */ #define RANGE_UB_INF 0x10 /* upper bound is +infinity */ #define RANGE_LB_NULL 0x20 /* lower bound is null (NOT USED) */ #define RANGE_UB_NULL 0x40 /* upper bound is null (NOT USED) */ #define RANGE_CONTAIN_EMPTY 0x80/* marks a GiST internal-page entry whose * subtree contains some empty ranges */ A range has no lower bound if any of RANGE_EMPTY, RANGE_LB_INF (or RANGE_LB_NULL, not used anymore) is set. The same applies for upper bounds. text: A range with RANGE_EMPTY is just written as the string \"empty\". Inclusive bounds are written with [ and ], else ( and ) is used. The two values are comma-separated. Missing bounds are written as an empty string (without quotes). Each value is quoted with \" if necessary. Quotes are necessary if the string is either the empty string or contains \"\\,()[] or spaces. \" is escaped with \"\" and \\ is escaped with \\\\. Example: [18,21] binary: First the flag byte. Then, if has lower bound: 32-bit length + binary-encoded data. Then, if has upper bound: 32-bit length + binary-encoded data. hstore: Key/value-store. Both keys and values are strings. text: Comma-space separated string, where each item is written as \"key\"=>\"value\" or \"key\"=>NULL. \" and \\ are escaped as \\\" and \\\\. Example: \"a\"=>\"b\", \"c\"=>NULL, \"d\"=>\"q\" binary: Int32 count for each item: Int32 keylen string of the key (not null-terminated) Int32 length of item (or -1 if null) the item as a string ghstore: internal type for indexing hstore domain types: mapped types used in information_schema: cardinal_number: int4 (must be nonnegative or null) character_data: varchar sql_identifier: varchar time_stamp: timestamptz yes_or_no: varchar(3) (must be \"YES\" or \"NO\" or null) intnotnull: when an int4 is cast to this type, it is checked that the int4 is not null, but it still returns an int4 and not intnotnull..."
  },
  "doc/api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "doc/api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Npgsql Documentation",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes NpgsqlServiceCollectionExtensions Provides extension methods to configure Entity Framework Core for Npgsql."
  },
  "doc/api/Microsoft.Extensions.DependencyInjection.NpgsqlServiceCollectionExtensions.html": {
    "href": "doc/api/Microsoft.Extensions.DependencyInjection.NpgsqlServiceCollectionExtensions.html",
    "title": "Class NpgsqlServiceCollectionExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlServiceCollectionExtensions Extension method for setting up Npgsql services in an . Inheritance Object NpgsqlServiceCollectionExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : Npgsql.DependencyInjection.dll Syntax public static class NpgsqlServiceCollectionExtensions : object Methods | Improve this Doc View Source AddMultiHostNpgsqlDataSource(IServiceCollection, String, Action<NpgsqlDataSourceBuilder>, ServiceLifetime, ServiceLifetime) Registers an NpgsqlMultiHostDataSource and an NpgsqlConnection in the Declaration public static IServiceCollection AddMultiHostNpgsqlDataSource(this IServiceCollection serviceCollection, string connectionString, Action<NpgsqlDataSourceBuilder> dataSourceBuilderAction, ServiceLifetime connectionLifetime = null, ServiceLifetime dataSourceLifetime = null) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. String connectionString An Npgsql connection string. Action < NpgsqlDataSourceBuilder > dataSourceBuilderAction An action to configure the NpgsqlDataSourceBuilder for further customizations of the NpgsqlDataSource . ServiceLifetime connectionLifetime The lifetime with which to register the NpgsqlConnection in the container. Defaults to . ServiceLifetime dataSourceLifetime The lifetime with which to register the NpgsqlDataSource service in the container. Defaults to . Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained. | Improve this Doc View Source AddMultiHostNpgsqlDataSource(IServiceCollection, String, ServiceLifetime, ServiceLifetime) Registers an NpgsqlMultiHostDataSource and an NpgsqlConnection in the . Declaration public static IServiceCollection AddMultiHostNpgsqlDataSource(this IServiceCollection serviceCollection, string connectionString, ServiceLifetime connectionLifetime = null, ServiceLifetime dataSourceLifetime = null) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. String connectionString An Npgsql connection string. ServiceLifetime connectionLifetime The lifetime with which to register the NpgsqlConnection in the container. Defaults to . ServiceLifetime dataSourceLifetime The lifetime with which to register the NpgsqlDataSource service in the container. Defaults to . Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained. | Improve this Doc View Source AddNpgsqlDataSource(IServiceCollection, String, Action<NpgsqlDataSourceBuilder>, ServiceLifetime, ServiceLifetime) Registers an NpgsqlDataSource and an NpgsqlConnection in the . Declaration public static IServiceCollection AddNpgsqlDataSource(this IServiceCollection serviceCollection, string connectionString, Action<NpgsqlDataSourceBuilder> dataSourceBuilderAction, ServiceLifetime connectionLifetime = null, ServiceLifetime dataSourceLifetime = null) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. String connectionString An Npgsql connection string. Action < NpgsqlDataSourceBuilder > dataSourceBuilderAction An action to configure the NpgsqlDataSourceBuilder for further customizations of the NpgsqlDataSource . ServiceLifetime connectionLifetime The lifetime with which to register the NpgsqlConnection in the container. Defaults to . ServiceLifetime dataSourceLifetime The lifetime with which to register the NpgsqlDataSource service in the container. Defaults to . Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained. | Improve this Doc View Source AddNpgsqlDataSource(IServiceCollection, String, ServiceLifetime, ServiceLifetime) Registers an NpgsqlDataSource and an NpgsqlConnection in the . Declaration public static IServiceCollection AddNpgsqlDataSource(this IServiceCollection serviceCollection, string connectionString, ServiceLifetime connectionLifetime = null, ServiceLifetime dataSourceLifetime = null) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. String connectionString An Npgsql connection string. ServiceLifetime connectionLifetime The lifetime with which to register the NpgsqlConnection in the container. Defaults to . ServiceLifetime dataSourceLifetime The lifetime with which to register the NpgsqlDataSource service in the container. Defaults to . Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained."
  },
  "doc/api/Npgsql.ArrayNullabilityMode.html": {
    "href": "doc/api/Npgsql.ArrayNullabilityMode.html",
    "title": "Enum ArrayNullabilityMode | Npgsql Documentation",
    "keywords": "Enum ArrayNullabilityMode Specifies how the mapping of arrays of value types behaves with respect to nullability when they are requested via an API returning an . Namespace : Npgsql Assembly : Npgsql.dll Syntax public enum ArrayNullabilityMode : int Fields Name Description Always Arrays of value types are always returned as nullable arrays (e.g. int?[] ). Never Arrays of value types are always returned as non-nullable arrays (e.g. int[] ). If the PostgreSQL array contains a NULL value, an exception is thrown. This is the default mode. PerInstance The type of array that gets returned is determined at runtime. Arrays of value types are returned as non-nullable arrays (e.g. int[] ) if the actual instance that gets returned doesn't contain null values and as nullable arrays (e.g. int?[] ) if it does."
  },
  "doc/api/Npgsql.BackendMessages.FieldDescription.html": {
    "href": "doc/api/Npgsql.BackendMessages.FieldDescription.html",
    "title": "Class FieldDescription | Npgsql Documentation",
    "keywords": "Class FieldDescription A descriptive record on a single field received from PostgreSQL. See RowDescription in https://www.postgresql.org/docs/current/static/protocol-message-formats.html Inheritance Object FieldDescription Namespace : Npgsql.BackendMessages Assembly : Npgsql.dll Syntax public sealed class FieldDescription : object Properties | Improve this Doc View Source TypeModifier The type modifier (see pg_attribute.atttypmod). The meaning of the modifier is type-specific. Declaration public int TypeModifier { get; set; } Property Value Type Description Int32 | Improve this Doc View Source TypeSize The data type size (see pg_type.typlen). Note that negative values denote variable-width types. Declaration public short TypeSize { get; set; } Property Value Type Description Int16 Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String"
  },
  "doc/api/Npgsql.BackendMessages.html": {
    "href": "doc/api/Npgsql.BackendMessages.html",
    "title": "Namespace Npgsql.BackendMessages | Npgsql Documentation",
    "keywords": "Namespace Npgsql.BackendMessages Classes FieldDescription A descriptive record on a single field received from PostgreSQL. See RowDescription in https://www.postgresql.org/docs/current/static/protocol-message-formats.html"
  },
  "doc/api/Npgsql.GeoJSON.Internal.GeoJSONTypeHandlerResolver.html": {
    "href": "doc/api/Npgsql.GeoJSON.Internal.GeoJSONTypeHandlerResolver.html",
    "title": "Class GeoJSONTypeHandlerResolver | Npgsql Documentation",
    "keywords": "Class GeoJSONTypeHandlerResolver Inheritance Object TypeHandlerResolver GeoJSONTypeHandlerResolver Inherited Members TypeHandlerResolver.ResolveValueDependentValue(Object) TypeHandlerResolver.ResolveValueTypeGenerically<T>(T) Namespace : Npgsql.GeoJSON.Internal Assembly : Npgsql.GeoJSON.dll Syntax public class GeoJSONTypeHandlerResolver : TypeHandlerResolver Methods | Improve this Doc View Source GetMappingByDataTypeName(String) Declaration public override TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo | Improve this Doc View Source ResolveByClrType(Type) Declaration public override NpgsqlTypeHandler ResolveByClrType(Type type) Parameters Type Name Description Type type Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source ResolveByDataTypeName(String) Declaration public override NpgsqlTypeHandler ResolveByDataTypeName(string typeName) Parameters Type Name Description String typeName Returns Type Description NpgsqlTypeHandler"
  },
  "doc/api/Npgsql.GeoJSON.Internal.GeoJSONTypeHandlerResolverFactory.html": {
    "href": "doc/api/Npgsql.GeoJSON.Internal.GeoJSONTypeHandlerResolverFactory.html",
    "title": "Class GeoJSONTypeHandlerResolverFactory | Npgsql Documentation",
    "keywords": "Class GeoJSONTypeHandlerResolverFactory Inheritance Object TypeHandlerResolverFactory GeoJSONTypeHandlerResolverFactory Inherited Members TypeHandlerResolverFactory.GetDataTypeNameByValueDependentValue(Object) Namespace : Npgsql.GeoJSON.Internal Assembly : Npgsql.GeoJSON.dll Syntax public class GeoJSONTypeHandlerResolverFactory : TypeHandlerResolverFactory Constructors | Improve this Doc View Source GeoJSONTypeHandlerResolverFactory(GeoJSONOptions, Boolean) Declaration public GeoJSONTypeHandlerResolverFactory(GeoJSONOptions options, bool geographyAsDefault) Parameters Type Name Description GeoJSONOptions options Boolean geographyAsDefault Methods | Improve this Doc View Source Create(NpgsqlConnector) Declaration public override TypeHandlerResolver Create(NpgsqlConnector connector) Parameters Type Name Description NpgsqlConnector connector Returns Type Description TypeHandlerResolver Overrides TypeHandlerResolverFactory.Create(NpgsqlConnector) | Improve this Doc View Source GetDataTypeNameByClrType(Type) Declaration public override string? GetDataTypeNameByClrType(Type type) Parameters Type Name Description Type type Returns Type Description Nullable < String > | Improve this Doc View Source GetMappingByDataTypeName(String) Declaration public override TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo"
  },
  "doc/api/Npgsql.GeoJSON.Internal.html": {
    "href": "doc/api/Npgsql.GeoJSON.Internal.html",
    "title": "Namespace Npgsql.GeoJSON.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.GeoJSON.Internal Classes GeoJSONTypeHandlerResolver GeoJSONTypeHandlerResolverFactory"
  },
  "doc/api/Npgsql.GeoJSONOptions.html": {
    "href": "doc/api/Npgsql.GeoJSONOptions.html",
    "title": "Enum GeoJSONOptions | Npgsql Documentation",
    "keywords": "Enum GeoJSONOptions Namespace : Npgsql Assembly : Npgsql.GeoJSON.dll Syntax public enum GeoJSONOptions : int Fields Name Description BoundingBox LongCRS None ShortCRS"
  },
  "doc/api/Npgsql.html": {
    "href": "doc/api/Npgsql.html",
    "title": "Namespace Npgsql | Npgsql Documentation",
    "keywords": "Namespace Npgsql Classes NpgsqlBatch NpgsqlBatchCommand NpgsqlBatchCommandCollection NpgsqlBinaryExporter Provides an API for a binary COPY TO operation, a high-performance data export mechanism from a PostgreSQL table. Initiated by BeginBinaryExport(String) NpgsqlBinaryImporter Provides an API for a binary COPY FROM operation, a high-performance data import mechanism to a PostgreSQL table. Initiated by BeginBinaryImport(String) NpgsqlCommand Represents a SQL statement or function (stored procedure) to execute against a PostgreSQL database. This class cannot be inherited. NpgsqlCommandBuilder This class creates database commands for automatic insert, update and delete operations. NpgsqlConnection This class represents a connection to a PostgreSQL server. NpgsqlConnectionStringBuilder Provides a simple way to create and manage the contents of connection strings used by the NpgsqlConnection class. NpgsqlCopyTextReader Reader for a text export, initiated by BeginTextExport(String) . NpgsqlCopyTextWriter Writer for a text import, initiated by BeginTextImport(String) . NpgsqlDataAdapter This class represents an adapter from many commands: select, update, insert and delete to fill a . NpgsqlDataReader Reads a forward-only stream of rows from a data source. NpgsqlDataSource NpgsqlDataSourceBuilder Provides a simple API for configuring and creating an NpgsqlDataSource , from which database connections can be obtained. NpgsqlEventId NpgsqlException The exception that is thrown when server-related issues occur. NpgsqlFactory A factory to create instances of various Npgsql objects. NpgsqlGeoJSONExtensions Extension allowing adding the GeoJSON plugin to an Npgsql type mapper. NpgsqlJsonNetExtensions Extension allowing adding the Json.NET plugin to an Npgsql type mapper. NpgsqlLargeObjectManager Large object manager. This class can be used to store very large files in a PostgreSQL database. NpgsqlLargeObjectStream An interface to remotely control the seekable stream for an opened large object on a PostgreSQL server. Note that the OpenRead/OpenReadWrite method as well as all operations performed on this stream must be wrapped inside a database transaction. NpgsqlLoggingConfiguration Configures Npgsql logging NpgsqlMultiHostDataSource An NpgsqlDataSource which manages connections for multiple hosts, is aware of their states (primary, secondary, offline...) and can perform failover and load balancing across them. NpgsqlNestedDataReader Reads a forward-only stream of rows from a nested data source. Can be retrieved using GetData(Int32) or GetData(Int32) . NpgsqlNetTopologySuiteExtensions Extension allowing adding the NetTopologySuite plugin to an Npgsql type mapper. NpgsqlNodaTimeExtensions Extension adding the NodaTime plugin to an Npgsql type mapper. NpgsqlNoticeEventArgs Provides data for a PostgreSQL notice event. NpgsqlNotificationEventArgs Provides information on a PostgreSQL notification. Notifications are sent when your connection has registered for notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel. NpgsqlOperationInProgressException Thrown when trying to use a connection that is already busy performing some other operation. Provides information on the already-executing operation to help with debugging. NpgsqlParameter This class represents a parameter to a command that will be sent to server NpgsqlParameter<T> A generic version of NpgsqlParameter which provides more type safety and avoids boxing of value types. Use TypedValue instead of Value . NpgsqlParameterCollection Represents a collection of parameters relevant to a NpgsqlCommand as well as their respective mappings to columns in a . NpgsqlRawCopyStream Provides an API for a raw binary COPY operation, a high-performance data import/export mechanism to a PostgreSQL table. Initiated by BeginRawBinaryCopy(String) NpgsqlRowUpdatedEventArgs NpgsqlRowUpdatingEventArgs NpgsqlTracingOptions Options to configure Npgsql's support for OpenTelemetry tracing. Currently no options are available. NpgsqlTransaction Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited. PostgresErrorCodes Provides constants for PostgreSQL error codes. PostgresException The exception that is thrown when the PostgreSQL backend reports errors (e.g. query SQL issues, constraint violations). PostgresNotice PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator initiates a \"fast\" database shutdown). TracerProviderBuilderExtensions Extension method for setting up Npgsql OpenTelemetry tracing. Interfaces INpgsqlNameTranslator A component which translates a CLR name (e.g. SomeClass) into a database name (e.g. some_class) according to some scheme. Used for mapping enum and composite types. Enums ArrayNullabilityMode Specifies how the mapping of arrays of value types behaves with respect to nullability when they are requested via an API returning an . GeoJSONOptions ServerCompatibilityMode An option specified in the connection string that activates special compatibility features. SslMode Specifies how to manage SSL. StatementType Specifies the type of SQL statement, e.g. SELECT TargetSessionAttributes Specifies server type preference. Delegates NoticeEventHandler Represents a method that handles the Notice event. NotificationEventHandler Represents a method that handles the Notification event. NpgsqlRowUpdatedEventHandler Represents the method that handles the RowUpdated events. NpgsqlRowUpdatingEventHandler Represents the method that handles the RowUpdating events. ProvideClientCertificatesCallback Represents a method that allows the application to provide a certificate collection to be used for SSL client authentication ProvidePasswordCallback Represents a method that allows the application to provide a password at connection time in code rather than configuration"
  },
  "doc/api/Npgsql.INpgsqlNameTranslator.html": {
    "href": "doc/api/Npgsql.INpgsqlNameTranslator.html",
    "title": "Interface INpgsqlNameTranslator | Npgsql Documentation",
    "keywords": "Interface INpgsqlNameTranslator A component which translates a CLR name (e.g. SomeClass) into a database name (e.g. some_class) according to some scheme. Used for mapping enum and composite types. Namespace : Npgsql Assembly : Npgsql.dll Syntax public interface INpgsqlNameTranslator Methods | Improve this Doc View Source TranslateMemberName(String) Given a CLR member name (property or field), translates its name to a database type name. Declaration string TranslateMemberName(string clrName) Parameters Type Name Description String clrName Returns Type Description String | Improve this Doc View Source TranslateTypeName(String) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration string TranslateTypeName(string clrName) Parameters Type Name Description String clrName Returns Type Description String"
  },
  "doc/api/Npgsql.Internal.html": {
    "href": "doc/api/Npgsql.Internal.html",
    "title": "Namespace Npgsql.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal Classes NpgsqlConnector Represents a connection to a PostgreSQL backend. Unlike NpgsqlConnection objects, which are exposed to users, connectors are internal to Npgsql and are recycled by the connection pool. NpgsqlDatabaseInfo Base class for implementations which provide information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...). NpgsqlReadBuffer A buffer used by Npgsql to read data from the socket efficiently. Provides methods which decode different values types and tracks the current position. NpgsqlWriteBuffer A buffer used by Npgsql to write data to the socket efficiently. Provides methods which encode different values types and tracks the current position. Interfaces INpgsqlDatabaseInfoFactory A factory which get generate instances of NpgsqlDatabaseInfo , which describe a database and the types it contains. When first connecting to a database, Npgsql will attempt to load information about it via this factory."
  },
  "doc/api/Npgsql.Internal.INpgsqlDatabaseInfoFactory.html": {
    "href": "doc/api/Npgsql.Internal.INpgsqlDatabaseInfoFactory.html",
    "title": "Interface INpgsqlDatabaseInfoFactory | Npgsql Documentation",
    "keywords": "Interface INpgsqlDatabaseInfoFactory A factory which get generate instances of NpgsqlDatabaseInfo , which describe a database and the types it contains. When first connecting to a database, Npgsql will attempt to load information about it via this factory. Namespace : Npgsql.Internal Assembly : Npgsql.dll Syntax public interface INpgsqlDatabaseInfoFactory Methods | Improve this Doc View Source Load(NpgsqlConnector, NpgsqlTimeout, Boolean) Given a connection, loads all necessary information about the connected database, e.g. its types. A factory should only handle the exact database type it was meant for, and return null otherwise. Declaration Task<NpgsqlDatabaseInfo> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async) Parameters Type Name Description NpgsqlConnector conn NpgsqlTimeout timeout Boolean async Returns Type Description Task < NpgsqlDatabaseInfo > An object describing the database to which conn is connected, or null if the database isn't of the correct type and isn't handled by this factory."
  },
  "doc/api/Npgsql.Internal.NpgsqlConnector.html": {
    "href": "doc/api/Npgsql.Internal.NpgsqlConnector.html",
    "title": "Class NpgsqlConnector | Npgsql Documentation",
    "keywords": "Class NpgsqlConnector Represents a connection to a PostgreSQL backend. Unlike NpgsqlConnection objects, which are exposed to users, connectors are internal to Npgsql and are recycled by the connection pool. Inheritance Object NpgsqlConnector Namespace : Npgsql.Internal Assembly : Npgsql.dll Syntax public sealed class NpgsqlConnector : IDisposable Properties | Improve this Doc View Source DatabaseInfo Information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...). Declaration public NpgsqlDatabaseInfo DatabaseInfo { get; } Property Value Type Description NpgsqlDatabaseInfo | Improve this Doc View Source Settings The parsed connection string. Declaration public NpgsqlConnectionStringBuilder Settings { get; } Property Value Type Description NpgsqlConnectionStringBuilder | Improve this Doc View Source TextEncoding Declaration public Encoding TextEncoding { get; } Property Value Type Description Encoding Methods | Improve this Doc View Source CreateCommand(Nullable<String>) Creates and returns a NpgsqlCommand object associated with the NpgsqlConnector . Declaration public NpgsqlCommand CreateCommand(string? cmdText = null) Parameters Type Name Description Nullable < String > cmdText The text of the query. Returns Type Description NpgsqlCommand A NpgsqlCommand object. | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "doc/api/Npgsql.Internal.NpgsqlDatabaseInfo.html": {
    "href": "doc/api/Npgsql.Internal.NpgsqlDatabaseInfo.html",
    "title": "Class NpgsqlDatabaseInfo | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseInfo Base class for implementations which provide information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...). Inheritance Object NpgsqlDatabaseInfo Namespace : Npgsql.Internal Assembly : Npgsql.dll Syntax public abstract class NpgsqlDatabaseInfo : object Constructors | Improve this Doc View Source NpgsqlDatabaseInfo(String, Int32, String, Version) Initializes the instance of NpgsqlDatabaseInfo . Declaration protected NpgsqlDatabaseInfo(string host, int port, string databaseName, Version version) Parameters Type Name Description String host Int32 port String databaseName Version version | Improve this Doc View Source NpgsqlDatabaseInfo(String, Int32, String, Version, String) Initializes the instance of NpgsqlDatabaseInfo . Declaration protected NpgsqlDatabaseInfo(string host, int port, string databaseName, Version version, string serverVersion) Parameters Type Name Description String host Int32 port String databaseName Version version String serverVersion Properties | Improve this Doc View Source HasIntegerDateTimes Reports whether the backend uses the newer integer timestamp representation. Declaration public virtual bool HasIntegerDateTimes { get; protected set; } Property Value Type Description Boolean | Improve this Doc View Source Host The hostname of IP address of the database. Declaration public string Host { get; } Property Value Type Description String | Improve this Doc View Source Name The database name. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Port The TCP port of the database. Declaration public int Port { get; } Property Value Type Description Int32 | Improve this Doc View Source ServerVersion The PostgreSQL version string as returned by the server_version option. Populated during loading. Declaration public string ServerVersion { get; } Property Value Type Description String | Improve this Doc View Source SupportsAdvisoryLocks Whether the backend supports advisory locks. Declaration public virtual bool SupportsAdvisoryLocks { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsCloseAll Whether the backend supports the CLOSE ALL statement. Declaration public virtual bool SupportsCloseAll { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsDiscard Whether the backend supports the DISCARD statement. Declaration public virtual bool SupportsDiscard { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsDiscardSequences Whether the backend supports the DISCARD SEQUENCES statement. Declaration public virtual bool SupportsDiscardSequences { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsDiscardTemp Whether the backend supports the DISCARD TEMP statement. Declaration public virtual bool SupportsDiscardTemp { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsEnumTypes Whether the backend supports enum types. Declaration public virtual bool SupportsEnumTypes { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsMultirangeTypes Whether the backend supports multirange types. Declaration public virtual bool SupportsMultirangeTypes { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsRangeTypes Whether the backend supports range types. Declaration public virtual bool SupportsRangeTypes { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsTransactions Whether the database supports transactions. Declaration public virtual bool SupportsTransactions { get; protected set; } Property Value Type Description Boolean | Improve this Doc View Source SupportsUnlisten Whether the backend supports the UNLISTEN statement. Declaration public virtual bool SupportsUnlisten { get; } Property Value Type Description Boolean | Improve this Doc View Source Version The version of the PostgreSQL database we're connected to, as reported in the \"server_version\" parameter. Exposed via PostgreSqlVersion . Declaration public Version Version { get; } Property Value Type Description Version Methods | Improve this Doc View Source GetPostgresTypeByName(String) Declaration public PostgresType GetPostgresTypeByName(string pgName) Parameters Type Name Description String pgName Returns Type Description PostgresType | Improve this Doc View Source GetTypes() Provides all PostgreSQL types detected in this database. Declaration protected abstract IEnumerable<PostgresType> GetTypes() Returns Type Description IEnumerable < PostgresType > | Improve this Doc View Source ParseServerVersion(String) Parses a PostgreSQL server version (e.g. 10.1, 9.6.3) and returns a CLR Version. Declaration protected static Version ParseServerVersion(string value) Parameters Type Name Description String value Returns Type Description Version | Improve this Doc View Source RegisterFactory(INpgsqlDatabaseInfoFactory) Registers a new database info factory, which is used to load information about databases. Declaration public static void RegisterFactory(INpgsqlDatabaseInfoFactory factory) Parameters Type Name Description INpgsqlDatabaseInfoFactory factory | Improve this Doc View Source TryGetPostgresTypeByName(String, out PostgresType) Declaration public bool TryGetPostgresTypeByName(string pgName, out PostgresType pgType) Parameters Type Name Description String pgName PostgresType pgType Returns Type Description Boolean"
  },
  "doc/api/Npgsql.Internal.NpgsqlReadBuffer.html": {
    "href": "doc/api/Npgsql.Internal.NpgsqlReadBuffer.html",
    "title": "Class NpgsqlReadBuffer | Npgsql Documentation",
    "keywords": "Class NpgsqlReadBuffer A buffer used by Npgsql to read data from the socket efficiently. Provides methods which decode different values types and tracks the current position. Inheritance Object NpgsqlReadBuffer Namespace : Npgsql.Internal Assembly : Npgsql.dll Syntax public sealed class NpgsqlReadBuffer : IDisposable Properties | Improve this Doc View Source Connection Declaration public NpgsqlConnection Connection { get; } Property Value Type Description NpgsqlConnection Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Ensure(Int32, Boolean) Declaration public Task Ensure(int count, bool async) Parameters Type Name Description Int32 count Boolean async Returns Type Description Task | Improve this Doc View Source EnsureAsync(Int32) Declaration public Task EnsureAsync(int count) Parameters Type Name Description Int32 count Returns Type Description Task | Improve this Doc View Source GetNullTerminatedBytes() Declaration public ReadOnlySpan<byte> GetNullTerminatedBytes() Returns Type Description ReadOnlySpan < Byte > | Improve this Doc View Source GetPreparedTextReader(String, Stream) Declaration public TextReader GetPreparedTextReader(string str, Stream stream) Parameters Type Name Description String str Stream stream Returns Type Description TextReader | Improve this Doc View Source GetStream(Int32, Boolean) Declaration public Stream GetStream(int len, bool canSeek) Parameters Type Name Description Int32 len Boolean canSeek Returns Type Description Stream | Improve this Doc View Source Read(Span<Byte>) Declaration public int Read(Span<byte> output) Parameters Type Name Description Span < Byte > output Returns Type Description Int32 | Improve this Doc View Source ReadAsync(Memory<Byte>, CancellationToken) Declaration public ValueTask<int> ReadAsync(Memory<byte> output, CancellationToken cancellationToken = null) Parameters Type Name Description Memory < Byte > output CancellationToken cancellationToken Returns Type Description ValueTask < Int32 > | Improve this Doc View Source ReadByte() Declaration public byte ReadByte() Returns Type Description Byte | Improve this Doc View Source ReadBytes(Span<Byte>) Declaration public void ReadBytes(Span<byte> output) Parameters Type Name Description Span < Byte > output | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public void ReadBytes(byte[] output, int outputOffset, int len) Parameters Type Name Description Byte [] output Int32 outputOffset Int32 len | Improve this Doc View Source ReadChars(Int32) Declaration public char[] ReadChars(int byteLen) Parameters Type Name Description Int32 byteLen Returns Type Description Char [] | Improve this Doc View Source ReadDouble() Declaration public double ReadDouble() Returns Type Description Double | Improve this Doc View Source ReadDouble(Boolean) Declaration public double ReadDouble(bool littleEndian) Parameters Type Name Description Boolean littleEndian Returns Type Description Double | Improve this Doc View Source ReadInt16() Declaration public short ReadInt16() Returns Type Description Int16 | Improve this Doc View Source ReadInt16(Boolean) Declaration public short ReadInt16(bool littleEndian) Parameters Type Name Description Boolean littleEndian Returns Type Description Int16 | Improve this Doc View Source ReadInt32() Declaration public int ReadInt32() Returns Type Description Int32 | Improve this Doc View Source ReadInt32(Boolean) Declaration public int ReadInt32(bool littleEndian) Parameters Type Name Description Boolean littleEndian Returns Type Description Int32 | Improve this Doc View Source ReadInt64() Declaration public long ReadInt64() Returns Type Description Int64 | Improve this Doc View Source ReadInt64(Boolean) Declaration public long ReadInt64(bool littleEndian) Parameters Type Name Description Boolean littleEndian Returns Type Description Int64 | Improve this Doc View Source ReadMemory(Int32) Declaration public ReadOnlyMemory<byte> ReadMemory(int len) Parameters Type Name Description Int32 len Returns Type Description ReadOnlyMemory < Byte > | Improve this Doc View Source ReadNullTerminatedString() Seeks the first null terminator (\\0) and returns the string up to it. The buffer must already contain the entire string and its terminator. Declaration public string ReadNullTerminatedString() Returns Type Description String | Improve this Doc View Source ReadNullTerminatedString(Boolean, CancellationToken) Declaration public ValueTask<string> ReadNullTerminatedString(bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Boolean async CancellationToken cancellationToken Returns Type Description ValueTask < String > | Improve this Doc View Source ReadNullTerminatedStringRelaxed() Seeks the first null terminator (\\0) and returns the string up to it. The buffer must already contain the entire string and its terminator. If any character could not be decoded, a question mark character is returned instead of throwing an exception. Declaration public string ReadNullTerminatedStringRelaxed() Returns Type Description String | Improve this Doc View Source ReadSByte() Declaration public sbyte ReadSByte() Returns Type Description SByte | Improve this Doc View Source ReadSingle() Declaration public float ReadSingle() Returns Type Description Single | Improve this Doc View Source ReadSingle(Boolean) Declaration public float ReadSingle(bool littleEndian) Parameters Type Name Description Boolean littleEndian Returns Type Description Single | Improve this Doc View Source ReadSpan(Int32) Declaration public ReadOnlySpan<byte> ReadSpan(int len) Parameters Type Name Description Int32 len Returns Type Description ReadOnlySpan < Byte > | Improve this Doc View Source ReadString(Int32) Declaration public string ReadString(int byteLen) Parameters Type Name Description Int32 byteLen Returns Type Description String | Improve this Doc View Source ReadUInt16() Declaration public ushort ReadUInt16() Returns Type Description UInt16 | Improve this Doc View Source ReadUInt16(Boolean) Declaration public ushort ReadUInt16(bool littleEndian) Parameters Type Name Description Boolean littleEndian Returns Type Description UInt16 | Improve this Doc View Source ReadUInt32() Declaration public uint ReadUInt32() Returns Type Description UInt32 | Improve this Doc View Source ReadUInt32(Boolean) Declaration public uint ReadUInt32(bool littleEndian) Parameters Type Name Description Boolean littleEndian Returns Type Description UInt32 | Improve this Doc View Source ReadUInt64() Declaration public ulong ReadUInt64() Returns Type Description UInt64 | Improve this Doc View Source ReadUInt64(Boolean) Declaration public ulong ReadUInt64(bool littleEndian) Parameters Type Name Description Boolean littleEndian Returns Type Description UInt64 | Improve this Doc View Source Skip(Int64, Boolean) Skip a given number of bytes. Declaration public async Task Skip(long len, bool async) Parameters Type Name Description Int64 len Boolean async Returns Type Description Task"
  },
  "doc/api/Npgsql.Internal.NpgsqlWriteBuffer.html": {
    "href": "doc/api/Npgsql.Internal.NpgsqlWriteBuffer.html",
    "title": "Class NpgsqlWriteBuffer | Npgsql Documentation",
    "keywords": "Class NpgsqlWriteBuffer A buffer used by Npgsql to write data to the socket efficiently. Provides methods which encode different values types and tracks the current position. Inheritance Object NpgsqlWriteBuffer Namespace : Npgsql.Internal Assembly : Npgsql.dll Syntax public sealed class NpgsqlWriteBuffer : IDisposable Properties | Improve this Doc View Source WriteSpaceLeft Declaration public int WriteSpaceLeft { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Flush(Boolean, CancellationToken) Declaration public async Task Flush(bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source GetStream() Declaration public Stream GetStream() Returns Type Description Stream | Improve this Doc View Source WriteByte(Byte) Declaration public void WriteByte(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source WriteBytes(ReadOnlySpan<Byte>) Declaration public void WriteBytes(ReadOnlySpan<byte> buf) Parameters Type Name Description ReadOnlySpan < Byte > buf | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public void WriteBytes(byte[] buf, int offset, int count) Parameters Type Name Description Byte [] buf Int32 offset Int32 count | Improve this Doc View Source WriteBytesRaw(Byte[], Boolean, CancellationToken) Declaration public Task WriteBytesRaw(byte[] bytes, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Byte [] bytes Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source WriteDouble(Double) Declaration public void WriteDouble(double value) Parameters Type Name Description Double value | Improve this Doc View Source WriteDouble(Double, Boolean) Declaration public void WriteDouble(double value, bool littleEndian) Parameters Type Name Description Double value Boolean littleEndian | Improve this Doc View Source WriteInt16(Int16) Declaration public void WriteInt16(short value) Parameters Type Name Description Int16 value | Improve this Doc View Source WriteInt16(Int16, Boolean) Declaration public void WriteInt16(short value, bool littleEndian) Parameters Type Name Description Int16 value Boolean littleEndian | Improve this Doc View Source WriteInt32(Int32) Declaration public void WriteInt32(int value) Parameters Type Name Description Int32 value | Improve this Doc View Source WriteInt32(Int32, Boolean) Declaration public void WriteInt32(int value, bool littleEndian) Parameters Type Name Description Int32 value Boolean littleEndian | Improve this Doc View Source WriteInt64(Int64) Declaration public void WriteInt64(long value) Parameters Type Name Description Int64 value | Improve this Doc View Source WriteInt64(Int64, Boolean) Declaration public void WriteInt64(long value, bool littleEndian) Parameters Type Name Description Int64 value Boolean littleEndian | Improve this Doc View Source WriteNullTerminatedString(String) Declaration public void WriteNullTerminatedString(string s) Parameters Type Name Description String s | Improve this Doc View Source WriteSByte(SByte) Declaration public void WriteSByte(sbyte value) Parameters Type Name Description SByte value | Improve this Doc View Source WriteSingle(Single) Declaration public void WriteSingle(float value) Parameters Type Name Description Single value | Improve this Doc View Source WriteSingle(Single, Boolean) Declaration public void WriteSingle(float value, bool littleEndian) Parameters Type Name Description Single value Boolean littleEndian | Improve this Doc View Source WriteStreamRaw(Stream, Int32, Boolean, CancellationToken) Declaration public async Task WriteStreamRaw(Stream stream, int count, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Stream stream Int32 count Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source WriteString(String, Int32) Declaration public void WriteString(string s, int len = 0) Parameters Type Name Description String s Int32 len | Improve this Doc View Source WriteString(String, Int32, Boolean, CancellationToken) Declaration public Task WriteString(string s, int byteLen, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description String s Int32 byteLen Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source WriteString(String, Int32, Int32, Boolean, CancellationToken) Declaration public Task WriteString(string s, int charLen, int byteLen, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description String s Int32 charLen Int32 byteLen Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source WriteUInt16(UInt16) Declaration public void WriteUInt16(ushort value) Parameters Type Name Description UInt16 value | Improve this Doc View Source WriteUInt16(UInt16, Boolean) Declaration public void WriteUInt16(ushort value, bool littleEndian) Parameters Type Name Description UInt16 value Boolean littleEndian | Improve this Doc View Source WriteUInt32(UInt32) Declaration public void WriteUInt32(uint value) Parameters Type Name Description UInt32 value | Improve this Doc View Source WriteUInt32(UInt32, Boolean) Declaration public void WriteUInt32(uint value, bool littleEndian) Parameters Type Name Description UInt32 value Boolean littleEndian | Improve this Doc View Source WriteUInt64(UInt64) Declaration public void WriteUInt64(ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source WriteUInt64(UInt64, Boolean) Declaration public void WriteUInt64(ulong value, bool littleEndian) Parameters Type Name Description UInt64 value Boolean littleEndian"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.ArrayHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.ArrayHandler.html",
    "title": "Class ArrayHandler | Npgsql Documentation",
    "keywords": "Class ArrayHandler Non-generic base class for all type handlers which handle PostgreSQL arrays. Extend from ArrayHandler<TElement> instead. Inheritance Object NpgsqlTypeHandler ArrayHandler ArrayHandler <TElement> Inherited Members NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public abstract class ArrayHandler : NpgsqlTypeHandler Remarks https://www.postgresql.org/docs/current/static/arrays.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source ArrayHandler(PostgresType, NpgsqlTypeHandler, ArrayNullabilityMode, Int32) Declaration protected ArrayHandler(PostgresType arrayPostgresType, NpgsqlTypeHandler elementHandler, ArrayNullabilityMode arrayNullabilityMode, int lowerBound = 1) Parameters Type Name Description PostgresType arrayPostgresType NpgsqlTypeHandler elementHandler ArrayNullabilityMode arrayNullabilityMode Int32 lowerBound Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) Creates a type handler for arrays of this handler's type. Declaration public override NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode) Parameters Type Name Description PostgresArrayType pgArrayType ArrayNullabilityMode arrayNullabilityMode Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) | Improve this Doc View Source CreateMultirangeHandler(PostgresMultirangeType) Creates a type handler for multiranges of this handler's type. Declaration public override NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgMultirangeType) Parameters Type Name Description PostgresMultirangeType pgMultirangeType Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) | Improve this Doc View Source CreateRangeHandler(PostgresType) Creates a type handler for ranges of this handler's type. Declaration public override NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType) Parameters Type Name Description PostgresType pgRangeType Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandler.CreateRangeHandler(PostgresType) | Improve this Doc View Source GetFieldType(FieldDescription) Declaration public override Type GetFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides NpgsqlTypeHandler.GetFieldType(FieldDescription) | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public override Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides NpgsqlTypeHandler.GetProviderSpecificFieldType(FieldDescription) | Improve this Doc View Source ReadArray<TRequestedElement>(NpgsqlReadBuffer, Boolean, Int32, Boolean) Reads an array of element type TRequestedElement from the given buffer buf . Declaration protected async ValueTask<Array> ReadArray<TRequestedElement>(NpgsqlReadBuffer buf, bool async, int expectedDimensions = 0, bool readAsObject = false) Parameters Type Name Description NpgsqlReadBuffer buf Boolean async Int32 expectedDimensions Boolean readAsObject Returns Type Description ValueTask < Array > Type Parameters Name Description TRequestedElement | Improve this Doc View Source ReadCustom<TRequestedArray>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration protected override async ValueTask<TRequestedArray> ReadCustom<TRequestedArray>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask <TRequestedArray> Type Parameters Name Description TRequestedArray Overrides NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ReadList<TRequestedElement>(NpgsqlReadBuffer, Boolean) Reads a generic list containing elements of type TRequestedElement from the given buffer buf . Declaration protected async ValueTask<List<TRequestedElement>> ReadList<TRequestedElement>(NpgsqlReadBuffer buf, bool async) Parameters Type Name Description NpgsqlReadBuffer buf Boolean async Returns Type Description ValueTask < List <TRequestedElement>> Type Parameters Name Description TRequestedElement"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.ArrayHandler-1.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.ArrayHandler-1.html",
    "title": "Class ArrayHandler<TElement> | Npgsql Documentation",
    "keywords": "Class ArrayHandler<TElement> Base class for all type handlers which handle PostgreSQL arrays. Inheritance Object NpgsqlTypeHandler ArrayHandler ArrayHandler<TElement> BitStringArrayHandler Inherited Members ArrayHandler.GetFieldType(FieldDescription) ArrayHandler.GetProviderSpecificFieldType(FieldDescription) ArrayHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) ArrayHandler.CreateRangeHandler(PostgresType) ArrayHandler.CreateMultirangeHandler(PostgresMultirangeType) ArrayHandler.ReadCustom<TRequestedArray>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) ArrayHandler.ReadArray<TRequestedElement>(NpgsqlReadBuffer, Boolean, Int32, Boolean) ArrayHandler.ReadList<TRequestedElement>(NpgsqlReadBuffer, Boolean) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class ArrayHandler<TElement> : ArrayHandler Type Parameters Name Description TElement Remarks https://www.postgresql.org/docs/current/static/arrays.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source ArrayHandler(PostgresType, NpgsqlTypeHandler, ArrayNullabilityMode, Int32) Declaration public ArrayHandler(PostgresType arrayPostgresType, NpgsqlTypeHandler elementHandler, ArrayNullabilityMode arrayNullabilityMode, int lowerBound = 1) Parameters Type Name Description PostgresType arrayPostgresType NpgsqlTypeHandler elementHandler ArrayNullabilityMode arrayNullabilityMode Int32 lowerBound Methods | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > Overrides NpgsqlTypeHandler.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ValidateAndGetLengthCustom<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected override int ValidateAndGetLengthCustom<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Type Parameters Name Description TAny Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateObjectAndGetLength(Nullable<Object>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateObjectAndGetLength(object? value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Nullable < Object > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer, using either sync or async I/O. Declaration public override Task WriteObjectWithLength(object? value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Nullable < Object > value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Overrides NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) | Improve this Doc View Source WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration protected override Task WriteWithLengthCustom<TAny>(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken) Parameters Type Name Description TAny value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description TAny Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken)"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.BitStringArrayHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.BitStringArrayHandler.html",
    "title": "Class BitStringArrayHandler | Npgsql Documentation",
    "keywords": "Class BitStringArrayHandler A special handler for arrays of bit strings. Differs from the standard array handlers in that it returns arrays of bool for BIT(1) and arrays of BitArray otherwise (just like the scalar BitStringHandler does). Inheritance Object NpgsqlTypeHandler ArrayHandler ArrayHandler < BitArray > BitStringArrayHandler Inherited Members ArrayHandler<BitArray>.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) ArrayHandler<BitArray>.ValidateObjectAndGetLength(Nullable<Object>, NpgsqlLengthCache, NpgsqlParameter) ArrayHandler<BitArray>.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) ArrayHandler<BitArray>.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) ArrayHandler.GetFieldType(FieldDescription) ArrayHandler.GetProviderSpecificFieldType(FieldDescription) ArrayHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) ArrayHandler.CreateRangeHandler(PostgresType) ArrayHandler.CreateMultirangeHandler(PostgresMultirangeType) ArrayHandler.ReadArray<TRequestedElement>(NpgsqlReadBuffer, Boolean, Int32, Boolean) ArrayHandler.ReadList<TRequestedElement>(NpgsqlReadBuffer, Boolean) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class BitStringArrayHandler : ArrayHandler<BitArray> Remarks The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source BitStringArrayHandler(PostgresType, BitStringHandler, ArrayNullabilityMode) Declaration public BitStringArrayHandler(PostgresType postgresType, BitStringHandler elementHandler, ArrayNullabilityMode arrayNullabilityMode) Parameters Type Name Description PostgresType postgresType BitStringHandler elementHandler ArrayNullabilityMode arrayNullabilityMode Methods | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > Overrides Npgsql.Internal.TypeHandlers.ArrayHandler<BitArray>.ReadAsObject(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadCustom<TRequestedArray>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration protected override async ValueTask<TRequestedArray> ReadCustom<TRequestedArray>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask <TRequestedArray> Type Parameters Name Description TRequestedArray Overrides ArrayHandler.ReadCustom<TRequestedArray>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription)"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.BitStringHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.BitStringHandler.html",
    "title": "Class BitStringHandler | Npgsql Documentation",
    "keywords": "Class BitStringHandler A type handler for the PostgreSQL bit string data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < BitArray > BitStringHandler Implements INpgsqlTypeHandler < BitArray > INpgsqlTypeHandler < BitVector32 > INpgsqlTypeHandler < Boolean > INpgsqlTypeHandler < String > Inherited Members NpgsqlTypeHandler<BitArray>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<BitArray>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class BitStringHandler : NpgsqlTypeHandler<BitArray>, INpgsqlTypeHandler<BitArray>, INpgsqlTypeHandler<BitVector32>, INpgsqlTypeHandler<bool>, INpgsqlTypeHandler<string> Remarks See https://www.postgresql.org/docs/current/static/datatype-bit.html . Note that for BIT(1), this handler will return a bool by default, to align with SQLClient (see discussion https://github.com/npgsql/npgsql/pull/362#issuecomment-59622101 ). The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source BitStringHandler(PostgresType) Declaration public BitStringHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) Creates a type handler for arrays of this handler's type. Declaration public override NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode) Parameters Type Name Description PostgresArrayType pgArrayType ArrayNullabilityMode arrayNullabilityMode Returns Type Description NpgsqlTypeHandler Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<BitArray>.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType, Npgsql.ArrayNullabilityMode) | Improve this Doc View Source GetFieldType(FieldDescription) Declaration public override Type GetFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<BitArray>.GetFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public override Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<BitArray>.GetProviderSpecificFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override async ValueTask<BitArray> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < BitArray > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<BitArray>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<BitArray>.ReadAsObject(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(BitArray, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(BitArray value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description BitArray value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<BitArray>.ValidateAndGetLength(BitArray, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(BitVector32, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(BitVector32 value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description BitVector32 value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Boolean, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(bool value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Boolean value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description String value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(BitArray, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override async Task Write(BitArray value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description BitArray value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<BitArray>.Write(BitArray, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) | Improve this Doc View Source Write(BitVector32, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public async Task Write(BitVector32 value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description BitVector32 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Boolean, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public async Task Write(bool value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Boolean value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public async Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description String value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<BitVector32>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<BitVector32> INpgsqlTypeHandler<BitVector32>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < BitVector32 > | Improve this Doc View Source INpgsqlTypeHandler<Boolean>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<bool> INpgsqlTypeHandler<bool>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Boolean > | Improve this Doc View Source INpgsqlTypeHandler<String>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<string> INpgsqlTypeHandler<string>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < String > Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.BoolHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.BoolHandler.html",
    "title": "Class BoolHandler | Npgsql Documentation",
    "keywords": "Class BoolHandler A type handler for the PostgreSQL bool data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Boolean > NpgsqlSimpleTypeHandler < Boolean > BoolHandler Implements INpgsqlTypeHandler < Boolean > INpgsqlSimpleTypeHandler < Boolean > Inherited Members NpgsqlSimpleTypeHandler<Boolean>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Boolean>.Write(Boolean, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<Boolean>.ValidateAndGetLength(Boolean, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Boolean>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Boolean>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Boolean>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Boolean>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Boolean>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Boolean>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class BoolHandler : NpgsqlSimpleTypeHandler<bool>, INpgsqlTypeHandler<bool>, INpgsqlSimpleTypeHandler<bool> Remarks See https://www.postgresql.org/docs/current/static/datatype-boolean.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source BoolHandler(PostgresType) Declaration public BoolHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override bool Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description Boolean The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Boolean>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Boolean, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(bool value, NpgsqlParameter parameter) Parameters Type Name Description Boolean value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Boolean>.ValidateAndGetLength(System.Boolean, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Boolean, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(bool value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Boolean value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Boolean>.Write(System.Boolean, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.ByteaHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.ByteaHandler.html",
    "title": "Class ByteaHandler | Npgsql Documentation",
    "keywords": "Class ByteaHandler A type handler for the PostgreSQL bytea data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Byte []> ByteaHandler Implements INpgsqlTypeHandler < Byte []> INpgsqlTypeHandler < ArraySegment < Byte >> INpgsqlTypeHandler < Stream > INpgsqlTypeHandler < ReadOnlyMemory < Byte >> INpgsqlTypeHandler < Memory < Byte >> Inherited Members NpgsqlTypeHandler<Byte[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Byte[]>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Byte[]>.ValidateAndGetLength(Byte[], NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Byte[]>.Write(Byte[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<Byte[]>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Byte[]>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Byte[]>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Byte[]>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Byte[]>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.GetFieldType(FieldDescription) NpgsqlTypeHandler.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler.CreateRangeHandler(PostgresType) NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class ByteaHandler : NpgsqlTypeHandler<byte[]>, INpgsqlTypeHandler<byte[]>, INpgsqlTypeHandler<ArraySegment<byte>>, INpgsqlTypeHandler<Stream>, INpgsqlTypeHandler<ReadOnlyMemory<byte>>, INpgsqlTypeHandler<Memory<byte>> Remarks See https://www.postgresql.org/docs/current/static/datatype-binary.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source ByteaHandler(PostgresType) Declaration public ByteaHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override async ValueTask<byte[]> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < Byte []> The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.Byte[]>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(ArraySegment<Byte>, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(ArraySegment<byte> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description ArraySegment < Byte > value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Memory<Byte>, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(Memory<byte> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Memory < Byte > value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(ReadOnlyMemory<Byte>, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(ReadOnlyMemory<byte> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description ReadOnlyMemory < Byte > value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Stream, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(Stream value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Stream value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Byte[], ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(byte[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Byte [] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.Byte[]>.ValidateAndGetLength(System.Byte[], Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(ArraySegment<Byte>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(ArraySegment<byte> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description ArraySegment < Byte > value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Memory<Byte>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(Memory<byte> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Memory < Byte > value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(ReadOnlyMemory<Byte>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public async Task Write(ReadOnlyMemory<byte> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description ReadOnlyMemory < Byte > value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Stream, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(Stream value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Stream value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Byte[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override Task Write(byte[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Byte [] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.Byte[]>.Write(System.Byte[], Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<ArraySegment<Byte>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<ArraySegment<byte>> INpgsqlTypeHandler<ArraySegment<byte>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < ArraySegment < Byte >> | Improve this Doc View Source INpgsqlTypeHandler<Memory<Byte>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<Memory<byte>> INpgsqlTypeHandler<Memory<byte>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Memory < Byte >> | Improve this Doc View Source INpgsqlTypeHandler<ReadOnlyMemory<Byte>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<ReadOnlyMemory<byte>> INpgsqlTypeHandler<ReadOnlyMemory<byte>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescriptioncancellationToken) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescriptioncancellationToken Returns Type Description ValueTask < ReadOnlyMemory < Byte >> | Improve this Doc View Source INpgsqlTypeHandler<Stream>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<Stream> INpgsqlTypeHandler<Stream>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Stream > Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.DateHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.DateHandler.html",
    "title": "Class DateHandler | Npgsql Documentation",
    "keywords": "Class DateHandler A type handler for the PostgreSQL date data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < DateTime > NpgsqlSimpleTypeHandler < DateTime > DateHandler Implements INpgsqlTypeHandler < DateTime > INpgsqlSimpleTypeHandler < DateTime > INpgsqlSimpleTypeHandler < Int32 > Inherited Members NpgsqlSimpleTypeHandler<DateTime>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTime>.Write(DateTime, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength(DateTime, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<DateTime>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<DateTime>.GetFieldType(FieldDescription) NpgsqlTypeHandler<DateTime>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<DateTime>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<DateTime>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<DateTime>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class DateHandler : NpgsqlSimpleTypeHandler<DateTime>, INpgsqlTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<int> Remarks See https://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source DateHandler(PostgresType) Constructs a DateHandler Declaration public DateHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override DateTime Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description DateTime The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTime>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(DateTime, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(DateTime value, NpgsqlParameter parameter) Parameters Type Name Description DateTime value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength(DateTime, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(DateTime, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description DateTime value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTime>.Write(DateTime, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration int INpgsqlSimpleTypeHandler<int>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int32 Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.html",
    "title": "Namespace Npgsql.Internal.TypeHandlers.DateTimeHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeHandlers.DateTimeHandlers Classes DateHandler A type handler for the PostgreSQL date data type. IntervalHandler A type handler for the PostgreSQL date interval type. TimeHandler A type handler for the PostgreSQL time data type. TimestampHandler A type handler for the PostgreSQL timestamp data type. TimestampTzHandler A type handler for the PostgreSQL timestamptz data type. TimeTzHandler A type handler for the PostgreSQL timetz data type."
  },
  "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.IntervalHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.IntervalHandler.html",
    "title": "Class IntervalHandler | Npgsql Documentation",
    "keywords": "Class IntervalHandler A type handler for the PostgreSQL date interval type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < TimeSpan > NpgsqlSimpleTypeHandler < TimeSpan > IntervalHandler Implements INpgsqlTypeHandler < TimeSpan > INpgsqlSimpleTypeHandler < TimeSpan > INpgsqlSimpleTypeHandler < NpgsqlInterval > Inherited Members NpgsqlSimpleTypeHandler<TimeSpan>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<TimeSpan>.Write(TimeSpan, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<TimeSpan>.ValidateAndGetLength(TimeSpan, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<TimeSpan>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<TimeSpan>.GetFieldType(FieldDescription) NpgsqlTypeHandler<TimeSpan>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<TimeSpan>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<TimeSpan>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<TimeSpan>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class IntervalHandler : NpgsqlSimpleTypeHandler<TimeSpan>, INpgsqlTypeHandler<TimeSpan>, INpgsqlSimpleTypeHandler<TimeSpan>, INpgsqlSimpleTypeHandler<NpgsqlInterval> Remarks See https://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source IntervalHandler(PostgresType) Constructs an IntervalHandler Declaration public IntervalHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override TimeSpan Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description TimeSpan The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<TimeSpan>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlInterval, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlInterval value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInterval value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(TimeSpan, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(TimeSpan value, NpgsqlParameter parameter) Parameters Type Name Description TimeSpan value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<TimeSpan>.ValidateAndGetLength(TimeSpan, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlInterval, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(NpgsqlInterval value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInterval value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(TimeSpan, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(TimeSpan value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description TimeSpan value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<TimeSpan>.Write(TimeSpan, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<NpgsqlInterval>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration NpgsqlInterval INpgsqlSimpleTypeHandler<NpgsqlInterval>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlInterval Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimeHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimeHandler.html",
    "title": "Class TimeHandler | Npgsql Documentation",
    "keywords": "Class TimeHandler A type handler for the PostgreSQL time data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < TimeSpan > NpgsqlSimpleTypeHandler < TimeSpan > TimeHandler Implements INpgsqlTypeHandler < TimeSpan > INpgsqlSimpleTypeHandler < TimeSpan > Inherited Members NpgsqlSimpleTypeHandler<TimeSpan>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<TimeSpan>.Write(TimeSpan, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<TimeSpan>.ValidateAndGetLength(TimeSpan, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<TimeSpan>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<TimeSpan>.GetFieldType(FieldDescription) NpgsqlTypeHandler<TimeSpan>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<TimeSpan>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<TimeSpan>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<TimeSpan>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimeHandler : NpgsqlSimpleTypeHandler<TimeSpan>, INpgsqlTypeHandler<TimeSpan>, INpgsqlSimpleTypeHandler<TimeSpan> Remarks See https://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TimeHandler(PostgresType) Constructs a TimeHandler . Declaration public TimeHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override TimeSpan Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description TimeSpan The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<TimeSpan>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(TimeSpan, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(TimeSpan value, NpgsqlParameter parameter) Parameters Type Name Description TimeSpan value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<TimeSpan>.ValidateAndGetLength(TimeSpan, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(TimeSpan, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(TimeSpan value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description TimeSpan value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<TimeSpan>.Write(TimeSpan, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampHandler.html",
    "title": "Class TimestampHandler | Npgsql Documentation",
    "keywords": "Class TimestampHandler A type handler for the PostgreSQL timestamp data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < DateTime > NpgsqlSimpleTypeHandler < DateTime > TimestampHandler Implements INpgsqlTypeHandler < DateTime > INpgsqlSimpleTypeHandler < DateTime > INpgsqlSimpleTypeHandler < Int64 > Inherited Members NpgsqlSimpleTypeHandler<DateTime>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTime>.Write(DateTime, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength(DateTime, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<DateTime>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<DateTime>.GetFieldType(FieldDescription) NpgsqlTypeHandler<DateTime>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<DateTime>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<DateTime>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<DateTime>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimestampHandler : NpgsqlSimpleTypeHandler<DateTime>, INpgsqlTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<long> Remarks See https://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TimestampHandler(PostgresType) Constructs a TimestampHandler . Declaration public TimestampHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override DateTime Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description DateTime The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTime>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(DateTime, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(DateTime value, NpgsqlParameter parameter) Parameters Type Name Description DateTime value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength(DateTime, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(DateTime, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description DateTime value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTime>.Write(DateTime, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration long INpgsqlSimpleTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int64 Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.html",
    "title": "Class TimestampTzHandler | Npgsql Documentation",
    "keywords": "Class TimestampTzHandler A type handler for the PostgreSQL timestamptz data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < DateTime > NpgsqlSimpleTypeHandler < DateTime > TimestampTzHandler Implements INpgsqlTypeHandler < DateTime > INpgsqlSimpleTypeHandler < DateTime > INpgsqlSimpleTypeHandler < DateTimeOffset > INpgsqlSimpleTypeHandler < Int64 > Inherited Members NpgsqlSimpleTypeHandler<DateTime>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTime>.Write(DateTime, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength(DateTime, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<DateTime>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<DateTime>.GetFieldType(FieldDescription) NpgsqlTypeHandler<DateTime>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<DateTime>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<DateTime>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimestampTzHandler : NpgsqlSimpleTypeHandler<DateTime>, INpgsqlTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<DateTimeOffset>, INpgsqlSimpleTypeHandler<long> Remarks See https://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TimestampTzHandler(PostgresType) Constructs an TimestampTzHandler . Declaration public TimestampTzHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source CreateRangeHandler(PostgresType) Creates a type handler for ranges of this handler's type. Declaration public override NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType) Parameters Type Name Description PostgresType pgRangeType Returns Type Description NpgsqlTypeHandler Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<DateTime>.CreateRangeHandler(Npgsql.PostgresTypes.PostgresType) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override DateTime Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description DateTime The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTime>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(DateTime, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(DateTime value, NpgsqlParameter parameter) Parameters Type Name Description DateTime value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength(DateTime, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(DateTimeOffset, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(DateTimeOffset value, NpgsqlParameter parameter) Parameters Type Name Description DateTimeOffset value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(DateTime, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description DateTime value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTime>.Write(DateTime, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(DateTimeOffset, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(DateTimeOffset value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description DateTimeOffset value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<DateTimeOffset>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration DateTimeOffset INpgsqlSimpleTypeHandler<DateTimeOffset>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description DateTimeOffset | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration long INpgsqlSimpleTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int64 Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimeTzHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimeTzHandler.html",
    "title": "Class TimeTzHandler | Npgsql Documentation",
    "keywords": "Class TimeTzHandler A type handler for the PostgreSQL timetz data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < DateTimeOffset > NpgsqlSimpleTypeHandler < DateTimeOffset > TimeTzHandler Implements INpgsqlTypeHandler < DateTimeOffset > INpgsqlSimpleTypeHandler < DateTimeOffset > Inherited Members NpgsqlSimpleTypeHandler<DateTimeOffset>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTimeOffset>.Write(DateTimeOffset, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<DateTimeOffset>.ValidateAndGetLength(DateTimeOffset, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<DateTimeOffset>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<DateTimeOffset>.GetFieldType(FieldDescription) NpgsqlTypeHandler<DateTimeOffset>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<DateTimeOffset>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<DateTimeOffset>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<DateTimeOffset>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimeTzHandler : NpgsqlSimpleTypeHandler<DateTimeOffset>, INpgsqlTypeHandler<DateTimeOffset>, INpgsqlSimpleTypeHandler<DateTimeOffset> Remarks See https://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TimeTzHandler(PostgresType) Constructs an TimeTzHandler . Declaration public TimeTzHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override DateTimeOffset Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description DateTimeOffset The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTimeOffset>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(DateTimeOffset, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(DateTimeOffset value, NpgsqlParameter parameter) Parameters Type Name Description DateTimeOffset value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTimeOffset>.ValidateAndGetLength(DateTimeOffset, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(DateTimeOffset, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(DateTimeOffset value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description DateTimeOffset value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<DateTimeOffset>.Write(DateTimeOffset, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.html",
    "title": "Namespace Npgsql.Internal.TypeHandlers.FullTextSearchHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeHandlers.FullTextSearchHandlers Classes TsQueryHandler A type handler for the PostgreSQL tsquery data type. TsVectorHandler A type handler for the PostgreSQL tsvector data type."
  },
  "doc/api/Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.html",
    "title": "Class TsQueryHandler | Npgsql Documentation",
    "keywords": "Class TsQueryHandler A type handler for the PostgreSQL tsquery data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlTsQuery > TsQueryHandler Implements INpgsqlTypeHandler < NpgsqlTsQuery > INpgsqlTypeHandler < NpgsqlTsQueryEmpty > INpgsqlTypeHandler < NpgsqlTsQueryLexeme > INpgsqlTypeHandler < NpgsqlTsQueryNot > INpgsqlTypeHandler < NpgsqlTsQueryAnd > INpgsqlTypeHandler < NpgsqlTsQueryOr > INpgsqlTypeHandler < NpgsqlTsQueryFollowedBy > Inherited Members NpgsqlTypeHandler<NpgsqlTsQuery>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlTsQuery>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlTsQuery>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlTsQuery>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlTsQuery>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlTsQuery>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.FullTextSearchHandlers Assembly : Npgsql.dll Syntax public class TsQueryHandler : NpgsqlTypeHandler<NpgsqlTsQuery>, INpgsqlTypeHandler<NpgsqlTsQuery>, INpgsqlTypeHandler<NpgsqlTsQueryEmpty>, INpgsqlTypeHandler<NpgsqlTsQueryLexeme>, INpgsqlTypeHandler<NpgsqlTsQueryNot>, INpgsqlTypeHandler<NpgsqlTsQueryAnd>, INpgsqlTypeHandler<NpgsqlTsQueryOr>, INpgsqlTypeHandler<NpgsqlTsQueryFollowedBy> Remarks See https://www.postgresql.org/docs/current/static/datatype-textsearch.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TsQueryHandler(PostgresType) Declaration public TsQueryHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override async ValueTask<NpgsqlTsQuery> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < NpgsqlTsQuery > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQuery>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQuery, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(NpgsqlTsQuery value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQuery value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQuery>.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsQuery, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryAnd, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlTsQueryAnd value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryAnd value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryEmpty, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlTsQueryEmpty value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryEmpty value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryFollowedBy, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlTsQueryFollowedBy value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryFollowedBy value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryLexeme, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlTsQueryLexeme value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryLexeme value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryNot, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlTsQueryNot value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryNot value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryOr, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlTsQueryOr value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryOr value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(NpgsqlTsQuery, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override async Task Write(NpgsqlTsQuery query, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlTsQuery query NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQuery>.Write(NpgsqlTypes.NpgsqlTsQuery, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) | Improve this Doc View Source Write(NpgsqlTsQueryAnd, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(NpgsqlTsQueryAnd value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlTsQueryAnd value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(NpgsqlTsQueryEmpty, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(NpgsqlTsQueryEmpty value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlTsQueryEmpty value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(NpgsqlTsQueryFollowedBy, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(NpgsqlTsQueryFollowedBy value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlTsQueryFollowedBy value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(NpgsqlTsQueryLexeme, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(NpgsqlTsQueryLexeme value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlTsQueryLexeme value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(NpgsqlTsQueryNot, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(NpgsqlTsQueryNot value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlTsQueryNot value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(NpgsqlTsQueryOr, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(NpgsqlTsQueryOr value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlTsQueryOr value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryAnd>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<NpgsqlTsQueryAnd> INpgsqlTypeHandler<NpgsqlTsQueryAnd>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlTsQueryAnd > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryEmpty>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<NpgsqlTsQueryEmpty> INpgsqlTypeHandler<NpgsqlTsQueryEmpty>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlTsQueryEmpty > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryFollowedBy>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<NpgsqlTsQueryFollowedBy> INpgsqlTypeHandler<NpgsqlTsQueryFollowedBy>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlTsQueryFollowedBy > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryLexeme>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<NpgsqlTsQueryLexeme> INpgsqlTypeHandler<NpgsqlTsQueryLexeme>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlTsQueryLexeme > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryNot>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<NpgsqlTsQueryNot> INpgsqlTypeHandler<NpgsqlTsQueryNot>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlTsQueryNot > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryOr>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<NpgsqlTsQueryOr> INpgsqlTypeHandler<NpgsqlTsQueryOr>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlTsQueryOr > Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsVectorHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsVectorHandler.html",
    "title": "Class TsVectorHandler | Npgsql Documentation",
    "keywords": "Class TsVectorHandler A type handler for the PostgreSQL tsvector data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlTsVector > TsVectorHandler Implements INpgsqlTypeHandler < NpgsqlTsVector > Inherited Members NpgsqlTypeHandler<NpgsqlTsVector>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlTsVector>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlTsVector>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlTsVector>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlTsVector>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlTsVector>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.FullTextSearchHandlers Assembly : Npgsql.dll Syntax public class TsVectorHandler : NpgsqlTypeHandler<NpgsqlTsVector>, INpgsqlTypeHandler<NpgsqlTsVector> Remarks See https://www.postgresql.org/docs/current/static/datatype-textsearch.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TsVectorHandler(PostgresType) Declaration public TsVectorHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override async ValueTask<NpgsqlTsVector> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < NpgsqlTsVector > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsVector>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsVector, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(NpgsqlTsVector value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsVector value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsVector>.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsVector, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlTsVector, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override async Task Write(NpgsqlTsVector vector, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlTsVector vector NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsVector>.Write(NpgsqlTypes.NpgsqlTsVector, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.BoxHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.BoxHandler.html",
    "title": "Class BoxHandler | Npgsql Documentation",
    "keywords": "Class BoxHandler A type handler for the PostgreSQL box data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlBox > NpgsqlSimpleTypeHandler < NpgsqlBox > BoxHandler Implements INpgsqlTypeHandler < NpgsqlBox > INpgsqlSimpleTypeHandler < NpgsqlBox > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlBox>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlBox>.Write(NpgsqlBox, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<NpgsqlBox>.ValidateAndGetLength(NpgsqlBox, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlBox>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlBox>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlBox>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlBox>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlBox>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlBox>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class BoxHandler : NpgsqlSimpleTypeHandler<NpgsqlBox>, INpgsqlTypeHandler<NpgsqlBox>, INpgsqlSimpleTypeHandler<NpgsqlBox> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source BoxHandler(PostgresType) Declaration public BoxHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override NpgsqlBox Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description NpgsqlBox The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlBox>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlBox, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(NpgsqlBox value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlBox value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlBox>.ValidateAndGetLength(NpgsqlTypes.NpgsqlBox, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlBox, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(NpgsqlBox value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlBox value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlBox>.Write(NpgsqlTypes.NpgsqlBox, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.CircleHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.CircleHandler.html",
    "title": "Class CircleHandler | Npgsql Documentation",
    "keywords": "Class CircleHandler A type handler for the PostgreSQL circle data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlCircle > NpgsqlSimpleTypeHandler < NpgsqlCircle > CircleHandler Implements INpgsqlTypeHandler < NpgsqlCircle > INpgsqlSimpleTypeHandler < NpgsqlCircle > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlCircle>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlCircle>.Write(NpgsqlCircle, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<NpgsqlCircle>.ValidateAndGetLength(NpgsqlCircle, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlCircle>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlCircle>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlCircle>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlCircle>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlCircle>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlCircle>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class CircleHandler : NpgsqlSimpleTypeHandler<NpgsqlCircle>, INpgsqlTypeHandler<NpgsqlCircle>, INpgsqlSimpleTypeHandler<NpgsqlCircle> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source CircleHandler(PostgresType) Declaration public CircleHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override NpgsqlCircle Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description NpgsqlCircle The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlCircle>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlCircle, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(NpgsqlCircle value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlCircle value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlCircle>.ValidateAndGetLength(NpgsqlTypes.NpgsqlCircle, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlCircle, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(NpgsqlCircle value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlCircle value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlCircle>.Write(NpgsqlTypes.NpgsqlCircle, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.html",
    "title": "Namespace Npgsql.Internal.TypeHandlers.GeometricHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeHandlers.GeometricHandlers Classes BoxHandler A type handler for the PostgreSQL box data type. CircleHandler A type handler for the PostgreSQL circle data type. LineHandler A type handler for the PostgreSQL line data type. LineSegmentHandler A type handler for the PostgreSQL lseg data type. PathHandler A type handler for the PostgreSQL path data type. PointHandler A type handler for the PostgreSQL point data type. PolygonHandler A type handler for the PostgreSQL polygon data type."
  },
  "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.LineHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.LineHandler.html",
    "title": "Class LineHandler | Npgsql Documentation",
    "keywords": "Class LineHandler A type handler for the PostgreSQL line data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlLine > NpgsqlSimpleTypeHandler < NpgsqlLine > LineHandler Implements INpgsqlTypeHandler < NpgsqlLine > INpgsqlSimpleTypeHandler < NpgsqlLine > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlLine>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlLine>.Write(NpgsqlLine, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<NpgsqlLine>.ValidateAndGetLength(NpgsqlLine, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlLine>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlLine>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlLine>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlLine>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlLine>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlLine>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class LineHandler : NpgsqlSimpleTypeHandler<NpgsqlLine>, INpgsqlTypeHandler<NpgsqlLine>, INpgsqlSimpleTypeHandler<NpgsqlLine> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source LineHandler(PostgresType) Declaration public LineHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override NpgsqlLine Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description NpgsqlLine The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLine>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlLine, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(NpgsqlLine value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlLine value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLine>.ValidateAndGetLength(NpgsqlTypes.NpgsqlLine, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlLine, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(NpgsqlLine value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlLine value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLine>.Write(NpgsqlTypes.NpgsqlLine, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.LineSegmentHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.LineSegmentHandler.html",
    "title": "Class LineSegmentHandler | Npgsql Documentation",
    "keywords": "Class LineSegmentHandler A type handler for the PostgreSQL lseg data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlLSeg > NpgsqlSimpleTypeHandler < NpgsqlLSeg > LineSegmentHandler Implements INpgsqlTypeHandler < NpgsqlLSeg > INpgsqlSimpleTypeHandler < NpgsqlLSeg > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlLSeg>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlLSeg>.Write(NpgsqlLSeg, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<NpgsqlLSeg>.ValidateAndGetLength(NpgsqlLSeg, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlLSeg>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlLSeg>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlLSeg>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlLSeg>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlLSeg>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlLSeg>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class LineSegmentHandler : NpgsqlSimpleTypeHandler<NpgsqlLSeg>, INpgsqlTypeHandler<NpgsqlLSeg>, INpgsqlSimpleTypeHandler<NpgsqlLSeg> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source LineSegmentHandler(PostgresType) Declaration public LineSegmentHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override NpgsqlLSeg Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description NpgsqlLSeg The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLSeg>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlLSeg, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(NpgsqlLSeg value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlLSeg value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLSeg>.ValidateAndGetLength(NpgsqlTypes.NpgsqlLSeg, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlLSeg, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(NpgsqlLSeg value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlLSeg value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLSeg>.Write(NpgsqlTypes.NpgsqlLSeg, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.PathHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.PathHandler.html",
    "title": "Class PathHandler | Npgsql Documentation",
    "keywords": "Class PathHandler A type handler for the PostgreSQL path data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlPath > PathHandler Implements INpgsqlTypeHandler < NpgsqlPath > Inherited Members NpgsqlTypeHandler<NpgsqlPath>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlPath>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlPath>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlPath>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlPath>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlPath>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class PathHandler : NpgsqlTypeHandler<NpgsqlPath>, INpgsqlTypeHandler<NpgsqlPath> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source PathHandler(PostgresType) Declaration public PathHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override async ValueTask<NpgsqlPath> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < NpgsqlPath > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPath>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlPath, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(NpgsqlPath value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlPath value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPath>.ValidateAndGetLength(NpgsqlTypes.NpgsqlPath, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlPath, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override async Task Write(NpgsqlPath value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlPath value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPath>.Write(NpgsqlTypes.NpgsqlPath, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.PointHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.PointHandler.html",
    "title": "Class PointHandler | Npgsql Documentation",
    "keywords": "Class PointHandler A type handler for the PostgreSQL point data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlPoint > NpgsqlSimpleTypeHandler < NpgsqlPoint > PointHandler Implements INpgsqlTypeHandler < NpgsqlPoint > INpgsqlSimpleTypeHandler < NpgsqlPoint > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlPoint>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlPoint>.Write(NpgsqlPoint, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<NpgsqlPoint>.ValidateAndGetLength(NpgsqlPoint, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlPoint>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlPoint>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlPoint>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlPoint>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlPoint>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlPoint>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class PointHandler : NpgsqlSimpleTypeHandler<NpgsqlPoint>, INpgsqlTypeHandler<NpgsqlPoint>, INpgsqlSimpleTypeHandler<NpgsqlPoint> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source PointHandler(PostgresType) Declaration public PointHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override NpgsqlPoint Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description NpgsqlPoint The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlPoint>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlPoint, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(NpgsqlPoint value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlPoint value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlPoint>.ValidateAndGetLength(NpgsqlTypes.NpgsqlPoint, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlPoint, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(NpgsqlPoint value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlPoint value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlPoint>.Write(NpgsqlTypes.NpgsqlPoint, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.PolygonHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.GeometricHandlers.PolygonHandler.html",
    "title": "Class PolygonHandler | Npgsql Documentation",
    "keywords": "Class PolygonHandler A type handler for the PostgreSQL polygon data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlPolygon > PolygonHandler Implements INpgsqlTypeHandler < NpgsqlPolygon > Inherited Members NpgsqlTypeHandler<NpgsqlPolygon>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlPolygon>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlPolygon>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlPolygon>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlPolygon>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlPolygon>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class PolygonHandler : NpgsqlTypeHandler<NpgsqlPolygon>, INpgsqlTypeHandler<NpgsqlPolygon> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source PolygonHandler(PostgresType) Declaration public PolygonHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override async ValueTask<NpgsqlPolygon> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < NpgsqlPolygon > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPolygon>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlPolygon, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(NpgsqlPolygon value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlPolygon value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPolygon>.ValidateAndGetLength(NpgsqlTypes.NpgsqlPolygon, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlPolygon, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override async Task Write(NpgsqlPolygon value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlPolygon value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPolygon>.Write(NpgsqlTypes.NpgsqlPolygon, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.HstoreHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.HstoreHandler.html",
    "title": "Class HstoreHandler | Npgsql Documentation",
    "keywords": "Class HstoreHandler A type handler for the PostgreSQL hstore extension data type, which stores sets of key/value pairs within a single PostgreSQL value. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Dictionary < String , Nullable < String >>> HstoreHandler Implements INpgsqlTypeHandler < Dictionary < String , Nullable < String >>> INpgsqlTypeHandler < IDictionary < String , Nullable < String >>> Inherited Members NpgsqlTypeHandler<Dictionary<String, Nullable<String>>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Dictionary<String, Nullable<String>>>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Dictionary<String, Nullable<String>>>.ValidateAndGetLength(Dictionary<String, Nullable<String>>, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Dictionary<String, Nullable<String>>>.Write(Dictionary<String, Nullable<String>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<Dictionary<String, Nullable<String>>>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Dictionary<String, Nullable<String>>>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Dictionary<String, Nullable<String>>>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Dictionary<String, Nullable<String>>>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Dictionary<String, Nullable<String>>>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.GetFieldType(FieldDescription) NpgsqlTypeHandler.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler.CreateRangeHandler(PostgresType) NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class HstoreHandler : NpgsqlTypeHandler<Dictionary<string, string?>>, INpgsqlTypeHandler<Dictionary<string, string?>>, INpgsqlTypeHandler<IDictionary<string, string?>> Remarks See https://www.postgresql.org/docs/current/hstore.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override async ValueTask<Dictionary<string, string?>> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < Dictionary < String , Nullable < String >>> The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<Dictionary<System.String, System.Nullable<System.String>>>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Dictionary<String, Nullable<String>>, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(Dictionary<string, string?> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Dictionary < String , Nullable < String >> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<Dictionary<System.String, System.Nullable<System.String>>>.ValidateAndGetLength(Dictionary<System.String, System.Nullable<System.String>>, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(IDictionary<String, Nullable<String>>, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(IDictionary<string, string?> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description IDictionary < String , Nullable < String >> value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateObjectAndGetLength(Nullable<Object>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateObjectAndGetLength(object? value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Nullable < Object > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source Write(Dictionary<String, Nullable<String>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override Task Write(Dictionary<string, string?> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Dictionary < String , Nullable < String >> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<Dictionary<System.String, System.Nullable<System.String>>>.Write(Dictionary<System.String, System.Nullable<System.String>>, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) | Improve this Doc View Source Write(IDictionary<String, Nullable<String>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public async Task Write(IDictionary<string, string?> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description IDictionary < String , Nullable < String >> value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer, using either sync or async I/O. Declaration public override Task WriteObjectWithLength(object? value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Nullable < Object > value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Overrides NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<IDictionary<String, Nullable<String>>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<IDictionary<string, string?>> INpgsqlTypeHandler<IDictionary<string, string?>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < IDictionary < String , Nullable < String >>> Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.html",
    "title": "Namespace Npgsql.Internal.TypeHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeHandlers Classes ArrayHandler Non-generic base class for all type handlers which handle PostgreSQL arrays. Extend from ArrayHandler<TElement> instead. ArrayHandler<TElement> Base class for all type handlers which handle PostgreSQL arrays. BitStringArrayHandler A special handler for arrays of bit strings. Differs from the standard array handlers in that it returns arrays of bool for BIT(1) and arrays of BitArray otherwise (just like the scalar BitStringHandler does). BitStringHandler A type handler for the PostgreSQL bit string data type. BoolHandler A type handler for the PostgreSQL bool data type. ByteaHandler A type handler for the PostgreSQL bytea data type. HstoreHandler A type handler for the PostgreSQL hstore extension data type, which stores sets of key/value pairs within a single PostgreSQL value. JsonHandler A type handler for the PostgreSQL json and jsonb data type. JsonPathHandler A type handler for the PostgreSQL jsonpath data type. MultirangeHandler<TSubtype> MultirangeHandler<TSubtype1, TSubtype2> RangeHandler<TSubtype> A type handler for PostgreSQL range types. RangeHandler<TSubtype1, TSubtype2> Type handler for PostgreSQL range types. TextHandler A type handler for PostgreSQL character data types (text, char, varchar, xml...). UuidHandler A type handler for the PostgreSQL uuid data type."
  },
  "doc/api/Npgsql.Internal.TypeHandlers.InternalTypeHandlers.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.InternalTypeHandlers.html",
    "title": "Namespace Npgsql.Internal.TypeHandlers.InternalTypeHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeHandlers.InternalTypeHandlers Classes InternalCharHandler A type handler for the PostgreSQL \"char\" type, used only internally."
  },
  "doc/api/Npgsql.Internal.TypeHandlers.InternalTypeHandlers.InternalCharHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.InternalTypeHandlers.InternalCharHandler.html",
    "title": "Class InternalCharHandler | Npgsql Documentation",
    "keywords": "Class InternalCharHandler A type handler for the PostgreSQL \"char\" type, used only internally. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Char > NpgsqlSimpleTypeHandler < Char > InternalCharHandler Implements INpgsqlTypeHandler < Char > INpgsqlSimpleTypeHandler < Char > INpgsqlSimpleTypeHandler < Byte > INpgsqlSimpleTypeHandler < Int16 > INpgsqlSimpleTypeHandler < Int32 > INpgsqlSimpleTypeHandler < Int64 > Inherited Members NpgsqlSimpleTypeHandler<Char>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Char>.Write(Char, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<Char>.ValidateAndGetLength(Char, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Char>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Char>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Char>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Char>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Char>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Char>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.InternalTypeHandlers Assembly : Npgsql.dll Syntax public class InternalCharHandler : NpgsqlSimpleTypeHandler<char>, INpgsqlTypeHandler<char>, INpgsqlSimpleTypeHandler<char>, INpgsqlSimpleTypeHandler<byte>, INpgsqlSimpleTypeHandler<short>, INpgsqlSimpleTypeHandler<int>, INpgsqlSimpleTypeHandler<long> Remarks See https://www.postgresql.org/docs/current/static/datatype-character.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source InternalCharHandler(PostgresType) Declaration public InternalCharHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override char Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description Char The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Char>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Byte, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(byte value, NpgsqlParameter parameter) Parameters Type Name Description Byte value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Char, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(char value, NpgsqlParameter parameter) Parameters Type Name Description Char value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Char>.ValidateAndGetLength(System.Char, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Int16, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(short value, NpgsqlParameter parameter) Parameters Type Name Description Int16 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Byte value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Char, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(char value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Char value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Char>.Write(System.Char, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int16 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration byte INpgsqlSimpleTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Byte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration short INpgsqlSimpleTypeHandler<short>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int16 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration int INpgsqlSimpleTypeHandler<int>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int32 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration long INpgsqlSimpleTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int64 Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.JsonHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.JsonHandler.html",
    "title": "Class JsonHandler | Npgsql Documentation",
    "keywords": "Class JsonHandler A type handler for the PostgreSQL json and jsonb data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < String > JsonHandler Implements INpgsqlTypeHandler < String > Inherited Members NpgsqlTypeHandler<String>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<String>.GetFieldType(FieldDescription) NpgsqlTypeHandler<String>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<String>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<String>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<String>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class JsonHandler : NpgsqlTypeHandler<string>, INpgsqlTypeHandler<string> Remarks See https://www.postgresql.org/docs/current/datatype-json.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source JsonHandler(PostgresType, Encoding, Boolean, Nullable<JsonSerializerOptions>) Declaration public JsonHandler(PostgresType postgresType, Encoding encoding, bool isJsonb, JsonSerializerOptions? serializerOptions = null) Parameters Type Name Description PostgresType postgresType Encoding encoding Boolean isJsonb Nullable < JsonSerializerOptions > serializerOptions Methods | Improve this Doc View Source GetTextReader(Stream, NpgsqlReadBuffer) Declaration public TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer) Parameters Type Name Description Stream stream NpgsqlReadBuffer buffer Returns Type Description TextReader | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override ValueTask<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < String > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.String>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadCustom<T>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration protected override async ValueTask<T> ReadCustom<T>(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 byteLen Boolean async FieldDescription fieldDescription Returns Type Description ValueTask <T> Type Parameters Name Description T Overrides NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description String value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.String>.ValidateAndGetLength(System.String, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLengthCustom<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected override int ValidateAndGetLengthCustom<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Type Parameters Name Description TAny Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateObjectAndGetLength(object value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Object value The value to be written to PostgreSQL NpgsqlLengthCache lengthCache If the byte length calculation is costly (e.g. for UTF-8 strings), its result can be stored in the length cache to be reused in the writing process, preventing recalculation. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override async Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description String value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.String>.Write(System.String, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) | Improve this Doc View Source WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer, using either sync or async I/O. Declaration public override async Task WriteObjectWithLength(object? value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Nullable < Object > value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Overrides NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) | Improve this Doc View Source WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Typically does not need to be overridden by type handlers, but may be needed in some cases (e.g. ArrayHandler . Note that this method assumes it can write 4 bytes of length (already verified by WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) ). Declaration protected override async Task WriteWithLengthCustom<TAny>(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description TAny value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description TAny Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.JsonPathHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.JsonPathHandler.html",
    "title": "Class JsonPathHandler | Npgsql Documentation",
    "keywords": "Class JsonPathHandler A type handler for the PostgreSQL jsonpath data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < String > JsonPathHandler Implements INpgsqlTypeHandler < String > Inherited Members NpgsqlTypeHandler<String>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<String>.GetFieldType(FieldDescription) NpgsqlTypeHandler<String>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<String>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<String>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<String>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class JsonPathHandler : NpgsqlTypeHandler<string>, INpgsqlTypeHandler<string> Remarks See https://www.postgresql.org/docs/current/datatype-json.html#DATATYPE-JSONPATH . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source JsonPathHandler(PostgresType, Encoding) Declaration protected JsonPathHandler(PostgresType postgresType, Encoding encoding) Parameters Type Name Description PostgresType postgresType Encoding encoding Methods | Improve this Doc View Source GetTextReader(Stream, NpgsqlReadBuffer) Declaration public TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer) Parameters Type Name Description Stream stream NpgsqlReadBuffer buffer Returns Type Description TextReader | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override async ValueTask<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < String > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.String>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description String value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.String>.ValidateAndGetLength(System.String, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override async Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description String value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.String>.Write(System.String, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.LTreeHandlers.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.LTreeHandlers.html",
    "title": "Namespace Npgsql.Internal.TypeHandlers.LTreeHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeHandlers.LTreeHandlers Classes LQueryHandler LQuery binary encoding is a simple UTF8 string, but prepended with a version number. LTreeHandler Ltree binary encoding is a simple UTF8 string, but prepended with a version number. LTxtQueryHandler LTxtQuery binary encoding is a simple UTF8 string, but prepended with a version number."
  },
  "doc/api/Npgsql.Internal.TypeHandlers.LTreeHandlers.LQueryHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.LTreeHandlers.LQueryHandler.html",
    "title": "Class LQueryHandler | Npgsql Documentation",
    "keywords": "Class LQueryHandler LQuery binary encoding is a simple UTF8 string, but prepended with a version number. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < String > TextHandler LQueryHandler Implements INpgsqlTypeHandler < String > INpgsqlTypeHandler < Char []> INpgsqlTypeHandler < ArraySegment < Char >> INpgsqlTypeHandler < Char > INpgsqlTypeHandler < Byte []> Inherited Members TextHandler.INpgsqlTypeHandler<Char[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.INpgsqlTypeHandler<Char>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.INpgsqlTypeHandler<ArraySegment<Char>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.INpgsqlTypeHandler<Byte[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.ValidateAndGetLength(Char, NpgsqlLengthCache, NpgsqlParameter) TextHandler.ValidateAndGetLength(Byte[], NpgsqlLengthCache, NpgsqlParameter) TextHandler.Write(Char, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) TextHandler.Write(Byte[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<String>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<String>.GetFieldType(FieldDescription) NpgsqlTypeHandler<String>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<String>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<String>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<String>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.LTreeHandlers Assembly : Npgsql.dll Syntax public class LQueryHandler : TextHandler, INpgsqlTypeHandler<string>, INpgsqlTypeHandler<char[]>, INpgsqlTypeHandler<ArraySegment<char>>, INpgsqlTypeHandler<char>, INpgsqlTypeHandler<byte[]> Constructors | Improve this Doc View Source LQueryHandler(PostgresType, Encoding) Declaration protected LQueryHandler(PostgresType postgresType, Encoding encoding) Parameters Type Name Description PostgresType postgresType Encoding encoding Methods | Improve this Doc View Source GetTextReader(Stream, NpgsqlReadBuffer) Declaration public override TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer) Parameters Type Name Description Stream stream NpgsqlReadBuffer buffer Returns Type Description TextReader Overrides TextHandler.GetTextReader(Stream, NpgsqlReadBuffer) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < String > Overrides TextHandler.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ValidateAndGetLength(ArraySegment<Char>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(ArraySegment<char> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description ArraySegment < Char > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides TextHandler.ValidateAndGetLength(ArraySegment<Char>, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Char[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(char[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Char [] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides TextHandler.ValidateAndGetLength(Char[], ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description String value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides TextHandler.ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source Write(ArraySegment<Char>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(ArraySegment<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description ArraySegment < Char > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides TextHandler.Write(ArraySegment<Char>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) | Improve this Doc View Source Write(Char[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Char [] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides TextHandler.Write(Char[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description String value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides TextHandler.Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.LTreeHandlers.LTreeHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.LTreeHandlers.LTreeHandler.html",
    "title": "Class LTreeHandler | Npgsql Documentation",
    "keywords": "Class LTreeHandler Ltree binary encoding is a simple UTF8 string, but prepended with a version number. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < String > TextHandler LTreeHandler Implements INpgsqlTypeHandler < String > INpgsqlTypeHandler < Char []> INpgsqlTypeHandler < ArraySegment < Char >> INpgsqlTypeHandler < Char > INpgsqlTypeHandler < Byte []> Inherited Members TextHandler.INpgsqlTypeHandler<Char[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.INpgsqlTypeHandler<Char>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.INpgsqlTypeHandler<ArraySegment<Char>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.INpgsqlTypeHandler<Byte[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.ValidateAndGetLength(Char, NpgsqlLengthCache, NpgsqlParameter) TextHandler.ValidateAndGetLength(Byte[], NpgsqlLengthCache, NpgsqlParameter) TextHandler.Write(Char, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) TextHandler.Write(Byte[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<String>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<String>.GetFieldType(FieldDescription) NpgsqlTypeHandler<String>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<String>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<String>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<String>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.LTreeHandlers Assembly : Npgsql.dll Syntax public class LTreeHandler : TextHandler, INpgsqlTypeHandler<string>, INpgsqlTypeHandler<char[]>, INpgsqlTypeHandler<ArraySegment<char>>, INpgsqlTypeHandler<char>, INpgsqlTypeHandler<byte[]> Constructors | Improve this Doc View Source LTreeHandler(PostgresType, Encoding) Declaration protected LTreeHandler(PostgresType postgresType, Encoding encoding) Parameters Type Name Description PostgresType postgresType Encoding encoding Methods | Improve this Doc View Source GetTextReader(Stream, NpgsqlReadBuffer) Declaration public override TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer) Parameters Type Name Description Stream stream NpgsqlReadBuffer buffer Returns Type Description TextReader Overrides TextHandler.GetTextReader(Stream, NpgsqlReadBuffer) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < String > Overrides TextHandler.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ValidateAndGetLength(ArraySegment<Char>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(ArraySegment<char> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description ArraySegment < Char > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides TextHandler.ValidateAndGetLength(ArraySegment<Char>, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Char[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(char[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Char [] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides TextHandler.ValidateAndGetLength(Char[], ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description String value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides TextHandler.ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source Write(ArraySegment<Char>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(ArraySegment<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description ArraySegment < Char > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides TextHandler.Write(ArraySegment<Char>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) | Improve this Doc View Source Write(Char[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Char [] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides TextHandler.Write(Char[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description String value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides TextHandler.Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.LTreeHandlers.LTxtQueryHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.LTreeHandlers.LTxtQueryHandler.html",
    "title": "Class LTxtQueryHandler | Npgsql Documentation",
    "keywords": "Class LTxtQueryHandler LTxtQuery binary encoding is a simple UTF8 string, but prepended with a version number. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < String > TextHandler LTxtQueryHandler Implements INpgsqlTypeHandler < String > INpgsqlTypeHandler < Char []> INpgsqlTypeHandler < ArraySegment < Char >> INpgsqlTypeHandler < Char > INpgsqlTypeHandler < Byte []> Inherited Members TextHandler.INpgsqlTypeHandler<Char[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.INpgsqlTypeHandler<Char>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.INpgsqlTypeHandler<ArraySegment<Char>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.INpgsqlTypeHandler<Byte[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) TextHandler.ValidateAndGetLength(Char, NpgsqlLengthCache, NpgsqlParameter) TextHandler.ValidateAndGetLength(Byte[], NpgsqlLengthCache, NpgsqlParameter) TextHandler.Write(Char, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) TextHandler.Write(Byte[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<String>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<String>.GetFieldType(FieldDescription) NpgsqlTypeHandler<String>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<String>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<String>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<String>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.LTreeHandlers Assembly : Npgsql.dll Syntax public class LTxtQueryHandler : TextHandler, INpgsqlTypeHandler<string>, INpgsqlTypeHandler<char[]>, INpgsqlTypeHandler<ArraySegment<char>>, INpgsqlTypeHandler<char>, INpgsqlTypeHandler<byte[]> Constructors | Improve this Doc View Source LTxtQueryHandler(PostgresType, Encoding) Declaration protected LTxtQueryHandler(PostgresType postgresType, Encoding encoding) Parameters Type Name Description PostgresType postgresType Encoding encoding Methods | Improve this Doc View Source GetTextReader(Stream, NpgsqlReadBuffer) Declaration public override TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer) Parameters Type Name Description Stream stream NpgsqlReadBuffer buffer Returns Type Description TextReader Overrides TextHandler.GetTextReader(Stream, NpgsqlReadBuffer) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < String > Overrides TextHandler.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ValidateAndGetLength(ArraySegment<Char>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(ArraySegment<char> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description ArraySegment < Char > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides TextHandler.ValidateAndGetLength(ArraySegment<Char>, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Char[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(char[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Char [] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides TextHandler.ValidateAndGetLength(Char[], ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description String value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides TextHandler.ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source Write(ArraySegment<Char>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(ArraySegment<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description ArraySegment < Char > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides TextHandler.Write(ArraySegment<Char>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) | Improve this Doc View Source Write(Char[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Char [] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides TextHandler.Write(Char[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description String value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides TextHandler.Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.MultirangeHandler-1.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.MultirangeHandler-1.html",
    "title": "Class MultirangeHandler<TSubtype> | Npgsql Documentation",
    "keywords": "Class MultirangeHandler<TSubtype> Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlRange <TSubtype>[]> MultirangeHandler<TSubtype> MultirangeHandler<TSubtype1, TSubtype2> DateMultirangeHandler TimestampTzMultirangeHandler Implements INpgsqlTypeHandler < NpgsqlRange <TSubtype>[]> INpgsqlTypeHandler < List < NpgsqlRange <TSubtype>>> Inherited Members NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>.ValidateAndGetLength(NpgsqlRange<TSubtype>[], NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>.Write(NpgsqlRange<TSubtype>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.GetFieldType(FieldDescription) NpgsqlTypeHandler.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler.CreateRangeHandler(PostgresType) NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class MultirangeHandler<TSubtype> : NpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>, INpgsqlTypeHandler<NpgsqlRange<TSubtype>[]>, INpgsqlTypeHandler<List<NpgsqlRange<TSubtype>>> Type Parameters Name Description TSubtype Constructors | Improve this Doc View Source MultirangeHandler(PostgresMultirangeType, RangeHandler<TSubtype>) Declaration public MultirangeHandler(PostgresMultirangeType pgMultirangeType, RangeHandler<TSubtype> rangeHandler) Parameters Type Name Description PostgresMultirangeType pgMultirangeType RangeHandler <TSubtype> rangeHandler Properties | Improve this Doc View Source RangeHandler The type handler for the range that this multirange type holds Declaration protected RangeHandler<TSubtype> RangeHandler { get; } Property Value Type Description RangeHandler <TSubtype> Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<NpgsqlRange<TSubtype>[]> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlRange <TSubtype>[]> Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlRange<TSubtype>[]>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadMultirangeArray<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration protected async ValueTask<NpgsqlRange<TAnySubtype>[]> ReadMultirangeArray<TAnySubtype>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlRange <TAnySubtype>[]> Type Parameters Name Description TAnySubtype | Improve this Doc View Source ReadMultirangeList<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration protected async ValueTask<List<NpgsqlRange<TAnySubtype>>> ReadMultirangeList<TAnySubtype>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < List < NpgsqlRange <TAnySubtype>>> Type Parameters Name Description TAnySubtype | Improve this Doc View Source ValidateAndGetLength(List<NpgsqlRange<TSubtype>>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(List<NpgsqlRange<TSubtype>> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description List < NpgsqlRange <TSubtype>> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<TSubtype>[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlRange<TSubtype>[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange <TSubtype>[] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlRange<TSubtype>[]>.ValidateAndGetLength(NpgsqlTypes.NpgsqlRange<TSubtype>[], Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLengthMultirange<TAnySubtype>(IList<NpgsqlRange<TAnySubtype>>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected int ValidateAndGetLengthMultirange<TAnySubtype>(IList<NpgsqlRange<TAnySubtype>> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description IList < NpgsqlRange <TAnySubtype>> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Type Parameters Name Description TAnySubtype | Improve this Doc View Source Write(List<NpgsqlRange<TSubtype>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(List<NpgsqlRange<TSubtype>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description List < NpgsqlRange <TSubtype>> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<TSubtype>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override Task Write(NpgsqlRange<TSubtype>[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange <TSubtype>[] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlRange<TSubtype>[]>.Write(NpgsqlTypes.NpgsqlRange<TSubtype>[], Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) | Improve this Doc View Source WriteMultirange<TAnySubtype>(IList<NpgsqlRange<TAnySubtype>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public async Task WriteMultirange<TAnySubtype>(IList<NpgsqlRange<TAnySubtype>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description IList < NpgsqlRange <TAnySubtype>> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description TAnySubtype Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<List<NpgsqlRange<TSubtype>>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<List<NpgsqlRange<TSubtype>>> INpgsqlTypeHandler<List<NpgsqlRange<TSubtype>>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < List < NpgsqlRange <TSubtype>>> Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.MultirangeHandler-2.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.MultirangeHandler-2.html",
    "title": "Class MultirangeHandler<TSubtype1, TSubtype2> | Npgsql Documentation",
    "keywords": "Class MultirangeHandler<TSubtype1, TSubtype2> Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlRange <TSubtype1>[]> MultirangeHandler <TSubtype1> MultirangeHandler<TSubtype1, TSubtype2> Implements INpgsqlTypeHandler < NpgsqlRange <TSubtype1>[]> INpgsqlTypeHandler < List < NpgsqlRange <TSubtype1>>> INpgsqlTypeHandler < NpgsqlRange <TSubtype2>[]> INpgsqlTypeHandler < List < NpgsqlRange <TSubtype2>>> Inherited Members MultirangeHandler<TSubtype1>.RangeHandler MultirangeHandler<TSubtype1>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<TSubtype1>.ReadMultirangeArray<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<TSubtype1>.INpgsqlTypeHandler<List<NpgsqlRange<TSubtype1>>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<TSubtype1>.ReadMultirangeList<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<TSubtype1>.ValidateAndGetLength(NpgsqlRange<TSubtype1>[], NpgsqlLengthCache, NpgsqlParameter) MultirangeHandler<TSubtype1>.ValidateAndGetLength(List<NpgsqlRange<TSubtype1>>, NpgsqlLengthCache, NpgsqlParameter) MultirangeHandler<TSubtype1>.ValidateAndGetLengthMultirange<TAnySubtype>(IList<NpgsqlRange<TAnySubtype>>, NpgsqlLengthCache, NpgsqlParameter) MultirangeHandler<TSubtype1>.Write(NpgsqlRange<TSubtype1>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) MultirangeHandler<TSubtype1>.Write(List<NpgsqlRange<TSubtype1>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) MultirangeHandler<TSubtype1>.WriteMultirange<TAnySubtype>(IList<NpgsqlRange<TAnySubtype>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>.ValidateAndGetLength(NpgsqlRange<TSubtype1>[], NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>.Write(NpgsqlRange<TSubtype1>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.GetFieldType(FieldDescription) NpgsqlTypeHandler.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler.CreateRangeHandler(PostgresType) NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class MultirangeHandler<TSubtype1, TSubtype2> : MultirangeHandler<TSubtype1>, INpgsqlTypeHandler<NpgsqlRange<TSubtype1>[]>, INpgsqlTypeHandler<List<NpgsqlRange<TSubtype1>>>, INpgsqlTypeHandler<NpgsqlRange<TSubtype2>[]>, INpgsqlTypeHandler<List<NpgsqlRange<TSubtype2>>> Type Parameters Name Description TSubtype1 TSubtype2 Constructors | Improve this Doc View Source MultirangeHandler(PostgresMultirangeType, RangeHandler<TSubtype1, TSubtype2>) Declaration public MultirangeHandler(PostgresMultirangeType pgMultirangeType, RangeHandler<TSubtype1, TSubtype2> rangeHandler) Parameters Type Name Description PostgresMultirangeType pgMultirangeType RangeHandler <TSubtype1, TSubtype2> rangeHandler Methods | Improve this Doc View Source ValidateAndGetLength(List<NpgsqlRange<TSubtype2>>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(List<NpgsqlRange<TSubtype2>> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description List < NpgsqlRange <TSubtype2>> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<TSubtype2>[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<TSubtype2>[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange <TSubtype2>[] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateObjectAndGetLength(Nullable<Object>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateObjectAndGetLength(object? value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Nullable < Object > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source Write(List<NpgsqlRange<TSubtype2>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(List<NpgsqlRange<TSubtype2>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description List < NpgsqlRange <TSubtype2>> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<TSubtype2>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(NpgsqlRange<TSubtype2>[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange <TSubtype2>[] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override Task WriteObjectWithLength(object? value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Nullable < Object > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<List<NpgsqlRange<TSubtype2>>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<List<NpgsqlRange<TSubtype2>>> INpgsqlTypeHandler<List<NpgsqlRange<TSubtype2>>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < List < NpgsqlRange <TSubtype2>>> | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlRange<TSubtype2>[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<NpgsqlRange<TSubtype2>[]> INpgsqlTypeHandler<NpgsqlRange<TSubtype2>[]>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlRange <TSubtype2>[]> Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NetworkHandlers.CidrHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NetworkHandlers.CidrHandler.html",
    "title": "Class CidrHandler | Npgsql Documentation",
    "keywords": "Class CidrHandler A type handler for the PostgreSQL cidr data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < (, ) < IPAddress , Int32 >> NpgsqlSimpleTypeHandler < (, ) < IPAddress , Int32 >> CidrHandler Implements INpgsqlTypeHandler < (, ) < IPAddress , Int32 >> INpgsqlSimpleTypeHandler < (, ) < IPAddress , Int32 >> INpgsqlSimpleTypeHandler < NpgsqlInet > Inherited Members NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.ValidateAndGetLength((, )<IPAddress, Int32>, NpgsqlParameter) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Write((, )<IPAddress, Int32>, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Write((, )<IPAddress, Int32>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.ValidateAndGetLength((, )<IPAddress, Int32>, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<(IPAddress Address, Int32 Subnet)>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<(IPAddress Address, Int32 Subnet)>.GetFieldType(FieldDescription) NpgsqlTypeHandler<(IPAddress Address, Int32 Subnet)>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<(IPAddress Address, Int32 Subnet)>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<(IPAddress Address, Int32 Subnet)>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<(IPAddress Address, Int32 Subnet)>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.GetFieldType(FieldDescription) NpgsqlTypeHandler.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler.CreateRangeHandler(PostgresType) NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NetworkHandlers Assembly : Npgsql.dll Syntax public class CidrHandler : NpgsqlSimpleTypeHandler<(IPAddress Address, int Subnet)>, INpgsqlTypeHandler<(IPAddress Address, int Subnet)>, INpgsqlSimpleTypeHandler<(IPAddress Address, int Subnet)>, INpgsqlSimpleTypeHandler<NpgsqlInet> Remarks See https://www.postgresql.org/docs/current/static/datatype-net-types.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source CidrHandler(PostgresType) Declaration public CidrHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override (IPAddress Address, int Subnet) Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description (, ) < IPAddress , Int32 > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.ValueTuple<IPAddress, System.Int32>>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlInet, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlInet value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInet value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength((IPAddress Address, Int32 Subnet), NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength((IPAddress Address, int Subnet) value, NpgsqlParameter parameter) Parameters Type Name Description (, ) < IPAddress , Int32 > value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.ValueTuple<IPAddress, System.Int32>>.ValidateAndGetLength(System.ValueTuple<IPAddress, System.Int32>, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlInet, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(NpgsqlInet value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInet value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write((IPAddress Address, Int32 Subnet), NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write((IPAddress Address, int Subnet) value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description (, ) < IPAddress , Int32 > value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.ValueTuple<IPAddress, System.Int32>>.Write(System.ValueTuple<IPAddress, System.Int32>, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<NpgsqlInet>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration NpgsqlInet INpgsqlSimpleTypeHandler<NpgsqlInet>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlInet Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NetworkHandlers.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NetworkHandlers.html",
    "title": "Namespace Npgsql.Internal.TypeHandlers.NetworkHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeHandlers.NetworkHandlers Classes CidrHandler A type handler for the PostgreSQL cidr data type. InetHandler A type handler for the PostgreSQL cidr data type. MacaddrHandler A type handler for the PostgreSQL macaddr and macaddr8 data types."
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NetworkHandlers.InetHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NetworkHandlers.InetHandler.html",
    "title": "Class InetHandler | Npgsql Documentation",
    "keywords": "Class InetHandler A type handler for the PostgreSQL cidr data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < IPAddress > NpgsqlSimpleTypeHandler < IPAddress > NpgsqlSimpleTypeHandlerWithPsv < IPAddress , (, ) < IPAddress , Int32 >> InetHandler Implements INpgsqlTypeHandler < IPAddress > INpgsqlSimpleTypeHandler < IPAddress > INpgsqlSimpleTypeHandler < (, ) < IPAddress , Int32 >> INpgsqlSimpleTypeHandler < NpgsqlInet > Inherited Members NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.INpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.ValidateAndGetLength((, )<IPAddress, Int32>, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.Write((, )<IPAddress, Int32>, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.GetProviderSpecificFieldType(FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlSimpleTypeHandler<IPAddress>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<IPAddress>.Write(IPAddress, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<IPAddress>.ValidateAndGetLength(IPAddress, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<IPAddress>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<IPAddress>.GetFieldType(FieldDescription) NpgsqlTypeHandler<IPAddress>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<IPAddress>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<IPAddress>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<IPAddress>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NetworkHandlers Assembly : Npgsql.dll Syntax public class InetHandler : NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, int Subnet)>, INpgsqlTypeHandler<IPAddress>, INpgsqlSimpleTypeHandler<IPAddress>, INpgsqlSimpleTypeHandler<(IPAddress Address, int Subnet)>, INpgsqlSimpleTypeHandler<NpgsqlInet> Remarks See https://www.postgresql.org/docs/current/static/datatype-net-types.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source InetHandler(PostgresType) Declaration public InetHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override IPAddress Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description IPAddress The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<IPAddress>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TPsv with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration protected override (IPAddress Address, int Subnet) ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description (, ) < IPAddress , Int32 > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<IPAddress, System.ValueTuple<IPAddress, System.Int32>>.ReadPsv(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(IPAddress, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(IPAddress value, NpgsqlParameter parameter) Parameters Type Name Description IPAddress value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<IPAddress>.ValidateAndGetLength(IPAddress, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(NpgsqlInet, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlInet value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInet value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength((IPAddress Address, Int32 Subnet), NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength((IPAddress Address, int Subnet) value, NpgsqlParameter parameter) Parameters Type Name Description (, ) < IPAddress , Int32 > value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<IPAddress, System.ValueTuple<IPAddress, System.Int32>>.ValidateAndGetLength(System.ValueTuple<IPAddress, System.Int32>, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(IPAddress, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(IPAddress value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description IPAddress value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<IPAddress>.Write(IPAddress, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlInet, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(NpgsqlInet value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInet value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write((IPAddress Address, Int32 Subnet), NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write((IPAddress Address, int Subnet) value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description (, ) < IPAddress , Int32 > value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<IPAddress, System.ValueTuple<IPAddress, System.Int32>>.Write(System.ValueTuple<IPAddress, System.Int32>, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<NpgsqlInet>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration NpgsqlInet INpgsqlSimpleTypeHandler<NpgsqlInet>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlInet Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NetworkHandlers.MacaddrHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NetworkHandlers.MacaddrHandler.html",
    "title": "Class MacaddrHandler | Npgsql Documentation",
    "keywords": "Class MacaddrHandler A type handler for the PostgreSQL macaddr and macaddr8 data types. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < PhysicalAddress > NpgsqlSimpleTypeHandler < PhysicalAddress > MacaddrHandler Implements INpgsqlTypeHandler < PhysicalAddress > INpgsqlSimpleTypeHandler < PhysicalAddress > Inherited Members NpgsqlSimpleTypeHandler<PhysicalAddress>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<PhysicalAddress>.Write(PhysicalAddress, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<PhysicalAddress>.ValidateAndGetLength(PhysicalAddress, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<PhysicalAddress>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<PhysicalAddress>.GetFieldType(FieldDescription) NpgsqlTypeHandler<PhysicalAddress>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<PhysicalAddress>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<PhysicalAddress>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<PhysicalAddress>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NetworkHandlers Assembly : Npgsql.dll Syntax public class MacaddrHandler : NpgsqlSimpleTypeHandler<PhysicalAddress>, INpgsqlTypeHandler<PhysicalAddress>, INpgsqlSimpleTypeHandler<PhysicalAddress> Remarks See https://www.postgresql.org/docs/current/static/datatype-net-types.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source MacaddrHandler(PostgresType) Declaration public MacaddrHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override PhysicalAddress Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description PhysicalAddress The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<PhysicalAddress>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(PhysicalAddress, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(PhysicalAddress value, NpgsqlParameter parameter) Parameters Type Name Description PhysicalAddress value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<PhysicalAddress>.ValidateAndGetLength(PhysicalAddress, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(PhysicalAddress, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(PhysicalAddress value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description PhysicalAddress value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<PhysicalAddress>.Write(PhysicalAddress, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.DoubleHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.DoubleHandler.html",
    "title": "Class DoubleHandler | Npgsql Documentation",
    "keywords": "Class DoubleHandler A type handler for the PostgreSQL double precision data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Double > NpgsqlSimpleTypeHandler < Double > DoubleHandler Implements INpgsqlTypeHandler < Double > INpgsqlSimpleTypeHandler < Double > Inherited Members NpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Double>.Write(Double, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<Double>.ValidateAndGetLength(Double, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Double>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Double>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Double>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Double>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Double>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Double>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class DoubleHandler : NpgsqlSimpleTypeHandler<double>, INpgsqlTypeHandler<double>, INpgsqlSimpleTypeHandler<double> Remarks See https://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source DoubleHandler(PostgresType) Declaration public DoubleHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override double Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description Double The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Double>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Double>.ValidateAndGetLength(System.Double, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Double>.Write(System.Double, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.html",
    "title": "Namespace Npgsql.Internal.TypeHandlers.NumericHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeHandlers.NumericHandlers Classes DoubleHandler A type handler for the PostgreSQL double precision data type. Int16Handler A type handler for the PostgreSQL smallint data type. Int32Handler A type handler for the PostgreSQL integer data type. Int64Handler A type handler for the PostgreSQL bigint data type. MoneyHandler A type handler for the PostgreSQL money data type. NumericHandler A type handler for the PostgreSQL numeric data type. SingleHandler A type handler for the PostgreSQL real data type. UInt32Handler A type handler for PostgreSQL unsigned 32-bit data types. This is only used for internal types. UInt64Handler A type handler for PostgreSQL unsigned 64-bit data types. This is only used for internal types."
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.Int16Handler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.Int16Handler.html",
    "title": "Class Int16Handler | Npgsql Documentation",
    "keywords": "Class Int16Handler A type handler for the PostgreSQL smallint data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Int16 > NpgsqlSimpleTypeHandler < Int16 > Int16Handler Implements INpgsqlTypeHandler < Int16 > INpgsqlSimpleTypeHandler < Int16 > INpgsqlSimpleTypeHandler < Byte > INpgsqlSimpleTypeHandler < SByte > INpgsqlSimpleTypeHandler < Int32 > INpgsqlSimpleTypeHandler < Int64 > INpgsqlSimpleTypeHandler < Single > INpgsqlSimpleTypeHandler < Double > INpgsqlSimpleTypeHandler < Decimal > Inherited Members NpgsqlSimpleTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Int16>.Write(Int16, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<Int16>.ValidateAndGetLength(Int16, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Int16>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Int16>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Int16>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Int16>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Int16>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Int16>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class Int16Handler : NpgsqlSimpleTypeHandler<short>, INpgsqlTypeHandler<short>, INpgsqlSimpleTypeHandler<short>, INpgsqlSimpleTypeHandler<byte>, INpgsqlSimpleTypeHandler<sbyte>, INpgsqlSimpleTypeHandler<int>, INpgsqlSimpleTypeHandler<long>, INpgsqlSimpleTypeHandler<float>, INpgsqlSimpleTypeHandler<double>, INpgsqlSimpleTypeHandler<decimal> Remarks See https://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source Int16Handler(PostgresType) Declaration public Int16Handler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override short Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description Int16 The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Int16>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Byte, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(byte value, NpgsqlParameter parameter) Parameters Type Name Description Byte value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Decimal, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(decimal value, NpgsqlParameter parameter) Parameters Type Name Description Decimal value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int16, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(short value, NpgsqlParameter parameter) Parameters Type Name Description Int16 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Int16>.ValidateAndGetLength(System.Int16, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(SByte, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(sbyte value, NpgsqlParameter parameter) Parameters Type Name Description SByte value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Single, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(float value, NpgsqlParameter parameter) Parameters Type Name Description Single value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Byte value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Decimal value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int16 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Int16>.Write(System.Int16, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(SByte, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(sbyte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description SByte value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Single value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration byte INpgsqlSimpleTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Byte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Decimal>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration decimal INpgsqlSimpleTypeHandler<decimal>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Decimal | Improve this Doc View Source INpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration double INpgsqlSimpleTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Double | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration int INpgsqlSimpleTypeHandler<int>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int32 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration long INpgsqlSimpleTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int64 | Improve this Doc View Source INpgsqlSimpleTypeHandler<SByte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration sbyte INpgsqlSimpleTypeHandler<sbyte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description SByte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration float INpgsqlSimpleTypeHandler<float>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Single Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.Int32Handler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.Int32Handler.html",
    "title": "Class Int32Handler | Npgsql Documentation",
    "keywords": "Class Int32Handler A type handler for the PostgreSQL integer data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Int32 > NpgsqlSimpleTypeHandler < Int32 > Int32Handler Implements INpgsqlTypeHandler < Int32 > INpgsqlSimpleTypeHandler < Int32 > INpgsqlSimpleTypeHandler < Byte > INpgsqlSimpleTypeHandler < Int16 > INpgsqlSimpleTypeHandler < Int64 > INpgsqlSimpleTypeHandler < Single > INpgsqlSimpleTypeHandler < Double > INpgsqlSimpleTypeHandler < Decimal > Inherited Members NpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Int32>.Write(Int32, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<Int32>.ValidateAndGetLength(Int32, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Int32>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Int32>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Int32>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Int32>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Int32>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Int32>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class Int32Handler : NpgsqlSimpleTypeHandler<int>, INpgsqlTypeHandler<int>, INpgsqlSimpleTypeHandler<int>, INpgsqlSimpleTypeHandler<byte>, INpgsqlSimpleTypeHandler<short>, INpgsqlSimpleTypeHandler<long>, INpgsqlSimpleTypeHandler<float>, INpgsqlSimpleTypeHandler<double>, INpgsqlSimpleTypeHandler<decimal> Remarks See https://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source Int32Handler(PostgresType) Declaration public Int32Handler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override int Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Int32>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Byte, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(byte value, NpgsqlParameter parameter) Parameters Type Name Description Byte value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Decimal, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(decimal value, NpgsqlParameter parameter) Parameters Type Name Description Decimal value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int16, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(short value, NpgsqlParameter parameter) Parameters Type Name Description Int16 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Int32>.ValidateAndGetLength(System.Int32, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Single, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(float value, NpgsqlParameter parameter) Parameters Type Name Description Single value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Byte value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Decimal value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int16 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Int32>.Write(System.Int32, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Single value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration byte INpgsqlSimpleTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Byte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Decimal>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration decimal INpgsqlSimpleTypeHandler<decimal>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Decimal | Improve this Doc View Source INpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration double INpgsqlSimpleTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Double | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration short INpgsqlSimpleTypeHandler<short>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int16 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration long INpgsqlSimpleTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int64 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration float INpgsqlSimpleTypeHandler<float>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Single Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.Int64Handler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.Int64Handler.html",
    "title": "Class Int64Handler | Npgsql Documentation",
    "keywords": "Class Int64Handler A type handler for the PostgreSQL bigint data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Int64 > NpgsqlSimpleTypeHandler < Int64 > Int64Handler Implements INpgsqlTypeHandler < Int64 > INpgsqlSimpleTypeHandler < Int64 > INpgsqlSimpleTypeHandler < Byte > INpgsqlSimpleTypeHandler < Int16 > INpgsqlSimpleTypeHandler < Int32 > INpgsqlSimpleTypeHandler < Single > INpgsqlSimpleTypeHandler < Double > INpgsqlSimpleTypeHandler < Decimal > Inherited Members NpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Int64>.Write(Int64, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<Int64>.ValidateAndGetLength(Int64, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Int64>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Int64>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Int64>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Int64>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Int64>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Int64>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class Int64Handler : NpgsqlSimpleTypeHandler<long>, INpgsqlTypeHandler<long>, INpgsqlSimpleTypeHandler<long>, INpgsqlSimpleTypeHandler<byte>, INpgsqlSimpleTypeHandler<short>, INpgsqlSimpleTypeHandler<int>, INpgsqlSimpleTypeHandler<float>, INpgsqlSimpleTypeHandler<double>, INpgsqlSimpleTypeHandler<decimal> Remarks See https://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source Int64Handler(PostgresType) Declaration public Int64Handler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override long Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description Int64 The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Int64>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Byte, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(byte value, NpgsqlParameter parameter) Parameters Type Name Description Byte value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Decimal, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(decimal value, NpgsqlParameter parameter) Parameters Type Name Description Decimal value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int16, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(short value, NpgsqlParameter parameter) Parameters Type Name Description Int16 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Int64>.ValidateAndGetLength(System.Int64, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Single, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(float value, NpgsqlParameter parameter) Parameters Type Name Description Single value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Byte value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Decimal value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int16 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Int64>.Write(System.Int64, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Single value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration byte INpgsqlSimpleTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Byte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Decimal>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration decimal INpgsqlSimpleTypeHandler<decimal>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Decimal | Improve this Doc View Source INpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration double INpgsqlSimpleTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Double | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration short INpgsqlSimpleTypeHandler<short>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int16 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration int INpgsqlSimpleTypeHandler<int>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Int32 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration float INpgsqlSimpleTypeHandler<float>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Single Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.MoneyHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.MoneyHandler.html",
    "title": "Class MoneyHandler | Npgsql Documentation",
    "keywords": "Class MoneyHandler A type handler for the PostgreSQL money data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Decimal > NpgsqlSimpleTypeHandler < Decimal > MoneyHandler Implements INpgsqlTypeHandler < Decimal > INpgsqlSimpleTypeHandler < Decimal > Inherited Members NpgsqlSimpleTypeHandler<Decimal>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Decimal>.Write(Decimal, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<Decimal>.ValidateAndGetLength(Decimal, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Decimal>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Decimal>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Decimal>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Decimal>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Decimal>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Decimal>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class MoneyHandler : NpgsqlSimpleTypeHandler<decimal>, INpgsqlTypeHandler<decimal>, INpgsqlSimpleTypeHandler<decimal> Remarks See https://www.postgresql.org/docs/current/static/datatype-money.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source MoneyHandler(PostgresType) Declaration public MoneyHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override decimal Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description Decimal The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Decimal>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Decimal, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(decimal value, NpgsqlParameter parameter) Parameters Type Name Description Decimal value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Decimal>.ValidateAndGetLength(System.Decimal, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Decimal value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Decimal>.Write(System.Decimal, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler.html",
    "title": "Class NumericHandler | Npgsql Documentation",
    "keywords": "Class NumericHandler A type handler for the PostgreSQL numeric data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Decimal > NumericHandler Implements INpgsqlTypeHandler < Decimal > INpgsqlTypeHandler < Byte > INpgsqlTypeHandler < Int16 > INpgsqlTypeHandler < Int32 > INpgsqlTypeHandler < Int64 > INpgsqlTypeHandler < Single > INpgsqlTypeHandler < Double > INpgsqlTypeHandler < BigInteger > Inherited Members NpgsqlTypeHandler<Decimal>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Decimal>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Decimal>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Decimal>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Decimal>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Decimal>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class NumericHandler : NpgsqlTypeHandler<decimal>, INpgsqlTypeHandler<decimal>, INpgsqlTypeHandler<byte>, INpgsqlTypeHandler<short>, INpgsqlTypeHandler<int>, INpgsqlTypeHandler<long>, INpgsqlTypeHandler<float>, INpgsqlTypeHandler<double>, INpgsqlTypeHandler<BigInteger> Remarks See https://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source NumericHandler(PostgresType) Declaration public NumericHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override async ValueTask<decimal> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < Decimal > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.Decimal>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(BigInteger, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(BigInteger value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description BigInteger value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(Byte, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(byte value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Byte value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Decimal, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(decimal value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Decimal value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.Decimal>.ValidateAndGetLength(System.Decimal, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Double, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(double value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int16, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(short value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Int16 value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int32, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(int value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Int32 value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Int64, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(long value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Int64 value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Single, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(float value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Single value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(BigInteger, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public async Task Write(BigInteger value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description BigInteger value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(byte value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Byte value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override async Task Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Decimal value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.Decimal>.Write(System.Decimal, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(double value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Double value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(short value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Int16 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(int value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(long value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Int64 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(float value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Single value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<BigInteger>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<BigInteger> INpgsqlTypeHandler<BigInteger>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < BigInteger > | Improve this Doc View Source INpgsqlTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<byte> INpgsqlTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Byte > | Improve this Doc View Source INpgsqlTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<double> INpgsqlTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Double > | Improve this Doc View Source INpgsqlTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<short> INpgsqlTypeHandler<short>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Int16 > | Improve this Doc View Source INpgsqlTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<int> INpgsqlTypeHandler<int>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Int32 > | Improve this Doc View Source INpgsqlTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<long> INpgsqlTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Int64 > | Improve this Doc View Source INpgsqlTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<float> INpgsqlTypeHandler<float>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Single > Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.SingleHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.SingleHandler.html",
    "title": "Class SingleHandler | Npgsql Documentation",
    "keywords": "Class SingleHandler A type handler for the PostgreSQL real data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Single > NpgsqlSimpleTypeHandler < Single > SingleHandler Implements INpgsqlTypeHandler < Single > INpgsqlSimpleTypeHandler < Single > INpgsqlSimpleTypeHandler < Double > Inherited Members NpgsqlSimpleTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Single>.Write(Single, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<Single>.ValidateAndGetLength(Single, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Single>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Single>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Single>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Single>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Single>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Single>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class SingleHandler : NpgsqlSimpleTypeHandler<float>, INpgsqlTypeHandler<float>, INpgsqlSimpleTypeHandler<float>, INpgsqlSimpleTypeHandler<double> Remarks See https://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source SingleHandler(PostgresType) Declaration public SingleHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override float Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description Single The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Single>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Single, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(float value, NpgsqlParameter parameter) Parameters Type Name Description Single value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Single>.ValidateAndGetLength(System.Single, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Double value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Single value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.Single>.Write(System.Single, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration double INpgsqlSimpleTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description Double Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.UInt32Handler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.UInt32Handler.html",
    "title": "Class UInt32Handler | Npgsql Documentation",
    "keywords": "Class UInt32Handler A type handler for PostgreSQL unsigned 32-bit data types. This is only used for internal types. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < UInt32 > NpgsqlSimpleTypeHandler < UInt32 > UInt32Handler Implements INpgsqlTypeHandler < UInt32 > INpgsqlSimpleTypeHandler < UInt32 > Inherited Members NpgsqlSimpleTypeHandler<UInt32>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<UInt32>.Write(UInt32, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<UInt32>.ValidateAndGetLength(UInt32, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<UInt32>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<UInt32>.GetFieldType(FieldDescription) NpgsqlTypeHandler<UInt32>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<UInt32>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<UInt32>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<UInt32>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class UInt32Handler : NpgsqlSimpleTypeHandler<uint>, INpgsqlTypeHandler<uint>, INpgsqlSimpleTypeHandler<uint> Remarks See https://www.postgresql.org/docs/current/static/datatype-oid.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source UInt32Handler(PostgresType) Declaration public UInt32Handler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override uint Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description UInt32 The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.UInt32>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(UInt32, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(uint value, NpgsqlParameter parameter) Parameters Type Name Description UInt32 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.UInt32>.ValidateAndGetLength(System.UInt32, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(UInt32, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(uint value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description UInt32 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.UInt32>.Write(System.UInt32, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.UInt64Handler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.NumericHandlers.UInt64Handler.html",
    "title": "Class UInt64Handler | Npgsql Documentation",
    "keywords": "Class UInt64Handler A type handler for PostgreSQL unsigned 64-bit data types. This is only used for internal types. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < UInt64 > NpgsqlSimpleTypeHandler < UInt64 > UInt64Handler Implements INpgsqlTypeHandler < UInt64 > INpgsqlSimpleTypeHandler < UInt64 > Inherited Members NpgsqlSimpleTypeHandler<UInt64>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<UInt64>.Write(UInt64, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<UInt64>.ValidateAndGetLength(UInt64, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<UInt64>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<UInt64>.GetFieldType(FieldDescription) NpgsqlTypeHandler<UInt64>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<UInt64>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<UInt64>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<UInt64>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class UInt64Handler : NpgsqlSimpleTypeHandler<ulong>, INpgsqlTypeHandler<ulong>, INpgsqlSimpleTypeHandler<ulong> Remarks The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source UInt64Handler(PostgresType) Declaration public UInt64Handler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override ulong Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description UInt64 The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.UInt64>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(UInt64, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(ulong value, NpgsqlParameter parameter) Parameters Type Name Description UInt64 value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.UInt64>.ValidateAndGetLength(System.UInt64, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(UInt64, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(ulong value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description UInt64 value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<System.UInt64>.Write(System.UInt64, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.RangeHandler-1.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.RangeHandler-1.html",
    "title": "Class RangeHandler<TSubtype> | Npgsql Documentation",
    "keywords": "Class RangeHandler<TSubtype> A type handler for PostgreSQL range types. Inheritance Object NpgsqlTypeHandler RangeHandler<TSubtype> RangeHandler<TSubtype1, TSubtype2> DateRangeHandler TimestampTzRangeHandler Implements INpgsqlTypeHandler < NpgsqlRange <TSubtype>> Inherited Members NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class RangeHandler<TSubtype> : NpgsqlTypeHandler, INpgsqlTypeHandler<NpgsqlRange<TSubtype>> Type Parameters Name Description TSubtype The range subtype. Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source RangeHandler(PostgresType, NpgsqlTypeHandler) Declaration public RangeHandler(PostgresType rangePostgresType, NpgsqlTypeHandler subtypeHandler) Parameters Type Name Description PostgresType rangePostgresType NpgsqlTypeHandler subtypeHandler Properties | Improve this Doc View Source SubtypeHandler The type handler for the subtype that this range type holds Declaration protected NpgsqlTypeHandler SubtypeHandler { get; } Property Value Type Description NpgsqlTypeHandler Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) Creates a type handler for arrays of this handler's type. Declaration public override NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode) Parameters Type Name Description PostgresArrayType pgArrayType ArrayNullabilityMode arrayNullabilityMode Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) | Improve this Doc View Source CreateMultirangeHandler(PostgresMultirangeType) Creates a type handler for multiranges of this handler's type. Declaration public override NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgMultirangeType) Parameters Type Name Description PostgresMultirangeType pgMultirangeType Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) | Improve this Doc View Source CreateRangeHandler(PostgresType) Creates a type handler for ranges of this handler's type. Declaration public override NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType) Parameters Type Name Description PostgresType pgRangeType Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandler.CreateRangeHandler(PostgresType) | Improve this Doc View Source GetFieldType(FieldDescription) Declaration public override Type GetFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides NpgsqlTypeHandler.GetFieldType(FieldDescription) | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public override Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides NpgsqlTypeHandler.GetProviderSpecificFieldType(FieldDescription) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type T with the given length from the provided buffer, using either sync or async I/O. Declaration public ValueTask<NpgsqlRange<TSubtype>> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < NpgsqlRange <TSubtype>> The fully-read value. | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > Overrides NpgsqlTypeHandler.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ReadRange<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration protected async ValueTask<NpgsqlRange<TAnySubtype>> ReadRange<TAnySubtype>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlRange <TAnySubtype>> Type Parameters Name Description TAnySubtype | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<TSubtype>, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlRange<TSubtype> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange <TSubtype> value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLengthRange<TAnySubtype>(NpgsqlRange<TAnySubtype>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected int ValidateAndGetLengthRange<TAnySubtype>(NpgsqlRange<TAnySubtype> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange <TAnySubtype> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Type Parameters Name Description TAnySubtype | Improve this Doc View Source Write(NpgsqlRange<TSubtype>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(NpgsqlRange<TSubtype> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange <TSubtype> value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source WriteRange<TAnySubtype>(NpgsqlRange<TAnySubtype>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration protected async Task WriteRange<TAnySubtype>(NpgsqlRange<TAnySubtype> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange <TAnySubtype> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description TAnySubtype Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.RangeHandler-2.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.RangeHandler-2.html",
    "title": "Class RangeHandler<TSubtype1, TSubtype2> | Npgsql Documentation",
    "keywords": "Class RangeHandler<TSubtype1, TSubtype2> Type handler for PostgreSQL range types. Inheritance Object NpgsqlTypeHandler RangeHandler <TSubtype1> RangeHandler<TSubtype1, TSubtype2> Implements INpgsqlTypeHandler < NpgsqlRange <TSubtype1>> INpgsqlTypeHandler < NpgsqlRange <TSubtype2>> Inherited Members RangeHandler<TSubtype1>.SubtypeHandler RangeHandler<TSubtype1>.GetFieldType(FieldDescription) RangeHandler<TSubtype1>.GetProviderSpecificFieldType(FieldDescription) RangeHandler<TSubtype1>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) RangeHandler<TSubtype1>.CreateRangeHandler(PostgresType) RangeHandler<TSubtype1>.CreateMultirangeHandler(PostgresMultirangeType) RangeHandler<TSubtype1>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) RangeHandler<TSubtype1>.ReadRange<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) RangeHandler<TSubtype1>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) RangeHandler<TSubtype1>.ValidateAndGetLength(NpgsqlRange<TSubtype1>, NpgsqlLengthCache, NpgsqlParameter) RangeHandler<TSubtype1>.ValidateAndGetLengthRange<TAnySubtype>(NpgsqlRange<TAnySubtype>, NpgsqlLengthCache, NpgsqlParameter) RangeHandler<TSubtype1>.Write(NpgsqlRange<TSubtype1>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) RangeHandler<TSubtype1>.WriteRange<TAnySubtype>(NpgsqlRange<TAnySubtype>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class RangeHandler<TSubtype1, TSubtype2> : RangeHandler<TSubtype1>, INpgsqlTypeHandler<NpgsqlRange<TSubtype1>>, INpgsqlTypeHandler<NpgsqlRange<TSubtype2>> Type Parameters Name Description TSubtype1 The main range subtype. TSubtype2 An alternative range subtype. Remarks Introduced in PostgreSQL 9.2. https://www.postgresql.org/docs/current/static/rangetypes.html Constructors | Improve this Doc View Source RangeHandler(PostgresType, NpgsqlTypeHandler) Declaration public RangeHandler(PostgresType rangePostgresType, NpgsqlTypeHandler subtypeHandler) Parameters Type Name Description PostgresType rangePostgresType NpgsqlTypeHandler subtypeHandler Methods | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<TSubtype2>, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(NpgsqlRange<TSubtype2> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange <TSubtype2> value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateObjectAndGetLength(Nullable<Object>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateObjectAndGetLength(object? value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Nullable < Object > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source Write(NpgsqlRange<TSubtype2>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(NpgsqlRange<TSubtype2> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange <TSubtype2> value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public override Task WriteObjectWithLength(object? value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Nullable < Object > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlRange<TSubtype2>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<NpgsqlRange<TSubtype2>> INpgsqlTypeHandler<NpgsqlRange<TSubtype2>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < NpgsqlRange <TSubtype2>> Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.TextHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.TextHandler.html",
    "title": "Class TextHandler | Npgsql Documentation",
    "keywords": "Class TextHandler A type handler for PostgreSQL character data types (text, char, varchar, xml...). Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < String > TextHandler LQueryHandler LTreeHandler LTxtQueryHandler Implements INpgsqlTypeHandler < String > INpgsqlTypeHandler < Char []> INpgsqlTypeHandler < ArraySegment < Char >> INpgsqlTypeHandler < Char > INpgsqlTypeHandler < Byte []> Inherited Members NpgsqlTypeHandler<String>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<String>.GetFieldType(FieldDescription) NpgsqlTypeHandler<String>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<String>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<String>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<String>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class TextHandler : NpgsqlTypeHandler<string>, INpgsqlTypeHandler<string>, INpgsqlTypeHandler<char[]>, INpgsqlTypeHandler<ArraySegment<char>>, INpgsqlTypeHandler<char>, INpgsqlTypeHandler<byte[]> Remarks See https://www.postgresql.org/docs/current/datatype-character.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TextHandler(PostgresType, Encoding) Declaration protected TextHandler(PostgresType postgresType, Encoding encoding) Parameters Type Name Description PostgresType postgresType Encoding encoding Methods | Improve this Doc View Source GetTextReader(Stream, NpgsqlReadBuffer) Declaration public virtual TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer) Parameters Type Name Description Stream stream NpgsqlReadBuffer buffer Returns Type Description TextReader | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public override ValueTask<string> Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 byteLen Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask < String > The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.String>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(ArraySegment<Char>, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public virtual int ValidateAndGetLength(ArraySegment<char> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description ArraySegment < Char > value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Byte[], ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(byte[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Byte [] value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Char, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public int ValidateAndGetLength(char value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Char value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(Char[], ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration public virtual int ValidateAndGetLength(char[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Char [] value NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public override int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description String value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.String>.ValidateAndGetLength(System.String, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(ArraySegment<Char>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public virtual Task Write(ArraySegment<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description ArraySegment < Char > value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Byte[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public Task Write(byte[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Byte [] value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Char, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public async Task Write(char value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Char value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Char[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration public virtual Task Write(char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Char [] value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public override Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description String value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<System.String>.Write(System.String, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<ArraySegment<Char>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<ArraySegment<char>> INpgsqlTypeHandler<ArraySegment<char>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < ArraySegment < Char >> | Improve this Doc View Source INpgsqlTypeHandler<Byte[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<byte[]> INpgsqlTypeHandler<byte[]>.Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 byteLen Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Byte []> | Improve this Doc View Source INpgsqlTypeHandler<Char[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<char[]> INpgsqlTypeHandler<char[]>.Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 byteLen Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Char []> | Improve this Doc View Source INpgsqlTypeHandler<Char>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration async ValueTask<char> INpgsqlTypeHandler<char>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Char > Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandlers.UuidHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandlers.UuidHandler.html",
    "title": "Class UuidHandler | Npgsql Documentation",
    "keywords": "Class UuidHandler A type handler for the PostgreSQL uuid data type. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < Guid > NpgsqlSimpleTypeHandler < Guid > UuidHandler Implements INpgsqlTypeHandler < Guid > INpgsqlSimpleTypeHandler < Guid > Inherited Members NpgsqlSimpleTypeHandler<Guid>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Guid>.Write(Guid, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<Guid>.ValidateAndGetLength(Guid, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Guid>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Guid>.GetFieldType(FieldDescription) NpgsqlTypeHandler<Guid>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<Guid>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<Guid>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<Guid>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandlers Assembly : Npgsql.dll Syntax public class UuidHandler : NpgsqlSimpleTypeHandler<Guid>, INpgsqlTypeHandler<Guid>, INpgsqlSimpleTypeHandler<Guid> Remarks See https://www.postgresql.org/docs/current/static/datatype-uuid.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source UuidHandler(PostgresType) Declaration public UuidHandler(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public override Guid Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description Guid The fully-read value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<Guid>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Guid, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public override int ValidateAndGetLength(Guid value, NpgsqlParameter parameter) Parameters Type Name Description Guid value NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<Guid>.ValidateAndGetLength(Guid, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Guid, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public override void Write(Guid value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description Guid value NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Overrides Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler<Guid>.Write(Guid, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandling.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.html",
    "title": "Namespace Npgsql.Internal.TypeHandling | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeHandling Classes NpgsqlLengthCache An array of cached lengths for the parameters sending process. When sending parameters, lengths need to be calculated more than once (once for Bind, once for an array, once for the string within that array). This cache optimizes that. Lengths are added to the cache, and then retrieved in the same order. NpgsqlSimpleTypeHandler<TDefault> Base class for all simple type handlers, which read and write short, non-arbitrary lengthed values to PostgreSQL. Provides a simpler API to implement when compared to NpgsqlTypeHandler - Npgsql takes care of all I/O before calling into this type, so no I/O needs to be performed by it. NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> A simple type handler that supports a provider-specific value in addition to its default value. This is necessary mainly in cases where the CLR type cannot represent the full range of the PostgreSQL type, and a custom CLR type is needed. The provider-specific type TPsv will be returned from calls to . NpgsqlTypeHandler Base class for all type handlers, which read and write CLR types into their PostgreSQL binary representation. Type handler writers shouldn't inherit from this class, inherit NpgsqlTypeHandler or NpgsqlSimpleTypeHandler<TDefault> instead. NpgsqlTypeHandler<TDefault> Base class for all type handlers, which read and write CLR types into their PostgreSQL binary representation. Unless your type is arbitrary-length, consider inheriting from NpgsqlSimpleTypeHandler<TDefault> instead. TypeHandlerResolver An Npgsql resolver for type handlers. Typically used by plugins to alter how Npgsql reads and writes values to PostgreSQL. TypeHandlerResolverFactory TypeMappingInfo Interfaces INpgsqlSimpleTypeHandler<T> Type handlers that wish to support reading other types in additional to the main one can implement this interface for all those types. INpgsqlTypeHandler<T> Type handlers that wish to support reading other types in additional to the main one can implement this interface for all those types."
  },
  "doc/api/Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler-1.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler-1.html",
    "title": "Interface INpgsqlSimpleTypeHandler<T> | Npgsql Documentation",
    "keywords": "Interface INpgsqlSimpleTypeHandler<T> Type handlers that wish to support reading other types in additional to the main one can implement this interface for all those types. Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public interface INpgsqlSimpleTypeHandler<T> Type Parameters Name Description T Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type T with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration T Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description T The fully-read value. | Improve this Doc View Source ValidateAndGetLength(T, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration int ValidateAndGetLength(T value, NpgsqlParameter parameter) Parameters Type Name Description T value The value to be written to PostgreSQL NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(T, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration void Write(T value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description T value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size )."
  },
  "doc/api/Npgsql.Internal.TypeHandling.INpgsqlTypeHandler-1.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.INpgsqlTypeHandler-1.html",
    "title": "Interface INpgsqlTypeHandler<T> | Npgsql Documentation",
    "keywords": "Interface INpgsqlTypeHandler<T> Type handlers that wish to support reading other types in additional to the main one can implement this interface for all those types. Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public interface INpgsqlTypeHandler<T> Type Parameters Name Description T Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type T with the given length from the provided buffer, using either sync or async I/O. Declaration ValueTask<T> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask <T> The fully-read value. | Improve this Doc View Source ValidateAndGetLength(T, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration int ValidateAndGetLength(T value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description T value The value to be written to PostgreSQL NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(T, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer. Declaration Task Write(T value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description T value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task"
  },
  "doc/api/Npgsql.Internal.TypeHandling.NpgsqlLengthCache.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.NpgsqlLengthCache.html",
    "title": "Class NpgsqlLengthCache | Npgsql Documentation",
    "keywords": "Class NpgsqlLengthCache An array of cached lengths for the parameters sending process. When sending parameters, lengths need to be calculated more than once (once for Bind, once for an array, once for the string within that array). This cache optimizes that. Lengths are added to the cache, and then retrieved in the same order. Inheritance Object NpgsqlLengthCache Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public sealed class NpgsqlLengthCache : object Constructors | Improve this Doc View Source NpgsqlLengthCache() Declaration public NpgsqlLengthCache() | Improve this Doc View Source NpgsqlLengthCache(Int32) Declaration public NpgsqlLengthCache(int capacity) Parameters Type Name Description Int32 capacity Fields | Improve this Doc View Source IsPopulated Declaration public bool IsPopulated Field Value Type Description Boolean | Improve this Doc View Source Lengths Declaration public List<int> Lengths Field Value Type Description List < Int32 > | Improve this Doc View Source Position Declaration public int Position Field Value Type Description Int32 Methods | Improve this Doc View Source Get() Retrieves a length value previously stored in the cache via Set(Int32) . Called at the writing phase, after validation has already occurred and the length cache is populated. Declaration public int Get() Returns Type Description Int32 | Improve this Doc View Source Set(Int32) Stores a length value in the cache, to be fetched later via Get() . Called at the ValidateAndGetLength<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) phase. Declaration public int Set(int len) Parameters Type Name Description Int32 len Returns Type Description Int32 The length parameter."
  },
  "doc/api/Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler-1.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler-1.html",
    "title": "Class NpgsqlSimpleTypeHandler<TDefault> | Npgsql Documentation",
    "keywords": "Class NpgsqlSimpleTypeHandler<TDefault> Base class for all simple type handlers, which read and write short, non-arbitrary lengthed values to PostgreSQL. Provides a simpler API to implement when compared to NpgsqlTypeHandler - Npgsql takes care of all I/O before calling into this type, so no I/O needs to be performed by it. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler <TDefault> NpgsqlSimpleTypeHandler<TDefault> BoolHandler DateHandler IntervalHandler TimeHandler TimestampHandler TimestampTzHandler TimeTzHandler BoxHandler CircleHandler LineHandler LineSegmentHandler PointHandler InternalCharHandler CidrHandler MacaddrHandler DoubleHandler Int16Handler Int32Handler Int64Handler MoneyHandler SingleHandler UInt32Handler UInt64Handler UuidHandler NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> Implements INpgsqlTypeHandler <TDefault> INpgsqlSimpleTypeHandler <TDefault> Inherited Members NpgsqlTypeHandler<TDefault>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<TDefault>.GetFieldType(FieldDescription) NpgsqlTypeHandler<TDefault>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<TDefault>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<TDefault>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<TDefault>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlSimpleTypeHandler<TDefault> : NpgsqlTypeHandler<TDefault>, INpgsqlTypeHandler<TDefault>, INpgsqlSimpleTypeHandler<TDefault> Type Parameters Name Description TDefault The default CLR type that this handler will read and write. For example, calling on a column with this handler will return a value with type TDefault . Type handlers can support additional types by implementing INpgsqlTypeHandler<T> . Constructors | Improve this Doc View Source NpgsqlSimpleTypeHandler(PostgresType) Declaration protected NpgsqlSimpleTypeHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public abstract TDefault Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description TDefault The fully-read value. | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public sealed override ValueTask<TDefault> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask <TDefault> Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<TDefault>.Read(Npgsql.Internal.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(TDefault, ref NpgsqlLengthCache, NpgsqlParameter) Simple type handlers override ValidateAndGetLength(TDefault, NpgsqlParameter) instead of this. Declaration public sealed override int ValidateAndGetLength(TDefault value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TDefault value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<TDefault>.ValidateAndGetLength(TDefault, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(TDefault, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public abstract int ValidateAndGetLength(TDefault value, NpgsqlParameter parameter) Parameters Type Name Description TDefault value The value to be written to PostgreSQL NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(TDefault, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Simple type handlers override Write(TDefault, NpgsqlWriteBuffer, NpgsqlParameter) instead of this. Declaration public sealed override Task Write(TDefault value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description TDefault value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<TDefault>.Write(TDefault, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) | Improve this Doc View Source Write(TDefault, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public abstract void Write(TDefault value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description TDefault value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv-2.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv-2.html",
    "title": "Class NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> | Npgsql Documentation",
    "keywords": "Class NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> A simple type handler that supports a provider-specific value in addition to its default value. This is necessary mainly in cases where the CLR type cannot represent the full range of the PostgreSQL type, and a custom CLR type is needed. The provider-specific type TPsv will be returned from calls to . Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler <TDefault> NpgsqlSimpleTypeHandler <TDefault> NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> InetHandler Implements INpgsqlTypeHandler <TDefault> INpgsqlSimpleTypeHandler <TDefault> INpgsqlSimpleTypeHandler <TPsv> Inherited Members NpgsqlSimpleTypeHandler<TDefault>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandler<TDefault>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<TDefault>.ValidateAndGetLength(TDefault, NpgsqlParameter) NpgsqlSimpleTypeHandler<TDefault>.Write(TDefault, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandler<TDefault>.Write(TDefault, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlSimpleTypeHandler<TDefault>.ValidateAndGetLength(TDefault, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<TDefault>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<TDefault>.GetFieldType(FieldDescription) NpgsqlTypeHandler<TDefault>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<TDefault>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> : NpgsqlSimpleTypeHandler<TDefault>, INpgsqlTypeHandler<TDefault>, INpgsqlSimpleTypeHandler<TDefault>, INpgsqlSimpleTypeHandler<TPsv> Type Parameters Name Description TDefault The default CLR type that this handler will read and write. For example, calling on a column with this handler will return a value with type TDefault . Type handlers can support additional types by implementing INpgsqlTypeHandler<T> . TPsv The provider-specific CLR type that this handler will read and write. Constructors | Improve this Doc View Source NpgsqlSimpleTypeHandlerWithPsv(PostgresType) Declaration public NpgsqlSimpleTypeHandlerWithPsv(PostgresType pgType) Parameters Type Name Description PostgresType pgType Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) Declaration public override NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode) Parameters Type Name Description PostgresArrayType pgArrayType ArrayNullabilityMode arrayNullabilityMode Returns Type Description NpgsqlTypeHandler Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<TDefault>.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType, Npgsql.ArrayNullabilityMode) | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public override Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<TDefault>.GetProviderSpecificFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TPsv with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration protected abstract TPsv ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description TPsv The fully-read value. | Improve this Doc View Source ValidateAndGetLength(TPsv, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public abstract int ValidateAndGetLength(TPsv value, NpgsqlParameter parameter) Parameters Type Name Description TPsv value The value to be written to PostgreSQL NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(TPsv, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public abstract void Write(TPsv value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description TPsv value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<TPsv>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration TPsv INpgsqlSimpleTypeHandler<TPsv>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description TPsv Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandling.NpgsqlTypeHandler.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.NpgsqlTypeHandler.html",
    "title": "Class NpgsqlTypeHandler | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeHandler Base class for all type handlers, which read and write CLR types into their PostgreSQL binary representation. Type handler writers shouldn't inherit from this class, inherit NpgsqlTypeHandler or NpgsqlSimpleTypeHandler<TDefault> instead. Inheritance Object NpgsqlTypeHandler ArrayHandler RangeHandler<TSubtype> NpgsqlTypeHandler<TDefault> Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlTypeHandler : object Constructors | Improve this Doc View Source NpgsqlTypeHandler(PostgresType) Declaration protected NpgsqlTypeHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Properties | Improve this Doc View Source PostgresType The PostgreSQL type handled by this type handler. Declaration public PostgresType PostgresType { get; } Property Value Type Description PostgresType Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) Creates a type handler for arrays of this handler's type. Declaration public abstract NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode) Parameters Type Name Description PostgresArrayType pgArrayType ArrayNullabilityMode arrayNullabilityMode Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source CreateConversionButNoParamException(Type) Used to create an exception when the provided type can be converted and written, but an instance of NpgsqlParameter is required for caching of the converted value (in ConvertedValue . Declaration protected Exception CreateConversionButNoParamException(Type clrType) Parameters Type Name Description Type clrType Returns Type Description Exception | Improve this Doc View Source CreateMultirangeHandler(PostgresMultirangeType) Creates a type handler for multiranges of this handler's type. Declaration public abstract NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgMultirangeType) Parameters Type Name Description PostgresMultirangeType pgMultirangeType Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source CreateRangeHandler(PostgresType) Creates a type handler for ranges of this handler's type. Declaration public abstract NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType) Parameters Type Name Description PostgresType pgRangeType Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source GetFieldType(FieldDescription) Declaration public abstract Type GetFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public abstract Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type | Improve this Doc View Source Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) Version of Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) that's called when we know the entire value is already buffered in memory (i.e. in non-sequential mode). Declaration public TAny Read<TAny>(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len FieldDescription fieldDescription Returns Type Description TAny Type Parameters Name Description TAny | Improve this Doc View Source Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TAny with the given length from the provided buffer, using either sync or async I/O. Declaration protected async ValueTask<TAny> Read<TAny>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask <TAny> The fully-read value. Type Parameters Name Description TAny | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a column as the type handler's default read type. If it is not already entirely in memory, sync or async I/O will be performed as specified by async . Declaration public abstract ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > | Improve this Doc View Source ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration protected virtual ValueTask<TAny> ReadCustom<TAny>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask <TAny> Type Parameters Name Description TAny | Improve this Doc View Source ValidateAndGetLength<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . null and must be handled before calling into this. Declaration protected int ValidateAndGetLength<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Type Parameters Name Description TAny | Improve this Doc View Source ValidateAndGetLengthCustom<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected virtual int ValidateAndGetLengthCustom<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 Type Parameters Name Description TAny | Improve this Doc View Source ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public abstract int ValidateObjectAndGetLength(object value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Object value The value to be written to PostgreSQL NpgsqlLengthCache lengthCache If the byte length calculation is costly (e.g. for UTF-8 strings), its result can be stored in the length cache to be reused in the writing process, preventing recalculation. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description Int32 The number of bytes required to write the value. | Improve this Doc View Source WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Writes a value to the provided buffer, using either sync or async I/O. Declaration public abstract Task WriteObjectWithLength(object? value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Nullable < Object > value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public async Task WriteWithLength<TAny>(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description TAny value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description TAny | Improve this Doc View Source WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Typically does not need to be overridden by type handlers, but may be needed in some cases (e.g. ArrayHandler . Note that this method assumes it can write 4 bytes of length (already verified by WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) ). Declaration protected virtual Task WriteWithLengthCustom<TAny>(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken) Parameters Type Name Description TAny value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description TAny"
  },
  "doc/api/Npgsql.Internal.TypeHandling.NpgsqlTypeHandler-1.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.NpgsqlTypeHandler-1.html",
    "title": "Class NpgsqlTypeHandler<TDefault> | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeHandler<TDefault> Base class for all type handlers, which read and write CLR types into their PostgreSQL binary representation. Unless your type is arbitrary-length, consider inheriting from NpgsqlSimpleTypeHandler<TDefault> instead. Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler<TDefault> BitStringHandler ByteaHandler TsQueryHandler TsVectorHandler PathHandler PolygonHandler HstoreHandler JsonHandler JsonPathHandler MultirangeHandler<TSubtype> NumericHandler TextHandler NpgsqlSimpleTypeHandler <TDefault> Implements INpgsqlTypeHandler <TDefault> Inherited Members NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlTypeHandler<TDefault> : NpgsqlTypeHandler, INpgsqlTypeHandler<TDefault> Type Parameters Name Description TDefault The default CLR type that this handler will read and write. For example, calling on a column with this handler will return a value with type TDefault . Type handlers can support additional types by implementing INpgsqlTypeHandler<T> . Constructors | Improve this Doc View Source NpgsqlTypeHandler(PostgresType) Declaration protected NpgsqlTypeHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) Creates a type handler for arrays of this handler's type. Declaration public override NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode) Parameters Type Name Description PostgresArrayType pgArrayType ArrayNullabilityMode arrayNullabilityMode Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) | Improve this Doc View Source CreateMultirangeHandler(PostgresMultirangeType) Creates a type handler for multiranges of this handler's type. Declaration public override NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgMultirangeType) Parameters Type Name Description PostgresMultirangeType pgMultirangeType Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) | Improve this Doc View Source CreateRangeHandler(PostgresType) Creates a type handler for ranges of this handler's type. Declaration public override NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType) Parameters Type Name Description PostgresType pgRangeType Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandler.CreateRangeHandler(PostgresType) | Improve this Doc View Source GetFieldType(FieldDescription) Declaration public override Type GetFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides NpgsqlTypeHandler.GetFieldType(FieldDescription) | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public override Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides NpgsqlTypeHandler.GetProviderSpecificFieldType(FieldDescription) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public abstract ValueTask<TDefault> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description ValueTask <TDefault> The fully-read value. | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > Overrides NpgsqlTypeHandler.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ValidateAndGetLength(TDefault, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public abstract int ValidateAndGetLength(TDefault value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TDefault value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source Write(TDefault, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Called to write the value of a generic NpgsqlParameter<T> . Declaration public abstract Task Write(TDefault value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description TDefault value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.Internal.TypeHandling.TypeHandlerResolver.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.TypeHandlerResolver.html",
    "title": "Class TypeHandlerResolver | Npgsql Documentation",
    "keywords": "Class TypeHandlerResolver An Npgsql resolver for type handlers. Typically used by plugins to alter how Npgsql reads and writes values to PostgreSQL. Inheritance Object TypeHandlerResolver GeoJSONTypeHandlerResolver JsonNetTypeHandlerResolver NetTopologySuiteTypeHandlerResolver NodaTimeTypeHandlerResolver Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public abstract class TypeHandlerResolver : object Methods | Improve this Doc View Source GetMappingByDataTypeName(String) Gets type mapping information for a given PostgreSQL type. Invoked in scenarios when mapping information is required, rather than a type handler for reading or writing. Declaration public abstract TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo | Improve this Doc View Source ResolveByClrType(Type) Resolves a type handler given a .NET CLR type. Declaration public abstract NpgsqlTypeHandler ResolveByClrType(Type type) Parameters Type Name Description Type type Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source ResolveByDataTypeName(String) Resolves a type handler given a PostgreSQL type name, corresponding to the typname column in the PostgreSQL pg_type catalog table. Declaration public abstract NpgsqlTypeHandler ResolveByDataTypeName(string typeName) Parameters Type Name Description String typeName Returns Type Description NpgsqlTypeHandler Remarks See https://www.postgresql.org/docs/current/catalog-pg-type.html . | Improve this Doc View Source ResolveValueDependentValue(Object) Declaration public virtual NpgsqlTypeHandler ResolveValueDependentValue(object value) Parameters Type Name Description Object value Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source ResolveValueTypeGenerically<T>(T) Declaration public virtual NpgsqlTypeHandler ResolveValueTypeGenerically<T>(T value) Parameters Type Name Description T value Returns Type Description NpgsqlTypeHandler Type Parameters Name Description T"
  },
  "doc/api/Npgsql.Internal.TypeHandling.TypeHandlerResolverFactory.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.TypeHandlerResolverFactory.html",
    "title": "Class TypeHandlerResolverFactory | Npgsql Documentation",
    "keywords": "Class TypeHandlerResolverFactory Inheritance Object TypeHandlerResolverFactory GeoJSONTypeHandlerResolverFactory JsonNetTypeHandlerResolverFactory NetTopologySuiteTypeHandlerResolverFactory NodaTimeTypeHandlerResolverFactory Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public abstract class TypeHandlerResolverFactory : object Methods | Improve this Doc View Source Create(NpgsqlConnector) Declaration public abstract TypeHandlerResolver Create(NpgsqlConnector connector) Parameters Type Name Description NpgsqlConnector connector Returns Type Description TypeHandlerResolver | Improve this Doc View Source GetDataTypeNameByClrType(Type) Declaration public abstract string? GetDataTypeNameByClrType(Type clrType) Parameters Type Name Description Type clrType Returns Type Description Nullable < String > | Improve this Doc View Source GetDataTypeNameByValueDependentValue(Object) Declaration public virtual string? GetDataTypeNameByValueDependentValue(object value) Parameters Type Name Description Object value Returns Type Description Nullable < String > | Improve this Doc View Source GetMappingByDataTypeName(String) Declaration public abstract TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo"
  },
  "doc/api/Npgsql.Internal.TypeHandling.TypeMappingInfo.html": {
    "href": "doc/api/Npgsql.Internal.TypeHandling.TypeMappingInfo.html",
    "title": "Class TypeMappingInfo | Npgsql Documentation",
    "keywords": "Class TypeMappingInfo Inheritance Object TypeMappingInfo Namespace : Npgsql.Internal.TypeHandling Assembly : Npgsql.dll Syntax public class TypeMappingInfo : object Constructors | Improve this Doc View Source TypeMappingInfo(Nullable<NpgsqlDbType>, Nullable<String>, Type) Declaration public TypeMappingInfo(NpgsqlDbType? npgsqlDbType, string? dataTypeName, Type clrType) Parameters Type Name Description Nullable < NpgsqlDbType > npgsqlDbType Nullable < String > dataTypeName Type clrType | Improve this Doc View Source TypeMappingInfo(Nullable<NpgsqlDbType>, Nullable<String>, Type[]) Declaration public TypeMappingInfo(NpgsqlDbType? npgsqlDbType, string? dataTypeName, params Type[] clrTypes) Parameters Type Name Description Nullable < NpgsqlDbType > npgsqlDbType Nullable < String > dataTypeName Type [] clrTypes Properties | Improve this Doc View Source ClrTypes Declaration public Type[] ClrTypes { get; } Property Value Type Description Type [] | Improve this Doc View Source DataTypeName Declaration public string? DataTypeName { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source DbType Declaration public DbType DbType { get; } Property Value Type Description DbType | Improve this Doc View Source NpgsqlDbType Declaration public NpgsqlDbType? NpgsqlDbType { get; } Property Value Type Description Nullable < NpgsqlDbType >"
  },
  "doc/api/Npgsql.Internal.TypeMapping.html": {
    "href": "doc/api/Npgsql.Internal.TypeMapping.html",
    "title": "Namespace Npgsql.Internal.TypeMapping | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.TypeMapping Interfaces IUserCompositeTypeMapping IUserEnumTypeMapping IUserTypeMapping"
  },
  "doc/api/Npgsql.Internal.TypeMapping.IUserCompositeTypeMapping.html": {
    "href": "doc/api/Npgsql.Internal.TypeMapping.IUserCompositeTypeMapping.html",
    "title": "Interface IUserCompositeTypeMapping | Npgsql Documentation",
    "keywords": "Interface IUserCompositeTypeMapping Inherited Members IUserTypeMapping.PgTypeName IUserTypeMapping.ClrType IUserTypeMapping.CreateHandler(PostgresType, NpgsqlConnector) Namespace : Npgsql.Internal.TypeMapping Assembly : Npgsql.dll Syntax public interface IUserCompositeTypeMapping : IUserTypeMapping Properties | Improve this Doc View Source NameTranslator Declaration INpgsqlNameTranslator NameTranslator { get; } Property Value Type Description INpgsqlNameTranslator"
  },
  "doc/api/Npgsql.Internal.TypeMapping.IUserEnumTypeMapping.html": {
    "href": "doc/api/Npgsql.Internal.TypeMapping.IUserEnumTypeMapping.html",
    "title": "Interface IUserEnumTypeMapping | Npgsql Documentation",
    "keywords": "Interface IUserEnumTypeMapping Inherited Members IUserTypeMapping.PgTypeName IUserTypeMapping.ClrType IUserTypeMapping.CreateHandler(PostgresType, NpgsqlConnector) Namespace : Npgsql.Internal.TypeMapping Assembly : Npgsql.dll Syntax public interface IUserEnumTypeMapping : IUserTypeMapping Properties | Improve this Doc View Source NameTranslator Declaration INpgsqlNameTranslator NameTranslator { get; } Property Value Type Description INpgsqlNameTranslator"
  },
  "doc/api/Npgsql.Internal.TypeMapping.IUserTypeMapping.html": {
    "href": "doc/api/Npgsql.Internal.TypeMapping.IUserTypeMapping.html",
    "title": "Interface IUserTypeMapping | Npgsql Documentation",
    "keywords": "Interface IUserTypeMapping Namespace : Npgsql.Internal.TypeMapping Assembly : Npgsql.dll Syntax public interface IUserTypeMapping Properties | Improve this Doc View Source ClrType Declaration Type ClrType { get; } Property Value Type Description Type | Improve this Doc View Source PgTypeName Declaration string PgTypeName { get; } Property Value Type Description String Methods | Improve this Doc View Source CreateHandler(PostgresType, NpgsqlConnector) Declaration NpgsqlTypeHandler CreateHandler(PostgresType pgType, NpgsqlConnector connector) Parameters Type Name Description PostgresType pgType NpgsqlConnector connector Returns Type Description NpgsqlTypeHandler"
  },
  "doc/api/Npgsql.Json.NET.Internal.html": {
    "href": "doc/api/Npgsql.Json.NET.Internal.html",
    "title": "Namespace Npgsql.Json.NET.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Json.NET.Internal Classes JsonNetTypeHandlerResolver JsonNetTypeHandlerResolverFactory"
  },
  "doc/api/Npgsql.Json.NET.Internal.JsonNetTypeHandlerResolver.html": {
    "href": "doc/api/Npgsql.Json.NET.Internal.JsonNetTypeHandlerResolver.html",
    "title": "Class JsonNetTypeHandlerResolver | Npgsql Documentation",
    "keywords": "Class JsonNetTypeHandlerResolver Inheritance Object TypeHandlerResolver JsonNetTypeHandlerResolver Inherited Members TypeHandlerResolver.ResolveValueDependentValue(Object) TypeHandlerResolver.ResolveValueTypeGenerically<T>(T) Namespace : Npgsql.Json.NET.Internal Assembly : Npgsql.Json.NET.dll Syntax public class JsonNetTypeHandlerResolver : TypeHandlerResolver Methods | Improve this Doc View Source GetMappingByDataTypeName(String) Declaration public override TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo | Improve this Doc View Source ResolveByClrType(Type) Declaration public override NpgsqlTypeHandler ResolveByClrType(Type type) Parameters Type Name Description Type type Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source ResolveByDataTypeName(String) Declaration public override NpgsqlTypeHandler ResolveByDataTypeName(string typeName) Parameters Type Name Description String typeName Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source ResolveNpgsqlDbType(NpgsqlDbType) Declaration public NpgsqlTypeHandler ResolveNpgsqlDbType(NpgsqlDbType npgsqlDbType) Parameters Type Name Description NpgsqlDbType npgsqlDbType Returns Type Description NpgsqlTypeHandler"
  },
  "doc/api/Npgsql.Json.NET.Internal.JsonNetTypeHandlerResolverFactory.html": {
    "href": "doc/api/Npgsql.Json.NET.Internal.JsonNetTypeHandlerResolverFactory.html",
    "title": "Class JsonNetTypeHandlerResolverFactory | Npgsql Documentation",
    "keywords": "Class JsonNetTypeHandlerResolverFactory Inheritance Object TypeHandlerResolverFactory JsonNetTypeHandlerResolverFactory Inherited Members TypeHandlerResolverFactory.GetDataTypeNameByValueDependentValue(Object) Namespace : Npgsql.Json.NET.Internal Assembly : Npgsql.Json.NET.dll Syntax public class JsonNetTypeHandlerResolverFactory : TypeHandlerResolverFactory Constructors | Improve this Doc View Source JsonNetTypeHandlerResolverFactory(Type[], Type[], Nullable<JsonSerializerSettings>) Declaration public JsonNetTypeHandlerResolverFactory(Type[] jsonbClrTypes, Type[] jsonClrTypes, JsonSerializerSettings? settings) Parameters Type Name Description Type [] jsonbClrTypes Type [] jsonClrTypes Nullable < JsonSerializerSettings > settings Methods | Improve this Doc View Source Create(NpgsqlConnector) Declaration public override TypeHandlerResolver Create(NpgsqlConnector connector) Parameters Type Name Description NpgsqlConnector connector Returns Type Description TypeHandlerResolver Overrides TypeHandlerResolverFactory.Create(NpgsqlConnector) | Improve this Doc View Source GetDataTypeNameByClrType(Type) Declaration public override string? GetDataTypeNameByClrType(Type type) Parameters Type Name Description Type type Returns Type Description Nullable < String > | Improve this Doc View Source GetMappingByDataTypeName(String) Declaration public override TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo"
  },
  "doc/api/Npgsql.NameTranslation.html": {
    "href": "doc/api/Npgsql.NameTranslation.html",
    "title": "Namespace Npgsql.NameTranslation | Npgsql Documentation",
    "keywords": "Namespace Npgsql.NameTranslation Classes NpgsqlNullNameTranslator A name translator which preserves CLR names (e.g. SomeClass) when mapping names to the database. NpgsqlSnakeCaseNameTranslator A name translator which converts standard CLR names (e.g. SomeClass) to snake-case database names (some_class)"
  },
  "doc/api/Npgsql.NameTranslation.NpgsqlNullNameTranslator.html": {
    "href": "doc/api/Npgsql.NameTranslation.NpgsqlNullNameTranslator.html",
    "title": "Class NpgsqlNullNameTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNullNameTranslator A name translator which preserves CLR names (e.g. SomeClass) when mapping names to the database. Inheritance Object NpgsqlNullNameTranslator Implements INpgsqlNameTranslator Namespace : Npgsql.NameTranslation Assembly : Npgsql.dll Syntax public class NpgsqlNullNameTranslator : object, INpgsqlNameTranslator Methods | Improve this Doc View Source TranslateMemberName(String) Given a CLR member name (property or field), translates its name to a database type name. Declaration public string TranslateMemberName(string clrName) Parameters Type Name Description String clrName Returns Type Description String | Improve this Doc View Source TranslateTypeName(String) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration public string TranslateTypeName(string clrName) Parameters Type Name Description String clrName Returns Type Description String Implements INpgsqlNameTranslator"
  },
  "doc/api/Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.html": {
    "href": "doc/api/Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.html",
    "title": "Class NpgsqlSnakeCaseNameTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlSnakeCaseNameTranslator A name translator which converts standard CLR names (e.g. SomeClass) to snake-case database names (some_class) Inheritance Object NpgsqlSnakeCaseNameTranslator Implements INpgsqlNameTranslator Namespace : Npgsql.NameTranslation Assembly : Npgsql.dll Syntax public class NpgsqlSnakeCaseNameTranslator : object, INpgsqlNameTranslator Constructors | Improve this Doc View Source NpgsqlSnakeCaseNameTranslator() Creates a new NpgsqlSnakeCaseNameTranslator . Declaration public NpgsqlSnakeCaseNameTranslator() | Improve this Doc View Source NpgsqlSnakeCaseNameTranslator(Boolean) Creates a new NpgsqlSnakeCaseNameTranslator . Declaration public NpgsqlSnakeCaseNameTranslator(bool legacyMode) Parameters Type Name Description Boolean legacyMode Uses the legacy naming convention if true , otherwise it uses the new naming convention. Methods | Improve this Doc View Source ConvertToSnakeCase(String) Converts a string to its snake_case equivalent. Declaration public static string ConvertToSnakeCase(string name) Parameters Type Name Description String name The value to convert. Returns Type Description String | Improve this Doc View Source TranslateMemberName(String) Given a CLR member name (property or field), translates its name to a database type name. Declaration public string TranslateMemberName(string clrName) Parameters Type Name Description String clrName Returns Type Description String | Improve this Doc View Source TranslateTypeName(String) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration public string TranslateTypeName(string clrName) Parameters Type Name Description String clrName Returns Type Description String Implements INpgsqlNameTranslator"
  },
  "doc/api/Npgsql.NetTopologySuite.Internal.html": {
    "href": "doc/api/Npgsql.NetTopologySuite.Internal.html",
    "title": "Namespace Npgsql.NetTopologySuite.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.NetTopologySuite.Internal Classes NetTopologySuiteTypeHandlerResolver NetTopologySuiteTypeHandlerResolverFactory"
  },
  "doc/api/Npgsql.NetTopologySuite.Internal.NetTopologySuiteTypeHandlerResolver.html": {
    "href": "doc/api/Npgsql.NetTopologySuite.Internal.NetTopologySuiteTypeHandlerResolver.html",
    "title": "Class NetTopologySuiteTypeHandlerResolver | Npgsql Documentation",
    "keywords": "Class NetTopologySuiteTypeHandlerResolver Inheritance Object TypeHandlerResolver NetTopologySuiteTypeHandlerResolver Inherited Members TypeHandlerResolver.ResolveValueDependentValue(Object) TypeHandlerResolver.ResolveValueTypeGenerically<T>(T) Namespace : Npgsql.NetTopologySuite.Internal Assembly : Npgsql.NetTopologySuite.dll Syntax public class NetTopologySuiteTypeHandlerResolver : TypeHandlerResolver Methods | Improve this Doc View Source GetMappingByDataTypeName(String) Declaration public override TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo | Improve this Doc View Source ResolveByClrType(Type) Declaration public override NpgsqlTypeHandler ResolveByClrType(Type type) Parameters Type Name Description Type type Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source ResolveByDataTypeName(String) Declaration public override NpgsqlTypeHandler ResolveByDataTypeName(string typeName) Parameters Type Name Description String typeName Returns Type Description NpgsqlTypeHandler"
  },
  "doc/api/Npgsql.NetTopologySuite.Internal.NetTopologySuiteTypeHandlerResolverFactory.html": {
    "href": "doc/api/Npgsql.NetTopologySuite.Internal.NetTopologySuiteTypeHandlerResolverFactory.html",
    "title": "Class NetTopologySuiteTypeHandlerResolverFactory | Npgsql Documentation",
    "keywords": "Class NetTopologySuiteTypeHandlerResolverFactory Inheritance Object TypeHandlerResolverFactory NetTopologySuiteTypeHandlerResolverFactory Inherited Members TypeHandlerResolverFactory.GetDataTypeNameByValueDependentValue(Object) Namespace : Npgsql.NetTopologySuite.Internal Assembly : Npgsql.NetTopologySuite.dll Syntax public class NetTopologySuiteTypeHandlerResolverFactory : TypeHandlerResolverFactory Constructors | Improve this Doc View Source NetTopologySuiteTypeHandlerResolverFactory(Nullable<CoordinateSequenceFactory>, Nullable<PrecisionModel>, Ordinates, Boolean) Declaration public NetTopologySuiteTypeHandlerResolverFactory(CoordinateSequenceFactory? coordinateSequenceFactory, PrecisionModel? precisionModel, Ordinates handleOrdinates, bool geographyAsDefault) Parameters Type Name Description Nullable < CoordinateSequenceFactory > coordinateSequenceFactory Nullable < PrecisionModel > precisionModel Ordinates handleOrdinates Boolean geographyAsDefault Methods | Improve this Doc View Source Create(NpgsqlConnector) Declaration public override TypeHandlerResolver Create(NpgsqlConnector connector) Parameters Type Name Description NpgsqlConnector connector Returns Type Description TypeHandlerResolver Overrides TypeHandlerResolverFactory.Create(NpgsqlConnector) | Improve this Doc View Source GetDataTypeNameByClrType(Type) Declaration public override string? GetDataTypeNameByClrType(Type type) Parameters Type Name Description Type type Returns Type Description Nullable < String > | Improve this Doc View Source GetMappingByDataTypeName(String) Declaration public override TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo"
  },
  "doc/api/Npgsql.NodaTime.Internal.DateMultirangeHandler.html": {
    "href": "doc/api/Npgsql.NodaTime.Internal.DateMultirangeHandler.html",
    "title": "Class DateMultirangeHandler | Npgsql Documentation",
    "keywords": "Class DateMultirangeHandler Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlRange < LocalDate >[]> MultirangeHandler < LocalDate > DateMultirangeHandler Implements INpgsqlTypeHandler < NpgsqlRange < LocalDate >[]> INpgsqlTypeHandler < List <>> INpgsqlTypeHandler < DateInterval []> INpgsqlTypeHandler < List < DateInterval >> Inherited Members MultirangeHandler<LocalDate>.RangeHandler MultirangeHandler<LocalDate>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<LocalDate>.ReadMultirangeArray<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<LocalDate>.ReadMultirangeList<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<LocalDate>.ValidateAndGetLength(NpgsqlRange<LocalDate>[], NpgsqlLengthCache, NpgsqlParameter) Npgsql.Internal.TypeHandlers.MultirangeHandler<LocalDate>.ValidateAndGetLength(List<>, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) Npgsql.Internal.TypeHandlers.MultirangeHandler<LocalDate>.ValidateAndGetLengthMultirange<TAnySubtype>(IList<>, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) MultirangeHandler<LocalDate>.Write(NpgsqlRange<LocalDate>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Npgsql.Internal.TypeHandlers.MultirangeHandler<LocalDate>.Write(List<>, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) Npgsql.Internal.TypeHandlers.MultirangeHandler<LocalDate>.WriteMultirange<TAnySubtype>(IList<>, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) NpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>.ValidateAndGetLength(NpgsqlRange<LocalDate>[], NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>.Write(NpgsqlRange<LocalDate>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler.CreateRangeHandler(PostgresType) NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.NodaTime.Internal Assembly : Npgsql.NodaTime.dll Syntax public class DateMultirangeHandler : MultirangeHandler<LocalDate>, INpgsqlTypeHandler<NpgsqlRange<LocalDate>[]>, INpgsqlTypeHandler<List<>>, INpgsqlTypeHandler<DateInterval[]>, INpgsqlTypeHandler<List<DateInterval>> Constructors | Improve this Doc View Source DateMultirangeHandler(PostgresMultirangeType, DateRangeHandler) Declaration public DateMultirangeHandler(PostgresMultirangeType multirangePostgresType, DateRangeHandler rangeHandler) Parameters Type Name Description PostgresMultirangeType multirangePostgresType DateRangeHandler rangeHandler Methods | Improve this Doc View Source GetFieldType(FieldDescription) Declaration public override Type GetFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlRange<LocalDate>[]>.GetFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public override Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlRange<LocalDate>[]>.GetProviderSpecificFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > | Improve this Doc View Source ValidateAndGetLength(DateInterval[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(DateInterval[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description DateInterval [] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(List<DateInterval>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(List<DateInterval> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description List < DateInterval > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source Write(DateInterval[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public async Task Write(DateInterval[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description DateInterval [] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(List<DateInterval>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public async Task Write(List<DateInterval> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description List < DateInterval > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.NodaTime.Internal.DateRangeHandler.html": {
    "href": "doc/api/Npgsql.NodaTime.Internal.DateRangeHandler.html",
    "title": "Class DateRangeHandler | Npgsql Documentation",
    "keywords": "Class DateRangeHandler Inheritance Object NpgsqlTypeHandler RangeHandler < LocalDate > DateRangeHandler Implements INpgsqlTypeHandler < NpgsqlRange < LocalDate >> INpgsqlTypeHandler < DateInterval > Inherited Members RangeHandler<LocalDate>.SubtypeHandler RangeHandler<LocalDate>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) RangeHandler<LocalDate>.CreateRangeHandler(PostgresType) RangeHandler<LocalDate>.CreateMultirangeHandler(PostgresMultirangeType) RangeHandler<LocalDate>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) RangeHandler<LocalDate>.ReadRange<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) RangeHandler<LocalDate>.ValidateAndGetLength(NpgsqlRange<LocalDate>, NpgsqlLengthCache, NpgsqlParameter) RangeHandler<LocalDate>.ValidateAndGetLengthRange<TAnySubtype>(NpgsqlRange<TAnySubtype>, NpgsqlLengthCache, NpgsqlParameter) RangeHandler<LocalDate>.Write(NpgsqlRange<LocalDate>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) RangeHandler<LocalDate>.WriteRange<TAnySubtype>(NpgsqlRange<TAnySubtype>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.NodaTime.Internal Assembly : Npgsql.NodaTime.dll Syntax public class DateRangeHandler : RangeHandler<LocalDate>, INpgsqlTypeHandler<NpgsqlRange<LocalDate>>, INpgsqlTypeHandler<DateInterval> Constructors | Improve this Doc View Source DateRangeHandler(PostgresType, NpgsqlTypeHandler) Declaration public DateRangeHandler(PostgresType rangePostgresType, NpgsqlTypeHandler subtypeHandler) Parameters Type Name Description PostgresType rangePostgresType NpgsqlTypeHandler subtypeHandler Methods | Improve this Doc View Source GetFieldType(FieldDescription) Declaration public override Type GetFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandlers.RangeHandler<LocalDate>.GetFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public override Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandlers.RangeHandler<LocalDate>.GetProviderSpecificFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > | Improve this Doc View Source ValidateAndGetLength(DateInterval, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(DateInterval value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description DateInterval value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source Write(DateInterval, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(DateInterval value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description DateInterval value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.NodaTime.Internal.html": {
    "href": "doc/api/Npgsql.NodaTime.Internal.html",
    "title": "Namespace Npgsql.NodaTime.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.NodaTime.Internal Classes DateMultirangeHandler DateRangeHandler NodaTimeTypeHandlerResolver NodaTimeTypeHandlerResolverFactory TimestampTzMultirangeHandler TimestampTzRangeHandler"
  },
  "doc/api/Npgsql.NodaTime.Internal.NodaTimeTypeHandlerResolver.html": {
    "href": "doc/api/Npgsql.NodaTime.Internal.NodaTimeTypeHandlerResolver.html",
    "title": "Class NodaTimeTypeHandlerResolver | Npgsql Documentation",
    "keywords": "Class NodaTimeTypeHandlerResolver Inheritance Object TypeHandlerResolver NodaTimeTypeHandlerResolver Inherited Members TypeHandlerResolver.ResolveValueDependentValue(Object) Namespace : Npgsql.NodaTime.Internal Assembly : Npgsql.NodaTime.dll Syntax public class NodaTimeTypeHandlerResolver : TypeHandlerResolver Methods | Improve this Doc View Source GetMappingByDataTypeName(String) Declaration public override TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo | Improve this Doc View Source ResolveByClrType(Type) Declaration public override NpgsqlTypeHandler ResolveByClrType(Type type) Parameters Type Name Description Type type Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source ResolveByDataTypeName(String) Declaration public override NpgsqlTypeHandler ResolveByDataTypeName(string typeName) Parameters Type Name Description String typeName Returns Type Description NpgsqlTypeHandler | Improve this Doc View Source ResolveValueTypeGenerically<T>(T) Declaration public override NpgsqlTypeHandler ResolveValueTypeGenerically<T>(T value) Parameters Type Name Description T value Returns Type Description NpgsqlTypeHandler Type Parameters Name Description T Overrides Npgsql.Internal.TypeHandling.TypeHandlerResolver.ResolveValueTypeGenerically<T>(T)"
  },
  "doc/api/Npgsql.NodaTime.Internal.NodaTimeTypeHandlerResolverFactory.html": {
    "href": "doc/api/Npgsql.NodaTime.Internal.NodaTimeTypeHandlerResolverFactory.html",
    "title": "Class NodaTimeTypeHandlerResolverFactory | Npgsql Documentation",
    "keywords": "Class NodaTimeTypeHandlerResolverFactory Inheritance Object TypeHandlerResolverFactory NodaTimeTypeHandlerResolverFactory Inherited Members TypeHandlerResolverFactory.GetDataTypeNameByValueDependentValue(Object) Namespace : Npgsql.NodaTime.Internal Assembly : Npgsql.NodaTime.dll Syntax public class NodaTimeTypeHandlerResolverFactory : TypeHandlerResolverFactory Methods | Improve this Doc View Source Create(NpgsqlConnector) Declaration public override TypeHandlerResolver Create(NpgsqlConnector connector) Parameters Type Name Description NpgsqlConnector connector Returns Type Description TypeHandlerResolver Overrides TypeHandlerResolverFactory.Create(NpgsqlConnector) | Improve this Doc View Source GetDataTypeNameByClrType(Type) Declaration public override string? GetDataTypeNameByClrType(Type type) Parameters Type Name Description Type type Returns Type Description Nullable < String > | Improve this Doc View Source GetMappingByDataTypeName(String) Declaration public override TypeMappingInfo GetMappingByDataTypeName(string dataTypeName) Parameters Type Name Description String dataTypeName Returns Type Description TypeMappingInfo"
  },
  "doc/api/Npgsql.NodaTime.Internal.TimestampTzMultirangeHandler.html": {
    "href": "doc/api/Npgsql.NodaTime.Internal.TimestampTzMultirangeHandler.html",
    "title": "Class TimestampTzMultirangeHandler | Npgsql Documentation",
    "keywords": "Class TimestampTzMultirangeHandler Inheritance Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlRange < Instant >[]> MultirangeHandler < Instant > TimestampTzMultirangeHandler Implements INpgsqlTypeHandler < NpgsqlRange < Instant >[]> INpgsqlTypeHandler < List <>> INpgsqlTypeHandler < Interval []> INpgsqlTypeHandler < List < Interval >> INpgsqlTypeHandler < NpgsqlRange < ZonedDateTime >[]> INpgsqlTypeHandler < List < NpgsqlRange < ZonedDateTime >>> INpgsqlTypeHandler < NpgsqlRange < OffsetDateTime >[]> INpgsqlTypeHandler < List < NpgsqlRange < OffsetDateTime >>> INpgsqlTypeHandler < NpgsqlRange < DateTime >[]> INpgsqlTypeHandler < List < NpgsqlRange < DateTime >>> INpgsqlTypeHandler < NpgsqlRange < DateTimeOffset >[]> INpgsqlTypeHandler < List < NpgsqlRange < DateTimeOffset >>> Inherited Members MultirangeHandler<Instant>.RangeHandler MultirangeHandler<Instant>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<Instant>.ReadMultirangeArray<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<Instant>.ReadMultirangeList<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) MultirangeHandler<Instant>.ValidateAndGetLength(NpgsqlRange<Instant>[], NpgsqlLengthCache, NpgsqlParameter) Npgsql.Internal.TypeHandlers.MultirangeHandler<Instant>.ValidateAndGetLength(List<>, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) Npgsql.Internal.TypeHandlers.MultirangeHandler<Instant>.ValidateAndGetLengthMultirange<TAnySubtype>(IList<>, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter) MultirangeHandler<Instant>.Write(NpgsqlRange<Instant>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Npgsql.Internal.TypeHandlers.MultirangeHandler<Instant>.Write(List<>, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) Npgsql.Internal.TypeHandlers.MultirangeHandler<Instant>.WriteMultirange<TAnySubtype>(IList<>, Npgsql.Internal.NpgsqlWriteBuffer, Npgsql.Internal.TypeHandling.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean, CancellationToken) NpgsqlTypeHandler<NpgsqlRange<Instant>[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlRange<Instant>[]>.ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlRange<Instant>[]>.ValidateAndGetLength(NpgsqlRange<Instant>[], NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlRange<Instant>[]>.Write(NpgsqlRange<Instant>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler<NpgsqlRange<Instant>[]>.GetFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlRange<Instant>[]>.GetProviderSpecificFieldType(FieldDescription) NpgsqlTypeHandler<NpgsqlRange<Instant>[]>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler<NpgsqlRange<Instant>[]>.CreateRangeHandler(PostgresType) NpgsqlTypeHandler<NpgsqlRange<Instant>[]>.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) NpgsqlTypeHandler.CreateRangeHandler(PostgresType) NpgsqlTypeHandler.CreateMultirangeHandler(PostgresMultirangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.NodaTime.Internal Assembly : Npgsql.NodaTime.dll Syntax public class TimestampTzMultirangeHandler : MultirangeHandler<Instant>, INpgsqlTypeHandler<NpgsqlRange<Instant>[]>, INpgsqlTypeHandler<List<>>, INpgsqlTypeHandler<Interval[]>, INpgsqlTypeHandler<List<Interval>>, INpgsqlTypeHandler<NpgsqlRange<ZonedDateTime>[]>, INpgsqlTypeHandler<List<NpgsqlRange<ZonedDateTime>>>, INpgsqlTypeHandler<NpgsqlRange<OffsetDateTime>[]>, INpgsqlTypeHandler<List<NpgsqlRange<OffsetDateTime>>>, INpgsqlTypeHandler<NpgsqlRange<DateTime>[]>, INpgsqlTypeHandler<List<NpgsqlRange<DateTime>>>, INpgsqlTypeHandler<NpgsqlRange<DateTimeOffset>[]>, INpgsqlTypeHandler<List<NpgsqlRange<DateTimeOffset>>> Constructors | Improve this Doc View Source TimestampTzMultirangeHandler(PostgresMultirangeType, TimestampTzRangeHandler) Declaration public TimestampTzMultirangeHandler(PostgresMultirangeType pgMultirangeType, TimestampTzRangeHandler rangeHandler) Parameters Type Name Description PostgresMultirangeType pgMultirangeType TimestampTzRangeHandler rangeHandler Methods | Improve this Doc View Source GetFieldType(FieldDescription) Declaration public override Type GetFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlRange<Instant>[]>.GetFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public override Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlRange<Instant>[]>.GetProviderSpecificFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > | Improve this Doc View Source ValidateAndGetLength(Interval[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(Interval[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Interval [] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(List<Interval>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(List<Interval> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description List < Interval > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(List<NpgsqlRange<DateTime>>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(List<NpgsqlRange<DateTime>> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description List < NpgsqlRange < DateTime >> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(List<NpgsqlRange<DateTimeOffset>>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(List<NpgsqlRange<DateTimeOffset>> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description List < NpgsqlRange < DateTimeOffset >> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(List<NpgsqlRange<OffsetDateTime>>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(List<NpgsqlRange<OffsetDateTime>> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description List < NpgsqlRange < OffsetDateTime >> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(List<NpgsqlRange<ZonedDateTime>>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(List<NpgsqlRange<ZonedDateTime>> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description List < NpgsqlRange < ZonedDateTime >> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<DateTime>[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<DateTime>[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange < DateTime >[] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<DateTimeOffset>[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<DateTimeOffset>[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange < DateTimeOffset >[] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<OffsetDateTime>[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<OffsetDateTime>[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange < OffsetDateTime >[] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<ZonedDateTime>[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<ZonedDateTime>[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange < ZonedDateTime >[] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source Write(Interval[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public async Task Write(Interval[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Interval [] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(List<Interval>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public async Task Write(List<Interval> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description List < Interval > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(List<NpgsqlRange<DateTime>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(List<NpgsqlRange<DateTime>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description List < NpgsqlRange < DateTime >> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(List<NpgsqlRange<DateTimeOffset>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(List<NpgsqlRange<DateTimeOffset>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description List < NpgsqlRange < DateTimeOffset >> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(List<NpgsqlRange<OffsetDateTime>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(List<NpgsqlRange<OffsetDateTime>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description List < NpgsqlRange < OffsetDateTime >> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(List<NpgsqlRange<ZonedDateTime>>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(List<NpgsqlRange<ZonedDateTime>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description List < NpgsqlRange < ZonedDateTime >> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<DateTime>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(NpgsqlRange<DateTime>[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange < DateTime >[] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<DateTimeOffset>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(NpgsqlRange<DateTimeOffset>[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange < DateTimeOffset >[] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<OffsetDateTime>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(NpgsqlRange<OffsetDateTime>[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange < OffsetDateTime >[] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<ZonedDateTime>[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(NpgsqlRange<ZonedDateTime>[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange < ZonedDateTime >[] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.NodaTime.Internal.TimestampTzRangeHandler.html": {
    "href": "doc/api/Npgsql.NodaTime.Internal.TimestampTzRangeHandler.html",
    "title": "Class TimestampTzRangeHandler | Npgsql Documentation",
    "keywords": "Class TimestampTzRangeHandler Inheritance Object NpgsqlTypeHandler RangeHandler < Instant > TimestampTzRangeHandler Implements INpgsqlTypeHandler < NpgsqlRange < Instant >> INpgsqlTypeHandler < Interval > INpgsqlTypeHandler < NpgsqlRange < ZonedDateTime >> INpgsqlTypeHandler < NpgsqlRange < OffsetDateTime >> INpgsqlTypeHandler < NpgsqlRange < DateTime >> INpgsqlTypeHandler < NpgsqlRange < DateTimeOffset >> Inherited Members RangeHandler<Instant>.SubtypeHandler RangeHandler<Instant>.CreateArrayHandler(PostgresArrayType, ArrayNullabilityMode) RangeHandler<Instant>.CreateRangeHandler(PostgresType) RangeHandler<Instant>.CreateMultirangeHandler(PostgresMultirangeType) RangeHandler<Instant>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) RangeHandler<Instant>.ReadRange<TAnySubtype>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) RangeHandler<Instant>.ValidateAndGetLength(NpgsqlRange<Instant>, NpgsqlLengthCache, NpgsqlParameter) RangeHandler<Instant>.ValidateAndGetLengthRange<TAnySubtype>(NpgsqlRange<TAnySubtype>, NpgsqlLengthCache, NpgsqlParameter) RangeHandler<Instant>.Write(NpgsqlRange<Instant>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) RangeHandler<Instant>.WriteRange<TAnySubtype>(NpgsqlRange<TAnySubtype>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.PostgresType NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlTypeHandler.ReadCustom<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateAndGetLengthCustom<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.WriteWithLengthCustom<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Nullable<Object>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) Namespace : Npgsql.NodaTime.Internal Assembly : Npgsql.NodaTime.dll Syntax public class TimestampTzRangeHandler : RangeHandler<Instant>, INpgsqlTypeHandler<NpgsqlRange<Instant>>, INpgsqlTypeHandler<Interval>, INpgsqlTypeHandler<NpgsqlRange<ZonedDateTime>>, INpgsqlTypeHandler<NpgsqlRange<OffsetDateTime>>, INpgsqlTypeHandler<NpgsqlRange<DateTime>>, INpgsqlTypeHandler<NpgsqlRange<DateTimeOffset>> Constructors | Improve this Doc View Source TimestampTzRangeHandler(PostgresType, NpgsqlTypeHandler) Declaration public TimestampTzRangeHandler(PostgresType rangePostgresType, NpgsqlTypeHandler subtypeHandler) Parameters Type Name Description PostgresType rangePostgresType NpgsqlTypeHandler subtypeHandler Methods | Improve this Doc View Source GetFieldType(FieldDescription) Declaration public override Type GetFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandlers.RangeHandler<Instant>.GetFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source GetProviderSpecificFieldType(FieldDescription) Declaration public override Type GetProviderSpecificFieldType(FieldDescription fieldDescription = null) Parameters Type Name Description FieldDescription fieldDescription Returns Type Description Type Overrides Npgsql.Internal.TypeHandlers.RangeHandler<Instant>.GetProviderSpecificFieldType(Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadAsObject(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override async ValueTask<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf Int32 len Boolean async FieldDescription fieldDescription Returns Type Description ValueTask < Object > | Improve this Doc View Source ValidateAndGetLength(Interval, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(Interval value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description Interval value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<DateTime>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<DateTime> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange < DateTime > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<DateTimeOffset>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<DateTimeOffset> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange < DateTimeOffset > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<OffsetDateTime>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<OffsetDateTime> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange < OffsetDateTime > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<ZonedDateTime>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<ZonedDateTime> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange < ZonedDateTime > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description Int32 | Improve this Doc View Source Write(Interval, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(Interval value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description Interval value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<DateTime>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(NpgsqlRange<DateTime> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange < DateTime > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<DateTimeOffset>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(NpgsqlRange<DateTimeOffset> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange < DateTimeOffset > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<OffsetDateTime>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(NpgsqlRange<OffsetDateTime> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange < OffsetDateTime > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write(NpgsqlRange<ZonedDateTime>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean, CancellationToken) Declaration public Task Write(NpgsqlRange<ZonedDateTime> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlRange < ZonedDateTime > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter Boolean async CancellationToken cancellationToken Returns Type Description Task Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.NoticeEventHandler.html": {
    "href": "doc/api/Npgsql.NoticeEventHandler.html",
    "title": "Delegate NoticeEventHandler | Npgsql Documentation",
    "keywords": "Delegate NoticeEventHandler Represents a method that handles the Notice event. Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void NoticeEventHandler(object sender, NpgsqlNoticeEventArgs e); Parameters Type Name Description Object sender The source of the event. NpgsqlNoticeEventArgs e A NpgsqlNoticeEventArgs that contains the notice information (e.g. message, severity...)."
  },
  "doc/api/Npgsql.NotificationEventHandler.html": {
    "href": "doc/api/Npgsql.NotificationEventHandler.html",
    "title": "Delegate NotificationEventHandler | Npgsql Documentation",
    "keywords": "Delegate NotificationEventHandler Represents a method that handles the Notification event. Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void NotificationEventHandler(object sender, NpgsqlNotificationEventArgs e); Parameters Type Name Description Object sender The source of the event. NpgsqlNotificationEventArgs e A NpgsqlNotificationEventArgs that contains the notification payload."
  },
  "doc/api/Npgsql.NpgsqlBatch.html": {
    "href": "doc/api/Npgsql.NpgsqlBatch.html",
    "title": "Class NpgsqlBatch | Npgsql Documentation",
    "keywords": "Class NpgsqlBatch Inheritance Object DbBatch NpgsqlBatch Implements IAsyncDisposable Inherited Members DbBatch.CreateBatchCommand() DbBatch.Dispose() DbBatch.DisposeAsync() Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlBatch : DbBatch Constructors | Improve this Doc View Source NpgsqlBatch(NpgsqlConnection, NpgsqlTransaction) Initializes a new NpgsqlBatch . Declaration public NpgsqlBatch(NpgsqlConnection connection = null, NpgsqlTransaction transaction = null) Parameters Type Name Description NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. NpgsqlTransaction transaction The NpgsqlTransaction in which the NpgsqlCommand executes. Properties | Improve this Doc View Source BatchCommands Declaration public NpgsqlBatchCommandCollection BatchCommands { get; } Property Value Type Description NpgsqlBatchCommandCollection | Improve this Doc View Source Connection Declaration public NpgsqlConnection Connection { get; set; } Property Value Type Description NpgsqlConnection | Improve this Doc View Source DbBatchCommands Declaration protected override DbBatchCommandCollection DbBatchCommands { get; } Property Value Type Description DbBatchCommandCollection Overrides DbBatch.DbBatchCommands | Improve this Doc View Source DbConnection Declaration protected override DbConnection? DbConnection { get; set; } Property Value Type Description Nullable < DbConnection > Overrides DbBatch.DbConnection | Improve this Doc View Source DbTransaction Declaration protected override DbTransaction? DbTransaction { get; set; } Property Value Type Description Nullable < DbTransaction > Overrides DbBatch.DbTransaction | Improve this Doc View Source EnableErrorBarriers Controls whether to place error barriers between all batch commands within this batch. Default to false . Declaration public bool EnableErrorBarriers { get; set; } Property Value Type Description Boolean Remarks By default, any exception in a command causes later commands in the batch to be skipped, and earlier commands to be rolled back. Enabling error barriers ensures that errors do not affect other commands in the batch. Note that if the batch is executed within an explicit transaction, the first error places the transaction in a failed state, causing all later commands to fail in any case. As a result, this option is useful mainly when there is no explicit transaction. At the PostgreSQL wire protocol level, this corresponds to inserting a Sync message between each command, rather than grouping all the batch's commands behind a single terminating Sync. To control error barriers on a command-by-command basis, see AppendErrorBarrier . | Improve this Doc View Source Timeout Declaration public override int Timeout { get; set; } Property Value Type Description Int32 Overrides DbBatch.Timeout | Improve this Doc View Source Transaction Declaration public NpgsqlTransaction Transaction { get; set; } Property Value Type Description NpgsqlTransaction Methods | Improve this Doc View Source Cancel() Declaration public override void Cancel() Overrides DbBatch.Cancel() | Improve this Doc View Source CreateDbBatchCommand() Declaration protected override DbBatchCommand CreateDbBatchCommand() Returns Type Description DbBatchCommand Overrides DbBatch.CreateDbBatchCommand() | Improve this Doc View Source ExecuteDbDataReader(CommandBehavior) Declaration protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) Parameters Type Name Description CommandBehavior behavior Returns Type Description DbDataReader Overrides DbBatch.ExecuteDbDataReader(CommandBehavior) | Improve this Doc View Source ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) Declaration protected override async Task<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken) Parameters Type Name Description CommandBehavior behavior CancellationToken cancellationToken Returns Type Description Task < DbDataReader > Overrides DbBatch.ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) | Improve this Doc View Source ExecuteNonQuery() Declaration public override int ExecuteNonQuery() Returns Type Description Int32 Overrides DbBatch.ExecuteNonQuery() | Improve this Doc View Source ExecuteNonQueryAsync(CancellationToken) Declaration public override Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Int32 > Overrides DbBatch.ExecuteNonQueryAsync(CancellationToken) | Improve this Doc View Source ExecuteReader(CommandBehavior) Declaration public NpgsqlDataReader ExecuteReader(CommandBehavior behavior = null) Parameters Type Name Description CommandBehavior behavior Returns Type Description NpgsqlDataReader | Improve this Doc View Source ExecuteReaderAsync(CancellationToken) Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < NpgsqlDataReader > | Improve this Doc View Source ExecuteReaderAsync(CommandBehavior, CancellationToken) Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken = null) Parameters Type Name Description CommandBehavior behavior CancellationToken cancellationToken Returns Type Description Task < NpgsqlDataReader > | Improve this Doc View Source ExecuteScalar() Declaration public override object? ExecuteScalar() Returns Type Description Nullable < Object > Overrides DbBatch.ExecuteScalar() | Improve this Doc View Source ExecuteScalarAsync(CancellationToken) Declaration public override Task<object?> ExecuteScalarAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Nullable < Object >> Overrides DbBatch.ExecuteScalarAsync(CancellationToken) | Improve this Doc View Source Prepare() Declaration public override void Prepare() Overrides DbBatch.Prepare() | Improve this Doc View Source PrepareAsync(CancellationToken) Declaration public override Task PrepareAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task Overrides DbBatch.PrepareAsync(CancellationToken) Implements IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlBatchCommand.html": {
    "href": "doc/api/Npgsql.NpgsqlBatchCommand.html",
    "title": "Class NpgsqlBatchCommand | Npgsql Documentation",
    "keywords": "Class NpgsqlBatchCommand Inheritance Object DbBatchCommand NpgsqlBatchCommand Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlBatchCommand : DbBatchCommand Constructors | Improve this Doc View Source NpgsqlBatchCommand() Initializes a new NpgsqlBatchCommand . Declaration public NpgsqlBatchCommand() | Improve this Doc View Source NpgsqlBatchCommand(String) Initializes a new NpgsqlBatchCommand . Declaration public NpgsqlBatchCommand(string commandText) Parameters Type Name Description String commandText The text of the NpgsqlBatchCommand . Properties | Improve this Doc View Source AppendErrorBarrier Appends an error barrier after this batch command. Defaults to the value of EnableErrorBarriers on the batch. Declaration public bool? AppendErrorBarrier { get; set; } Property Value Type Description Nullable < Boolean > Remarks By default, any exception in a command causes later commands in the batch to be skipped, and earlier commands to be rolled back. Appending an error barrier ensures that errors from this command (or previous ones) won't cause later commands to be skipped, and that errors from later commands won't cause this command (or previous ones) to be rolled back). Note that if the batch is executed within an explicit transaction, the first error places the transaction in a failed state, causing all later commands to fail in any case. As a result, this option is useful mainly when there is no explicit transaction. At the PostgreSQL wire protocol level, this corresponds to inserting a Sync message after this command, rather than grouping all the batch's commands behind a single terminating Sync. Controlling error barriers on a command-by-command basis is an advanced feature, consider enabling error barriers for the entire batch via EnableErrorBarriers . | Improve this Doc View Source CommandText Declaration public override string CommandText { get; set; } Property Value Type Description String Overrides DbBatchCommand.CommandText | Improve this Doc View Source CommandType Declaration public override CommandType CommandType { get; set; } Property Value Type Description CommandType Overrides DbBatchCommand.CommandType | Improve this Doc View Source DbParameterCollection Declaration protected override DbParameterCollection DbParameterCollection { get; } Property Value Type Description DbParameterCollection Overrides DbBatchCommand.DbParameterCollection | Improve this Doc View Source OID For an INSERT, the object ID of the inserted row if RecordsAffected is 1 and the target table has OIDs; otherwise 0. Declaration public uint OID { get; } Property Value Type Description UInt32 | Improve this Doc View Source Parameters Declaration public NpgsqlParameterCollection Parameters { get; } Property Value Type Description NpgsqlParameterCollection | Improve this Doc View Source RecordsAffected Declaration public override int RecordsAffected { get; } Property Value Type Description Int32 Overrides DbBatchCommand.RecordsAffected | Improve this Doc View Source Rows The number of rows affected or retrieved. Declaration public ulong Rows { get; } Property Value Type Description UInt64 Remarks See the command tag in the CommandComplete message for the meaning of this value for each StatementType , https://www.postgresql.org/docs/current/static/protocol-message-formats.html | Improve this Doc View Source StatementType Specifies the type of query, e.g. SELECT. Declaration public StatementType StatementType { get; } Property Value Type Description StatementType Methods | Improve this Doc View Source ToString() Returns the CommandText . Declaration public override string ToString() Returns Type Description String"
  },
  "doc/api/Npgsql.NpgsqlBatchCommandCollection.html": {
    "href": "doc/api/Npgsql.NpgsqlBatchCommandCollection.html",
    "title": "Class NpgsqlBatchCommandCollection | Npgsql Documentation",
    "keywords": "Class NpgsqlBatchCommandCollection Inheritance Object DbBatchCommandCollection NpgsqlBatchCommandCollection Implements IList < NpgsqlBatchCommand > Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlBatchCommandCollection : DbBatchCommandCollection Properties | Improve this Doc View Source Count Declaration public override int Count { get; } Property Value Type Description Int32 Overrides DbBatchCommandCollection.Count | Improve this Doc View Source IsReadOnly Declaration public override bool IsReadOnly { get; } Property Value Type Description Boolean Overrides DbBatchCommandCollection.IsReadOnly | Improve this Doc View Source Item[Int32] Declaration public NpgsqlBatchCommand this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description NpgsqlBatchCommand Methods | Improve this Doc View Source Add(NpgsqlBatchCommand) Declaration public void Add(NpgsqlBatchCommand item) Parameters Type Name Description NpgsqlBatchCommand item | Improve this Doc View Source Add(DbBatchCommand) Declaration public override void Add(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item Overrides DbBatchCommandCollection.Add(DbBatchCommand) | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides DbBatchCommandCollection.Clear() | Improve this Doc View Source Contains(NpgsqlBatchCommand) Declaration public bool Contains(NpgsqlBatchCommand item) Parameters Type Name Description NpgsqlBatchCommand item Returns Type Description Boolean | Improve this Doc View Source Contains(DbBatchCommand) Declaration public override bool Contains(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item Returns Type Description Boolean Overrides DbBatchCommandCollection.Contains(DbBatchCommand) | Improve this Doc View Source CopyTo(NpgsqlBatchCommand[], Int32) Declaration public void CopyTo(NpgsqlBatchCommand[] array, int arrayIndex) Parameters Type Name Description NpgsqlBatchCommand [] array Int32 arrayIndex | Improve this Doc View Source CopyTo(DbBatchCommand[], Int32) Declaration public override void CopyTo(DbBatchCommand[] array, int arrayIndex) Parameters Type Name Description DbBatchCommand [] array Int32 arrayIndex Overrides DbBatchCommandCollection.CopyTo(DbBatchCommand[], Int32) | Improve this Doc View Source GetBatchCommand(Int32) Declaration protected override DbBatchCommand GetBatchCommand(int index) Parameters Type Name Description Int32 index Returns Type Description DbBatchCommand Overrides DbBatchCommandCollection.GetBatchCommand(Int32) | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator<DbBatchCommand> GetEnumerator() Returns Type Description IEnumerator < DbBatchCommand > Overrides DbBatchCommandCollection.GetEnumerator() | Improve this Doc View Source IndexOf(NpgsqlBatchCommand) Declaration public int IndexOf(NpgsqlBatchCommand item) Parameters Type Name Description NpgsqlBatchCommand item Returns Type Description Int32 | Improve this Doc View Source IndexOf(DbBatchCommand) Declaration public override int IndexOf(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item Returns Type Description Int32 Overrides DbBatchCommandCollection.IndexOf(DbBatchCommand) | Improve this Doc View Source Insert(Int32, NpgsqlBatchCommand) Declaration public void Insert(int index, NpgsqlBatchCommand item) Parameters Type Name Description Int32 index NpgsqlBatchCommand item | Improve this Doc View Source Insert(Int32, DbBatchCommand) Declaration public override void Insert(int index, DbBatchCommand item) Parameters Type Name Description Int32 index DbBatchCommand item Overrides DbBatchCommandCollection.Insert(Int32, DbBatchCommand) | Improve this Doc View Source Remove(NpgsqlBatchCommand) Declaration public bool Remove(NpgsqlBatchCommand item) Parameters Type Name Description NpgsqlBatchCommand item Returns Type Description Boolean | Improve this Doc View Source Remove(DbBatchCommand) Declaration public override bool Remove(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item Returns Type Description Boolean Overrides DbBatchCommandCollection.Remove(DbBatchCommand) | Improve this Doc View Source RemoveAt(Int32) Declaration public override void RemoveAt(int index) Parameters Type Name Description Int32 index Overrides DbBatchCommandCollection.RemoveAt(Int32) | Improve this Doc View Source SetBatchCommand(Int32, DbBatchCommand) Declaration protected override void SetBatchCommand(int index, DbBatchCommand batchCommand) Parameters Type Name Description Int32 index DbBatchCommand batchCommand Overrides DbBatchCommandCollection.SetBatchCommand(Int32, DbBatchCommand) Implements IList<>"
  },
  "doc/api/Npgsql.NpgsqlBinaryExporter.html": {
    "href": "doc/api/Npgsql.NpgsqlBinaryExporter.html",
    "title": "Class NpgsqlBinaryExporter | Npgsql Documentation",
    "keywords": "Class NpgsqlBinaryExporter Provides an API for a binary COPY TO operation, a high-performance data export mechanism from a PostgreSQL table. Initiated by BeginBinaryExport(String) Inheritance Object NpgsqlBinaryExporter Implements IDisposable IAsyncDisposable Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlBinaryExporter : object Properties | Improve this Doc View Source IsNull Returns whether the current column is null. Declaration public bool IsNull { get; } Property Value Type Description Boolean | Improve this Doc View Source Timeout Current timeout Declaration public TimeSpan Timeout { set; } Property Value Type Description TimeSpan Methods | Improve this Doc View Source Cancel() Cancels an ongoing export. Declaration public void Cancel() | Improve this Doc View Source CancelAsync() Async cancels an ongoing export. Declaration public Task CancelAsync() Returns Type Description Task | Improve this Doc View Source Dispose() Completes that binary export and sets the connection back to idle state Declaration public void Dispose() | Improve this Doc View Source DisposeAsync() Async completes that binary export and sets the connection back to idle state Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source Read<T>() Reads the current column, returns its value and moves ahead to the next column. If the column is null an exception is thrown. Declaration public T Read<T>() Returns Type Description T The value of the column Type Parameters Name Description T The type of the column to be read. This must correspond to the actual type or data corruption will occur. If in doubt, use Read<T>(NpgsqlDbType) to manually specify the type. | Improve this Doc View Source Read<T>(NpgsqlDbType) Reads the current column, returns its value according to type and moves ahead to the next column. If the column is null an exception is thrown. Declaration public T Read<T>(NpgsqlDbType type) Parameters Type Name Description NpgsqlDbType type In some cases T isn't enough to infer the data type coming in from the database. This parameter can be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which type must be specified as Jsonb . Returns Type Description T The value of the column Type Parameters Name Description T The .NET type of the column to be read. | Improve this Doc View Source ReadAsync<T>(CancellationToken) Reads the current column, returns its value and moves ahead to the next column. If the column is null an exception is thrown. Declaration public ValueTask<T> ReadAsync<T>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask <T> The value of the column Type Parameters Name Description T The type of the column to be read. This must correspond to the actual type or data corruption will occur. If in doubt, use Read<T>(NpgsqlDbType) to manually specify the type. | Improve this Doc View Source ReadAsync<T>(NpgsqlDbType, CancellationToken) Reads the current column, returns its value according to type and moves ahead to the next column. If the column is null an exception is thrown. Declaration public ValueTask<T> ReadAsync<T>(NpgsqlDbType type, CancellationToken cancellationToken = null) Parameters Type Name Description NpgsqlDbType type In some cases T isn't enough to infer the data type coming in from the database. This parameter can be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which type must be specified as Jsonb . CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description ValueTask <T> The value of the column Type Parameters Name Description T The .NET type of the column to be read. | Improve this Doc View Source Skip() Skips the current column without interpreting its value. Declaration public void Skip() | Improve this Doc View Source SkipAsync(CancellationToken) Skips the current column without interpreting its value. Declaration public Task SkipAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source StartRow() Starts reading a single row, must be invoked before reading any columns. Declaration public int StartRow() Returns Type Description Int32 The number of columns in the row. -1 if there are no further rows. Note: This will currently be the same value for all rows, but this may change in the future. | Improve this Doc View Source StartRowAsync(CancellationToken) Starts reading a single row, must be invoked before reading any columns. Declaration public ValueTask<int> StartRowAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask < Int32 > The number of columns in the row. -1 if there are no further rows. Note: This will currently be the same value for all rows, but this may change in the future. Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlBinaryImporter.html": {
    "href": "doc/api/Npgsql.NpgsqlBinaryImporter.html",
    "title": "Class NpgsqlBinaryImporter | Npgsql Documentation",
    "keywords": "Class NpgsqlBinaryImporter Provides an API for a binary COPY FROM operation, a high-performance data import mechanism to a PostgreSQL table. Initiated by BeginBinaryImport(String) Inheritance Object NpgsqlBinaryImporter Implements IDisposable IAsyncDisposable Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlBinaryImporter : object Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . Properties | Improve this Doc View Source Timeout Current timeout Declaration public TimeSpan Timeout { set; } Property Value Type Description TimeSpan Methods | Improve this Doc View Source Close() Terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed. Note that if Complete() hasn't been invoked before calling this, the import will be cancelled and all changes will be reverted. Declaration public void Close() | Improve this Doc View Source CloseAsync(CancellationToken) Async terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed. Note that if CompleteAsync(CancellationToken) hasn't been invoked before calling this, the import will be cancelled and all changes will be reverted. Declaration public ValueTask CloseAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask | Improve this Doc View Source Complete() Completes the import operation. The writer is unusable after this operation. Declaration public ulong Complete() Returns Type Description UInt64 | Improve this Doc View Source CompleteAsync(CancellationToken) Completes the import operation. The writer is unusable after this operation. Declaration public ValueTask<ulong> CompleteAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask < UInt64 > | Improve this Doc View Source Dispose() Terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed. Note that if Complete() hasn't been invoked before calling this, the import will be cancelled and all changes will be reverted. Declaration public void Dispose() | Improve this Doc View Source DisposeAsync() Async terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed. Note that if CompleteAsync(CancellationToken) hasn't been invoked before calling this, the import will be cancelled and all changes will be reverted. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source StartRow() Starts writing a single row, must be invoked before writing any columns. Declaration public void StartRow() | Improve this Doc View Source StartRowAsync(CancellationToken) Starts writing a single row, must be invoked before writing any columns. Declaration public Task StartRowAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write<T>(T) Writes a single column in the current row. Declaration public void Write<T>(T value) Parameters Type Name Description T value The value to be written Type Parameters Name Description T The type of the column to be written. This must correspond to the actual type or data corruption will occur. If in doubt, use Write<T>(T, NpgsqlDbType) to manually specify the type. | Improve this Doc View Source Write<T>(T, NpgsqlDbType) Writes a single column in the current row as type npgsqlDbType . Declaration public void Write<T>(T value, NpgsqlDbType npgsqlDbType) Parameters Type Name Description T value The value to be written NpgsqlDbType npgsqlDbType In some cases T isn't enough to infer the data type to be written to the database. This parameter can be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which npgsqlDbType must be specified as Jsonb . Type Parameters Name Description T The .NET type of the column to be written. | Improve this Doc View Source Write<T>(T, String) Writes a single column in the current row as type dataTypeName . Declaration public void Write<T>(T value, string dataTypeName) Parameters Type Name Description T value The value to be written String dataTypeName In some cases T isn't enough to infer the data type to be written to the database. This parameter and be used to unambiguously specify the type. Type Parameters Name Description T The .NET type of the column to be written. | Improve this Doc View Source WriteAsync<T>(T, CancellationToken) Writes a single column in the current row. Declaration public Task WriteAsync<T>(T value, CancellationToken cancellationToken = null) Parameters Type Name Description T value The value to be written CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Type Parameters Name Description T The type of the column to be written. This must correspond to the actual type or data corruption will occur. If in doubt, use Write<T>(T, NpgsqlDbType) to manually specify the type. | Improve this Doc View Source WriteAsync<T>(T, NpgsqlDbType, CancellationToken) Writes a single column in the current row as type npgsqlDbType . Declaration public Task WriteAsync<T>(T value, NpgsqlDbType npgsqlDbType, CancellationToken cancellationToken = null) Parameters Type Name Description T value The value to be written NpgsqlDbType npgsqlDbType In some cases T isn't enough to infer the data type to be written to the database. This parameter can be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which npgsqlDbType must be specified as Jsonb . CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Type Parameters Name Description T The .NET type of the column to be written. | Improve this Doc View Source WriteAsync<T>(T, String, CancellationToken) Writes a single column in the current row as type dataTypeName . Declaration public Task WriteAsync<T>(T value, string dataTypeName, CancellationToken cancellationToken = null) Parameters Type Name Description T value The value to be written String dataTypeName In some cases T isn't enough to infer the data type to be written to the database. This parameter and be used to unambiguously specify the type. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Type Parameters Name Description T The .NET type of the column to be written. | Improve this Doc View Source WriteNull() Writes a single null column value. Declaration public void WriteNull() | Improve this Doc View Source WriteNullAsync(CancellationToken) Writes a single null column value. Declaration public Task WriteNullAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source WriteRow(Object[]) Writes an entire row of columns. Equivalent to calling StartRow() , followed by multiple Write<T>(T) on each value. Declaration public void WriteRow(params object[] values) Parameters Type Name Description Object [] values An array of column values to be written as a single row | Improve this Doc View Source WriteRowAsync(CancellationToken, Object[]) Writes an entire row of columns. Equivalent to calling StartRow() , followed by multiple Write<T>(T) on each value. Declaration public Task WriteRowAsync(CancellationToken cancellationToken = null, params object[] values) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Object [] values An array of column values to be written as a single row Returns Type Description Task Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlCommand.html": {
    "href": "doc/api/Npgsql.NpgsqlCommand.html",
    "title": "Class NpgsqlCommand | Npgsql Documentation",
    "keywords": "Class NpgsqlCommand Represents a SQL statement or function (stored procedure) to execute against a PostgreSQL database. This class cannot be inherited. Inheritance Object NpgsqlCommand Implements ICloneable IComponent Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlCommand : DbCommand Constructors | Improve this Doc View Source NpgsqlCommand() Initializes a new instance of the NpgsqlCommand class. Declaration public NpgsqlCommand() | Improve this Doc View Source NpgsqlCommand(Nullable<String>) Initializes a new instance of the NpgsqlCommand class with the text of the query. Declaration public NpgsqlCommand(string? cmdText) Parameters Type Name Description Nullable < String > cmdText The text of the query. | Improve this Doc View Source NpgsqlCommand(Nullable<String>, NpgsqlConnection) Initializes a new instance of the NpgsqlCommand class with the text of the query and a NpgsqlConnection . Declaration public NpgsqlCommand(string? cmdText, NpgsqlConnection connection) Parameters Type Name Description Nullable < String > cmdText The text of the query. NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. | Improve this Doc View Source NpgsqlCommand(Nullable<String>, NpgsqlConnection, NpgsqlTransaction) Initializes a new instance of the NpgsqlCommand class with the text of the query, a NpgsqlConnection , and the NpgsqlTransaction . Declaration public NpgsqlCommand(string? cmdText, NpgsqlConnection connection, NpgsqlTransaction transaction) Parameters Type Name Description Nullable < String > cmdText The text of the query. NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. NpgsqlTransaction transaction The NpgsqlTransaction in which the NpgsqlCommand executes. Properties | Improve this Doc View Source AllResultTypesAreUnknown Marks all of the query's result columns as either known or unknown. Unknown result columns are requested from PostgreSQL in text format, and Npgsql makes no attempt to parse them. They will be accessible as strings only. Declaration public bool AllResultTypesAreUnknown { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CommandText Gets or sets the SQL statement or function (stored procedure) to execute at the data source. Declaration public override string CommandText { get; set; } Property Value Type Description String The SQL statement or function (stored procedure) to execute. The default is an empty string. | Improve this Doc View Source CommandTimeout Gets or sets the wait time (in seconds) before terminating the attempt to execute a command and generating an error. Declaration public override int CommandTimeout { get; set; } Property Value Type Description Int32 The time (in seconds) to wait for the command to execute. The default value is 30 seconds. | Improve this Doc View Source CommandType Gets or sets a value indicating how the CommandText property is to be interpreted. Declaration public override CommandType CommandType { get; set; } Property Value Type Description CommandType One of the values. The default is . | Improve this Doc View Source Connection Gets or sets the NpgsqlConnection used by this instance of the NpgsqlCommand . Declaration public NpgsqlConnection Connection { get; set; } Property Value Type Description NpgsqlConnection The connection to a data source. The default value is null . | Improve this Doc View Source DbConnection DB connection. Declaration protected override DbConnection? DbConnection { get; set; } Property Value Type Description Nullable < DbConnection > | Improve this Doc View Source DbParameterCollection DB parameter collection. Declaration protected override DbParameterCollection DbParameterCollection { get; } Property Value Type Description DbParameterCollection | Improve this Doc View Source DbTransaction DB transaction. Declaration protected override DbTransaction? DbTransaction { get; set; } Property Value Type Description Nullable < DbTransaction > | Improve this Doc View Source DesignTimeVisible Design time visible. Declaration public override bool DesignTimeVisible { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsPrepared Returns whether this query will execute as a prepared (compiled) query. Declaration public bool IsPrepared { get; } Property Value Type Description Boolean | Improve this Doc View Source Parameters Gets the NpgsqlParameterCollection . Declaration public NpgsqlParameterCollection Parameters { get; } Property Value Type Description NpgsqlParameterCollection The parameters of the SQL statement or function (stored procedure). The default is an empty collection. | Improve this Doc View Source Statements Returns details about each statement that this command has executed. Is only populated when an Execute* method is called. Declaration public IReadOnlyList<NpgsqlBatchCommand> Statements { get; } Property Value Type Description IReadOnlyList < NpgsqlBatchCommand > | Improve this Doc View Source Transaction This property is ignored by Npgsql. PostgreSQL only supports a single transaction at a given time on a given connection, and all commands implicitly run inside the current transaction started via BeginTransaction() Declaration public NpgsqlTransaction Transaction { get; set; } Property Value Type Description NpgsqlTransaction | Improve this Doc View Source UnknownResultTypeList Marks the query's result columns as known or unknown, on a column-by-column basis. Unknown result columns are requested from PostgreSQL in text format, and Npgsql makes no attempt to parse them. They will be accessible as strings only. Declaration public bool[] UnknownResultTypeList { get; set; } Property Value Type Description Boolean [] Remarks If the query includes several queries (e.g. SELECT 1; SELECT 2), this will only apply to the first one. The rest of the queries will be fetched and parsed as usual. The array size must correspond exactly to the number of result columns the query returns, or an error will be raised. | Improve this Doc View Source UpdatedRowSource Gets or sets how command results are applied to the DataRow when used by the DbDataAdapter.Update(DataSet) method. Declaration public override UpdateRowSource UpdatedRowSource { get; set; } Property Value Type Description UpdateRowSource One of the values. Methods | Improve this Doc View Source Cancel() Attempts to cancel the execution of an NpgsqlCommand . Declaration public override void Cancel() Remarks As per the specs, no exception will be thrown by this method in case of failure. | Improve this Doc View Source Clone() Create a new command based on this one. Declaration public virtual NpgsqlCommand Clone() Returns Type Description NpgsqlCommand A new NpgsqlCommand object. | Improve this Doc View Source CreateDbParameter() Creates a new instance of an object. Declaration protected override DbParameter CreateDbParameter() Returns Type Description DbParameter A object. | Improve this Doc View Source CreateParameter() Creates a new instance of a NpgsqlParameter object. Declaration public NpgsqlParameter CreateParameter() Returns Type Description NpgsqlParameter An NpgsqlParameter object. | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source ExecuteDbDataReader(CommandBehavior) Executes the command text against the connection. Declaration protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) Parameters Type Name Description CommandBehavior behavior Returns Type Description DbDataReader A task representing the operation. | Improve this Doc View Source ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) Executes the command text against the connection. Declaration protected override async Task<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken) Parameters Type Name Description CommandBehavior behavior An instance of . CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < DbDataReader > A task representing the asynchronous operation. | Improve this Doc View Source ExecuteNonQuery() Executes a SQL statement against the connection and returns the number of rows affected. Declaration public override int ExecuteNonQuery() Returns Type Description Int32 The number of rows affected if known; -1 otherwise. | Improve this Doc View Source ExecuteNonQueryAsync(CancellationToken) Asynchronous version of ExecuteNonQuery() Declaration public override Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. | Improve this Doc View Source ExecuteReader(CommandBehavior) Executes the CommandText against the Connection and returns a NpgsqlDataReader . Declaration public NpgsqlDataReader ExecuteReader(CommandBehavior behavior = null) Parameters Type Name Description CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description NpgsqlDataReader A task representing the operation. | Improve this Doc View Source ExecuteReaderAsync(CancellationToken) An asynchronous version of ExecuteReader(CommandBehavior) , which executes the CommandText against the Connection and returns a NpgsqlDataReader . Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < NpgsqlDataReader > A task representing the asynchronous operation. | Improve this Doc View Source ExecuteReaderAsync(CommandBehavior, CancellationToken) An asynchronous version of ExecuteReader(CommandBehavior) , which executes the CommandText against the Connection and returns a NpgsqlDataReader . Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken = null) Parameters Type Name Description CommandBehavior behavior One of the enumeration values that specifies the command behavior. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < NpgsqlDataReader > A task representing the asynchronous operation. | Improve this Doc View Source ExecuteScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored. Declaration public override object? ExecuteScalar() Returns Type Description Nullable < Object > The first column of the first row in the result set, or a null reference if the result set is empty. | Improve this Doc View Source ExecuteScalarAsync(CancellationToken) Asynchronous version of ExecuteScalar() Declaration public override Task<object?> ExecuteScalarAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Nullable < Object >> A task representing the asynchronous operation, with the first column of the first row in the result set, or a null reference if the result set is empty. | Improve this Doc View Source Prepare() Creates a server-side prepared statement on the PostgreSQL server. This will make repeated future executions of this command much faster. Declaration public override void Prepare() | Improve this Doc View Source PrepareAsync(CancellationToken) Creates a server-side prepared statement on the PostgreSQL server. This will make repeated future executions of this command much faster. Declaration public override Task PrepareAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Unprepare() Unprepares a command, closing server-side statements associated with it. Note that this only affects commands explicitly prepared with Prepare() , not automatically prepared statements. Declaration public void Unprepare() | Improve this Doc View Source UnprepareAsync(CancellationToken) Unprepares a command, closing server-side statements associated with it. Note that this only affects commands explicitly prepared with Prepare() , not automatically prepared statements. Declaration public Task UnprepareAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Events | Improve this Doc View Source Disposed This event is unsupported by Npgsql. Use instead. Declaration public event EventHandler? Disposed Event Type Type Description Nullable < EventHandler > Implements ICloneable IComponent"
  },
  "doc/api/Npgsql.NpgsqlCommandBuilder.html": {
    "href": "doc/api/Npgsql.NpgsqlCommandBuilder.html",
    "title": "Class NpgsqlCommandBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlCommandBuilder This class creates database commands for automatic insert, update and delete operations. Inheritance Object NpgsqlCommandBuilder Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlCommandBuilder : DbCommandBuilder Constructors | Improve this Doc View Source NpgsqlCommandBuilder() Initializes a new instance of the NpgsqlCommandBuilder class. Declaration public NpgsqlCommandBuilder() | Improve this Doc View Source NpgsqlCommandBuilder(NpgsqlDataAdapter) Initializes a new instance of the NpgsqlCommandBuilder class. Declaration public NpgsqlCommandBuilder(NpgsqlDataAdapter adapter) Parameters Type Name Description NpgsqlDataAdapter adapter The adapter. Properties | Improve this Doc View Source QuotePrefix Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens. Declaration public override string QuotePrefix { get; set; } Property Value Type Description String The beginning character or characters to use. The default is an empty string. | Improve this Doc View Source QuoteSuffix Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens. Declaration public override string QuoteSuffix { get; set; } Property Value Type Description String The ending character or characters to use. The default is an empty string. Methods | Improve this Doc View Source ApplyParameterInfo(DbParameter, DataRow, StatementType, Boolean) Applies the parameter information. Declaration protected override void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause) Parameters Type Name Description DbParameter p The parameter. DataRow row The row. StatementType statementType Type of the statement. Boolean whereClause If set to true [where clause]. | Improve this Doc View Source DeriveParameters(NpgsqlCommand) This method is responsible to derive the command parameter list with values obtained from function definition. It clears the Parameters collection of command. Also, if there is any parameter type which is not supported by Npgsql, an InvalidOperationException will be thrown. Parameters name will be parameter1, parameter2, ... for CommandType.StoredProcedure and named after the placeholder for CommandType.Text Declaration public static void DeriveParameters(NpgsqlCommand command) Parameters Type Name Description NpgsqlCommand command NpgsqlCommand whose function parameters will be obtained. | Improve this Doc View Source GetDeleteCommand() Gets the automatically generated System.Data.Common.DbCommand object required to perform deletions at the data source. Declaration public NpgsqlCommand GetDeleteCommand() Returns Type Description NpgsqlCommand The automatically generated System.Data.Common.DbCommand object required to perform deletions. | Improve this Doc View Source GetDeleteCommand(Boolean) Gets the automatically generated NpgsqlCommand object required to perform deletions at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetDeleteCommand(bool useColumnsForParameterNames) Parameters Type Name Description Boolean useColumnsForParameterNames If true , generate parameter names matching column names, if possible. If false , generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform deletions. | Improve this Doc View Source GetInsertCommand() Gets the automatically generated NpgsqlCommand object required to perform insertions at the data source. Declaration public NpgsqlCommand GetInsertCommand() Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform insertions. | Improve this Doc View Source GetInsertCommand(Boolean) Gets the automatically generated NpgsqlCommand object required to perform insertions at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetInsertCommand(bool useColumnsForParameterNames) Parameters Type Name Description Boolean useColumnsForParameterNames If true , generate parameter names matching column names, if possible. If false , generate @p1 , @p2 , and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform insertions. | Improve this Doc View Source GetParameterName(Int32) Returns the name of the specified parameter in the format of @p#. Declaration protected override string GetParameterName(int parameterOrdinal) Parameters Type Name Description Int32 parameterOrdinal The number to be included as part of the parameter's name.. Returns Type Description String The name of the parameter with the specified number appended as part of the parameter name. | Improve this Doc View Source GetParameterName(String) Returns the full parameter name, given the partial parameter name. Declaration protected override string GetParameterName(string parameterName) Parameters Type Name Description String parameterName The partial name of the parameter. Returns Type Description String The full parameter name corresponding to the partial parameter name requested. | Improve this Doc View Source GetParameterPlaceholder(Int32) Returns the placeholder for the parameter in the associated SQL statement. Declaration protected override string GetParameterPlaceholder(int parameterOrdinal) Parameters Type Name Description Int32 parameterOrdinal The number to be included as part of the parameter's name. Returns Type Description String The name of the parameter with the specified number appended. | Improve this Doc View Source GetUpdateCommand() Gets the automatically generated System.Data.Common.DbCommand object required to perform updates at the data source. Declaration public NpgsqlCommand GetUpdateCommand() Returns Type Description NpgsqlCommand The automatically generated System.Data.Common.DbCommand object required to perform updates. | Improve this Doc View Source GetUpdateCommand(Boolean) Gets the automatically generated NpgsqlCommand object required to perform updates at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetUpdateCommand(bool useColumnsForParameterNames) Parameters Type Name Description Boolean useColumnsForParameterNames If true , generate parameter names matching column names, if possible. If false , generate @p1 , @p2 , and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform updates. | Improve this Doc View Source QuoteIdentifier(String) Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier. Declaration public override string QuoteIdentifier(string unquotedIdentifier) Parameters Type Name Description String unquotedIdentifier The original unquoted identifier. Returns Type Description String The quoted version of the identifier. Embedded quotes within the identifier are properly escaped. | Improve this Doc View Source SetRowUpdatingHandler(DbDataAdapter) Registers the NpgsqlCommandBuilder to handle the RowUpdating event for a NpgsqlDataAdapter . Declaration protected override void SetRowUpdatingHandler(DbDataAdapter adapter) Parameters Type Name Description DbDataAdapter adapter The to be used for the update. | Improve this Doc View Source UnquoteIdentifier(String) Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier. Declaration public override string UnquoteIdentifier(string quotedIdentifier) Parameters Type Name Description String quotedIdentifier The identifier that will have its embedded quotes removed. Returns Type Description String The unquoted identifier, with embedded quotes properly un-escaped."
  },
  "doc/api/Npgsql.NpgsqlConnection.html": {
    "href": "doc/api/Npgsql.NpgsqlConnection.html",
    "title": "Class NpgsqlConnection | Npgsql Documentation",
    "keywords": "Class NpgsqlConnection This class represents a connection to a PostgreSQL server. Inheritance Object NpgsqlConnection Implements ICloneable IComponent Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlConnection : DbConnection Constructors | Improve this Doc View Source NpgsqlConnection() Initializes a new instance of the NpgsqlConnection class. Declaration public NpgsqlConnection() | Improve this Doc View Source NpgsqlConnection(Nullable<String>) Initializes a new instance of NpgsqlConnection with the given connection string. Declaration public NpgsqlConnection(string? connectionString) Parameters Type Name Description Nullable < String > connectionString The connection used to open the PostgreSQL database. Fields | Improve this Doc View Source DefaultPort The default TCP/IP port for PostgreSQL. Declaration public const int DefaultPort = null Field Value Type Description Int32 Properties | Improve this Doc View Source CommandTimeout Gets the time (in seconds) to wait while trying to execute a command before terminating the attempt and generating an error. Declaration public int CommandTimeout { get; } Property Value Type Description Int32 The time (in seconds) to wait for a command to complete. The default value is 20 seconds. | Improve this Doc View Source ConnectionString Gets or sets the string used to connect to a PostgreSQL database. See the manual for details. Declaration public override string ConnectionString { get; set; } Property Value Type Description String The connection string that includes the server name, the database name, and other parameters needed to establish the initial connection. The default value is an empty string. | Improve this Doc View Source ConnectionTimeout Gets the time (in seconds) to wait while trying to establish a connection before terminating the attempt and generating an error. Declaration public override int ConnectionTimeout { get; } Property Value Type Description Int32 The time (in seconds) to wait for a connection to open. The default value is 15 seconds. | Improve this Doc View Source Database Gets the name of the current database or the database to be used after a connection is opened. Declaration public override string Database { get; } Property Value Type Description String The name of the current database or the name of the database to be used after a connection is opened. The default value is the empty string. | Improve this Doc View Source DataSource Gets the string identifying the database server (host and port) Declaration public override string DataSource { get; } Property Value Type Description String The name of the database server (host and port). If the connection uses a Unix-domain socket, the path to that socket is returned. The default value is the empty string. | Improve this Doc View Source DbProviderFactory DB provider factory. Declaration protected override DbProviderFactory DbProviderFactory { get; } Property Value Type Description DbProviderFactory | Improve this Doc View Source FullState Gets the current state of the connection. Declaration public ConnectionState FullState { get; } Property Value Type Description ConnectionState A bitwise combination of the values. The default is Closed . | Improve this Doc View Source GlobalTypeMapper The global type mapper, which contains defaults used by all new connections. Modify mappings on this mapper to affect your entire application. Declaration public static INpgsqlTypeMapper GlobalTypeMapper { get; } Property Value Type Description INpgsqlTypeMapper | Improve this Doc View Source HasIntegerDateTimes Reports whether the backend uses the newer integer timestamp representation. Note that the old floating point representation is not supported. Meant for use by type plugins (e.g. NodaTime) Declaration public bool HasIntegerDateTimes { get; } Property Value Type Description Boolean | Improve this Doc View Source Host Backend server host name. Declaration public string? Host { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source IntegratedSecurity Whether to use Windows integrated security to log in. Declaration public bool IntegratedSecurity { get; } Property Value Type Description Boolean | Improve this Doc View Source Port Backend server port. Declaration public int Port { get; } Property Value Type Description Int32 | Improve this Doc View Source PostgresParameters Holds all PostgreSQL parameters received for this connection. Is updated if the values change (e.g. as a result of a SET command). Declaration public IReadOnlyDictionary<string, string> PostgresParameters { get; } Property Value Type Description IReadOnlyDictionary < String , String > | Improve this Doc View Source PostgreSqlVersion The version of the PostgreSQL server we're connected to. This can only be called when the connection is open. In case of a development or pre-release version this field will contain the version of the next version to be released from this branch. Declaration public Version PostgreSqlVersion { get; } Property Value Type Description Version | Improve this Doc View Source ProcessID Process id of backend server. This can only be called when there is an active connection. Declaration public int ProcessID { get; } Property Value Type Description Int32 | Improve this Doc View Source ProvideClientCertificatesCallback Selects the local Secure Sockets Layer (SSL) certificate used for authentication. Declaration public ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; set; } Property Value Type Description ProvideClientCertificatesCallback Remarks See https://msdn.microsoft.com/en-us/library/system.net.security.localcertificateselectioncallback(v=vs.110).aspx | Improve this Doc View Source ProvidePasswordCallback Gets or sets the delegate used to generate a password for new database connections. Declaration public ProvidePasswordCallback ProvidePasswordCallback { get; set; } Property Value Type Description ProvidePasswordCallback Remarks This delegate is executed when a new database connection is opened that requires a password. The Password and Passfile connection string properties have precedence over this delegate: it will not be executed if a password is specified, or if the specified or default Passfile contains a valid entry. Due to connection pooling this delegate is only executed when a new physical connection is opened, not when reusing a connection that was previously opened from the pool. | Improve this Doc View Source ServerVersion The PostgreSQL server version as returned by the server_version option. This can only be called when the connection is open. Declaration public override string ServerVersion { get; } Property Value Type Description String | Improve this Doc View Source State Gets whether the current state of the connection is Open or Closed Declaration public override ConnectionState State { get; } Property Value Type Description ConnectionState ConnectionState.Open, ConnectionState.Closed or ConnectionState.Connecting | Improve this Doc View Source Timezone The connection's timezone as reported by PostgreSQL, in the IANA/Olson database format. Declaration public string Timezone { get; } Property Value Type Description String | Improve this Doc View Source TypeMapper Connection-level type mapping is no longer supported. See the 7.0 release notes for configuring type mapping on NpgsqlDataSource. Declaration public INpgsqlTypeMapper TypeMapper { get; } Property Value Type Description INpgsqlTypeMapper | Improve this Doc View Source UserCertificateValidationCallback When using SSL/TLS, this is a callback that allows customizing how the PostgreSQL-provided certificate is verified. This is an advanced API, consider using VerifyFull or VerifyCA instead. Declaration public RemoteCertificateValidationCallback? UserCertificateValidationCallback { get; set; } Property Value Type Description Nullable < RemoteCertificateValidationCallback > Remarks Cannot be used in conjunction with Disable , VerifyCA and VerifyFull . See https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx . | Improve this Doc View Source UserName User name. Declaration public string? UserName { get; } Property Value Type Description Nullable < String > Methods | Improve this Doc View Source BeginBinaryExport(String) Begins a binary COPY TO STDOUT operation, a high-performance data export mechanism from a PostgreSQL table. Declaration public NpgsqlBinaryExporter BeginBinaryExport(string copyToCommand) Parameters Type Name Description String copyToCommand A COPY TO STDOUT SQL command Returns Type Description NpgsqlBinaryExporter A NpgsqlBinaryExporter which can be used to read rows and columns Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginBinaryExportAsync(String, CancellationToken) Begins a binary COPY TO STDOUT operation, a high-performance data export mechanism from a PostgreSQL table. Declaration public Task<NpgsqlBinaryExporter> BeginBinaryExportAsync(string copyToCommand, CancellationToken cancellationToken = null) Parameters Type Name Description String copyToCommand A COPY TO STDOUT SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task < NpgsqlBinaryExporter > A NpgsqlBinaryExporter which can be used to read rows and columns Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginBinaryImport(String) Begins a binary COPY FROM STDIN operation, a high-performance data import mechanism to a PostgreSQL table. Declaration public NpgsqlBinaryImporter BeginBinaryImport(string copyFromCommand) Parameters Type Name Description String copyFromCommand A COPY FROM STDIN SQL command Returns Type Description NpgsqlBinaryImporter A NpgsqlBinaryImporter which can be used to write rows and columns Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginBinaryImportAsync(String, CancellationToken) Begins a binary COPY FROM STDIN operation, a high-performance data import mechanism to a PostgreSQL table. Declaration public Task<NpgsqlBinaryImporter> BeginBinaryImportAsync(string copyFromCommand, CancellationToken cancellationToken = null) Parameters Type Name Description String copyFromCommand A COPY FROM STDIN SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task < NpgsqlBinaryImporter > A NpgsqlBinaryImporter which can be used to write rows and columns Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginDbTransaction(IsolationLevel) Begins a database transaction with the specified isolation level. Declaration protected override DbTransaction BeginDbTransaction(IsolationLevel isolationLevel) Parameters Type Name Description IsolationLevel isolationLevel The isolation level under which the transaction should run. Returns Type Description DbTransaction A object representing the new transaction. Remarks Nested transactions are not supported. | Improve this Doc View Source BeginDbTransactionAsync(IsolationLevel, CancellationToken) Asynchronously begins a database transaction. Declaration protected override async ValueTask<DbTransaction> BeginDbTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken) Parameters Type Name Description IsolationLevel isolationLevel The isolation level under which the transaction should run. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description ValueTask < DbTransaction > A task whose property is an object representing the new transaction. Remarks Nested transactions are not supported. | Improve this Doc View Source BeginRawBinaryCopy(String) Begins a raw binary COPY operation (TO STDOUT or FROM STDIN), a high-performance data export/import mechanism to a PostgreSQL table. Note that unlike the other COPY API methods, BeginRawBinaryCopy(String) doesn't implement any encoding/decoding and is unsuitable for structured import/export operation. It is useful mainly for exporting a table as an opaque blob, for the purpose of importing it back later. Declaration public NpgsqlRawCopyStream BeginRawBinaryCopy(string copyCommand) Parameters Type Name Description String copyCommand A COPY TO STDOUT or COPY FROM STDIN SQL command Returns Type Description NpgsqlRawCopyStream A NpgsqlRawCopyStream that can be used to read or write raw binary data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginRawBinaryCopyAsync(String, CancellationToken) Begins a raw binary COPY operation (TO STDOUT or FROM STDIN), a high-performance data export/import mechanism to a PostgreSQL table. Note that unlike the other COPY API methods, BeginRawBinaryCopyAsync(String, CancellationToken) doesn't implement any encoding/decoding and is unsuitable for structured import/export operation. It is useful mainly for exporting a table as an opaque blob, for the purpose of importing it back later. Declaration public Task<NpgsqlRawCopyStream> BeginRawBinaryCopyAsync(string copyCommand, CancellationToken cancellationToken = null) Parameters Type Name Description String copyCommand A COPY TO STDOUT or COPY FROM STDIN SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task < NpgsqlRawCopyStream > A NpgsqlRawCopyStream that can be used to read or write raw binary data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTextExport(String) Begins a textual COPY TO STDOUT operation, a data export mechanism from a PostgreSQL table. It is the user's responsibility to parse the textual input according to the format specified in copyToCommand . Declaration public TextReader BeginTextExport(string copyToCommand) Parameters Type Name Description String copyToCommand A COPY TO STDOUT SQL command Returns Type Description TextReader A TextReader that can be used to read textual data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTextExportAsync(String, CancellationToken) Begins a textual COPY TO STDOUT operation, a data export mechanism from a PostgreSQL table. It is the user's responsibility to parse the textual input according to the format specified in copyToCommand . Declaration public Task<TextReader> BeginTextExportAsync(string copyToCommand, CancellationToken cancellationToken = null) Parameters Type Name Description String copyToCommand A COPY TO STDOUT SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task < TextReader > A TextReader that can be used to read textual data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTextImport(String) Begins a textual COPY FROM STDIN operation, a data import mechanism to a PostgreSQL table. It is the user's responsibility to send the textual input according to the format specified in copyFromCommand . Declaration public TextWriter BeginTextImport(string copyFromCommand) Parameters Type Name Description String copyFromCommand A COPY FROM STDIN SQL command Returns Type Description TextWriter A TextWriter that can be used to send textual data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTextImportAsync(String, CancellationToken) Begins a textual COPY FROM STDIN operation, a data import mechanism to a PostgreSQL table. It is the user's responsibility to send the textual input according to the format specified in copyFromCommand . Declaration public Task<TextWriter> BeginTextImportAsync(string copyFromCommand, CancellationToken cancellationToken = null) Parameters Type Name Description String copyFromCommand A COPY FROM STDIN SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task < TextWriter > A TextWriter that can be used to send textual data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTransaction() Begins a database transaction. Declaration public NpgsqlTransaction BeginTransaction() Returns Type Description NpgsqlTransaction A NpgsqlTransaction object representing the new transaction. Remarks Nested transactions are not supported. Transactions created by this method will have the isolation level. | Improve this Doc View Source BeginTransaction(IsolationLevel) Begins a database transaction with the specified isolation level. Declaration public NpgsqlTransaction BeginTransaction(IsolationLevel level) Parameters Type Name Description IsolationLevel level The isolation level under which the transaction should run. Returns Type Description NpgsqlTransaction A NpgsqlTransaction object representing the new transaction. Remarks Nested transactions are not supported. | Improve this Doc View Source BeginTransactionAsync(CancellationToken) Asynchronously begins a database transaction. Declaration public ValueTask<NpgsqlTransaction> BeginTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description ValueTask < NpgsqlTransaction > A task whose Result property is an object representing the new transaction. Remarks Nested transactions are not supported. Transactions created by this method will have the isolation level. | Improve this Doc View Source BeginTransactionAsync(IsolationLevel, CancellationToken) Asynchronously begins a database transaction. Declaration public ValueTask<NpgsqlTransaction> BeginTransactionAsync(IsolationLevel level, CancellationToken cancellationToken = null) Parameters Type Name Description IsolationLevel level The isolation level under which the transaction should run. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description ValueTask < NpgsqlTransaction > A task whose property is an object representing the new transaction. Remarks Nested transactions are not supported. | Improve this Doc View Source ChangeDatabase(String) This method changes the current database by disconnecting from the actual database and connecting to the specified. Declaration public override void ChangeDatabase(string dbName) Parameters Type Name Description String dbName The name of the database to use in place of the current database. | Improve this Doc View Source ClearAllPools() Clear all connection pools. All idle physical connections in all pools are immediately closed, and any busy connections which were opened before ClearAllPools() was called will be closed when returned to their pool. Declaration public static void ClearAllPools() | Improve this Doc View Source ClearPool(NpgsqlConnection) Clears the connection pool. All idle physical connections in the pool of the given connection are immediately closed, and any busy connections which were opened before ClearPool(NpgsqlConnection) was called will be closed when returned to the pool. Declaration public static void ClearPool(NpgsqlConnection connection) Parameters Type Name Description NpgsqlConnection connection | Improve this Doc View Source CloneWith(String) Clones this connection, replacing its connection string with the given one. This allows creating a new connection with the same security information (password, SSL callbacks) while changing other connection parameters (e.g. database or pooling) Declaration public NpgsqlConnection CloneWith(string connectionString) Parameters Type Name Description String connectionString Returns Type Description NpgsqlConnection | Improve this Doc View Source Close() Releases the connection. If the connection is pooled, it will be returned to the pool and made available for re-use. If it is non-pooled, the physical connection will be closed. Declaration public override void Close() | Improve this Doc View Source CloseAsync() Releases the connection. If the connection is pooled, it will be returned to the pool and made available for re-use. If it is non-pooled, the physical connection will be closed. Declaration public override Task CloseAsync() Returns Type Description Task | Improve this Doc View Source CreateBatch() Creates and returns a NpgsqlBatch object associated with the NpgsqlConnection . Declaration public NpgsqlBatch CreateBatch() Returns Type Description NpgsqlBatch A NpgsqlBatch object. | Improve this Doc View Source CreateCommand() Creates and returns a NpgsqlCommand object associated with the NpgsqlConnection . Declaration public NpgsqlCommand CreateCommand() Returns Type Description NpgsqlCommand A NpgsqlCommand object. | Improve this Doc View Source CreateDbCommand() Creates and returns a object associated with the . Declaration protected override DbCommand CreateDbCommand() Returns Type Description DbCommand A object. | Improve this Doc View Source Dispose(Boolean) Releases all resources used by the NpgsqlConnection . Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true when called from Dispose(Boolean) ; false when being called from the finalizer. | Improve this Doc View Source DisposeAsync() Releases all resources used by the NpgsqlConnection . Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source EnlistTransaction(Nullable<Transaction>) Enlist transaction. Declaration public override void EnlistTransaction(Transaction? transaction) Parameters Type Name Description Nullable < Transaction > transaction | Improve this Doc View Source GetSchema() Returns the supported collections Declaration public override DataTable GetSchema() Returns Type Description DataTable | Improve this Doc View Source GetSchema(Nullable<String>) Returns the schema collection specified by the collection name. Declaration public override DataTable GetSchema(string? collectionName) Parameters Type Name Description Nullable < String > collectionName The collection name. Returns Type Description DataTable The collection specified. | Improve this Doc View Source GetSchema(Nullable<String>, Nullable<String>[]) Returns the schema collection specified by the collection name filtered by the restrictions. Declaration public override DataTable GetSchema(string? collectionName, string? [] restrictions) Parameters Type Name Description Nullable < String > collectionName The collection name. Nullable < String >[] restrictions The restriction values to filter the results. A description of the restrictions is contained in the Restrictions collection. Returns Type Description DataTable The collection specified. | Improve this Doc View Source GetSchemaAsync(CancellationToken) Asynchronously returns the supported collections. Declaration public Task<DataTable> GetSchemaAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < DataTable > The collection specified. | Improve this Doc View Source GetSchemaAsync(String, CancellationToken) Asynchronously returns the schema collection specified by the collection name. Declaration public Task<DataTable> GetSchemaAsync(string collectionName, CancellationToken cancellationToken = null) Parameters Type Name Description String collectionName The collection name. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < DataTable > The collection specified. | Improve this Doc View Source GetSchemaAsync(String, Nullable<String>[], CancellationToken) Asynchronously returns the schema collection specified by the collection name filtered by the restrictions. Declaration public Task<DataTable> GetSchemaAsync(string collectionName, string? [] restrictions, CancellationToken cancellationToken = null) Parameters Type Name Description String collectionName The collection name. Nullable < String >[] restrictions The restriction values to filter the results. A description of the restrictions is contained in the Restrictions collection. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < DataTable > The collection specified. | Improve this Doc View Source Open() Opens a database connection with the property settings specified by the ConnectionString . Declaration public override void Open() | Improve this Doc View Source OpenAsync(CancellationToken) This is the asynchronous version of Open() . Declaration public override Task OpenAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task A task representing the asynchronous operation. Remarks Do not invoke other methods and properties of the NpgsqlConnection object until the returned Task is complete. | Improve this Doc View Source ReloadTypes() Flushes the type cache for this connection's connection string and reloads the types for this connection only. Type changes will appear for other connections only after they are re-opened from the pool. Declaration public void ReloadTypes() | Improve this Doc View Source ReloadTypesAsync() Flushes the type cache for this connection's connection string and reloads the types for this connection only. Type changes will appear for other connections only after they are re-opened from the pool. Declaration public async Task ReloadTypesAsync() Returns Type Description Task | Improve this Doc View Source UnprepareAll() Unprepares all prepared statements on this connection. Declaration public void UnprepareAll() | Improve this Doc View Source Wait() Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public void Wait() | Improve this Doc View Source Wait(Int32) Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public bool Wait(int timeout) Parameters Type Name Description Int32 timeout The time-out value, in milliseconds, passed to . The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. Returns Type Description Boolean true if an asynchronous message was received, false if timed out. | Improve this Doc View Source Wait(TimeSpan) Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public bool Wait(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout The time-out value is passed to . Returns Type Description Boolean true if an asynchronous message was received, false if timed out. | Improve this Doc View Source WaitAsync(CancellationToken) Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public Task WaitAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source WaitAsync(Int32, CancellationToken) Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public Task<bool> WaitAsync(int timeout, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 timeout The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Boolean > true if an asynchronous message was received, false if timed out. | Improve this Doc View Source WaitAsync(TimeSpan, CancellationToken) Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public Task<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken = null) Parameters Type Name Description TimeSpan timeout The time-out value as CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Boolean > true if an asynchronous message was received, false if timed out. Events | Improve this Doc View Source Disposed This event is unsupported by Npgsql. Use instead. Declaration public event EventHandler? Disposed Event Type Type Description Nullable < EventHandler > | Improve this Doc View Source Notice Fires when PostgreSQL notices are received from PostgreSQL. Declaration public event NoticeEventHandler Notice Event Type Type Description NoticeEventHandler Remarks PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator initiates a \"fast\" database shutdown). Note that notices are very different from notifications (see the Notification event). | Improve this Doc View Source Notification Fires when PostgreSQL notifications are received from PostgreSQL. Declaration public event NotificationEventHandler Notification Event Type Type Description NotificationEventHandler Remarks PostgreSQL notifications are sent when your connection has registered for notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel. Note that notifications are very different from notices (see the Notice event). Implements ICloneable IComponent"
  },
  "doc/api/Npgsql.NpgsqlConnectionStringBuilder.html": {
    "href": "doc/api/Npgsql.NpgsqlConnectionStringBuilder.html",
    "title": "Class NpgsqlConnectionStringBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlConnectionStringBuilder Provides a simple way to create and manage the contents of connection strings used by the NpgsqlConnection class. Inheritance Object NpgsqlConnectionStringBuilder Implements IDictionary < String , Nullable < Object >> Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlConnectionStringBuilder : DbConnectionStringBuilder Constructors | Improve this Doc View Source NpgsqlConnectionStringBuilder() Initializes a new instance of the NpgsqlConnectionStringBuilder class. Declaration public NpgsqlConnectionStringBuilder() | Improve this Doc View Source NpgsqlConnectionStringBuilder(Boolean) Initializes a new instance of the NpgsqlConnectionStringBuilder class, optionally using ODBC rules for quoting values. Declaration public NpgsqlConnectionStringBuilder(bool useOdbcRules) Parameters Type Name Description Boolean useOdbcRules true to use {} to delimit fields; false to use quotation marks. | Improve this Doc View Source NpgsqlConnectionStringBuilder(Nullable<String>) Initializes a new instance of the NpgsqlConnectionStringBuilder class and sets its . Declaration public NpgsqlConnectionStringBuilder(string? connectionString) Parameters Type Name Description Nullable < String > connectionString Properties | Improve this Doc View Source ApplicationName The optional application name parameter to be sent to the backend during connection initiation. Declaration public string? ApplicationName { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source ArrayNullabilityMode Configure the way arrays of value types are returned when requested as object instances. Declaration public ArrayNullabilityMode ArrayNullabilityMode { get; set; } Property Value Type Description ArrayNullabilityMode | Improve this Doc View Source AutoPrepareMinUsages The minimum number of usages an SQL statement is used before it's automatically prepared. Defaults to 5. Declaration public int AutoPrepareMinUsages { get; set; } Property Value Type Description Int32 | Improve this Doc View Source BackendTimeouts Obsolete, see https://www.npgsql.org/doc/release-notes/3.1.html Declaration public bool BackendTimeouts { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CancellationTimeout The time to wait (in milliseconds) while trying to read a response for a cancellation request for a timed out or cancelled query, before terminating the attempt and generating an error. Zero for infinity, -1 to skip the wait. Defaults to 2000 milliseconds. Declaration public int CancellationTimeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source CheckCertificateRevocation Whether to check the certificate revocation list during authentication. False by default. Declaration public bool CheckCertificateRevocation { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ClientCertificate Location of a client certificate to be sent to the server. Declaration public string? ClientCertificate { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source ClientCertificateKey Key for a client certificate to be sent to the server. Declaration public string? ClientCertificateKey { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source ClientEncoding Gets or sets the client_encoding parameter. Declaration public string? ClientEncoding { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source CommandTimeout The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Defaults to 30 seconds. Declaration public int CommandTimeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ConnectionIdleLifetime The time to wait before closing idle connections in the pool if the count of all connections exceeds MinPoolSize. Declaration public int ConnectionIdleLifetime { get; set; } Property Value Type Description Int32 The time (in seconds) to wait. The default value is 300. | Improve this Doc View Source ConnectionLifetime The total maximum lifetime of connections (in seconds). Connections which have exceeded this value will be destroyed instead of returned from the pool. This is useful in clustered configurations to force load balancing between a running server and a server just brought online. Declaration public int ConnectionLifetime { get; set; } Property Value Type Description Int32 The time (in seconds) to wait, or 0 to to make connections last indefinitely (the default). | Improve this Doc View Source ConnectionPruningInterval How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime ( ConnectionIdleLifetime . Declaration public int ConnectionPruningInterval { get; set; } Property Value Type Description Int32 The interval (in seconds). The default value is 10. | Improve this Doc View Source ContinuousProcessing Obsolete, see https://www.npgsql.org/doc/release-notes/3.1.html Declaration public bool ContinuousProcessing { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ConvertInfinityDateTime Obsolete, see https://www.npgsql.org/doc/release-notes/6.0.html Declaration public bool ConvertInfinityDateTime { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Database The PostgreSQL database to connect to. Declaration public string? Database { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source Encoding Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data. Declaration public string Encoding { get; set; } Property Value Type Description String | Improve this Doc View Source Enlist Whether to enlist in an ambient TransactionScope. Declaration public bool Enlist { get; set; } Property Value Type Description Boolean | Improve this Doc View Source EntityAdminDatabase The database admin to specify when creating and dropping a database in Entity Framework. This is needed because Npgsql needs to connect to a database in order to send the create/drop database command. If not specified, defaults to \"template1\". Check NpgsqlServices.UsingPostgresDBConnection for more information. Declaration public string? EntityAdminDatabase { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source EntityTemplateDatabase The database template to specify when creating a database in Entity Framework. If not specified, PostgreSQL defaults to \"template1\". Declaration public string? EntityTemplateDatabase { get; set; } Property Value Type Description Nullable < String > Remarks https://www.postgresql.org/docs/current/static/manage-ag-templatedbs.html | Improve this Doc View Source Host The hostname or IP address of the PostgreSQL server to connect to. Declaration public string? Host { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source HostRecheckSeconds Controls for how long the host's cached state will be considered as valid. Declaration public int HostRecheckSeconds { get; set; } Property Value Type Description Int32 | Improve this Doc View Source IncludeErrorDetail When enabled, PostgreSQL error details are included on Detail and Detail . These can contain sensitive data. Declaration public bool IncludeErrorDetail { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IncludeErrorDetails When enabled, PostgreSQL error details are included on Detail and Detail . These can contain sensitive data. Declaration public bool IncludeErrorDetails { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IncludeRealm The Kerberos realm to be used for authentication. Declaration public bool IncludeRealm { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IntegratedSecurity Whether to use Windows integrated security to log in. Declaration public bool IntegratedSecurity { get; set; } Property Value Type Description Boolean | Improve this Doc View Source InternalCommandTimeout The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. Declaration public int InternalCommandTimeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Item[String] Gets or sets the value associated with the specified key. Declaration public override object this[string keyword] { get; set; } Parameters Type Name Description String keyword The key of the item to get or set. Property Value Type Description Object The value associated with the specified key. | Improve this Doc View Source KeepAlive The number of seconds of connection inactivity before Npgsql sends a keepalive query. Set to 0 (the default) to disable. Declaration public int KeepAlive { get; set; } Property Value Type Description Int32 | Improve this Doc View Source KerberosServiceName The Kerberos service name to be used for authentication. Declaration public string KerberosServiceName { get; set; } Property Value Type Description String | Improve this Doc View Source Keys Gets an containing the keys of the NpgsqlConnectionStringBuilder . Declaration public ICollection<string> Keys { get; } Property Value Type Description ICollection < String > | Improve this Doc View Source LoadBalanceHosts Enables balancing between multiple hosts by round-robin. Declaration public bool LoadBalanceHosts { get; set; } Property Value Type Description Boolean | Improve this Doc View Source LoadTableComposites Load table composite type definitions, and not just free-standing composite types. Declaration public bool LoadTableComposites { get; set; } Property Value Type Description Boolean | Improve this Doc View Source LogParameters When enabled, parameter values are logged when commands are executed. Defaults to false. Declaration public bool LogParameters { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MaxAutoPrepare The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero (the default) disables automatic preparation. Declaration public int MaxAutoPrepare { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MaxPoolSize The maximum connection pool size. Declaration public int MaxPoolSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MinPoolSize The minimum connection pool size. Declaration public int MinPoolSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Multiplexing Enables multiplexing, which allows more efficient use of connections. Declaration public bool Multiplexing { get; set; } Property Value Type Description Boolean | Improve this Doc View Source NoResetOnClose If set to true, a pool connection's state won't be reset when it is closed (improves performance). Do not specify this unless you know what you're doing. Declaration public bool NoResetOnClose { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Options Set PostgreSQL configuration parameter default values for the connection. Declaration public string? Options { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source Passfile Path to a PostgreSQL password file (PGPASSFILE), from which the password would be taken. Declaration public string? Passfile { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source Password The password to connect with. Not required if using IntegratedSecurity. Declaration public string? Password { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source PersistSecurityInfo Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Declaration public bool PersistSecurityInfo { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Pooling Whether connection pooling should be used. Declaration public bool Pooling { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Port The TCP/IP port of the PostgreSQL server. Declaration public int Port { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PreloadReader Obsolete, see https://www.npgsql.org/doc/release-notes/3.0.html Declaration public bool PreloadReader { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ReadBufferSize Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database. Declaration public int ReadBufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RootCertificate Location of a CA certificate used to validate the server certificate. Declaration public string? RootCertificate { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source SearchPath Gets or sets the schema search path. Declaration public string? SearchPath { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source ServerCompatibilityMode A compatibility mode for special PostgreSQL server types. Declaration public ServerCompatibilityMode ServerCompatibilityMode { get; set; } Property Value Type Description ServerCompatibilityMode | Improve this Doc View Source SocketReceiveBufferSize Determines the size of socket read buffer. Declaration public int SocketReceiveBufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SocketSendBufferSize Determines the size of socket send buffer. Declaration public int SocketSendBufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SslCertificate Location of a client certificate to be sent to the server. Declaration public string? SslCertificate { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source SslKey Location of a client key for a client certificate to be sent to the server. Declaration public string? SslKey { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source SslMode Controls whether SSL is required, disabled or preferred, depending on server support. Declaration public SslMode SslMode { get; set; } Property Value Type Description SslMode | Improve this Doc View Source SslPassword Password for a key for a client certificate. Declaration public string? SslPassword { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source TargetSessionAttributes Determines the preferred PostgreSQL target server type. Declaration public string? TargetSessionAttributes { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source TcpKeepAlive Whether to use TCP keepalive with system defaults if overrides isn't specified. Declaration public bool TcpKeepAlive { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TcpKeepAliveInterval The interval, in seconds, between when successive keep-alive packets are sent if no acknowledgement is received. Defaults to the value of TcpKeepAliveTime . TcpKeepAliveTime must be non-zero as well. Declaration public int TcpKeepAliveInterval { get; set; } Property Value Type Description Int32 | Improve this Doc View Source TcpKeepAliveTime The number of seconds of connection inactivity before a TCP keepalive query is sent. Use of this option is discouraged, use KeepAlive instead if possible. Set to 0 (the default) to disable. Declaration public int TcpKeepAliveTime { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Timeout The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. Defaults to 15 seconds. Declaration public int Timeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Timezone Gets or sets the PostgreSQL session timezone, in Olson/IANA database format. Declaration public string? Timezone { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source TrustServerCertificate Whether to trust the server certificate without validating it. Declaration public bool TrustServerCertificate { get; set; } Property Value Type Description Boolean | Improve this Doc View Source UseExtendedTypes Obsolete, see https://www.npgsql.org/doc/release-notes/3.0.html Declaration public bool UseExtendedTypes { get; set; } Property Value Type Description Boolean | Improve this Doc View Source UsePerfCounters Writes connection performance information to performance counters. Declaration public bool UsePerfCounters { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Username The username to connect with. Not required if using IntegratedSecurity. Declaration public string? Username { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source UseSslStream Obsolete, see https://www.npgsql.org/doc/release-notes/4.1.html Declaration public bool UseSslStream { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Values Gets an containing the values in the NpgsqlConnectionStringBuilder . Declaration public ICollection<object?> Values { get; } Property Value Type Description ICollection < Nullable < Object >> | Improve this Doc View Source WriteBufferSize Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database. Declaration public int WriteBufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source WriteCoalescingBufferThresholdBytes When multiplexing is enabled, determines the maximum number of outgoing bytes to buffer before flushing to the network. Declaration public int WriteCoalescingBufferThresholdBytes { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(KeyValuePair<String, Nullable<Object>>) Adds an item to the NpgsqlConnectionStringBuilder . Declaration public void Add(KeyValuePair<string, object?> item) Parameters Type Name Description KeyValuePair < String , Nullable < Object >> item The key-value pair to be added. | Improve this Doc View Source Clear() Clears the contents of the NpgsqlConnectionStringBuilder instance. Declaration public override void Clear() | Improve this Doc View Source Contains(KeyValuePair<String, Nullable<Object>>) Determines whether the NpgsqlConnectionStringBuilder contains a specific key-value pair. Declaration public bool Contains(KeyValuePair<string, object?> item) Parameters Type Name Description KeyValuePair < String , Nullable < Object >> item The item to locate in the NpgsqlConnectionStringBuilder . Returns Type Description Boolean true if the NpgsqlConnectionStringBuilder contains the entry; otherwise false . | Improve this Doc View Source ContainsKey(String) Determines whether the NpgsqlConnectionStringBuilder contains a specific key. Declaration public override bool ContainsKey(string keyword) Parameters Type Name Description String keyword The key to locate in the NpgsqlConnectionStringBuilder . Returns Type Description Boolean true if the NpgsqlConnectionStringBuilder contains an entry with the specified key; otherwise false . | Improve this Doc View Source CopyTo(KeyValuePair<String, Nullable<Object>>[], Int32) Copies the elements of the NpgsqlConnectionStringBuilder to an Array, starting at a particular Array index. Declaration public void CopyTo(KeyValuePair<string, object?>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair < String , Nullable < Object >>[] array The one-dimensional Array that is the destination of the elements copied from NpgsqlConnectionStringBuilder . The Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the NpgsqlConnectionStringBuilder . Declaration public IEnumerator<KeyValuePair<string, object?>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < String , Nullable < Object >>> | Improve this Doc View Source GetHashCode() Hash function. Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source GetProperties(Hashtable) Declaration protected override void GetProperties(Hashtable propertyDescriptors) Parameters Type Name Description Hashtable propertyDescriptors | Improve this Doc View Source Remove(KeyValuePair<String, Nullable<Object>>) Removes the entry from the DbConnectionStringBuilder instance. Declaration public bool Remove(KeyValuePair<string, object?> item) Parameters Type Name Description KeyValuePair < String , Nullable < Object >> item The key/value pair to be removed from the connection string in this DbConnectionStringBuilder. Returns Type Description Boolean true if the key existed within the connection string and was removed; false if the key did not exist. | Improve this Doc View Source Remove(String) Removes the entry with the specified key from the DbConnectionStringBuilder instance. Declaration public override bool Remove(string keyword) Parameters Type Name Description String keyword The key of the key/value pair to be removed from the connection string in this DbConnectionStringBuilder. Returns Type Description Boolean true if the key existed within the connection string and was removed; false if the key did not exist. | Improve this Doc View Source TryGetValue(String, out Nullable<Object>) Retrieves a value corresponding to the supplied key from this NpgsqlConnectionStringBuilder . Declaration public override bool TryGetValue(string keyword, out object? value) Parameters Type Name Description String keyword The key of the item to retrieve. Nullable < Object > value The value corresponding to the key. Returns Type Description Boolean true if keyword was found within the connection string, false otherwise. Implements IDictionary<, >"
  },
  "doc/api/Npgsql.NpgsqlCopyTextReader.html": {
    "href": "doc/api/Npgsql.NpgsqlCopyTextReader.html",
    "title": "Class NpgsqlCopyTextReader | Npgsql Documentation",
    "keywords": "Class NpgsqlCopyTextReader Reader for a text export, initiated by BeginTextExport(String) . Inheritance Object NpgsqlCopyTextReader Implements IDisposable IAsyncDisposable Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlCopyTextReader : StreamReader Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing export. Declaration public void Cancel() | Improve this Doc View Source CancelAsync() Asynchronously cancels and terminates an ongoing export. Declaration public Task CancelAsync() Returns Type Description Task | Improve this Doc View Source DisposeAsync() Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlCopyTextWriter.html": {
    "href": "doc/api/Npgsql.NpgsqlCopyTextWriter.html",
    "title": "Class NpgsqlCopyTextWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlCopyTextWriter Writer for a text import, initiated by BeginTextImport(String) . Inheritance Object NpgsqlCopyTextWriter Implements IDisposable IAsyncDisposable Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlCopyTextWriter : StreamWriter Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing import. Any data already written will be discarded. Declaration public void Cancel() | Improve this Doc View Source CancelAsync() Cancels and terminates an ongoing import. Any data already written will be discarded. Declaration public Task CancelAsync() Returns Type Description Task Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlDataAdapter.html": {
    "href": "doc/api/Npgsql.NpgsqlDataAdapter.html",
    "title": "Class NpgsqlDataAdapter | Npgsql Documentation",
    "keywords": "Class NpgsqlDataAdapter This class represents an adapter from many commands: select, update, insert and delete to fill a . Inheritance Object NpgsqlDataAdapter Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlDataAdapter : DbDataAdapter Constructors | Improve this Doc View Source NpgsqlDataAdapter() Default constructor. Declaration public NpgsqlDataAdapter() | Improve this Doc View Source NpgsqlDataAdapter(NpgsqlCommand) Constructor. Declaration public NpgsqlDataAdapter(NpgsqlCommand selectCommand) Parameters Type Name Description NpgsqlCommand selectCommand | Improve this Doc View Source NpgsqlDataAdapter(String, NpgsqlConnection) Constructor. Declaration public NpgsqlDataAdapter(string selectCommandText, NpgsqlConnection selectConnection) Parameters Type Name Description String selectCommandText NpgsqlConnection selectConnection | Improve this Doc View Source NpgsqlDataAdapter(String, String) Constructor. Declaration public NpgsqlDataAdapter(string selectCommandText, string selectConnectionString) Parameters Type Name Description String selectCommandText String selectConnectionString Properties | Improve this Doc View Source DeleteCommand Delete command. Declaration public NpgsqlCommand DeleteCommand { get; set; } Property Value Type Description NpgsqlCommand | Improve this Doc View Source InsertCommand Insert command. Declaration public NpgsqlCommand InsertCommand { get; set; } Property Value Type Description NpgsqlCommand | Improve this Doc View Source SelectCommand Select command. Declaration public NpgsqlCommand SelectCommand { get; set; } Property Value Type Description NpgsqlCommand | Improve this Doc View Source UpdateCommand Update command. Declaration public NpgsqlCommand UpdateCommand { get; set; } Property Value Type Description NpgsqlCommand Methods | Improve this Doc View Source CreateRowUpdatedEvent(DataRow, Nullable<IDbCommand>, StatementType, DataTableMapping) Create row updated event. Declaration protected override RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand? command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description DataRow dataRow Nullable < IDbCommand > command StatementType statementType DataTableMapping tableMapping Returns Type Description RowUpdatedEventArgs | Improve this Doc View Source CreateRowUpdatingEvent(DataRow, Nullable<IDbCommand>, StatementType, DataTableMapping) Create row updating event. Declaration protected override RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand? command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description DataRow dataRow Nullable < IDbCommand > command StatementType statementType DataTableMapping tableMapping Returns Type Description RowUpdatingEventArgs | Improve this Doc View Source OnRowUpdated(RowUpdatedEventArgs) Raise the RowUpdated event. Declaration protected override void OnRowUpdated(RowUpdatedEventArgs value) Parameters Type Name Description RowUpdatedEventArgs value | Improve this Doc View Source OnRowUpdating(RowUpdatingEventArgs) Raise the RowUpdating event. Declaration protected override void OnRowUpdating(RowUpdatingEventArgs value) Parameters Type Name Description RowUpdatingEventArgs value Events | Improve this Doc View Source RowUpdated Row updated event. Declaration public event NpgsqlRowUpdatedEventHandler RowUpdated Event Type Type Description NpgsqlRowUpdatedEventHandler | Improve this Doc View Source RowUpdating Row updating event. Declaration public event NpgsqlRowUpdatingEventHandler RowUpdating Event Type Type Description NpgsqlRowUpdatingEventHandler"
  },
  "doc/api/Npgsql.NpgsqlDataReader.html": {
    "href": "doc/api/Npgsql.NpgsqlDataReader.html",
    "title": "Class NpgsqlDataReader | Npgsql Documentation",
    "keywords": "Class NpgsqlDataReader Reads a forward-only stream of rows from a data source. Inheritance Object NpgsqlDataReader Implements IDbColumnSchemaGenerator Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlDataReader : DbDataReader Properties | Improve this Doc View Source Depth Gets a value indicating the depth of nesting for the current row. Always returns zero. Declaration public override int Depth { get; } Property Value Type Description Int32 | Improve this Doc View Source FieldCount Gets the number of columns in the current row. Declaration public override int FieldCount { get; } Property Value Type Description Int32 | Improve this Doc View Source HasRows Gets a value that indicates whether this DbDataReader contains one or more rows. Declaration public override bool HasRows { get; } Property Value Type Description Boolean | Improve this Doc View Source IsClosed Gets a value indicating whether the data reader is closed. Declaration public override bool IsClosed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOnRow Indicates whether the reader is currently positioned on a row, i.e. whether reading a column is possible. This property is different from HasRows in that HasRows will return true even if attempting to read a column will fail, e.g. before Read() has been called Declaration public bool IsOnRow { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Gets the value of the specified column as an instance of . Declaration public override object this[int ordinal] { get; } Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Property Value Type Description Object The value of the specified column. | Improve this Doc View Source Item[String] Gets the value of the specified column as an instance of . Declaration public override object this[string name] { get; } Parameters Type Name Description String name The name of the column. Property Value Type Description Object The value of the specified column. | Improve this Doc View Source RecordsAffected Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. Declaration public override int RecordsAffected { get; } Property Value Type Description Int32 The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed. | Improve this Doc View Source Rows Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. Declaration public ulong Rows { get; } Property Value Type Description UInt64 The number of rows changed, inserted, or deleted. 0 for SELECT statements, if no rows were affected or the statement failed. | Improve this Doc View Source Statements Returns details about each statement that this reader will or has executed. Declaration public IReadOnlyList<NpgsqlBatchCommand> Statements { get; } Property Value Type Description IReadOnlyList < NpgsqlBatchCommand > Remarks Note that some fields (i.e. rows and oid) are only populated as the reader traverses the result. For commands with multiple queries, this exposes the number of rows affected on a statement-by-statement basis, unlike RecordsAffected which exposes an aggregation across all statements. Methods | Improve this Doc View Source Close() Closes the NpgsqlDataReader reader, allowing a new command to be executed. Declaration public override void Close() | Improve this Doc View Source CloseAsync() Closes the NpgsqlDataReader reader, allowing a new command to be executed. Declaration public override Task CloseAsync() Returns Type Description Task | Improve this Doc View Source Dispose(Boolean) Releases the resources used by the NpgsqlDataReader . Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source DisposeAsync() Releases the resources used by the NpgsqlDataReader . Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source GetBoolean(Int32) Gets the value of the specified column as a Boolean. Declaration public override bool GetBoolean(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Boolean The value of the specified column. | Improve this Doc View Source GetByte(Int32) Gets the value of the specified column as a byte. Declaration public override byte GetByte(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Byte The value of the specified column. | Improve this Doc View Source GetBytes(Int32, Int64, Byte[], Int32, Int32) Reads a stream of bytes from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Int64 dataOffset The index within the row from which to begin the read operation. Byte [] buffer The buffer into which to copy the data. Int32 bufferOffset The index with the buffer to which the data will be copied. Int32 length The maximum number of characters to read. Returns Type Description Int64 The actual number of bytes read. | Improve this Doc View Source GetChar(Int32) Gets the value of the specified column as a single character. Declaration public override char GetChar(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Char The value of the specified column. | Improve this Doc View Source GetChars(Int32, Int64, Char[], Int32, Int32) Reads a stream of characters from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Int64 dataOffset The index within the row from which to begin the read operation. Char [] buffer The buffer into which to copy the data. Int32 bufferOffset The index with the buffer to which the data will be copied. Int32 length The maximum number of characters to read. Returns Type Description Int64 The actual number of characters read. | Improve this Doc View Source GetColumnSchema() Returns schema information for the columns in the current resultset. Declaration public ReadOnlyCollection<NpgsqlDbColumn> GetColumnSchema() Returns Type Description ReadOnlyCollection < NpgsqlDbColumn > | Improve this Doc View Source GetColumnSchemaAsync(CancellationToken) Asynchronously returns schema information for the columns in the current resultset. Declaration public Task<ReadOnlyCollection<NpgsqlDbColumn>> GetColumnSchemaAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < ReadOnlyCollection < NpgsqlDbColumn >> | Improve this Doc View Source GetData(Int32) Returns a nested data reader for the requested column. The column type must be a record or a to Npgsql known composite type, or an array thereof. Currently only supported in non-sequential mode. Declaration public NpgsqlNestedDataReader GetData(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description NpgsqlNestedDataReader A data reader. | Improve this Doc View Source GetDataTypeName(Int32) Gets the data type information for the specified field. This is the PostgreSQL type name (e.g. double precision), not the .NET type (see GetFieldType(Int32) for that). Declaration public override string GetDataTypeName(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column index. Returns Type Description String | Improve this Doc View Source GetDataTypeOID(Int32) Gets the OID for the PostgreSQL type for the specified field, as it appears in the pg_type table. Declaration public uint GetDataTypeOID(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column index. Returns Type Description UInt32 Remarks This is a PostgreSQL-internal value that should not be relied upon and should only be used for debugging purposes. | Improve this Doc View Source GetDateTime(Int32) Gets the value of the specified column as a object. Declaration public override DateTime GetDateTime(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description DateTime The value of the specified column. | Improve this Doc View Source GetDbDataReader(Int32) Declaration protected override DbDataReader GetDbDataReader(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description DbDataReader | Improve this Doc View Source GetDecimal(Int32) Gets the value of the specified column as a object. Declaration public override decimal GetDecimal(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Decimal The value of the specified column. | Improve this Doc View Source GetDouble(Int32) Gets the value of the specified column as a double-precision floating point number. Declaration public override double GetDouble(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Double The value of the specified column. | Improve this Doc View Source GetEnumerator() Returns an that can be used to iterate through the rows in the data reader. Declaration public override IEnumerator GetEnumerator() Returns Type Description IEnumerator An that can be used to iterate through the rows in the data reader. | Improve this Doc View Source GetFieldType(Int32) Gets the data type of the specified column. Declaration public override Type GetFieldType(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Type The data type of the specified column. | Improve this Doc View Source GetFieldValue<T>(Int32) Synchronously gets the value of the specified column as a type. Declaration public override T GetFieldValue<T>(int ordinal) Parameters Type Name Description Int32 ordinal The column to be retrieved. Returns Type Description T The column to be retrieved. Type Parameters Name Description T Synchronously gets the value of the specified column as a type. | Improve this Doc View Source GetFieldValueAsync<T>(Int32, CancellationToken) Asynchronously gets the value of the specified column as a type. Declaration public override Task<T> GetFieldValueAsync<T>(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description Int32 ordinal The type of the value to be returned. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task <T> Type Parameters Name Description T The type of the value to be returned. | Improve this Doc View Source GetFloat(Int32) Gets the value of the specified column as a single-precision floating point number. Declaration public override float GetFloat(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Single The value of the specified column. | Improve this Doc View Source GetGuid(Int32) Gets the value of the specified column as a globally-unique identifier (GUID). Declaration public override Guid GetGuid(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Guid The value of the specified column. | Improve this Doc View Source GetInt16(Int32) Gets the value of the specified column as a 16-bit signed integer. Declaration public override short GetInt16(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Int16 The value of the specified column. | Improve this Doc View Source GetInt32(Int32) Gets the value of the specified column as a 32-bit signed integer. Declaration public override int GetInt32(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Int32 The value of the specified column. | Improve this Doc View Source GetInt64(Int32) Gets the value of the specified column as a 64-bit signed integer. Declaration public override long GetInt64(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Int64 The value of the specified column. | Improve this Doc View Source GetName(Int32) Gets the name of the column, given the zero-based column ordinal. Declaration public override string GetName(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description String The name of the specified column. | Improve this Doc View Source GetOrdinal(String) Gets the column ordinal given the name of the column. Declaration public override int GetOrdinal(string name) Parameters Type Name Description String name The name of the column. Returns Type Description Int32 The zero-based column ordinal. | Improve this Doc View Source GetPostgresType(Int32) Gets a representation of the PostgreSQL data type for the specified field. The returned representation can be used to access various information about the field. Declaration public PostgresType GetPostgresType(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column index. Returns Type Description PostgresType | Improve this Doc View Source GetProviderSpecificFieldType(Int32) Returns the provider-specific field type of the specified column. Declaration public override Type GetProviderSpecificFieldType(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Type The Type object that describes the data type of the specified column. | Improve this Doc View Source GetProviderSpecificValue(Int32) Gets the value of the specified column as an instance of . Declaration public override object GetProviderSpecificValue(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Object The value of the specified column. | Improve this Doc View Source GetProviderSpecificValues(Object[]) Gets all provider-specific attribute columns in the collection for the current row. Declaration public override int GetProviderSpecificValues(object[] values) Parameters Type Name Description Object [] values An array of Object into which to copy the attribute columns. Returns Type Description Int32 The number of instances of in the array. | Improve this Doc View Source GetSchemaTable() Returns a System.Data.DataTable that describes the column metadata of the DataReader. Declaration public override DataTable? GetSchemaTable() Returns Type Description Nullable < DataTable > | Improve this Doc View Source GetSchemaTableAsync(CancellationToken) Asynchronously returns a System.Data.DataTable that describes the column metadata of the DataReader. Declaration public Task<DataTable?> GetSchemaTableAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Nullable < DataTable >> | Improve this Doc View Source GetStream(Int32) Retrieves data as a . Declaration public override Stream GetStream(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Stream The returned object. | Improve this Doc View Source GetStreamAsync(Int32, CancellationToken) Retrieves data as a . Declaration public Task<Stream> GetStreamAsync(int ordinal, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Stream > The returned object. | Improve this Doc View Source GetString(Int32) Gets the value of the specified column as an instance of . Declaration public override string GetString(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description String The value of the specified column. | Improve this Doc View Source GetTextReader(Int32) Retrieves data as a . Declaration public override TextReader GetTextReader(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description TextReader The returned object. | Improve this Doc View Source GetTextReaderAsync(Int32, CancellationToken) Retrieves data as a . Declaration public Task<TextReader> GetTextReaderAsync(int ordinal, CancellationToken cancellationToken = null) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < TextReader > The returned object. | Improve this Doc View Source GetTimeSpan(Int32) Gets the value of the specified column as a TimeSpan, Declaration public TimeSpan GetTimeSpan(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description TimeSpan The value of the specified column. Remarks PostgreSQL's interval type has has a resolution of 1 microsecond and ranges from -178000000 to 178000000 years, while .NET's TimeSpan has a resolution of 100 nanoseconds and ranges from roughly -29247 to 29247 years. See https://www.postgresql.org/docs/current/static/datatype-datetime.html | Improve this Doc View Source GetValue(Int32) Gets the value of the specified column as an instance of . Declaration public override object GetValue(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Object The value of the specified column. | Improve this Doc View Source GetValues(Object[]) Populates an array of objects with the column values of the current row. Declaration public override int GetValues(object[] values) Parameters Type Name Description Object [] values An array of Object into which to copy the attribute columns. Returns Type Description Int32 The number of instances of in the array. | Improve this Doc View Source IsDBNull(Int32) Gets a value that indicates whether the column contains nonexistent or missing values. Declaration public override bool IsDBNull(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description Boolean true if the specified column is equivalent to ; otherwise false . | Improve this Doc View Source IsDBNullAsync(Int32, CancellationToken) An asynchronous version of IsDBNull(Int32) , which gets a value that indicates whether the column contains non-existent or missing values. The cancellationToken parameter is currently ignored. Declaration public override Task<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description Int32 ordinal The zero-based column to be retrieved. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Boolean > true if the specified column value is equivalent to otherwise false . | Improve this Doc View Source NextResult() Advances the reader to the next result when reading the results of a batch of statements. Declaration public override bool NextResult() Returns Type Description Boolean | Improve this Doc View Source NextResultAsync(CancellationToken) This is the asynchronous version of NextResult. Declaration public override Task<bool> NextResultAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Boolean > A task representing the asynchronous operation. | Improve this Doc View Source Read() Advances the reader to the next record in a result set. Declaration public override bool Read() Returns Type Description Boolean true if there are more rows; otherwise false . Remarks The default position of a data reader is before the first record. Therefore, you must call Read to begin accessing data. | Improve this Doc View Source ReadAsync(CancellationToken) This is the asynchronous version of Read() Declaration public override Task<bool> ReadAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Boolean > A task representing the asynchronous operation. Events | Improve this Doc View Source ReaderClosed Is raised whenever Close() is called. Declaration public event EventHandler? ReaderClosed Event Type Type Description Nullable < EventHandler > Implements IDbColumnSchemaGenerator"
  },
  "doc/api/Npgsql.NpgsqlDataSource.html": {
    "href": "doc/api/Npgsql.NpgsqlDataSource.html",
    "title": "Class NpgsqlDataSource | Npgsql Documentation",
    "keywords": "Class NpgsqlDataSource Inheritance Object DbDataSource NpgsqlDataSource NpgsqlMultiHostDataSource Implements IAsyncDisposable Inherited Members DbDataSource.OpenDbConnection() DbDataSource.OpenDbConnectionAsync(CancellationToken) DbDataSource.Dispose() DbDataSource.DisposeAsync() Namespace : Npgsql Assembly : Npgsql.dll Syntax public abstract class NpgsqlDataSource : DbDataSource Properties | Improve this Doc View Source ConnectionString Declaration public override string ConnectionString { get; } Property Value Type Description String Overrides DbDataSource.ConnectionString | Improve this Doc View Source Password Manually sets the password to be used the next time a physical connection is opened. Consider using UsePeriodicPasswordProvider(Nullable<Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<String>>>, TimeSpan, TimeSpan) instead. Declaration public string Password { set; } Property Value Type Description String Methods | Improve this Doc View Source Create(NpgsqlConnectionStringBuilder) Creates a new NpgsqlDataSource for the given connectionStringBuilder . Declaration public static NpgsqlDataSource Create(NpgsqlConnectionStringBuilder connectionStringBuilder) Parameters Type Name Description NpgsqlConnectionStringBuilder connectionStringBuilder Returns Type Description NpgsqlDataSource | Improve this Doc View Source Create(String) Creates a new NpgsqlDataSource for the given connectionString . Declaration public static NpgsqlDataSource Create(string connectionString) Parameters Type Name Description String connectionString Returns Type Description NpgsqlDataSource | Improve this Doc View Source CreateBatch() Creates a batch ready for use against this NpgsqlDataSource . Declaration public NpgsqlBatch CreateBatch() Returns Type Description NpgsqlBatch | Improve this Doc View Source CreateCommand(Nullable<String>) Creates a command ready for use against this NpgsqlDataSource . Declaration public NpgsqlCommand CreateCommand(string? commandText = null) Parameters Type Name Description Nullable < String > commandText An optional SQL for the command. Returns Type Description NpgsqlCommand | Improve this Doc View Source CreateConnection() Returns a new, unopened connection from this data source. Declaration public NpgsqlConnection CreateConnection() Returns Type Description NpgsqlConnection | Improve this Doc View Source CreateDbBatch() Declaration protected override DbBatch CreateDbBatch() Returns Type Description DbBatch Overrides DbDataSource.CreateDbBatch() | Improve this Doc View Source CreateDbCommand(Nullable<String>) Declaration protected override DbCommand CreateDbCommand(string? commandText = null) Parameters Type Name Description Nullable < String > commandText Returns Type Description DbCommand Overrides DbDataSource.CreateDbCommand(Nullable<String>) | Improve this Doc View Source CreateDbConnection() Declaration protected override DbConnection CreateDbConnection() Returns Type Description DbConnection Overrides DbDataSource.CreateDbConnection() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides DbDataSource.Dispose(Boolean) | Improve this Doc View Source DisposeAsyncCore() Declaration protected override ValueTask DisposeAsyncCore() Returns Type Description ValueTask Overrides DbDataSource.DisposeAsyncCore() | Improve this Doc View Source OpenConnection() Returns a new, opened connection from this data source. Declaration public NpgsqlConnection OpenConnection() Returns Type Description NpgsqlConnection | Improve this Doc View Source OpenConnectionAsync(CancellationToken) Returns a new, opened connection from this data source. Declaration public async ValueTask<NpgsqlConnection> OpenConnectionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description ValueTask < NpgsqlConnection > Implements IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlDataSourceBuilder.html": {
    "href": "doc/api/Npgsql.NpgsqlDataSourceBuilder.html",
    "title": "Class NpgsqlDataSourceBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlDataSourceBuilder Provides a simple API for configuring and creating an NpgsqlDataSource , from which database connections can be obtained. Inheritance Object NpgsqlDataSourceBuilder Implements INpgsqlTypeMapper Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlDataSourceBuilder : object, INpgsqlTypeMapper Constructors | Improve this Doc View Source NpgsqlDataSourceBuilder(Nullable<String>) Constructs a new NpgsqlDataSourceBuilder , optionally starting out from the given connectionString . Declaration public NpgsqlDataSourceBuilder(string? connectionString = null) Parameters Type Name Description Nullable < String > connectionString Properties | Improve this Doc View Source ConnectionString Returns the connection string, as currently configured on the builder. Declaration public string ConnectionString { get; } Property Value Type Description String | Improve this Doc View Source ConnectionStringBuilder A connection string builder that can be used to configured the connection string on the builder. Declaration public NpgsqlConnectionStringBuilder ConnectionStringBuilder { get; } Property Value Type Description NpgsqlConnectionStringBuilder | Improve this Doc View Source DefaultNameTranslator The default name translator to convert CLR type names and member names. Defaults to NpgsqlSnakeCaseNameTranslator . Declaration public INpgsqlNameTranslator DefaultNameTranslator { get; set; } Property Value Type Description INpgsqlNameTranslator Methods | Improve this Doc View Source AddTypeResolverFactory(TypeHandlerResolverFactory) Adds a type resolver factory, which produces resolvers that can add or modify support for PostgreSQL types. Typically used by plugins. Declaration public void AddTypeResolverFactory(TypeHandlerResolverFactory resolverFactory) Parameters Type Name Description TypeHandlerResolverFactory resolverFactory The type resolver factory to be added. | Improve this Doc View Source Build() Builds and returns an NpgsqlDataSource which is ready for use. Declaration public NpgsqlDataSource Build() Returns Type Description NpgsqlDataSource | Improve this Doc View Source BuildMultiHost() Builds and returns a NpgsqlMultiHostDataSource which is ready for use for load-balancing and failover scenarios. Declaration public NpgsqlMultiHostDataSource BuildMultiHost() Returns Type Description NpgsqlMultiHostDataSource | Improve this Doc View Source EnableParameterLogging(Boolean) Enables parameters to be included in logging. This includes potentially sensitive information from data sent to PostgreSQL. You should only enable this flag in development, or if you have the appropriate security measures in place based on the sensitivity of this data. Declaration public NpgsqlDataSourceBuilder EnableParameterLogging(bool parameterLoggingEnabled = true) Parameters Type Name Description Boolean parameterLoggingEnabled If true , then sensitive data is logged. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source MapComposite(Type, Nullable<String>, INpgsqlNameTranslator) Maps a CLR type to a composite type. Declaration public INpgsqlTypeMapper MapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be mapped. Nullable < String > pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description INpgsqlTypeMapper Remarks Maps CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to DefaultNameTranslator . If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Improve this Doc View Source MapComposite<T>(Nullable<String>, INpgsqlNameTranslator) Maps a CLR type to a PostgreSQL composite type. Declaration public INpgsqlTypeMapper MapComposite<T>(string? pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description Nullable < String > pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description INpgsqlTypeMapper Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your members to manually specify a PostgreSQL name. If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Improve this Doc View Source MapEnum<TEnum>(Nullable<String>, INpgsqlNameTranslator) Maps a CLR enum to a PostgreSQL enum type. Declaration public INpgsqlTypeMapper MapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description Nullable < String > pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description INpgsqlTypeMapper Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. | Improve this Doc View Source UnmapComposite(Type, Nullable<String>, INpgsqlNameTranslator) Removes an existing composite mapping. Declaration public bool UnmapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be unmapped. Nullable < String > pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description Boolean | Improve this Doc View Source UnmapComposite<T>(Nullable<String>, INpgsqlNameTranslator) Removes an existing composite mapping. Declaration public bool UnmapComposite<T>(string? pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description Nullable < String > pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source UnmapEnum<TEnum>(Nullable<String>, INpgsqlNameTranslator) Removes an existing enum mapping. Declaration public bool UnmapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description Nullable < String > pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description Boolean Type Parameters Name Description TEnum | Improve this Doc View Source UseClientCertificate(Nullable<X509Certificate>) Specifies an SSL/TLS certificate which Npgsql will send to PostgreSQL for certificate-based authentication. Declaration public NpgsqlDataSourceBuilder UseClientCertificate(X509Certificate? clientCertificate) Parameters Type Name Description Nullable < X509Certificate > clientCertificate The client certificate to be sent to PostgreSQL when opening a connection. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseClientCertificates(Nullable<X509CertificateCollection>) Specifies a collection of SSL/TLS certificates which Npgsql will send to PostgreSQL for certificate-based authentication. Declaration public NpgsqlDataSourceBuilder UseClientCertificates(X509CertificateCollection? clientCertificates) Parameters Type Name Description Nullable < X509CertificateCollection > clientCertificates The client certificate collection to be sent to PostgreSQL when opening a connection. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseClientCertificatesCallback(Nullable<Action<X509CertificateCollection>>) Specifies a callback to modify the collection of SSL/TLS client certificates which Npgsql will send to PostgreSQL for certificate-based authentication. This is an advanced API, consider using UseClientCertificate(Nullable<X509Certificate>) or UseClientCertificates(Nullable<X509CertificateCollection>) instead. Declaration public NpgsqlDataSourceBuilder UseClientCertificatesCallback(Action<X509CertificateCollection>? clientCertificatesCallback) Parameters Type Name Description Nullable < Action < X509CertificateCollection >> clientCertificatesCallback The callback to modify the client certificate collection. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks The callback is invoked every time a physical connection is opened, and is therefore suitable for rotating short-lived client certificates. Simply make sure the certificate collection argument has the up-to-date certificate(s). The callback's collection argument already includes any client certificates specified via the connection string or environment variables. | Improve this Doc View Source UseLoggerFactory(Nullable<ILoggerFactory>) Sets the that will be used for logging. Declaration public NpgsqlDataSourceBuilder UseLoggerFactory(ILoggerFactory? loggerFactory) Parameters Type Name Description Nullable < ILoggerFactory > loggerFactory The logger factory to be used. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UsePeriodicPasswordProvider(Nullable<Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<String>>>, TimeSpan, TimeSpan) Configures a periodic password provider, which is automatically called by the data source at some regular interval. This is the recommended way to fetch a rotating access token. Declaration public NpgsqlDataSourceBuilder UsePeriodicPasswordProvider(Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>? passwordProvider, TimeSpan successRefreshInterval, TimeSpan failureRefreshInterval) Parameters Type Name Description Nullable < Func < NpgsqlConnectionStringBuilder , CancellationToken , ValueTask < String >>> passwordProvider A callback which returns the password to be sent to PostgreSQL. TimeSpan successRefreshInterval How long to cache the password before re-invoking the callback. TimeSpan failureRefreshInterval If a password refresh attempt fails, it will be re-attempted with this interval. This should typically be much lower than successRefreshInterval . Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks The provided callback is invoked in a timer, and not when opening connections. It therefore doesn't affect opening time. The provided cancellation token is only triggered when the entire data source is disposed. If you'd like to apply a timeout to the token fetching, do so within the provided callback. | Improve this Doc View Source UsePhysicalConnectionInitializer(Nullable<Action<NpgsqlConnection>>, Nullable<Func<NpgsqlConnection, Task>>) Register a connection initializer, which allows executing arbitrary commands when a physical database connection is first opened. Declaration public NpgsqlDataSourceBuilder UsePhysicalConnectionInitializer(Action<NpgsqlConnection>? connectionInitializer, Func<NpgsqlConnection, Task>? connectionInitializerAsync) Parameters Type Name Description Nullable < Action < NpgsqlConnection >> connectionInitializer A synchronous connection initialization lambda, which will be called from Open() when a new physical connection is opened. Nullable < Func < NpgsqlConnection , Task >> connectionInitializerAsync An asynchronous connection initialization lambda, which will be called from OpenAsync(CancellationToken) when a new physical connection is opened. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks If an initializer is registered, both sync and async versions must be provided. If you do not use sync APIs in your code, simply throw , which would also catch accidental cases of sync opening. | Improve this Doc View Source UseUserCertificateValidationCallback(RemoteCertificateValidationCallback) When using SSL/TLS, this is a callback that allows customizing how the PostgreSQL-provided certificate is verified. This is an advanced API, consider using VerifyFull or VerifyCA instead. Declaration public NpgsqlDataSourceBuilder UseUserCertificateValidationCallback(RemoteCertificateValidationCallback userCertificateValidationCallback) Parameters Type Name Description RemoteCertificateValidationCallback userCertificateValidationCallback The callback containing custom callback verification logic. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks Cannot be used in conjunction with Disable , VerifyCA or VerifyFull . See https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx . Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeMapper.Reset() Declaration void INpgsqlTypeMapper.Reset() Implements INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.NpgsqlEventId.html": {
    "href": "doc/api/Npgsql.NpgsqlEventId.html",
    "title": "Class NpgsqlEventId | Npgsql Documentation",
    "keywords": "Class NpgsqlEventId Inheritance Object NpgsqlEventId Namespace : Npgsql Assembly : Npgsql.dll Syntax public static class NpgsqlEventId : object Fields | Improve this Doc View Source AutoPreparingStatement Declaration public const int AutoPreparingStatement = null Field Value Type Description Int32 | Improve this Doc View Source BreakingConnection Declaration public const int BreakingConnection = null Field Value Type Description Int32 | Improve this Doc View Source CancellingCommand Declaration public const int CancellingCommand = null Field Value Type Description Int32 | Improve this Doc View Source CaughtUserExceptionInNoticeEventHandler Declaration public const int CaughtUserExceptionInNoticeEventHandler = null Field Value Type Description Int32 | Improve this Doc View Source CaughtUserExceptionInNotificationEventHandler Declaration public const int CaughtUserExceptionInNotificationEventHandler = null Field Value Type Description Int32 | Improve this Doc View Source CleaningUpResourceManager Declaration public const int CleaningUpResourceManager = null Field Value Type Description Int32 | Improve this Doc View Source ClosedConnection Declaration public const int ClosedConnection = null Field Value Type Description Int32 | Improve this Doc View Source ClosedPhysicalConnection Declaration public const int ClosedPhysicalConnection = null Field Value Type Description Int32 | Improve this Doc View Source ClosingConnection Declaration public const int ClosingConnection = null Field Value Type Description Int32 | Improve this Doc View Source ClosingPhysicalConnection Declaration public const int ClosingPhysicalConnection = null Field Value Type Description Int32 | Improve this Doc View Source CommandExecutionCompleted Declaration public const int CommandExecutionCompleted = null Field Value Type Description Int32 | Improve this Doc View Source CommandPreparedExplicitly Declaration public const int CommandPreparedExplicitly = null Field Value Type Description Int32 | Improve this Doc View Source CommittedTransaction Declaration public const int CommittedTransaction = null Field Value Type Description Int32 | Improve this Doc View Source CommittingSinglePhaseTransaction Declaration public const int CommittingSinglePhaseTransaction = null Field Value Type Description Int32 | Improve this Doc View Source CommittingTwoPhaseTransaction Declaration public const int CommittingTwoPhaseTransaction = null Field Value Type Description Int32 | Improve this Doc View Source CompletedKeepalive Declaration public const int CompletedKeepalive = null Field Value Type Description Int32 | Improve this Doc View Source ConnectionExceededMaximumLifetime Declaration public const int ConnectionExceededMaximumLifetime = null Field Value Type Description Int32 | Improve this Doc View Source ConnectionInUseWhenRollingBack Declaration public const int ConnectionInUseWhenRollingBack = null Field Value Type Description Int32 | Improve this Doc View Source CopyOperationCancelled Declaration public const int CopyOperationCancelled = null Field Value Type Description Int32 | Improve this Doc View Source CopyOperationCompleted Declaration public const int CopyOperationCompleted = null Field Value Type Description Int32 | Improve this Doc View Source CreatingReplicationSlot Declaration public const int CreatingReplicationSlot = null Field Value Type Description Int32 | Improve this Doc View Source CreatingSavepoint Declaration public const int CreatingSavepoint = null Field Value Type Description Int32 | Improve this Doc View Source DerivingParameters Declaration public const int DerivingParameters = null Field Value Type Description Int32 | Improve this Doc View Source DroppingReplicationSlot Declaration public const int DroppingReplicationSlot = null Field Value Type Description Int32 | Improve this Doc View Source EnlistedVolatileResourceManager Declaration public const int EnlistedVolatileResourceManager = null Field Value Type Description Int32 | Improve this Doc View Source ExceptionDuringTransactionDispose Declaration public const int ExceptionDuringTransactionDispose = null Field Value Type Description Int32 | Improve this Doc View Source ExceptionWhenClosingPhysicalConnection Declaration public const int ExceptionWhenClosingPhysicalConnection = null Field Value Type Description Int32 | Improve this Doc View Source ExceptionWhenDisposingCopyOperation Declaration public const int ExceptionWhenDisposingCopyOperation = null Field Value Type Description Int32 | Improve this Doc View Source ExceptionWhenOpeningConnectionForMultiplexing Declaration public const int ExceptionWhenOpeningConnectionForMultiplexing = null Field Value Type Description Int32 | Improve this Doc View Source ExceptionWhenWritingMultiplexedCommands Declaration public const int ExceptionWhenWritingMultiplexedCommands = null Field Value Type Description Int32 | Improve this Doc View Source ExecutingCommand Declaration public const int ExecutingCommand = null Field Value Type Description Int32 | Improve this Doc View Source ExecutingInternalCommand Declaration public const int ExecutingInternalCommand = null Field Value Type Description Int32 | Improve this Doc View Source ExecutingReplicationCommand Declaration public const int ExecutingReplicationCommand = null Field Value Type Description Int32 | Improve this Doc View Source KeepaliveFailed Declaration public const int KeepaliveFailed = null Field Value Type Description Int32 | Improve this Doc View Source OpenedConnection Declaration public const int OpenedConnection = null Field Value Type Description Int32 | Improve this Doc View Source OpenedPhysicalConnection Declaration public const int OpenedPhysicalConnection = null Field Value Type Description Int32 | Improve this Doc View Source OpeningConnection Declaration public const int OpeningConnection = null Field Value Type Description Int32 | Improve this Doc View Source OpeningPhysicalConnection Declaration public const int OpeningPhysicalConnection = null Field Value Type Description Int32 | Improve this Doc View Source PreparingCommandExplicitly Declaration public const int PreparingCommandExplicitly = null Field Value Type Description Int32 | Improve this Doc View Source PreparingTwoPhaseTransaction Declaration public const int PreparingTwoPhaseTransaction = null Field Value Type Description Int32 | Improve this Doc View Source ReceivedNotice Declaration public const int ReceivedNotice = null Field Value Type Description Int32 | Improve this Doc View Source ReceivedReplicationPrimaryKeepalive Declaration public const int ReceivedReplicationPrimaryKeepalive = null Field Value Type Description Int32 | Improve this Doc View Source ReleasedSavepoint Declaration public const int ReleasedSavepoint = null Field Value Type Description Int32 | Improve this Doc View Source ReplicationFeedbackMessageSendingFailed Declaration public const int ReplicationFeedbackMessageSendingFailed = null Field Value Type Description Int32 | Improve this Doc View Source RolledBackToSavepoint Declaration public const int RolledBackToSavepoint = null Field Value Type Description Int32 | Improve this Doc View Source RolledBackTransaction Declaration public const int RolledBackTransaction = null Field Value Type Description Int32 | Improve this Doc View Source RollingBackSinglePhaseTransaction Declaration public const int RollingBackSinglePhaseTransaction = null Field Value Type Description Int32 | Improve this Doc View Source RollingBackTwoPhaseTransaction Declaration public const int RollingBackTwoPhaseTransaction = null Field Value Type Description Int32 | Improve this Doc View Source SendingKeepalive Declaration public const int SendingKeepalive = null Field Value Type Description Int32 | Improve this Doc View Source SendingReplicationStandbyStatusUpdate Declaration public const int SendingReplicationStandbyStatusUpdate = null Field Value Type Description Int32 | Improve this Doc View Source SentReplicationFeedbackMessage Declaration public const int SentReplicationFeedbackMessage = null Field Value Type Description Int32 | Improve this Doc View Source SinglePhaseTransactionRollbackFailed Declaration public const int SinglePhaseTransactionRollbackFailed = null Field Value Type Description Int32 | Improve this Doc View Source StartedTransaction Declaration public const int StartedTransaction = null Field Value Type Description Int32 | Improve this Doc View Source StartingBinaryExport Declaration public const int StartingBinaryExport = null Field Value Type Description Int32 | Improve this Doc View Source StartingBinaryImport Declaration public const int StartingBinaryImport = null Field Value Type Description Int32 | Improve this Doc View Source StartingLogicalReplication Declaration public const int StartingLogicalReplication = null Field Value Type Description Int32 | Improve this Doc View Source StartingPhysicalReplication Declaration public const int StartingPhysicalReplication = null Field Value Type Description Int32 | Improve this Doc View Source StartingRawCopy Declaration public const int StartingRawCopy = null Field Value Type Description Int32 | Improve this Doc View Source StartingTextExport Declaration public const int StartingTextExport = null Field Value Type Description Int32 | Improve this Doc View Source StartingTextImport Declaration public const int StartingTextImport = null Field Value Type Description Int32 | Improve this Doc View Source StartingWait Declaration public const int StartingWait = null Field Value Type Description Int32 | Improve this Doc View Source TwoPhaseTransactionCommitFailed Declaration public const int TwoPhaseTransactionCommitFailed = null Field Value Type Description Int32 | Improve this Doc View Source TwoPhaseTransactionInDoubt Declaration public const int TwoPhaseTransactionInDoubt = null Field Value Type Description Int32 | Improve this Doc View Source TwoPhaseTransactionRollbackFailed Declaration public const int TwoPhaseTransactionRollbackFailed = null Field Value Type Description Int32 | Improve this Doc View Source UnpreparingCommand Declaration public const int UnpreparingCommand = null Field Value Type Description Int32"
  },
  "doc/api/Npgsql.NpgsqlException.html": {
    "href": "doc/api/Npgsql.NpgsqlException.html",
    "title": "Class NpgsqlException | Npgsql Documentation",
    "keywords": "Class NpgsqlException The exception that is thrown when server-related issues occur. Inheritance Object NpgsqlException NpgsqlOperationInProgressException PostgresException Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlException : DbException Remarks PostgreSQL errors (e.g. query SQL issues, constraint violations) are raised via PostgresException which is a subclass of this class. Purely Npgsql-related issues which aren't related to the server will be raised via the standard CLR exceptions (e.g. ArgumentException). Constructors | Improve this Doc View Source NpgsqlException() Initializes a new instance of the NpgsqlException class. Declaration public NpgsqlException() | Improve this Doc View Source NpgsqlException(SerializationInfo, StreamingContext) Initializes a new instance of the NpgsqlException class with serialized data. Declaration protected NpgsqlException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source NpgsqlException(Nullable<String>) Initializes a new instance of the NpgsqlException class with a specified error message. Declaration public NpgsqlException(string? message) Parameters Type Name Description Nullable < String > message The message that describes the error. | Improve this Doc View Source NpgsqlException(Nullable<String>, Nullable<Exception>) Initializes a new instance of the NpgsqlException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NpgsqlException(string? message, Exception? innerException) Parameters Type Name Description Nullable < String > message The error message that explains the reason for the exception. Nullable < Exception > innerException The exception that is the cause of the current exception, or a null reference ( Nothing in Visual Basic) if no inner exception is specified. Properties | Improve this Doc View Source BatchCommand If the exception was thrown as a result of executing a DbBatch , references the DbBatchCommand within the batch which triggered the exception. Otherwise null . Declaration public NpgsqlBatchCommand BatchCommand { get; set; } Property Value Type Description NpgsqlBatchCommand | Improve this Doc View Source IsTransient Specifies whether the exception is considered transient, that is, whether retrying the operation could succeed (e.g. a network error or a timeout). Declaration public virtual bool IsTransient { get; } Property Value Type Description Boolean"
  },
  "doc/api/Npgsql.NpgsqlFactory.html": {
    "href": "doc/api/Npgsql.NpgsqlFactory.html",
    "title": "Class NpgsqlFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlFactory A factory to create instances of various Npgsql objects. Inheritance Object NpgsqlFactory Implements IServiceProvider Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlFactory : DbProviderFactory Fields | Improve this Doc View Source Instance Gets an instance of the NpgsqlFactory . This can be used to retrieve strongly typed data objects. Declaration public static readonly NpgsqlFactory Instance Field Value Type Description NpgsqlFactory Properties | Improve this Doc View Source CanCreateCommandBuilder Specifies whether the specific supports the class. Declaration public override bool CanCreateCommandBuilder { get; } Property Value Type Description Boolean | Improve this Doc View Source CanCreateDataAdapter Specifies whether the specific supports the class. Declaration public override bool CanCreateDataAdapter { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source CreateCommand() Returns a strongly typed instance. Declaration public override DbCommand CreateCommand() Returns Type Description DbCommand | Improve this Doc View Source CreateCommandBuilder() Returns a strongly typed instance. Declaration public override DbCommandBuilder CreateCommandBuilder() Returns Type Description DbCommandBuilder | Improve this Doc View Source CreateConnection() Returns a strongly typed instance. Declaration public override DbConnection CreateConnection() Returns Type Description DbConnection | Improve this Doc View Source CreateConnectionStringBuilder() Returns a strongly typed instance. Declaration public override DbConnectionStringBuilder CreateConnectionStringBuilder() Returns Type Description DbConnectionStringBuilder | Improve this Doc View Source CreateDataAdapter() Returns a strongly typed instance. Declaration public override DbDataAdapter CreateDataAdapter() Returns Type Description DbDataAdapter | Improve this Doc View Source CreateParameter() Returns a strongly typed instance. Declaration public override DbParameter CreateParameter() Returns Type Description DbParameter | Improve this Doc View Source GetService(Type) Gets the service object of the specified type. Declaration public object? GetService(Type serviceType) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. Returns Type Description Nullable < Object > A service object of type serviceType, or null if there is no service object of type serviceType. Implements IServiceProvider"
  },
  "doc/api/Npgsql.NpgsqlGeoJSONExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlGeoJSONExtensions.html",
    "title": "Class NpgsqlGeoJSONExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlGeoJSONExtensions Extension allowing adding the GeoJSON plugin to an Npgsql type mapper. Inheritance Object NpgsqlGeoJSONExtensions Namespace : Npgsql Assembly : Npgsql.GeoJSON.dll Syntax public static class NpgsqlGeoJSONExtensions : object Methods | Improve this Doc View Source UseGeoJson(INpgsqlTypeMapper, GeoJSONOptions, Boolean) Sets up GeoJSON mappings for the PostGIS types. Declaration public static INpgsqlTypeMapper UseGeoJson(this INpgsqlTypeMapper mapper, GeoJSONOptions options = default(GeoJSONOptions), bool geographyAsDefault = false) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific) GeoJSONOptions options Options to use when constructing objects. Boolean geographyAsDefault Specifies that the geography type is used for mapping by default. Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.NpgsqlJsonNetExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlJsonNetExtensions.html",
    "title": "Class NpgsqlJsonNetExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonNetExtensions Extension allowing adding the Json.NET plugin to an Npgsql type mapper. Inheritance Object NpgsqlJsonNetExtensions Namespace : Npgsql Assembly : Npgsql.Json.NET.dll Syntax public static class NpgsqlJsonNetExtensions : object Methods | Improve this Doc View Source UseJsonNet(INpgsqlTypeMapper, Type[], Type[], Nullable<JsonSerializerSettings>) Sets up JSON.NET mappings for the PostgreSQL json and jsonb types. Declaration public static INpgsqlTypeMapper UseJsonNet(this INpgsqlTypeMapper mapper, Type[] jsonbClrTypes = null, Type[] jsonClrTypes = null, JsonSerializerSettings? settings = null) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific) Type [] jsonbClrTypes A list of CLR types to map to PostgreSQL jsonb (no need to specify NpgsqlDbType.Jsonb) Type [] jsonClrTypes A list of CLR types to map to PostgreSQL json (no need to specify NpgsqlDbType.Json) Nullable < JsonSerializerSettings > settings Optional settings to customize JSON serialization Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.NpgsqlLargeObjectManager.html": {
    "href": "doc/api/Npgsql.NpgsqlLargeObjectManager.html",
    "title": "Class NpgsqlLargeObjectManager | Npgsql Documentation",
    "keywords": "Class NpgsqlLargeObjectManager Large object manager. This class can be used to store very large files in a PostgreSQL database. Inheritance Object NpgsqlLargeObjectManager Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlLargeObjectManager : object Constructors | Improve this Doc View Source NpgsqlLargeObjectManager(NpgsqlConnection) Creates an NpgsqlLargeObjectManager for this connection. The connection must be opened to perform remote operations. Declaration public NpgsqlLargeObjectManager(NpgsqlConnection connection) Parameters Type Name Description NpgsqlConnection connection Properties | Improve this Doc View Source Has64BitSupport Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB. This property returns true whether the PostgreSQL version is >= 9.3. Declaration public bool Has64BitSupport { get; } Property Value Type Description Boolean | Improve this Doc View Source MaxTransferBlockSize The largest chunk size (in bytes) read and write operations will read/write each roundtrip to the network. Default 4 MB. Declaration public int MaxTransferBlockSize { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Create(UInt32) Create an empty large object in the database. If an oid is specified but is already in use, an PostgresException will be thrown. Declaration public uint Create(uint preferredOid = null) Parameters Type Name Description UInt32 preferredOid A preferred oid, or specify 0 if one should be automatically assigned Returns Type Description UInt32 The oid for the large object created Exceptions Type Condition PostgresException If an oid is already in use | Improve this Doc View Source CreateAsync(UInt32, CancellationToken) Create an empty large object in the database. If an oid is specified but is already in use, an PostgresException will be thrown. Declaration public Task<uint> CreateAsync(uint preferredOid, CancellationToken cancellationToken = null) Parameters Type Name Description UInt32 preferredOid A preferred oid, or specify 0 if one should be automatically assigned CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < UInt32 > The oid for the large object created Exceptions Type Condition PostgresException If an oid is already in use | Improve this Doc View Source ExportRemote(UInt32, String) Exports a large object stored in the database to a file on the backend. This requires superuser permissions. Declaration public void ExportRemote(uint oid, string path) Parameters Type Name Description UInt32 oid Oid of the object to export String path Path to write the file on the backend | Improve this Doc View Source ExportRemoteAsync(UInt32, String, CancellationToken) Exports a large object stored in the database to a file on the backend. This requires superuser permissions. Declaration public Task ExportRemoteAsync(uint oid, string path, CancellationToken cancellationToken = null) Parameters Type Name Description UInt32 oid Oid of the object to export String path Path to write the file on the backend CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source ImportRemote(String, UInt32) Imports a large object to be stored as a large object in the database from a file stored on the backend. This requires superuser permissions. Declaration public void ImportRemote(string path, uint oid = null) Parameters Type Name Description String path Path to read the file on the backend UInt32 oid A preferred oid, or specify 0 if one should be automatically assigned | Improve this Doc View Source ImportRemoteAsync(String, UInt32, CancellationToken) Imports a large object to be stored as a large object in the database from a file stored on the backend. This requires superuser permissions. Declaration public Task ImportRemoteAsync(string path, uint oid, CancellationToken cancellationToken = null) Parameters Type Name Description String path Path to read the file on the backend UInt32 oid A preferred oid, or specify 0 if one should be automatically assigned CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source OpenRead(UInt32) Opens a large object on the backend, returning a stream controlling this remote object. A transaction snapshot is taken by the backend when the object is opened with only read permissions. When reading from this object, the contents reflects the time when the snapshot was taken. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public NpgsqlLargeObjectStream OpenRead(uint oid) Parameters Type Name Description UInt32 oid Oid of the object Returns Type Description NpgsqlLargeObjectStream An NpgsqlLargeObjectStream | Improve this Doc View Source OpenReadAsync(UInt32, CancellationToken) Opens a large object on the backend, returning a stream controlling this remote object. A transaction snapshot is taken by the backend when the object is opened with only read permissions. When reading from this object, the contents reflects the time when the snapshot was taken. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public Task<NpgsqlLargeObjectStream> OpenReadAsync(uint oid, CancellationToken cancellationToken = null) Parameters Type Name Description UInt32 oid Oid of the object CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < NpgsqlLargeObjectStream > An NpgsqlLargeObjectStream | Improve this Doc View Source OpenReadWrite(UInt32) Opens a large object on the backend, returning a stream controlling this remote object. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public NpgsqlLargeObjectStream OpenReadWrite(uint oid) Parameters Type Name Description UInt32 oid Oid of the object Returns Type Description NpgsqlLargeObjectStream An NpgsqlLargeObjectStream | Improve this Doc View Source OpenReadWriteAsync(UInt32, CancellationToken) Opens a large object on the backend, returning a stream controlling this remote object. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public Task<NpgsqlLargeObjectStream> OpenReadWriteAsync(uint oid, CancellationToken cancellationToken = null) Parameters Type Name Description UInt32 oid Oid of the object CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < NpgsqlLargeObjectStream > An NpgsqlLargeObjectStream | Improve this Doc View Source Unlink(UInt32) Deletes a large object on the backend. Declaration public void Unlink(uint oid) Parameters Type Name Description UInt32 oid Oid of the object to delete | Improve this Doc View Source UnlinkAsync(UInt32, CancellationToken) Deletes a large object on the backend. Declaration public Task UnlinkAsync(uint oid, CancellationToken cancellationToken = null) Parameters Type Name Description UInt32 oid Oid of the object to delete CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task"
  },
  "doc/api/Npgsql.NpgsqlLargeObjectStream.html": {
    "href": "doc/api/Npgsql.NpgsqlLargeObjectStream.html",
    "title": "Class NpgsqlLargeObjectStream | Npgsql Documentation",
    "keywords": "Class NpgsqlLargeObjectStream An interface to remotely control the seekable stream for an opened large object on a PostgreSQL server. Note that the OpenRead/OpenReadWrite method as well as all operations performed on this stream must be wrapped inside a database transaction. Inheritance Object NpgsqlLargeObjectStream Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlLargeObjectStream : Stream Properties | Improve this Doc View Source CanRead CanRead always returns true, unless the stream has been closed. Declaration public override bool CanRead { get; } Property Value Type Description Boolean | Improve this Doc View Source CanSeek CanSeek always returns true, unless the stream has been closed. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean | Improve this Doc View Source CanTimeout CanTimeout always returns false. Declaration public override bool CanTimeout { get; } Property Value Type Description Boolean | Improve this Doc View Source CanWrite CanWrite returns true if the stream was opened with write permissions, and the stream has not been closed. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean | Improve this Doc View Source Has64BitSupport Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB. This property returns true whether the PostgreSQL version is >= 9.3. Declaration public bool Has64BitSupport { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again. Declaration public override long Length { get; } Property Value Type Description Int64 | Improve this Doc View Source Position Returns the current position in the stream. Getting the current position does not need a round-trip to the server, however setting the current position does. Declaration public override long Position { get; set; } Property Value Type Description Int64 Methods | Improve this Doc View Source Close() Releases resources at the backend allocated for this stream. Declaration public override void Close() | Improve this Doc View Source Dispose(Boolean) Releases resources at the backend allocated for this stream, iff disposing is true. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Whether to release resources allocated at the backend. | Improve this Doc View Source Flush() Does nothing. Declaration public override void Flush() | Improve this Doc View Source GetLengthAsync(CancellationToken) Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again. Declaration public Task<long> GetLengthAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Int64 > | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads count bytes from the large object. The only case when fewer bytes are read is when end of stream is reached. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The buffer where read data should be stored. Int32 offset The offset in the buffer where the first byte should be read. Int32 count The maximum number of bytes that should be read. Returns Type Description Int32 How many bytes actually read, or 0 if end of file was already reached. | Improve this Doc View Source ReadAsync(Byte[], Int32, Int32, CancellationToken) Reads count bytes from the large object. The only case when fewer bytes are read is when end of stream is reached. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer The buffer where read data should be stored. Int32 offset The offset in the buffer where the first byte should be read. Int32 count The maximum number of bytes that should be read. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Int32 > How many bytes actually read, or 0 if end of file was already reached. | Improve this Doc View Source Seek(Int64, SeekOrigin) Seeks in the stream to the specified position. This requires a round-trip to the backend. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description Int64 | Improve this Doc View Source SeekAsync(Int64, SeekOrigin, CancellationToken) Seeks in the stream to the specified position. This requires a round-trip to the backend. Declaration public Task<long> SeekAsync(long offset, SeekOrigin origin, CancellationToken cancellationToken = null) Parameters Type Name Description Int64 offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < Int64 > | Improve this Doc View Source SetLength(Int64) Truncates or enlarges the large object to the given size. If enlarging, the large object is extended with null bytes. For PostgreSQL versions earlier than 9.3, the value must fit in an Int32. Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value Number of bytes to either truncate or enlarge the large object. | Improve this Doc View Source SetLength(Int64, CancellationToken) Truncates or enlarges the large object to the given size. If enlarging, the large object is extended with null bytes. For PostgreSQL versions earlier than 9.3, the value must fit in an Int32. Declaration public Task SetLength(long value, CancellationToken cancellationToken) Parameters Type Name Description Int64 value Number of bytes to either truncate or enlarge the large object. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes count bytes to the large object. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The buffer to write data from. Int32 offset The offset in the buffer at which to begin copying bytes. Int32 count The number of bytes to write. | Improve this Doc View Source WriteAsync(Byte[], Int32, Int32, CancellationToken) Writes count bytes to the large object. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer The buffer to write data from. Int32 offset The offset in the buffer at which to begin copying bytes. Int32 count The number of bytes to write. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task"
  },
  "doc/api/Npgsql.NpgsqlLoggingConfiguration.html": {
    "href": "doc/api/Npgsql.NpgsqlLoggingConfiguration.html",
    "title": "Class NpgsqlLoggingConfiguration | Npgsql Documentation",
    "keywords": "Class NpgsqlLoggingConfiguration Configures Npgsql logging Inheritance Object NpgsqlLoggingConfiguration Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlLoggingConfiguration : object Methods | Improve this Doc View Source InitializeLogging(ILoggerFactory, Boolean) Globally initializes Npgsql logging to use the provided loggerFactory . Must be called before any Npgsql APIs are used. This is a legacy-only, backwards compatibility API. New applications should set the logger factory on NpgsqlDataSourceBuilder and use the resulting NpgsqlDataSource instead. Declaration public static void InitializeLogging(ILoggerFactory loggerFactory, bool parameterLoggingEnabled = false) Parameters Type Name Description ILoggerFactory loggerFactory The logging factory to use when logging from Npgsql. Boolean parameterLoggingEnabled Determines whether parameter contents will be logged alongside SQL statements - this may reveal sensitive information. Defaults to false ."
  },
  "doc/api/Npgsql.NpgsqlMultiHostDataSource.html": {
    "href": "doc/api/Npgsql.NpgsqlMultiHostDataSource.html",
    "title": "Class NpgsqlMultiHostDataSource | Npgsql Documentation",
    "keywords": "Class NpgsqlMultiHostDataSource An NpgsqlDataSource which manages connections for multiple hosts, is aware of their states (primary, secondary, offline...) and can perform failover and load balancing across them. Inheritance Object DbDataSource NpgsqlDataSource NpgsqlMultiHostDataSource Implements IAsyncDisposable Inherited Members NpgsqlDataSource.ConnectionString NpgsqlDataSource.CreateConnection() NpgsqlDataSource.OpenConnection() NpgsqlDataSource.OpenConnectionAsync(CancellationToken) NpgsqlDataSource.CreateDbConnection() NpgsqlDataSource.CreateDbCommand(Nullable<String>) NpgsqlDataSource.CreateDbBatch() NpgsqlDataSource.CreateCommand(Nullable<String>) NpgsqlDataSource.CreateBatch() NpgsqlDataSource.Create(String) NpgsqlDataSource.Create(NpgsqlConnectionStringBuilder) NpgsqlDataSource.Password NpgsqlDataSource.Dispose(Boolean) NpgsqlDataSource.DisposeAsyncCore() DbDataSource.OpenDbConnection() DbDataSource.OpenDbConnectionAsync(CancellationToken) DbDataSource.Dispose() DbDataSource.DisposeAsync() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlMultiHostDataSource : NpgsqlDataSource Remarks See https://www.npgsql.org/doc/failover-and-load-balancing.html . Methods | Improve this Doc View Source ClearDatabaseStates() Clears the database state (primary, secondary, offline...) for all data sources managed by this multi-host data source. Can be useful to make Npgsql retry a PostgreSQL instance which was previously detected to be offline. Declaration public void ClearDatabaseStates() | Improve this Doc View Source CreateConnection(TargetSessionAttributes) Returns a new, unopened connection from this data source. Declaration public NpgsqlConnection CreateConnection(TargetSessionAttributes targetSessionAttributes) Parameters Type Name Description TargetSessionAttributes targetSessionAttributes Specifies the server type (e.g. primary, standby). Returns Type Description NpgsqlConnection | Improve this Doc View Source OpenConnection(TargetSessionAttributes) Returns a new, opened connection from this data source. Declaration public NpgsqlConnection OpenConnection(TargetSessionAttributes targetSessionAttributes) Parameters Type Name Description TargetSessionAttributes targetSessionAttributes Specifies the server type (e.g. primary, standby). Returns Type Description NpgsqlConnection | Improve this Doc View Source OpenConnectionAsync(TargetSessionAttributes, CancellationToken) Returns a new, opened connection from this data source. Declaration public async ValueTask<NpgsqlConnection> OpenConnectionAsync(TargetSessionAttributes targetSessionAttributes, CancellationToken cancellationToken = null) Parameters Type Name Description TargetSessionAttributes targetSessionAttributes Specifies the server type (e.g. primary, standby). CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description ValueTask < NpgsqlConnection > | Improve this Doc View Source WithTargetSession(TargetSessionAttributes) Returns an NpgsqlDataSource that wraps this multi-host one with the given server type. Declaration public NpgsqlDataSource WithTargetSession(TargetSessionAttributes targetSessionAttributes) Parameters Type Name Description TargetSessionAttributes targetSessionAttributes Specifies the server type (e.g. primary, standby). Returns Type Description NpgsqlDataSource Implements IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlNestedDataReader.html": {
    "href": "doc/api/Npgsql.NpgsqlNestedDataReader.html",
    "title": "Class NpgsqlNestedDataReader | Npgsql Documentation",
    "keywords": "Class NpgsqlNestedDataReader Reads a forward-only stream of rows from a nested data source. Can be retrieved using GetData(Int32) or GetData(Int32) . Inheritance Object NpgsqlNestedDataReader Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlNestedDataReader : DbDataReader Properties | Improve this Doc View Source Depth Declaration public override int Depth { get; } Property Value Type Description Int32 | Improve this Doc View Source FieldCount Declaration public override int FieldCount { get; } Property Value Type Description Int32 | Improve this Doc View Source HasRows Declaration public override bool HasRows { get; } Property Value Type Description Boolean | Improve this Doc View Source IsClosed Declaration public override bool IsClosed { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public override object this[int ordinal] { get; } Parameters Type Name Description Int32 ordinal Property Value Type Description Object | Improve this Doc View Source Item[String] Declaration public override object this[string name] { get; } Parameters Type Name Description String name Property Value Type Description Object | Improve this Doc View Source RecordsAffected Declaration public override int RecordsAffected { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Close() Declaration public override void Close() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source GetBoolean(Int32) Declaration public override bool GetBoolean(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Boolean | Improve this Doc View Source GetByte(Int32) Declaration public override byte GetByte(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Byte | Improve this Doc View Source GetBytes(Int32, Int64, Byte[], Int32, Int32) Declaration public override long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) Parameters Type Name Description Int32 ordinal Int64 dataOffset Byte [] buffer Int32 bufferOffset Int32 length Returns Type Description Int64 | Improve this Doc View Source GetChar(Int32) Declaration public override char GetChar(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Char | Improve this Doc View Source GetChars(Int32, Int64, Char[], Int32, Int32) Declaration public override long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) Parameters Type Name Description Int32 ordinal Int64 dataOffset Char [] buffer Int32 bufferOffset Int32 length Returns Type Description Int64 | Improve this Doc View Source GetData(Int32) Returns a nested data reader for the requested column. The column type must be a record or a to Npgsql known composite type, or an array thereof. Declaration public NpgsqlNestedDataReader GetData(int ordinal) Parameters Type Name Description Int32 ordinal The zero-based column ordinal. Returns Type Description NpgsqlNestedDataReader A data reader. | Improve this Doc View Source GetDataTypeName(Int32) Declaration public override string GetDataTypeName(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description String | Improve this Doc View Source GetDateTime(Int32) Declaration public override DateTime GetDateTime(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description DateTime | Improve this Doc View Source GetDbDataReader(Int32) Declaration protected override DbDataReader GetDbDataReader(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description DbDataReader | Improve this Doc View Source GetDecimal(Int32) Declaration public override decimal GetDecimal(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Decimal | Improve this Doc View Source GetDouble(Int32) Declaration public override double GetDouble(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Double | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description IEnumerator | Improve this Doc View Source GetFieldType(Int32) Declaration public override Type GetFieldType(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Type | Improve this Doc View Source GetFieldValue<T>(Int32) Declaration public override T GetFieldValue<T>(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetFloat(Int32) Declaration public override float GetFloat(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Single | Improve this Doc View Source GetGuid(Int32) Declaration public override Guid GetGuid(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Guid | Improve this Doc View Source GetInt16(Int32) Declaration public override short GetInt16(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Int16 | Improve this Doc View Source GetInt32(Int32) Declaration public override int GetInt32(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Int32 | Improve this Doc View Source GetInt64(Int32) Declaration public override long GetInt64(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Int64 | Improve this Doc View Source GetName(Int32) Declaration public override string GetName(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description String | Improve this Doc View Source GetOrdinal(String) Declaration public override int GetOrdinal(string name) Parameters Type Name Description String name Returns Type Description Int32 | Improve this Doc View Source GetProviderSpecificFieldType(Int32) Declaration public override Type GetProviderSpecificFieldType(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Type | Improve this Doc View Source GetProviderSpecificValue(Int32) Declaration public override object GetProviderSpecificValue(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Object | Improve this Doc View Source GetProviderSpecificValues(Object[]) Declaration public override int GetProviderSpecificValues(object[] values) Parameters Type Name Description Object [] values Returns Type Description Int32 | Improve this Doc View Source GetString(Int32) Declaration public override string GetString(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description String | Improve this Doc View Source GetValue(Int32) Declaration public override object GetValue(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Object | Improve this Doc View Source GetValues(Object[]) Declaration public override int GetValues(object[] values) Parameters Type Name Description Object [] values Returns Type Description Int32 | Improve this Doc View Source IsDBNull(Int32) Declaration public override bool IsDBNull(int ordinal) Parameters Type Name Description Int32 ordinal Returns Type Description Boolean | Improve this Doc View Source NextResult() Declaration public override bool NextResult() Returns Type Description Boolean | Improve this Doc View Source Read() Declaration public override bool Read() Returns Type Description Boolean"
  },
  "doc/api/Npgsql.NpgsqlNetTopologySuiteExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlNetTopologySuiteExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteExtensions Extension allowing adding the NetTopologySuite plugin to an Npgsql type mapper. Inheritance Object NpgsqlNetTopologySuiteExtensions Namespace : Npgsql Assembly : Npgsql.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteExtensions : object Methods | Improve this Doc View Source UseNetTopologySuite(INpgsqlTypeMapper, Nullable<CoordinateSequenceFactory>, Nullable<PrecisionModel>, Ordinates, Boolean) Sets up NetTopologySuite mappings for the PostGIS types. Declaration public static INpgsqlTypeMapper UseNetTopologySuite(this INpgsqlTypeMapper mapper, CoordinateSequenceFactory? coordinateSequenceFactory = null, PrecisionModel? precisionModel = null, Ordinates handleOrdinates = null, bool geographyAsDefault = false) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific). Nullable < CoordinateSequenceFactory > coordinateSequenceFactory The factory which knows how to build a particular implementation of ICoordinateSequence from an array of Coordinates. Nullable < PrecisionModel > precisionModel Specifies the grid of allowable points. Ordinates handleOrdinates Specifies the ordinates which will be handled. Not specified ordinates will be ignored. If GeoAPI.Geometries.Ordiantes.None is specified, an actual value will be taken from the GeoAPI.Geometries.ICoordinateSequenceFactory.Ordinates property of coordinateSequenceFactory . Boolean geographyAsDefault Specifies that the geography type is used for mapping by default. Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.NpgsqlNodaTimeExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlNodaTimeExtensions.html",
    "title": "Class NpgsqlNodaTimeExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeExtensions Extension adding the NodaTime plugin to an Npgsql type mapper. Inheritance Object NpgsqlNodaTimeExtensions Namespace : Npgsql Assembly : Npgsql.NodaTime.dll Syntax public static class NpgsqlNodaTimeExtensions : object Methods | Improve this Doc View Source UseNodaTime(INpgsqlTypeMapper) Sets up NodaTime mappings for the PostgreSQL date/time types. Declaration public static INpgsqlTypeMapper UseNodaTime(this INpgsqlTypeMapper mapper) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific) Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.NpgsqlNoticeEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlNoticeEventArgs.html",
    "title": "Class NpgsqlNoticeEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlNoticeEventArgs Provides data for a PostgreSQL notice event. Inheritance Object NpgsqlNoticeEventArgs Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlNoticeEventArgs : EventArgs Properties | Improve this Doc View Source Notice The Notice that was sent from the database. Declaration public PostgresNotice Notice { get; } Property Value Type Description PostgresNotice"
  },
  "doc/api/Npgsql.NpgsqlNotificationEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlNotificationEventArgs.html",
    "title": "Class NpgsqlNotificationEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlNotificationEventArgs Provides information on a PostgreSQL notification. Notifications are sent when your connection has registered for notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel. Inheritance Object NpgsqlNotificationEventArgs Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlNotificationEventArgs : EventArgs Properties | Improve this Doc View Source AdditionalInformation An optional payload string that was sent with this notification. Declaration public string AdditionalInformation { get; } Property Value Type Description String | Improve this Doc View Source Channel The channel on which the notification was sent. Declaration public string Channel { get; } Property Value Type Description String | Improve this Doc View Source Condition The channel on which the notification was sent. Declaration public string Condition { get; } Property Value Type Description String | Improve this Doc View Source Payload An optional payload string that was sent with this notification. Declaration public string Payload { get; } Property Value Type Description String | Improve this Doc View Source PID Process ID of the PostgreSQL backend that sent this notification. Declaration public int PID { get; } Property Value Type Description Int32"
  },
  "doc/api/Npgsql.NpgsqlOperationInProgressException.html": {
    "href": "doc/api/Npgsql.NpgsqlOperationInProgressException.html",
    "title": "Class NpgsqlOperationInProgressException | Npgsql Documentation",
    "keywords": "Class NpgsqlOperationInProgressException Thrown when trying to use a connection that is already busy performing some other operation. Provides information on the already-executing operation to help with debugging. Inheritance Object NpgsqlException NpgsqlOperationInProgressException Inherited Members NpgsqlException.IsTransient NpgsqlException.BatchCommand Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlOperationInProgressException : NpgsqlException Constructors | Improve this Doc View Source NpgsqlOperationInProgressException(NpgsqlCommand) Creates a new instance of NpgsqlOperationInProgressException . Declaration public NpgsqlOperationInProgressException(NpgsqlCommand command) Parameters Type Name Description NpgsqlCommand command A command which was in progress when the operation which triggered this exception was executed. Properties | Improve this Doc View Source CommandInProgress If the connection is busy with another command, this will contain a reference to that command. Otherwise, if the connection if busy with another type of operation (e.g. COPY), contains null . Declaration public NpgsqlCommand CommandInProgress { get; } Property Value Type Description NpgsqlCommand"
  },
  "doc/api/Npgsql.NpgsqlParameter.html": {
    "href": "doc/api/Npgsql.NpgsqlParameter.html",
    "title": "Class NpgsqlParameter | Npgsql Documentation",
    "keywords": "Class NpgsqlParameter This class represents a parameter to a command that will be sent to server Inheritance Object NpgsqlParameter NpgsqlParameter<T> Implements IDbDataParameter ICloneable Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlParameter : DbParameter Constructors | Improve this Doc View Source NpgsqlParameter() Initializes a new instance of the NpgsqlParameter class. Declaration public NpgsqlParameter() | Improve this Doc View Source NpgsqlParameter(Nullable<String>, DbType) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string? parameterName, DbType parameterType) Parameters Type Name Description Nullable < String > parameterName The name of the parameter to map. DbType parameterType One of the values. | Improve this Doc View Source NpgsqlParameter(Nullable<String>, DbType, Int32) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string? parameterName, DbType parameterType, int size) Parameters Type Name Description Nullable < String > parameterName The name of the parameter to map. DbType parameterType One of the values. Int32 size The length of the parameter. | Improve this Doc View Source NpgsqlParameter(Nullable<String>, DbType, Int32, Nullable<String>) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string? parameterName, DbType parameterType, int size, string? sourceColumn) Parameters Type Name Description Nullable < String > parameterName The name of the parameter to map. DbType parameterType One of the values. Int32 size The length of the parameter. Nullable < String > sourceColumn The name of the source column. | Improve this Doc View Source NpgsqlParameter(Nullable<String>, NpgsqlDbType) Initializes a new instance of the NpgsqlParameter class with the parameter name and the data type. Declaration public NpgsqlParameter(string? parameterName, NpgsqlDbType parameterType) Parameters Type Name Description Nullable < String > parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. | Improve this Doc View Source NpgsqlParameter(Nullable<String>, NpgsqlDbType, Int32) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string? parameterName, NpgsqlDbType parameterType, int size) Parameters Type Name Description Nullable < String > parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. Int32 size The length of the parameter. | Improve this Doc View Source NpgsqlParameter(Nullable<String>, NpgsqlDbType, Int32, Nullable<String>) Initializes a new instance of the NpgsqlParameter Declaration public NpgsqlParameter(string? parameterName, NpgsqlDbType parameterType, int size, string? sourceColumn) Parameters Type Name Description Nullable < String > parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. Int32 size The length of the parameter. Nullable < String > sourceColumn The name of the source column. | Improve this Doc View Source NpgsqlParameter(Nullable<String>, Nullable<Object>) Initializes a new instance of the NpgsqlParameter class with the parameter name and a value. Declaration public NpgsqlParameter(string? parameterName, object? value) Parameters Type Name Description Nullable < String > parameterName The name of the parameter to map. Nullable < Object > value The value of the NpgsqlParameter . Remarks When you specify an in the value parameter, the is inferred from the CLR type. When using this constructor, you must be aware of a possible misuse of the constructor which takes a DbType parameter. This happens when calling this constructor passing an int 0 and the compiler thinks you are passing a value of DbType . Use for example to have compiler calling the correct constructor. | Improve this Doc View Source NpgsqlParameter(String, DbType, Int32, Nullable<String>, ParameterDirection, Boolean, Byte, Byte, DataRowVersion, Object) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, DbType parameterType, int size, string? sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value) Parameters Type Name Description String parameterName The name of the parameter to map. DbType parameterType One of the values. Int32 size The length of the parameter. Nullable < String > sourceColumn The name of the source column. ParameterDirection direction One of the values. Boolean isNullable true if the value of the field can be null , otherwise false . Byte precision The total number of digits to the left and right of the decimal point to which Value is resolved. Byte scale The total number of decimal places to which Value is resolved. DataRowVersion sourceVersion One of the values. Object value An that is the value of the NpgsqlParameter . | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType, Int32, Nullable<String>, ParameterDirection, Boolean, Byte, Byte, DataRowVersion, Object) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string? sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value) Parameters Type Name Description String parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. Int32 size The length of the parameter. Nullable < String > sourceColumn The name of the source column. ParameterDirection direction One of the values. Boolean isNullable true if the value of the field can be null , otherwise false . Byte precision The total number of digits to the left and right of the decimal point to which Value is resolved. Byte scale The total number of decimal places to which Value is resolved. DataRowVersion sourceVersion One of the values. Object value An that is the value of the NpgsqlParameter . Properties | Improve this Doc View Source Collection The collection to which this parameter belongs, if any. Declaration public NpgsqlParameterCollection Collection { get; set; } Property Value Type Description NpgsqlParameterCollection | Improve this Doc View Source ConvertedValue Can be used to communicate a value from the validation phase to the writing phase. To be used by type handlers only. Declaration public object? ConvertedValue { get; set; } Property Value Type Description Nullable < Object > | Improve this Doc View Source DataTypeName Used to specify which PostgreSQL type will be sent to the database for this parameter. Declaration public string? DataTypeName { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source DbType Gets or sets the of the parameter. Declaration public sealed override DbType DbType { get; set; } Property Value Type Description DbType One of the values. The default is . | Improve this Doc View Source Direction Declaration public sealed override ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection | Improve this Doc View Source IsNullable Declaration public sealed override bool IsNullable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source NpgsqlDbType Gets or sets the NpgsqlDbType of the parameter. Declaration public NpgsqlDbType NpgsqlDbType { get; set; } Property Value Type Description NpgsqlDbType One of the NpgsqlDbType values. The default is NpgsqlDbType . | Improve this Doc View Source NpgsqlValue Gets or sets the value of the parameter. Declaration public object? NpgsqlValue { get; set; } Property Value Type Description Nullable < Object > An that is the value of the parameter. The default value is null . | Improve this Doc View Source ParameterName Gets or sets The name of the NpgsqlParameter . Declaration public sealed override string ParameterName { get; set; } Property Value Type Description String The name of the NpgsqlParameter . The default is an empty string. | Improve this Doc View Source PostgresType The PostgreSQL data type, such as int4 or text, as discovered from pg_type. This property is automatically set if parameters have been derived via DeriveParameters(NpgsqlCommand) and can be used to acquire additional information about the parameters' data type. Declaration public PostgresType PostgresType { get; } Property Value Type Description PostgresType | Improve this Doc View Source Precision Gets or sets the maximum number of digits used to represent the Value property. Declaration public byte Precision { get; set; } Property Value Type Description Byte The maximum number of digits used to represent the Value property. The default value is 0, which indicates that the data provider sets the precision for Value . | Improve this Doc View Source Scale Gets or sets the number of decimal places to which Value is resolved. Declaration public byte Scale { get; set; } Property Value Type Description Byte The number of decimal places to which Value is resolved. The default is 0. | Improve this Doc View Source Size Declaration public sealed override int Size { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SourceColumn Declaration public sealed override string SourceColumn { get; set; } Property Value Type Description String | Improve this Doc View Source SourceColumnNullMapping Declaration public sealed override bool SourceColumnNullMapping { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SourceVersion Declaration public sealed override DataRowVersion SourceVersion { get; set; } Property Value Type Description DataRowVersion | Improve this Doc View Source Value Declaration public override object? Value { get; set; } Property Value Type Description Nullable < Object > Methods | Improve this Doc View Source Clone() Creates a new NpgsqlParameter that is a copy of the current instance. Declaration public NpgsqlParameter Clone() Returns Type Description NpgsqlParameter A new NpgsqlParameter that is a copy of this instance. | Improve this Doc View Source ResetDbType() Declaration public override void ResetDbType() Implements IDbDataParameter ICloneable"
  },
  "doc/api/Npgsql.NpgsqlParameter-1.html": {
    "href": "doc/api/Npgsql.NpgsqlParameter-1.html",
    "title": "Class NpgsqlParameter<T> | Npgsql Documentation",
    "keywords": "Class NpgsqlParameter<T> A generic version of NpgsqlParameter which provides more type safety and avoids boxing of value types. Use TypedValue instead of Value . Inheritance Object NpgsqlParameter NpgsqlParameter<T> Implements IDbDataParameter ICloneable Inherited Members NpgsqlParameter.ConvertedValue NpgsqlParameter.ParameterName NpgsqlParameter.NpgsqlValue NpgsqlParameter.DbType NpgsqlParameter.NpgsqlDbType NpgsqlParameter.DataTypeName NpgsqlParameter.IsNullable NpgsqlParameter.Direction NpgsqlParameter.Precision NpgsqlParameter.Scale NpgsqlParameter.Size NpgsqlParameter.SourceColumn NpgsqlParameter.SourceVersion NpgsqlParameter.SourceColumnNullMapping NpgsqlParameter.Collection NpgsqlParameter.PostgresType NpgsqlParameter.ResetDbType() NpgsqlParameter.Clone() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlParameter<T> : NpgsqlParameter Type Parameters Name Description T The type of the value that will be stored in the parameter. Constructors | Improve this Doc View Source NpgsqlParameter() Initializes a new instance of NpgsqlParameter<T> . Declaration public NpgsqlParameter() | Improve this Doc View Source NpgsqlParameter(String, T) Initializes a new instance of NpgsqlParameter<T> with a parameter name and value. Declaration public NpgsqlParameter(string parameterName, T value) Parameters Type Name Description String parameterName T value | Improve this Doc View Source NpgsqlParameter(String, DbType) Initializes a new instance of NpgsqlParameter<T> with a parameter name and type. Declaration public NpgsqlParameter(string parameterName, DbType dbType) Parameters Type Name Description String parameterName DbType dbType | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType) Initializes a new instance of NpgsqlParameter<T> with a parameter name and type. Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType npgsqlDbType) Parameters Type Name Description String parameterName NpgsqlDbType npgsqlDbType Properties | Improve this Doc View Source TypedValue Gets or sets the strongly-typed value of the parameter. Declaration public T TypedValue { get; set; } Property Value Type Description T | Improve this Doc View Source Value Gets or sets the value of the parameter. This delegates to TypedValue . Declaration public override object? Value { get; set; } Property Value Type Description Nullable < Object > Overrides NpgsqlParameter.Value Implements IDbDataParameter ICloneable"
  },
  "doc/api/Npgsql.NpgsqlParameterCollection.html": {
    "href": "doc/api/Npgsql.NpgsqlParameterCollection.html",
    "title": "Class NpgsqlParameterCollection | Npgsql Documentation",
    "keywords": "Class NpgsqlParameterCollection Represents a collection of parameters relevant to a NpgsqlCommand as well as their respective mappings to columns in a . Inheritance Object NpgsqlParameterCollection Implements IList < NpgsqlParameter > Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlParameterCollection : DbParameterCollection Properties | Improve this Doc View Source Count Gets the number of NpgsqlParameter objects in the collection. Declaration public override int Count { get; } Property Value Type Description Int32 The number of NpgsqlParameter objects in the collection. | Improve this Doc View Source IsFixedSize Declaration public override bool IsFixedSize { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Declaration public override bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSynchronized Declaration public override bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Gets the NpgsqlParameter at the specified index. Declaration public NpgsqlParameter this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the NpgsqlParameter to retrieve. Property Value Type Description NpgsqlParameter The NpgsqlParameter at the specified index. | Improve this Doc View Source Item[String] Gets the NpgsqlParameter with the specified name. Declaration public NpgsqlParameter this[string parameterName] { get; set; } Parameters Type Name Description String parameterName The name of the NpgsqlParameter to retrieve. Property Value Type Description NpgsqlParameter The NpgsqlParameter with the specified name, or a null reference if the parameter is not found. | Improve this Doc View Source SyncRoot Declaration public override object SyncRoot { get; } Property Value Type Description Object Methods | Improve this Doc View Source Add(NpgsqlParameter) Adds the specified NpgsqlParameter object to the NpgsqlParameterCollection . Declaration public NpgsqlParameter Add(NpgsqlParameter value) Parameters Type Name Description NpgsqlParameter value The NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source Add(Object) Declaration public override int Add(object value) Parameters Type Name Description Object value Returns Type Description Int32 | Improve this Doc View Source Add(String, NpgsqlDbType) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the parameter name and the data type. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType) Parameters Type Name Description String parameterName The name of the parameter. NpgsqlDbType parameterType One of the values. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source Add(String, NpgsqlDbType, Int32) Adds a NpgsqlParameter to the NpgsqlParameterCollection with the parameter name, the data type, and the column length. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size) Parameters Type Name Description String parameterName The name of the parameter. NpgsqlDbType parameterType One of the values. Int32 size The length of the column. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source Add(String, NpgsqlDbType, Int32, String) Adds a NpgsqlParameter to the NpgsqlParameterCollection with the parameter name, the data type, the column length, and the source column name. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn) Parameters Type Name Description String parameterName The name of the parameter. NpgsqlDbType parameterType One of the values. Int32 size The length of the column. String sourceColumn The name of the source column. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source AddRange(Array) Declaration public override void AddRange(Array values) Parameters Type Name Description Array values | Improve this Doc View Source AddWithValue(NpgsqlDbType, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified data type and value. Declaration public NpgsqlParameter AddWithValue(NpgsqlDbType parameterType, object value) Parameters Type Name Description NpgsqlDbType parameterType One of the NpgsqlDbType values. Object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Improve this Doc View Source AddWithValue(Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified value. Declaration public NpgsqlParameter AddWithValue(object value) Parameters Type Name Description Object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Improve this Doc View Source AddWithValue(String, NpgsqlDbType, Int32, Nullable<String>, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, string? sourceColumn, object value) Parameters Type Name Description String parameterName The name of the NpgsqlParameter . NpgsqlDbType parameterType One of the NpgsqlDbType values. Int32 size The length of the column. Nullable < String > sourceColumn The name of the source column. Object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Improve this Doc View Source AddWithValue(String, NpgsqlDbType, Int32, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, object value) Parameters Type Name Description String parameterName The name of the NpgsqlParameter . NpgsqlDbType parameterType One of the NpgsqlDbType values. Int32 size The length of the column. Object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Improve this Doc View Source AddWithValue(String, NpgsqlDbType, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name, data type and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, object value) Parameters Type Name Description String parameterName The name of the NpgsqlParameter . NpgsqlDbType parameterType One of the NpgsqlDbType values. Object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Improve this Doc View Source AddWithValue(String, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, object value) Parameters Type Name Description String parameterName The name of the NpgsqlParameter . Object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Improve this Doc View Source Clear() Removes all items from the collection. Declaration public override void Clear() | Improve this Doc View Source Contains(NpgsqlParameter) Report whether the specified parameter is present in the collection. Declaration public bool Contains(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to find. Returns Type Description Boolean True if the parameter was found, otherwise false. | Improve this Doc View Source Contains(Object) Declaration public override bool Contains(object value) Parameters Type Name Description Object value Returns Type Description Boolean | Improve this Doc View Source Contains(String) Declaration public override bool Contains(string parameterName) Parameters Type Name Description String parameterName Returns Type Description Boolean | Improve this Doc View Source CopyTo(Array, Int32) Declaration public override void CopyTo(Array array, int index) Parameters Type Name Description Array array Int32 index | Improve this Doc View Source CopyTo(NpgsqlParameter[], Int32) Convert collection to a System.Array. Declaration public void CopyTo(NpgsqlParameter[] array, int arrayIndex) Parameters Type Name Description NpgsqlParameter [] array Destination array. Int32 arrayIndex Starting index in destination array. | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description IEnumerator | Improve this Doc View Source GetParameter(Int32) Declaration protected override DbParameter GetParameter(int index) Parameters Type Name Description Int32 index Returns Type Description DbParameter | Improve this Doc View Source GetParameter(String) Declaration protected override DbParameter GetParameter(string parameterName) Parameters Type Name Description String parameterName Returns Type Description DbParameter | Improve this Doc View Source IndexOf(NpgsqlParameter) Report the offset within the collection of the given parameter. Declaration public int IndexOf(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to find. Returns Type Description Int32 Index of the parameter, or -1 if the parameter is not present. | Improve this Doc View Source IndexOf(Object) Declaration public override int IndexOf(object value) Parameters Type Name Description Object value Returns Type Description Int32 | Improve this Doc View Source IndexOf(String) Declaration public override int IndexOf(string parameterName) Parameters Type Name Description String parameterName Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, NpgsqlParameter) Insert the specified parameter into the collection. Declaration public void Insert(int index, NpgsqlParameter item) Parameters Type Name Description Int32 index Index of the existing parameter before which to insert the new one. NpgsqlParameter item Parameter to insert. | Improve this Doc View Source Insert(Int32, Object) Declaration public override void Insert(int index, object value) Parameters Type Name Description Int32 index Object value | Improve this Doc View Source Remove(NpgsqlParameter) Remove the specified parameter from the collection. Declaration public bool Remove(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to remove. Returns Type Description Boolean True if the parameter was found and removed, otherwise false. | Improve this Doc View Source Remove(Object) Removes the specified NpgsqlParameter from the collection. Declaration public override void Remove(object value) Parameters Type Name Description Object value The NpgsqlParameter to remove from the collection. | Improve this Doc View Source Remove(String) Removes the specified NpgsqlParameter from the collection. Declaration public void Remove(string parameterName) Parameters Type Name Description String parameterName The name of the NpgsqlParameter to remove from the collection. | Improve this Doc View Source RemoveAt(Int32) Removes the specified NpgsqlParameter from the collection using a specific index. Declaration public override void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the parameter. | Improve this Doc View Source RemoveAt(String) Declaration public override void RemoveAt(string parameterName) Parameters Type Name Description String parameterName | Improve this Doc View Source SetParameter(Int32, DbParameter) Declaration protected override void SetParameter(int index, DbParameter value) Parameters Type Name Description Int32 index DbParameter value | Improve this Doc View Source SetParameter(String, DbParameter) Declaration protected override void SetParameter(string parameterName, DbParameter value) Parameters Type Name Description String parameterName DbParameter value | Improve this Doc View Source ToArray() Convert collection to a System.Array. Declaration public NpgsqlParameter[] ToArray() Returns Type Description NpgsqlParameter [] NpgsqlParameter[] | Improve this Doc View Source TryGetValue(String, out NpgsqlParameter) Gets a value indicating whether a NpgsqlParameter with the specified parameter name exists in the collection. Declaration public bool TryGetValue(string parameterName, out NpgsqlParameter parameter) Parameters Type Name Description String parameterName The name of the NpgsqlParameter object to find. NpgsqlParameter parameter A reference to the requested parameter is returned in this out param if it is found in the list. This value is null if the parameter is not found. Returns Type Description Boolean true if the collection contains the parameter and param will contain the parameter; otherwise, false . Implements IList<>"
  },
  "doc/api/Npgsql.NpgsqlRawCopyStream.html": {
    "href": "doc/api/Npgsql.NpgsqlRawCopyStream.html",
    "title": "Class NpgsqlRawCopyStream | Npgsql Documentation",
    "keywords": "Class NpgsqlRawCopyStream Provides an API for a raw binary COPY operation, a high-performance data import/export mechanism to a PostgreSQL table. Initiated by BeginRawBinaryCopy(String) Inheritance Object NpgsqlRawCopyStream Implements IDisposable IAsyncDisposable Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlRawCopyStream : Stream Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html . Properties | Improve this Doc View Source CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean | Improve this Doc View Source CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description Boolean | Improve this Doc View Source CanTimeout Declaration public override bool CanTimeout { get; } Property Value Type Description Boolean | Improve this Doc View Source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Declaration public override long Length { get; } Property Value Type Description Int64 | Improve this Doc View Source Position Declaration public override long Position { get; set; } Property Value Type Description Int64 | Improve this Doc View Source ReadTimeout Declaration public override int ReadTimeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source WriteTimeout Declaration public override int WriteTimeout { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing operation. Any data already written will be discarded. Declaration public void Cancel() | Improve this Doc View Source CancelAsync() Cancels and terminates an ongoing operation. Any data already written will be discarded. Declaration public Task CancelAsync() Returns Type Description Task | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source DisposeAsync() Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source Flush() Declaration public override void Flush() | Improve this Doc View Source FlushAsync(CancellationToken) Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Read(Span<Byte>) Declaration public override int Read(Span<byte> span) Parameters Type Name Description Span < Byte > span Returns Type Description Int32 | Improve this Doc View Source Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Returns Type Description Int32 | Improve this Doc View Source ReadAsync(Memory<Byte>, CancellationToken) Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken) Parameters Type Name Description Memory < Byte > buffer CancellationToken cancellationToken Returns Type Description ValueTask < Int32 > | Improve this Doc View Source ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count CancellationToken cancellationToken Returns Type Description Task < Int32 > | Improve this Doc View Source Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset SeekOrigin origin Returns Type Description Int64 | Improve this Doc View Source SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value | Improve this Doc View Source Write(ReadOnlySpan<Byte>) Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan < Byte > buffer | Improve this Doc View Source Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count | Improve this Doc View Source WriteAsync(ReadOnlyMemory<Byte>, CancellationToken) Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = null) Parameters Type Name Description ReadOnlyMemory < Byte > buffer CancellationToken cancellationToken Returns Type Description ValueTask | Improve this Doc View Source WriteAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count CancellationToken cancellationToken Returns Type Description Task Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatedEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatedEventArgs.html",
    "title": "Class NpgsqlRowUpdatedEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlRowUpdatedEventArgs Inheritance Object NpgsqlRowUpdatedEventArgs Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlRowUpdatedEventArgs : RowUpdatedEventArgs Constructors | Improve this Doc View Source NpgsqlRowUpdatedEventArgs(DataRow, Nullable<IDbCommand>, StatementType, DataTableMapping) Declaration public NpgsqlRowUpdatedEventArgs(DataRow dataRow, IDbCommand? command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description DataRow dataRow Nullable < IDbCommand > command StatementType statementType DataTableMapping tableMapping"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatedEventHandler.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatedEventHandler.html",
    "title": "Delegate NpgsqlRowUpdatedEventHandler | Npgsql Documentation",
    "keywords": "Delegate NpgsqlRowUpdatedEventHandler Represents the method that handles the RowUpdated events. Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void NpgsqlRowUpdatedEventHandler(object sender, NpgsqlRowUpdatedEventArgs e); Parameters Type Name Description Object sender The source of the event. NpgsqlRowUpdatedEventArgs e An NpgsqlRowUpdatedEventArgs that contains the event data."
  },
  "doc/api/Npgsql.NpgsqlRowUpdatingEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatingEventArgs.html",
    "title": "Class NpgsqlRowUpdatingEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlRowUpdatingEventArgs Inheritance Object NpgsqlRowUpdatingEventArgs Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlRowUpdatingEventArgs : RowUpdatingEventArgs Constructors | Improve this Doc View Source NpgsqlRowUpdatingEventArgs(DataRow, Nullable<IDbCommand>, StatementType, DataTableMapping) Declaration public NpgsqlRowUpdatingEventArgs(DataRow dataRow, IDbCommand? command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description DataRow dataRow Nullable < IDbCommand > command StatementType statementType DataTableMapping tableMapping"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatingEventHandler.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatingEventHandler.html",
    "title": "Delegate NpgsqlRowUpdatingEventHandler | Npgsql Documentation",
    "keywords": "Delegate NpgsqlRowUpdatingEventHandler Represents the method that handles the RowUpdating events. Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void NpgsqlRowUpdatingEventHandler(object sender, NpgsqlRowUpdatingEventArgs e); Parameters Type Name Description Object sender The source of the event. NpgsqlRowUpdatingEventArgs e An NpgsqlRowUpdatingEventArgs that contains the event data."
  },
  "doc/api/Npgsql.NpgsqlTracingOptions.html": {
    "href": "doc/api/Npgsql.NpgsqlTracingOptions.html",
    "title": "Class NpgsqlTracingOptions | Npgsql Documentation",
    "keywords": "Class NpgsqlTracingOptions Options to configure Npgsql's support for OpenTelemetry tracing. Currently no options are available. Inheritance Object NpgsqlTracingOptions Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlTracingOptions : object"
  },
  "doc/api/Npgsql.NpgsqlTransaction.html": {
    "href": "doc/api/Npgsql.NpgsqlTransaction.html",
    "title": "Class NpgsqlTransaction | Npgsql Documentation",
    "keywords": "Class NpgsqlTransaction Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited. Inheritance Object NpgsqlTransaction Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlTransaction : DbTransaction Properties | Improve this Doc View Source Connection Specifies the NpgsqlConnection object associated with the transaction. Declaration public NpgsqlConnection Connection { get; } Property Value Type Description NpgsqlConnection The NpgsqlConnection object associated with the transaction. | Improve this Doc View Source DbConnection Specifies the NpgsqlConnection object associated with the transaction. Declaration protected override DbConnection? DbConnection { get; } Property Value Type Description Nullable < DbConnection > The NpgsqlConnection object associated with the transaction. | Improve this Doc View Source IsolationLevel Specifies the isolation level for this transaction. Declaration public override IsolationLevel IsolationLevel { get; } Property Value Type Description IsolationLevel The isolation level for this transaction. The default is . Methods | Improve this Doc View Source Commit() Commits the database transaction. Declaration public override void Commit() | Improve this Doc View Source CommitAsync(CancellationToken) Commits the database transaction. Declaration public override Task CommitAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Dispose(Boolean) Disposes the transaction, rolling it back if it is still pending. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source DisposeAsync() Disposes the transaction, rolling it back if it is still pending. Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source Release(String) Releases a transaction from a pending savepoint state. Declaration public void Release(string name) Parameters Type Name Description String name The name of the savepoint. | Improve this Doc View Source ReleaseAsync(String, CancellationToken) Releases a transaction from a pending savepoint state. Declaration public Task ReleaseAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description String name The name of the savepoint. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Rollback() Rolls back a transaction from a pending state. Declaration public override void Rollback() | Improve this Doc View Source Rollback(String) Rolls back a transaction from a pending savepoint state. Declaration public void Rollback(string name) Parameters Type Name Description String name The name of the savepoint. | Improve this Doc View Source RollbackAsync(CancellationToken) Rolls back a transaction from a pending state. Declaration public override Task RollbackAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source RollbackAsync(String, CancellationToken) Rolls back a transaction from a pending savepoint state. Declaration public Task RollbackAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description String name The name of the savepoint. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task | Improve this Doc View Source Save(String) Creates a transaction save point. Declaration public void Save(string name) Parameters Type Name Description String name The name of the savepoint. Remarks This method does not cause a database roundtrip to be made. The savepoint creation statement will instead be sent along with the next command. | Improve this Doc View Source SaveAsync(String, CancellationToken) Creates a transaction save point. Declaration public Task SaveAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description String name The name of the savepoint. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task Remarks This method does not cause a database roundtrip to be made, and will therefore always complete synchronously. The savepoint creation statement will instead be sent along with the next command."
  },
  "doc/api/Npgsql.PostgresErrorCodes.html": {
    "href": "doc/api/Npgsql.PostgresErrorCodes.html",
    "title": "Class PostgresErrorCodes | Npgsql Documentation",
    "keywords": "Class PostgresErrorCodes Provides constants for PostgreSQL error codes. Inheritance Object PostgresErrorCodes Namespace : Npgsql Assembly : Npgsql.dll Syntax public static class PostgresErrorCodes : object Remarks See https://www.postgresql.org/docs/current/static/errcodes-appendix.html Fields | Improve this Doc View Source ActiveSqlTransaction Declaration public const string ActiveSqlTransaction = null Field Value Type Description String | Improve this Doc View Source AdminShutdown Declaration public const string AdminShutdown = null Field Value Type Description String | Improve this Doc View Source AmbiguousAlias Declaration public const string AmbiguousAlias = null Field Value Type Description String | Improve this Doc View Source AmbiguousColumn Declaration public const string AmbiguousColumn = null Field Value Type Description String | Improve this Doc View Source AmbiguousFunction Declaration public const string AmbiguousFunction = null Field Value Type Description String | Improve this Doc View Source AmbiguousParameter Declaration public const string AmbiguousParameter = null Field Value Type Description String | Improve this Doc View Source ArraySubscriptError Declaration public const string ArraySubscriptError = null Field Value Type Description String | Improve this Doc View Source AssertFailure Declaration public const string AssertFailure = null Field Value Type Description String | Improve this Doc View Source BadCopyFileFormat Declaration public const string BadCopyFileFormat = null Field Value Type Description String | Improve this Doc View Source BranchTransactionAlreadyActive Declaration public const string BranchTransactionAlreadyActive = null Field Value Type Description String | Improve this Doc View Source CannotCoerce Declaration public const string CannotCoerce = null Field Value Type Description String | Improve this Doc View Source CannotConnectNow Declaration public const string CannotConnectNow = null Field Value Type Description String | Improve this Doc View Source CantChangeRuntimeParam Declaration public const string CantChangeRuntimeParam = null Field Value Type Description String | Improve this Doc View Source CardinalityViolation Declaration public const string CardinalityViolation = null Field Value Type Description String | Improve this Doc View Source CaseNotFound Declaration public const string CaseNotFound = null Field Value Type Description String | Improve this Doc View Source CharacterNotInRepertoire Declaration public const string CharacterNotInRepertoire = null Field Value Type Description String | Improve this Doc View Source CheckViolation Declaration public const string CheckViolation = null Field Value Type Description String | Improve this Doc View Source CollationMismatch Declaration public const string CollationMismatch = null Field Value Type Description String | Improve this Doc View Source ConfigFileError Declaration public const string ConfigFileError = null Field Value Type Description String | Improve this Doc View Source ConfigurationLimitExceeded Declaration public const string ConfigurationLimitExceeded = null Field Value Type Description String | Improve this Doc View Source ConnectionDoesNotExist Declaration public const string ConnectionDoesNotExist = null Field Value Type Description String | Improve this Doc View Source ConnectionException Declaration public const string ConnectionException = null Field Value Type Description String | Improve this Doc View Source ConnectionFailure Declaration public const string ConnectionFailure = null Field Value Type Description String | Improve this Doc View Source ContainingSqlNotPermittedExternalRoutineException Declaration public const string ContainingSqlNotPermittedExternalRoutineException = null Field Value Type Description String | Improve this Doc View Source CrashShutdown Declaration public const string CrashShutdown = null Field Value Type Description String | Improve this Doc View Source DatabaseDropped Declaration public const string DatabaseDropped = null Field Value Type Description String | Improve this Doc View Source DataCorrupted Declaration public const string DataCorrupted = null Field Value Type Description String | Improve this Doc View Source DataException Declaration public const string DataException = null Field Value Type Description String | Improve this Doc View Source DatatypeMismatch Declaration public const string DatatypeMismatch = null Field Value Type Description String | Improve this Doc View Source DatetimeFieldOverflow Declaration public const string DatetimeFieldOverflow = null Field Value Type Description String | Improve this Doc View Source DeadlockDetected Declaration public const string DeadlockDetected = null Field Value Type Description String | Improve this Doc View Source DependentObjectsStillExist Declaration public const string DependentObjectsStillExist = null Field Value Type Description String | Improve this Doc View Source DependentPrivilegeDescriptorsStillExist Declaration public const string DependentPrivilegeDescriptorsStillExist = null Field Value Type Description String | Improve this Doc View Source DeprecatedFeatureWarning Declaration public const string DeprecatedFeatureWarning = null Field Value Type Description String | Improve this Doc View Source DiagnosticsException Declaration public const string DiagnosticsException = null Field Value Type Description String | Improve this Doc View Source DiskFull Declaration public const string DiskFull = null Field Value Type Description String | Improve this Doc View Source DivisionByZero Declaration public const string DivisionByZero = null Field Value Type Description String | Improve this Doc View Source DuplicateAlias Declaration public const string DuplicateAlias = null Field Value Type Description String | Improve this Doc View Source DuplicateColumn Declaration public const string DuplicateColumn = null Field Value Type Description String | Improve this Doc View Source DuplicateCursor Declaration public const string DuplicateCursor = null Field Value Type Description String | Improve this Doc View Source DuplicateDatabase Declaration public const string DuplicateDatabase = null Field Value Type Description String | Improve this Doc View Source DuplicateFile Declaration public const string DuplicateFile = null Field Value Type Description String | Improve this Doc View Source DuplicateFunction Declaration public const string DuplicateFunction = null Field Value Type Description String | Improve this Doc View Source DuplicateObject Declaration public const string DuplicateObject = null Field Value Type Description String | Improve this Doc View Source DuplicatePreparedStatement Declaration public const string DuplicatePreparedStatement = null Field Value Type Description String | Improve this Doc View Source DuplicateSchema Declaration public const string DuplicateSchema = null Field Value Type Description String | Improve this Doc View Source DuplicateTable Declaration public const string DuplicateTable = null Field Value Type Description String | Improve this Doc View Source DynamicResultSetsReturnedWarning Declaration public const string DynamicResultSetsReturnedWarning = null Field Value Type Description String | Improve this Doc View Source ErrorInAssignment Declaration public const string ErrorInAssignment = null Field Value Type Description String | Improve this Doc View Source EscapeCharacterConflict Declaration public const string EscapeCharacterConflict = null Field Value Type Description String | Improve this Doc View Source EventTriggerProtocolViolatedExternalRoutineInvocationException Declaration public const string EventTriggerProtocolViolatedExternalRoutineInvocationException = null Field Value Type Description String | Improve this Doc View Source ExclusionViolation Declaration public const string ExclusionViolation = null Field Value Type Description String | Improve this Doc View Source ExternalRoutineException Declaration public const string ExternalRoutineException = null Field Value Type Description String | Improve this Doc View Source ExternalRoutineInvocationException Declaration public const string ExternalRoutineInvocationException = null Field Value Type Description String | Improve this Doc View Source FdwColumnNameNotFound Declaration public const string FdwColumnNameNotFound = null Field Value Type Description String | Improve this Doc View Source FdwDynamicParameterValueNeeded Declaration public const string FdwDynamicParameterValueNeeded = null Field Value Type Description String | Improve this Doc View Source FdwError Declaration public const string FdwError = null Field Value Type Description String | Improve this Doc View Source FdwFunctionSequenceError Declaration public const string FdwFunctionSequenceError = null Field Value Type Description String | Improve this Doc View Source FdwInconsistentDescriptorInformation Declaration public const string FdwInconsistentDescriptorInformation = null Field Value Type Description String | Improve this Doc View Source FdwInvalidAttributeValue Declaration public const string FdwInvalidAttributeValue = null Field Value Type Description String | Improve this Doc View Source FdwInvalidColumnName Declaration public const string FdwInvalidColumnName = null Field Value Type Description String | Improve this Doc View Source FdwInvalidColumnNumber Declaration public const string FdwInvalidColumnNumber = null Field Value Type Description String | Improve this Doc View Source FdwInvalidDataType Declaration public const string FdwInvalidDataType = null Field Value Type Description String | Improve this Doc View Source FdwInvalidDataTypeDescriptors Declaration public const string FdwInvalidDataTypeDescriptors = null Field Value Type Description String | Improve this Doc View Source FdwInvalidDescriptorFieldIdentifier Declaration public const string FdwInvalidDescriptorFieldIdentifier = null Field Value Type Description String | Improve this Doc View Source FdwInvalidHandle Declaration public const string FdwInvalidHandle = null Field Value Type Description String | Improve this Doc View Source FdwInvalidOptionIndex Declaration public const string FdwInvalidOptionIndex = null Field Value Type Description String | Improve this Doc View Source FdwInvalidOptionName Declaration public const string FdwInvalidOptionName = null Field Value Type Description String | Improve this Doc View Source FdwInvalidStringFormat Declaration public const string FdwInvalidStringFormat = null Field Value Type Description String | Improve this Doc View Source FdwInvalidStringLengthOrBufferLength Declaration public const string FdwInvalidStringLengthOrBufferLength = null Field Value Type Description String | Improve this Doc View Source FdwInvalidUseOfNullPointer Declaration public const string FdwInvalidUseOfNullPointer = null Field Value Type Description String | Improve this Doc View Source FdwNoSchemas Declaration public const string FdwNoSchemas = null Field Value Type Description String | Improve this Doc View Source FdwOptionNameNotFound Declaration public const string FdwOptionNameNotFound = null Field Value Type Description String | Improve this Doc View Source FdwOutOfMemory Declaration public const string FdwOutOfMemory = null Field Value Type Description String | Improve this Doc View Source FdwReplyHandle Declaration public const string FdwReplyHandle = null Field Value Type Description String | Improve this Doc View Source FdwSchemaNotFound Declaration public const string FdwSchemaNotFound = null Field Value Type Description String | Improve this Doc View Source FdwTableNotFound Declaration public const string FdwTableNotFound = null Field Value Type Description String | Improve this Doc View Source FdwTooManyHandles Declaration public const string FdwTooManyHandles = null Field Value Type Description String | Improve this Doc View Source FdwUnableToCreateExecution Declaration public const string FdwUnableToCreateExecution = null Field Value Type Description String | Improve this Doc View Source FdwUnableToCreateReply Declaration public const string FdwUnableToCreateReply = null Field Value Type Description String | Improve this Doc View Source FdwUnableToEstablishConnection Declaration public const string FdwUnableToEstablishConnection = null Field Value Type Description String | Improve this Doc View Source FeatureNotSupported Declaration public const string FeatureNotSupported = null Field Value Type Description String | Improve this Doc View Source FloatingPointException Declaration public const string FloatingPointException = null Field Value Type Description String | Improve this Doc View Source ForeignKeyViolation Declaration public const string ForeignKeyViolation = null Field Value Type Description String | Improve this Doc View Source FunctionExecutedNoReturnStatementSqlRoutineException Declaration public const string FunctionExecutedNoReturnStatementSqlRoutineException = null Field Value Type Description String | Improve this Doc View Source GroupingError Declaration public const string GroupingError = null Field Value Type Description String | Improve this Doc View Source HeldCursorRequiresSameIsolationLevel Declaration public const string HeldCursorRequiresSameIsolationLevel = null Field Value Type Description String | Improve this Doc View Source ImplicitZeroBitPaddingWarning Declaration public const string ImplicitZeroBitPaddingWarning = null Field Value Type Description String | Improve this Doc View Source InappropriateAccessModeForBranchTransaction Declaration public const string InappropriateAccessModeForBranchTransaction = null Field Value Type Description String | Improve this Doc View Source InappropriateIsolationLevelForBranchTransaction Declaration public const string InappropriateIsolationLevelForBranchTransaction = null Field Value Type Description String | Improve this Doc View Source IndeterminateCollation Declaration public const string IndeterminateCollation = null Field Value Type Description String | Improve this Doc View Source IndeterminateDatatype Declaration public const string IndeterminateDatatype = null Field Value Type Description String | Improve this Doc View Source IndexCorrupted Declaration public const string IndexCorrupted = null Field Value Type Description String | Improve this Doc View Source IndicatorOverflow Declaration public const string IndicatorOverflow = null Field Value Type Description String | Improve this Doc View Source InFailedSqlTransaction Declaration public const string InFailedSqlTransaction = null Field Value Type Description String | Improve this Doc View Source InsufficientPrivilege Declaration public const string InsufficientPrivilege = null Field Value Type Description String | Improve this Doc View Source InsufficientResources Declaration public const string InsufficientResources = null Field Value Type Description String | Improve this Doc View Source IntegrityConstraintViolation Declaration public const string IntegrityConstraintViolation = null Field Value Type Description String | Improve this Doc View Source InternalError Declaration public const string InternalError = null Field Value Type Description String | Improve this Doc View Source IntervalFieldOverflow Declaration public const string IntervalFieldOverflow = null Field Value Type Description String | Improve this Doc View Source InvalidArgumentForLogarithm Declaration public const string InvalidArgumentForLogarithm = null Field Value Type Description String | Improve this Doc View Source InvalidArgumentForNthValueFunction Declaration public const string InvalidArgumentForNthValueFunction = null Field Value Type Description String | Improve this Doc View Source InvalidArgumentForNtileFunction Declaration public const string InvalidArgumentForNtileFunction = null Field Value Type Description String | Improve this Doc View Source InvalidArgumentForPowerFunction Declaration public const string InvalidArgumentForPowerFunction = null Field Value Type Description String | Improve this Doc View Source InvalidArgumentForWidthBucketFunction Declaration public const string InvalidArgumentForWidthBucketFunction = null Field Value Type Description String | Improve this Doc View Source InvalidAuthorizationSpecification Declaration public const string InvalidAuthorizationSpecification = null Field Value Type Description String | Improve this Doc View Source InvalidBinaryRepresentation Declaration public const string InvalidBinaryRepresentation = null Field Value Type Description String | Improve this Doc View Source InvalidCatalogName Declaration public const string InvalidCatalogName = null Field Value Type Description String | Improve this Doc View Source InvalidCharacterValueForCast Declaration public const string InvalidCharacterValueForCast = null Field Value Type Description String | Improve this Doc View Source InvalidColumnDefinition Declaration public const string InvalidColumnDefinition = null Field Value Type Description String | Improve this Doc View Source InvalidColumnReference Declaration public const string InvalidColumnReference = null Field Value Type Description String | Improve this Doc View Source InvalidCursorDefinition Declaration public const string InvalidCursorDefinition = null Field Value Type Description String | Improve this Doc View Source InvalidCursorName Declaration public const string InvalidCursorName = null Field Value Type Description String | Improve this Doc View Source InvalidCursorState Declaration public const string InvalidCursorState = null Field Value Type Description String | Improve this Doc View Source InvalidDatabaseDefinition Declaration public const string InvalidDatabaseDefinition = null Field Value Type Description String | Improve this Doc View Source InvalidDatetimeFormat Declaration public const string InvalidDatetimeFormat = null Field Value Type Description String | Improve this Doc View Source InvalidEscapeCharacter Declaration public const string InvalidEscapeCharacter = null Field Value Type Description String | Improve this Doc View Source InvalidEscapeOctet Declaration public const string InvalidEscapeOctet = null Field Value Type Description String | Improve this Doc View Source InvalidEscapeSequence Declaration public const string InvalidEscapeSequence = null Field Value Type Description String | Improve this Doc View Source InvalidForeignKey Declaration public const string InvalidForeignKey = null Field Value Type Description String | Improve this Doc View Source InvalidFunctionDefinition Declaration public const string InvalidFunctionDefinition = null Field Value Type Description String | Improve this Doc View Source InvalidGrantOperation Declaration public const string InvalidGrantOperation = null Field Value Type Description String | Improve this Doc View Source InvalidGrantor Declaration public const string InvalidGrantor = null Field Value Type Description String | Improve this Doc View Source InvalidIndicatorParameterValue Declaration public const string InvalidIndicatorParameterValue = null Field Value Type Description String | Improve this Doc View Source InvalidLocatorSpecification Declaration public const string InvalidLocatorSpecification = null Field Value Type Description String | Improve this Doc View Source InvalidName Declaration public const string InvalidName = null Field Value Type Description String | Improve this Doc View Source InvalidObjectDefinition Declaration public const string InvalidObjectDefinition = null Field Value Type Description String | Improve this Doc View Source InvalidParameterValue Declaration public const string InvalidParameterValue = null Field Value Type Description String | Improve this Doc View Source InvalidPassword Declaration public const string InvalidPassword = null Field Value Type Description String | Improve this Doc View Source InvalidPreparedStatementDefinition Declaration public const string InvalidPreparedStatementDefinition = null Field Value Type Description String | Improve this Doc View Source InvalidRecursion Declaration public const string InvalidRecursion = null Field Value Type Description String | Improve this Doc View Source InvalidRegularExpression Declaration public const string InvalidRegularExpression = null Field Value Type Description String | Improve this Doc View Source InvalidRoleSpecification Declaration public const string InvalidRoleSpecification = null Field Value Type Description String | Improve this Doc View Source InvalidRowCountInLimitClause Declaration public const string InvalidRowCountInLimitClause = null Field Value Type Description String | Improve this Doc View Source InvalidRowCountInResultOffsetClause Declaration public const string InvalidRowCountInResultOffsetClause = null Field Value Type Description String | Improve this Doc View Source InvalidSavepointSpecification Declaration public const string InvalidSavepointSpecification = null Field Value Type Description String | Improve this Doc View Source InvalidSchemaDefinition Declaration public const string InvalidSchemaDefinition = null Field Value Type Description String | Improve this Doc View Source InvalidSchemaName Declaration public const string InvalidSchemaName = null Field Value Type Description String | Improve this Doc View Source InvalidSqlStatementName Declaration public const string InvalidSqlStatementName = null Field Value Type Description String | Improve this Doc View Source InvalidSqlstateReturnedExternalRoutineInvocationException Declaration public const string InvalidSqlstateReturnedExternalRoutineInvocationException = null Field Value Type Description String | Improve this Doc View Source InvalidTableDefinition Declaration public const string InvalidTableDefinition = null Field Value Type Description String | Improve this Doc View Source InvalidTablesampleArgument Declaration public const string InvalidTablesampleArgument = null Field Value Type Description String | Improve this Doc View Source InvalidTablesampleRepeat Declaration public const string InvalidTablesampleRepeat = null Field Value Type Description String | Improve this Doc View Source InvalidTextRepresentation Declaration public const string InvalidTextRepresentation = null Field Value Type Description String | Improve this Doc View Source InvalidTimeZoneDisplacementValue Declaration public const string InvalidTimeZoneDisplacementValue = null Field Value Type Description String | Improve this Doc View Source InvalidTransactionInitiation Declaration public const string InvalidTransactionInitiation = null Field Value Type Description String | Improve this Doc View Source InvalidTransactionState Declaration public const string InvalidTransactionState = null Field Value Type Description String | Improve this Doc View Source InvalidTransactionTermination Declaration public const string InvalidTransactionTermination = null Field Value Type Description String | Improve this Doc View Source InvalidUseOfEscapeCharacter Declaration public const string InvalidUseOfEscapeCharacter = null Field Value Type Description String | Improve this Doc View Source InvalidXmlComment Declaration public const string InvalidXmlComment = null Field Value Type Description String | Improve this Doc View Source InvalidXmlContent Declaration public const string InvalidXmlContent = null Field Value Type Description String | Improve this Doc View Source InvalidXmlDocument Declaration public const string InvalidXmlDocument = null Field Value Type Description String | Improve this Doc View Source InvalidXmlProcessingInstruction Declaration public const string InvalidXmlProcessingInstruction = null Field Value Type Description String | Improve this Doc View Source IoError Declaration public const string IoError = null Field Value Type Description String | Improve this Doc View Source LocatorException Declaration public const string LocatorException = null Field Value Type Description String | Improve this Doc View Source LockFileExists Declaration public const string LockFileExists = null Field Value Type Description String | Improve this Doc View Source LockNotAvailable Declaration public const string LockNotAvailable = null Field Value Type Description String | Improve this Doc View Source ModifyingSqlDataNotPermittedExternalRoutineException Declaration public const string ModifyingSqlDataNotPermittedExternalRoutineException = null Field Value Type Description String | Improve this Doc View Source ModifyingSqlDataNotPermittedSqlRoutineException Declaration public const string ModifyingSqlDataNotPermittedSqlRoutineException = null Field Value Type Description String | Improve this Doc View Source MostSpecificTypeMismatch Declaration public const string MostSpecificTypeMismatch = null Field Value Type Description String | Improve this Doc View Source NameTooLong Declaration public const string NameTooLong = null Field Value Type Description String | Improve this Doc View Source NoActiveSqlTransaction Declaration public const string NoActiveSqlTransaction = null Field Value Type Description String | Improve this Doc View Source NoActiveSqlTransactionForBranchTransaction Declaration public const string NoActiveSqlTransactionForBranchTransaction = null Field Value Type Description String | Improve this Doc View Source NoAdditionalDynamicResultSetsReturned Declaration public const string NoAdditionalDynamicResultSetsReturned = null Field Value Type Description String | Improve this Doc View Source NoData Declaration public const string NoData = null Field Value Type Description String | Improve this Doc View Source NoDataFound Declaration public const string NoDataFound = null Field Value Type Description String | Improve this Doc View Source NonstandardUseOfEscapeCharacter Declaration public const string NonstandardUseOfEscapeCharacter = null Field Value Type Description String | Improve this Doc View Source NotAnXmlDocument Declaration public const string NotAnXmlDocument = null Field Value Type Description String | Improve this Doc View Source NotNullViolation Declaration public const string NotNullViolation = null Field Value Type Description String | Improve this Doc View Source NullValueEliminatedInSetFunctionWarning Declaration public const string NullValueEliminatedInSetFunctionWarning = null Field Value Type Description String | Improve this Doc View Source NullValueNoIndicatorParameter Declaration public const string NullValueNoIndicatorParameter = null Field Value Type Description String | Improve this Doc View Source NullValueNotAllowed Declaration public const string NullValueNotAllowed = null Field Value Type Description String | Improve this Doc View Source NullValueNotAllowedExternalRoutineInvocationException Declaration public const string NullValueNotAllowedExternalRoutineInvocationException = null Field Value Type Description String | Improve this Doc View Source NumericValueOutOfRange Declaration public const string NumericValueOutOfRange = null Field Value Type Description String | Improve this Doc View Source ObjectInUse Declaration public const string ObjectInUse = null Field Value Type Description String | Improve this Doc View Source ObjectNotInPrerequisiteState Declaration public const string ObjectNotInPrerequisiteState = null Field Value Type Description String | Improve this Doc View Source OperatorIntervention Declaration public const string OperatorIntervention = null Field Value Type Description String | Improve this Doc View Source OutOfMemory Declaration public const string OutOfMemory = null Field Value Type Description String | Improve this Doc View Source PlpgsqlError Declaration public const string PlpgsqlError = null Field Value Type Description String | Improve this Doc View Source PrivilegeNotGrantedWarning Declaration public const string PrivilegeNotGrantedWarning = null Field Value Type Description String | Improve this Doc View Source PrivilegeNotRevokedWarning Declaration public const string PrivilegeNotRevokedWarning = null Field Value Type Description String | Improve this Doc View Source ProgramLimitExceeded Declaration public const string ProgramLimitExceeded = null Field Value Type Description String | Improve this Doc View Source ProhibitedSqlStatementAttemptedExternalRoutineException Declaration public const string ProhibitedSqlStatementAttemptedExternalRoutineException = null Field Value Type Description String | Improve this Doc View Source ProhibitedSqlStatementAttemptedSqlRoutineException Declaration public const string ProhibitedSqlStatementAttemptedSqlRoutineException = null Field Value Type Description String | Improve this Doc View Source ProtocolViolation Declaration public const string ProtocolViolation = null Field Value Type Description String | Improve this Doc View Source QueryCanceled Declaration public const string QueryCanceled = null Field Value Type Description String | Improve this Doc View Source RaiseException Declaration public const string RaiseException = null Field Value Type Description String | Improve this Doc View Source ReadingSqlDataNotPermittedExternalRoutineException Declaration public const string ReadingSqlDataNotPermittedExternalRoutineException = null Field Value Type Description String | Improve this Doc View Source ReadingSqlDataNotPermittedSqlRoutineException Declaration public const string ReadingSqlDataNotPermittedSqlRoutineException = null Field Value Type Description String | Improve this Doc View Source ReadOnlySqlTransaction Declaration public const string ReadOnlySqlTransaction = null Field Value Type Description String | Improve this Doc View Source ReservedName Declaration public const string ReservedName = null Field Value Type Description String | Improve this Doc View Source RestrictViolation Declaration public const string RestrictViolation = null Field Value Type Description String | Improve this Doc View Source SavepointException Declaration public const string SavepointException = null Field Value Type Description String | Improve this Doc View Source SchemaAndDataStatementMixingNotSupported Declaration public const string SchemaAndDataStatementMixingNotSupported = null Field Value Type Description String | Improve this Doc View Source SerializationFailure Declaration public const string SerializationFailure = null Field Value Type Description String | Improve this Doc View Source SnapshotFailure Declaration public const string SnapshotFailure = null Field Value Type Description String | Improve this Doc View Source SqlClientUnableToEstablishSqlConnection Declaration public const string SqlClientUnableToEstablishSqlConnection = null Field Value Type Description String | Improve this Doc View Source SqlRoutineException Declaration public const string SqlRoutineException = null Field Value Type Description String | Improve this Doc View Source SqlServerRejectedEstablishmentOfSqlConnection Declaration public const string SqlServerRejectedEstablishmentOfSqlConnection = null Field Value Type Description String | Improve this Doc View Source SqlStatementNotYetComplete Declaration public const string SqlStatementNotYetComplete = null Field Value Type Description String | Improve this Doc View Source SrfProtocolViolatedExternalRoutineInvocationException Declaration public const string SrfProtocolViolatedExternalRoutineInvocationException = null Field Value Type Description String | Improve this Doc View Source StackedDiagnosticsAccessedWithoutActiveHandler Declaration public const string StackedDiagnosticsAccessedWithoutActiveHandler = null Field Value Type Description String | Improve this Doc View Source StatementCompletionUnknown Declaration public const string StatementCompletionUnknown = null Field Value Type Description String | Improve this Doc View Source StatementTooComplex Declaration public const string StatementTooComplex = null Field Value Type Description String | Improve this Doc View Source StringDataLengthMismatch Declaration public const string StringDataLengthMismatch = null Field Value Type Description String | Improve this Doc View Source StringDataRightTruncation Declaration public const string StringDataRightTruncation = null Field Value Type Description String | Improve this Doc View Source StringDataRightTruncationWarning Declaration public const string StringDataRightTruncationWarning = null Field Value Type Description String | Improve this Doc View Source SubstringError Declaration public const string SubstringError = null Field Value Type Description String | Improve this Doc View Source SuccessfulCompletion Declaration public const string SuccessfulCompletion = null Field Value Type Description String | Improve this Doc View Source SyntaxError Declaration public const string SyntaxError = null Field Value Type Description String | Improve this Doc View Source SyntaxErrorOrAccessRuleViolation Declaration public const string SyntaxErrorOrAccessRuleViolation = null Field Value Type Description String | Improve this Doc View Source SystemError Declaration public const string SystemError = null Field Value Type Description String | Improve this Doc View Source TooManyArguments Declaration public const string TooManyArguments = null Field Value Type Description String | Improve this Doc View Source TooManyColumns Declaration public const string TooManyColumns = null Field Value Type Description String | Improve this Doc View Source TooManyConnections Declaration public const string TooManyConnections = null Field Value Type Description String | Improve this Doc View Source TooManyRows Declaration public const string TooManyRows = null Field Value Type Description String | Improve this Doc View Source TransactionIntegrityConstraintViolation Declaration public const string TransactionIntegrityConstraintViolation = null Field Value Type Description String | Improve this Doc View Source TransactionResolutionUnknown Declaration public const string TransactionResolutionUnknown = null Field Value Type Description String | Improve this Doc View Source TransactionRollback Declaration public const string TransactionRollback = null Field Value Type Description String | Improve this Doc View Source TriggeredActionException Declaration public const string TriggeredActionException = null Field Value Type Description String | Improve this Doc View Source TriggeredDataChangeViolation Declaration public const string TriggeredDataChangeViolation = null Field Value Type Description String | Improve this Doc View Source TriggerProtocolViolatedExternalRoutineInvocationException Declaration public const string TriggerProtocolViolatedExternalRoutineInvocationException = null Field Value Type Description String | Improve this Doc View Source TrimError Declaration public const string TrimError = null Field Value Type Description String | Improve this Doc View Source UndefinedColumn Declaration public const string UndefinedColumn = null Field Value Type Description String | Improve this Doc View Source UndefinedFile Declaration public const string UndefinedFile = null Field Value Type Description String | Improve this Doc View Source UndefinedFunction Declaration public const string UndefinedFunction = null Field Value Type Description String | Improve this Doc View Source UndefinedObject Declaration public const string UndefinedObject = null Field Value Type Description String | Improve this Doc View Source UndefinedParameter Declaration public const string UndefinedParameter = null Field Value Type Description String | Improve this Doc View Source UndefinedTable Declaration public const string UndefinedTable = null Field Value Type Description String | Improve this Doc View Source UniqueViolation Declaration public const string UniqueViolation = null Field Value Type Description String | Improve this Doc View Source UnterminatedCString Declaration public const string UnterminatedCString = null Field Value Type Description String | Improve this Doc View Source UntranslatableCharacter Declaration public const string UntranslatableCharacter = null Field Value Type Description String | Improve this Doc View Source Warning Declaration public const string Warning = null Field Value Type Description String | Improve this Doc View Source WindowingError Declaration public const string WindowingError = null Field Value Type Description String | Improve this Doc View Source WithCheckOptionViolation Declaration public const string WithCheckOptionViolation = null Field Value Type Description String | Improve this Doc View Source WrongObjectType Declaration public const string WrongObjectType = null Field Value Type Description String | Improve this Doc View Source ZeroLengthCharacterString Declaration public const string ZeroLengthCharacterString = null Field Value Type Description String"
  },
  "doc/api/Npgsql.PostgresException.html": {
    "href": "doc/api/Npgsql.PostgresException.html",
    "title": "Class PostgresException | Npgsql Documentation",
    "keywords": "Class PostgresException The exception that is thrown when the PostgreSQL backend reports errors (e.g. query SQL issues, constraint violations). Inheritance Object NpgsqlException PostgresException Inherited Members NpgsqlException.BatchCommand Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class PostgresException : NpgsqlException Remarks This exception only corresponds to a PostgreSQL-delivered error. Other errors (e.g. network issues) will be raised via NpgsqlException , and purely Npgsql-related issues which aren't related to the server will be raised via the standard CLR exceptions (e.g. ). See https://www.postgresql.org/docs/current/static/errcodes-appendix.html , https://www.postgresql.org/docs/current/static/protocol-error-fields.html Constructors | Improve this Doc View Source PostgresException(String, String, String, String) Creates a new instance. Declaration public PostgresException(string messageText, string severity, string invariantSeverity, string sqlState) Parameters Type Name Description String messageText String severity String invariantSeverity String sqlState | Improve this Doc View Source PostgresException(String, String, String, String, Nullable<String>, Nullable<String>, Int32, Int32, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>) Creates a new instance. Declaration public PostgresException(string messageText, string severity, string invariantSeverity, string sqlState, string? detail = null, string? hint = null, int position = 0, int internalPosition = 0, string? internalQuery = null, string? where = null, string? schemaName = null, string? tableName = null, string? columnName = null, string? dataTypeName = null, string? constraintName = null, string? file = null, string? line = null, string? routine = null) Parameters Type Name Description String messageText String severity String invariantSeverity String sqlState Nullable < String > detail Nullable < String > hint Int32 position Int32 internalPosition Nullable < String > internalQuery Nullable < String > where Nullable < String > schemaName Nullable < String > tableName Nullable < String > columnName Nullable < String > dataTypeName Nullable < String > constraintName Nullable < String > file Nullable < String > line Nullable < String > routine Properties | Improve this Doc View Source Code The SQLSTATE code for the error. Declaration public string Code { get; } Property Value Type Description String Remarks Always present. Constants are defined in PostgresErrorCodes . See https://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source ColumnName If the error was associated with a specific table column, the name of the column. (Refer to the schema and table name fields to identify the table.) Declaration public string? ColumnName { get; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source ConstraintName If the error was associated with a specific constraint, the name of the constraint. Refer to fields listed above for the associated table or domain. (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.) Declaration public string? ConstraintName { get; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source DataTypeName If the error was associated with a specific data type, the name of the data type. (Refer to the schema name field for the name of the data type's schema.) Declaration public string? DataTypeName { get; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Detail An optional secondary error message carrying more detail about the problem. May run to multiple lines. Declaration public string? Detail { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source File The file name of the source-code location where the error was reported. Declaration public string? File { get; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Hint An optional suggestion what to do about the problem. This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. May run to multiple lines. Declaration public string? Hint { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source InternalPosition This is defined the same as the Position field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client. The InternalQuery field will always appear when this field appears. 0 means not provided. Declaration public int InternalPosition { get; } Property Value Type Description Int32 | Improve this Doc View Source InternalQuery The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function. Declaration public string? InternalQuery { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source InvariantSeverity Severity of the error or notice, not localized. Always present since PostgreSQL 9.6. Declaration public string InvariantSeverity { get; } Property Value Type Description String | Improve this Doc View Source IsTransient Specifies whether the exception is considered transient, that is, whether retrying the operation could succeed (e.g. a network error). Check SqlState . Declaration public override bool IsTransient { get; } Property Value Type Description Boolean Overrides NpgsqlException.IsTransient | Improve this Doc View Source Line The line number of the source-code location where the error was reported. Declaration public string? Line { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source MessageText The primary human-readable error message. This should be accurate but terse. Declaration public string MessageText { get; } Property Value Type Description String Remarks Always present. | Improve this Doc View Source Position The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string. The first character has index 1, and positions are measured in characters not bytes. 0 means not provided. Declaration public int Position { get; } Property Value Type Description Int32 | Improve this Doc View Source Routine The name of the source-code routine reporting the error. Declaration public string? Routine { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source SchemaName If the error was associated with a specific database object, the name of the schema containing that object, if any. Declaration public string? SchemaName { get; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Severity Severity of the error or notice. Always present. Declaration public string Severity { get; } Property Value Type Description String | Improve this Doc View Source SqlState The SQLSTATE code for the error. Declaration public string SqlState { get; } Property Value Type Description String Remarks Always present. Constants are defined in PostgresErrorCodes . See https://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source TableName Table name: if the error was associated with a specific table, the name of the table. (Refer to the schema name field for the name of the table's schema.) Declaration public string? TableName { get; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Where An indication of the context in which the error occurred. Presently this includes a call stack traceback of active PL functions. The trace is one entry per line, most recent first. Declaration public string? Where { get; } Property Value Type Description Nullable < String > Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a with the data needed to serialize the target object. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The to populate with data. StreamingContext context The destination (see ) for this serialization. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "doc/api/Npgsql.PostgresNotice.html": {
    "href": "doc/api/Npgsql.PostgresNotice.html",
    "title": "Class PostgresNotice | Npgsql Documentation",
    "keywords": "Class PostgresNotice PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator initiates a \"fast\" database shutdown). Inheritance Object PostgresNotice Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class PostgresNotice : object Remarks https://www.postgresql.org/docs/current/static/protocol-flow.html#PROTOCOL-ASYNC Constructors | Improve this Doc View Source PostgresNotice(String, String, String, String) Creates a new instance. Declaration public PostgresNotice(string severity, string invariantSeverity, string sqlState, string messageText) Parameters Type Name Description String severity String invariantSeverity String sqlState String messageText | Improve this Doc View Source PostgresNotice(String, String, String, String, Nullable<String>, Nullable<String>, Int32, Int32, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>) Creates a new instance. Declaration public PostgresNotice(string messageText, string severity, string invariantSeverity, string sqlState, string? detail = null, string? hint = null, int position = 0, int internalPosition = 0, string? internalQuery = null, string? where = null, string? schemaName = null, string? tableName = null, string? columnName = null, string? dataTypeName = null, string? constraintName = null, string? file = null, string? line = null, string? routine = null) Parameters Type Name Description String messageText String severity String invariantSeverity String sqlState Nullable < String > detail Nullable < String > hint Int32 position Int32 internalPosition Nullable < String > internalQuery Nullable < String > where Nullable < String > schemaName Nullable < String > tableName Nullable < String > columnName Nullable < String > dataTypeName Nullable < String > constraintName Nullable < String > file Nullable < String > line Nullable < String > routine Properties | Improve this Doc View Source Code The SQLSTATE code for the error. Declaration public string Code { get; } Property Value Type Description String Remarks Always present. See https://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source ColumnName If the error was associated with a specific table column, the name of the column. (Refer to the schema and table name fields to identify the table.) Declaration public string? ColumnName { get; set; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source ConstraintName If the error was associated with a specific constraint, the name of the constraint. Refer to fields listed above for the associated table or domain. (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.) Declaration public string? ConstraintName { get; set; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source DataTypeName If the error was associated with a specific data type, the name of the data type. (Refer to the schema name field for the name of the data type's schema.) Declaration public string? DataTypeName { get; set; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Detail An optional secondary error message carrying more detail about the problem. May run to multiple lines. Declaration public string? Detail { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source File The file name of the source-code location where the error was reported. Declaration public string? File { get; set; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Hint An optional suggestion what to do about the problem. This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. May run to multiple lines. Declaration public string? Hint { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source InternalPosition This is defined the same as the Position field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client. The InternalQuery field will always appear when this field appears. 0 means not provided. Declaration public int InternalPosition { get; set; } Property Value Type Description Int32 | Improve this Doc View Source InternalQuery The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function. Declaration public string? InternalQuery { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source InvariantSeverity Severity of the error or notice, not localized. Always present since PostgreSQL 9.6. Declaration public string InvariantSeverity { get; } Property Value Type Description String | Improve this Doc View Source Line The line number of the source-code location where the error was reported. Declaration public string? Line { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source MessageText The primary human-readable error message. This should be accurate but terse. Declaration public string MessageText { get; set; } Property Value Type Description String Remarks Always present. | Improve this Doc View Source Position The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string. The first character has index 1, and positions are measured in characters not bytes. 0 means not provided. Declaration public int Position { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Routine The name of the source-code routine reporting the error. Declaration public string? Routine { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source SchemaName If the error was associated with a specific database object, the name of the schema containing that object, if any. Declaration public string? SchemaName { get; set; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Severity Severity of the error or notice. Always present. Declaration public string Severity { get; set; } Property Value Type Description String | Improve this Doc View Source SqlState The SQLSTATE code for the error. Declaration public string SqlState { get; set; } Property Value Type Description String Remarks Always present. See https://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source TableName Table name: if the error was associated with a specific table, the name of the table. (Refer to the schema name field for the name of the table's schema.) Declaration public string? TableName { get; set; } Property Value Type Description Nullable < String > Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Where An indication of the context in which the error occurred. Presently this includes a call stack traceback of active PL functions. The trace is one entry per line, most recent first. Declaration public string? Where { get; set; } Property Value Type Description Nullable < String >"
  },
  "doc/api/Npgsql.PostgresTypes.html": {
    "href": "doc/api/Npgsql.PostgresTypes.html",
    "title": "Namespace Npgsql.PostgresTypes | Npgsql Documentation",
    "keywords": "Namespace Npgsql.PostgresTypes Classes PostgresArrayType Represents a PostgreSQL array data type, which can hold several multiple values in a single column. PostgresBaseType Represents a PostgreSQL base data type, which is a simple scalar value. PostgresCompositeType Represents a PostgreSQL composite data type, which can hold multiple fields of varying types in a single column. PostgresCompositeType.Field Represents a field in a PostgreSQL composite data type. PostgresDomainType Represents a PostgreSQL domain type. PostgresEnumType Represents a PostgreSQL enum data type. PostgresMultirangeType Represents a PostgreSQL multirange data type. PostgresRangeType Represents a PostgreSQL range data type. PostgresType Represents a PostgreSQL data type, such as int4 or text, as discovered from pg_type. This class is abstract, see derived classes for concrete types of PostgreSQL types. UnknownBackendType Represents a PostgreSQL data type that isn't known to Npgsql and cannot be handled."
  },
  "doc/api/Npgsql.PostgresTypes.PostgresArrayType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresArrayType.html",
    "title": "Class PostgresArrayType | Npgsql Documentation",
    "keywords": "Class PostgresArrayType Represents a PostgreSQL array data type, which can hold several multiple values in a single column. Inheritance Object PostgresType PostgresArrayType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresArrayType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/arrays.html . Constructors | Improve this Doc View Source PostgresArrayType(String, String, UInt32, PostgresType) Constructs a representation of a PostgreSQL array data type. Declaration protected PostgresArrayType(string ns, string internalName, uint oid, PostgresType elementPostgresType) Parameters Type Name Description String ns String internalName UInt32 oid PostgresType elementPostgresType Properties | Improve this Doc View Source Element The PostgreSQL data type of the element contained within this array. Declaration public PostgresType Element { get; } Property Value Type Description PostgresType"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresBaseType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresBaseType.html",
    "title": "Class PostgresBaseType | Npgsql Documentation",
    "keywords": "Class PostgresBaseType Represents a PostgreSQL base data type, which is a simple scalar value. Inheritance Object PostgresType PostgresBaseType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresBaseType : PostgresType Constructors | Improve this Doc View Source PostgresBaseType(String, String, UInt32) Declaration protected PostgresBaseType(string ns, string internalName, uint oid) Parameters Type Name Description String ns String internalName UInt32 oid"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.Field.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.Field.html",
    "title": "Class PostgresCompositeType.Field | Npgsql Documentation",
    "keywords": "Class PostgresCompositeType.Field Represents a field in a PostgreSQL composite data type. Inheritance Object PostgresCompositeType.Field Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class Field : object Properties | Improve this Doc View Source Name The name of the composite field. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Type The type of the composite field. Declaration public PostgresType Type { get; } Property Value Type Description PostgresType Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.html",
    "title": "Class PostgresCompositeType | Npgsql Documentation",
    "keywords": "Class PostgresCompositeType Represents a PostgreSQL composite data type, which can hold multiple fields of varying types in a single column. Inheritance Object PostgresType PostgresCompositeType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresCompositeType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/rowtypes.html . Properties | Improve this Doc View Source Fields Holds the name and types for all fields. Declaration public IReadOnlyList<PostgresCompositeType.Field> Fields { get; } Property Value Type Description IReadOnlyList < PostgresCompositeType.Field >"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresDomainType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresDomainType.html",
    "title": "Class PostgresDomainType | Npgsql Documentation",
    "keywords": "Class PostgresDomainType Represents a PostgreSQL domain type. Inheritance Object PostgresType PostgresDomainType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresDomainType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/sql-createdomain.html . When PostgreSQL returns a RowDescription for a domain type, the type OID is the base type's (so fetching a domain type over text returns a RowDescription for text). However, when a composite type is returned, the type OID there is that of the domain, so we provide \"clean\" support for domain types. Constructors | Improve this Doc View Source PostgresDomainType(String, String, UInt32, PostgresType, Boolean) Constructs a representation of a PostgreSQL domain data type. Declaration protected PostgresDomainType(string ns, string name, uint oid, PostgresType baseType, bool notNull) Parameters Type Name Description String ns String name UInt32 oid PostgresType baseType Boolean notNull Properties | Improve this Doc View Source BaseType The PostgreSQL data type of the base type, i.e. the type this domain is based on. Declaration public PostgresType BaseType { get; } Property Value Type Description PostgresType | Improve this Doc View Source NotNull True if the domain has a NOT NULL constraint, otherwise false . Declaration public bool NotNull { get; } Property Value Type Description Boolean"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresEnumType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresEnumType.html",
    "title": "Class PostgresEnumType | Npgsql Documentation",
    "keywords": "Class PostgresEnumType Represents a PostgreSQL enum data type. Inheritance Object PostgresType PostgresEnumType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresEnumType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/datatype-enum.html . Constructors | Improve this Doc View Source PostgresEnumType(String, String, UInt32) Constructs a representation of a PostgreSQL enum data type. Declaration protected PostgresEnumType(string ns, string name, uint oid) Parameters Type Name Description String ns String name UInt32 oid Properties | Improve this Doc View Source Labels The enum's fields. Declaration public IReadOnlyList<string> Labels { get; } Property Value Type Description IReadOnlyList < String >"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresMultirangeType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresMultirangeType.html",
    "title": "Class PostgresMultirangeType | Npgsql Documentation",
    "keywords": "Class PostgresMultirangeType Represents a PostgreSQL multirange data type. Inheritance Object PostgresType PostgresMultirangeType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresMultirangeType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html . Multirange types were introduced in PostgreSQL 14. Constructors | Improve this Doc View Source PostgresMultirangeType(String, String, UInt32, PostgresRangeType) Constructs a representation of a PostgreSQL range data type. Declaration protected PostgresMultirangeType(string ns, string name, uint oid, PostgresRangeType rangePostgresType) Parameters Type Name Description String ns String name UInt32 oid PostgresRangeType rangePostgresType Properties | Improve this Doc View Source Subrange The PostgreSQL data type of the range of this multirange. Declaration public PostgresRangeType Subrange { get; } Property Value Type Description PostgresRangeType"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresRangeType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresRangeType.html",
    "title": "Class PostgresRangeType | Npgsql Documentation",
    "keywords": "Class PostgresRangeType Represents a PostgreSQL range data type. Inheritance Object PostgresType PostgresRangeType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresRangeType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html . Constructors | Improve this Doc View Source PostgresRangeType(String, String, UInt32, PostgresType) Constructs a representation of a PostgreSQL range data type. Declaration protected PostgresRangeType(string ns, string name, uint oid, PostgresType subtypePostgresType) Parameters Type Name Description String ns String name UInt32 oid PostgresType subtypePostgresType Properties | Improve this Doc View Source Multirange The PostgreSQL data type of the multirange of this range. Declaration public PostgresMultirangeType Multirange { get; } Property Value Type Description PostgresMultirangeType | Improve this Doc View Source Subtype The PostgreSQL data type of the subtype of this range. Declaration public PostgresType Subtype { get; } Property Value Type Description PostgresType"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresType.html",
    "title": "Class PostgresType | Npgsql Documentation",
    "keywords": "Class PostgresType Represents a PostgreSQL data type, such as int4 or text, as discovered from pg_type. This class is abstract, see derived classes for concrete types of PostgreSQL types. Inheritance Object PostgresType PostgresArrayType PostgresBaseType PostgresCompositeType PostgresDomainType PostgresEnumType PostgresMultirangeType PostgresRangeType UnknownBackendType Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public abstract class PostgresType : object Remarks Instances of this class are shared between connections to the same databases. For more info about what this class and its subclasses represent, see https://www.postgresql.org/docs/current/static/catalog-pg-type.html . Constructors | Improve this Doc View Source PostgresType(String, String, String, UInt32) Constructs a representation of a PostgreSQL data type. Declaration protected PostgresType(string ns, string name, string internalName, uint oid) Parameters Type Name Description String ns The data type's namespace (or schema). String name The data type's name. String internalName The data type's internal name (e.g. _int4 for integer[]). UInt32 oid The data type's OID. | Improve this Doc View Source PostgresType(String, String, UInt32) Constructs a representation of a PostgreSQL data type. Declaration protected PostgresType(string ns, string name, uint oid) Parameters Type Name Description String ns The data type's namespace (or schema). String name The data type's name. UInt32 oid The data type's OID. Properties | Improve this Doc View Source Array If a PostgreSQL array type exists for this type, it will be referenced here. Otherwise null. Declaration public PostgresArrayType Array { get; } Property Value Type Description PostgresArrayType | Improve this Doc View Source DisplayName A display name for this backend type, including the namespace unless it is pg_catalog (the namespace for all built-in types). Declaration public string DisplayName { get; } Property Value Type Description String | Improve this Doc View Source FullName The full name of the backend type, including its namespace. Declaration public string FullName { get; } Property Value Type Description String | Improve this Doc View Source InternalName The data type's internal PostgreSQL name (e.g. _int4 not integer[] ). See Name for a more user-friendly name. Declaration public string InternalName { get; } Property Value Type Description String | Improve this Doc View Source Name The data type's name. Declaration public string Name { get; } Property Value Type Description String Remarks Note that this is the standard, user-displayable type name (e.g. integer[]) rather than the internal PostgreSQL name as it is in pg_type (_int4). See InternalName for the latter. | Improve this Doc View Source Namespace The data type's namespace (or schema). Declaration public string Namespace { get; } Property Value Type Description String | Improve this Doc View Source OID The data type's OID - a unique id identifying the data type in a given database (in pg_type). Declaration public uint OID { get; } Property Value Type Description UInt32 | Improve this Doc View Source Range If a PostgreSQL range type exists for this type, it will be referenced here. Otherwise null. Declaration public PostgresRangeType Range { get; } Property Value Type Description PostgresRangeType Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String"
  },
  "doc/api/Npgsql.PostgresTypes.UnknownBackendType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.UnknownBackendType.html",
    "title": "Class UnknownBackendType | Npgsql Documentation",
    "keywords": "Class UnknownBackendType Represents a PostgreSQL data type that isn't known to Npgsql and cannot be handled. Inheritance Object PostgresType UnknownBackendType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class UnknownBackendType : PostgresType"
  },
  "doc/api/Npgsql.ProvideClientCertificatesCallback.html": {
    "href": "doc/api/Npgsql.ProvideClientCertificatesCallback.html",
    "title": "Delegate ProvideClientCertificatesCallback | Npgsql Documentation",
    "keywords": "Delegate ProvideClientCertificatesCallback Represents a method that allows the application to provide a certificate collection to be used for SSL client authentication Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void ProvideClientCertificatesCallback(X509CertificateCollection certificates); Parameters Type Name Description X509CertificateCollection certificates A to be filled with one or more client certificates."
  },
  "doc/api/Npgsql.ProvidePasswordCallback.html": {
    "href": "doc/api/Npgsql.ProvidePasswordCallback.html",
    "title": "Delegate ProvidePasswordCallback | Npgsql Documentation",
    "keywords": "Delegate ProvidePasswordCallback Represents a method that allows the application to provide a password at connection time in code rather than configuration Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate string ProvidePasswordCallback(string host, int port, string database, string username); Parameters Type Name Description String host Hostname Int32 port Port String database Database Name String username User Returns Type Description String A valid password for connecting to the database"
  },
  "doc/api/Npgsql.Replication.html": {
    "href": "doc/api/Npgsql.Replication.html",
    "title": "Namespace Npgsql.Replication | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication Classes LogicalReplicationConnection Represents a logical replication connection to a PostgreSQL server. PgOutputConnectionExtensions Extension methods to use LogicalReplicationConnection with the pg_output logical decoding plugin. PhysicalReplicationConnection Represents a physical replication connection to a PostgreSQL server. PhysicalReplicationSlot Wraps a replication slot that uses physical replication. ReplicationConnection Defines the core behavior of replication connections and provides the base class for LogicalReplicationConnection and PhysicalReplicationConnection . ReplicationMessage The common base class for all streaming replication messages ReplicationSlot Contains information about a newly-created replication slot. ReplicationSystemIdentification Contains server identification information returned from IdentifySystem(CancellationToken) . TestDecodingConnectionExtensions Extension methods to use LogicalReplicationConnection with the test_decoding logical decoding plugin. See https://www.postgresql.org/docs/current/test-decoding.html . XLogDataMessage A message representing a section of the WAL data stream. Structs ReplicationSlotOptions Contains information about a replication slot. TimelineHistoryFile Represents a PostgreSQL timeline history file Enums LogicalSlotSnapshotInitMode Decides what to do with the snapshot created during logical slot initialization."
  },
  "doc/api/Npgsql.Replication.Internal.html": {
    "href": "doc/api/Npgsql.Replication.Internal.html",
    "title": "Namespace Npgsql.Replication.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication.Internal Classes LogicalReplicationConnectionExtensions This API is for internal use and for implementing logical replication plugins. It is not meant to be consumed in common Npgsql usage scenarios. LogicalReplicationSlot Contains information about a newly-created logical replication slot."
  },
  "doc/api/Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions.html": {
    "href": "doc/api/Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions.html",
    "title": "Class LogicalReplicationConnectionExtensions | Npgsql Documentation",
    "keywords": "Class LogicalReplicationConnectionExtensions This API is for internal use and for implementing logical replication plugins. It is not meant to be consumed in common Npgsql usage scenarios. Inheritance Object LogicalReplicationConnectionExtensions Namespace : Npgsql.Replication.Internal Assembly : Npgsql.dll Syntax public static class LogicalReplicationConnectionExtensions : object Methods | Improve this Doc View Source CreateLogicalReplicationSlot(LogicalReplicationConnection, String, String, Boolean, Nullable<LogicalSlotSnapshotInitMode>, Boolean, CancellationToken) This API is for internal use and for implementing logical replication plugins. It is not meant to be consumed in common Npgsql usage scenarios. Declaration public static Task<ReplicationSlotOptions> CreateLogicalReplicationSlot(this LogicalReplicationConnection connection, string slotName, string outputPlugin, bool isTemporary = false, LogicalSlotSnapshotInitMode? slotSnapshotInitMode = null, bool twoPhase = false, CancellationToken cancellationToken = null) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for creating the replication slot String slotName The name of the slot to create. Must be a valid replication slot name (see https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION ). String outputPlugin The name of the output plugin used for logical decoding (see https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html ). Boolean isTemporary true if this replication slot shall be temporary one; otherwise false . Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished. Nullable < LogicalSlotSnapshotInitMode > slotSnapshotInitMode A LogicalSlotSnapshotInitMode to specify what to do with the snapshot created during logical slot initialization. Export , which is also the default, will export the snapshot for use in other sessions. This option can't be used inside a transaction. Use will use the snapshot for the current transaction executing the command. This option must be used in a transaction, and Use must be the first command run in that transaction. Finally, NoExport will just use the snapshot for logical decoding as normal but won't do anything else with it. Boolean twoPhase If true , this logical replication slot supports decoding of two-phase transactions. With this option, two-phase commands like PREPARE TRANSACTION, COMMIT PREPARED and ROLLBACK PREPARED are decoded and transmitted. The transaction will be decoded and transmitted at PREPARE TRANSACTION time. The default is false . CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < ReplicationSlotOptions > A representing a ReplicationSlotOptions class that can be used to initialize instances of ReplicationSlot subclasses. Remarks Creates a new replication slot and returns information about the newly-created slot. | Improve this Doc View Source StartLogicalReplication(LogicalReplicationConnection, LogicalReplicationSlot, CancellationToken, Nullable<NpgsqlLogSequenceNumber>, Nullable<IEnumerable<KeyValuePair<String, Nullable<String>>>>, Boolean) Instructs the server to start streaming the WAL for logical replication, starting at WAL location walLocation or at the slot's consistent point if walLocation isn't specified. The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public static IAsyncEnumerable<XLogDataMessage> StartLogicalReplication(this LogicalReplicationConnection connection, LogicalReplicationSlot slot, CancellationToken cancellationToken, NpgsqlLogSequenceNumber? walLocation = null, IEnumerable<KeyValuePair<string, string?>>? options = null, bool bypassingStream = false) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for starting replication LogicalReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. CancellationToken cancellationToken The token to monitor for stopping the replication. Nullable < NpgsqlLogSequenceNumber > walLocation The WAL location to begin streaming at. Nullable < IEnumerable < KeyValuePair < String , Nullable < String >>>> options The collection of options passed to the slot's logical decoding plugin. Boolean bypassingStream Whether the plugin will be bypassing Data and reading directly from the buffer. Returns Type Description IAsyncEnumerable < XLogDataMessage > A representing an that can be used to stream WAL entries in form of XLogDataMessage instances."
  },
  "doc/api/Npgsql.Replication.Internal.LogicalReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.Internal.LogicalReplicationSlot.html",
    "title": "Class LogicalReplicationSlot | Npgsql Documentation",
    "keywords": "Class LogicalReplicationSlot Contains information about a newly-created logical replication slot. Inheritance Object ReplicationSlot LogicalReplicationSlot PgOutputReplicationSlot TestDecodingReplicationSlot Inherited Members ReplicationSlot.Name Namespace : Npgsql.Replication.Internal Assembly : Npgsql.dll Syntax public abstract class LogicalReplicationSlot : ReplicationSlot Constructors | Improve this Doc View Source LogicalReplicationSlot(String, ReplicationSlotOptions) Creates a new logical replication slot Declaration protected LogicalReplicationSlot(string outputPlugin, ReplicationSlotOptions replicationSlotOptions) Parameters Type Name Description String outputPlugin The logical decoding output plugin to the corresponding replication slot was created for. ReplicationSlotOptions replicationSlotOptions A ReplicationSlotOptions struct with information to create the replication slot. Properties | Improve this Doc View Source ConsistentPoint The WAL location at which the slot became consistent. This is the earliest location from which streaming can start on this replication slot. Declaration public NpgsqlLogSequenceNumber ConsistentPoint { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source OutputPlugin The name of the output plugin used by the newly-created logical replication slot. Declaration public string OutputPlugin { get; } Property Value Type Description String | Improve this Doc View Source SnapshotName The identifier of the snapshot exported by the command. The snapshot is valid until a new command is executed on this connection or the replication connection is closed. Declaration public string? SnapshotName { get; } Property Value Type Description Nullable < String >"
  },
  "doc/api/Npgsql.Replication.LogicalReplicationConnection.html": {
    "href": "doc/api/Npgsql.Replication.LogicalReplicationConnection.html",
    "title": "Class LogicalReplicationConnection | Npgsql Documentation",
    "keywords": "Class LogicalReplicationConnection Represents a logical replication connection to a PostgreSQL server. Inheritance Object ReplicationConnection LogicalReplicationConnection Inherited Members ReplicationConnection.ConnectionString ReplicationConnection.LastReceivedLsn ReplicationConnection.LastFlushedLsn ReplicationConnection.LastAppliedLsn ReplicationConnection.WalReceiverStatusInterval ReplicationConnection.WalReceiverTimeout ReplicationConnection.PostgreSqlVersion ReplicationConnection.ServerVersion ReplicationConnection.CommandTimeout ReplicationConnection.Encoding ReplicationConnection.ProcessID ReplicationConnection.Open(CancellationToken) ReplicationConnection.DisposeAsync() ReplicationConnection.IdentifySystem(CancellationToken) ReplicationConnection.Show(String, CancellationToken) ReplicationConnection.TimelineHistory(UInt32, CancellationToken) ReplicationConnection.SetReplicationStatus(NpgsqlLogSequenceNumber) ReplicationConnection.SendStatusUpdate(CancellationToken) ReplicationConnection.DropReplicationSlot(String, Boolean, CancellationToken) Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public sealed class LogicalReplicationConnection : ReplicationConnection Constructors | Improve this Doc View Source LogicalReplicationConnection() Initializes a new instance of LogicalReplicationConnection . Declaration public LogicalReplicationConnection() | Improve this Doc View Source LogicalReplicationConnection(Nullable<String>) Initializes a new instance of LogicalReplicationConnection with the given connection string. Declaration public LogicalReplicationConnection(string? connectionString) Parameters Type Name Description Nullable < String > connectionString The connection used to open the PostgreSQL database. Extension Methods PgOutputConnectionExtensions.CreatePgOutputReplicationSlot(LogicalReplicationConnection, String, Boolean, Nullable<LogicalSlotSnapshotInitMode>, Boolean, CancellationToken) PgOutputConnectionExtensions.StartReplication(LogicalReplicationConnection, PgOutputReplicationSlot, PgOutputReplicationOptions, CancellationToken, Nullable<NpgsqlLogSequenceNumber>) TestDecodingConnectionExtensions.CreateTestDecodingReplicationSlot(LogicalReplicationConnection, String, Boolean, Nullable<LogicalSlotSnapshotInitMode>, Boolean, CancellationToken) TestDecodingConnectionExtensions.StartReplication(LogicalReplicationConnection, TestDecodingReplicationSlot, CancellationToken, TestDecodingOptions, Nullable<NpgsqlLogSequenceNumber>) LogicalReplicationConnectionExtensions.CreateLogicalReplicationSlot(LogicalReplicationConnection, String, String, Boolean, Nullable<LogicalSlotSnapshotInitMode>, Boolean, CancellationToken) LogicalReplicationConnectionExtensions.StartLogicalReplication(LogicalReplicationConnection, LogicalReplicationSlot, CancellationToken, Nullable<NpgsqlLogSequenceNumber>, Nullable<IEnumerable<KeyValuePair<String, Nullable<String>>>>, Boolean)"
  },
  "doc/api/Npgsql.Replication.LogicalSlotSnapshotInitMode.html": {
    "href": "doc/api/Npgsql.Replication.LogicalSlotSnapshotInitMode.html",
    "title": "Enum LogicalSlotSnapshotInitMode | Npgsql Documentation",
    "keywords": "Enum LogicalSlotSnapshotInitMode Decides what to do with the snapshot created during logical slot initialization. Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public enum LogicalSlotSnapshotInitMode : int Fields Name Description Export Export the snapshot for use in other sessions. This is the default. This option can't be used inside a transaction. NoExport Just use the snapshot for logical decoding as normal but don't do anything else with it. Use Use the snapshot for the current transaction executing the command. This option must be used in a transaction, and CREATE_REPLICATION_SLOT must be the first command run in that transaction."
  },
  "doc/api/Npgsql.Replication.PgOutput.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.html",
    "title": "Namespace Npgsql.Replication.PgOutput | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication.PgOutput Classes PgOutputReplicationOptions Options to be passed to the pgoutput plugin PgOutputReplicationSlot Acts as a proxy for a logical replication slot initialized for for the logical streaming replication protocol (pgoutput logical decoding plugin). ReplicationTuple Represents a streaming tuple containing ReplicationValue . ReplicationValue Represents a column value in a logical replication session. Enums TupleDataKind The kind of data transmitted for a tuple in a Logical Replication Protocol message."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.BeginMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.BeginMessage.html",
    "title": "Class BeginMessage | Npgsql Documentation",
    "keywords": "Class BeginMessage Logical Replication Protocol begin message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage BeginMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class BeginMessage : TransactionControlMessage Properties | Improve this Doc View Source TransactionCommitTimestamp Commit timestamp of the transaction. The value is in number of microseconds since PostgreSQL epoch (2000-01-01). Declaration public DateTime TransactionCommitTimestamp { get; } Property Value Type Description DateTime | Improve this Doc View Source TransactionFinalLsn The final LSN of the transaction. Declaration public NpgsqlLogSequenceNumber TransactionFinalLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.BeginPrepareMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.BeginPrepareMessage.html",
    "title": "Class BeginPrepareMessage | Npgsql Documentation",
    "keywords": "Class BeginPrepareMessage Logical Replication Protocol begin prepare message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage PrepareMessageBase BeginPrepareMessage Inherited Members PrepareMessageBase.PrepareLsn PrepareMessageBase.PrepareEndLsn PrepareMessageBase.TransactionPrepareTimestamp PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class BeginPrepareMessage : PrepareMessageBase"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.CommitMessage.CommitFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.CommitMessage.CommitFlags.html",
    "title": "Enum CommitMessage.CommitFlags | Npgsql Documentation",
    "keywords": "Enum CommitMessage.CommitFlags Flags for the commit. Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public enum CommitFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.CommitMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.CommitMessage.html",
    "title": "Class CommitMessage | Npgsql Documentation",
    "keywords": "Class CommitMessage Logical Replication Protocol commit message Inheritance Object ReplicationMessage PgOutputReplicationMessage CommitMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class CommitMessage : PgOutputReplicationMessage Properties | Improve this Doc View Source CommitLsn The LSN of the commit. Declaration public NpgsqlLogSequenceNumber CommitLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source Flags Flags; currently unused. Declaration public CommitMessage.CommitFlags Flags { get; } Property Value Type Description CommitMessage.CommitFlags | Improve this Doc View Source TransactionCommitTimestamp Commit timestamp of the transaction. Declaration public DateTime TransactionCommitTimestamp { get; } Property Value Type Description DateTime | Improve this Doc View Source TransactionEndLsn The end LSN of the transaction. Declaration public NpgsqlLogSequenceNumber TransactionEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.CommitPreparedFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.CommitPreparedFlags.html",
    "title": "Enum CommitPreparedMessage.CommitPreparedFlags | Npgsql Documentation",
    "keywords": "Enum CommitPreparedMessage.CommitPreparedFlags Flags for the commit prepared; currently unused. Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public enum CommitPreparedFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.html",
    "title": "Class CommitPreparedMessage | Npgsql Documentation",
    "keywords": "Class CommitPreparedMessage Logical Replication Protocol commit prepared message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage CommitPreparedMessage Inherited Members PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class CommitPreparedMessage : PreparedTransactionControlMessage Properties | Improve this Doc View Source CommitPreparedEndLsn The end LSN of the commit prepared transaction. Declaration public NpgsqlLogSequenceNumber CommitPreparedEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source CommitPreparedLsn The LSN of the commit prepared. Declaration public NpgsqlLogSequenceNumber CommitPreparedLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source Flags Flags for the commit prepared; currently unused. Declaration public CommitPreparedMessage.CommitPreparedFlags Flags { get; } Property Value Type Description CommitPreparedMessage.CommitPreparedFlags | Improve this Doc View Source TransactionCommitTimestamp Commit timestamp of the transaction. Declaration public DateTime TransactionCommitTimestamp { get; } Property Value Type Description DateTime"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.DefaultUpdateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.DefaultUpdateMessage.html",
    "title": "Class DefaultUpdateMessage | Npgsql Documentation",
    "keywords": "Class DefaultUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to DEFAULT. Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage UpdateMessage DefaultUpdateMessage Inherited Members UpdateMessage.Relation UpdateMessage.RelationId TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public class DefaultUpdateMessage : UpdateMessage Properties | Improve this Doc View Source NewRow Columns representing the new row. Declaration public override ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple Overrides UpdateMessage.NewRow"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.DeleteMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.DeleteMessage.html",
    "title": "Class DeleteMessage | Npgsql Documentation",
    "keywords": "Class DeleteMessage Abstract base class for Logical Replication Protocol delete message types. Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage DeleteMessage FullDeleteMessage KeyDeleteMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public abstract class DeleteMessage : TransactionalMessage Properties | Improve this Doc View Source Relation The relation for this InsertMessage . Declaration public RelationMessage Relation { get; } Property Value Type Description RelationMessage | Improve this Doc View Source RelationId ID of the relation corresponding to the ID in the relation message. Declaration public uint RelationId { get; } Property Value Type Description UInt32"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.FullDeleteMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.FullDeleteMessage.html",
    "title": "Class FullDeleteMessage | Npgsql Documentation",
    "keywords": "Class FullDeleteMessage Logical Replication Protocol delete message for tables with REPLICA IDENTITY REPLICA IDENTITY set to FULL. Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage DeleteMessage FullDeleteMessage Inherited Members DeleteMessage.Relation DeleteMessage.RelationId TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class FullDeleteMessage : DeleteMessage Properties | Improve this Doc View Source OldRow Columns representing the deleted row. Declaration public ReplicationTuple OldRow { get; } Property Value Type Description ReplicationTuple"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.FullUpdateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.FullUpdateMessage.html",
    "title": "Class FullUpdateMessage | Npgsql Documentation",
    "keywords": "Class FullUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to FULL. Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage UpdateMessage FullUpdateMessage Inherited Members UpdateMessage.Relation UpdateMessage.RelationId TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class FullUpdateMessage : UpdateMessage Properties | Improve this Doc View Source NewRow Columns representing the new row. Declaration public override ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple Overrides UpdateMessage.NewRow | Improve this Doc View Source OldRow Columns representing the old row. Declaration public ReplicationTuple OldRow { get; } Property Value Type Description ReplicationTuple"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.html",
    "title": "Namespace Npgsql.Replication.PgOutput.Messages | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication.PgOutput.Messages Classes BeginMessage Logical Replication Protocol begin message BeginPrepareMessage Logical Replication Protocol begin prepare message CommitMessage Logical Replication Protocol commit message CommitPreparedMessage Logical Replication Protocol commit prepared message DefaultUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to DEFAULT. DeleteMessage Abstract base class for Logical Replication Protocol delete message types. FullDeleteMessage Logical Replication Protocol delete message for tables with REPLICA IDENTITY REPLICA IDENTITY set to FULL. FullUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to FULL. IndexUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to USING INDEX. InsertMessage Logical Replication Protocol insert message KeyDeleteMessage Logical Replication Protocol delete message for tables with REPLICA IDENTITY set to DEFAULT or USING INDEX. LogicalDecodingMessage Logical Replication Protocol logical decoding message OriginMessage Logical Replication Protocol origin message PgOutputReplicationMessage The base class of all Logical Replication Protocol Messages PreparedTransactionControlMessage Abstract base class for Logical Replication Protocol prepare and begin prepare message PrepareMessage Logical Replication Protocol prepare message PrepareMessageBase Abstract base class for the logical replication protocol begin prepare and prepare message RelationMessage Logical Replication Protocol relation message RollbackPreparedMessage Logical Replication Protocol rollback prepared message StreamAbortMessage Logical Replication Protocol stream abort message StreamCommitMessage Logical Replication Protocol stream commit message StreamPrepareMessage Logical Replication Protocol stream prepare message StreamStartMessage Logical Replication Protocol stream start message StreamStopMessage Logical Replication Protocol stream stop message TransactionalMessage The common base class for all streaming replication messages that can be part of a streaming transaction (protocol V2) TransactionControlMessage The common base class for all replication messages that set the transaction xid of a transaction TruncateMessage Logical Replication Protocol truncate message TypeMessage Logical Replication Protocol type message UpdateMessage Abstract base class for Logical Replication Protocol delete message types. Structs RelationMessage.Column Represents a column in a Logical Replication Protocol relation message RelationMessageColumn Represents a column in a Logical Replication Protocol relation message Enums CommitMessage.CommitFlags Flags for the commit. CommitPreparedMessage.CommitPreparedFlags Flags for the commit prepared; currently unused. PrepareMessage.PrepareFlags Flags for the prepare; currently unused. RelationMessage.Column.ColumnFlags Flags for the column. RelationMessage.ReplicaIdentitySetting Replica identity setting for the relation (same as relreplident in pg_class ). RollbackPreparedMessage.RollbackPreparedFlags Flags for the rollback prepared; currently unused. StreamPrepareMessage.StreamPrepareFlags Flags for the prepare; currently unused. TruncateMessage.TruncateOptions Enum representing the additional options for the TRUNCATE command as flags"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage.html",
    "title": "Class IndexUpdateMessage | Npgsql Documentation",
    "keywords": "Class IndexUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to USING INDEX. Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage UpdateMessage IndexUpdateMessage Inherited Members UpdateMessage.Relation UpdateMessage.RelationId TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class IndexUpdateMessage : UpdateMessage Properties | Improve this Doc View Source Key Columns representing the key. Declaration public ReplicationTuple Key { get; } Property Value Type Description ReplicationTuple | Improve this Doc View Source NewRow Columns representing the new row. Declaration public override ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple Overrides UpdateMessage.NewRow"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.InsertMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.InsertMessage.html",
    "title": "Class InsertMessage | Npgsql Documentation",
    "keywords": "Class InsertMessage Logical Replication Protocol insert message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage InsertMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class InsertMessage : TransactionalMessage Properties | Improve this Doc View Source NewRow Columns representing the new row. Declaration public ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple | Improve this Doc View Source Relation The relation for this InsertMessage . Declaration public RelationMessage Relation { get; } Property Value Type Description RelationMessage | Improve this Doc View Source RelationId ID of the relation corresponding to the ID in the relation message. Declaration public uint RelationId { get; } Property Value Type Description UInt32"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage.html",
    "title": "Class KeyDeleteMessage | Npgsql Documentation",
    "keywords": "Class KeyDeleteMessage Logical Replication Protocol delete message for tables with REPLICA IDENTITY set to DEFAULT or USING INDEX. Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage DeleteMessage KeyDeleteMessage Inherited Members DeleteMessage.Relation DeleteMessage.RelationId TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class KeyDeleteMessage : DeleteMessage Properties | Improve this Doc View Source Key Columns representing the key. Declaration public ReplicationTuple Key { get; } Property Value Type Description ReplicationTuple"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.html",
    "title": "Class LogicalDecodingMessage | Npgsql Documentation",
    "keywords": "Class LogicalDecodingMessage Logical Replication Protocol logical decoding message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage LogicalDecodingMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class LogicalDecodingMessage : TransactionalMessage Properties | Improve this Doc View Source Data The content of the logical decoding message. Declaration public Stream Data { get; } Property Value Type Description Stream | Improve this Doc View Source Flags Flags; Either 0 for no flags or 1 if the logical decoding message is transactional. Declaration public byte Flags { get; } Property Value Type Description Byte | Improve this Doc View Source MessageLsn The LSN of the logical decoding message. Declaration public NpgsqlLogSequenceNumber MessageLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source Prefix The prefix of the logical decoding message. Declaration public string Prefix { get; } Property Value Type Description String"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.OriginMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.OriginMessage.html",
    "title": "Class OriginMessage | Npgsql Documentation",
    "keywords": "Class OriginMessage Logical Replication Protocol origin message Inheritance Object ReplicationMessage PgOutputReplicationMessage OriginMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class OriginMessage : PgOutputReplicationMessage Properties | Improve this Doc View Source OriginCommitLsn The LSN of the commit on the origin server. Declaration public NpgsqlLogSequenceNumber OriginCommitLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source OriginName Name of the origin. Declaration public string OriginName { get; } Property Value Type Description String"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage.html",
    "title": "Class PgOutputReplicationMessage | Npgsql Documentation",
    "keywords": "Class PgOutputReplicationMessage The base class of all Logical Replication Protocol Messages Inheritance Object ReplicationMessage PgOutputReplicationMessage CommitMessage OriginMessage StreamStopMessage TransactionalMessage TransactionControlMessage Inherited Members ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public abstract class PgOutputReplicationMessage : ReplicationMessage Remarks See https://www.postgresql.org/docs/current/protocol-logicalrep-message-formats.html for details about the protocol. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PreparedTransactionControlMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PreparedTransactionControlMessage.html",
    "title": "Class PreparedTransactionControlMessage | Npgsql Documentation",
    "keywords": "Class PreparedTransactionControlMessage Abstract base class for Logical Replication Protocol prepare and begin prepare message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage CommitPreparedMessage PrepareMessageBase RollbackPreparedMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public abstract class PreparedTransactionControlMessage : TransactionControlMessage Properties | Improve this Doc View Source TransactionGid The user defined GID of the two-phase transaction. Declaration public string TransactionGid { get; } Property Value Type Description String"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessage.html",
    "title": "Class PrepareMessage | Npgsql Documentation",
    "keywords": "Class PrepareMessage Logical Replication Protocol prepare message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage PrepareMessageBase PrepareMessage Inherited Members PrepareMessageBase.PrepareLsn PrepareMessageBase.PrepareEndLsn PrepareMessageBase.TransactionPrepareTimestamp PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class PrepareMessage : PrepareMessageBase Properties | Improve this Doc View Source Flags Flags for the prepare; currently unused. Declaration public PrepareMessage.PrepareFlags Flags { get; } Property Value Type Description PrepareMessage.PrepareFlags"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessage.PrepareFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessage.PrepareFlags.html",
    "title": "Enum PrepareMessage.PrepareFlags | Npgsql Documentation",
    "keywords": "Enum PrepareMessage.PrepareFlags Flags for the prepare; currently unused. Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public enum PrepareFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessageBase.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessageBase.html",
    "title": "Class PrepareMessageBase | Npgsql Documentation",
    "keywords": "Class PrepareMessageBase Abstract base class for the logical replication protocol begin prepare and prepare message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage PrepareMessageBase BeginPrepareMessage PrepareMessage StreamPrepareMessage Inherited Members PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public abstract class PrepareMessageBase : PreparedTransactionControlMessage Properties | Improve this Doc View Source PrepareEndLsn The end LSN of the prepared transaction. Declaration public NpgsqlLogSequenceNumber PrepareEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source PrepareLsn The LSN of the prepare. Declaration public NpgsqlLogSequenceNumber PrepareLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source TransactionPrepareTimestamp Prepare timestamp of the transaction. Declaration public DateTime TransactionPrepareTimestamp { get; } Property Value Type Description DateTime"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.ColumnFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.ColumnFlags.html",
    "title": "Enum RelationMessage.Column.ColumnFlags | Npgsql Documentation",
    "keywords": "Enum RelationMessage.Column.ColumnFlags Flags for the column. Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public enum ColumnFlags : int Fields Name Description None No flags. PartOfKey Marks the column as part of the key."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.html",
    "title": "Struct RelationMessage.Column | Npgsql Documentation",
    "keywords": "Struct RelationMessage.Column Represents a column in a Logical Replication Protocol relation message Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public readonly struct Column Properties | Improve this Doc View Source ColumnName Name of the column. Declaration public readonly string ColumnName { get; } Property Value Type Description String | Improve this Doc View Source DataTypeId ID of the column's data type. Declaration public readonly uint DataTypeId { get; } Property Value Type Description UInt32 | Improve this Doc View Source Flags Flags for the column. Declaration public readonly RelationMessage.Column.ColumnFlags Flags { get; } Property Value Type Description RelationMessage.Column.ColumnFlags | Improve this Doc View Source TypeModifier Type modifier of the column (atttypmod). Declaration public readonly int TypeModifier { get; } Property Value Type Description Int32"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.html",
    "title": "Class RelationMessage | Npgsql Documentation",
    "keywords": "Class RelationMessage Logical Replication Protocol relation message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage RelationMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class RelationMessage : TransactionalMessage Properties | Improve this Doc View Source Columns Relation columns Declaration public IReadOnlyList<RelationMessage.Column> Columns { get; } Property Value Type Description IReadOnlyList < RelationMessage.Column > | Improve this Doc View Source Namespace Namespace (empty string for pg_catalog). Declaration public string Namespace { get; } Property Value Type Description String | Improve this Doc View Source RelationId ID of the relation. Declaration public uint RelationId { get; } Property Value Type Description UInt32 | Improve this Doc View Source RelationName Relation name. Declaration public string RelationName { get; } Property Value Type Description String | Improve this Doc View Source ReplicaIdentity Replica identity setting for the relation (same as relreplident in pg_class ): columns used to form “replica identity” for rows. Declaration public RelationMessage.ReplicaIdentitySetting ReplicaIdentity { get; } Property Value Type Description RelationMessage.ReplicaIdentitySetting"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentitySetting.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentitySetting.html",
    "title": "Enum RelationMessage.ReplicaIdentitySetting | Npgsql Documentation",
    "keywords": "Enum RelationMessage.ReplicaIdentitySetting Replica identity setting for the relation (same as relreplident in pg_class ). Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public enum ReplicaIdentitySetting : byte Remarks See https://www.postgresql.org/docs/current/catalog-pg-class.html Fields Name Description AllColumns All columns. Default Default (primary key, if any). IndexWithIndIsReplIdent Index with indisreplident set (same as nothing if the index used has been dropped) Nothing Nothing."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.html",
    "title": "Struct RelationMessageColumn | Npgsql Documentation",
    "keywords": "Struct RelationMessageColumn Represents a column in a Logical Replication Protocol relation message Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public readonly struct RelationMessageColumn Properties | Improve this Doc View Source ColumnName Name of the column. Declaration public readonly string ColumnName { get; } Property Value Type Description String | Improve this Doc View Source DataTypeId ID of the column's data type. Declaration public readonly uint DataTypeId { get; } Property Value Type Description UInt32 | Improve this Doc View Source Flags Flags for the column. Currently can be either 0 for no flags or 1 which marks the column as part of the key. Declaration public readonly byte Flags { get; } Property Value Type Description Byte | Improve this Doc View Source TypeModifier Type modifier of the column (atttypmod). Declaration public readonly int TypeModifier { get; } Property Value Type Description Int32"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.html",
    "title": "Class RollbackPreparedMessage | Npgsql Documentation",
    "keywords": "Class RollbackPreparedMessage Logical Replication Protocol rollback prepared message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage RollbackPreparedMessage Inherited Members PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class RollbackPreparedMessage : PreparedTransactionControlMessage Properties | Improve this Doc View Source Flags Flags for the rollback prepared; currently unused. Declaration public RollbackPreparedMessage.RollbackPreparedFlags Flags { get; } Property Value Type Description RollbackPreparedMessage.RollbackPreparedFlags | Improve this Doc View Source PreparedTransactionEndLsn The end LSN of the prepared transaction. Declaration public NpgsqlLogSequenceNumber PreparedTransactionEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source RollbackPreparedEndLsn The end LSN of the rollback prepared transaction. Declaration public NpgsqlLogSequenceNumber RollbackPreparedEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source TransactionPrepareTimestamp Prepare timestamp of the transaction. Declaration public DateTime TransactionPrepareTimestamp { get; } Property Value Type Description DateTime | Improve this Doc View Source TransactionRollbackTimestamp Rollback timestamp of the transaction. Declaration public DateTime TransactionRollbackTimestamp { get; } Property Value Type Description DateTime"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.RollbackPreparedFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.RollbackPreparedFlags.html",
    "title": "Enum RollbackPreparedMessage.RollbackPreparedFlags | Npgsql Documentation",
    "keywords": "Enum RollbackPreparedMessage.RollbackPreparedFlags Flags for the rollback prepared; currently unused. Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public enum RollbackPreparedFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.html",
    "title": "Class StreamAbortMessage | Npgsql Documentation",
    "keywords": "Class StreamAbortMessage Logical Replication Protocol stream abort message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage StreamAbortMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class StreamAbortMessage : TransactionControlMessage Properties | Improve this Doc View Source SubtransactionXid Xid of the subtransaction (will be same as xid of the transaction for top-level transactions). Declaration public uint SubtransactionXid { get; } Property Value Type Description UInt32"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.html",
    "title": "Class StreamCommitMessage | Npgsql Documentation",
    "keywords": "Class StreamCommitMessage Logical Replication Protocol stream commit message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage StreamCommitMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class StreamCommitMessage : TransactionControlMessage Properties | Improve this Doc View Source CommitLsn The LSN of the commit. Declaration public NpgsqlLogSequenceNumber CommitLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source Flags Flags; currently unused (must be 0). Declaration public byte Flags { get; } Property Value Type Description Byte | Improve this Doc View Source TransactionCommitTimestamp Commit timestamp of the transaction. Declaration public DateTime TransactionCommitTimestamp { get; } Property Value Type Description DateTime | Improve this Doc View Source TransactionEndLsn The end LSN of the transaction. Declaration public NpgsqlLogSequenceNumber TransactionEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.html",
    "title": "Class StreamPrepareMessage | Npgsql Documentation",
    "keywords": "Class StreamPrepareMessage Logical Replication Protocol stream prepare message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage PrepareMessageBase StreamPrepareMessage Inherited Members PrepareMessageBase.PrepareLsn PrepareMessageBase.PrepareEndLsn PrepareMessageBase.TransactionPrepareTimestamp PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class StreamPrepareMessage : PrepareMessageBase Properties | Improve this Doc View Source Flags Flags for the prepare; currently unused. Declaration public StreamPrepareMessage.StreamPrepareFlags Flags { get; } Property Value Type Description StreamPrepareMessage.StreamPrepareFlags"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.StreamPrepareFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.StreamPrepareFlags.html",
    "title": "Enum StreamPrepareMessage.StreamPrepareFlags | Npgsql Documentation",
    "keywords": "Enum StreamPrepareMessage.StreamPrepareFlags Flags for the prepare; currently unused. Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public enum StreamPrepareFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamStartMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamStartMessage.html",
    "title": "Class StreamStartMessage | Npgsql Documentation",
    "keywords": "Class StreamStartMessage Logical Replication Protocol stream start message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage StreamStartMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class StreamStartMessage : TransactionControlMessage Properties | Improve this Doc View Source StreamSegmentIndicator A value of 1 indicates this is the first stream segment for this XID, 0 for any other stream segment. Declaration public byte StreamSegmentIndicator { get; } Property Value Type Description Byte"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamStopMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamStopMessage.html",
    "title": "Class StreamStopMessage | Npgsql Documentation",
    "keywords": "Class StreamStopMessage Logical Replication Protocol stream stop message Inheritance Object ReplicationMessage PgOutputReplicationMessage StreamStopMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class StreamStopMessage : PgOutputReplicationMessage"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TransactionalMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TransactionalMessage.html",
    "title": "Class TransactionalMessage | Npgsql Documentation",
    "keywords": "Class TransactionalMessage The common base class for all streaming replication messages that can be part of a streaming transaction (protocol V2) Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage DeleteMessage InsertMessage LogicalDecodingMessage RelationMessage TruncateMessage TypeMessage UpdateMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public abstract class TransactionalMessage : PgOutputReplicationMessage Properties | Improve this Doc View Source TransactionXid Xid of the transaction (only present for streamed transactions). Declaration public uint? TransactionXid { get; } Property Value Type Description Nullable < UInt32 >"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TransactionControlMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TransactionControlMessage.html",
    "title": "Class TransactionControlMessage | Npgsql Documentation",
    "keywords": "Class TransactionControlMessage The common base class for all replication messages that set the transaction xid of a transaction Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage BeginMessage PreparedTransactionControlMessage StreamAbortMessage StreamCommitMessage StreamStartMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public abstract class TransactionControlMessage : PgOutputReplicationMessage Properties | Improve this Doc View Source TransactionXid Xid of the transaction. Declaration public uint TransactionXid { get; } Property Value Type Description UInt32"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TruncateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TruncateMessage.html",
    "title": "Class TruncateMessage | Npgsql Documentation",
    "keywords": "Class TruncateMessage Logical Replication Protocol truncate message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage TruncateMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class TruncateMessage : TransactionalMessage Properties | Improve this Doc View Source Options Option flags for TRUNCATE Declaration public TruncateMessage.TruncateOptions Options { get; } Property Value Type Description TruncateMessage.TruncateOptions | Improve this Doc View Source Relations The relations being truncated. Declaration public IReadOnlyList<RelationMessage> Relations { get; } Property Value Type Description IReadOnlyList < RelationMessage >"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TruncateMessage.TruncateOptions.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TruncateMessage.TruncateOptions.html",
    "title": "Enum TruncateMessage.TruncateOptions | Npgsql Documentation",
    "keywords": "Enum TruncateMessage.TruncateOptions Enum representing the additional options for the TRUNCATE command as flags Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public enum TruncateOptions : byte Fields Name Description Cascade CASCADE was specified None No additional option was specified RestartIdentity RESTART IDENTITY was specified"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TypeMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TypeMessage.html",
    "title": "Class TypeMessage | Npgsql Documentation",
    "keywords": "Class TypeMessage Logical Replication Protocol type message Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage TypeMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public sealed class TypeMessage : TransactionalMessage Properties | Improve this Doc View Source Name Name of the data type. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Namespace Namespace (empty string for pg_catalog). Declaration public string Namespace { get; } Property Value Type Description String | Improve this Doc View Source TypeId ID of the data type. Declaration public uint TypeId { get; } Property Value Type Description UInt32"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.UpdateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.UpdateMessage.html",
    "title": "Class UpdateMessage | Npgsql Documentation",
    "keywords": "Class UpdateMessage Abstract base class for Logical Replication Protocol delete message types. Inheritance Object ReplicationMessage PgOutputReplicationMessage TransactionalMessage UpdateMessage DefaultUpdateMessage FullUpdateMessage IndexUpdateMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.PgOutput.Messages Assembly : Npgsql.dll Syntax public abstract class UpdateMessage : TransactionalMessage Properties | Improve this Doc View Source NewRow Columns representing the new row. Declaration public abstract ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple | Improve this Doc View Source Relation The relation for this InsertMessage . Declaration public RelationMessage Relation { get; } Property Value Type Description RelationMessage | Improve this Doc View Source RelationId ID of the relation corresponding to the ID in the relation message. Declaration public uint RelationId { get; } Property Value Type Description UInt32"
  },
  "doc/api/Npgsql.Replication.PgOutput.PgOutputReplicationOptions.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.PgOutputReplicationOptions.html",
    "title": "Class PgOutputReplicationOptions | Npgsql Documentation",
    "keywords": "Class PgOutputReplicationOptions Options to be passed to the pgoutput plugin Inheritance Object PgOutputReplicationOptions Namespace : Npgsql.Replication.PgOutput Assembly : Npgsql.dll Syntax public class PgOutputReplicationOptions : IEquatable<PgOutputReplicationOptions> Constructors | Improve this Doc View Source PgOutputReplicationOptions(IEnumerable<String>, UInt64, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Creates a new instance of PgOutputReplicationOptions . Declaration public PgOutputReplicationOptions(IEnumerable<string> publicationNames, ulong protocolVersion, bool? binary = null, bool? streaming = null, bool? messages = null, bool? twoPhase = null) Parameters Type Name Description IEnumerable < String > publicationNames The publication names to include into the stream UInt64 protocolVersion The version of the logical streaming replication protocol Nullable < Boolean > binary Send values in binary representation Nullable < Boolean > streaming Enable streaming of in-progress transactions Nullable < Boolean > messages Write logical decoding messages into the replication stream Nullable < Boolean > twoPhase Enable streaming of prepared transactions | Improve this Doc View Source PgOutputReplicationOptions(String, UInt64, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Creates a new instance of PgOutputReplicationOptions . Declaration public PgOutputReplicationOptions(string publicationName, ulong protocolVersion, bool? binary = null, bool? streaming = null, bool? messages = null, bool? twoPhase = null) Parameters Type Name Description String publicationName The publication names to include into the stream UInt64 protocolVersion The version of the logical streaming replication protocol Nullable < Boolean > binary Send values in binary representation Nullable < Boolean > streaming Enable streaming of in-progress transactions Nullable < Boolean > messages Write logical decoding messages into the replication stream Nullable < Boolean > twoPhase Enable streaming of prepared transactions Properties | Improve this Doc View Source Binary Send values in binary representation Declaration public bool? Binary { get; } Property Value Type Description Nullable < Boolean > Remarks This works in PostgreSQL versions 14+ | Improve this Doc View Source Messages Write logical decoding messages into the replication stream Declaration public bool? Messages { get; } Property Value Type Description Nullable < Boolean > Remarks This works in PostgreSQL versions 14+ | Improve this Doc View Source ProtocolVersion The version of the Logical Streaming Replication Protocol Declaration public ulong ProtocolVersion { get; } Property Value Type Description UInt64 | Improve this Doc View Source PublicationNames The publication names to stream Declaration public List<string> PublicationNames { get; } Property Value Type Description List < String > | Improve this Doc View Source Streaming Enable streaming of in-progress transactions Declaration public bool? Streaming { get; } Property Value Type Description Nullable < Boolean > Remarks This works as of logical streaming replication protocol version 2 (PostgreSQL 14+) | Improve this Doc View Source TwoPhase Enable streaming of prepared transactions Declaration public bool? TwoPhase { get; } Property Value Type Description Nullable < Boolean > Remarks This works in PostgreSQL versions 15+ Methods | Improve this Doc View Source Equals(PgOutputReplicationOptions) Declaration public bool Equals(PgOutputReplicationOptions other) Parameters Type Name Description PgOutputReplicationOptions other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32"
  },
  "doc/api/Npgsql.Replication.PgOutput.PgOutputReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.PgOutputReplicationSlot.html",
    "title": "Class PgOutputReplicationSlot | Npgsql Documentation",
    "keywords": "Class PgOutputReplicationSlot Acts as a proxy for a logical replication slot initialized for for the logical streaming replication protocol (pgoutput logical decoding plugin). Inheritance Object ReplicationSlot LogicalReplicationSlot PgOutputReplicationSlot Inherited Members LogicalReplicationSlot.SnapshotName LogicalReplicationSlot.OutputPlugin LogicalReplicationSlot.ConsistentPoint ReplicationSlot.Name Namespace : Npgsql.Replication.PgOutput Assembly : Npgsql.dll Syntax public class PgOutputReplicationSlot : LogicalReplicationSlot Constructors | Improve this Doc View Source PgOutputReplicationSlot(PgOutputReplicationSlot) Creates a new PgOutputReplicationSlot instance. Declaration protected PgOutputReplicationSlot(PgOutputReplicationSlot slot) Parameters Type Name Description PgOutputReplicationSlot slot The PgOutputReplicationSlot from which the new instance should be initialized Remarks This constructor is intended to be consumed by plugins sitting on top of PgOutputReplicationSlot | Improve this Doc View Source PgOutputReplicationSlot(ReplicationSlotOptions) Creates a new PgOutputReplicationSlot instance. Declaration public PgOutputReplicationSlot(ReplicationSlotOptions options) Parameters Type Name Description ReplicationSlotOptions options The ReplicationSlotOptions representing the existing replication slot Remarks Create a PgOutputReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for the pgoutput logical decoding plugin. | Improve this Doc View Source PgOutputReplicationSlot(String) Creates a new PgOutputReplicationSlot instance. Declaration public PgOutputReplicationSlot(string slotName) Parameters Type Name Description String slotName The name of the existing replication slot Remarks Create a PgOutputReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for the pgoutput logical decoding plugin."
  },
  "doc/api/Npgsql.Replication.PgOutput.ReplicationTuple.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.ReplicationTuple.html",
    "title": "Class ReplicationTuple | Npgsql Documentation",
    "keywords": "Class ReplicationTuple Represents a streaming tuple containing ReplicationValue . Inheritance Object ReplicationTuple Namespace : Npgsql.Replication.PgOutput Assembly : Npgsql.dll Syntax public class ReplicationTuple : IAsyncEnumerable<ReplicationValue> Properties | Improve this Doc View Source NumColumns The number of columns in the tuple. Declaration public ushort NumColumns { get; } Property Value Type Description UInt16 Methods | Improve this Doc View Source GetAsyncEnumerator(CancellationToken) Declaration public virtual IAsyncEnumerator<ReplicationValue> GetAsyncEnumerator(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description IAsyncEnumerator < ReplicationValue >"
  },
  "doc/api/Npgsql.Replication.PgOutput.ReplicationValue.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.ReplicationValue.html",
    "title": "Class ReplicationValue | Npgsql Documentation",
    "keywords": "Class ReplicationValue Represents a column value in a logical replication session. Inheritance Object ReplicationValue Namespace : Npgsql.Replication.PgOutput Assembly : Npgsql.dll Syntax public class ReplicationValue : object Properties | Improve this Doc View Source IsDBNull Gets a value that indicates whether the column contains nonexistent or missing values. Declaration public bool IsDBNull { get; } Property Value Type Description Boolean true if the specified column is equivalent to ; otherwise false . | Improve this Doc View Source IsUnchangedToastedValue Gets a value that indicates whether the column contains an unchanged TOASTed value (the actual value is not sent). Declaration public bool IsUnchangedToastedValue { get; } Property Value Type Description Boolean Whether the specified column is an unchanged TOASTed value. | Improve this Doc View Source Kind The kind of data transmitted for a tuple in a Logical Replication Protocol message. Declaration public TupleDataKind Kind { get; } Property Value Type Description TupleDataKind | Improve this Doc View Source Length The length of the value in bytes. Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Get(CancellationToken) Gets the value of the specified column as an instance of . Declaration public ValueTask<object> Get(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description ValueTask < Object > | Improve this Doc View Source Get<T>(CancellationToken) Gets the value of the specified column as a type. Declaration public ValueTask<T> Get<T>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description ValueTask <T> Type Parameters Name Description T The type of the value to be returned. | Improve this Doc View Source GetDataTypeName() Gets the data type information for the specified field. This is be the PostgreSQL type name (e.g. double precision), not the .NET type (see GetFieldType() for that). Declaration public string GetDataTypeName() Returns Type Description String | Improve this Doc View Source GetFieldType() Gets the data type of the specified column. Declaration public Type GetFieldType() Returns Type Description Type The data type of the specified column. | Improve this Doc View Source GetPostgresType() Gets a representation of the PostgreSQL data type for the specified field. The returned representation can be used to access various information about the field. Declaration public PostgresType GetPostgresType() Returns Type Description PostgresType | Improve this Doc View Source GetStream() Retrieves data as a . Declaration public Stream GetStream() Returns Type Description Stream | Improve this Doc View Source GetTextReader() Retrieves data as a . Declaration public TextReader GetTextReader() Returns Type Description TextReader"
  },
  "doc/api/Npgsql.Replication.PgOutput.TupleDataKind.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.TupleDataKind.html",
    "title": "Enum TupleDataKind | Npgsql Documentation",
    "keywords": "Enum TupleDataKind The kind of data transmitted for a tuple in a Logical Replication Protocol message. Namespace : Npgsql.Replication.PgOutput Assembly : Npgsql.dll Syntax public enum TupleDataKind : byte Fields Name Description BinaryValue Identifies the data as binary value. Null Identifies the data as NULL value. TextValue Identifies the data as text formatted value. UnchangedToastedValue Identifies unchanged TOASTed value (the actual value is not sent)."
  },
  "doc/api/Npgsql.Replication.PgOutputConnectionExtensions.html": {
    "href": "doc/api/Npgsql.Replication.PgOutputConnectionExtensions.html",
    "title": "Class PgOutputConnectionExtensions | Npgsql Documentation",
    "keywords": "Class PgOutputConnectionExtensions Extension methods to use LogicalReplicationConnection with the pg_output logical decoding plugin. Inheritance Object PgOutputConnectionExtensions Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public static class PgOutputConnectionExtensions : object Methods | Improve this Doc View Source CreatePgOutputReplicationSlot(LogicalReplicationConnection, String, Boolean, Nullable<LogicalSlotSnapshotInitMode>, Boolean, CancellationToken) Creates a LogicalReplicationSlot class that wraps a replication slot using the \"pgoutput\" logical decoding plugin and can be used to start streaming replication via the logical streaming replication protocol. Declaration public static async Task<PgOutputReplicationSlot> CreatePgOutputReplicationSlot(this LogicalReplicationConnection connection, string slotName, bool temporarySlot = false, LogicalSlotSnapshotInitMode? slotSnapshotInitMode = null, bool twoPhase = false, CancellationToken cancellationToken = null) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for creating the replication slot String slotName The name of the slot to create. Must be a valid replication slot name (see https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION ). Boolean temporarySlot true if this replication slot shall be temporary one; otherwise false . Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished. Nullable < LogicalSlotSnapshotInitMode > slotSnapshotInitMode A LogicalSlotSnapshotInitMode to specify what to do with the snapshot created during logical slot initialization. Export , which is also the default, will export the snapshot for use in other sessions. This option can't be used inside a transaction. Use will use the snapshot for the current transaction executing the command. This option must be used in a transaction, and Use must be the first command run in that transaction. Finally, NoExport will just use the snapshot for logical decoding as normal but won't do anything else with it. Boolean twoPhase If true , this logical replication slot supports decoding of two-phase transactions. With this option, two-phase commands like PREPARE TRANSACTION, COMMIT PREPARED and ROLLBACK PREPARED are decoded and transmitted. The transaction will be decoded and transmitted at PREPARE TRANSACTION time. The default is false . CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < PgOutputReplicationSlot > A LogicalReplicationSlot that wraps the newly-created replication slot. Remarks See https://www.postgresql.org/docs/current/protocol-logical-replication.html and https://www.postgresql.org/docs/current/protocol-logicalrep-message-formats.html for more information. | Improve this Doc View Source StartReplication(LogicalReplicationConnection, PgOutputReplicationSlot, PgOutputReplicationOptions, CancellationToken, Nullable<NpgsqlLogSequenceNumber>) Instructs the server to start the Logical Streaming Replication Protocol (pgoutput logical decoding plugin), starting at WAL location walLocation or at the slot's consistent point if walLocation isn't specified. The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public static IAsyncEnumerable<PgOutputReplicationMessage> StartReplication(this LogicalReplicationConnection connection, PgOutputReplicationSlot slot, PgOutputReplicationOptions options, CancellationToken cancellationToken, NpgsqlLogSequenceNumber? walLocation = null) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for starting replication PgOutputReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. PgOutputReplicationOptions options The collection of options passed to the slot's logical decoding plugin. CancellationToken cancellationToken The token to monitor for stopping the replication. Nullable < NpgsqlLogSequenceNumber > walLocation The WAL location to begin streaming at. Returns Type Description IAsyncEnumerable < PgOutputReplicationMessage > A representing an that can be used to stream WAL entries in form of PgOutputReplicationMessage instances."
  },
  "doc/api/Npgsql.Replication.PhysicalReplicationConnection.html": {
    "href": "doc/api/Npgsql.Replication.PhysicalReplicationConnection.html",
    "title": "Class PhysicalReplicationConnection | Npgsql Documentation",
    "keywords": "Class PhysicalReplicationConnection Represents a physical replication connection to a PostgreSQL server. Inheritance Object ReplicationConnection PhysicalReplicationConnection Inherited Members ReplicationConnection.ConnectionString ReplicationConnection.LastReceivedLsn ReplicationConnection.LastFlushedLsn ReplicationConnection.LastAppliedLsn ReplicationConnection.WalReceiverStatusInterval ReplicationConnection.WalReceiverTimeout ReplicationConnection.PostgreSqlVersion ReplicationConnection.ServerVersion ReplicationConnection.CommandTimeout ReplicationConnection.Encoding ReplicationConnection.ProcessID ReplicationConnection.Open(CancellationToken) ReplicationConnection.DisposeAsync() ReplicationConnection.IdentifySystem(CancellationToken) ReplicationConnection.Show(String, CancellationToken) ReplicationConnection.TimelineHistory(UInt32, CancellationToken) ReplicationConnection.SetReplicationStatus(NpgsqlLogSequenceNumber) ReplicationConnection.SendStatusUpdate(CancellationToken) ReplicationConnection.DropReplicationSlot(String, Boolean, CancellationToken) Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public sealed class PhysicalReplicationConnection : ReplicationConnection Constructors | Improve this Doc View Source PhysicalReplicationConnection() Initializes a new instance of PhysicalReplicationConnection . Declaration public PhysicalReplicationConnection() | Improve this Doc View Source PhysicalReplicationConnection(Nullable<String>) Initializes a new instance of PhysicalReplicationConnection with the given connection string. Declaration public PhysicalReplicationConnection(string? connectionString) Parameters Type Name Description Nullable < String > connectionString The connection used to open the PostgreSQL database. Methods | Improve this Doc View Source CreateReplicationSlot(String, Boolean, Boolean, CancellationToken) Creates a PhysicalReplicationSlot that wraps a PostgreSQL physical replication slot and can be used to start physical streaming replication Declaration public Task<PhysicalReplicationSlot> CreateReplicationSlot(string slotName, bool isTemporary = false, bool reserveWal = false, CancellationToken cancellationToken = null) Parameters Type Name Description String slotName The name of the slot to create. Must be a valid replication slot name (see Section 26.2.6.1 ). Boolean isTemporary true if this replication slot shall be a temporary one; otherwise false . Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished. Boolean reserveWal If this is set to true this physical replication slot reserves WAL immediately. Otherwise, WAL is only reserved upon connection from a streaming replication client. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < PhysicalReplicationSlot > A representing a PhysicalReplicationSlot that represents the newly-created replication slot. | Improve this Doc View Source ReadReplicationSlot(String, CancellationToken) Read some information associated to a replication slot. This command is currently only supported for physical replication slots. Declaration public Task<PhysicalReplicationSlot> ReadReplicationSlot(string slotName, CancellationToken cancellationToken = null) Parameters Type Name Description String slotName The name of the slot to read. Must be a valid replication slot name CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < PhysicalReplicationSlot > A representing a PhysicalReplicationSlot or null if the replication slot does not exist. | Improve this Doc View Source StartReplication(PhysicalReplicationSlot, CancellationToken) Instructs the server to start streaming the WAL for physical replication, starting at the WAL location and timeline id specified in slot . The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public IAsyncEnumerable<XLogDataMessage> StartReplication(PhysicalReplicationSlot slot, CancellationToken cancellationToken) Parameters Type Name Description PhysicalReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. The slot must contain a valid RestartLsn to be used for this overload. CancellationToken cancellationToken The token to be used for stopping the replication. Returns Type Description IAsyncEnumerable < XLogDataMessage > A representing an that can be used to stream WAL entries in form of XLogDataMessage instances. Remarks If the client requests a timeline that's not the latest but is part of the history of the server, the server will stream all the WAL on that timeline starting from the requested start point up to the point where the server switched to another timeline. | Improve this Doc View Source StartReplication(PhysicalReplicationSlot, NpgsqlLogSequenceNumber, CancellationToken, UInt64) Instructs the server to start streaming the WAL for physical replication, starting at WAL location walLocation . The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public IAsyncEnumerable<XLogDataMessage> StartReplication(PhysicalReplicationSlot slot, NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, ulong timeline = null) Parameters Type Name Description PhysicalReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. NpgsqlLogSequenceNumber walLocation The WAL location to begin streaming at. CancellationToken cancellationToken The token to be used for stopping the replication. UInt64 timeline Streaming starts on timeline tli. Returns Type Description IAsyncEnumerable < XLogDataMessage > A representing an that can be used to stream WAL entries in form of XLogDataMessage instances. Remarks If the client requests a timeline that's not the latest but is part of the history of the server, the server will stream all the WAL on that timeline starting from the requested start point up to the point where the server switched to another timeline. | Improve this Doc View Source StartReplication(NpgsqlLogSequenceNumber, CancellationToken, UInt64) Instructs the server to start streaming the WAL for logical replication, starting at WAL location walLocation . The server can reply with an error, for example if the requested section of WAL has already been recycled. Declaration public IAsyncEnumerable<XLogDataMessage> StartReplication(NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, ulong timeline = null) Parameters Type Name Description NpgsqlLogSequenceNumber walLocation The WAL location to begin streaming at. CancellationToken cancellationToken The token to be used for stopping the replication. UInt64 timeline Streaming starts on timeline tli. Returns Type Description IAsyncEnumerable < XLogDataMessage > A representing an that can be used to stream WAL entries in form of XLogDataMessage instances. Remarks If the client requests a timeline that's not the latest but is part of the history of the server, the server will stream all the WAL on that timeline starting from the requested start point up to the point where the server switched to another timeline."
  },
  "doc/api/Npgsql.Replication.PhysicalReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.PhysicalReplicationSlot.html",
    "title": "Class PhysicalReplicationSlot | Npgsql Documentation",
    "keywords": "Class PhysicalReplicationSlot Wraps a replication slot that uses physical replication. Inheritance Object ReplicationSlot PhysicalReplicationSlot Inherited Members ReplicationSlot.Name Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public class PhysicalReplicationSlot : ReplicationSlot Constructors | Improve this Doc View Source PhysicalReplicationSlot(String, Nullable<NpgsqlLogSequenceNumber>, Nullable<UInt64>) Creates a new PhysicalReplicationSlot instance. Declaration public PhysicalReplicationSlot(string slotName, NpgsqlLogSequenceNumber? restartLsn = null, ulong? restartTimeline = null) Parameters Type Name Description String slotName The name of the existing replication slot Nullable < NpgsqlLogSequenceNumber > restartLsn The replication slot's restart_lsn Nullable < UInt64 > restartTimeline The timeline ID associated to restart_lsn , following the current timeline history. Remarks Create a PhysicalReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for physical replication. Properties | Improve this Doc View Source RestartLsn The replication slot's restart_lsn . Declaration public NpgsqlLogSequenceNumber? RestartLsn { get; } Property Value Type Description Nullable < NpgsqlLogSequenceNumber > | Improve this Doc View Source RestartTimeline The timeline ID associated to restart_lsn , following the current timeline history. Declaration public ulong? RestartTimeline { get; } Property Value Type Description Nullable < UInt64 >"
  },
  "doc/api/Npgsql.Replication.ReplicationConnection.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationConnection.html",
    "title": "Class ReplicationConnection | Npgsql Documentation",
    "keywords": "Class ReplicationConnection Defines the core behavior of replication connections and provides the base class for LogicalReplicationConnection and PhysicalReplicationConnection . Inheritance Object ReplicationConnection LogicalReplicationConnection PhysicalReplicationConnection Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public abstract class ReplicationConnection : IAsyncDisposable Properties | Improve this Doc View Source CommandTimeout Gets or sets the wait time before terminating the attempt to execute a command and generating an error. Declaration public TimeSpan CommandTimeout { get; set; } Property Value Type Description TimeSpan The time to wait for the command to execute. The default value is 30 seconds. | Improve this Doc View Source ConnectionString Gets or sets the string used to connect to a PostgreSQL database. See the manual for details. Declaration public string ConnectionString { get; set; } Property Value Type Description String The connection string that includes the server name, the database name, and other parameters needed to establish the initial connection. The default value is an empty string. Remarks Since replication connections are a special kind of connection, Pooling , Enlist , Multiplexing and KeepAlive are always disabled no matter what you set them to in your connection string. | Improve this Doc View Source Encoding The client encoding for the connection This can only be called when there is an active connection. Declaration public Encoding Encoding { get; } Property Value Type Description Encoding | Improve this Doc View Source LastAppliedLsn The location of the last WAL byte + 1 applied (e. g. written to disk) in the standby. Declaration public NpgsqlLogSequenceNumber LastAppliedLsn { get; set; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source LastFlushedLsn The location of the last WAL byte + 1 flushed to disk in the standby. Declaration public NpgsqlLogSequenceNumber LastFlushedLsn { get; set; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source LastReceivedLsn The location of the last WAL byte + 1 received in the standby. Declaration public NpgsqlLogSequenceNumber LastReceivedLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source PostgreSqlVersion The version of the PostgreSQL server we're connected to. This can only be called when the connection is open. In case of a development or pre-release version this field will contain the version of the next version to be released from this branch. Declaration public Version PostgreSqlVersion { get; } Property Value Type Description Version | Improve this Doc View Source ProcessID Process id of backend server. This can only be called when there is an active connection. Declaration public int ProcessID { get; } Property Value Type Description Int32 | Improve this Doc View Source ServerVersion The PostgreSQL server version as returned by the server_version option. This can only be called when the connection is open. Declaration public string ServerVersion { get; } Property Value Type Description String | Improve this Doc View Source WalReceiverStatusInterval Send replies at least this often. Timeout. disables automated replies. Declaration public TimeSpan WalReceiverStatusInterval { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source WalReceiverTimeout Time that receiver waits for communication from master. Timeout. disables the timeout. Declaration public TimeSpan WalReceiverTimeout { get; set; } Property Value Type Description TimeSpan Methods | Improve this Doc View Source DisposeAsync() Closes the replication connection and performs tasks associated with freeing, releasing, or resetting its unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. | Improve this Doc View Source DropReplicationSlot(String, Boolean, CancellationToken) Drops a replication slot, freeing any reserved server-side resources. If the slot is a logical slot that was created in a database other than the database the walsender is connected to, this command fails. Declaration public Task DropReplicationSlot(string slotName, bool wait = false, CancellationToken cancellationToken = null) Parameters Type Name Description String slotName The name of the slot to drop. Boolean wait true causes the command to wait until the slot becomes inactive if it currently is active instead of the default behavior of raising an error. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task A task representing the asynchronous drop operation. | Improve this Doc View Source IdentifySystem(CancellationToken) Requests the server to identify itself. Declaration public Task<ReplicationSystemIdentification> IdentifySystem(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < ReplicationSystemIdentification > A ReplicationSystemIdentification containing information about the system we are connected to. | Improve this Doc View Source Open(CancellationToken) Opens a database replication connection with the property settings specified by the ConnectionString . Declaration public async Task Open(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task A task representing the asynchronous open operation. | Improve this Doc View Source SendStatusUpdate(CancellationToken) Sends a forced status update to PostgreSQL with the current WAL tracking information. Declaration public Task SendStatusUpdate(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task A Task representing the sending of the status update (and not any PostgreSQL response). | Improve this Doc View Source SetReplicationStatus(NpgsqlLogSequenceNumber) Sets the current status of the replication as it is interpreted by the consuming client. The value supplied in will be sent to the server via LastAppliedLsn and LastFlushedLsn with the next status update. A status update which will happen upon server request, upon expiration of WalReceiverStatusInterval our upon an enforced status update via SendStatusUpdate(CancellationToken) , whichever happens first. If you want the value you set here to be pushed to the server immediately (e. g. in synchronous replication scenarios), call SendStatusUpdate(CancellationToken) after calling this method. Declaration public void SetReplicationStatus(NpgsqlLogSequenceNumber lastAppliedAndFlushedLsn) Parameters Type Name Description NpgsqlLogSequenceNumber lastAppliedAndFlushedLsn The location of the last WAL byte + 1 applied (e. g. processed or written to disk) and flushed to disk in the standby. Remarks This is a convenience method setting both LastAppliedLsn and LastFlushedLsn in one operation. You can use it if your application processes replication messages in a way that doesn't care about the difference between writing a message and flushing it to a permanent storage medium. | Improve this Doc View Source Show(String, CancellationToken) Requests the server to send the current setting of a run-time parameter. This is similar to the SQL command SHOW. Declaration public Task<string> Show(string parameterName, CancellationToken cancellationToken = null) Parameters Type Name Description String parameterName The name of a run-time parameter. Available parameters are documented in https://www.postgresql.org/docs/current/runtime-config.html . CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < String > The current setting of the run-time parameter specified in parameterName as . | Improve this Doc View Source TimelineHistory(UInt32, CancellationToken) Requests the server to send over the timeline history file for timeline tli. Declaration public Task<TimelineHistoryFile> TimelineHistory(uint tli, CancellationToken cancellationToken = null) Parameters Type Name Description UInt32 tli The timeline for which the history file should be sent. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < TimelineHistoryFile > The timeline history file for timeline tli"
  },
  "doc/api/Npgsql.Replication.ReplicationMessage.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationMessage.html",
    "title": "Class ReplicationMessage | Npgsql Documentation",
    "keywords": "Class ReplicationMessage The common base class for all streaming replication messages Inheritance Object ReplicationMessage PgOutputReplicationMessage TestDecodingData XLogDataMessage Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public abstract class ReplicationMessage : object Properties | Improve this Doc View Source ServerClock The server's system clock at the time this message was transmitted, as microseconds since midnight on 2000-01-01. Declaration public DateTime ServerClock { get; } Property Value Type Description DateTime Remarks Since the client using Npgsql and the server may be located in different time zones, as of Npgsql 7.0 this value is no longer converted to local time but keeps its original value in UTC. You can check if you don't want to introduce behavior depending on Npgsql versions. | Improve this Doc View Source WalEnd The current end of WAL on the server. Declaration public NpgsqlLogSequenceNumber WalEnd { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source WalStart The starting point of the WAL data in this message. Declaration public NpgsqlLogSequenceNumber WalStart { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.ReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationSlot.html",
    "title": "Class ReplicationSlot | Npgsql Documentation",
    "keywords": "Class ReplicationSlot Contains information about a newly-created replication slot. Inheritance Object ReplicationSlot LogicalReplicationSlot PhysicalReplicationSlot Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public abstract class ReplicationSlot : object Properties | Improve this Doc View Source Name The name of the newly-created replication slot. Declaration public string Name { get; } Property Value Type Description String"
  },
  "doc/api/Npgsql.Replication.ReplicationSlotOptions.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationSlotOptions.html",
    "title": "Struct ReplicationSlotOptions | Npgsql Documentation",
    "keywords": "Struct ReplicationSlotOptions Contains information about a replication slot. Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public readonly struct ReplicationSlotOptions Constructors | Improve this Doc View Source ReplicationSlotOptions(String, NpgsqlLogSequenceNumber) Creates a new ReplicationSlotOptions instance. Declaration public ReplicationSlotOptions(string slotName, NpgsqlLogSequenceNumber consistentPoint) Parameters Type Name Description String slotName The name of the replication slot. NpgsqlLogSequenceNumber consistentPoint The WAL location at which the slot became consistent. | Improve this Doc View Source ReplicationSlotOptions(String, Nullable<String>) Creates a new ReplicationSlotOptions instance. Declaration public ReplicationSlotOptions(string slotName, string? consistentPoint = null) Parameters Type Name Description String slotName The name of the replication slot. Nullable < String > consistentPoint The WAL location at which the slot became consistent. Properties | Improve this Doc View Source ConsistentPoint The WAL location at which the slot became consistent. Declaration public readonly NpgsqlLogSequenceNumber ConsistentPoint { get; } Property Value Type Description NpgsqlLogSequenceNumber | Improve this Doc View Source SlotName The name of the replication slot. Declaration public readonly string SlotName { get; } Property Value Type Description String"
  },
  "doc/api/Npgsql.Replication.ReplicationSystemIdentification.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationSystemIdentification.html",
    "title": "Class ReplicationSystemIdentification | Npgsql Documentation",
    "keywords": "Class ReplicationSystemIdentification Contains server identification information returned from IdentifySystem(CancellationToken) . Inheritance Object ReplicationSystemIdentification Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public class ReplicationSystemIdentification : object Properties | Improve this Doc View Source DbName Database connected to. Declaration public string? DbName { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source SystemId The unique system identifier identifying the cluster. This can be used to check that the base backup used to initialize the standby came from the same cluster. Declaration public string SystemId { get; } Property Value Type Description String | Improve this Doc View Source Timeline Current timeline ID. Also useful to check that the standby is consistent with the master. Declaration public uint Timeline { get; } Property Value Type Description UInt32 | Improve this Doc View Source XLogPos Current WAL flush location. Useful to get a known location in the write-ahead log where streaming can start. Declaration public NpgsqlLogSequenceNumber XLogPos { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.TestDecoding.html": {
    "href": "doc/api/Npgsql.Replication.TestDecoding.html",
    "title": "Namespace Npgsql.Replication.TestDecoding | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication.TestDecoding Classes TestDecodingData Text representations of PostgreSQL WAL operations decoded by the \"test_decoding\" plugin. See https://www.postgresql.org/docs/current/test-decoding.html . TestDecodingOptions Options to be passed to the test_decoding plugin TestDecodingReplicationSlot Acts as a proxy for a logical replication slot initialized for for the test_decoding logical decoding plugin."
  },
  "doc/api/Npgsql.Replication.TestDecoding.TestDecodingData.html": {
    "href": "doc/api/Npgsql.Replication.TestDecoding.TestDecodingData.html",
    "title": "Class TestDecodingData | Npgsql Documentation",
    "keywords": "Class TestDecodingData Text representations of PostgreSQL WAL operations decoded by the \"test_decoding\" plugin. See https://www.postgresql.org/docs/current/test-decoding.html . Inheritance Object ReplicationMessage TestDecodingData Inherited Members ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication.TestDecoding Assembly : Npgsql.dll Syntax public sealed class TestDecodingData : ReplicationMessage Properties | Improve this Doc View Source Data Decoded text representation of the operation performed in this WAL entry Declaration public string Data { get; } Property Value Type Description String Methods | Improve this Doc View Source Clone() Returns a clone of this message, which can be accessed after other replication messages have been retrieved. Declaration public TestDecodingData Clone() Returns Type Description TestDecodingData | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "doc/api/Npgsql.Replication.TestDecoding.TestDecodingOptions.html": {
    "href": "doc/api/Npgsql.Replication.TestDecoding.TestDecodingOptions.html",
    "title": "Class TestDecodingOptions | Npgsql Documentation",
    "keywords": "Class TestDecodingOptions Options to be passed to the test_decoding plugin Inheritance Object TestDecodingOptions Namespace : Npgsql.Replication.TestDecoding Assembly : Npgsql.dll Syntax public class TestDecodingOptions : IEquatable<TestDecodingOptions> Constructors | Improve this Doc View Source TestDecodingOptions(Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Creates a new instance of TestDecodingOptions . Declaration public TestDecodingOptions(bool? includeXids = null, bool? includeTimestamp = null, bool? forceBinary = null, bool? skipEmptyXacts = null, bool? onlyLocal = null, bool? includeRewrites = null, bool? streamChanges = null) Parameters Type Name Description Nullable < Boolean > includeXids Include the transaction number for BEGIN and COMMIT command output Nullable < Boolean > includeTimestamp Include the timestamp for COMMIT command output Nullable < Boolean > forceBinary Set the output mode to binary Nullable < Boolean > skipEmptyXacts Skip output for transactions that didn't change the database Nullable < Boolean > onlyLocal Only output data that don't have the replication origin set Nullable < Boolean > includeRewrites Include output from table rewrites that were caused by DDL statements Nullable < Boolean > streamChanges Enable streaming output Properties | Improve this Doc View Source ForceBinary Set the output mode to binary Declaration public bool? ForceBinary { get; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IncludeRewrites Include output from table rewrites that were caused by DDL statements Declaration public bool? IncludeRewrites { get; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IncludeTimestamp Include the timestamp for COMMIT command output Declaration public bool? IncludeTimestamp { get; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IncludeXids Include the transaction number for BEGIN and COMMIT command output Declaration public bool? IncludeXids { get; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source OnlyLocal Only output data that don't have the replication origin set Declaration public bool? OnlyLocal { get; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source SkipEmptyXacts Skip output for transactions that didn't change the database Declaration public bool? SkipEmptyXacts { get; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source StreamChanges Enable streaming output Declaration public bool? StreamChanges { get; } Property Value Type Description Nullable < Boolean > Methods | Improve this Doc View Source Equals(TestDecodingOptions) Declaration public bool Equals(TestDecodingOptions other) Parameters Type Name Description TestDecodingOptions other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32"
  },
  "doc/api/Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot.html",
    "title": "Class TestDecodingReplicationSlot | Npgsql Documentation",
    "keywords": "Class TestDecodingReplicationSlot Acts as a proxy for a logical replication slot initialized for for the test_decoding logical decoding plugin. Inheritance Object ReplicationSlot LogicalReplicationSlot TestDecodingReplicationSlot Inherited Members LogicalReplicationSlot.SnapshotName LogicalReplicationSlot.OutputPlugin LogicalReplicationSlot.ConsistentPoint ReplicationSlot.Name Namespace : Npgsql.Replication.TestDecoding Assembly : Npgsql.dll Syntax public class TestDecodingReplicationSlot : LogicalReplicationSlot Constructors | Improve this Doc View Source TestDecodingReplicationSlot(ReplicationSlotOptions) Creates a new TestDecodingReplicationSlot instance. Declaration public TestDecodingReplicationSlot(ReplicationSlotOptions options) Parameters Type Name Description ReplicationSlotOptions options The ReplicationSlotOptions representing the existing replication slot Remarks Create a TestDecodingReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for the test_decoding logical decoding plugin. | Improve this Doc View Source TestDecodingReplicationSlot(String) Creates a new TestDecodingReplicationSlot instance. Declaration public TestDecodingReplicationSlot(string slotName) Parameters Type Name Description String slotName The name of the existing replication slot Remarks Create a TestDecodingReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for the test_decoding logical decoding plugin."
  },
  "doc/api/Npgsql.Replication.TestDecodingConnectionExtensions.html": {
    "href": "doc/api/Npgsql.Replication.TestDecodingConnectionExtensions.html",
    "title": "Class TestDecodingConnectionExtensions | Npgsql Documentation",
    "keywords": "Class TestDecodingConnectionExtensions Extension methods to use LogicalReplicationConnection with the test_decoding logical decoding plugin. See https://www.postgresql.org/docs/current/test-decoding.html . Inheritance Object TestDecodingConnectionExtensions Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public static class TestDecodingConnectionExtensions : object Methods | Improve this Doc View Source CreateTestDecodingReplicationSlot(LogicalReplicationConnection, String, Boolean, Nullable<LogicalSlotSnapshotInitMode>, Boolean, CancellationToken) Creates a TestDecodingReplicationSlot class that wraps a replication slot using the test_decoding logical decoding plugin. Declaration public static async Task<TestDecodingReplicationSlot> CreateTestDecodingReplicationSlot(this LogicalReplicationConnection connection, string slotName, bool temporarySlot = false, LogicalSlotSnapshotInitMode? slotSnapshotInitMode = null, bool twoPhase = false, CancellationToken cancellationToken = null) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for creating the replication slot String slotName The name of the slot to create. Must be a valid replication slot name (see https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION ). Boolean temporarySlot true if this replication slot shall be temporary one; otherwise false . Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished. Nullable < LogicalSlotSnapshotInitMode > slotSnapshotInitMode A LogicalSlotSnapshotInitMode to specify what to do with the snapshot created during logical slot initialization. Export , which is also the default, will export the snapshot for use in other sessions. This option can't be used inside a transaction. Use will use the snapshot for the current transaction executing the command. This option must be used in a transaction, and Use must be the first command run in that transaction. Finally, NoExport will just use the snapshot for logical decoding as normal but won't do anything else with it. Boolean twoPhase If true , this logical replication slot supports decoding of two-phase transactions. With this option, two-phase commands like PREPARE TRANSACTION, COMMIT PREPARED and ROLLBACK PREPARED are decoded and transmitted. The transaction will be decoded and transmitted at PREPARE TRANSACTION time. The default is false . CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is . Returns Type Description Task < TestDecodingReplicationSlot > A TestDecodingReplicationSlot that wraps the newly-created replication slot. Remarks See https://www.postgresql.org/docs/current/test-decoding.html for more information. | Improve this Doc View Source StartReplication(LogicalReplicationConnection, TestDecodingReplicationSlot, CancellationToken, TestDecodingOptions, Nullable<NpgsqlLogSequenceNumber>) Instructs the server to start streaming the WAL for logical replication using the test_decoding logical decoding plugin, starting at WAL location walLocation or at the slot's consistent point if walLocation isn't specified. The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public static IAsyncEnumerable<TestDecodingData> StartReplication(this LogicalReplicationConnection connection, TestDecodingReplicationSlot slot, CancellationToken cancellationToken, TestDecodingOptions options = null, NpgsqlLogSequenceNumber? walLocation = null) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for starting replication TestDecodingReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. CancellationToken cancellationToken The token to monitor for stopping the replication. TestDecodingOptions options The collection of options passed to the slot's logical decoding plugin. Nullable < NpgsqlLogSequenceNumber > walLocation The WAL location to begin streaming at. Returns Type Description IAsyncEnumerable < TestDecodingData > A representing an that can be used to stream WAL entries in form of TestDecodingData instances."
  },
  "doc/api/Npgsql.Replication.TimelineHistoryFile.html": {
    "href": "doc/api/Npgsql.Replication.TimelineHistoryFile.html",
    "title": "Struct TimelineHistoryFile | Npgsql Documentation",
    "keywords": "Struct TimelineHistoryFile Represents a PostgreSQL timeline history file Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public readonly struct TimelineHistoryFile Properties | Improve this Doc View Source Content Contents of the timeline history file. Declaration public readonly byte[] Content { get; } Property Value Type Description Byte [] | Improve this Doc View Source FileName File name of the timeline history file, e.g., 00000002.history. Declaration public readonly string FileName { get; } Property Value Type Description String"
  },
  "doc/api/Npgsql.Replication.XLogDataMessage.html": {
    "href": "doc/api/Npgsql.Replication.XLogDataMessage.html",
    "title": "Class XLogDataMessage | Npgsql Documentation",
    "keywords": "Class XLogDataMessage A message representing a section of the WAL data stream. Inheritance Object ReplicationMessage XLogDataMessage Inherited Members ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock Namespace : Npgsql.Replication Assembly : Npgsql.dll Syntax public class XLogDataMessage : ReplicationMessage Properties | Improve this Doc View Source Data A section of the WAL data stream that is raw WAL data in physical replication or decoded with the selected logical decoding plugin in logical replication. It is only valid until the next XLogDataMessage is requested from the stream. Declaration public Stream Data { get; } Property Value Type Description Stream Remarks A single WAL record is never split across two XLogData messages. When a WAL record crosses a WAL page boundary, and is therefore already split using continuation records, it can be split at the page boundary. In other words, the first main WAL record and its continuation records can be sent in different XLogData messages."
  },
  "doc/api/Npgsql.Schema.html": {
    "href": "doc/api/Npgsql.Schema.html",
    "title": "Namespace Npgsql.Schema | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Schema Classes NpgsqlDbColumn Provides schema information about a column."
  },
  "doc/api/Npgsql.Schema.NpgsqlDbColumn.html": {
    "href": "doc/api/Npgsql.Schema.NpgsqlDbColumn.html",
    "title": "Class NpgsqlDbColumn | Npgsql Documentation",
    "keywords": "Class NpgsqlDbColumn Provides schema information about a column. Inheritance Object NpgsqlDbColumn Namespace : Npgsql.Schema Assembly : Npgsql.dll Syntax public class NpgsqlDbColumn : DbColumn Remarks Note that this can correspond to a field returned in a query which isn't an actual table column See https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldatareader.getschematable(v=vs.110).aspx for information on the meaning of the different fields. Constructors | Improve this Doc View Source NpgsqlDbColumn() Initializes a new instance of the NpgsqlDbColumn class. Declaration public NpgsqlDbColumn() Properties | Improve this Doc View Source AllowDBNull Declaration public bool? AllowDBNull { get; protected set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source BaseCatalogName Declaration public string BaseCatalogName { get; protected set; } Property Value Type Description String | Improve this Doc View Source BaseColumnName Declaration public string? BaseColumnName { get; protected set; } Property Value Type Description Nullable < String > | Improve this Doc View Source BaseSchemaName Declaration public string? BaseSchemaName { get; protected set; } Property Value Type Description Nullable < String > | Improve this Doc View Source BaseServerName Declaration public string BaseServerName { get; protected set; } Property Value Type Description String | Improve this Doc View Source BaseTableName Declaration public string? BaseTableName { get; protected set; } Property Value Type Description Nullable < String > | Improve this Doc View Source ColumnAttributeNumber The column's position within its table. Note that this is different from ColumnOrdinal , which is the column's position within the resultset. Declaration public short? ColumnAttributeNumber { get; } Property Value Type Description Nullable < Int16 > | Improve this Doc View Source ColumnName Declaration public string ColumnName { get; protected set; } Property Value Type Description String | Improve this Doc View Source ColumnOrdinal Declaration public int? ColumnOrdinal { get; protected set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source ColumnSize Declaration public int? ColumnSize { get; protected set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source DataType Declaration public Type? DataType { get; protected set; } Property Value Type Description Nullable < Type > | Improve this Doc View Source DataTypeName Declaration public string DataTypeName { get; protected set; } Property Value Type Description String | Improve this Doc View Source DefaultValue The default SQL expression for this column. Declaration public string? DefaultValue { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source IsAliased Declaration public bool? IsAliased { get; protected set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IsAutoIncrement Declaration public bool? IsAutoIncrement { get; protected set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IsIdentity Declaration public bool? IsIdentity { get; protected set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IsKey Declaration public bool? IsKey { get; protected set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IsLong Declaration public bool? IsLong { get; protected set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IsReadOnly Declaration public bool? IsReadOnly { get; protected set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IsUnique Declaration public bool? IsUnique { get; protected set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source Item[String] Declaration public override object? this[string propertyName] { get; } Parameters Type Name Description String propertyName Property Value Type Description Nullable < Object > | Improve this Doc View Source NpgsqlDbType The NpgsqlDbType value for this column's type. Declaration public NpgsqlDbType? NpgsqlDbType { get; } Property Value Type Description Nullable < NpgsqlDbType > | Improve this Doc View Source NumericPrecision Declaration public int? NumericPrecision { get; protected set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source NumericScale Declaration public int? NumericScale { get; protected set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source PostgresType The PostgresType describing the type of this column. Declaration public PostgresType PostgresType { get; } Property Value Type Description PostgresType | Improve this Doc View Source TableOID The OID of the PostgreSQL table of this column. Declaration public uint TableOID { get; } Property Value Type Description UInt32 | Improve this Doc View Source TypeOID The OID of the type of this column in the PostgreSQL pg_type catalog table. Declaration public uint TypeOID { get; } Property Value Type Description UInt32 | Improve this Doc View Source UdtAssemblyQualifiedName Declaration public string? UdtAssemblyQualifiedName { get; protected set; } Property Value Type Description Nullable < String >"
  },
  "doc/api/Npgsql.ServerCompatibilityMode.html": {
    "href": "doc/api/Npgsql.ServerCompatibilityMode.html",
    "title": "Enum ServerCompatibilityMode | Npgsql Documentation",
    "keywords": "Enum ServerCompatibilityMode An option specified in the connection string that activates special compatibility features. Namespace : Npgsql Assembly : Npgsql.dll Syntax public enum ServerCompatibilityMode : int Fields Name Description None No special server compatibility mode is active NoTypeLoading The server is doesn't support full type loading from the PostgreSQL catalogs, support the basic set of types via information hardcoded inside Npgsql. Redshift The server is an Amazon Redshift instance."
  },
  "doc/api/Npgsql.SourceGenerators.html": {
    "href": "doc/api/Npgsql.SourceGenerators.html",
    "title": "Namespace Npgsql.SourceGenerators | Npgsql Documentation",
    "keywords": "Namespace Npgsql.SourceGenerators Classes NpgsqlConnectionStringBuilderSourceGenerator"
  },
  "doc/api/Npgsql.SourceGenerators.NpgsqlConnectionStringBuilderSourceGenerator.html": {
    "href": "doc/api/Npgsql.SourceGenerators.NpgsqlConnectionStringBuilderSourceGenerator.html",
    "title": "Class NpgsqlConnectionStringBuilderSourceGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlConnectionStringBuilderSourceGenerator Inheritance Object NpgsqlConnectionStringBuilderSourceGenerator Namespace : Npgsql.SourceGenerators Assembly : Npgsql.SourceGenerators.dll Syntax public class NpgsqlConnectionStringBuilderSourceGenerator : ISourceGenerator Methods | Improve this Doc View Source Execute(GeneratorExecutionContext) Declaration public void Execute(GeneratorExecutionContext context) Parameters Type Name Description GeneratorExecutionContext context | Improve this Doc View Source Initialize(GeneratorInitializationContext) Declaration public void Initialize(GeneratorInitializationContext context) Parameters Type Name Description GeneratorInitializationContext context"
  },
  "doc/api/Npgsql.SslMode.html": {
    "href": "doc/api/Npgsql.SslMode.html",
    "title": "Enum SslMode | Npgsql Documentation",
    "keywords": "Enum SslMode Specifies how to manage SSL. Namespace : Npgsql Assembly : Npgsql.dll Syntax public enum SslMode : int Fields Name Description Allow Prefer non-SSL connections if the server allows them, but allow SSL connections. Disable SSL is disabled. If the server requires SSL, the connection will fail. Prefer Prefer SSL connections if the server allows them, but allow connections without SSL. Require Fail the connection if the server doesn't support SSL. VerifyCA Fail the connection if the server doesn't support SSL. Also verifies server certificate. VerifyFull Fail the connection if the server doesn't support SSL. Also verifies server certificate with host's name."
  },
  "doc/api/Npgsql.StatementType.html": {
    "href": "doc/api/Npgsql.StatementType.html",
    "title": "Enum StatementType | Npgsql Documentation",
    "keywords": "Enum StatementType Specifies the type of SQL statement, e.g. SELECT Namespace : Npgsql Assembly : Npgsql.dll Syntax public enum StatementType : int Fields Name Description Call Copy CreateTableAs Delete Fetch Insert Merge Move Other Select Unknown Update"
  },
  "doc/api/Npgsql.TargetSessionAttributes.html": {
    "href": "doc/api/Npgsql.TargetSessionAttributes.html",
    "title": "Enum TargetSessionAttributes | Npgsql Documentation",
    "keywords": "Enum TargetSessionAttributes Specifies server type preference. Namespace : Npgsql Assembly : Npgsql.dll Syntax public enum TargetSessionAttributes : byte Fields Name Description Any Any successful connection is acceptable. PreferPrimary First try to find a primary server, but if none of the listed hosts is a primary server, try again in Any mode. PreferStandby First try to find a standby server, but if none of the listed hosts is a standby server, try again in Any mode. Primary Server must not be in hot standby mode. ReadOnly Session must not accept read-write transactions by default (the converse). ReadWrite Session must accept read-write transactions by default (that is, the server must not be in hot standby mode and the default_transaction_read_only parameter must be off). Standby Server must be in hot standby mode."
  },
  "doc/api/Npgsql.TracerProviderBuilderExtensions.html": {
    "href": "doc/api/Npgsql.TracerProviderBuilderExtensions.html",
    "title": "Class TracerProviderBuilderExtensions | Npgsql Documentation",
    "keywords": "Class TracerProviderBuilderExtensions Extension method for setting up Npgsql OpenTelemetry tracing. Inheritance Object TracerProviderBuilderExtensions Namespace : Npgsql Assembly : Npgsql.OpenTelemetry.dll Syntax public static class TracerProviderBuilderExtensions : object Methods | Improve this Doc View Source AddNpgsql(TracerProviderBuilder, Nullable<Action<NpgsqlTracingOptions>>) Subscribes to the Npgsql activity source to enable OpenTelemetry tracing. Declaration public static TracerProviderBuilder AddNpgsql(this TracerProviderBuilder builder, Action<NpgsqlTracingOptions>? options = null) Parameters Type Name Description TracerProviderBuilder builder Nullable < Action < NpgsqlTracingOptions >> options Returns Type Description TracerProviderBuilder"
  },
  "doc/api/Npgsql.TypeMapping.html": {
    "href": "doc/api/Npgsql.TypeMapping.html",
    "title": "Namespace Npgsql.TypeMapping | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeMapping Interfaces INpgsqlTypeMapper A type mapper, managing how to read and write CLR values to PostgreSQL data types."
  },
  "doc/api/Npgsql.TypeMapping.INpgsqlTypeMapper.html": {
    "href": "doc/api/Npgsql.TypeMapping.INpgsqlTypeMapper.html",
    "title": "Interface INpgsqlTypeMapper | Npgsql Documentation",
    "keywords": "Interface INpgsqlTypeMapper A type mapper, managing how to read and write CLR values to PostgreSQL data types. Namespace : Npgsql.TypeMapping Assembly : Npgsql.dll Syntax public interface INpgsqlTypeMapper Remarks The preferred way to manage type mappings is on NpgsqlDataSourceBuilder . An alternative, but discouraged, method, is to manage them globally via GlobalTypeMapper ). Properties | Improve this Doc View Source DefaultNameTranslator The default name translator to convert CLR type names and member names. Defaults to NpgsqlSnakeCaseNameTranslator . Declaration INpgsqlNameTranslator DefaultNameTranslator { get; set; } Property Value Type Description INpgsqlNameTranslator Methods | Improve this Doc View Source AddTypeResolverFactory(TypeHandlerResolverFactory) Adds a type resolver factory, which produces resolvers that can add or modify support for PostgreSQL types. Typically used by plugins. Declaration void AddTypeResolverFactory(TypeHandlerResolverFactory resolverFactory) Parameters Type Name Description TypeHandlerResolverFactory resolverFactory The type resolver factory to be added. | Improve this Doc View Source MapComposite(Type, Nullable<String>, INpgsqlNameTranslator) Maps a CLR type to a composite type. Declaration INpgsqlTypeMapper MapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be mapped. Nullable < String > pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description INpgsqlTypeMapper Remarks Maps CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to DefaultNameTranslator . If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Improve this Doc View Source MapComposite<T>(Nullable<String>, INpgsqlNameTranslator) Maps a CLR type to a PostgreSQL composite type. Declaration INpgsqlTypeMapper MapComposite<T>(string? pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description Nullable < String > pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description INpgsqlTypeMapper Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your members to manually specify a PostgreSQL name. If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Improve this Doc View Source MapEnum<TEnum>(Nullable<String>, INpgsqlNameTranslator) Maps a CLR enum to a PostgreSQL enum type. Declaration INpgsqlTypeMapper MapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description Nullable < String > pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description INpgsqlTypeMapper Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. | Improve this Doc View Source Reset() Resets all mapping changes performed on this type mapper and reverts it to its original, starting state. Declaration void Reset() | Improve this Doc View Source UnmapComposite(Type, Nullable<String>, INpgsqlNameTranslator) Removes an existing composite mapping. Declaration bool UnmapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be unmapped. Nullable < String > pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description Boolean | Improve this Doc View Source UnmapComposite<T>(Nullable<String>, INpgsqlNameTranslator) Removes an existing composite mapping. Declaration bool UnmapComposite<T>(string? pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description Nullable < String > pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source UnmapEnum<TEnum>(Nullable<String>, INpgsqlNameTranslator) Removes an existing enum mapping. Declaration bool UnmapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description Nullable < String > pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator . Returns Type Description Boolean Type Parameters Name Description TEnum Extension Methods NpgsqlNodaTimeExtensions.UseNodaTime(INpgsqlTypeMapper) NpgsqlGeoJSONExtensions.UseGeoJson(INpgsqlTypeMapper, GeoJSONOptions, Boolean) NpgsqlJsonNetExtensions.UseJsonNet(INpgsqlTypeMapper, Type[], Type[], Nullable<JsonSerializerSettings>) NpgsqlNetTopologySuiteExtensions.UseNetTopologySuite(INpgsqlTypeMapper, Nullable<CoordinateSequenceFactory>, Nullable<PrecisionModel>, Ordinates, Boolean)"
  },
  "doc/api/Npgsql.Util.html": {
    "href": "doc/api/Npgsql.Util.html",
    "title": "Namespace Npgsql.Util | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Util Structs NpgsqlTimeout Represents a timeout that will expire at some point."
  },
  "doc/api/Npgsql.Util.NpgsqlTimeout.html": {
    "href": "doc/api/Npgsql.Util.NpgsqlTimeout.html",
    "title": "Struct NpgsqlTimeout | Npgsql Documentation",
    "keywords": "Struct NpgsqlTimeout Represents a timeout that will expire at some point. Namespace : Npgsql.Util Assembly : Npgsql.dll Syntax public readonly struct NpgsqlTimeout"
  },
  "doc/api/NpgsqlTypes.html": {
    "href": "doc/api/NpgsqlTypes.html",
    "title": "Namespace NpgsqlTypes | Npgsql Documentation",
    "keywords": "Namespace NpgsqlTypes Classes NpgsqlRange<T>.RangeTypeConverter Represents a type converter for NpgsqlRange<T> . NpgsqlTsQuery Represents a PostgreSQL tsquery. This is the base class for the lexeme, not, or, and, and \"followed by\" nodes. NpgsqlTsQueryAnd TsQuery And node. NpgsqlTsQueryBinOp Base class for TsQuery binary operators (& and |). NpgsqlTsQueryEmpty Represents an empty tsquery. Shold only be used as top node. NpgsqlTsQueryFollowedBy TsQuery \"Followed by\" Node. NpgsqlTsQueryLexeme TsQuery Lexeme node. NpgsqlTsQueryNot TsQuery Not node. NpgsqlTsQueryOr TsQuery Or Node. NpgsqlTsVector Represents a PostgreSQL tsvector. PgNameAttribute Indicates that this property or field corresponds to a PostgreSQL field with the specified name Structs NpgsqlBox Represents a PostgreSQL box type. NpgsqlCircle Represents a PostgreSQL Circle type. NpgsqlInet Represents a PostgreSQL inet type, which is a combination of an IPAddress and a subnet mask. NpgsqlInterval A raw representation of the PostgreSQL interval datatype. Use only when or NodaTime Period do not have sufficient range to handle your values. NpgsqlLine Represents a PostgreSQL line type. NpgsqlLogSequenceNumber Wraps a PostgreSQL Write-Ahead Log Sequence Number (see: https://www.postgresql.org/docs/current/datatype-pg-lsn.html ) NpgsqlLSeg Represents a PostgreSQL Line Segment type. NpgsqlPath Represents a PostgreSQL Path type. NpgsqlPoint Represents a PostgreSQL point type. NpgsqlPolygon Represents a PostgreSQL Polygon type. NpgsqlRange<T> Represents a PostgreSQL range type. NpgsqlTid Represents a PostgreSQL tid value NpgsqlTsVector.Lexeme Represents a lexeme. A lexeme consists of a text string and optional word entry positions. NpgsqlTsVector.Lexeme.WordEntryPos Represents a word entry position and an optional weight. Enums NpgsqlDbType Represents a PostgreSQL data type that can be written or read to the database. Used in places such as NpgsqlDbType to unambiguously specify how to encode or decode values. NpgsqlTsQuery.NodeKind NodeKind NpgsqlTsQueryLexeme.Weight Weight enum, can be OR'ed together. NpgsqlTsVector.Lexeme.Weight The weight is labeled from A to D. D is the default, and not printed."
  },
  "doc/api/NpgsqlTypes.NpgsqlBox.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlBox.html",
    "title": "Struct NpgsqlBox | Npgsql Documentation",
    "keywords": "Struct NpgsqlBox Represents a PostgreSQL box type. Implements IEquatable < NpgsqlBox > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlBox Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Improve this Doc View Source NpgsqlBox(NpgsqlPoint, NpgsqlPoint) Declaration public NpgsqlBox(NpgsqlPoint upperRight, NpgsqlPoint lowerLeft) Parameters Type Name Description NpgsqlPoint upperRight NpgsqlPoint lowerLeft | Improve this Doc View Source NpgsqlBox(Double, Double, Double, Double) Declaration public NpgsqlBox(double top, double right, double bottom, double left) Parameters Type Name Description Double top Double right Double bottom Double left Properties | Improve this Doc View Source Bottom Declaration public readonly double Bottom { get; } Property Value Type Description Double | Improve this Doc View Source Height Declaration public readonly double Height { get; } Property Value Type Description Double | Improve this Doc View Source IsEmpty Declaration public readonly bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Left Declaration public readonly double Left { get; } Property Value Type Description Double | Improve this Doc View Source LowerLeft Declaration public NpgsqlPoint LowerLeft { readonly get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Right Declaration public readonly double Right { get; } Property Value Type Description Double | Improve this Doc View Source Top Declaration public readonly double Top { get; } Property Value Type Description Double | Improve this Doc View Source UpperRight Declaration public NpgsqlPoint UpperRight { readonly get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Width Declaration public readonly double Width { get; } Property Value Type Description Double Methods | Improve this Doc View Source Equals(NpgsqlBox) Declaration public bool Equals(NpgsqlBox other) Parameters Type Name Description NpgsqlBox other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Parse(String) Declaration public static NpgsqlBox Parse(string s) Parameters Type Name Description String s Returns Type Description NpgsqlBox | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlBox, NpgsqlBox) Declaration public static bool operator ==(NpgsqlBox x, NpgsqlBox y) Parameters Type Name Description NpgsqlBox x NpgsqlBox y Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlBox, NpgsqlBox) Declaration public static bool operator !=(NpgsqlBox x, NpgsqlBox y) Parameters Type Name Description NpgsqlBox x NpgsqlBox y Returns Type Description Boolean Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlCircle.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlCircle.html",
    "title": "Struct NpgsqlCircle | Npgsql Documentation",
    "keywords": "Struct NpgsqlCircle Represents a PostgreSQL Circle type. Implements IEquatable < NpgsqlCircle > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlCircle Constructors | Improve this Doc View Source NpgsqlCircle(NpgsqlPoint, Double) Declaration public NpgsqlCircle(NpgsqlPoint center, double radius) Parameters Type Name Description NpgsqlPoint center Double radius | Improve this Doc View Source NpgsqlCircle(Double, Double, Double) Declaration public NpgsqlCircle(double x, double y, double radius) Parameters Type Name Description Double x Double y Double radius Properties | Improve this Doc View Source Center Declaration public NpgsqlPoint Center { get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Radius Declaration public double Radius { readonly get; set; } Property Value Type Description Double | Improve this Doc View Source X Declaration public double X { readonly get; set; } Property Value Type Description Double | Improve this Doc View Source Y Declaration public double Y { readonly get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Equals(NpgsqlCircle) Declaration public bool Equals(NpgsqlCircle other) Parameters Type Name Description NpgsqlCircle other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Parse(String) Declaration public static NpgsqlCircle Parse(string s) Parameters Type Name Description String s Returns Type Description NpgsqlCircle | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlCircle, NpgsqlCircle) Declaration public static bool operator ==(NpgsqlCircle x, NpgsqlCircle y) Parameters Type Name Description NpgsqlCircle x NpgsqlCircle y Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlCircle, NpgsqlCircle) Declaration public static bool operator !=(NpgsqlCircle x, NpgsqlCircle y) Parameters Type Name Description NpgsqlCircle x NpgsqlCircle y Returns Type Description Boolean Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlDbType.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlDbType.html",
    "title": "Enum NpgsqlDbType | Npgsql Documentation",
    "keywords": "Enum NpgsqlDbType Represents a PostgreSQL data type that can be written or read to the database. Used in places such as NpgsqlDbType to unambiguously specify how to encode or decode values. Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public enum NpgsqlDbType : int Remarks See https://www.postgresql.org/docs/current/static/datatype.html . Fields Name Description Abstime Corresponds to the obsolete PostgreSQL \"abstime\" type. Array Corresponds to the PostgreSQL \"array\" type, a variable-length multidimensional array of another type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Array | NpgsqlDbType.Integer) Bigint Corresponds to the PostgreSQL 8-byte \"bigint\" type. BigIntMultirange Corresponds to the PostgreSQL \"int8multirange\" type. BigIntRange Corresponds to the PostgreSQL \"int8range\" type. Bit Corresponds to the PostgreSQL \"bit\" type. Boolean Corresponds to the PostgreSQL \"boolean\" type. Box Corresponds to the PostgreSQL geometric \"box\" type. Bytea Corresponds to the PostgreSQL \"bytea\" type, holding a raw byte string. Char Corresponds to the PostgreSQL \"char(n)\" type. Cid Corresponds to the PostgreSQL \"cid\" type, an internal command identifier. Cidr Corresponds to the PostgreSQL \"cidr\" type, a field storing an IPv4 or IPv6 network. Circle Corresponds to the PostgreSQL geometric \"circle\" type. Citext Corresponds to the PostgreSQL \"citext\" type for the citext module. Date Corresponds to the PostgreSQL \"date\" type. DateMultirange Corresponds to the PostgreSQL \"datemultirange\" type. DateRange Corresponds to the PostgreSQL \"daterange\" type. Double Corresponds to the PostgreSQL 8-byte floating-point \"double\" type. Geography The geography (geodetic) type for PostgreSQL spatial extension PostGIS. Geometry The geometry type for PostgreSQL spatial extension PostGIS. Hstore Corresponds to the PostgreSQL \"hstore\" type, a dictionary of string key-value pairs. Inet Corresponds to the PostgreSQL \"inet\" type. Int2Vector Corresponds to the PostgreSQL internal \"int2vector\" type. Integer Corresponds to the PostgreSQL 4-byte \"integer\" type. IntegerMultirange Corresponds to the PostgreSQL \"int4multirange\" type. IntegerRange Corresponds to the PostgreSQL \"int4range\" type. InternalChar Corresponds to the PostgreSQL \"char\" type. Interval Corresponds to the PostgreSQL \"interval\" type. Json Corresponds to the PostgreSQL \"json\" type, a field storing JSON in text format. Jsonb Corresponds to the PostgreSQL \"jsonb\" type, a field storing JSON in an optimized binary. format. JsonPath Corresponds to the PostgreSQL \"jsonpath\" type, a field storing JSON path in text format. format. Line Corresponds to the PostgreSQL geometric \"line\" type. LQuery The PostgreSQL lquery type for PostgreSQL extension ltree LSeg Corresponds to the PostgreSQL geometric \"lseg\" type. LTree The PostgreSQL ltree type, each value is a label path \"a.label.tree.value\", forming a tree in a set. LTxtQuery The PostgreSQL ltxtquery type for PostgreSQL extension ltree MacAddr Corresponds to the PostgreSQL \"macaddr\" type, a field storing a 6-byte physical address. MacAddr8 Corresponds to the PostgreSQL \"macaddr8\" type, a field storing a 6-byte or 8-byte physical address. Money Corresponds to the PostgreSQL \"money\" type. Multirange Corresponds to the PostgreSQL \"multirange\" type, continuous range of values of specific type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Multirange | NpgsqlDbType.Integer) Name Corresponds to the PostgreSQL internal \"name\" type. Numeric Corresponds to the PostgreSQL arbitrary-precision \"numeric\" type. NumericMultirange Corresponds to the PostgreSQL \"nummultirange\" type. NumericRange Corresponds to the PostgreSQL \"numrange\" type. Oid Corresponds to the PostgreSQL \"oid\" type. Oidvector Corresponds to the PostgreSQL internal \"oidvector\" type. Path Corresponds to the PostgreSQL geometric \"path\" type. PgLsn Corresponds to the PostgreSQL \"pg_lsn\" type, which can be used to store LSN (Log Sequence Number) data which is a pointer to a location in the WAL. Point Corresponds to the PostgreSQL geometric \"point\" type. Polygon Corresponds to the PostgreSQL geometric \"polygon\" type. Range Corresponds to the PostgreSQL \"range\" type, continuous range of values of specific type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Range | NpgsqlDbType.Integer) Real Corresponds to the PostgreSQL floating-point \"real\" type. Refcursor Corresponds to the PostgreSQL \"refcursor\" type. Regconfig Corresponds to the PostgreSQL \"regconfig\" type. Regtype Corresponds to the PostgreSQL \"regtype\" type, a numeric (OID) ID of a type in the pg_type table. Smallint Corresponds to the PostgreSQL 2-byte \"smallint\" type. Text Corresponds to the PostgreSQL \"text\" type. Tid Corresponds to the PostgreSQL \"tid\" type, a tuple id identifying the physical location of a row within its table. Time Corresponds to the PostgreSQL \"time\" type. Timestamp Corresponds to the PostgreSQL \"timestamp\" type. TimestampMultirange Corresponds to the PostgreSQL \"tsmultirange\" type. TimestampRange Corresponds to the PostgreSQL \"tsrange\" type. TimestampTz Corresponds to the PostgreSQL \"timestamp with time zone\" type. TimestampTZ Corresponds to the PostgreSQL \"timestamp with time zone\" type. TimestampTzMultirange Corresponds to the PostgreSQL \"tstzmultirange\" type. TimestampTzRange Corresponds to the PostgreSQL \"tstzrange\" type. TimeTz Corresponds to the PostgreSQL \"time with time zone\" type. TimeTZ Corresponds to the PostgreSQL \"time with time zone\" type. TsQuery Corresponds to the PostgreSQL \"tsquery\" type. TsVector Corresponds to the PostgreSQL \"tsvector\" type. Unknown A special value that can be used to send parameter values to the database without specifying their type, allowing the database to cast them to another value based on context. The value will be converted to a string and send as text. Uuid Corresponds to the PostgreSQL \"uuid\" type. Varbit Corresponds to the PostgreSQL \"varbit\" type, a field storing a variable-length string of bits. Varchar Corresponds to the PostgreSQL \"varchar\" type. Xid Corresponds to the PostgreSQL \"xid\" type, an internal transaction identifier. Xid8 Corresponds to the PostgreSQL \"xid8\" type, an internal transaction identifier. Xml Corresponds to the PostgreSQL \"xml\" type."
  },
  "doc/api/NpgsqlTypes.NpgsqlInet.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlInet.html",
    "title": "Struct NpgsqlInet | Npgsql Documentation",
    "keywords": "Struct NpgsqlInet Represents a PostgreSQL inet type, which is a combination of an IPAddress and a subnet mask. Implements IEquatable < NpgsqlInet > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlInet Remarks https://www.postgresql.org/docs/current/static/datatype-net-types.html Constructors | Improve this Doc View Source NpgsqlInet(IPAddress) Declaration public NpgsqlInet(IPAddress address) Parameters Type Name Description IPAddress address | Improve this Doc View Source NpgsqlInet(IPAddress, Int32) Declaration public NpgsqlInet(IPAddress address, int netmask) Parameters Type Name Description IPAddress address Int32 netmask | Improve this Doc View Source NpgsqlInet(String) Declaration public NpgsqlInet(string addr) Parameters Type Name Description String addr Properties | Improve this Doc View Source Address Declaration public IPAddress Address { readonly get; set; } Property Value Type Description IPAddress | Improve this Doc View Source Netmask Declaration public int Netmask { readonly get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Deconstruct(out IPAddress, out Int32) Declaration public void Deconstruct(out IPAddress address, out int netmask) Parameters Type Name Description IPAddress address Int32 netmask | Improve this Doc View Source Equals(NpgsqlInet) Declaration public bool Equals(NpgsqlInet other) Parameters Type Name Description NpgsqlInet other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source ToIPAddress(NpgsqlInet) Declaration public static IPAddress ToIPAddress(NpgsqlInet inet) Parameters Type Name Description NpgsqlInet inet Returns Type Description IPAddress | Improve this Doc View Source ToNpgsqlInet(Nullable<IPAddress>) Declaration public static NpgsqlInet ToNpgsqlInet(IPAddress? ip) Parameters Type Name Description Nullable < IPAddress > ip Returns Type Description NpgsqlInet | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlInet, NpgsqlInet) Declaration public static bool operator ==(NpgsqlInet x, NpgsqlInet y) Parameters Type Name Description NpgsqlInet x NpgsqlInet y Returns Type Description Boolean | Improve this Doc View Source Explicit(NpgsqlInet to IPAddress) Declaration public static explicit operator IPAddress(NpgsqlInet inet) Parameters Type Name Description NpgsqlInet inet Returns Type Description IPAddress | Improve this Doc View Source Implicit(IPAddress to NpgsqlInet) Declaration public static implicit operator NpgsqlInet(IPAddress ip) Parameters Type Name Description IPAddress ip Returns Type Description NpgsqlInet | Improve this Doc View Source Inequality(NpgsqlInet, NpgsqlInet) Declaration public static bool operator !=(NpgsqlInet x, NpgsqlInet y) Parameters Type Name Description NpgsqlInet x NpgsqlInet y Returns Type Description Boolean Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlInterval.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlInterval.html",
    "title": "Struct NpgsqlInterval | Npgsql Documentation",
    "keywords": "Struct NpgsqlInterval A raw representation of the PostgreSQL interval datatype. Use only when or NodaTime Period do not have sufficient range to handle your values. Implements IEquatable < NpgsqlInterval > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public readonly struct NpgsqlInterval Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html . Do not use this type unless you have to: prefer or NodaTime Period when possible. Constructors | Improve this Doc View Source NpgsqlInterval(Int32, Int32, Int64) Constructs an NpgsqlInterval . Declaration public NpgsqlInterval(int months, int days, long time) Parameters Type Name Description Int32 months Int32 days Int64 time Properties | Improve this Doc View Source Days Days, after time for alignment. Declaration public readonly int Days { get; } Property Value Type Description Int32 | Improve this Doc View Source Months Months and years, after time for alignment. Declaration public readonly int Months { get; } Property Value Type Description Int32 | Improve this Doc View Source Time Remaining time unit smaller than a day, in microseconds. Declaration public readonly long Time { get; } Property Value Type Description Int64 Methods | Improve this Doc View Source Equals(NpgsqlInterval) Declaration public readonly bool Equals(NpgsqlInterval other) Parameters Type Name Description NpgsqlInterval other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override readonly bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlLine.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlLine.html",
    "title": "Struct NpgsqlLine | Npgsql Documentation",
    "keywords": "Struct NpgsqlLine Represents a PostgreSQL line type. Implements IEquatable < NpgsqlLine > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlLine Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Improve this Doc View Source NpgsqlLine(Double, Double, Double) Declaration public NpgsqlLine(double a, double b, double c) Parameters Type Name Description Double a Double b Double c Properties | Improve this Doc View Source A Declaration public double A { readonly get; set; } Property Value Type Description Double | Improve this Doc View Source B Declaration public double B { readonly get; set; } Property Value Type Description Double | Improve this Doc View Source C Declaration public double C { readonly get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Equals(NpgsqlLine) Declaration public bool Equals(NpgsqlLine other) Parameters Type Name Description NpgsqlLine other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Parse(String) Declaration public static NpgsqlLine Parse(string s) Parameters Type Name Description String s Returns Type Description NpgsqlLine | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlLine, NpgsqlLine) Declaration public static bool operator ==(NpgsqlLine x, NpgsqlLine y) Parameters Type Name Description NpgsqlLine x NpgsqlLine y Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlLine, NpgsqlLine) Declaration public static bool operator !=(NpgsqlLine x, NpgsqlLine y) Parameters Type Name Description NpgsqlLine x NpgsqlLine y Returns Type Description Boolean Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlLogSequenceNumber.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlLogSequenceNumber.html",
    "title": "Struct NpgsqlLogSequenceNumber | Npgsql Documentation",
    "keywords": "Struct NpgsqlLogSequenceNumber Wraps a PostgreSQL Write-Ahead Log Sequence Number (see: https://www.postgresql.org/docs/current/datatype-pg-lsn.html ) Implements IEquatable < NpgsqlLogSequenceNumber > IComparable < NpgsqlLogSequenceNumber > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public readonly struct NpgsqlLogSequenceNumber Remarks Log Sequence Numbers are a fundamental concept of the PostgreSQL Write-Ahead Log and by that of PostgreSQL replication. See https://www.postgresql.org/docs/current/wal-internals.html for what they represent. This struct provides conversions from/to and and beyond that tries to port the methods and operators in https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/utils/adt/pg_lsn.c but nothing more. Constructors | Improve this Doc View Source NpgsqlLogSequenceNumber(UInt64) Initializes a new instance of NpgsqlLogSequenceNumber . Declaration public NpgsqlLogSequenceNumber(ulong value) Parameters Type Name Description UInt64 value The value to wrap. Fields | Improve this Doc View Source Invalid Zero is used indicate an invalid Log Sequence Number. No XLOG record can begin at zero. Declaration public static readonly NpgsqlLogSequenceNumber Invalid Field Value Type Description NpgsqlLogSequenceNumber Methods | Improve this Doc View Source CompareTo(NpgsqlLogSequenceNumber) Compares this instance to a specified NpgsqlLogSequenceNumber and returns an indication of their relative values. Declaration public readonly int CompareTo(NpgsqlLogSequenceNumber value) Parameters Type Name Description NpgsqlLogSequenceNumber value A NpgsqlLogSequenceNumber instance to compare to this instance. Returns Type Description Int32 A signed number indicating the relative values of this instance and value . | Improve this Doc View Source Equals(NpgsqlLogSequenceNumber) Returns a value indicating whether this instance is equal to a specified NpgsqlLogSequenceNumber instance. Declaration public readonly bool Equals(NpgsqlLogSequenceNumber other) Parameters Type Name Description NpgsqlLogSequenceNumber other A NpgsqlLogSequenceNumber instance to compare to this instance. Returns Type Description Boolean true if the current instance is equal to the value parameter; otherwise, false . | Improve this Doc View Source Equals(Nullable<Object>) Returns a value indicating whether this instance is equal to a specified object. Declaration public override readonly bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj An object to compare to this instance Returns Type Description Boolean true if the current instance is equal to the value parameter; otherwise, false . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. | Improve this Doc View Source Larger(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns the larger of two NpgsqlLogSequenceNumber values. Declaration public static NpgsqlLogSequenceNumber Larger(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description NpgsqlLogSequenceNumber The larger of the two NpgsqlLogSequenceNumber values. | Improve this Doc View Source Parse(ReadOnlySpan<Char>) Converts the span representation of a Log Sequence Number to a NpgsqlLogSequenceNumber instance. Declaration public static NpgsqlLogSequenceNumber Parse(ReadOnlySpan<char> s) Parameters Type Name Description ReadOnlySpan < Char > s A span containing the characters that represent the Log Sequence Number to convert. Returns Type Description NpgsqlLogSequenceNumber A NpgsqlLogSequenceNumber equivalent to the Log Sequence Number specified in s . | Improve this Doc View Source Parse(String) Converts the string representation of a Log Sequence Number to a NpgsqlLogSequenceNumber instance. Declaration public static NpgsqlLogSequenceNumber Parse(string s) Parameters Type Name Description String s A string that represents the Log Sequence Number to convert. Returns Type Description NpgsqlLogSequenceNumber A NpgsqlLogSequenceNumber equivalent to the Log Sequence Number specified in s . | Improve this Doc View Source Smaller(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns the smaller of two NpgsqlLogSequenceNumber values. Declaration public static NpgsqlLogSequenceNumber Smaller(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description NpgsqlLogSequenceNumber The smaller of the two NpgsqlLogSequenceNumber values. | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override readonly string ToString() Returns Type Description String The string representation of the value of this instance, consisting of two hexadecimal numbers of up to 8 digits each, separated by a slash | Improve this Doc View Source TryParse(ReadOnlySpan<Char>, out NpgsqlLogSequenceNumber) Tries to convert the span representation of a Log Sequence Number to an NpgsqlLogSequenceNumber instance. A return value indicates whether the conversion succeeded or failed. Declaration public static bool TryParse(ReadOnlySpan<char> s, out NpgsqlLogSequenceNumber result) Parameters Type Name Description ReadOnlySpan < Char > s A span containing the characters that represent the Log Sequence Number to convert. NpgsqlLogSequenceNumber result When this method returns, contains a NpgsqlLogSequenceNumber instance equivalent to the Log Sequence Number contained in s , if the conversion succeeded, or the default value for NpgsqlLogSequenceNumber ( 0 ) if the conversion failed. The conversion fails if the s parameter is empty, is not in the right format, or represents a number less than or greater than . This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if s was converted successfully; otherwise, false . | Improve this Doc View Source TryParse(String, out NpgsqlLogSequenceNumber) Tries to convert the string representation of a Log Sequence Number to an NpgsqlLogSequenceNumber instance. A return value indicates whether the conversion succeeded or failed. Declaration public static bool TryParse(string s, out NpgsqlLogSequenceNumber result) Parameters Type Name Description String s A string that represents the Log Sequence Number to convert. NpgsqlLogSequenceNumber result When this method returns, contains a NpgsqlLogSequenceNumber instance equivalent to the Log Sequence Number contained in s , if the conversion succeeded, or the default value for NpgsqlLogSequenceNumber ( 0 ) if the conversion failed. The conversion fails if the s parameter is null or , is not in the right format, or represents a number less than or greater than . This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if s c> was converted successfully; otherwise, false . Operators | Improve this Doc View Source Addition(NpgsqlLogSequenceNumber, Double) Add the number of bytes to a NpgsqlLogSequenceNumber instance, giving a new NpgsqlLogSequenceNumber instance. Handles both positive and negative numbers of bytes. Declaration public static NpgsqlLogSequenceNumber operator +(NpgsqlLogSequenceNumber lsn, double nbytes) Parameters Type Name Description NpgsqlLogSequenceNumber lsn The NpgsqlLogSequenceNumber instance representing a write-ahead log location. Double nbytes The number of bytes to add. Returns Type Description NpgsqlLogSequenceNumber A new NpgsqlLogSequenceNumber instance. | Improve this Doc View Source Equality(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value that indicates whether two specified instances of NpgsqlLogSequenceNumber are equal. Declaration public static bool operator ==(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first Log Sequence Number to compare. NpgsqlLogSequenceNumber value2 The second Log Sequence Number to compare. Returns Type Description Boolean true if value1 equals value2 ; otherwise, false . | Improve this Doc View Source Explicit(NpgsqlLogSequenceNumber to UInt64) Converts the value of a NpgsqlLogSequenceNumber instance to a 64-bit unsigned integer value. Declaration public static explicit operator ulong (NpgsqlLogSequenceNumber value) Parameters Type Name Description NpgsqlLogSequenceNumber value A NpgsqlLogSequenceNumber instance Returns Type Description UInt64 The contents of value as 64-bit unsigned integer. | Improve this Doc View Source Explicit(UInt64 to NpgsqlLogSequenceNumber) Converts the value of a 64-bit unsigned integer to a NpgsqlLogSequenceNumber instance. Declaration public static explicit operator NpgsqlLogSequenceNumber(ulong value) Parameters Type Name Description UInt64 value A 64-bit unsigned integer. Returns Type Description NpgsqlLogSequenceNumber A new instance of NpgsqlLogSequenceNumber initialized to value . | Improve this Doc View Source GreaterThan(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value indicating whether a specified NpgsqlLogSequenceNumber instance is greater than another specified NpgsqlLogSequenceNumber instance. Declaration public static bool operator>(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description Boolean true if value1 is greater than value2 ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value indicating whether a specified NpgsqlLogSequenceNumber instance is greater than or equal to another specified NpgsqlLogSequenceNumber instance. Declaration public static bool operator >=(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description Boolean true if value1 is greater than or equal to value2 ; otherwise, false . | Improve this Doc View Source Inequality(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value that indicates whether two specified instances of NpgsqlLogSequenceNumber are not equal. Declaration public static bool operator !=(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first Log Sequence Number to compare. NpgsqlLogSequenceNumber value2 The second Log Sequence Number to compare. Returns Type Description Boolean true if value1 does not equal value2 ; otherwise, false . | Improve this Doc View Source LessThan(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value indicating whether a specified NpgsqlLogSequenceNumber instance is less than another specified NpgsqlLogSequenceNumber instance. Declaration public static bool operator <(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description Boolean true if value1 is less than value2 ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value indicating whether a specified NpgsqlLogSequenceNumber instance is less than or equal to another specified NpgsqlLogSequenceNumber instance. Declaration public static bool operator <=(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description Boolean true if value1 is less than or equal to value2 ; otherwise, false . | Improve this Doc View Source Subtraction(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Subtracts two specified NpgsqlLogSequenceNumber values. Declaration public static ulong operator -(NpgsqlLogSequenceNumber first, NpgsqlLogSequenceNumber second) Parameters Type Name Description NpgsqlLogSequenceNumber first The first NpgsqlLogSequenceNumber value. NpgsqlLogSequenceNumber second The second NpgsqlLogSequenceNumber value. Returns Type Description UInt64 The number of bytes separating those write-ahead log locations. | Improve this Doc View Source Subtraction(NpgsqlLogSequenceNumber, Double) Subtract the number of bytes from a NpgsqlLogSequenceNumber instance, giving a new NpgsqlLogSequenceNumber instance. Handles both positive and negative numbers of bytes. Declaration public static NpgsqlLogSequenceNumber operator -(NpgsqlLogSequenceNumber lsn, double nbytes) Parameters Type Name Description NpgsqlLogSequenceNumber lsn The NpgsqlLogSequenceNumber instance representing a write-ahead log location. Double nbytes The number of bytes to subtract. Returns Type Description NpgsqlLogSequenceNumber A new NpgsqlLogSequenceNumber instance. Implements IEquatable<> IComparable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlLSeg.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlLSeg.html",
    "title": "Struct NpgsqlLSeg | Npgsql Documentation",
    "keywords": "Struct NpgsqlLSeg Represents a PostgreSQL Line Segment type. Implements IEquatable < NpgsqlLSeg > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlLSeg Constructors | Improve this Doc View Source NpgsqlLSeg(NpgsqlPoint, NpgsqlPoint) Declaration public NpgsqlLSeg(NpgsqlPoint start, NpgsqlPoint end) Parameters Type Name Description NpgsqlPoint start NpgsqlPoint end | Improve this Doc View Source NpgsqlLSeg(Double, Double, Double, Double) Declaration public NpgsqlLSeg(double startx, double starty, double endx, double endy) Parameters Type Name Description Double startx Double starty Double endx Double endy Properties | Improve this Doc View Source End Declaration public NpgsqlPoint End { readonly get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Start Declaration public NpgsqlPoint Start { readonly get; set; } Property Value Type Description NpgsqlPoint Methods | Improve this Doc View Source Equals(NpgsqlLSeg) Declaration public bool Equals(NpgsqlLSeg other) Parameters Type Name Description NpgsqlLSeg other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Parse(String) Declaration public static NpgsqlLSeg Parse(string s) Parameters Type Name Description String s Returns Type Description NpgsqlLSeg | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlLSeg, NpgsqlLSeg) Declaration public static bool operator ==(NpgsqlLSeg x, NpgsqlLSeg y) Parameters Type Name Description NpgsqlLSeg x NpgsqlLSeg y Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlLSeg, NpgsqlLSeg) Declaration public static bool operator !=(NpgsqlLSeg x, NpgsqlLSeg y) Parameters Type Name Description NpgsqlLSeg x NpgsqlLSeg y Returns Type Description Boolean Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlPath.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlPath.html",
    "title": "Struct NpgsqlPath | Npgsql Documentation",
    "keywords": "Struct NpgsqlPath Represents a PostgreSQL Path type. Implements IList < NpgsqlPoint > IEquatable < NpgsqlPath > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlPath Constructors | Improve this Doc View Source NpgsqlPath(IEnumerable<NpgsqlPoint>) Declaration public NpgsqlPath(IEnumerable<NpgsqlPoint> points) Parameters Type Name Description IEnumerable < NpgsqlPoint > points | Improve this Doc View Source NpgsqlPath(IEnumerable<NpgsqlPoint>, Boolean) Declaration public NpgsqlPath(IEnumerable<NpgsqlPoint> points, bool open) Parameters Type Name Description IEnumerable < NpgsqlPoint > points Boolean open | Improve this Doc View Source NpgsqlPath(NpgsqlPoint[]) Declaration public NpgsqlPath(params NpgsqlPoint[] points) Parameters Type Name Description NpgsqlPoint [] points | Improve this Doc View Source NpgsqlPath(Boolean) Declaration public NpgsqlPath(bool open) Parameters Type Name Description Boolean open | Improve this Doc View Source NpgsqlPath(Int32) Declaration public NpgsqlPath(int capacity) Parameters Type Name Description Int32 capacity | Improve this Doc View Source NpgsqlPath(Int32, Boolean) Declaration public NpgsqlPath(int capacity, bool open) Parameters Type Name Description Int32 capacity Boolean open Properties | Improve this Doc View Source Capacity Declaration public readonly int Capacity { get; } Property Value Type Description Int32 | Improve this Doc View Source Count Declaration public readonly int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsReadOnly Declaration public readonly bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public NpgsqlPoint this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description NpgsqlPoint | Improve this Doc View Source Open Declaration public bool Open { readonly get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Add(NpgsqlPoint) Declaration public void Add(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(NpgsqlPoint) Declaration public bool Contains(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description Boolean | Improve this Doc View Source CopyTo(NpgsqlPoint[], Int32) Declaration public void CopyTo(NpgsqlPoint[] array, int arrayIndex) Parameters Type Name Description NpgsqlPoint [] array Int32 arrayIndex | Improve this Doc View Source Equals(NpgsqlPath) Declaration public bool Equals(NpgsqlPath other) Parameters Type Name Description NpgsqlPath other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<NpgsqlPoint> GetEnumerator() Returns Type Description IEnumerator < NpgsqlPoint > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source IndexOf(NpgsqlPoint) Declaration public int IndexOf(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, NpgsqlPoint) Declaration public void Insert(int index, NpgsqlPoint item) Parameters Type Name Description Int32 index NpgsqlPoint item | Improve this Doc View Source Parse(String) Declaration public static NpgsqlPath Parse(string s) Parameters Type Name Description String s Returns Type Description NpgsqlPath | Improve this Doc View Source Remove(NpgsqlPoint) Declaration public bool Remove(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlPath, NpgsqlPath) Declaration public static bool operator ==(NpgsqlPath x, NpgsqlPath y) Parameters Type Name Description NpgsqlPath x NpgsqlPath y Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlPath, NpgsqlPath) Declaration public static bool operator !=(NpgsqlPath x, NpgsqlPath y) Parameters Type Name Description NpgsqlPath x NpgsqlPath y Returns Type Description Boolean Implements IList<> IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlPoint.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlPoint.html",
    "title": "Struct NpgsqlPoint | Npgsql Documentation",
    "keywords": "Struct NpgsqlPoint Represents a PostgreSQL point type. Implements IEquatable < NpgsqlPoint > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlPoint Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Improve this Doc View Source NpgsqlPoint(Double, Double) Declaration public NpgsqlPoint(double x, double y) Parameters Type Name Description Double x Double y Properties | Improve this Doc View Source X Declaration public double X { readonly get; set; } Property Value Type Description Double | Improve this Doc View Source Y Declaration public double Y { readonly get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Equals(NpgsqlPoint) Declaration public bool Equals(NpgsqlPoint other) Parameters Type Name Description NpgsqlPoint other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Parse(String) Declaration public static NpgsqlPoint Parse(string s) Parameters Type Name Description String s Returns Type Description NpgsqlPoint | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlPoint, NpgsqlPoint) Declaration public static bool operator ==(NpgsqlPoint x, NpgsqlPoint y) Parameters Type Name Description NpgsqlPoint x NpgsqlPoint y Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlPoint, NpgsqlPoint) Declaration public static bool operator !=(NpgsqlPoint x, NpgsqlPoint y) Parameters Type Name Description NpgsqlPoint x NpgsqlPoint y Returns Type Description Boolean Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlPolygon.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlPolygon.html",
    "title": "Struct NpgsqlPolygon | Npgsql Documentation",
    "keywords": "Struct NpgsqlPolygon Represents a PostgreSQL Polygon type. Implements IList < NpgsqlPoint > IEquatable < NpgsqlPolygon > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlPolygon Constructors | Improve this Doc View Source NpgsqlPolygon(IEnumerable<NpgsqlPoint>) Declaration public NpgsqlPolygon(IEnumerable<NpgsqlPoint> points) Parameters Type Name Description IEnumerable < NpgsqlPoint > points | Improve this Doc View Source NpgsqlPolygon(NpgsqlPoint[]) Declaration public NpgsqlPolygon(params NpgsqlPoint[] points) Parameters Type Name Description NpgsqlPoint [] points | Improve this Doc View Source NpgsqlPolygon(Int32) Declaration public NpgsqlPolygon(int capacity) Parameters Type Name Description Int32 capacity Properties | Improve this Doc View Source Capacity Declaration public readonly int Capacity { get; } Property Value Type Description Int32 | Improve this Doc View Source Count Declaration public readonly int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsReadOnly Declaration public readonly bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public NpgsqlPoint this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description NpgsqlPoint Methods | Improve this Doc View Source Add(NpgsqlPoint) Declaration public void Add(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(NpgsqlPoint) Declaration public bool Contains(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description Boolean | Improve this Doc View Source CopyTo(NpgsqlPoint[], Int32) Declaration public void CopyTo(NpgsqlPoint[] array, int arrayIndex) Parameters Type Name Description NpgsqlPoint [] array Int32 arrayIndex | Improve this Doc View Source Equals(NpgsqlPolygon) Declaration public bool Equals(NpgsqlPolygon other) Parameters Type Name Description NpgsqlPolygon other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<NpgsqlPoint> GetEnumerator() Returns Type Description IEnumerator < NpgsqlPoint > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source IndexOf(NpgsqlPoint) Declaration public int IndexOf(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, NpgsqlPoint) Declaration public void Insert(int index, NpgsqlPoint item) Parameters Type Name Description Int32 index NpgsqlPoint item | Improve this Doc View Source Parse(String) Declaration public static NpgsqlPolygon Parse(string s) Parameters Type Name Description String s Returns Type Description NpgsqlPolygon | Improve this Doc View Source Remove(NpgsqlPoint) Declaration public bool Remove(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlPolygon, NpgsqlPolygon) Declaration public static bool operator ==(NpgsqlPolygon x, NpgsqlPolygon y) Parameters Type Name Description NpgsqlPolygon x NpgsqlPolygon y Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlPolygon, NpgsqlPolygon) Declaration public static bool operator !=(NpgsqlPolygon x, NpgsqlPolygon y) Parameters Type Name Description NpgsqlPolygon x NpgsqlPolygon y Returns Type Description Boolean Implements IList<> IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlRange-1.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlRange-1.html",
    "title": "Struct NpgsqlRange<T> | Npgsql Documentation",
    "keywords": "Struct NpgsqlRange<T> Represents a PostgreSQL range type. Implements IEquatable < NpgsqlRange <T>> Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public readonly struct NpgsqlRange<T> Type Parameters Name Description T The element type of the values in the range. Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Constructors | Improve this Doc View Source NpgsqlRange(T, T) Constructs an NpgsqlRange<T> with inclusive and definite bounds. Declaration public NpgsqlRange(T lowerBound, T upperBound) Parameters Type Name Description T lowerBound The lower bound of the range. T upperBound The upper bound of the range. | Improve this Doc View Source NpgsqlRange(T, Boolean, T, Boolean) Constructs an NpgsqlRange<T> with definite bounds. Declaration public NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, T upperBound, bool upperBoundIsInclusive) Parameters Type Name Description T lowerBound The lower bound of the range. Boolean lowerBoundIsInclusive True if the lower bound is is part of the range (i.e. inclusive); otherwise, false. T upperBound The upper bound of the range. Boolean upperBoundIsInclusive True if the upper bound is part of the range (i.e. inclusive); otherwise, false. | Improve this Doc View Source NpgsqlRange(T, Boolean, Boolean, T, Boolean, Boolean) Constructs an NpgsqlRange<T> . Declaration public NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, bool lowerBoundInfinite, T upperBound, bool upperBoundIsInclusive, bool upperBoundInfinite) Parameters Type Name Description T lowerBound The lower bound of the range. Boolean lowerBoundIsInclusive True if the lower bound is is part of the range (i.e. inclusive); otherwise, false. Boolean lowerBoundInfinite True if the lower bound is indefinite (i.e. infinite or unbounded); otherwise, false. T upperBound The upper bound of the range. Boolean upperBoundIsInclusive True if the upper bound is part of the range (i.e. inclusive); otherwise, false. Boolean upperBoundInfinite True if the upper bound is indefinite (i.e. infinite or unbounded); otherwise, false. Fields | Improve this Doc View Source Empty Represents the empty range. This field is read-only. Declaration public static readonly NpgsqlRange<T> Empty Field Value Type Description NpgsqlRange <T> Properties | Improve this Doc View Source IsEmpty True if the range is empty; otherwise, false. Declaration public readonly bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source LowerBound The lower bound of the range. Only valid when LowerBoundInfinite is false. Declaration public readonly T LowerBound { get; } Property Value Type Description T | Improve this Doc View Source LowerBoundInfinite True if the lower bound is indefinite (i.e. infinite or unbounded); otherwise, false. Declaration public readonly bool LowerBoundInfinite { get; } Property Value Type Description Boolean | Improve this Doc View Source LowerBoundIsInclusive True if the lower bound is part of the range (i.e. inclusive); otherwise, false. Declaration public readonly bool LowerBoundIsInclusive { get; } Property Value Type Description Boolean | Improve this Doc View Source UpperBound The upper bound of the range. Only valid when UpperBoundInfinite is false. Declaration public readonly T UpperBound { get; } Property Value Type Description T | Improve this Doc View Source UpperBoundInfinite True if the upper bound is indefinite (i.e. infinite or unbounded); otherwise, false. Declaration public readonly bool UpperBoundInfinite { get; } Property Value Type Description Boolean | Improve this Doc View Source UpperBoundIsInclusive True if the upper bound is part of the range (i.e. inclusive); otherwise, false. Declaration public readonly bool UpperBoundIsInclusive { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(NpgsqlRange<T>) Declaration public readonly bool Equals(NpgsqlRange<T> other) Parameters Type Name Description NpgsqlRange <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override readonly bool Equals(object? o) Parameters Type Name Description Nullable < Object > o Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Parse(String) Parses the well-known text representation of a PostgreSQL range type into a NpgsqlRange<T> . Declaration public static NpgsqlRange<T> Parse(string value) Parameters Type Name Description String value A PosgreSQL range type in a well-known text format. Returns Type Description NpgsqlRange <T> The NpgsqlRange<T> represented by the value . Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html | Improve this Doc View Source ToString() Declaration public override readonly string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlRange<T>, NpgsqlRange<T>) Indicates whether the NpgsqlRange<T> on the left is equal to the NpgsqlRange<T> on the right. Declaration public static bool operator ==(NpgsqlRange<T> x, NpgsqlRange<T> y) Parameters Type Name Description NpgsqlRange <T> x The NpgsqlRange<T> on the left. NpgsqlRange <T> y The NpgsqlRange<T> on the right. Returns Type Description Boolean True if the NpgsqlRange<T> on the left is equal to the NpgsqlRange<T> on the right; otherwise, false. | Improve this Doc View Source Inequality(NpgsqlRange<T>, NpgsqlRange<T>) Indicates whether the NpgsqlRange<T> on the left is not equal to the NpgsqlRange<T> on the right. Declaration public static bool operator !=(NpgsqlRange<T> x, NpgsqlRange<T> y) Parameters Type Name Description NpgsqlRange <T> x The NpgsqlRange<T> on the left. NpgsqlRange <T> y The NpgsqlRange<T> on the right. Returns Type Description Boolean True if the NpgsqlRange<T> on the left is not equal to the NpgsqlRange<T> on the right; otherwise, false. Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlRange-1.RangeTypeConverter.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlRange-1.RangeTypeConverter.html",
    "title": "Class NpgsqlRange<T>.RangeTypeConverter | Npgsql Documentation",
    "keywords": "Class NpgsqlRange<T>.RangeTypeConverter Represents a type converter for NpgsqlRange<T> . Inheritance Object NpgsqlRange<T>.RangeTypeConverter Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public class RangeTypeConverter : TypeConverter Methods | Improve this Doc View Source CanConvertFrom(Nullable<ITypeDescriptorContext>, Type) Declaration public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters Type Name Description Nullable < ITypeDescriptorContext > context Type sourceType Returns Type Description Boolean | Improve this Doc View Source CanConvertTo(Nullable<ITypeDescriptorContext>, Nullable<Type>) Declaration public override bool CanConvertTo(ITypeDescriptorContext? context, Type? destinationType) Parameters Type Name Description Nullable < ITypeDescriptorContext > context Nullable < Type > destinationType Returns Type Description Boolean | Improve this Doc View Source ConvertFrom(Nullable<ITypeDescriptorContext>, Nullable<CultureInfo>, Object) Declaration public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters Type Name Description Nullable < ITypeDescriptorContext > context Nullable < CultureInfo > culture Object value Returns Type Description Nullable < Object > | Improve this Doc View Source ConvertTo(Nullable<ITypeDescriptorContext>, Nullable<CultureInfo>, Nullable<Object>, Type) Declaration public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType) Parameters Type Name Description Nullable < ITypeDescriptorContext > context Nullable < CultureInfo > culture Nullable < Object > value Type destinationType Returns Type Description Nullable < Object > | Improve this Doc View Source Register() Adds a to the closed form NpgsqlRange<T> . Declaration public static void Register()"
  },
  "doc/api/NpgsqlTypes.NpgsqlTid.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTid.html",
    "title": "Struct NpgsqlTid | Npgsql Documentation",
    "keywords": "Struct NpgsqlTid Represents a PostgreSQL tid value Implements IEquatable < NpgsqlTid > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public readonly struct NpgsqlTid Remarks https://www.postgresql.org/docs/current/static/datatype-oid.html Constructors | Improve this Doc View Source NpgsqlTid(UInt32, UInt16) Declaration public NpgsqlTid(uint blockNumber, ushort offsetNumber) Parameters Type Name Description UInt32 blockNumber UInt16 offsetNumber Properties | Improve this Doc View Source BlockNumber Block number Declaration public readonly uint BlockNumber { get; } Property Value Type Description UInt32 | Improve this Doc View Source OffsetNumber Tuple index within block Declaration public readonly ushort OffsetNumber { get; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Equals(NpgsqlTid) Declaration public readonly bool Equals(NpgsqlTid other) Parameters Type Name Description NpgsqlTid other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override readonly bool Equals(object? o) Parameters Type Name Description Nullable < Object > o Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source ToString() Declaration public override readonly string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlTid, NpgsqlTid) Declaration public static bool operator ==(NpgsqlTid left, NpgsqlTid right) Parameters Type Name Description NpgsqlTid left NpgsqlTid right Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlTid, NpgsqlTid) Declaration public static bool operator !=(NpgsqlTid left, NpgsqlTid right) Parameters Type Name Description NpgsqlTid left NpgsqlTid right Returns Type Description Boolean Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQuery.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQuery.html",
    "title": "Class NpgsqlTsQuery | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQuery Represents a PostgreSQL tsquery. This is the base class for the lexeme, not, or, and, and \"followed by\" nodes. Inheritance Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryEmpty NpgsqlTsQueryLexeme NpgsqlTsQueryNot Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public abstract class NpgsqlTsQuery : IEquatable<NpgsqlTsQuery> Constructors | Improve this Doc View Source NpgsqlTsQuery(NpgsqlTsQuery.NodeKind) Constructs an NpgsqlTsQuery . Declaration protected NpgsqlTsQuery(NpgsqlTsQuery.NodeKind kind) Parameters Type Name Description NpgsqlTsQuery.NodeKind kind Properties | Improve this Doc View Source Kind Node kind Declaration public NpgsqlTsQuery.NodeKind Kind { get; } Property Value Type Description NpgsqlTsQuery.NodeKind Methods | Improve this Doc View Source Equals(NpgsqlTsQuery) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public abstract bool Equals(NpgsqlTsQuery other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description Boolean true if g is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Parse(String) Parses a tsquery in PostgreSQL's text format. Declaration public static NpgsqlTsQuery Parse(string value) Parameters Type Name Description String value Returns Type Description NpgsqlTsQuery | Improve this Doc View Source ToString() Writes the tsquery in PostgreSQL's text format. Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source Write(StringBuilder) Writes the tsquery in PostgreSQL's text format. Declaration public void Write(StringBuilder stringBuilder) Parameters Type Name Description StringBuilder stringBuilder Operators | Improve this Doc View Source Equality(NpgsqlTsQuery, NpgsqlTsQuery) Indicates whether the values of two specified NpgsqlTsQuery objects are equal. Declaration public static bool operator ==(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left The first object to compare. NpgsqlTsQuery right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(NpgsqlTsQuery, NpgsqlTsQuery) Indicates whether the values of two specified NpgsqlTsQuery objects are not equal. Declaration public static bool operator !=(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left The first object to compare. NpgsqlTsQuery right The second object to compare. Returns Type Description Boolean true if left and right are not equal; otherwise, false ."
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQuery.NodeKind.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQuery.NodeKind.html",
    "title": "Enum NpgsqlTsQuery.NodeKind | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsQuery.NodeKind NodeKind Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public enum NodeKind : int Fields Name Description And And operator Empty Represents the empty tsquery. Should only be used at top level. Lexeme Lexeme Not Not operator Or Or operator Phrase \"Followed by\" operator"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryAnd.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryAnd.html",
    "title": "Class NpgsqlTsQueryAnd | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryAnd TsQuery And node. Inheritance Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryAnd Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) NpgsqlTsQuery.Equals(Nullable<Object>) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryAnd : NpgsqlTsQueryBinOp Constructors | Improve this Doc View Source NpgsqlTsQueryAnd(NpgsqlTsQuery, NpgsqlTsQuery) Creates an and operator, with two given child nodes. Declaration public NpgsqlTsQueryAnd(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left NpgsqlTsQuery right Methods | Improve this Doc View Source Equals(NpgsqlTsQuery) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description Boolean true if g is equal to this instance; otherwise, false . Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides NpgsqlTsQuery.GetHashCode()"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryBinOp.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryBinOp.html",
    "title": "Class NpgsqlTsQueryBinOp | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryBinOp Base class for TsQuery binary operators (& and |). Inheritance Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryAnd NpgsqlTsQueryFollowedBy NpgsqlTsQueryOr Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) NpgsqlTsQuery.GetHashCode() NpgsqlTsQuery.Equals(Nullable<Object>) NpgsqlTsQuery.Equals(NpgsqlTsQuery) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public abstract class NpgsqlTsQueryBinOp : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryBinOp(NpgsqlTsQuery.NodeKind, NpgsqlTsQuery, NpgsqlTsQuery) Constructs a NpgsqlTsQueryBinOp . Declaration protected NpgsqlTsQueryBinOp(NpgsqlTsQuery.NodeKind kind, NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery.NodeKind kind NpgsqlTsQuery left NpgsqlTsQuery right Properties | Improve this Doc View Source Left Left child Declaration public NpgsqlTsQuery Left { get; set; } Property Value Type Description NpgsqlTsQuery | Improve this Doc View Source Right Right child Declaration public NpgsqlTsQuery Right { get; set; } Property Value Type Description NpgsqlTsQuery"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryEmpty.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryEmpty.html",
    "title": "Class NpgsqlTsQueryEmpty | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryEmpty Represents an empty tsquery. Shold only be used as top node. Inheritance Object NpgsqlTsQuery NpgsqlTsQueryEmpty Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) NpgsqlTsQuery.Equals(Nullable<Object>) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryEmpty : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryEmpty() Creates a tsquery that represents an empty query. Should not be used as child node. Declaration public NpgsqlTsQueryEmpty() Methods | Improve this Doc View Source Equals(NpgsqlTsQuery) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description Boolean true if g is equal to this instance; otherwise, false . Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides NpgsqlTsQuery.GetHashCode()"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryFollowedBy.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryFollowedBy.html",
    "title": "Class NpgsqlTsQueryFollowedBy | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryFollowedBy TsQuery \"Followed by\" Node. Inheritance Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryFollowedBy Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) NpgsqlTsQuery.Equals(Nullable<Object>) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryFollowedBy : NpgsqlTsQueryBinOp Constructors | Improve this Doc View Source NpgsqlTsQueryFollowedBy(NpgsqlTsQuery, Int32, NpgsqlTsQuery) Creates a \"followed by\" operator, specifying 2 child nodes and the distance between them in lexemes. Declaration public NpgsqlTsQueryFollowedBy(NpgsqlTsQuery left, int distance, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left Int32 distance NpgsqlTsQuery right Properties | Improve this Doc View Source Distance The distance between the 2 nodes, in lexemes. Declaration public int Distance { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(NpgsqlTsQuery) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description Boolean true if g is equal to this instance; otherwise, false . Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides NpgsqlTsQuery.GetHashCode()"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.html",
    "title": "Class NpgsqlTsQueryLexeme | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryLexeme TsQuery Lexeme node. Inheritance Object NpgsqlTsQuery NpgsqlTsQueryLexeme Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) NpgsqlTsQuery.Equals(Nullable<Object>) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryLexeme : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryLexeme(String) Creates a tsquery lexeme with only lexeme text. Declaration public NpgsqlTsQueryLexeme(string text) Parameters Type Name Description String text Lexeme text. | Improve this Doc View Source NpgsqlTsQueryLexeme(String, NpgsqlTsQueryLexeme.Weight) Creates a tsquery lexeme with lexeme text and weights. Declaration public NpgsqlTsQueryLexeme(string text, NpgsqlTsQueryLexeme.Weight weights) Parameters Type Name Description String text Lexeme text. NpgsqlTsQueryLexeme.Weight weights Bitmask of enum Weight. | Improve this Doc View Source NpgsqlTsQueryLexeme(String, NpgsqlTsQueryLexeme.Weight, Boolean) Creates a tsquery lexeme with lexeme text, weights and prefix search flag. Declaration public NpgsqlTsQueryLexeme(string text, NpgsqlTsQueryLexeme.Weight weights, bool isPrefixSearch) Parameters Type Name Description String text Lexeme text. NpgsqlTsQueryLexeme.Weight weights Bitmask of enum Weight. Boolean isPrefixSearch Is prefix search? Properties | Improve this Doc View Source IsPrefixSearch Prefix search. Declaration public bool IsPrefixSearch { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Text Lexeme text. Declaration public string Text { get; set; } Property Value Type Description String | Improve this Doc View Source Weights Weights is a bitmask of the Weight enum. Declaration public NpgsqlTsQueryLexeme.Weight Weights { get; set; } Property Value Type Description NpgsqlTsQueryLexeme.Weight Methods | Improve this Doc View Source Equals(NpgsqlTsQuery) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description Boolean true if g is equal to this instance; otherwise, false . Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides NpgsqlTsQuery.GetHashCode()"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.html",
    "title": "Enum NpgsqlTsQueryLexeme.Weight | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsQueryLexeme.Weight Weight enum, can be OR'ed together. Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public enum Weight : int Fields Name Description A A B B C C D D None None"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryNot.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryNot.html",
    "title": "Class NpgsqlTsQueryNot | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryNot TsQuery Not node. Inheritance Object NpgsqlTsQuery NpgsqlTsQueryNot Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) NpgsqlTsQuery.Equals(Nullable<Object>) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryNot : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryNot(NpgsqlTsQuery) Creates a not operator, with a given child node. Declaration public NpgsqlTsQueryNot(NpgsqlTsQuery child) Parameters Type Name Description NpgsqlTsQuery child Properties | Improve this Doc View Source Child Child node Declaration public NpgsqlTsQuery Child { get; set; } Property Value Type Description NpgsqlTsQuery Methods | Improve this Doc View Source Equals(NpgsqlTsQuery) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description Boolean true if g is equal to this instance; otherwise, false . Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides NpgsqlTsQuery.GetHashCode()"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryOr.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryOr.html",
    "title": "Class NpgsqlTsQueryOr | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryOr TsQuery Or Node. Inheritance Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryOr Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) NpgsqlTsQuery.Equals(Nullable<Object>) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryOr : NpgsqlTsQueryBinOp Constructors | Improve this Doc View Source NpgsqlTsQueryOr(NpgsqlTsQuery, NpgsqlTsQuery) Creates an or operator, with two given child nodes. Declaration public NpgsqlTsQueryOr(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left NpgsqlTsQuery right Methods | Improve this Doc View Source Equals(NpgsqlTsQuery) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description Boolean true if g is equal to this instance; otherwise, false . Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides NpgsqlTsQuery.GetHashCode()"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.html",
    "title": "Class NpgsqlTsVector | Npgsql Documentation",
    "keywords": "Class NpgsqlTsVector Represents a PostgreSQL tsvector. Inheritance Object NpgsqlTsVector Implements IEquatable < NpgsqlTsVector > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsVector : IEnumerable<NpgsqlTsVector.Lexeme> Properties | Improve this Doc View Source Count Gets the number of lexemes. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Returns the lexeme at a specific index Declaration public NpgsqlTsVector.Lexeme this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description NpgsqlTsVector.Lexeme Methods | Improve this Doc View Source Equals(NpgsqlTsVector) Declaration public bool Equals(NpgsqlTsVector other) Parameters Type Name Description NpgsqlTsVector other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetEnumerator() Returns an enumerator. Declaration public IEnumerator<NpgsqlTsVector.Lexeme> GetEnumerator() Returns Type Description IEnumerator < NpgsqlTsVector.Lexeme > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Parse(String) Parses a tsvector in PostgreSQL's text format. Declaration public static NpgsqlTsVector Parse(string value) Parameters Type Name Description String value Returns Type Description NpgsqlTsVector | Improve this Doc View Source ToString() Gets a string representation in PostgreSQL's format. Declaration public override string ToString() Returns Type Description String Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.html",
    "title": "Struct NpgsqlTsVector.Lexeme | Npgsql Documentation",
    "keywords": "Struct NpgsqlTsVector.Lexeme Represents a lexeme. A lexeme consists of a text string and optional word entry positions. Implements IEquatable < NpgsqlTsVector.Lexeme > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct Lexeme Constructors | Improve this Doc View Source Lexeme(String) Creates a lexeme with no word entry positions. Declaration public Lexeme(string text) Parameters Type Name Description String text | Improve this Doc View Source Lexeme(String, Nullable<List<NpgsqlTsVector.Lexeme.WordEntryPos>>) Creates a lexeme with word entry positions. Declaration public Lexeme(string text, List<NpgsqlTsVector.Lexeme.WordEntryPos>? wordEntryPositions) Parameters Type Name Description String text Nullable < List < NpgsqlTsVector.Lexeme.WordEntryPos >> wordEntryPositions Properties | Improve this Doc View Source Count Gets the number of word entry positions. Declaration public readonly int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Gets a word entry position. Declaration public NpgsqlTsVector.Lexeme.WordEntryPos this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description NpgsqlTsVector.Lexeme.WordEntryPos | Improve this Doc View Source Text Gets or sets the text. Declaration public string Text { readonly get; set; } Property Value Type Description String Methods | Improve this Doc View Source Equals(NpgsqlTsVector.Lexeme) Determines whether the specified object is equal to the current object. Declaration public bool Equals(NpgsqlTsVector.Lexeme o) Parameters Type Name Description NpgsqlTsVector.Lexeme o Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? o) Parameters Type Name Description Nullable < Object > o Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Gets a hash code for the current object. Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source ToString() Creates a string representation in PostgreSQL's format. Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlTsVector.Lexeme, NpgsqlTsVector.Lexeme) Determines whether the specified object is equal to the current object. Declaration public static bool operator ==(NpgsqlTsVector.Lexeme left, NpgsqlTsVector.Lexeme right) Parameters Type Name Description NpgsqlTsVector.Lexeme left NpgsqlTsVector.Lexeme right Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlTsVector.Lexeme, NpgsqlTsVector.Lexeme) Determines whether the specified object is unequal to the current object. Declaration public static bool operator !=(NpgsqlTsVector.Lexeme left, NpgsqlTsVector.Lexeme right) Parameters Type Name Description NpgsqlTsVector.Lexeme left NpgsqlTsVector.Lexeme right Returns Type Description Boolean Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.html",
    "title": "Enum NpgsqlTsVector.Lexeme.Weight | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsVector.Lexeme.Weight The weight is labeled from A to D. D is the default, and not printed. Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public enum Weight : int Fields Name Description A A B B C C D D, the default"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.html",
    "title": "Struct NpgsqlTsVector.Lexeme.WordEntryPos | Npgsql Documentation",
    "keywords": "Struct NpgsqlTsVector.Lexeme.WordEntryPos Represents a word entry position and an optional weight. Implements IEquatable < NpgsqlTsVector.Lexeme.WordEntryPos > Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct WordEntryPos Constructors | Improve this Doc View Source WordEntryPos(Int32, NpgsqlTsVector.Lexeme.Weight) Creates a WordEntryPos with a given position and weight. Declaration public WordEntryPos(int pos, NpgsqlTsVector.Lexeme.Weight weight = default(NpgsqlTsVector.Lexeme.Weight)) Parameters Type Name Description Int32 pos Position values can range from 1 to 16383; larger numbers are silently set to 16383. NpgsqlTsVector.Lexeme.Weight weight A weight labeled between A and D. Properties | Improve this Doc View Source Pos The position is a 14-bit unsigned integer indicating the position in the text this lexeme occurs. Cannot be 0. Declaration public readonly int Pos { get; } Property Value Type Description Int32 | Improve this Doc View Source Weight The weight is labeled from A to D. D is the default, and not printed. Declaration public readonly NpgsqlTsVector.Lexeme.Weight Weight { get; } Property Value Type Description NpgsqlTsVector.Lexeme.Weight Methods | Improve this Doc View Source Equals(NpgsqlTsVector.Lexeme.WordEntryPos) Determines whether the specified object is equal to the current object. Declaration public bool Equals(NpgsqlTsVector.Lexeme.WordEntryPos o) Parameters Type Name Description NpgsqlTsVector.Lexeme.WordEntryPos o Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? o) Parameters Type Name Description Nullable < Object > o Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Gets a hash code for the current object. Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source ToString() Prints this lexeme in PostgreSQL's format, i.e. position is followed by weight (weight is only printed if A, B or C). Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(NpgsqlTsVector.Lexeme.WordEntryPos, NpgsqlTsVector.Lexeme.WordEntryPos) Determines whether the specified object is equal to the current object. Declaration public static bool operator ==(NpgsqlTsVector.Lexeme.WordEntryPos left, NpgsqlTsVector.Lexeme.WordEntryPos right) Parameters Type Name Description NpgsqlTsVector.Lexeme.WordEntryPos left NpgsqlTsVector.Lexeme.WordEntryPos right Returns Type Description Boolean | Improve this Doc View Source Inequality(NpgsqlTsVector.Lexeme.WordEntryPos, NpgsqlTsVector.Lexeme.WordEntryPos) Determines whether the specified object is unequal to the current object. Declaration public static bool operator !=(NpgsqlTsVector.Lexeme.WordEntryPos left, NpgsqlTsVector.Lexeme.WordEntryPos right) Parameters Type Name Description NpgsqlTsVector.Lexeme.WordEntryPos left NpgsqlTsVector.Lexeme.WordEntryPos right Returns Type Description Boolean Implements IEquatable<>"
  },
  "doc/api/NpgsqlTypes.PgNameAttribute.html": {
    "href": "doc/api/NpgsqlTypes.PgNameAttribute.html",
    "title": "Class PgNameAttribute | Npgsql Documentation",
    "keywords": "Class PgNameAttribute Indicates that this property or field corresponds to a PostgreSQL field with the specified name Inheritance Object PgNameAttribute Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public class PgNameAttribute : Attribute Constructors | Improve this Doc View Source PgNameAttribute(String) Indicates that this property or field corresponds to a PostgreSQL field with the specified name Declaration public PgNameAttribute(string pgName) Parameters Type Name Description String pgName The name of PostgreSQL field that corresponds to this CLR property or field Properties | Improve this Doc View Source PgName The name of PostgreSQL field that corresponds to this CLR property or field Declaration public string PgName { get; } Property Value Type Description String"
  },
  "doc/api/System.Data.Common.DbBatch.html": {
    "href": "doc/api/System.Data.Common.DbBatch.html",
    "title": "Class DbBatch | Npgsql Documentation",
    "keywords": "Class DbBatch Inheritance Object DbBatch NpgsqlBatch Implements IAsyncDisposable Namespace : System.Data.Common Assembly : Npgsql.dll Syntax public abstract class DbBatch : IDisposable Properties | Improve this Doc View Source BatchCommands Declaration public DbBatchCommandCollection BatchCommands { get; } Property Value Type Description DbBatchCommandCollection | Improve this Doc View Source Connection Declaration public DbConnection? Connection { get; set; } Property Value Type Description Nullable < DbConnection > | Improve this Doc View Source DbBatchCommands Declaration protected abstract DbBatchCommandCollection DbBatchCommands { get; } Property Value Type Description DbBatchCommandCollection | Improve this Doc View Source DbConnection Declaration protected abstract DbConnection? DbConnection { get; set; } Property Value Type Description Nullable < DbConnection > | Improve this Doc View Source DbTransaction Declaration protected abstract DbTransaction? DbTransaction { get; set; } Property Value Type Description Nullable < DbTransaction > | Improve this Doc View Source Timeout Declaration public abstract int Timeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Transaction Declaration public DbTransaction? Transaction { get; set; } Property Value Type Description Nullable < DbTransaction > Methods | Improve this Doc View Source Cancel() Declaration public abstract void Cancel() | Improve this Doc View Source CreateBatchCommand() Declaration public DbBatchCommand CreateBatchCommand() Returns Type Description DbBatchCommand | Improve this Doc View Source CreateDbBatchCommand() Declaration protected abstract DbBatchCommand CreateDbBatchCommand() Returns Type Description DbBatchCommand | Improve this Doc View Source Dispose() Declaration public virtual void Dispose() | Improve this Doc View Source DisposeAsync() Declaration public virtual ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source ExecuteDbDataReader(CommandBehavior) Declaration protected abstract DbDataReader ExecuteDbDataReader(CommandBehavior behavior) Parameters Type Name Description CommandBehavior behavior Returns Type Description DbDataReader | Improve this Doc View Source ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) Declaration protected abstract Task<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken) Parameters Type Name Description CommandBehavior behavior CancellationToken cancellationToken Returns Type Description Task < DbDataReader > | Improve this Doc View Source ExecuteNonQuery() Declaration public abstract int ExecuteNonQuery() Returns Type Description Int32 | Improve this Doc View Source ExecuteNonQueryAsync(CancellationToken) Declaration public abstract Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Int32 > | Improve this Doc View Source ExecuteReader(CommandBehavior) Declaration public DbDataReader ExecuteReader(CommandBehavior behavior = null) Parameters Type Name Description CommandBehavior behavior Returns Type Description DbDataReader | Improve this Doc View Source ExecuteReaderAsync(CancellationToken) Declaration public Task<DbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < DbDataReader > | Improve this Doc View Source ExecuteReaderAsync(CommandBehavior, CancellationToken) Declaration public Task<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken = null) Parameters Type Name Description CommandBehavior behavior CancellationToken cancellationToken Returns Type Description Task < DbDataReader > | Improve this Doc View Source ExecuteScalar() Declaration public abstract object? ExecuteScalar() Returns Type Description Nullable < Object > | Improve this Doc View Source ExecuteScalarAsync(CancellationToken) Declaration public abstract Task<object?> ExecuteScalarAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Nullable < Object >> | Improve this Doc View Source Prepare() Declaration public abstract void Prepare() | Improve this Doc View Source PrepareAsync(CancellationToken) Declaration public abstract Task PrepareAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task Implements IAsyncDisposable"
  },
  "doc/api/System.Data.Common.DbBatchCommand.html": {
    "href": "doc/api/System.Data.Common.DbBatchCommand.html",
    "title": "Class DbBatchCommand | Npgsql Documentation",
    "keywords": "Class DbBatchCommand Inheritance Object DbBatchCommand NpgsqlBatchCommand Namespace : System.Data.Common Assembly : Npgsql.dll Syntax public abstract class DbBatchCommand : object Properties | Improve this Doc View Source CommandText Declaration public abstract string CommandText { get; set; } Property Value Type Description String | Improve this Doc View Source CommandType Declaration public abstract CommandType CommandType { get; set; } Property Value Type Description CommandType | Improve this Doc View Source DbParameterCollection Declaration protected abstract DbParameterCollection DbParameterCollection { get; } Property Value Type Description DbParameterCollection | Improve this Doc View Source Parameters Declaration public DbParameterCollection Parameters { get; } Property Value Type Description DbParameterCollection | Improve this Doc View Source RecordsAffected Declaration public abstract int RecordsAffected { get; } Property Value Type Description Int32"
  },
  "doc/api/System.Data.Common.DbBatchCommandCollection.html": {
    "href": "doc/api/System.Data.Common.DbBatchCommandCollection.html",
    "title": "Class DbBatchCommandCollection | Npgsql Documentation",
    "keywords": "Class DbBatchCommandCollection Inheritance Object DbBatchCommandCollection NpgsqlBatchCommandCollection Namespace : System.Data.Common Assembly : Npgsql.dll Syntax public abstract class DbBatchCommandCollection : IList<DbBatchCommand> Properties | Improve this Doc View Source Count Declaration public abstract int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsReadOnly Declaration public abstract bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public DbBatchCommand this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description DbBatchCommand Methods | Improve this Doc View Source Add(DbBatchCommand) Declaration public abstract void Add(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item | Improve this Doc View Source Clear() Declaration public abstract void Clear() | Improve this Doc View Source Contains(DbBatchCommand) Declaration public abstract bool Contains(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item Returns Type Description Boolean | Improve this Doc View Source CopyTo(DbBatchCommand[], Int32) Declaration public abstract void CopyTo(DbBatchCommand[] array, int arrayIndex) Parameters Type Name Description DbBatchCommand [] array Int32 arrayIndex | Improve this Doc View Source GetBatchCommand(Int32) Declaration protected abstract DbBatchCommand GetBatchCommand(int index) Parameters Type Name Description Int32 index Returns Type Description DbBatchCommand | Improve this Doc View Source GetEnumerator() Declaration public abstract IEnumerator<DbBatchCommand> GetEnumerator() Returns Type Description IEnumerator < DbBatchCommand > | Improve this Doc View Source IndexOf(DbBatchCommand) Declaration public abstract int IndexOf(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, DbBatchCommand) Declaration public abstract void Insert(int index, DbBatchCommand item) Parameters Type Name Description Int32 index DbBatchCommand item | Improve this Doc View Source Remove(DbBatchCommand) Declaration public abstract bool Remove(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item Returns Type Description Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public abstract void RemoveAt(int index) Parameters Type Name Description Int32 index | Improve this Doc View Source SetBatchCommand(Int32, DbBatchCommand) Declaration protected abstract void SetBatchCommand(int index, DbBatchCommand batchCommand) Parameters Type Name Description Int32 index DbBatchCommand batchCommand"
  },
  "doc/api/System.Data.Common.DbDataSource.html": {
    "href": "doc/api/System.Data.Common.DbDataSource.html",
    "title": "Class DbDataSource | Npgsql Documentation",
    "keywords": "Class DbDataSource Inheritance Object DbDataSource NpgsqlDataSource Implements IAsyncDisposable Namespace : System.Data.Common Assembly : Npgsql.dll Syntax public abstract class DbDataSource : IDisposable Properties | Improve this Doc View Source ConnectionString Declaration public abstract string ConnectionString { get; } Property Value Type Description String Methods | Improve this Doc View Source CreateBatch() Declaration public DbBatch CreateBatch() Returns Type Description DbBatch | Improve this Doc View Source CreateCommand(Nullable<String>) Declaration public DbCommand CreateCommand(string? commandText = null) Parameters Type Name Description Nullable < String > commandText Returns Type Description DbCommand | Improve this Doc View Source CreateConnection() Declaration public DbConnection CreateConnection() Returns Type Description DbConnection | Improve this Doc View Source CreateDbBatch() Declaration protected virtual DbBatch CreateDbBatch() Returns Type Description DbBatch | Improve this Doc View Source CreateDbCommand(Nullable<String>) Declaration protected virtual DbCommand CreateDbCommand(string? commandText = null) Parameters Type Name Description Nullable < String > commandText Returns Type Description DbCommand | Improve this Doc View Source CreateDbConnection() Declaration protected abstract DbConnection CreateDbConnection() Returns Type Description DbConnection | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source DisposeAsync() Declaration public async ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source DisposeAsyncCore() Declaration protected virtual ValueTask DisposeAsyncCore() Returns Type Description ValueTask | Improve this Doc View Source OpenConnection() Declaration public DbConnection OpenConnection() Returns Type Description DbConnection | Improve this Doc View Source OpenConnectionAsync(CancellationToken) Declaration public ValueTask<DbConnection> OpenConnectionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask < DbConnection > | Improve this Doc View Source OpenDbConnection() Declaration protected virtual DbConnection OpenDbConnection() Returns Type Description DbConnection | Improve this Doc View Source OpenDbConnectionAsync(CancellationToken) Declaration protected virtual ValueTask<DbConnection> OpenDbConnectionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask < DbConnection > Implements IAsyncDisposable"
  },
  "doc/api/System.Data.Common.html": {
    "href": "doc/api/System.Data.Common.html",
    "title": "Namespace System.Data.Common | Npgsql Documentation",
    "keywords": "Namespace System.Data.Common Classes DbBatch DbBatchCommand DbBatchCommandCollection DbDataSource"
  },
  "doc/api/System.Runtime.Versioning.html": {
    "href": "doc/api/System.Runtime.Versioning.html",
    "title": "Namespace System.Runtime.Versioning | Npgsql Documentation",
    "keywords": "Namespace System.Runtime.Versioning Classes RequiresPreviewFeaturesAttribute"
  },
  "doc/api/System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.html": {
    "href": "doc/api/System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.html",
    "title": "Class RequiresPreviewFeaturesAttribute | Npgsql Documentation",
    "keywords": "Class RequiresPreviewFeaturesAttribute Inheritance Object RequiresPreviewFeaturesAttribute Namespace : System.Runtime.Versioning Assembly : Npgsql.dll Syntax public sealed class RequiresPreviewFeaturesAttribute : Attribute Constructors | Improve this Doc View Source RequiresPreviewFeaturesAttribute() Initializes a new instance of the RequiresPreviewFeaturesAttribute class. Declaration public RequiresPreviewFeaturesAttribute() | Improve this Doc View Source RequiresPreviewFeaturesAttribute(Nullable<String>) Initializes a new instance of the RequiresPreviewFeaturesAttribute class with the specified message. Declaration public RequiresPreviewFeaturesAttribute(string? message) Parameters Type Name Description Nullable < String > message An optional message associated with this attribute instance. Properties | Improve this Doc View Source Message Returns the optional message associated with this attribute instance. Declaration public string? Message { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source Url Returns the optional URL associated with this attribute instance. Declaration public string? Url { get; set; } Property Value Type Description Nullable < String >"
  },
  "doc/basic-usage.html": {
    "href": "doc/basic-usage.html",
    "title": "Npgsql Basic Usage | Npgsql Documentation",
    "keywords": "Npgsql Basic Usage Data source Note The data source concept was introduced in Npgsql 7.0. If you're using an older version, see Connections without a data source below. Starting with Npgsql 7.0, the starting point for any database operation is NpgsqlDataSource . The data source represents your PostgreSQL database, and can hand out connections to it, or support direct execution of SQL against it. The data source encapsulates the various Npgsql configuration needed to connect to PostgreSQL, as well the connection pooling which makes Npgsql efficient. The simplest way to create a data source is the following: var connectionString = \"Host=myserver;Username=mylogin;Password=mypass;Database=mydatabase\"; await using var dataSource = NpgsqlDataSource.Create(connectionString); In this code, a data source is created given a connection string , which is used to define which database to connect to, the authentication information to use, and various other connection-related parameters. The connection string consists of key/value pairs, separated with semicolons; many options are supported in Npgsql, these are documented on the connection string page . Npgsql's data source supports additional configuration beyond the connection string, such as logging, advanced authentication options, type mapping management, and more. To further configure a data source, use NpgsqlDataSourceBuilder as follows: var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"Host=localhost;Username=test;Password=test\"); dataSourceBuilder .UseLoggerFactory(loggerFactory) // Configure logging .UsePeriodicPasswordProvider() // Automatically rotate the password periodically .UseNodaTime(); // Use NodaTime for date/time types await using var dataSource = dataSourceBuilder.Build(); For more information on data source configuration, consult the relevant documentation pages. Basic SQL Execution Once you have a data source, an NpgsqlCommand can be used to execute SQL against it: await using var command = dataSource.CreateCommand(\"SELECT some_field FROM some_table\"); await using var reader = await command.ExecuteReaderAsync(); while (await reader.ReadAsync()) { Console.WriteLine(reader.GetString(0)); } More information on executing commands is provided below. Connections In the example above, we didn't deal with a database connection ; we just executed a command directly against a data source representing the database. Npgsql internally arranges for a connection on which to execute your command, but you don't need to concern yourself with that. However, in some situations it's necessary to interact with a connection, typically when some sort of state needs to persist across multiple command executions. The common example for this is a database transaction, where multiple commands need to be executed within the same transaction, on the same transaction. A data source also acts as a factory for connections, so you can do the following: await using var connection = await dataSource.OpenConnectionAsync(); At this point you have an open connection, and can execute commands against it much like we did against the data source above: await using var command = new NpgsqlCommand(\"SELECT '8'\", connection); await using var reader = await command.ExecuteReaderAsync(); // Consume the results Connections must be disposed when they are no longer needed - not doing so will result in a connection leak, which can crash your program. In the above code sample, this is done via the await using C# construct, which ensures the connection is disposed even if an exception is later thrown. It's a good idea to keep connections open for as little time a possible: database connections are scarce resources, and keeping them open for unnecessarily long times can create unnecessary load in your application and in PostgreSQL. Pooling Opening and closing physical connections to PostgreSQL is an expensive and long process. Therefore, Npgsql connections are pooled by default: closing or disposing a connection doesn't close the underlying physical connection, but rather returns it to an internal pool managed by Npgsql. The next time a connection is needed, that pooled connection is returned again. This makes open and close extremely fast operations; do not hesitate to perform them a lot if needed, rather than holding a connection needlessly open for a long time. For information on tweaking the pooling behavior (or turning it off), see the pooling section in the connection string page. Connections without a data source The data source concept is new in Npgsql 7.0, and is the recommended way to use Npgsql. When using older versions, connections where instantiated directly, rather than obtaining them from a data source: await using var conn = new NpgsqlConnection(connectionString); await conn.OpenAsync(); Direct instantiation of connection is still supported, but is discouraged for various reasons when using Npgsql 7.0. Other execution methods Above, we executed SQL via ExecuteReaderAsync . There are other ways to execute a command, based on what results you expect from it: ExecuteNonQueryAsync : executes SQL which doesn't return any results, typically INSERT , UPDATE or DELETE statements. Returns the number of rows affected. ExecuteScalarAsync : executes SQL which returns a single, scalar value. ExecuteReaderAsync : execute SQL which returns a full resultset. Returns an NpgsqlDataReader which can be used to access the resultset (as in the above example). For example, to execute a simple SQL INSERT which does not return anything, you can use ExecuteNonQueryAsync as follows: await using var command = dataSource.CreateCommand(\"INSERT INTO some_table (some_field) VALUES (8)\"); await command.ExecuteNonQueryAsync(); Note that each execute method involves a database roundtrip. To execute multiple SQL statements in a single roundtrip, see the batching section below. Parameters When sending data values to the database, always consider using parameters rather than including the values in the SQL as follows: await using var cmd = new NpgsqlCommand(\"INSERT INTO table (col1) VALUES ($1), ($2)\", conn) { Parameters = { new() { Value = \"some_value\" }, new() { Value = \"some_other_value\" } } }; await cmd.ExecuteNonQueryAsync(); The $1 and $2 in your SQL are parameter placeholders : they refer to the corresponding parameter in the command's parameter list, and are sent along with your query. This has the following advantages over embedding the value in your SQL: Parameters protect against SQL injection for user-provided inputs: the parameter data is sent to PostgreSQL separately from the SQL, and is never interpreted as SQL. Parameters are required to make use of prepared statements , which significantly improve performance if you execute the same SQL many times. Parameter data is sent in an efficient, binary format, rather than being represented as a string in your SQL. Note that PostgreSQL does not support parameters in arbitrary locations - you can only parameterize data values. For example, trying to parameterize a table or column name will fail - parameters aren't a simple way to stick an arbitrary string in your SQL. Positional and named placeholders Starting with Npgsql 6.0, the recommended placeholder style is positional ( $1 , $2 ); this is the native parameter style used by PostgreSQL, and your SQL can therefore be sent to the database as-is, without any manipulation. For legacy and compatibility reasons, Npgsql also supports named placeholders . This allows the above code to be written as follows: await using var cmd = new NpgsqlCommand(\"INSERT INTO table (col1) VALUES (@p1), (@p2)\", conn) { Parameters = { new(\"p1\", \"some_value\"), new(\"p2\", \"some_other_value\") } }; await cmd.ExecuteNonQueryAsync(); Rather than matching placeholders to parameters by their position, Npgsql matches these parameter by name. This can be useful when porting database code from other databases, where named placeholders are used. However, since this placeholder style isn't natively supported by PostgreSQL, Npgsql must parse your SQL and rewrite it to use positional placeholders under the hood; this rewriting has a performance price, and some forms of SQL may not be parsed correctly. It's recommended to use positional placeholders whenever possible. For more information, see this blog post . Parameter types PostgreSQL has a strongly-typed type system: columns and parameters have a type, and types are usually not implicitly converted to other types. This means you have to think about which type you will be sending: trying to insert a string into an integer column (or vice versa) will fail. In the example above, we let Npgsql infer the PostgreSQL data type from the .NET type: when Npgsql sees a .NET string , it automatically sends a parameter of PostgreSQL type text (note that this isn't the same as, say varchar ). In many cases this will work just fine, and you don't need to worry. In some cases, however, you will need to explicitly set, or coerce , the parameter type. For example, although Npgsql sends .NET string as text by default, it also supports sending jsonb . For more information on supported types and their mappings, see this page . NpgsqlParameter exposes several properties that allow you to coerce the parameter's data type: DbType : a portable enum that can be used to specify database types. While this approach will allow you to write portable code across databases, it won't let you specify types that are specific to PostgreSQL. This is useful mainly if you're avoiding Npgsql-specific types, using DbConnection and DbCommand rather than NpgsqlConnection and NpgsqlCommand . NpgsqlDbType : an Npgsql-specific enum that contains (almost) all PostgreSQL types supported by Npgsql. DataTypeName : an Npgsql-specific string property which allows to directly set a PostgreSQL type name on the parameter. This is rarely needed - NpgsqlDbType should be suitable for the majority of cases. However, it may be useful if you're using unmapped user-defined types ( enums or composites ) or some PostgreSQL type which isn't included in NpgsqlDbType (because it's supported via an external plugin). Strongly-typed parameters The standard ADO.NET parameter API is unfortunately weakly-typed: parameter values are set on NpgsqlParameter.Value , which, being an object , will box value types such as int . If you're sending lots of value types to the database, this will create large amounts of useless heap allocations and strain the garbage collector. As an alternative, you can use NpgsqlParameter<T> . This generic class has a TypedValue member, which is similar to NpgsqlParameter.Value but is strongly-typed, thus avoiding the boxing and heap allocation. Note that this strongly-typed parameter API is entirely Npgsql-specific, and will make your code non-portable to other database. See #8955 for an issue discussing this at the ADO.NET level. Transactions Basic transactions Transactions can be started by calling the standard ADO.NET method NpgsqlConnection.BeginTransaction() : await using var connection = await dataSource.OpenConnectionAsync(); await using var transaction = await connection.BeginTransactionAsync(); await using var command1 = new NpgsqlCommand(\"...\", connection, transaction); await command1.ExecuteNonQueryAsync(); await using var command2 = new NpgsqlCommand(\"...\", connection, transaction); await command2.ExecuteNonQueryAsync(); await transaction.CommitAsync(); PostgreSQL doesn't support nested or concurrent transactions - only one transaction may be in progress at any given moment (starting a transaction while another transaction is already in progress throws an exception). Because of this, it isn't necessary to pass the NpgsqlTransaction object returned from BeginTransaction() to commands you execute - starting a transaction means that all subsequent commands will automatically participate in the transaction, until either a commit or rollback is performed. However, for maximum portability it's recommended to set the transaction on your commands. Although concurrent transactions aren't supported, PostgreSQL supports the concept of savepoints - you may set named savepoints in a transaction and roll back to them later without rolling back the entire transaction. Savepoints can be created, rolled back to, and released via NpgsqlTransaction.SaveAsync() , RollbackAsync() and Release(name) respectively. See the PostgreSQL documentation for more details. . When starting a transaction, you may optionally set the isolation level . See the docs for more details. System.Transactions and distributed transactions In addition to BeginTransactionAsync() , .NET includes System.Transactions, an alternative API for managing transactions - read the MSDN docs to understand the concepts involved . Npgsql fully supports this API, and automatically enlists if a connection is opened within an ambient TransactionScopes. When a transaction includes more than one database (or even more than one concurrent connections to the same database), the transaction is said to be distributed . .NET 7.0 brings the same distributed transaction support that .NET Framework supported, for Windows only. While Npgsql partially supports this mechanism, it does not implement the recovery parts of the distributed transaction, because of some design issues with .NET's support. While distributed transactions may work for you, it is discouraged to fully rely on them with Npgsql. Note that if you open and close connections to the same database inside an ambient transaction, without ever having two connections open at the same time , Npgsql internally reuses the same connection, avoiding the need for a distributed transaction. Batching Let's say you need to execute two SQL statements for some reason. This can naively be done as follows: await using var cmd = new NpgsqlCommand(\"INSERT INTO table (col1) VALUES ('foo')\", conn); await cmd.ExecuteNonQueryAsync(); cmd.CommandText = \"SELECT * FROM table\"; await using var reader = await cmd.ExecuteReaderAsync(); The above code needlessly performs two roundtrips to the database: your program will not send the SELECT until after the INSERT has completed and confirmation for that has been received. Network latency can make this very inefficient: as the distance between your .NET client and PostgreSQL increases, the time spent waiting for packets to cross the network can severely impact your application's performance. Instead, you can ask Npgsql to send the two SQL statements in a single roundtrip, by using batching: await using var batch = new NpgsqlBatch(conn) { BatchCommands = { new(\"INSERT INTO table (col1) VALUES ('foo')\"), new(\"SELECT * FROM table\") } }; await using var reader = await cmd.ExecuteReaderAsync(); An NpgsqlBatch simply contains a list of NpgsqlBatchCommands , each of which has a CommandText and a list of parameters (much like an NpgsqlCommand ). All statements and parameters are efficiently packed into a single packet - when possible - and sent to PostgreSQL. Note If you haven't started an explicit transaction with BeginTransaction() , a batch is automatically wrapped in an implicit transaction. That is, if a statement within the batch fails, all later statements are skipped and the entire batch is rolled back. Legacy batching Prior to Npgsql 6.0, NpgsqlBatch did not yet exist, and batching could be done as follows: await using var cmd = new NpgsqlCommand(\"INSERT INTO table (col1) VALUES ('foo'); SELECT * FROM table\", conn); await using var reader = await cmd.ExecuteReaderAsync(); This packs multiple SQL statements into the CommandText of a single NpgsqlCommand , delimiting them with semi-colons. This technique is still supported, and can be useful when porting database code from other database. However, legacy batching is generally discouraged since it isn't natively supported by PostgreSQL, forcing Npgsql to parse the SQL to find semicolons. This is similar to named parameter placeholders , see this section for more details . Stored functions and procedures PostgreSQL supports stored (or server-side) functions , and since PostgreSQL 11 also stored procedures . These can be written in SQL (similar to views), or in PL/pgSQL (PostgreSQL's procedural language), PL/Python or several other server-side languages. Once a function or procedure has been defined, calling it is a simple matter of executing a regular command: // For functions using var cmd = new NpgsqlCommand(\"SELECT my_func(1, 2)\", conn); using var reader = cmd.ExecuteReader(); // For procedures using var cmd = new NpgsqlCommand(\"CALL my_proc(1, 2)\", conn); using var reader = cmd.ExecuteReader(); You can replace the parameter values above with regular placeholders (e.g. $1 ), just like with a regular query. CommandType.StoredProcedure Warning Starting with Npgsql 7.0, CommandType.StoredProcedure now invokes stored procedures, and not function as before. See the release notes for more information and how to opt out of this change. In some other databases, calling a stored procedures involves setting the command's CommandType : using var command1 = new NpgsqlCommand(\"my_procedure\", connection) { CommandType = CommandType.StoredProcedure, Parameters = { new() { Value = 8 } } }; await using var reader = await command1.ExecuteReaderAsync(); Npgsql supports this mainly for portability, but this style of calling has no advantage over the regular command shown above. When CommandType.StoredProcedure is set, Npgsql will simply generate the appropriate CALL my_procedure($1) for you, nothing more. Unless you have specific portability requirements, it is recommended you simply avoid CommandType.StoredProcedure and construct the SQL yourself. Be aware that CommandType.StoredProcedure generates a CALL command, which is suitable for invoking stored procedures and not functions. Versions of Npgsql prior to 7.0 generated a SELECT command suitable for functions, and this legacy behavior can be enabled; see the 7.0 release notes Note that if CommandType.StoredProcedure is set and your parameter instances have names, Npgsql generates parameters with named notation : SELECT my_func(p1 => 'some_value') . This means that your NpgsqlParameter names must match your PostgreSQL procedure or function parameters, or the call will fail. If you omit the names on your NpgsqlParameters, positional notation will be used instead. Note that positional parameters must always come before named ones. See the PostgreSQL docs for more info . Function in/out parameters In SQL Server (and possibly other databases), functions can have output parameters, input/output parameters, and a return value, which can be either a scalar or a table (TVF). To call functions with special parameter types, the Direction property must be set on the appropriate DbParameter . PostgreSQL functions, on the hand, always return a single table - they can all be considered TVFs. Somewhat confusingly, PostgreSQL does allow your functions to be defined with input/and output parameters: CREATE FUNCTION dup(in int, out f1 int, out f2 text) AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE SQL; However, the above syntax is nothing more than a definition of the function's resultset, and is identical to the following ( see the PostgreSQL docs ): CREATE FUNCTION dup(int) RETURNS TABLE(f1 int, f2 text) AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE SQL; In other words, PostgreSQL functions don't have output parameters that are distinct from the resultset they return - output parameters are just a syntax for describing that resultset. Because of this, on the Npgsql side there's no need to think about output (or input/output) parameters: simply invoke the function and process its resultset just like you would any regular resultset. However, to help portability, Npgsql does provide support for output parameters as follows: using (var cmd = new NpgsqlCommand(\"SELECT my_func()\", conn)) { cmd.Parameters.Add(new NpgsqlParameter(\"p_out\", DbType.String) { Direction = ParameterDirection.Output }); cmd.ExecuteNonQuery(); Console.WriteLine(cmd.Parameters[0].Value); } When Npgsql sees a parameter with ParameterDirection.Output (or InputOutput ), it will simply search the function's resultset for a column whose name matches the parameter, and copy the first row's value into the output parameter. This provides no value whatsoever over processing the resultset yourself, and is discouraged - you should only use output parameters in Npgsql if you need to maintain portability with other databases which require it."
  },
  "doc/compatibility.html": {
    "href": "doc/compatibility.html",
    "title": "Compatibility Notes | Npgsql Documentation",
    "keywords": "Compatibility Notes This page centralizes Npgsql's compatibility status with PostgreSQL and other components, and documents some important gotchas. PostgreSQL We aim to be compatible with all currently supported PostgreSQL versions , which means 5 years back. Earlier versions may still work but we don't perform continuous testing on them or commit to resolving issues on them. ADO.NET Npgsql is an ADO.NET-compatible provider, so it has the same APIs as other .NET database drivers and should behave the same. Please let us know if you notice any non-standard behavior. .NET Framework/.NET Core/mono Npgsql 4.* targets .NET Framework 4.6.1, as well as .NET Standard 2.0 which allows it to run on .NET Core. It is also tested and runs well on mono. Npgsql 5.* targets .NET Standard 2.0 and .NET 5. Starting with this version, we no longer run regression tests on .NET Framework and mono. In addition, the Visual Studio extension (VSIX) and the MSI GAC installer have been discontinued. Amazon Redshift Amazon Redshift is a cloud-based data warehouse originally based on PostgreSQL 8.0.2. In addition, due to its nature some features have been removed and others changed in ways that make them incompatible with PostgreSQL. We try to support Redshift as much as we can, please let us know about issues you run across. First, check out Amazon's page about Redshift and PostgreSQL which contains lots of useful compatibility information. Additional known issues: If you want to connect over SSL, your connection string must contain Server Compatibility Mode=Redshift , otherwise you'll get a connection error about ssl_renegotiation_limit . Entity Framework with database-computed identity values don't work with Redshift, since it doesn't support sequences (see issue #544 ). DigitalOcean Managed Database DigitalOcean's Managed Database services requires you to connect to PostgreSQL over SSL. Unfortunately when you enable it in your connection string, you will get the same error regarding ssl_renegotiation_limit as Amazon Redshift. The Redshift compatibility mode setting resolves the issue on DigitalOcean. pgbouncer Npgsql works well with PgBouncer, but there are some quirks to be aware of. In many cases, you'll want to turn off Npgsql's internal connection pool by specifying Pooling=false on the connection string. If you decide to keep Npgsql pooling on along with PgBouncer, and are using PgBouncer's transaction or statement mode, then you need to specify No Reset On Close=true on the connection string. This disables Npgsql's connection reset logic ( DISCARD ALL ), which gets executed when a connection is returned to Npgsql's pool, and which makes no sense in these modes. Prior to version 3.1, Npgsql sends the statement_timeout startup parameter when it connects, but this parameter isn't supported by pgbouncer. You can get around this by specifying CommandTimeout=0 on the connection string, and then manually setting the CommandTimeout property on your NpgsqlCommand objects. Version 3.1 no longer sends statement_timeout . PgBouncer below 1.12 doesn't support SASL authentication."
  },
  "doc/connection-string-parameters.html": {
    "href": "doc/connection-string-parameters.html",
    "title": "Connection String Parameters | Npgsql Documentation",
    "keywords": "Connection String Parameters To connect to a database, the application provides a connection string which specifies parameters such as the host, the username, the password, etc. Connection strings have the form keyword1=value; keyword2=value; and are case-insensitive. Values containing special characters (e.g. semicolons) can be double-quoted. For more information, see the official doc page on connection strings . Below are the connection string parameters which Npgsql understands, as well as some standard PostgreSQL environment variables. Basic connection Parameter Description Default Host Specifies the host name - and optionally port - on which PostgreSQL is running. Multiple hosts may be specified, see the docs for more info . If the value begins with a slash, it is used as the directory for the Unix-domain socket (specifying a Port is still required). Required Port The TCP port of the PostgreSQL server. 5432 Database The PostgreSQL database to connect to. Same as Username Username The username to connect with. Not required if using IntegratedSecurity. PGUSER Password The password to connect with. Not required if using IntegratedSecurity. PGPASSWORD Passfile Path to a PostgreSQL password file (PGPASSFILE), from which the password is taken. PGPASSFILE Security and encryption Parameter Description Default SSL Mode Controls whether SSL is used, depending on server support. See docs for possible values and more info . Prefer in 6.0, Disable previously Trust Server Certificate Whether to trust the server certificate without validating it. See docs for more info . false SSL Certificate Location of a client certificate to be sent to the server. Introduced in 6.0. See docs PGSSLCERT SSL Key Location of a client key for a client certificate to be sent to the server. Introduced in 6.0. PGSSLKEY SSL Password Password for a key for a client certificate. Introduced in 6.0. Root Certificate Location of a CA certificate used to validate the server certificate. PGSSLROOTCERT Check Certificate Revocation Whether to check the certificate revocation list during authentication. false Integrated Security Whether to use integrated security to log in (GSS/SSPI). See docs for more info . false Persist Security Info Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Introduced in 3.1. false Kerberos Service Name The Kerberos service name to be used for authentication. See docs for more info . postgres Include Realm The Kerberos realm to be used for authentication. See docs for more info . Include Error Detail When enabled, PostgreSQL error and notice details are included on PostgresException.Detail and PostgresNotice.Detail . These can contain sensitive data. false Log Parameters When enabled, parameter values are logged when commands are executed. false Pooling Parameter Description Default Pooling Whether connection pooling should be used. true Minimum Pool Size The minimum connection pool size. 0 Maximum Pool Size The maximum connection pool size. 100 since 3.1, 20 previously Connection Idle Lifetime The time (in seconds) to wait before closing idle connections in the pool if the count of all connections exceeds Minimum Pool Size . Introduced in 3.1. 300 Connection Pruning Interval How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime (see Connection Idle Lifetime ). Introduced in 3.1. 10 ConnectionLifetime The total maximum lifetime of connections (in seconds). Connections which have exceeded this value will be destroyed instead of returned from the pool. This is useful in clustered configurations to force load balancing between a running server and a server just brought online. 0 (disabled) Timeouts and keepalive Parameter Description Default Timeout The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. 15 Command Timeout The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Set to zero for infinity. 30 Internal Command Timeout The time to wait (in seconds) while trying to execute an internal command before terminating the attempt and generating an error. -1 uses CommandTimeout, 0 means no timeout. -1 Cancellation Timeout The time to wait (in milliseconds) while trying to read a response for a cancellation request for a timed out or cancelled query, before terminating the attempt and generating an error. -1 skips the wait, 0 means infinite wait. Introduced in 5.0. 2000 Keepalive The number of seconds of connection inactivity before Npgsql sends a keepalive query. 0 (disabled) Tcp Keepalive Whether to use TCP keepalive with system defaults if overrides isn't specified. false Tcp Keepalive Time The number of milliseconds of connection inactivity before a TCP keepalive query is sent. Use of this option is discouraged, use KeepAlive instead if possible. Supported only on Windows. 0 (disabled) Tcp Keepalive Interval The interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received. Tcp KeepAlive Time must be non-zero as well. Supported only on Windows. value of Tcp Keepalive Time Performance Parameter Description Default Max Auto Prepare The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero disables automatic preparation. 0 Auto Prepare Min Usages The minimum number of usages an SQL statement is used before it's automatically prepared. 5 Read Buffer Size Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database. 8192 Write Buffer Size Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database. 8192 Socket Receive Buffer Size Determines the size of socket receive buffer. System-dependent Socket Send Buffer Size Determines the size of socket send buffer. System-dependent No Reset On Close Improves performance in some cases by not resetting the connection state when it is returned to the pool, at the cost of leaking state. Use only if benchmarking shows a performance improvement false Failover and load balancing For more information, see the dedicated docs page . Parameter Description Default Target Session Attributes Determines the preferred PostgreSQL target server type. PGTARGETSESSIONATTRS, Any Load Balance Hosts Enables balancing between multiple hosts by round-robin. false Host Recheck Seconds Controls for how long the host's cached state will be considered as valid. 10 Misc Parameter Description Default Options 1 Specifies any valid PostgreSQL connection options (e.g. Options=-c synchronous_commit=local ). Introduced in 5.0. PGOPTIONS Application Name The optional application name parameter to be sent to the backend during connection initiation. Enlist Whether to enlist in an ambient TransactionScope. true Search Path Sets the schema search path. Client Encoding Gets or sets the client_encoding parameter. PGCLIENTENCODING Encoding Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data. UTF8 Timezone Gets or sets the session timezone. PGTZ EF Template Database The database template to specify when creating a database in Entity Framework. template1 EF Admin Database The database admin to specify when creating and dropping a database in Entity Framework. template1 Load Table Composites Load table composite type definitions, and not just free-standing composite types. false Array Nullability Mode Configure the way arrays of value types are returned when requested as object instances. Possible values are: Never (arrays of value types are always returned as non-nullable arrays), Always (arrays of value types are always returned as nullable arrays) and PerInstance (the type of array that gets returned is determined at runtime). Never 1 The Options connection string parameter is essentially the string of command line options that get passed to the postgres program when the process is started. It is most commonly used to set named run-time parameters via the -c option but other options can be used too (although not all of them make sense in that context). Setting multiple options is possible by separating them with a space character. Space and backslash characters in option values need to be escaped by prefixing a backslash character. Example: Options=-c default_transaction_isolation=serializable -c default_transaction_deferrable=on -c foo.bar=My\\\\ Famous\\\\\\\\Thing Compatibility Parameter Description Default Server Compatibility Mode A compatibility mode for special PostgreSQL server types. Currently \"Redshift\" is supported, as well as \"NoTypeLoading\", which will bypass the normal type loading mechanism from the PostgreSQL catalog tables and supports a hardcoded list of basic types. none Obsolete Parameter Description Default Client Certificate Location of a client certificate to be sent to the server. Deprecated in 6.0. PGSSLCERT Client Certificate Key Location of a client key for a client certificate to be sent to the server. Deprecated in 6.0. PGSSLKEY Use Perf Counters Makes Npgsql write performance information about connection use to Windows Performance Counters. Removed in 5.0. false Environment variables In addition to the connection string parameters above, Npgsql also recognizes the standard PostgreSQL environment variables below. This helps Npgsql-based applications behave similar to other, non-.NET PostgreSQL client applications. The PostgreSQL doc page on environment variables recognized by libpq can be found here . Environment variable Description PGUSER Behaves the same as the user connection parameter. PGPASSWORD Behaves the same as the password connection parameter. Use of this environment variable is not recommended for security reasons, as some operating systems allow non-root users to see process environment variables via ps; instead consider using a password file (see Section 33.15 ). PGPASSFILE Behaves the same as the passfile connection parameter. PGSSLCERT Behaves the same as the sslcert connection parameter. PGSSLKEY Behaves the same as the sslkey connection parameter. PGSSLROOTCERT Behaves the same as the sslrootcert connection parameter. PGCLIENTENCODING Behaves the same as the client_encoding connection parameter. PGTZ Sets the default time zone. (Equivalent to SET timezone TO ....) PGOPTIONS Behaves the same as the options connection parameter."
  },
  "doc/contributing.html": {
    "href": "doc/contributing.html",
    "title": "Contributing to Npgsql | Npgsql Documentation",
    "keywords": "Contributing to Npgsql As a general rule, Npgsql makes no attempt to validate what it sends to PostgreSQL. For all cases where PostgreSQL would simply return a reasonable error, we prefer that to happen rather than checking replicating validation checks client-side."
  },
  "doc/copy.html": {
    "href": "doc/copy.html",
    "title": "COPY | Npgsql Documentation",
    "keywords": "COPY PostgreSQL has a feature allowing efficient bulk import or export of data to and from a table. This is usually a much faster way of getting data in and out of a table than using INSERT and SELECT. See documentation for the COPY command for more details. Npgsql supports three COPY operation modes: binary, text and raw binary. Binary COPY This mode uses the efficient PostgreSQL binary format to transfer data in and out of the database. The user uses an API to read and write rows and fields, which Npgsql decodes and encodes. When you've finished, you must call Complete() to save the data; not doing so will cause the COPY operation to be rolled back when the writer is disposed (this behavior is important in case an exception is thrown). Warning It is the your responsibility to read and write the correct type! If you use COPY to write an int32 into a string field you may get an exception, or worse, silent data corruption. It is also highly recommended to use the overload of Write() which accepts an NpgsqlDbType , allowing you to unambiguously specify exactly what type you want to write. Test your code thoroughly. // Import two columns to table data using (var writer = conn.BeginBinaryImport(\"COPY data (field_text, field_int2) FROM STDIN (FORMAT BINARY)\")) { writer.StartRow(); writer.Write(\"Hello\"); writer.Write(8, NpgsqlDbType.Smallint); writer.StartRow(); writer.Write(\"Goodbye\"); writer.WriteNull(); writer.Complete(); } // Export two columns to table data using (var reader = Conn.BeginBinaryExport(\"COPY data (field_text, field_int2) TO STDOUT (FORMAT BINARY)\")) { reader.StartRow(); Console.WriteLine(reader.Read<string>()); Console.WriteLine(reader.Read<int>(NpgsqlDbType.Smallint)); reader.StartRow(); reader.Skip(); Console.WriteLine(reader.IsNull); // Null check doesn't consume the column Console.WriteLine(reader.Read<int>()); reader.StartRow(); // Last StartRow() returns -1 to indicate end of data } Text COPY This mode uses the PostgreSQL text or csv format to transfer data in and out of the database. It is the user's responsibility to format the text or CSV appropriately, Npgsql simply provides a TextReader or Writer. This mode is less efficient than binary copy, and is suitable mainly if you already have the data in a CSV or compatible text format and don't care about performance. using (var writer = conn.BeginTextImport(\"COPY data (field_text, field_int4) FROM STDIN\")) { writer.Write(\"HELLO\\t1\\n\"); writer.Write(\"GOODBYE\\t2\\n\"); } using (var reader = conn.BeginTextExport(\"COPY data (field_text, field_int4) TO STDOUT\")) { Console.WriteLine(reader.ReadLine()); Console.WriteLine(reader.ReadLine()); } Raw Binary COPY In this mode, data transfer is binary, but Npgsql does no encoding or decoding whatsoever - data is exposed as a raw .NET Stream. This mode makes sense only for bulk data and restore a table: the table is saved as a blob, which can later be restored. If you need to actually make sense of the data, you should be using regular binary mode instead (not raw). Example: int len; var data = new byte[10000]; // Export table1 to data array using (var inStream = conn.BeginRawBinaryCopy(\"COPY table1 TO STDOUT (FORMAT BINARY)\")) { // We assume the data will fit in 10000 bytes, in real usage you would read repeatedly, writine to a file. len = inStream.Read(data, 0, data.Length); } // Import data array into table2 using (var outStream = conn.BeginRawBinaryCopy(\"COPY table2 FROM STDIN (FORMAT BINARY)\")) { outStream.Write(data, 0, len); } Cancel Import operations can be cancelled at any time by disposing NpgsqlBinaryImporter without calling Complete() on it. Export operations can be cancelled as well, by calling Cancel() . Other See the CopyTests.cs test fixture for more usage samples."
  },
  "doc/dev/tests.html": {
    "href": "doc/dev/tests.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Overview Npgsql has an extensive test suite to guard against regressions. The test suite is run on the official build server for the .NET Framework and .NET Core with all supported PostgreSQL backends. Continuous integration results are publicly available via Github Actions . Getting Started Setup PostgreSQL The Npgsql test suite requires a PostgreSQL backend for tests to run. By default, the test suite expects PostgreSQL to be running on the local machine with the default port (5432). Install PostgreSQL: https://www.postgresql.org/download Start the PostgreSQL backend. Create the npgsql_tests account By default, the test suite expects an account named npgsql_tests with a password of npgsql_tests . This account is used by the test suite to create a database named npgsql_tests and run the tests. $ psql -h localhost -U postgres postgres=# CREATE USER npgsql_tests PASSWORD 'npgsql_tests' SUPERUSER; postgres=# CREATE DATABASE npgsql_tests OWNER npgsql_tests; Note: superuser access is required to create and drop test databases, load extensions (e.g. hstore , postgis ), etc. Clone the repository cd ~ git clone git@github.com:npgsql/npgsql.git (use ssh) git clone https://github.com/npgsql/npgsql.git (use https) Run the test suite cd ~/npgsql dotnet test ./test/Npgsql.Tests dotnet test ./test/Npgsql.PluginTests dotnet test ./test/Npgsql.Benchmarks"
  },
  "doc/dev/type-representations.html": {
    "href": "doc/dev/type-representations.html",
    "title": "PostgreSQL Types | Npgsql Documentation",
    "keywords": "Overview The following are notes by Emil Lenngren on PostgreSQL wire representation of types: bool: text: t or f binary: a byte: 1 or 0 bytea: text: either \\x followed by hex-characters (lowercase by default), or plain characters, where non-printable characters (between 0x20 and 0x7e, inclusive) are written as \\nnn (octal) and \\ is written as \\\\ binary: the bytes as they are char: This type holds a single char/byte. (Not to be confused with bpchar (blank-padded char) which is PostgreSQL's alias to the SQL standard's char). The char may be the null-character text: the char as a byte, encoding seems to be ignored binary: the char as a byte name: A null-padded string of NAMEDATALEN (currently 64) bytes (the last byte must be a null-character). Used in pg catalog. text: the name as a string binary: the name as a string int2/int4/int8: text: text representation in base 10 binary: binary version of the integer int2vector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as int2[] oidvector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as oid[] regproc: internally just an OID (UInt32) text: -, name of procedure, or numeric if not found binary: only the OID in binary regprocedure/regoper/regoperator/regclass/regconfig/regdictionary: similar to regproc text: text: the string as it is binary: the string as it is oid: A 32-bit unsigned integer used for internal object identification. text: the text-representation of this integer in base 10 binary: the UInt32 tid: tuple id Internally a tuple of a BlockNumber (UInt32) and an OffsetNumber (UInt16) text: (blockNumber,offsetNumber) binary: the block number in binary followed by offset number in binary xid: transaction id Internally just a TransactionId (UInt32) text: the number binary: the number in binary cid: command id Internally just a CommandId (UInt32) text: the number binary: the number in binary json: json text: the json an text binary: the json as text jsonb: json internally stored in an efficient binary format text: the json as text binary: An Int32 (version number, currently 1), followed by data (currently just json as text) xml: Xml. It is probably most efficient to use the text format, especially when receiving from client. text: the xml as text (when sent from the server: encoding removed, when receiving: assuming database encoding) binary: the xml as text (when sent from the server: in the client's specified encoding, when receiving: figures out itself) pg_node_tree: used as type for the column typdefaultbin in pg_type does not accept input text: text binary: text smgr: storage manager can only have the value \"magnetic disk\" text: magnetic disk binary: not available point: A tuple of two float8 text: (x,y) The floats are interpreted with the C strtod function. The floats are written with the snprintf function, with %.*g format. NaN/-Inf/+Inf can be written, but not interpretability depends on platform. The extra_float_digits setting is honored. For linux, NaN, [+-]Infinity, [+-]Inf works, but not on Windows. Windows also have other output syntax for these special numbers. (1.#QNAN for example) binary: the two floats lseg: A tuple of two points text: [(x1,y1),(x2,y2)] see point for details binary: the four floats in the order x1, y1, x2, y2 path: A boolean whether the path is opened or closed + a vector of points. text: [(x1,y1),...] for open path and ((x1,y1),...) for closed paths. See point for details. binary: first a byte indicating open (0) or close (1), then the number of points (Int32), then a vector of points box: A tuple of two points. The coordinates will be reordered so that the first is the upper right and the second is the lower left. text: (x1,y1),(x2,y2) see point for details binary: the four floats in the order x1, y1, x2, y2 (doesn't really matter since they will be reordered) polygon: Same as path but with two differences: is always closed and internally stores the bounding box. text: same as closed path binary: the number of points (Int32), then a vector of points line (version 9.4): Ax + By + C = 0. Stored with three float8. Constraint: A and B must not both be zero (only checked on text input, not binary). text: {A,B,C} see point for details about the string representation of floats. Can also use the same input format as a path with two different points, representing the line between those. binary: the three floats circle: <(x,y),r> (center point and radius), stored with three float8. text: <(x,y),r> see point for details about the string representation of floats. binary: the three floats x, y, r in that order float4/float8: text: (leading/trailing whitespace is skipped) interpreted with the C strtod function, but since it has problems with NaN, [+-]Infinity, [+-]Inf, those strings are identified (case-insensitively) separately. when outputting: NaN, [+-]Infinity is treated separately, otherwise the string is printed with snprintf %.*g and the extra_float_digits setting is honored. binary: the float abstime: A unix timestamp stored as a 32-bit signed integer with seconds-precision (seconds since 1970-01-01 00:00:00), in UTC Has three special values: Invalid (2^31-1), infinity (2^31-3), -infinity (-2^31) text: same format as timestamptz, or \"invalid\", \"infinity\", \"-infinity\" binary: Int32 reltime: A time interval with seconds-precision (stored as an 32-bit signed integer) text: same as interval binary: Int32 tinterval: Consists of a status (Int32) and two abstimes. Status is valid (1) iff both abstimes are valid, else 0. Note that the docs incorrectly states that ' is used as quote instead of \" text: [\"<abstime>\" \"<abstime>\"] binary: Int32 (status), Int32 (abstime 1), Int32 (abstime 2) unknown: text: text binary: text money: A 64-bit signed integer. For example, $123.45 is stored as the integer 12345. Number of fraction digits is locale-dependent. text: a locale-depedent string binary: the raw 64-bit integer macaddr: 6 bytes text: the 6 bytes in hex (always two characters per byte) separated by : binary: the 6 bytes appearing in the same order as when written in text inet/cidr: Struct of Family (byte: ipv4=2, ipv6=3), Netmask (byte with number of bits in the netmask), Ipaddr bytes (16) Text: The IP-address in text format and /netmask. /netmask is omitted in inet if the netmask is the whole address. Binary: family byte, netmask byte, byte (cidr=1, inet=0), number of bytes in address, bytes of the address aclitem: Access list item used in pg_class Text: Something like postgres=arwdDxt/postgres Binary: not available bpchar: Blank-padded char. The type modifier is used to blank-pad the input. text: text binary: text varchar: Variable-length char. The type modifier is used to check the input's length. text: text binary: text date: A signed 32-bit integer of a date. 0 = 2000-01-01. Infinity: INT_MAX, -Infinity: INT_MIN Text: Date only using the specified date style Binary: Int32 time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer timetz: A struct of Time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. Zone: A signed 32-bit integer representing the zone (in seconds). Note that the sign is inverted. So GMT+1h is stored as -1h. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer followed by the 32-bit integer timestamp: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 Infinity is LONG_MAX and -Infinity is LONG_MIN (Infinity would be 294277-01-09 04:00:54.775807) Earliest possible timestamp is 4714-11-24 00:00:00 BC. Even earlier would be possible, but due to internal calculations those are forbidden. text: dependent on date style binary: the 64-bit integer timestamptz: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 UTC. (Time zone is not stored). Infinity is LONG_MAX and -Infinity is LONG_MIN text: first converted to the time zone in the db settings, then printed according to the date style binary: the 64-bit integer interval: A struct of Time (Int64): all time units other than days, months and years (microseconds) Day (Int32): days, after time for alignment Month (Int32): months and years, after time for alignment text: Style dependent, but for example: \"-11 mons +15435 days -11111111:53:00\" binary: all fields in the struct bit/varbit: First a signed 32-bit integer containing the number of bits (negative length not allowed). Then all the bits in big end first. So a varbit of length 1 has the first (and only) byte set to either 0x80 or 0x00. Last byte is assumed (and is automatically zero-padded in recv) to be zero-padded. text: when sending from backend: all the bits, written with 1s and 0s. when receiving from client: (optionally b or B followed by) all the bits as 1s and 0s, or a x or X followed by hexadecimal digits (upper- or lowercase), big endian first. binary: the 32-bit length followed by the bytes containing the bits numeric: A variable-length numeric value, can be negative. text: NaN or first - if it is negative, then the digits with . as decimal separator binary: first a header of 4 16-bit integers: number of digits in the digits array that follows (unsigned integer), weight of the first digit (10000^weight), can be both negative, positive or 0, sign: negative=0x4000, positive=0x0000, NaN=0xC000 dscale: number of digits (in base 10) to print after the decimal separator then the array of digits: The digits are stored in base 10000, where each digit is a 16-bit integer. Trailing zeros are not stored in this array, to save space. The digits are stored such that, if written as base 10000, the decimal separator can be inserted between two digits in base 10000, i.e. when this is to be printed in base 10, only the first digit in base 10000 can (possibly) be printed with less than 4 characters. Note that this does not apply for the digits after the decimal separator; the digits should be printed out in chunks of 4 characters and then truncated with the given dscale. refcursor: uses the same routines as text record: Describes a tuple. Is also the \"base class\" for composite types (i.e. it uses the same i/o functions). text: ( followed by a list of comma-separated text-encoded values followed by ). Empty element means null. Quoted with \" and \" if necessary. \" is escaped with \"\" and \\ is escaped with \\\\ (this differs from arrays where \" is escaped with \\\"). Must be quoted if it is an empty string or contains one of \"\\,() or a space. binary: First a 32-bit integer with the number of columns, then for each column: An OID indicating the type of the column The length of the column (32-bit integer), or -1 if null The column data encoded as binary cstring: text/binary: all characters are sent without the trailing null-character void: Used for example as return value in SELECT * FROM func_returning_void() text: an empty string binary: zero bytes uuid: A 16-byte uuid. text: group of 8, 4, 4, 4, 12 hexadecimal lower-case characters, separated by -. The first byte is written first. It is allowed to surround it with {}. binary: the 16 bytes txid_snapshot: (txid is a UInt64) A struct of UInt32 nxip (size of the xip array) txid xmin (no values in xip is smaller than this) txid xmax (no values in xip is larger than or equal this) txid[] xip (is ordered in ascending order) text: xmin:xmax:1,2,3,4 binary: all fields in the structure tsvector: Used for text searching. Example of tsvector: 'a':1,6,10 'on':5 'and':8 'ate':9A 'cat':3 'fat':2,11 'mat':7 'rat':12 'sat':4 Max length for each lexeme string is 2046 bytes (excluding the trailing null-char) The words are sorted when parsed, and only written once. Positions are also sorted and only written once. For some reason, the unique check does not seem to be made for binary input, only text input... text: As seen above. ' is escaped with '' and \\ is escaped with \\\\. binary: UInt32 number of lexemes for each lexeme: lexeme text in client encoding, null-terminated UInt16 number of positions for each position: UInt16 WordEntryPos, where the most significant 2 bits is weight, and the 14 least significant bits is pos (can't be 0). Weights 3,2,1,0 represent A,B,C,D tsquery: A tree with operands and operators (&, |, !). Operands are strings, with optional weight (bitmask of ABCD) and prefix search (yes/no, written with *). text: the tree written in infix notation. Example: ( 'abc':*B | 'def' ) & !'ghi' binary: the tree written in prefix notation: First the number of tokens (a token is an operand or an operator). For each token: UInt8 type (1 = val, 2 = oper) followed by For val: UInt8 weight + UInt8 prefix (1 = yes / 0 = no) + null-terminated string, For oper: UInt8 oper (1 = not, 2 = and, 3 = or, 4 = phrase). In case of phrase oper code, an additional UInt16 field is sent (distance value of operator). Default is 1 for <->, otherwise the n value in '<n>'. enum: Simple text gtsvector: GiST for tsvector. Probably internal type. int4range/numrange/tsrange/tstzrange/daterange/int8range and user-defined range types: /* A range's flags byte contains these bits: */ #define RANGE_EMPTY 0x01 /* range is empty */ #define RANGE_LB_INC 0x02 /* lower bound is inclusive */ #define RANGE_UB_INC 0x04 /* upper bound is inclusive */ #define RANGE_LB_INF 0x08 /* lower bound is -infinity */ #define RANGE_UB_INF 0x10 /* upper bound is +infinity */ #define RANGE_LB_NULL 0x20 /* lower bound is null (NOT USED) */ #define RANGE_UB_NULL 0x40 /* upper bound is null (NOT USED) */ #define RANGE_CONTAIN_EMPTY 0x80/* marks a GiST internal-page entry whose * subtree contains some empty ranges */ A range has no lower bound if any of RANGE_EMPTY, RANGE_LB_INF (or RANGE_LB_NULL, not used anymore) is set. The same applies for upper bounds. text: A range with RANGE_EMPTY is just written as the string \"empty\". Inclusive bounds are written with [ and ], else ( and ) is used. The two values are comma-separated. Missing bounds are written as an empty string (without quotes). Each value is quoted with \" if necessary. Quotes are necessary if the string is either the empty string or contains \"\\,()[] or spaces. \" is escaped with \"\" and \\ is escaped with \\\\. Example: [18,21] binary: First the flag byte. Then, if has lower bound: 32-bit length + binary-encoded data. Then, if has upper bound: 32-bit length + binary-encoded data. hstore: Key/value-store. Both keys and values are strings. text: Comma-space separated string, where each item is written as \"key\"=>\"value\" or \"key\"=>NULL. \" and \\ are escaped as \\\" and \\\\. Example: \"a\"=>\"b\", \"c\"=>NULL, \"d\"=>\"q\" binary: Int32 count for each item: Int32 keylen string of the key (not null-terminated) Int32 length of item (or -1 if null) the item as a string ghstore: internal type for indexing hstore domain types: mapped types used in information_schema: cardinal_number: int4 (must be nonnegative or null) character_data: varchar sql_identifier: varchar time_stamp: timestamptz yes_or_no: varchar(3) (must be \"YES\" or \"NO\" or null) intnotnull: when an int4 is cast to this type, it is checked that the int4 is not null, but it still returns an int4 and not intnotnull..."
  },
  "doc/diagnostics/exceptions_notices.html": {
    "href": "doc/diagnostics/exceptions_notices.html",
    "title": "Exceptions, errors and notices | Npgsql Documentation",
    "keywords": "Exceptions, errors and notices Exception types Most exceptions thrown by Npgsql are either of type NpgsqlException , or wrapped by one; this allows your application to catch NpgsqlException where appropriate, for all database-related errors. Note that NpgsqlException is a sub-class of the general System.Data.DbException , so if your application uses more than one database type, you can catch that as well. When Npgsql itself encounters an error, it typically raises that as an NpgsqlException directly, possibly wrapping an inner exception. For example, if a networking error occurs while communicating with PostgreSQL, Npgsql will raise an NpgsqlException wrapping an IOException ; this allow you both to identify the root cause of the problem, while still identifying it as database-related. In other cases, PostgreSQL itself will report an error to Npgsql; Npgsql raises these by throwing a PostgresException , which is a sub-class of NpgsqlException adding important contextual information on the error. Most importantly, PostgresException exposes the SqlState property, which contains the PostgreSQL error code . This value can be consulted to identify which error type occurred. When executing multiple commands via NpgsqlBatch , the BatchCommand property references the command within the batch which triggered the exception. This allows you to understand exactly what happened, and access the specific SQL which triggered the error. PostgreSQL notices Finally, PostgreSQL also raises \"notices\", which contain non-critical information on command execution. Notices are not errors: they do not indicate failure and can be safely ignored, although they may contain valuable information on the execution of your commands. Npgsql logs notices in the debug logging level. To deal with notices programmatically, Npgsql also exposes the Notice event, which you can hook into for any further processing: conn.Notice += (_, args) => Console.WriteLine(args.Notice.MessageText);"
  },
  "doc/diagnostics/logging.html": {
    "href": "doc/diagnostics/logging.html",
    "title": "Logging | Npgsql Documentation",
    "keywords": "Logging Note Starting with version 7.0, Npgsql supports standard .NET logging via Microsoft.Extensions.Logging . If you're using an earlier version of Npgsql, skip down to this section . Npgsql fully supports logging various events via the standard .NET Microsoft.Extensions.Logging package. These can help debug issues and understand what's going on as your application interacts with PostgreSQL. Console programs To set up logging in Npgsql, create your ILoggerFactory as usual, and then configure an NpgsqlDataSource with it. Any use of connections handed out by the data source will log via your provided logger factory. The following shows a minimal console application logging to the console via Microsoft.Extensions.Logging.Console : // Create a Microsoft.Extensions.Logging LoggerFactory, configuring it with the providers, // log levels and other desired configuration. var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole()); // Create an NpgsqlDataSourceBuilder, configuring it with our LoggerFactory var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"Host=localhost;Username=test;Password=test\"); dataSourceBuilder.UseLoggerFactory(loggerFactory); await using var dataSource = dataSourceBuilder.Build(); // Any connections handed out by the data source will log via the LoggerFactory: await using var connection = await dataSource.OpenConnectionAsync(); await using var command = new NpgsqlCommand(\"SELECT 1\", connection); _ = await command.ExecuteScalarAsync(); Running this program outputs the following to the console: info: Npgsql.Command[2001] Command execution completed (duration=16ms): SELECT 1 By default, Npgsql logs command executions at the Information log level, as well as various warnings and errors. To see more detailed logging, increase the log level to Debug or Trace . ASP.NET and dependency injection If you're using ASP.NET, you can use the additional Npgsql.DependencyInjection package, which provides seamless integration with dependency injection and logging: var builder = WebApplication.CreateBuilder(args); builder.Logging.AddConsole(); builder.Services.AddNpgsqlDataSource(\"Host=localhost;Username=test;Password=test\"); The AddNpgsqlDataSource arranges for a data source to be configured in the DI container, which automatically uses the logger factory configured via the standard ASP.NET means. This allows your endpoints to get injected with Npgsql connections which log to the same logger factory when used. Configuration without NpgsqlDataSource If your application doesn't use NpgsqlDataSource , you can still configure Npgsql's logger factory globally, as follows: var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole()); NpgsqlLoggingConfiguration.InitializeLogging(loggerFactory); await using var conn = new NpgsqlConnection(\"Host=localhost;Username=test;Password=test\"); conn.Execute(\"SELECT 1\"); Note that you must call InitializeLogging at the start of your program, before any other Npgsql API is used. Parameter logging By default, when logging SQL statements, Npgsql does not log parameter values, since these may contain sensitive information. You can turn on parameter logging by setting NpgsqlLogManager.IsParameterLoggingEnabled to true. Console Program ASP.NET Program Without DbDataSource dataSourceBuilder.EnableParameterLogging(); builder.Services.AddNpgsqlDataSource( \"Host=localhost;Username=test;Password=test\", builder => builder.EnableParameterLogging()); NpgsqlLoggingConfiguration.InitializeLogging(loggerFactory, parameterLoggingEnabled: true); Warning Do not leave parameter logging enabled in production, as sensitive user information may leak into your logs. Logging in older versions of Npgsql Prior to 7.0, Npgsql had its own, custom logging API. To use this, statically inject a logging provider implementing the INpgsqlLoggingProvider interface as follows: NpgsqlLogManager.Provider = new ??? Note: you must set the logging provider before invoking any other Npgsql method, at the very start of your program. It's trivial to create a logging provider that passes log messages to whatever logging framework you use, you can find such an adapter for NLog below. ConsoleLoggingProvider Npgsql comes with one built-in logging provider: ConsoleLoggingProvider . It simply dumps all log messages with a given level or above to standard output. You can set it up by including the following line at the beginning of your application: NpgsqlLogManager.Provider = new ConsoleLoggingProvider(<min level>, <print level?>, <print connector id?>); Level defaults to NpgsqlLogLevel.Info (which will only print warnings and errors). You can also have log levels and connector IDs logged. NLogLoggingProvider (or implementing your own) The following provider is used in the Npgsql unit tests to pass log messages to NLog . You're welcome to copy-paste it into your project, or to use it as a starting point for implementing your own custom provider. class NLogLoggingProvider : INpgsqlLoggingProvider { public NpgsqlLogger CreateLogger(string name) { return new NLogLogger(name); } } class NLogLogger : NpgsqlLogger { readonly Logger _log; internal NLogLogger(string name) { _log = LogManager.GetLogger(name); } public override bool IsEnabled(NpgsqlLogLevel level) { return _log.IsEnabled(ToNLogLogLevel(level)); } public override void Log(NpgsqlLogLevel level, int connectorId, string msg, Exception exception = null) { var ev = new LogEventInfo(ToNLogLogLevel(level), \"\", msg); if (exception != null) ev.Exception = exception; if (connectorId != 0) ev.Properties[\"ConnectorId\"] = connectorId; _log.Log(ev); } static LogLevel ToNLogLogLevel(NpgsqlLogLevel level) { switch (level) { case NpgsqlLogLevel.Trace: return LogLevel.Trace; case NpgsqlLogLevel.Debug: return LogLevel.Debug; case NpgsqlLogLevel.Info: return LogLevel.Info; case NpgsqlLogLevel.Warn: return LogLevel.Warn; case NpgsqlLogLevel.Error: return LogLevel.Error; case NpgsqlLogLevel.Fatal: return LogLevel.Fatal; default: throw new ArgumentOutOfRangeException(\"level\"); } } }"
  },
  "doc/diagnostics/metrics.html": {
    "href": "doc/diagnostics/metrics.html",
    "title": "Metrics with event counters | Npgsql Documentation",
    "keywords": "Metrics with event counters Npgsql supports reporting aggregated metrics which provide snapshots on its state and activities at a given point. These can be especially useful for diagnostics issues such as connection leaks, or doing general performance analysis Metrics are reported via the standard .NET event counters feature; it's recommended to read this blog post for a quick overview of how counters work. To collect event counters, install the dotnet-counters tool . Then, find out your process PID, and run it as follows: dotnet counters monitor Npgsql -p <PID> dotnet-counters will now attach to your running process and start reporting continuous counter data: [Npgsql] Average commands per multiplexing batch NaN Average write time per multiplexing batch (us) (us) NaN Busy Connections 4 Bytes Read (Count / 1 sec) 1,874,863 Bytes Written (Count / 1 sec) 1,546,830 Command Rate (Count / 1 sec) 18,199 Connection Pools 1 Current Commands 5 Failed Commands 0 Idle Connections 5 Prepared Commands Ratio (%) 0 Total Commands 372,918"
  },
  "doc/diagnostics/overview.html": {
    "href": "doc/diagnostics/overview.html",
    "title": "Diagnostics overview | Npgsql Documentation",
    "keywords": "Diagnostics overview Npgsql provides several ways to analyze what's going on inside Npgsql and to diagnose performance issues. Each has its own dedicated doc page: Tracing allows collecting information on which queries are executed, including precise timing information on start, end and duration. These events can be collected in a database, searched, graphically explored and otherwise analyzed. Logging generates textual information on various events within Npgsql; log levels can be adjusted to collect low-level information, helpful for diagnosing errors. Metrics generates aggregated quantitative data, useful for tracking the performance of your application in realtime and over time (e.g. how many queries are currently being executed in a particular moment). For information on the exceptions thrown by Npgsql, and on notices produced by PostgreSQL, see this page ."
  },
  "doc/diagnostics/tracing.html": {
    "href": "doc/diagnostics/tracing.html",
    "title": "Tracing with OpenTelemetry (experimental) | Npgsql Documentation",
    "keywords": "Tracing with OpenTelemetry (experimental) Note Support for tracing via OpenTelemetry has been introduced in Npgsql 6.0. The OpenTelemetry specifications for database tracing are currently experimental, so Npgsql's support may change in upcoming releases. OpenTelemetry is a widely-adopted framework for distributed observability across many languages and components; its tracing standards allow applications and libraries to emit information on activities and events, which can be exported by the application, stored and analyzed. Activities typically have start and end times, and can encompass other activities recursively; this allows you to analyze e.g. exactly how much time was spent in the database when handling a certain HTTP call. To make Npgsql emit tracing data, reference the Npgsql.OpenTelemetry NuGet package from your application, and set up tracing as follows: using var tracerProvider = Sdk.CreateTracerProviderBuilder() .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(\"npgsql-tester\")) .SetSampler(new AlwaysOnSampler()) // This optional activates tracing for your application, if you trace your own activities: .AddSource(\"MyApp\") // This activates up Npgsql's tracing: .AddNpgsql() // This prints tracing data to the console: .AddConsoleExporter() .Build(); Once this is done, you should start seeing Npgsql trace data appearing in your application's console. At this point, you can look into exporting your trace data to a more useful destination: systems such as Zipkin or Jaeger can efficiently collect and store your data, and provide user interfaces for querying and exploring it. Setting these up in your application is quite easy - simply replace the console exporter with the appropriate exporter for the chosen system. For example, Zipkin visualizes traces in the following way: In this trace, the Npgsql query (to database testdb) took around 800ms, and was nested inside the application's work1 activity, which also had another unrelated subtask1 . This allows understanding the relationships between the different activities, and where time is being spent."
  },
  "doc/failover-and-load-balancing.html": {
    "href": "doc/failover-and-load-balancing.html",
    "title": "Multiple Hosts, Failover and Load Balancing | Npgsql Documentation",
    "keywords": "Multiple Hosts, Failover and Load Balancing Note The functionality described in this page was introduced in Npgsql 6.0. Npgsql 6.0 allows specifying multiple hosts in your application's connection strings, allowing various failover and load balancing scenarios to be supported without the need for any additional component such as pgpool or pgbouncer. This typically requires setting up replication between your multiple PostgreSQL servers, to keep your standby servers in sync with your primary; this can be done with the help of PostgreSQL logical or physical replication, and some cloud providers provide this out of the box. Whatever the solution chosen, it's important to understand that this is out of Npgsql's scope - Npgsql is only responsible for connecting to your multiple servers as described below, and not for keeping your servers in sync. Multiple servers and failover Npgsql allows you to specify multiple servers in your connection string as follows: Host=server1,server2;Username=test;Password=test Different ports may be specified per host with the standard colon syntax: Host=server1:5432,server2:5433 . By default, Npgsql will try to connect to the servers in the order in which they were specified. In the above example, server2 is only used if a connection could not be established to server1 (or if the connection pool for server1 has been exhausted). This allows a simple failover setup, where Npgsql always connects to a single, primary server, but can connect to a standby in case the primary is down; this improves the reliability of your application. In this configuration, we sometimes refer to the standby as \"warm\" - it is always up and in sync with the primary, but is only used when the primary is down. Note Using failover as described above does not mean you don't have to worry about errors when your primary server is down. When opening a connection, you may get a broken connection from the pool: Npgsql has no way of knowing whether the connection is working without actually executing something on it, which would negate the perf advantages of pooling. Also, once you have an open connection, Npgsql will never implicitly retry a failed command on a failover server, since that command may be in a transaction (or otherwise depend on some state in the first connection). In other words, you must always be prepared to catch I/O-related exceptions when interacting with the database, and possibly implement a retrying strategy, opening a new connection and re-executing the series of commands. Specifying server types In the failover scenario above, if server1 goes down, server2 is typically promoted to being the new primary. However, server1 may be brought back up and assume the role of standby - the servers will have switched roles - and Npgsql will continue to connect to server1 whenever possible. To mitigate this, you can tell Npgsql which server type you wish to connect to: Host=server1,server2;Username=test;Password=test;Target Session Attributes=primary This will make Npgsql return connections only to the primary server, regardless of where it's located in the host list you provide. Load distribution Going a step further, it's important to understand that applications don't always make use of the database in the same way; some parts of your application only need to read data from the database, while others need to write data. If you have one or more standby servers, Npgsql can dispatch read-only queries to those servers to reduce the load on your primary. While the failover setup described above improves reliability , this technique improves performance . The Target Session Attributes parameter can be used to ask for a connection to a Standby, whenever possible: Host=server1,server2;Username=test;Password=test;Target Session Attributes=prefer-standby With prefer-standby , as long as at least one standby server is available, Npgsql will return connections to that server. However, if all standby servers are down (or have exhausted their Max Pool Size setting), a connection to the primary will be returned instead. Target Session Attributes supports the following options: Option Description any Any successful connection is acceptable. primary Server must not be in hot standby mode ( pg_is_in_recovery() must return false). standby Server must be in hot standby mode ( pg_is_in_recovery() must return true). prefer-primary First try to find a primary server, but if none of the listed hosts is a primary server, try again in Any mode. prefer-standby First try to find a standby server, but if none of the listed hosts is a standby server, try again in Any mode. read-write Session must accept read-write transactions by default (that is, the server must not be in hot standby mode and the default_transaction_read_only parameter must be off). read-only Session must not accept read-write transactions by default (the converse). Npgsql detects whether a server is a primary or a standby by occasionally querying pg_is_in_recovery() , and whether a server is read-write or read-only by querying default_transaction_read_only - this is consistent with how PostgreSQL's libpq implements target_session_attributes . Servers are queried just before a connection is returned from the pool; the query intervals can be controlled via the Host Recheck Seconds parameter (10 seconds by default). PostgreSQL 14 reports state changes automatically, so querying isn't needed (except when a host is down). Note If you choose to distribute load across multiple servers, make sure you understand what consistency guarantees are provided by PostgreSQL in your particular setup. In some cases, hot standbys lag behind their primary servers, and will therefore return slightly out-of-date results. This is usually OK, but if you require up-to-date results at all times, synchronous commit may provide a good solution (but has a performance cost). Load balancing We have seen how to select servers based on the type of workload we want to execute. However, in the above examples, Npgsql still attempts to return connections based on the host order specified in the connection string; this concentrates load on a single primary and possibly a single secondary, and doesn't balance load across multiple servers of the same type. You can specify Load Balance Hosts=true in the connection string to instruct Npgsql to load balance across all servers, by returning connections in round-robin fashion: Host=server1,server2,server3,server4,server5;Username=test;Password=test;Load Balance Hosts=true;Target Session Attributes=prefer-standby With this connection string, every time a connection is opened, Npgsql will start at a different point in the list. For example, in the 3rd connection attempt, Npgsql will first try to return a connection to server3 ; if that server is reachable and is a standby, it will be selected. This allows spreading your (typically read-only) application load across all available servers, and can greatly improve your scalability."
  },
  "doc/faq.html": {
    "href": "doc/faq.html",
    "title": "FAQ | Npgsql Documentation",
    "keywords": "FAQ How can I call a PostgreSQL 11 stored procedure? I tried doing so with CommandType.StoredProcedure and got an error... PostgreSQL 11 stored procedures can be called, but unfortunately not with CommandType.StoredProcedure . PostgreSQL has supported stored functions for a long while, and since these have acted as replacements for non-existing procedures, Npgsql's CommandType.StoredProcedure has been implemented to invoke them; this means that CommandType.StoredProcedure translates into SELECT * FROM my_stored_function() . The new stored procedures introduce a special invocation syntax - CALL my_stored_procedure() - which is incompatible with the existing stored function syntax. On the brighter side, it's very easy to invoke stored procedures (or functions) yourself - you don't really need CommandType.StoredProcedure . Simply create a regular command and set CommandText to CALL my_stored_procedure(@p1, @p2) , handling parameters like you would any other statement. In fact, with Npgsql and PostgreSQL, CommandType.StoredProcedure doesn't really have any added value over constructing the command yourself. I opened a pooled connection, and it throws right away when I use it! What gives? We know it's frustrating and seems weird, but this behavior is by-design. While your connection is idle in the pool, any number of things could happen to it - a timeout could cause it to break, or some other similar network problem. Unfortunately, with the way networking works, there is no reliable way for us to know on the client if a connection is still alive; the only thing we can do is send something to PostgreSQL, and wait for the response to arrive. Doing this whenever a connection is handed out from the pool would kill the very reason pooling exists - it would dramatically slow down pooling, which is there precisely to avoid unneeded network roundtrips. But the reality is even more grim than that. Even if Npgsql checked whether a connection is live before handing it out of the pool, there's nothing guaranteeing that the connection won't break 1 millisecond after that check - it's a total race condition. So the check wouldn't just degrade performance, it would also be largely useless. The reality of network programming is that I/O errors can occur at any point, and your code must take that into account if it has high reliability requirements. Resilience/retrying systems can help you with this; take a look at Polly as an example. One thing which Npgsql can do to help a bit, is the keepalive feature ; this does a roundtrip with PostgreSQL every e.g. 1 second - including when the connection is idle in the pool - and destroys it if an I/O error occurs. However, depending on timing, you may still get a broken connection out of the pool - unfortunately there's simply no way around that. I get an exception \"The field field1 has a type currently unknown to Npgsql (OID XXXXX). You can retrieve it as a string by marking it as unknown\". Npgsql has to implement support for each PostgreSQL type, and it seems you've stumbled upon an unsupported type. First, head over to our issues page and check if an issue already exists on your type, otherwise please open one to let us know. Then, as a workaround, you can have your type treated as text - it will be up to you to parse it in your program. One simple way to do this is to append ::TEXT in your query (e.g. SELECT 3::TEXT ). If you don't want to modify your query, Npgsql also includes an API for requesting types as text. The following code returns all the columns in the resultset as text: using (var cmd = new NpgsqlCommand(...)) { cmd.AllResultTypesAreUnknown = true; var reader = cmd.ExecuteReader(); // Read everything as strings } You can also specify text only for some columns in your resultset: using (var cmd = new NpgsqlCommand(...)) { // Only the second field will be fetched as text cmd.UnknownResultTypeList = new[] { false, true }; var reader = cmd.ExecuteReader(); // Read everything as strings } I'm trying to write a JSONB type and am getting 'column \"XXX\" is of type jsonb but expression is of type text' When sending a JSONB parameter, you must explicitly specify its type to be JSONB with NpgsqlDbType: using (var cmd = new NpgsqlCommand(\"INSERT INTO foo (col) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"p\", NpgsqlDbType.Jsonb, jsonText); } I'm trying to apply an Entity Framework 6 migration and I get Type is not resolved for member 'Npgsql.NpgsqlException,Npgsql' Unfortunately, a shortcoming of EF6 requires you to have Npgsql.dll in the Global Assembly Cache (GAC), otherwise you can't see migration-triggered exceptions. You can add Npgsql.dll to the GAC by opening a VS Developer Command Prompt as administator and running the command gacutil /i Npgsql.dll . You can remove it from the GAC with gacutil /u Npgsql ."
  },
  "doc/index.html": {
    "href": "doc/index.html",
    "title": "Documentation | Npgsql Documentation",
    "keywords": "Getting Started The best way to use Npgsql is to install its nuget package . Npgsql aims to be fully ADO.NET-compatible, its API should feel almost identical to other .NET database drivers. Here's a basic code snippet to get you started: var connectionString = \"Host=myserver;Username=mylogin;Password=mypass;Database=mydatabase\"; await using var dataSource = NpgsqlDataSource.Create(connectionString); // Insert some data await using (var cmd = dataSource.CreateCommand(\"INSERT INTO data (some_field) VALUES ($1)\")) { cmd.Parameters.AddWithValue(\"Hello world\"); await cmd.ExecuteNonQueryAsync(); } // Retrieve all rows await using (var cmd = dataSource.CreateCommand(\"SELECT some_field FROM data\")) await using (var reader = await cmd.ExecuteReaderAsync()) { while (await reader.ReadAsync()) { Console.WriteLine(reader.GetString(0)); } } You can find more info about the ADO.NET API in the MSDN docs or in many tutorials on the Internet."
  },
  "doc/installation.html": {
    "href": "doc/installation.html",
    "title": "Installation | Npgsql Documentation",
    "keywords": "Offical Packages Official releases of Npgsql are always available on nuget.org . This is the recommended way to use Npgsql. We occasionally publish previews to nuget.org as well - these are generally quite safe for use, and can help us find issues before official packages are released. Daily Builds In addition to the official releases, we automatically publish CI packages for every build. You can use these to test new features or bug fixes that haven't been released yet. Two CI nuget feeds are available: The patch feed contains CI packages for the next hotfix/patch version. These packages are generally very stable and safe. To use it, add https://www.myget.org/F/npgsql/api/v3/index.json to your NuGet.Config. The vNext feed contains CI packages for the next minor or major versions. These are less stable and should be tested with care. To use it, add https://www.myget.org/F/npgsql-vnext/api/v3/index.json to your NuGet.Config. Older, unsupported installation methods Windows MSI Installer If you need to use Npgsql as a database provider for PowerBI, Excel or other similar systems, you need to install it into the Windows Global Assembly Cache (GAC) , and do some special configuration. Npgsql versions prior to 5.0.0 provided a Windows installer (MSI) which does the installation for you, and which are still usable and maintained with critical bug fixes. Do not use the Windows MSI installer unless you're sure that your program requires GAC installation - this method is otherwise highly discouraged. The Npgsql Windows MSI installer for Npgsql 4.1.x can be found on our Github releases page : it will install Npgsql (and optionally the Entity Framework providers) into your GAC and add Npgsql's DbProviderFactory into your machine.config file. Some additional assemblies which are Npgsql dependencies will be installed into the GAC as well (e.g. System.Threading.Tasks.Extensions.dll ). Visual Studio Integration Older versions of Npgsql came with a Visual Studio extension (VSIX) which integrated PostgreSQL access into Visual Studio. The extension allowed connecting to PostgreSQL from within Visual Studio's Server Explorer, creating an Entity Framework 6 model from an existing database, etc. The extension had various limitations and known issues, mainly because of problems with Visual Studio's extensibility around database. Use of the extension is no longer recommended. However, if you'd like to give it a try, it can be installed directly from the Visual Studio Marketplace page . DbProviderFactory in .NET Framework On .NET Framework, you can register Npgsql's DbProviderFactory in your applications App.Config (or Web.Config ), allowing you to use general, provider-independent ADO.NET types in your application (e.g. DbConnection instead of NpgsqlConnection ) - see this tutorial . To do this, add the following to your App.config : <system.data> <DbProviderFactories> <add name=\"Npgsql Data Provider\" invariant=\"Npgsql\" description=\".Net Data Provider for PostgreSQL\" type=\"Npgsql.NpgsqlFactory, Npgsql, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\"/> </DbProviderFactories> </system.data>"
  },
  "doc/keepalive.html": {
    "href": "doc/keepalive.html",
    "title": "Keepalive | Npgsql Documentation",
    "keywords": "Keepalive Some clients keep idle connections for long periods of time - this is especially frequent when waiting for PostgreSQL notifications. In this scenario, how can the client know the connection is still up, and hasn't been broken by a server or network outage? For this purpose, Npgsql has a keepalive feature, which makes it initiate periodic ping roundtrips. This feature is by default disabled, and must be enabled via the Keepalive connection string parameter, setting the number of seconds between each keepalive. When keepalive is enabled, Npgsql will emit an NpgsqlConnection.StateChange event if the keepalive fails. Note that you should only turn this feature on if you need it. Unless you know you'll have long-lived idle connections, and that your backend (or network equipment) will interfere with these connections, it's better to leave this off. TCP Keepalives The keepalive mechanism above is ideal for long-standing idle connections, but it cannot be used during query processing. With some PostgreSQL-like data warehouse products such as Amazon Redshift or Greenplum , it is not uncommon for a single SQL statement to take a long time to execute, and during that time it is not possible to send application-level pings. For these cases you may want to turn on TCP keepalive , which is quite different from the application-level keepalive described above. To better understand the different kinds of keepalives, see this blog post . As that article explains, TCP keepalive depends on networking stack support and might not always work, but it is your only option during query processing. On Linux, you turn keepalives simply by specifying Tcp Keepalive=true in your connection string. The default system-wide settings will be used (for interval, count...) - it is currently impossible to specify these at the application level. On Windows, you can also specify Tcp Keepalive Time and Tcp Keepalive Interval to tweak these settings."
  },
  "doc/large-objects.html": {
    "href": "doc/large-objects.html",
    "title": "Large Objects | Npgsql Documentation",
    "keywords": "Large Objects The Large Objects feature is a way of storing large files in a PostgreSQL database. Files can normally be stored in bytea columns but there are two downsides; a file can only be 1 GB and the backend buffers the whole file when reading or writing a column, which may use significant amounts of RAM on the backend. With the Large Objects feature, objects are instead stored in a separate system table in smaller chunks and provides a streaming API for the user. Each object is given an integral identifier that is used for accessing the object, that can, for example, be stored in a user's table containing information about this object. Example // Retrieve a Large Object Manager for this connection var manager = new NpgsqlLargeObjectManager(Conn); // Create a new empty file, returning the identifier to later access it uint oid = manager.Create(); // Reading and writing Large Objects requires the use of a transaction using (var transaction = Conn.BeginTransaction()) { // Open the file for reading and writing using (var stream = manager.OpenReadWrite(oid)) { var buf = new byte[] { 1, 2, 3 }; stream.Write(buf, 0, buf.Length); stream.Seek(0, System.IO.SeekOrigin.Begin); var buf2 = new byte[buf.Length]; stream.Read(buf2, 0, buf2.Length); // buf2 now contains 1, 2, 3 } // Save the changes to the object transaction.Commit(); } See also See the PostgreSQL documentation for more information. All functionality are implemented and wrapped in the classes NpgsqlLargeObjectManager and NpgsqlLargeObjectStream using standard .NET Stream as base class."
  },
  "doc/performance.html": {
    "href": "doc/performance.html",
    "title": "Performance | Npgsql Documentation",
    "keywords": "Performance Diagnostics To be able to improve performance, you first need to be able to see which queries are slow, and generally observe how your application is behaving. PostgreSQL provide some powerful features for knowing what's going on in the database; the statistics collector is a good place to start, and in particular the pg_stat_activity table, which shows which queries are being executed at any given point. Beyond PostgreSQL, Npgsql provides its own set of diagnostics features for tracing, logging and producing metrics. Tracing and metrics are particularly useful for performance analysis - consider collecting this data continuously on your production platform. These features are documented in the dedicated diagnostics page . Prepared Statements One of the most important (and easy) ways to improve your application's performance is to prepare your commands. Even if you're not coding against ADO.NET directly (e.g. using Dapper or an O/RM), Npgsql has an automatic preparation feature which allows you to benefit from the performance gains associated with prepared statements. See this blog post and/or the documentation for more details. Batching/Pipelining When you execute a command, Npgsql executes a roundtrip to the database. If you execute multiple commands (say, inserting 3 rows or performing multiple selects), you're executing multiple roundtrips; each command has to complete before the next command can start execution. Depending on your network latency, this can considerably degrade your application's performance. You can batch multiple SQL statements in a single roundtrip: var batch = new NpgsqlBatch(connection) { BatchCommands = { new(\"SELECT ...\"), new(\"SELECT ...\") } }; using (var reader = batch.ExecuteReader()) { while (reader.Read()) { // Read first resultset } reader.NextResult(); while (reader.Read()) { // Read second resultset } } Disable enlisting to TransactionScope By default, Npgsql will enlist to ambient transactions. This occurs when a connection is opened while inside a TransactionScope , and can provide a powerful programming model for working with transactions. However, this involves checking whether an ambient transaction is in progress each time a (pooled) connection is open, an operation that takes more time than you'd think. Scenarios where connections are very short-lived and open/close happens very frequently can benefit from removing this check - simply include Enlist=false in the connection string. Note that you can still enlist manually by calling NpgsqlConnection.Enlist() . Pooled Connection Reset When a pooled connection is closed, Npgsql will arrange for its state to be reset the next time it's used. This prevents leakage of state from one usage cycle of a physical connection to another one. For example, you may change certain PostgreSQL parameters (e.g. statement_timeout ), and it's undesirable for this change to persist when the connection is closed. Connection reset happens via the PostgreSQL DISCARD ALL command , or, if there are any prepared statements at the time of closing, by a combination of the equivalent statements described in the docs (to prevent closing those statements). Note that these statements aren't actually sent when closing the connection - they're written into Npgsql's internal write buffer, and will be sent with the first user statement after the connection is reopened. This prevents a costly database roundtrip. If you really want to squeeze every last bit of performance from PostgreSQL, you may disable connect reset by specifying No Reset On Close on your connection string - this will slightly improve performance in scenarios where connection are very short-lived, and especially if prepared statements are in use. Reading Large Values When reading results from PostgreSQL, Npgsql first reads raw binary data from the network into an internal read buffer, and then parses that data as you call methods such as NpgsqlDataReader.GetString() . While this allows for efficient network reads, it's worth thinking about the size of this buffer, which is 8K by default. Under normal usage, Npgsql attempts to read each row into the buffer; if that entire row fits in 8K, you'll have optimal performance. However, if a row is bigger than 8K, Npgsql will allocate an \"oversize buffer\", which will be used until the connection is closed or returned to the pool. If you're not careful, this can create significant memory churn that will slow down your application. To avoid this, if you know you're going to be reading 16k rows, you can specify Read Buffer Size=18000 in your connection string (leaving some margin for protocol overhead), this will ensure that the read buffer is reused and no extra allocation occur. Another option is to pass CommandBehavior.SequentialAccess to NpgsqlCommand.ExecuteReader() . Sequential mode means that Npgsql will no longer read entire rows into its buffer, but will rather fill up the buffer as needed, reading more data only when it's empty. The same 8K read buffer will be used regardless of the row's total size, and Npgsql will take care of the details. In sequential mode, however, you must read the row's fields in the order in which you specified them; you cannot read the 2nd field and then go back to the 1st field, and trying to do so will generate an exception. Similarly, you cannot read the same field twice - once you've read a field, it has been consumed. For more information on CommandBehavior.SequentialAccess , see this page . If you decide to use this feature, be aware that it isn't used as often and may therefore contain bugs. You can also control the socket's receive buffer size (not to be confused with Npgsql's internal buffer) by setting the Socket Receive Buffer Size connection string parameter. Writing Large Values Writing is somewhat similar - Npgsql has an internal write buffer (also 8K by default). When writing your query's SQL and parameters to PostgreSQL, Npgsql always writes \"sequentially\", that is, filling up the 8K buffer and flushing it when full. You can use Write Buffer Size to control the buffer's size. You can also control the socket's send buffer size (not to be confused with Npgsql's internal buffer) by setting the Socket Send Buffer Size connection string parameter. Avoiding boxing when writing parameter values See this section . Unix Domain Socket If you're on Linux or macOS and are connecting to a PostgreSQL server on the same machine, you can boost performance a little by connecting via Unix domain socket rather than via a regular TCP/IP socket. To do this, simply specify the directory of your PostgreSQL sockets in the Host connection string parameter - if this parameter starts with a slash, it will be taken to mean a filesystem path."
  },
  "doc/prepare.html": {
    "href": "doc/prepare.html",
    "title": "Prepared Statements | Npgsql Documentation",
    "keywords": "Prepared Statements Introduction It's recommended that you start by reading this blog post . Most applications repeat the same SQL statements many times, passing different parameters. In such cases, it's very beneficial to prepare commands - this will send the command's statement(s) to PostgreSQL, which will parse and plan for them. The prepared statements can then be used on execution, saving valuable planning time. The more complex your queries, the more you'll notice the performance gain; but even very simple queries tend to benefit from preparation. Following is a benchmark Npgsql.Benchmarks.Prepare, which measures the execution time of the same query, executed prepared and unprepared. TablesToJoin is a parameter which increases the query complexity - it determines how many tables the query joins from. Method TablesToJoin Mean StdErr StdDev Op/s Scaled Scaled-StdDev Allocated Unprepared 0 67.1964 us 0.1586 us 0.6142 us 14881.75 1.00 0.00 1.9 kB Prepared 0 43.5007 us 0.2466 us 0.9227 us 22988.13 0.65 0.01 305 B Unprepared 1 98.8502 us 0.1278 us 0.4949 us 10116.32 1.00 0.00 1.93 kB Prepared 1 53.7518 us 0.0486 us 0.1818 us 18604.04 0.54 0.00 306 B Unprepared 2 180.0599 us 0.2990 us 1.1579 us 5553.71 1.00 0.00 2.06 kB Prepared 2 70.3609 us 0.1715 us 0.6417 us 14212.44 0.39 0.00 306 B Unprepared 5 1,084.6065 us 1.1822 us 4.2626 us 921.99 1.00 0.00 2.37 kB Prepared 5 110.0652 us 0.1098 us 0.3805 us 9085.52 0.10 0.00 308 B Unprepared 10 23,086.5956 us 37.2072 us 139.2167 us 43.32 1.00 0.00 3.11 kB Prepared 10 197.1392 us 0.3044 us 1.1790 us 5072.56 0.01 0.00 308 B As is immediately apparent, even an extremely simple scenario (TablesToJoin=0, SQL=SELECT 1), preparing the query with PostgreSQL provides a 36% speedup. As query complexity increases by adding join tables, the gap widens dramatically. The only potential disadvantage of prepared statements is that they hold server-side resources (e.g. cached plans). If you're dynamically generating SQL queries, make sure you don't overwhelm the server by preparing too much. Most reasonable applications shouldn't have to worry about this. Simple Preparation To prepare your commands, simply use the following standard ADO.NET code: var cmd = new NpgsqlCommand(...); cmd.Parameters.Add(\"param\", NpgsqlDbType.Integer); cmd.Prepare(); // Set parameters cmd.ExecuteNonQuery(); // And so on Note that all parameters must be set before calling Prepare() - they are part of the information transmitted to PostgreSQL and used to effectively plan the statement. You must also set the DbType or NpgsqlDbType on your parameters to unambiguously specify the data type (setting the value isn't support). Note that preparation happens on individual statements, and not on commands, which can contain multiple statements, batching them together. This can be important in cases such as the following: var cmd = new NpgsqlCommand(\"UPDATE foo SET bar=@bar WHERE baz=@baz; UPDATE foo SET bar=@bar WHERE baz=@baz\"); // set parameters. cmd.Prepare(); Although there are two statements in this command, the same prepared statement is used to execute since the SQL is identical. Persistency With many database drivers, prepared statements are closed when their owning command was disposed. This significantly reduces their usefulness, especially since closing a pooled connection automatically closes all prepared statements. For applications where connections are short-lived - most web applications - this effectively makes prepared statements useless. In Npgsql, all prepared statements are persistent - they don't get closed when a command or connection is closed. Npgsql keeps track of statements prepared on each physical connection; if you prepare the same SQL a second time on the same physical connection, Npgsql will simply reuse the prepared statement from the first preparation. This means that in an application with short-lived, pooled connections, prepared statements will gradually be created as the application warms up and the connections are first used. Then, opening a new pooled connection will return a physical connection that already has a prepared statement for your SQL, providing a very substantial performance boost. For example: using (var conn = new NpgsqlConnection(...) using (var cmd = new NpgsqlCommand(\"<some_sql>\", conn) { conn.Open(); cmd.Prepare(); // First time on this physical connection, Npgsql prepares with PostgreSQL cmd.ExecuteNonQuery(); } using (var conn = new NpgsqlConnection(...) using (var cmd = new NpgsqlCommand(\"<some_sql>\", conn) { conn.Open(); // We assume the pool returned the same physical connection used above cmd.Prepare(); // The connection already has a prepared statement for <some_sql>, this doesn't need to do anything cmd.ExecuteNonQuery(); } You can still choose to close a prepared statement by calling NpgsqlCommand.Unprepare() . You can also unprepare all statements on a given connection by calling NpgsqlConnection.UnprepareAll() . Automatic Preparation While the preparation examples shown above provide a very significant performance boost, they depend on you calling the Prepare() command. Unfortunately, if you're using some data layer above ADO.NET, such as Dapper or Entity Framework , chances are these layers don't prepare for you. While issues exist for both Dapper and Entity Framework Core , they don't take advantage of prepared statement at the moment. Npgsql supports automatic preparation. When turned on, this will make Npgsql track the statements you execute and automatically prepare them when you reach a certain threshold. When you reach that threshold, the statement is automatically prepared, and from that point on will be executed as prepared, yielding all the performance benefits discussed above. To turn on this feature, you simply need to set the Max Auto Prepare connection string parameter, which determines how many statements can be automatically prepared on the connection at any given time (this parameter defaults to 0, disabling the feature). A second parameter, Auto Prepare Min Usages , determines how many times a statement needs to be executed before it is auto-prepared (defaults to 5). Since no code changes are required, you can simply try setting Max Auto Prepare and running your application to see an immediate speed increase. Note also that, like explicitly-prepared statements, auto-prepared statements are persistent, allowing you to reap the performance benefits in short-lived connection applications. Note that if you're coding directly against Npgsql or ADO.NET, explicitly preparing your commands with Prepare() is still recommended over letting Npgsql prepare automatically. Automatic preparation does incur a slight performance cost compared to explicit preparation, because of the internal LRU cache and various book-keeping data structures. Explicitly preparing also allows you to better control exactly which statements are prepared and which aren't, and ensures your statements will always stay prepared, and never get ejected because of the LRU mechanism. Note that automatic preparation is a complex new feature which should be considered somewhat experimental; test carefully, and if you see any strange behavior or problem try turning it off."
  },
  "doc/release-notes/3.0.html": {
    "href": "doc/release-notes/3.0.html",
    "title": "Npgsql 3.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 3.0 Release Notes Migrating from 2.2 to 3.0 Version 3.0 represents a near-total rewrite of Npgsql. In addition to changing how Npgsql works internally and communicates with PostgreSQL, a conscious effort was made to better align Npgsql with the ADO.NET specs/standard and with SqlClient where that made sense. This means that you cannot expect to drop 3.0 as a replacement to 2.2 and expect things to work - upgrade cautiously and test extensively before deploying anything to production. The following is a non-exhaustive list of things that changed. If you run against a breaking change not documented here, please let us know and we'll add it. Major Support for .NET 2.0, .NET 3.5 and .NET 4.0 has been dropped - you will have to upgrade to .NET 4.5 to use Npgsql 3.0. We'll continue to do bugfixes on the 2.2 branch for a while on a best-effort basis. The Entity Framework provider packages have been renamed to align with Microsoft's new naming. The new packages are EntityFramework5.Npgsql and EntityFramework6.Npgsql . EntityFramework7.Npgsql is in alpha. A brand-new bulk copy API has been written, using binary encoding for much better performance. See the docs . Composite (custom) types aren't supported yet, but this is a high-priority feature for us. See #441 . SSL Npgsql 2.2 didn't perform validation on the server's certificate by default, so self-signed certificate were accepted. The new default is to perform validation. Specify the Trust Server Certificate connection string parameter to get back previous behavior. The \"SSL\" connection string parameter has been removed, use \"SSL Mode\" instead. The \"SSL Mode\" parameter's Allow option has been removed, as it wasn't doing anything. Type Handling Previously, Npgsql allowed writing a NULL by setting NpgsqlParameter.Value to null . This is not allowed in ADO.NET and is no longer supported, set to DBNull.Value instead. In some cases, you will now be required to explicitly set a parameter's type although you didn't have to before (you'll get an error 42804 explaining this). This can happen especially in Dapper custom custom type handlers ( #694 ). Simply set the NpgsqlDbType property on the parameter. Removed support for writing a parameter with an IEnumerable<T> value, since that would require Npgsql to enumerate it multiple times internally. IList<T> and IList are permitted. It is no longer possible to write a .NET enum to an integral PostgreSQL column (e.g. int4). Proper enum support has been added which allows writing to PostgreSQL enum columns (see the docs . To continue writing enums to integral columns as before, simply add an explicit cast to the integral type in your code. NpgsqlMacAddress has been removed and replaced by the standard .NET PhysicalAddress. Npgsql's BitString has been removed and replaced by the standard .NET BitArray. NpgsqlTime has been removed and replaced by the standard .NET TimeSpan. NpgsqlTimeZone has been removed. NpgsqlTimeTZ now holds 2 TimeSpans, rather than an NpgsqlTime and an NpgsqlTimeZone. NpgsqlTimeStamp no longer maps DateTime.{Max,Min}Value to {positive,negative} infinity. Use NpgsqlTimeStamp.Infinity and NpgsqlTimeStamp.MinusInfinity explicitly for that. You can also specify the \"Convert Infinity DateTime\" connection string parameter to retain the old behavior. Renamed NpgsqlInet's addr and mask to Address and Mask. NpgsqlPoint now holds Doubles instead of Singles ( #437 ). NpgsqlDataReader.GetFieldType() and GetProviderSpecificFieldType() now return Array for arrays. Previously they returned int[], even for multidimensional arrays. NpgsqlDataReader.GetDataTypeName() now returns the name of the PostgreSQL type rather than its OID. Retired features Removed the \"Preload Reader\" feature, which loaded the entire resultset into memory. If you require this (inefficient) behavior, read the result into memory outside Npgsql. We plan on working on MARS support, see #462 . The \"Use Extended Types\" parameter is no longer needed and isn't supported. To access PostgreSQL values that can't be represented by the standard CLR types, use the standard ADO.NET NpgsqlDataReader.GetProviderSpecificValue or even better, the generic NpgsqlDataReader.GetFieldValue<T> . Removed the feature where Npgsql automatically \"dereferenced\" a resultset of refcursors into multiple resultsets (this was used to emulate returning multiple resultsets from stored procedures). Note that if your function needs to return a single resultset, it should be simply returning a table rather than a cursor (see RETURNS TABLE ). See #438 . Removed the AlwaysPrepare connection string parameter Removed the Encoding connection string parameter, which was obsolete and unused anyway (UTF8 was always used regardless of what was specified) Removed the Protocol connection string parameter, which was obsolete and unused anyway (protocol 3 was always used) Removed NpgsqlDataReader.LastInsertedOID, it did not allow accessing individual OIDs in multi-statement commands. Replaced with NpgsqlDataReader.Statements, which provides OID and affected row information on a statement-by-statement basis. Removed NpgsqlDataReader.HasOrdinal , was a badly-named non-standard API without a serious use case. GetName() can be used as a workaround. Other It is no longer possible to create database entities (tables, functions) and then use them in the same multi-query command - you must first send a command creating the entity, and only then send commands using it. See #641 for more details. Previously, Npgsql set DateStyle=ISO, lc_monetary=C and extra_float_digits=3 on all connections it created. This is no longer case, if you rely on these parameters you must send them yourself. NpgsqlConnection.Clone() will now only return a new connection with the same connection string as the original. Previous versions returned an open connection if the original was open, and copied the Notice event listeners as well. Note: NpgsqlConnection.Clone() was accidentally missing from 3.0.0 and 3.0.1. Removed the obsolete NpgsqlParameterCollection.Add(name, value) method. Use AddWithValue() instead, which also exists in SqlClient. The savepoint manipulation methods on NpgsqlTransaction have been renamed from Save , and Rollback to CreateSavepoint and RollbackToSavepoint . This broke the naming conventions for these methods across other providers (SqlClient, Oracle...) and so in 3.0.2 the previous names were returned and the new names marked as obsolete. 3.1 will remove the the new names and leaves only Save and Rollback . See #738 . The default CommandTimeout has changed from 20 seconds to 30 seconds, as in ADO.NET . CommandType.TableDirect now requires CommandText to contain the name of a table, as per the MSDN docs . Multiple tables (join) aren't supported. CommandType.StoredProcedure now requires CommandText contain only the name of a function, without parentheses or parameter information, as per the MSDN docs . Moved the LastInsertedOID property from NpgsqlCommand to NpgsqlReader, like the standard ADO.NET RecordsAffected . A single SQL statement may no longer have more than 65535 parameters. If you're bulk-importing a large number of rows, consider using the binary COPY API which is considerably more efficient, or an alternative method such as inserting from array parameters . Contributors Thank you very much to the following people who have contributed to the individual 3.0.x. releases. Milestone 3.0.8 Contributor Assigned issues @roji 11 Milestone 3.0.7 Contributor Assigned issues @roji 1 Milestone 3.0.6 Contributor Assigned issues @roji 10 @Emill 1 Milestone 3.0.5 Contributor Assigned issues @roji 4 @kenjiuno 1 Milestone 3.0.4 Contributor Assigned issues @roji 10 @damageboy 2 Milestone 3.0.3 Contributor Assigned issues @roji 14 Milestone 3.0.2 Contributor Assigned issues @roji 8 @Emill 4 Milestone 3.0.1 Contributor Assigned issues @roji 13 @Emill 1 Milestone 3.0.0 Contributor Assigned issues @roji 62 @Emill 3"
  },
  "doc/release-notes/3.1.html": {
    "href": "doc/release-notes/3.1.html",
    "title": "Npgsql 3.1 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 3.1 Release Notes Migrating from 3.0 to 3.1 CommandTimeout used to be implemented with PostgreSQL's statement_timeout parameter, but this wasn't a very reliable method and has been removed. CommandTimeout is now implemented via socket timeouts only, see #689 for more details. Note that if a socket timeout occurs, the connection is broken and must be reopened. The Persist Security Info parameter has been implemented and is false by default. This means that once a connection has been opened, you will not be able to get its password. Removed ContinuousProcessing mode, and replaced it with Wait , a simpler and less bug-prone mechanism for consuming asynchronous notifications ( #1024 ). The Maximum Pool Size connection is parameter is now 100 default instead of 20 (this is default in SqlClient, pg_bouncer...). The Connection Lifetime parameter has been renamed to Connection Idle Lifetime , and its default has been changed from 15 to 300. Also, once the number of seconds has elapsed the connection is closed immediately; the previous behavior closed half of the connections. RegisterEnum and RegisterEnumGlobally have been renamed to MapEnum and MapEnumGlobally respectively. If you used enum mapping in 3.0, the strategy for translating between CLR and PostgreSQL type names has changed. In 3.0 Npgsql simply used the CLR name (e.g. SomeField) as the PostgreSQL name; Npgsql 3.1 uses a user-definable name translator, default to snake case (e.g. some_field). See #859 . The EnumLabel attribute has been replaced by the PgName attribute (which is also used for the new composite type support). When PostgreSQL sends an error, it is no longer raised by an NpgsqlException but by a PostgresException. PostgresException is a subclass of NpgsqlException so code catching NpgsqlException should still work, but the PostgreSQL-specific exception properties will only be available on PostgresException. The Code property on NpgsqlException has been renamed to SqlState. It has also been moved to PostgresException. NpgsqlNotice has been renamed to PostgresNotice For multistatement commands, PostgreSQL parse errors will now be thrown only when the user calls NextResult() and gets to the problematic statement. It is no longer possible to dispose a prepared statement while a reader is still open. Since disposing a prepared statement includes database interaction, the connection must be idle. Removed NpgsqlConnection.SupportsHexByteFormat . Renamed NpgsqlConnection.Supports_E_StringPrefix to SupportsEStringPrefix . Contributors Thank you very much to the following people who have contributed to the individual 3.1.x. releases. Milestone 3.1.9 Contributor Assigned issues @roji 10 @DaveVdE 1 @rwasef1830 1 Milestone 3.1.8 Contributor Assigned issues @roji 10 Milestone 3.1.7 Contributor Assigned issues @roji 7 Milestone 3.1.6 Contributor Assigned issues @roji 5 Milestone 3.1.5 Contributor Assigned issues @roji 4 Milestone 3.1.4 Contributor Assigned issues @roji 2 Milestone 3.1.3 Contributor Assigned issues @roji 10 Milestone 3.1.2 Contributor Assigned issues @roji 1 Milestone 3.1.10 Contributor Assigned issues @roji 5 Milestone 3.1.1 Contributor Assigned issues @roji 5 Milestone 3.1.0 Contributor Assigned issues @roji 24 @Emill 2"
  },
  "doc/release-notes/3.2.html": {
    "href": "doc/release-notes/3.2.html",
    "title": "Npgsql 3.2 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 3.2 Release Notes Npgsql 3.2 is out and available on nuget.org. This is a major release with substantial internal changes and should be deployed with care. For critical applications it may be advisable to wait until 3.2.1 is out. This release contains a large number of new features, but the main focus is performance - some usage scenarios may show dramatic improvements. See below for more details. Major Changes Prepared statements are now persistent (survive beyond pooled connection close/open), providing significant performance improvements for applications with short-lived connections, such as most webapps ( #483 ). Also, statements can optionally be prepared automatically by Npgsql based on use, unlocking prepared statement performance for O/RMs and data layers which don't prepare themselves, such as Dapper or Entity Framework Core ( #1237 ). See this blog post for more info . The internal I/O system has been overhauled to continue supporting sync and async I/O, but with a vastly better coding model. This should eliminate most protocol sync bugs, and make it much easier to maintain and write new type handlers ( #1326 ). Kerberos login (\"integrated security\") is now support on Linux/Mac ( #1079 ). Support for System.Transactions and distributed transactions has been rewritten, and should have fewer problems than before ( #122 ). Performance counters have been implemented, similar to what SqlClient provides . ( #619 ). The Visual Studio integration extension (DDEX) has been rewritten for a much better installation experience, and includes some new features as well ( #1407 ). If your application attempts to make use of more than one connection at the same time, an \"operation already in progress\" was thrown. This exception now provides more information to help you track down the bug ( #1248 ). Many other small changes have been made, especially with regards to performance. Here's the full list . Breaking Changes from 3.1 Connections can no longer be constructed with NpgsqlConnectionStringBuilder - only plain string connection strings are supported ( #1415 ). The Buffer Size connection string parameter has been replaced by Read Buffer Size and Write Buffer Size . Contributors Thank you very much to the following people who have contributed to the individual 3.2.x. releases. Milestone 3.2.8 Contributor Assigned issues @roji 4 @Brar 2 @ErikEJ 1 @YohDeadfall 1 Milestone 3.2.7 Contributor Assigned issues @roji 4 @erwaller 1 Milestone 3.2.6 Contributor Assigned issues @roji 8 Milestone 3.2.5 Contributor Assigned issues @roji 4 Milestone 3.2.4.1 Contributor Assigned issues @roji 1 Milestone 3.2.4 Contributor Assigned issues @roji 3 Milestone 3.2.3 Contributor Assigned issues @roji 9 @funny-falcon 1 @jlareo 1 @odiernod 1 Milestone 3.2.2 Contributor Assigned issues @roji 11 @kurtschelfthout 2 @Emill 1 Milestone 3.2.1 Contributor Assigned issues @roji 7 Milestone 3.2 Contributor Assigned issues @roji 33"
  },
  "doc/release-notes/4.0.html": {
    "href": "doc/release-notes/4.0.html",
    "title": "Npgsql 4.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 4.0 Release Notes Npgsql 4.0 is out and available at nuget.org. This is a major version with significant changes, upgrade with care, consult the breaking changes section below and test well before deploying to production. A special thanks goes out to @YohDeadfall for his many contributions and reviews. Thanks also (alphabetically) to @austindrenski, @Brar, @kspeakman, @rwasef1830, @shortspider, @StillLearnin, @uhayat for their valuable contributions. High performance A concentrated effort has substantially increased Npgsql performance, especially in highly concurrent, low-latency scenarios. Improvements include: Rewriting of the connection pool to be lock-free, since contention started to be an issue in highly concurrent, short-lived connection scenarios ( #1839 ). Significant reduction of allocations through more recycling and other techniques. New API for generically providing parameters, avoiding boxing of value types ( #1639 ). Avoiding numerous internal async calls where they weren't needed. ... many others In round 16 of the TechEmpower benchmark, .NET Core/ASP.NET Core came in 7th place running with Npgsql , making it one of the fastest mainstream web stacks available - see this blog post for more info . Please let us know how the new version works for you - both positive and negative comments are welcome. If you're interested in Npgsql performance and haven't yet seen the performance page , it's a good opportunity to check it out (it's valid also for 3.2 users). Improved spatial support (PostGIS) Previous versions have allowed basic usage of PostGIS's spatial types via built-in Npgsql types, which were limited in many ways. Thanks to a new plugin infrastructure, you can now use the Npgsql.NetTopologySuite plugin, which maps PostGIS types to the NetTopologySuite spatial library's types. NetTopologySuite's types are more complete, and support a variety of spatial operations and conversions you can perform after loading your spatial data from PostgreSQL. If you prefer to use JSON for your spatial types, the Npgsql.GeoJSON plugin maps PostGIS types to GeoJSON.NET types . GeoJSON is a standard JSON format for spatial data. Finally, if you prefer to use the previous Npgsql types (e.g. PostgisPoint ), these are available via the Npgsql.LegacyPostgis plugin. Thanks to @YohDeadfall for implementing both the NetTopologySuite and GeoJSON plugins. NodaTime date/time support NodaTime is a powerful alternative to .NET's built-in date/time types, such as DateTime . The built-in types are flawed in many ways: they have problematic support for timezones, don't have a date-only or time-only types, and promote problematic programming but not making the right distinctions. If your application handles dates and times in anything but the most basic way, you should seriously consider using NodaTime. To learn more read this blog post by Jon Skeet . You can now use the new Npgsql.NodaTime to have Npgsql map PostgreSQL date/time types to NodaTime types. Json.NET Another plugin, Npgsql.Json.NET , works with Newtonsoft Json.NET to automatically serialize and deserialize PostgreSQL's jsonb and json types to your objects, providing a seamless database JSON programming experience. Instead of working with strings which you have to serialize and deserialize, Npgsql does it for you. Other improvements Fix the binary COPY API to make it interact better with exceptions ( #1646 ). Npgsql better supports working with enums and composites, even without mapping them, and better supports new types introduced via plugins ( #1792 ). Better \"reflection\" capabilities. Continuing work from 3.2, Npgsql now exposes more information about PostgreSQL types, allowing you to dynamically reflect on columns types returned by queries, or required as parameters ( #1276 , #1779 ). Derive parameters for queries. You can now also use NpgsqlCommandBuilder to dynamically understand which parameters and types are required for arbitrary queries (previously supported only for functions) ( #1698 , thanks @Brar!). Allow reading a single character from a PostgreSQL text column ( #1188 ). Decimals read from PostgreSQL will now have the correct scale ( #1925 ). Thanks @StillLearnin and @YohDeadfall. In addition to more documentation, several blog posts are planned to explain the above in more details (to be announced on @shayrojansky ). Breaking changes from 3.2 Caution The date/time behavior has changed in the following ways: DateTime is always sent as timestamp by default, regardless of its kind. You can still specify NpgsqlDbType.TimestampTz , in which case local DateTime gets converted to UTC before sending. When reading timestamptz as a DateTimeOffset , the machine local offset will be used. Previously a DateTimeOffset in UTC was returned. It is no longer possible to read or write DateTimeOffset as timestamp , only as timestamptz . Caution The API for binary import (COPY IN) has changed substantially in a breaking way, and code from 3.2 will not work as-is on 4.0. You must now call NpgsqlBinaryImporter.Complete() to save your imported data; not doing so will roll the operation back. NpgsqlBinaryImporter.Cancel() has been removed - simply closing/disposing the importer will implicitly cancel the import. This is similar to how TransactionScope works and is necessary to prevent accidental commit of data on exception. See #1646 . Caution If you're using decimal/numeric numbers (not floating-point), there's a chance your data needs to be fixed (previous versions incorrectly inserted a scale larger than 28, which is the maximum allowed by .NET decimal ). If you're having trouble reading data previously inserted by Npgsql, consider running this fixup code . If your data really does contain more than 28/29 fractional digits and you need to keep that precision, see the workarounds proposed in this comment for loading these values. .NET Standard 1.3 is no longer supported. .NET Standard 2.0 is the lowest supported version. Npgsql used to use its own internal TLS/SSL due to issues with some server. As these issues have been resolved, the standard .NET SslStream is now used by default ( #1482 ), but you can still set Use SSL Stream=false to keep using the internal implementation (please report why you need this, as it's likely the internal implementation will be removed in a future release). The reader instances returned by NpgsqlCommand.ExecuteReader() are now recycled, to reduce memory allocations ( #1649 ). You should not keep a reference or interact with a reader after its command has been disposed (such interaction was limited in any case). The Min Pool Size parameter will no longer make the pool create new connections internally - it will only have an effect on how many connections are pruned. Previously, in various points the pool would check if the current number of connections was below Min Pool Size , and if so, automatically created new ones - this no longer happens. Parameter types have become more strict. Previous versions allowed to you pass arbitrary value types, such as writing CLR string to int columns, or anything that implemented IConvertible. Although some implicit conversions are still supported (e.g. long -> int, short -> int), some have been removed. Data type names returned from NpgsqlDataReader.GetDataTypeName() and other APIs are now more standards-conforming (e.g. integer[] instead of _int4 ), and properly include type modifiers (e.g. character varying(10) ) ( #1919 ). NpgsqlParameter.EnumType and NpgsqlParameter.SpecificType have been removed. See Composites and Enums for more details. Parameter names are no longer trimmed, set your names to the exact parameter name specified in your SQL. If a parameter's name isn't set, it will no longer default to Parameter1, Parameter2, etc. The following APIs \"connection capability\" APIs have been removed from NpgsqlConnection: UseConformantStrings , SupportsEStringPrefix , UseSslStream . The default name translator, NpgsqlSnakeCaseNameTranslator , has been changed to handle acronyms better. Given the property name IsJSON , the old translator algorithm would output is_j_s_o_n , while the new outputs is_json . To revert back to the old algorithm, create a NpgsqlSnakeCaseNameTranslator instance with legacyMode: true and pass it when calling the MapComposite and MapEnum methods. If you are reading tables as composites ( #990 ), you will have to add the new Load Table Composites to your connection string. NpgsqlConnection.GetSchema() will no longer return system tables (i.e. tables in schemas pg_catalog and information_schema ), #1831 . You may no longer have multiple streams or text readers open on a reader (this was previously supported with non-sequential readers). Accessing a new column closes any open stream or text reader. The DateTimeOffset instances returned for PostgreSQL timetz now have their date set to 0001-01-02 instead of the previous 0001-01-01 ( #1924 ). Contributors Thank you very much to the following people who have contributed to the individual 4.0.x. releases. Milestone 4.0.9 Contributor Assigned issues @roji 2 @YohDeadfall 1 Milestone 4.0.8 Contributor Assigned issues @roji 2 @romanov-is-here 1 @thetranman 1 @YohDeadfall 1 Milestone 4.0.7 Contributor Assigned issues @roji 4 @aspaw 1 Milestone 4.0.6 Contributor Assigned issues @roji 2 @austindrenski 1 @zabulus 1 Milestone 4.0.5 Contributor Assigned issues @roji 6 @YohDeadfall 5 @austindrenski 1 Milestone 4.0.4 Contributor Assigned issues @roji 6 @YohDeadfall 3 @austindrenski 1 Milestone 4.0.3 Contributor Assigned issues @roji 6 @YohDeadfall 3 Milestone 4.0.2 Contributor Assigned issues @roji 2 @YohDeadfall 1 Milestone 4.0.11 Contributor Assigned issues @manandre 1 @roji 1 @YohDeadfall 1 Milestone 4.0.10 Contributor Assigned issues @kYann 1 @roji 1 Milestone 4.0.1 Contributor Assigned issues @roji 3 @austindrenski 2 @YohDeadfall 2 Milestone 4.0 Contributor Assigned issues @roji 34 @YohDeadfall 6 @Brar 1 @funny-falcon 1"
  },
  "doc/release-notes/4.1.html": {
    "href": "doc/release-notes/4.1.html",
    "title": "Npgsql 4.1 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 4.1 Release Notes Npgsql 4.1 is out and available at nuget.org. New Features The major new features of 4.1 are: Support for reading and writing your types as JSON via the new, high-perf System.Text.Json API ( #2306 ). Support for the new async methods introduced in .NET Standard 2.1 ( #2481 ). Expose performance statistics via the new .NET event counters ( #1725 ). Async support for binary imports and exports ( #1632 ). Easier and PostgreSQL standard ways to provide client certificates for authentication ( #2129 ). Many other small improvements and performance optimizations have been introduced as well - you can track progress here . Breaking changes from 4.0 .NET Framework 4.5, 4.5.1 and 4.5.2 are no longer supported. .NET Framework 4.6.1 and .NET Standard 2.0 are the lowest supported versions. The spatial plugin, Npgsql.NetTopologySuite, has been updated to depend on NetTopologySuite 2.0.0, which is a major version introducing breaking changes. Specifically, EF Core 3.0 is the first version supporting NetTopologySuite 2.0.0; it is not possible to use EF Core 2.x with the new version of Npgsql.NetTopologySuite. The UseSslStream property of NpgsqlConnectionStringBuilder is now marked as Obselete . SslStream is always used. A fix was done to Npgsql's snake case naming converter ( #2152 ); this could break code that relies on the previous conversion logic. Contributors Thank you very much to the following people who have contributed to the individual 4.1.x. releases. Milestone 4.1.9 Contributor Assigned issues @YohDeadfall 1 Milestone 4.1.8 Contributor Assigned issues @YohDeadfall 1 Milestone 4.1.7 Contributor Assigned issues @YohDeadfall 3 @vonzshik 1 Milestone 4.1.6 Contributor Assigned issues @loop-evgeny 1 @mm3141 1 @roji 1 @vonzshik 1 @YohDeadfall 1 Milestone 4.1.5 Contributor Assigned issues @calexander3 1 @roji 1 @romanov-is-here 1 @vonzshik 1 @warcha 1 @YohDeadfall 1 Milestone 4.1.4 Contributor Assigned issues @roji 6 @YohDeadfall 6 @warcha 3 @dwat001 1 @elipatov 1 @manandre 1 @williamdenton 1 Milestone 4.1.3 Contributor Assigned issues @roji 5 @YohDeadfall 4 @NinoFloris 1 @nycdotnet 1 Milestone 4.1.2 Contributor Assigned issues @YohDeadfall 4 @NinoFloris 2 @austindrenski 1 Milestone 4.1.1 Contributor Assigned issues @roji 7 Milestone 4.1.0 Contributor Assigned issues @roji 27 @YohDeadfall 6 @austindrenski 2 @NinoFloris 2 @afkos 1 @baronfel 1 @shortspider 1 @williamdenton 1 @zabulus 1"
  },
  "doc/release-notes/5.0.html": {
    "href": "doc/release-notes/5.0.html",
    "title": "Npgsql 5.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 5.0 Release Notes Npgsql 5.0 is out and available at nuget.org. New features The full list of issues for this release is available here . PostgreSQL logical and physical replication PostgreSQL replication creating programs which receive a continuous, live stream of all updates happening in a PostgreSQL database or set of tables. It can be used for auditing purposes, continuously exporting certain (or all) changes to another database or format, or various other purposes. See the documentation for more details . This major feature was developed by @Brar , many thanks! Issue: #1520 Improved support for cancellation and timeout When the user requests cancellation (via a cancellation token or NpgsqlCommand.Cancel() ), or when the Command Timeout expires, Npgsql now takes the following steps: Contact PostgreSQL and attempt to cancel the running command. If successful, PostgreSQL immediately stops processing the command and is free to do other work. In previous versions, queries were sometimes left running on the server. If PostgreSQL cancellation isn't successful within a short time window, the network is likely down. Npgsql forcibly closes the physical connection and raises an exception, making sure the application isn't blocked. Previous support was inconsistent across cancellation and timeout, and async I/O was only partially supported. Thanks to @vonzshik for all their valuable work on this! Issue: #3166 Connection multiplexing Multiplexing is an experimental new way for the driver to handle commands and connections: user code no longer receives an exclusive physical connection from Npgsql's internal pool, but rather submits commands to be executed on any available connection. This is a much more efficient use of connections, which can lead to: Significant reduction to the number of required PostgreSQL physical connection requirements, and removing load from the server. Continued uptime even when the maximum allowed connection count has been reached. A potentially substantial performance boost on the TechEmpower benchmark (next round to be published). Multiplexing is disabled by default, is considered experimental and must be explicitly opted into. Full documentation will be available soon. Issue: #1982 Nullable references All Npgsql APIs are now fully annotated for C# nullable references ( #3120 ), in line with the new annotations in System.Data released in .NET 5.0. Support for arrays of nullable value types It is now possible to read PostgreSQL arrays as CLR arrays of nullable value types . For example, a PostgreSQL integer[] column can now be read as follows: var array = reader.GetFieldValue<int?>(0); Previously, only non-nullable value arrays were supported, and nulls were translated to the default value (e.g. 0). Thanks to @Brar for developing this feature. Issue: #443 Close connections past a certain age The Connection Lifetime connection string parameter can now be used to unconditionally close connections which have reached a certain age. Once such a connection is returned to the pool, it is destroyed and a new connection will be created if needed. This is useful in clustered configurations to force load balancing between a running server and a server just brought online, or to mitigate certain resource leaks. Thanks to @FlorianRainer for collaborating on this feature. Issue: #1810 Breaking changes Npgsql no longer targets .NET Framework 4.6.1. Since .NET Standard 2.0 is targeted, it is still possible to use Npgsql from .NET Framework applications; however, we no longer run regression tests on .NET Framework and will only fix bugs on a best-effort basis. In addition, the Visual Studio extension (VSIX) and the MSI GAC installer have been discontinued. #3269 . Npgsql targets the netcoreapp3.1 TFM instead of netcoreapp3.0 , which is out of support ( #3160 ). When command timeout occurs, Npgsql now raises an NpgsqlException wrapping a TimeoutException ( #3132 ). Previously, an NpgsqlException wrapping an IOException was raised. Similarly, when cancellation occurs, Npgsql now raises an OperationCanceledException when a command is cancelled (both via an async cancellation token, and via NpgsqlCommand.Cancel() ). Previously, NpgsqlCommand.Cancel caused a PostgresException to be raised instead. When reading PostgreSQL arrays, if a null value is being read into a CLR arrays of a non-nullable value type, an exception is now thrown ( #443 ). Previously, the default value was populated instead. It is now possible to read arrays of nullable value types instead. The NpgsqlTransaction.IsCompleted property has been removed. The application must itself track when a transaction is committed or rolled back. Support for unmapped PostgreSQL composite types has been removed ( #2403 ). The ordering in which Npgsql checks alternative password sources has changed ( #2695 , #2657 ). This only affects applications which omit the password from the connection string. If the connection string specifies a PGPASS file, Npgsql now throws if that file doesn't exist ( #2694 ). The TcpKeepAliveTime and TcpKeepAliveInterval connection string parameters are now expressed in seconds instead of milliseconds ( #1936 ). The NpgsqlConnection.GetSchema() API now returns all indexes in the database ( 2958 ). Previously, only indexes in the search_path were returned. NpgsqlOperationInProgressException now inherits from NpgsqlException . NpgsqlBinaryImporter.Complete() has been changed to return a ulong reporting the number of imported rows ( #2112 ). The Npgsql.RawPostgis plugin has been discontinued ( #3201 ). Npgsql now allows any field to be read as raw binary data, so the plugin is no longer necessary. ~Support for non-standard-conforming strings has been dropped ( #2931 ).~ Support for non-standard-confirming strings has been restored in 5.0.1 (except for multiplexing). Npgsql no longer supports SASL authentication with PgBouncer below 1.12. Contributors Thank you very much to the following people who have contributed to the individual 5.0.x. releases. Milestone 5.0.14 Contributor Assigned issues @vonzshik 1 Milestone 5.0.11 Contributor Assigned issues @vonzshik 4 @aromaa 1 @kislovs 1 @roji 1 Milestone 5.0.10 Contributor Assigned issues @vonzshik 11 @roji 5 @Brar 1 Milestone 5.0.7 Contributor Assigned issues @vonzshik 8 @roji 4 @Brar 1 @chrisdcmoore 1 Milestone 5.0.5 Contributor Assigned issues @vonzshik 6 @roji 3 Milestone 5.0.4 Contributor Assigned issues @vonzshik 5 @roji 2 @Brar 1 @neyromant 1 @YohDeadfall 1 Milestone 5.0.3 Contributor Assigned issues @baal2000 1 @roji 1 @vonzshik 1 Milestone 5.0.2 Contributor Assigned issues @vonzshik 4 @roji 2 @Brar 1 @cime 1 @YohDeadfall 1 Milestone 5.0.1.1 Contributor Assigned issues @vonzshik 3 @roji 2 @YohDeadfall 1 Milestone 5.0.0 Contributor Assigned issues @roji 34 @vonzshik 19 @YohDeadfall 16 @Brar 7 @warcha 5 @manandre 2 @ch-asimakopoulos 1 @chrisdcmoore 1 @FlorianRainer 1 @NinoFloris 1 @russellfoster 1 @TwentyFourMinutes 1"
  },
  "doc/release-notes/6.0.html": {
    "href": "doc/release-notes/6.0.html",
    "title": "Npgsql 6.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 6.0 Release Notes Npgsql version 6.0 has been released and is available on nuget. Npgsql 6.0 brings some major breaking changes and is not a simple in-place upgrade. Carefully read the breaking change notes below and upgrade with care. New features The full list of issues for this release is available here . Multiple hosts, load balancing and failover Npgsql now includes first-class support for managing connections to multiple PostgreSQL servers, unlocking both load balancing for better performance and failover for better reliability ( #732 ). This long-awaited feature is an important part of using PostgreSQL in scalable and mission-critical environments. For example, consider the following connection string: Host=server1,server2,server3,server4,server5;Username=test;Password=test;Load Balance Hosts=true;Target Session Attributes=prefer-standby This will make Npgsql load balance connections across 5 different servers, in round-robbin fashion; connections to read-only standby servers is preferred in order to offload as much read-only load from the primary server, but if only the primary server is up it will still be used. The multiple hosts feature is highly configurable, see the full documentation for more details . Tracing with OpenTelemetry Npgsql can now report tracing data via OpenTelemetry; this can provide invaluable data on the queries your application is running, how long they're taking, and situate them in the larger context of your application. For example, you can visualize what percentage of your HTTP requests are spent waiting for your database query. The following is a sample timeline visualization of Npgsql-reported trace data, using Zipkin : See the full documentation in the diagnostics page . Timestamp rationalization and improvements Support for timestamp with time zone and timestamp without time zone has been rationalized and simplified, and aligned with PostgreSQL best practices. In particular, the \"UTC everywhere\" pattern is much better supported via the PostgreSQL timestamp with time zone type, which is the recommended way to handle timestamps. A detailed explanation is available in this blog post , below is a summary of the main improvements. UTC timestamps have been cleanly separated from non-UTC timestamps, aligning with the PostgreSQL types. The former are represented by timestamp with time zone and DateTime with Kind UTC, the latter by timestamp without time zone and DateTime with Kind Local or Unspecified. It is recommended to use UTC timestamps where possible. Npgsql no longer performs any implicit timezone conversions when reading or writing any timestamp value - the value in the database is what you get, and the machine timezone no longer plays any role when reading/writing values. Npgsql no longer supports date/time representations which cannot be fully round-tripped to the database. If it can't be fully stored as-is, you can't write it. A compatibility switch enables opting out of the new behavior, to maintain backwards compatibility. This change introduces significant breaking changes (see below), although a compatibility flag can be used to opt out and revert to the previous behavior. Other date/time improvements include: Support for the new .NET DateOnly and TimeOnly types ( #3616 ). PostgreSQL tstzrange is now mapped to NodaTime Interval , and PostgreSQL daterange is now mapped to NodaTime DateInterval . Most methods on these types are translated ( #3973 , #4070 ). DateTime.MinValue and MaxValue are now mapped to PostgreSQL -infinity and infinity by default. Raw SQL mode and new batching API It is now possible to use PostgreSQL positional parameters, allowing Npgsql to skip rewriting your SQL and send it directly to PostgreSQL ( #1042 ): SELECT * FROM blogs WHERE b.name = @p; -- Before Npgsql 6.0 SELECT * FROM blogs WHERE b.name = $1; -- Npgsql 6.0 This is more efficient, is safer (since Npgsql doesn't have to parse SQL), and aligns your SQL with the actual PostgreSQL SQL. Note that named parameters are still supported for backwards compatibility. In addition, Npgsql now supports the new ADO.NET batching API introduced in .NET 6.0 as an alternative to packing multiple statements into a single NpgsqlCommand, delimited by semicolons ( #3860 ): // Before Npgsql 6.0 var command = new NpgsqlCommand(\"SELECT 1; SELECT 2\", connection); var reader = await command.ExecuteReaderAsync(); // Npgsql 6.0 var batch = new NpgsqlBatch(connection) { BatchCommands = { new(\"SELECT 1\"), new(\"SELECT 2\") } }; var reader = await batch.ExecuteReaderAsync(); As with positional parameters, this allow Npgsql to avoid parsing and splitting your SQL which is safer and more efficient. To learn more about positional parameters and batching, see this blog post . SSL/TLS improvements Npgsql 6.0 contains some considerable improvements to encryption support, here are some highlights ( #4006 ): The Ssl Mode connection string parameter has been aligned with the standard PostgreSQL ssl_mode setting, and allows for more fine-grained choice in what to validate (see breaking change note below for SSL Mode=Require ). Support has been added for PEM client certificates when running on .NET 5.0 and above. Support for specifying a root CA certificate that isn't installed in the machine store. See the updated security and encryption docs for more details. Improved logical replication support The recently-released PostgreSQL 14 made significant improvements to logical replication, and Npgsql 6.0 already supports them! Here's a summary of the main changes ( #4050 , thanks @Brar): PG14 binary logical replication - you can now read the standard .NET types from replication data; only text was possible previously ( #4049 ). PG14 streaming replication - incremental updates for large in-progress transactions ( #4047 ) The replication API now fully streams all data, including even columns; the previous API buffered rows, leading to lots of heap allocations for big rows ( #4068 ). Unfortunately, some of the above required an API redesign, leading to some breaking changes. Other new features Support for the new .NET DateOnly and TimeOnly types ( #3616 ). Full support for the PostgreSQL 14 multirange type , mapped to arrays or lists of NpgsqlRange<T> ( #3868 ). PostgreSQL decimal can now be mapped to .NET BigInteger ( #3665 ). Bulk import/export now includes a fully asynchronous API ( #3309 ). Improved array nullability via a new connection string parameter ( #3386 ). Composite types and records can now be read by getting a nested DbDataReader through NpgsqlDataReader.GetData() ( #3558 , thanks @Emill ). This allows for efficient access without having to map composite types to .NET POCOs. Considerable work has gone in to make Npgsql more friendly to trimming/AOT, removing reflection ( #3300 ). Npgsql still isn't fully trimming-friendly, but it's getting close. Breaking changes Changes to SSL configuration (SSL Mode=Require) To validate server certificates, use SSL Mode=VerifyFull (or alternatively SSL VerifyCA ) instead of Require . To not validate server certificates (e.g. self-signed certificates), use SSL Mode=Require and Trust Server Certificate=true . In previous versions, specifying SSL Mode=Require made Npgsql validate the server certificate, but the standard PostgreSQL ssl_mode setting does not. As part of aligning Npgsql with other PostgreSQL drivers and tools, 6.0 now has SSL Mode=VerifyFull which corresponds to the previous Require behavior. Stopping validation for Require would align Npgsql with the PostgreSQL behavior, but would silently turn off validation for current users and expose them to potential security issues. As a result, we now require Trust Server Certificate=true to be specified with Require : this forces users to explicitly opt out of validation. In a future version, we'll remove the requirement to specify Trust Server Certificate for Require (and possibly the parameter itself). Major changes to timestamp mapping Note It is possible to opt out of these changes to maintain backwards compatibility, see below. Quick summary In many cases, is makes sense to store UTC timestamps in the database. To do this, migrate your timestamp without time zone columns to timestamp with time zone ( see migration notes below ), and always use either DateTime with Kind=Utc or DateTimeOffset with offset 0. If using NodaTime (recommended), use either Instant or ZonedDateTime with time zone UTC. To store non-UTC timestamps, use DateTime with Kind=Unspecified. If using NodaTime (recommended), use LocalDateTime (no explicit column configuration is required). If you're using Dapper, use version 2.0.123 or above. Earlier versions will fail when trying to send a UTC DateTime. Detailed notes The below notes will use the PostgreSQL aliases timestamptz to refer to timestamp with time zone , and timestamp to refer to timestamp without time zone . Note that timestamp with time zone represents a UTC timestamp and does not store a timezone in the database. UTC DateTime is now strictly mapped to timestamptz , while Local/Unspecified DateTime is now strictly mapped to timestamp . DateTime with Kind=UTC are now written as PostgreSQL timestamptz ; previously, DateTime was always written as timestamp . It is no longer possible to write UTC DateTime as timestamp , or Local/Unspecified DateTime as timestamptz . This was previously allowed, with Npgsql performing implicit timezone conversions. Note that if you write a UTC DateTime to a PostgreSQL timestamp column, PostgreSQL will implicitly convert the timestamptz value sent by Npgsql, performing a timezone conversion based on the TimeZone parameter. timestamptz values are now read back as DateTime with Kind=UTC, without any conversions; these were previously returned as local DateTime, converted to the local machine's timezone. When reading timestamptz values as DateTimeOffset , UTC values (offset 0) are always returned. DbType.DateTime now maps to timestamptz , not timestamp . DbType.DateTime2 continues to map to timestamp , and DbType.DateTimeOffset continues to map to timestamptz , as before. Unless you're writing cross-database applications, consider using NpgsqlDbType instead of DbType to specify precise PostgreSQL types, or simply let Npgsql infer the types by not setting either. It is no longer possible to write DateTimeOffset with offsets other than 0 (UTC), since these cannot be represented in PostgreSQL. These were previously implicitly converted to UTC before sending. It is no longer possible to read or write timetz as DateTime or TimeSpan, as these don't have a timezone. This was previously allowed, with the offset being stripped. See the EF Core provider docs for additional changes at the EF level. NodaTime changes Instant is now sent as a timestamptz value, and not as a timestamp , since they represent a universally agreed-upon point in time. To send a timestamp , use LocalDateTime . When reading timestamptz as ZonedDateTime or OffsetDateTime , UTC values are always returned. Previously, local values based on the PostgreSQL TimeZone parameter were returned. Note In most cases, storing UTC timestamps is the recommended practice. If this is what you're doing, it's strongly recommended to migrate all relevant columns from timestamp columns to timestamptz . See below for how to do this. Migrating columns from timestamp to timestamptz Migrating timestamp columns to timestamptz is a simple procedure, but care must be taken, depending on the current contents of your column. As a starting point, let's assume your existing timestamp column has the timestamp 2020-01-01 12:00:00 : SELECT \"created_on\", pg_typeof(\"created_on\") AS type FROM \"Blogs\"; Results in: created_on | type ---------------------+----------------------------- 2020-01-01 12:00:00 | timestamp without time zone The following SQL will change the column's type to timestamptz : ALTER TABLE blogs ALTER COLUMN created_on TYPE timestamp with time zone; When converting the timestamp without time zone column to timestamp with time zone , PostgreSQL will assume that existing values are local timestamps, and will convert them to UTC based on the TimeZone parameter. Performing the above query will result in something like: CreatedOn | type ------------------------+-------------------------- 2020-01-01 12:00:00+02 | timestamp with time zone This means that your new timestamptz column now contains 10:00 UTC, which is probably not what you want: if the original values were in fact UTC values, you need them to be preserved as-is, changing only the column type. To do this, set TimeZone to UTC before executing the ALTER TABLE : SET TimeZone='UTC'; ALTER TABLE blogs ALTER COLUMN created_on TYPE timestamp with time zone; This will ensure that no time zone conversions will be applied when converting the columns: CreatedOn | type ------------------------+-------------------------- 2020-01-01 14:00:00+02 | timestamp with time zone Opting out of the new timestamp mapping logic The changes described above are far-reaching, and may break applications in various ways. You can upgrade to version 6.0 but opt out of the new mapping by enabling the Npgsql.EnableLegacyTimestampBehavior AppContext switch . To do this and revert to the legacy timestamp behavior, add the following at the start of your application, before any Npgsql operations are invoked: AppContext.SetSwitch(\"Npgsql.EnableLegacyTimestampBehavior\", true); NodaTime: tstzrange and daterange are mapped to Interval and DateInterval by default When using NodaTime, reading a PostgreSQL tstzrange returns Interval instead of NpgsqlRange<Instant> ( #4070 ), and reading a PostgreSQL daterange returns DateInterval instead of NpgsqlRange<LocalDate> ( #3973 ). It is still possible to read NpgsqlRange by via reader.GetFieldValue<NpgsqlRange<Instant>> and reader.GetFieldValue<NpgsqlRange<LocalDate>> . Date/time min/max values are now converted to PostgreSQL infinity values by default PostgreSQL has special infinity and -infinity values for timestamps and dates, which are later and earlier than other value. Npgsql has supported mapping DateTime.MaxValue and MinValue to these infinity values via an Convert Infinity DateTime connection string parameter, which was disabled by default. This behavior is now on by default, since DateTime.MaxValue and MinValue are very rarely used as actual timestamps/dates, and the Convert Infinity DateTime parameter has been removed. To disable infinity conversions, add the following at the start of your application: AppContext.SetSwitch(\"Npgsql.DisableDateTimeInfinityConversions\", true); See the date/time documentation for more details. PG intervals with months/years can no longer be read as TimeSpan The PostgreSQL interval type can contain months and years, which are time units without a fixed, absolute duration (different months have different numbers of days). In contrast, .NET TimeSpan is always an absolute duration, and does not support months or years. Previously, when reading intervals as TimeSpan, Npgsql read months as 30-day units, which was incorrect and could yield wrong results. To read intervals with month/year components, consider using NodaTime's Period type, which is perfectly suited for representing intervals and is supported by Npgsql. Otherwise, you can read intervals as NpgsqlInterval , provides direct, raw access to the PostgreSQL data which Npgsql receives. Finally, if you want to continue treating months as 30-day units, consider changing your interval data in the database, so that e.g. '1 month 20 days' becomes '50 days'. NpgsqlStatement and PostgresException.Statement have been removed Npgsql versions before 6.0 exposed an NpgsqlStatement type, which contained information on individual statements within an NpgsqlCommand batch. Npgsql introduces support for the new standardized ADO.NET DbBatch type, which has numerous advantages compared to the previous support. While executing multiple statements in a single NpgsqlCommand is still supported for backwards compatibility, NpgsqlCommand no longer exposes per-statement information via NpgsqlStatement as before. Consider using the new NpgsqlBatch for all batched executions instead: it exposes the BatchCommands property which is similar to the previous Statements property. Accordingly, PostgresException.Statement has been removed, and replaced by BatchCommand which is only populated when executing via NpgsqlBatch . The default SSL Mode is now Prefer When SSL Mode isn't specified on the connection string, it used to default to Disable ; it is now Prefer . This means that SSL will be used when the server supports it, and if a custom certificate validation callback is set, failure to validate would cause the connection to fail. See the Security and encryption page for more details. The logical replication API has been redone As part of the redesign around logical replication support, some major changes to the API had to be done. Applications will have to be changed to use the new API. Arrays/lists over ranges are mapped to PG14 multiranges PostgreSQL 14 introduced a new multirange type , which is very similar to an array of ranges but supports various range-related operations efficiently. The provider now maps arrays and lists of NpgsqlRange to these new types by default. You can still read old-style arrays over ranges by explicitly specifying the type: var arrayOverRange = reader.GetFieldValue<NpgsqlRange<int>[]>(0); You can also write arrays over ranges by explicitly specifying the NpgsqlDbType : var parameter = new NpgsqlParameter { Value = new NpgsqlRange<int>[] { ... }, NpgsqlDbType = NpgsqlDbType.IntegerRange | NpgsqlDbType.Array }; DBNull no longer permitted in arrays Previously, it was possible to write an object[] containing DBNull as a way of indicating null; this is no longer supported. Instead, use C# null. Parameter name matching changed around case-sensitivity When using named parameter placeholders, Npgsql now only does a single pass to match placeholders to parameters, taking the first parameter whose name passes a case-insensitive match. Npgsql previously did two passes - a case-insensitive pass, followed by a case-sensitive one if the first pass failed to match; this was detrimental to performance in some scenarios. This behavioral change is only visible when using two parameters with names that are identical except for case; this is generally discouraged. To revert to the legacy two-pass behavior, add the following at the start of your application, before any Npgsql operations are invoked: AppContext.SetSwitch(\"Npgsql.EnableLegacyCaseInsensitiveDbParameters\", true); Note: version 6.0.0 and 6.0.1 changed parameter matching to be case-sensitive. This change was rolled back in 6.0.2 since it could lead to data loss in some scenarios. The provider-specific date/time types have been obsoleted Npgsql contains provider-specific NpgsqlDateTime , NpgsqlDate and NpgsqlTimeSpan types, which were designed to provide the same APIs as the corresponding built-in BCL types, but to support the full range of the PostgreSQL types. These types were buggy and inefficient in many ways, and have been obsoleted; they will be removed in Npgsql 7.0. Instead of the obsoleted types, use the following techniques: NodaTime can be used to interact with values which are out-of-range for the BCL types. To support values which are out-of-range for NodaTime, PostgreSQL timestamps can now be read/written as long, and dates can be read/written as int. These are the raw PostgreSQL representations, with no operations - they simply provide an \"escape hatch\" in case users need to interact with out-of-range values. For interval, a new NpgsqlInterval type has been introduced, which again contains the raw PostgreSQL data (months, days, time). Npgsql.LegacyPostgis has been removed The Npgsql.LegacyPostgis plugin, which mapped legacy Npgsql types to PostGIS, has been removed and no longer ships ( #3962 ). Use Npgsql.NetTopologySuite to work with PostGIS. Contributors Thank you very much to the following people who have contributed to the individual 5.0.x. releases. Milestone 6.0.8 Contributor Assigned issues @roji 1 @vonzshik 1 Milestone 6.0.7 Contributor Assigned issues @vonzshik 4 @roji 2 @Brar 1 Milestone 6.0.6 Contributor Assigned issues @vonzshik 3 Milestone 6.0.5 Contributor Assigned issues @roji 4 @alitas 1 @davidhunt135 1 @vonzshik 1 Milestone 6.0.4 Contributor Assigned issues @roji 13 @vonzshik 10 Milestone 6.0.3 Contributor Assigned issues @roji 8 @vonzshik 3 @Brar 2 @NinoFloris 2 Milestone 6.0.2 Contributor Assigned issues @roji 3 @NinoFloris 1 Milestone 6.0.1 Contributor Assigned issues @vonzshik 5 @roji 4 @NinoFloris 1 @zitmen 1 Milestone 6.0.0 Contributor Assigned issues @roji 42 @vonzshik 34 @Brar 7 @NinoFloris 3 @Emill 2 @manandre 2 @mdalepiane 1 @mintsoft 1 @Seltzer 1 @TwentyFourMinutes 1"
  },
  "doc/release-notes/7.0.html": {
    "href": "doc/release-notes/7.0.html",
    "title": "Npgsql 7.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 7.0 Release Notes Npgsql version 7.0 has been released and is available on nuget. New features The full list of issues for this release is available here . DbDataSource A major improvement in Npgsql 7.0 is NpgsqlDataSource , which implements the new DbDataSource abstraction in .NET System.Data. A data source represents your PostgreSQL database, and can hand out connections to it or support direct execution of SQL to it. Instead of directly instantiating an NpgsqlConnection and then executing commands against it, you now create a data source once, and then use that throughout your application: await using var dataSource = NpgsqlDataSource.Create(connectionString); // Execute a command directly against the data source, no NpgsqlConnection needed: await using var command = dataSource.CreateCommand(\"INSERT INTO some_table (some_field) VALUES (8)\"); await command.ExecuteNonQueryAsync(); // Open a connection in order to e.g. start a transaction on it: await using var connection = await dataSource.OpenConnectionAsync(); Since the data source encapsulates all the necessary configuration for connecting to a database (e.g. the connection string, authentication callbacks...), it can registered in dependency injection or passed around as needed, without needing any additional information. The new NpgsqlDataSourceBuilder also provides the ideal API point for various configuration when building a data source: var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"Host=localhost;Username=test;Password=test\"); dataSourceBuilder .UseLoggerFactory(loggerFactory) // Configure logging .UsePeriodicPasswordProvider() // Automatically rotate the password periodically .UseNodaTime(); // Use NodaTime for date/time types await using var dataSource = dataSourceBuilder.Build(); Improved logging with Microsoft.Extensions.Logging Previous versions had a custom logging implementation which required special adapters and was hard to use. Npgsql 7.0 fully supports the standard .NET Microsoft.Extensions.Logging - just provide Npgsql with your ILoggerFactory and you're ready to go. If you using ASP.NET, things are even easier with the new Npgsql.DependencyInjection , which takes care of seamlessly picking up the ASP.NET logging configuration from DI: var builder = WebApplication.CreateBuilder(args); builder.Logging.AddConsole(); builder.Services.AddNpgsqlDataSource(\"Host=localhost;Username=test;Password=test\"); For more details, see the updated logging documentation page . Support for version 3 of the logical replication protocol PostgreSQL 15 introduced improvements to logical replication, in particular around streaming large, in-progress transactions. Npgsql 7.0 adds support for improvements - see #4216 for more information (thanks @Brar !). Breaking changes CommandType.StoredProcedure now invokes procedures instead of functions When NpgsqlCommand.CommandType is set to CommandType.StoredProcedure , Npgsql now generates SQL for invoking a PostgreSQL stored procedure , and not a function , as before. To opt out of this breaking change and continue to invoke functions as before, enable the Npgsql.EnableStoredProcedureCompatMode AppContext switch as follows: AppContext.SetSwitch(\"Npgsql.EnableStoredProcedureCompatMode\", true); For context, PostgreSQL originally only supported functions, and did not support the standard SQL concept of stored procedures; because of this, CommandType.StoredProcedure was implemented to invoke functions. PostgreSQL 11 then introduced stored procedures, which have various advantages over functions in some scenarios (e.g. the ability to use transactions). The 7.0 release changes CommandType.StoredProcedure to invoke procedures as its naming suggests, and aligns Npgsql with other database providers for better compatibility. Note that with Npgsql, there is no advantage in using CommandType.StoredProcedure over simply invoking your function or procedure via SQL. Doing so is in fact recommended: // Invoke a procedure using var command1 = new NpgsqlCommand(\"CALL some_procedure($1, $2)\", connection) { // Add parameters }; // Invoke a function using var command2 = new NpgsqlCommand(\"SELECT * FROM some_function($1, $2)\", connection) { // Add parameters }; Managing type mappings at the connection level is no longer supported Previous versions of Npgsql allowed mapping custom types (enums/composites) and configuring plugins (NetTopologySuite, NodaTime) at the connection level; the type mapping change would persist only for the lifetime of the connection, and would be reverted when the connection closed. This mechanism was inefficient - connections get opened and closed a lot - and added significant maintenance burden internally. With the introduction of NpgsqlDataSource , Npgsql now has a natural API point for managing type mappings: var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"Host=localhost;Username=test;Password=test\"); dataSourceBuilder.MapEnum<MyEnum>(); dataSourceBuilder.UseNodaTime(); await using var dataSource = dataSourceBuilder.Build(); All connections handed out by the data source will use the configured type mappings. Note that managing type mappings globally via NpgsqlConnection.GlobalTypeMapper is supported as before, but has been marked as obsolete; although we do not plan on removing global type mappings any time soon, NpgsqlDataSourceBuilder is now the recommended way to manage type mappings. Global type mappings must now be done before any usage Previously, any type mapping configuration done via NpgsqlConnection.GlobalTypeMapper would take effect for any new connection opened after the change. Starting with 7.0, global type mappings must be done before the data source or pool is created. To ensure correct functioning, do any global type mappings at the very start of your program, before using any other Npgsql API. NpgsqlDataReader.Dispose no longer swallows exceptions Previously, when an unconsumed NpgsqlDataReader was disposed, any exceptions that occurred while consuming the remaining results were swallowed and Dispose completed successfully. These exceptions are no longer swallowed, and are thrown from Dispose. This also affects scenarios where NpgsqlDataReader is used in a C# using statement. In most cases in .NET, throwing from Dispose is discouraged. If the instance being disposed is used in a using statement and some exception is thrown, that exception triggers Dispose being called (as per using ), and if Dispose throws an exception of its own, then that exception bubbles up. As a result, the original exception is hidden, making it difficult to understand exactly what happened. As a result, it is common for Dispose to catch any exceptions internally and swallow them, allowing the original exception to bubble up. However, in the Npgsql case, swallowing exceptions in Dispose can have very problematic consequences. A reader can be disposed before it's entirely consumed, after only part of the result set has been read; when this happens, Npgsql consumes the rest of the result set as part of the disposal. If any errors occur past this point, then those exceptions were previously swallowed; this meant that the application could be unaware that part of the command failed, since no exception was raised. Throwing these exceptions from dispose ensures that the application is aware of any failures that occurred. For more context on this change, see the discussion in #4377 . The obsoleted NpgsqlDateTime, NpgsqlDate and NpgsqlTimeSpan have been removed NpgsqlDateTime , NpgsqlDate and NpgsqlTimeSpan were \"provider-specific\" types, designed to expose the full range of the PostgreSQL date/time types, which can represent values beyond the built-in .NET types (e.g. DateTime ). However, these types were problematic in many ways, and were seldom used. The types were obsoleted in Npgsql 6.0, and have been removed in 7.0. To deal with date/time values outside the range of the corresponding .NET types, see Date and Time Handling . NpgsqlConnection.Settings has been removed The connection's connection string is still exposed via NpgsqlConnection.ConnectionString ; this can be parsed with NpgsqlConnectionStringBuilder . Replication APIs now return UTC DateTime Previously, replication APIs returned DateTime instances of Kind Unspecified ; this has been changed to Utc to reflect the actual type of data sent by PostgreSQL. Contributors Thank you very much to the following people who have contributed to the individual 5.0.x. releases. Milestone 7.0.0 Contributor Assigned issues @roji 37 @Brar 9 @vonzshik 4 @0xced 1 @baal2000 1"
  },
  "doc/replication.html": {
    "href": "doc/replication.html",
    "title": "Logical and Physical Replication | Npgsql Documentation",
    "keywords": "Logical and Physical Replication Note This feature was introduced in Npgsql 5.0. Replication allows a client to receive a continuous stream of updates from a PostgreSQL database, providing a near-realtime view of all changes as they occur. While this feature was originally developed to keep PostgreSQL standby replicas in sync with a primary, it can be used by arbitrary applications to get an update feed from a PostgreSQL server. Npgsql provides a 1st-class API for writing .NET replication clients, detailed below. While PostgreSQL supports both logical and physical replication, in the majority of cases .NET applications will want to use logical replication. Warning Replication support is new in Npgsql and should be considered a bit experimental. Some APIs may change based on user feedback. Logical replication Logical replication is a means to stream messages generated by PostgreSQL logical decoding plugins to a client. The default implementation that is used by PostgreSQL itself to perform logical server to server replication is the Logical Streaming Replication Protocol which uses the pgoutput plugin, but PostgreSQL supports streaming messages generated by other plugins too and Npgsql supports receiving those. General setup To set up logical replication, follow the quick setup instructions in the PostgreSQL docs (note that a SUBSCRIPTION isn't required since the client isn't PostgreSQL): Enable logical replication in your postgresql.conf file: wal_level = logical Set up a replication user in your pg_hba.conf file: host replication repuser 0.0.0.0/0 md5 The user repuser must exist in your cluster and either be a superuser or have the replication attribute set. See CREATE ROLE docs . Logical Streaming Replication Protocol (pgoutput plugin) The modern, recommended way to perform logical replication was introduced in PostgreSQL 10 - see the PostgreSQL documentation . This method, using the built-in pgoutput replication plugin, streams efficient, binary messages to represent database updates such as INSERT, UPDATE and DELETE ( see the full list ); Npgsql exposes these messages as an IAsyncEnumerable which can easily be enumerated and consumed. Create a publication , which defines the group of tables in the database you wish to replicate: CREATE PUBLICATION blog_pub FOR TABLE blogs; Create a replication slot, which will hold the state of the replication stream: SELECT * FROM pg_create_logical_replication_slot('blog_slot', 'pgoutput'); If your application goes down, the slot persistently records the last data streamed to it, and allows resuming the application at the point where it left off. At this point, everything is ready to start replicating! Create this simple .NET program with Npgsql: await using var conn = new LogicalReplicationConnection(\"<connection_string>\"); await conn.Open(); var slot = new PgOutputReplicationSlot(\"blog_slot\"); // The following will loop until the cancellation token is triggered, and will print message types coming from PostgreSQL: var cancellationTokenSource = new CancellationTokenSource(); await foreach (var message in conn.StartReplication( slot, new PgOutputReplicationOptions(\"blog_pub\", 1), cancellationTokenSource.Token)) { Console.WriteLine($\"Received message type: {message.GetType().Name}\"); // Always call SetReplicationStatus() or assign LastAppliedLsn and LastFlushedLsn individually // so that Npgsql can inform the server which WAL files can be removed/recycled. conn.SetReplicationStatus(message.WalEnd); } For example, if you insert a new row into your blogs table, you should see the following output: Received message type: BeginMessage Received message type: RelationMessage Received message type: InsertMessage Received message type: CommitMessage Warning Npgsql internally recycles the message instances it hands out. It is an error to use a message received from StartReplication once the next message has been read. The above was just a minimal \"getting started\" guide for logical replication - many additional configuration options and modes exist as well. Consult the PostgreSQL documentation for more details. Test decoding (test_decoding plugin) An additional logical replication plugin which Npgsql supports is test_decoding . This plugin outputs textual representations of events, which are less efficient and need to be parsed; it is meant for testing that replication works rather than for building robust production apps. However, it can still be useful in some scenarios, especially in older PostgreSQL versions where pgoutput wasn't yet introduced. To use test_decoding , first create a logical replication slot with test_decoding as the plugin type. SELECT * FROM pg_create_logical_replication_slot('blog_slot', 'test_decoding'); After that use the following: await using var conn = new LogicalReplicationConnection(\"Host=localhost;Username=test;Password=test\"); await conn.Open(); var slot = new TestDecodingReplicationSlot(\"blog_slot\"); // The following will loop until the cancellation token is triggered, and will print message types coming from PostgreSQL: var cancellationTokenSource = new CancellationTokenSource(); await foreach (var message in conn.StartReplication(slot, cancellationTokenSource.Token)) { Console.WriteLine($\"Message: {message.Data}\"); // Always call SetReplicationStatus() or assign LastAppliedLsn and LastFlushedLsn individually // so that Npgsql can inform the server which WAL files can be removed/recycled. conn.SetReplicationStatus(message.WalEnd); } Inserting a row will produce the following string messages: Message: BEGIN 230413 Message: table public.blogs: INSERT: id[integer]:2 name[text]:'blog1' Message: COMMIT 230413 Warning Npgsql internally recycles the message instances it hands out. It is an error to use a message received from StartReplication once the next message has been read. Physical replication Finally, PostgreSQL also supports physical replication, which streams raw block data rather than logical events on changes. While useful for synchronizing PostgreSQL replicas and supported by Npgsql, this mode is unlikely to be useful for a typical .NET program client."
  },
  "doc/security.html": {
    "href": "doc/security.html",
    "title": "Security and Encryption | Npgsql Documentation",
    "keywords": "Security and Encryption Password management The simplest way to log into PostgreSQL is by specifying a Username and a Password in your connection string. Depending on how your PostgreSQL is configured (in the pg_hba.conf file), Npgsql will send the password in MD5 or in cleartext (not recommended). If a Password is not specified and your PostgreSQL is configured to request a password, Npgsql will look for a standard PostgreSQL password file . If you specify the Passfile connection string parameter, the file it specifies will be used. If that parameter isn't defined, Npgsql will look under the path taken from PGPASSFILE environment variable. If the environment variable isn't defined, Npgsql will fall back to the system-dependent default directory which is $HOME/.pgpass for Unix and %APPDATA%\\postgresql\\pgpass.conf for Windows. Auth token rotation and dynamic password In some cloud scenarios, logging into PostgreSQL is done with an auth token that is rotated every time interval (e.g. one hour). Starting with version 7.0, Npgsql has a built-in periodic password provider mechanism, which allows refreshing the password with zero effort: var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UsePeriodicPasswordProvider( (settings, cancellationToken) => /* async code to fetch the new access token */, TimeSpan.FromMinutes(55), // Interval for refreshing the token TimeSpan.FromSeconds(5)); // Interval for retrying after a refresh failure await using var dataSource = NpgsqlDataSource.Create(connectionString); This API allows you to provide a minimal async code fragment for fetching the latest auth token, and have Npgsql take care of running it for you as needed. If, instead, you prefer to manage this yourself, you can simply inject a new password at any time into a working data source: dataSource.Password = <new password>; Any physical connection that's opened after this point will use the newly-injected password. Encryption (SSL/TLS) By default PostgreSQL connections are unencrypted, but you can turn on SSL/TLS encryption if you wish. First, you have to set up your PostgreSQL to receive SSL/TLS connections as described here . Once that's done, specify SSL Mode in your connection string as detailed below. Version 6.0+ Older versions Starting with 6.0, the following SSL Mode values are supported (see the PostgreSQL docs for more details): SSL Mode Eavesdropping protection Man-in-the-middle protection Statement Disable No No I don't care about security, and I don't want to pay the overhead of encryption. Allow Maybe No I don't care about security, but I will pay the overhead of encryption if the server insists on it. Prefer (default) Maybe No I don't care about encryption, but I wish to pay the overhead of encryption if the server supports it. Require 1 Yes No I want my data to be encrypted, and I accept the overhead. I trust that the network will make sure I always connect to the server I want. VerifyCA Yes Depends on CA policy I want my data encrypted, and I accept the overhead. I want to be sure that I connect to a server that I trust. VerifyFull Yes Yes I want my data encrypted, and I accept the overhead. I want to be sure that I connect to a server I trust, and that it's the one I specify. 1 SSL Mode=Require currently requires explicitly setting Trust Server Certificate=true as well (this requirement will be removed in a future version). This combination should be used with e.g. self-signed certificates, which don't need to be validated. As an alternative to Trust Server Certificate=true , provide your custom certificate validation via NpgsqlConnection.UserCertificateValidationCallback . The default mode in 6.0+ is Prefer , which allows SSL but does not require it, and does not validate certificates. Versions prior to 6.0 supported the following SSL Mode values: SSL Mode Eavesdropping protection Man-in-the-middle protection Statement Disable No No I don't care about security, and I don't want to pay the overhead of encryption. Prefer Maybe Maybe I don't care about encryption, but I wish to pay the overhead of encryption if the server supports it. Require Yes Yes I want my data encrypted, and I accept the overhead. I want to be sure that I connect to a server I trust, and that it's the one I specify. The default mode prior to 6.0 was Disable . To disable certificate validation when using Require , set Trust Server Certificate to true; this allows connecting to servers with e.g. self-signed certificates, while still requiring encryption. Advanced server certificate validation If the root CA of the server certificate isn't installed in your machine's CA store, validation will fail. Either install the certificate in your machine's CA store, or point to it via the Root Certificate connection string parameter or via the PGSSLROOTCERT environment variable. Note that Npgsql does not perform certificate revocation validation by default, since this is an optional extension not implemented by all providers and CAs. To turn on certificate revocation validation, specify Check Certificate Revocation=true on the connection string. Finally, if the above options aren't sufficient for your scenario, you can call <xref:Npgsql.NpgsqlDataSourceBuilder.UseUserCertificateValidationCallback?displayProperty=nameWithType> to provide your custom server certificate validation logic (this gets set on the underlying .NET SslStream ). Client certificates PostgreSQL may be configured to require valid certificates from connecting clients for authentication. Npgsql automatically sends client certificates specified in the following places: The SSL Certificate connection string parameter. The PGSSLCERT environment variable. The default locations of ~/.postgresql/postgresql.crt (on Unix) or %APPDATA%\\postgresql\\postgresql.crt (on Windows) To provide a password for a client certificate, set either the SSL Password (6.0 and higher) or Client Certificate Key (5.0 and lower) connection string parameter. Finally, you can call <xref:Npgsql.NpgsqlDataSourceBuilder.UseClientCertificate?displayProperty=nameWithType>, <xref:Npgsql.NpgsqlDataSourceBuilder.UseClientCertificates> or <xref:Npgsql.NpgsqlDataSourceBuilder.UseClientCertificatesUseClientCertificatesCallback> to programmatically provide a certificate, multiple certificates or a callback which returns certificates (this works like on the underlying .NET SslStream ). Note Npgsql supports .PFX and .PEM certificates starting with 6.0. Previously, only .PFX certificates were supported. Integrated Security (GSS/SSPI/Kerberos) Logging in with a username and password may not be ideal, since your application must have access to your password, and raise questions around secret management. An alternate way of authenticating is \"Integrated Security\", which uses GSS or SSPI to negotiate Kerberos. The advantage of this method is that authentication is handed off to your operating system, using your already-open login session. Your application never needs to handle a password. You can use this method for a Kerberos login, Windows Active Directory or a local Windows session. Note that since 3.2, this method of authentication also works on non-Windows platforms. Instructions on setting up Kerberos and SSPI are available in the PostgreSQL auth methods docs . Some more instructions for SSPI are available here . Once your PostgreSQL is configured correctly, simply include Integrated Security=true in your connection string and drop the Password parameter. However, Npgsql must still send a username to PostgreSQL. If you specify a Username connection string parameter, Npgsql will send that as usual. If you omit it, Npgsql will attempt to detect your system username, including the Kerberos realm. Note that by default, PostgreSQL expects your Kerberos realm to be sent in your username (e.g. username@REALM ); you can have Npgsql detect the realm by setting Include Realm to true in your connection string. Alternatively, you can disable add include_realm=0 in your PostgreSQL's pg_hba.conf entry, which will make it strip the realm. You always have the possibility of explicitly specifying the username sent to PostgreSQL yourself."
  },
  "doc/types/basic.html": {
    "href": "doc/types/basic.html",
    "title": "Supported Types and their Mappings | Npgsql Documentation",
    "keywords": "Supported Types and their Mappings The following lists the built-in mappings when reading and writing CLR types to PostgreSQL types. Note that in addition to the below, enum and composite mappings are documented in a separate page . Note also that several plugins exist to add support for more mappings (e.g. spatial support for PostGIS), these are listed in the Types menu. Read mappings The following shows the mappings used when reading values. The default type is returned when using NpgsqlCommand.ExecuteScalar() , NpgsqlDataReader.GetValue() and similar methods. You can read as other types by calling NpgsqlDataReader.GetFieldValue<T>() . Provider-specific types are returned by NpgsqlDataReader.GetProviderSpecificValue() . PostgreSQL type Default .NET type Non-default .NET types boolean bool smallint short byte, sbyte, int, long, float, double, decimal integer int byte, short, long, float, double, decimal bigint long long, byte, short, int, float, double, decimal real float double double precision double numeric decimal byte, short, int, long, float, double, BigInteger (6.0+) money decimal text string char[] character varying string char[] character string char[] citext string char[] json string char[] jsonb string char[] xml string char[] uuid Guid bytea byte[] timestamp without time zone DateTime (Unspecified) timestamp with time zone DateTime (Utc 1 ) DateTimeOffset (Offset=0) 2 date DateTime DateOnly (6.0+) time without time zone TimeSpan TimeOnly (6.0+) time with time zone DateTimeOffset interval TimeSpan 3 NpgsqlInterval cidr (IPAddress, int) NpgsqlInet inet IPAddress NpgsqlInet, (IPAddress, int) macaddr PhysicalAddress tsquery NpgsqlTsQuery tsvector NpgsqlTsVector bit(1) bool BitArray bit(n) BitArray bit varying BitArray point NpgsqlPoint lseg NpgsqlLSeg path NpgsqlPath polygon NpgsqlPolygon line NpgsqlLine circle NpgsqlCircle box NpgsqlBox hstore Dictionary<string, string> oid uint xid uint cid uint oidvector uint[] name string char[] (internal) char char byte, short, int, long geometry (PostGIS) PostgisGeometry record object[] composite types T range types NpgsqlRange<TElement> multirange types (PG14) NpgsqlRange<TElement>[] enum types TEnum array types Array (of element type) 1 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), reading a timestamp with time zone returns a Local DateTime instead of Utc. See the breaking change note for more info . 2 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), reading a timestamp with time zone as a DateTimeOffset returns a local offset based on the timezone of the server where Npgsql is running. 3 PostgreSQL intervals with month or year components cannot be read as TimeSpan. Consider using NodaTime's Period type, or NpgsqlInterval . The Default .NET type column specifies the data type NpgsqlDataReader.GetValue() will return. NpgsqlDataReader.GetProviderSpecificValue will return a value of a data type specified in the Provider-specific type column, or the Default .NET type if there is no specialization. Finally, the third column specifies other CLR types which Npgsql supports for the PostgreSQL data type. These can be retrieved by calling NpgsqlDataReader.GetBoolean() , GetByte() , GetDouble() etc. or via GetFieldValue<T>() . Write mappings There are three rules that determine the PostgreSQL type sent for a parameter: If the parameter's NpgsqlDbType is set, it is used. If the parameter's DataType is set, it is used. If the parameter's DbType is set, it is used. If none of the above is set, the backend type will be inferred from the CLR value type. PostgreSQL type Default .NET types Non-default .NET types NpgsqlDbType DbType boolean bool Boolean Boolean smallint short, byte, sbyte Smallint Int16 integer int Integer Int32 bigint long Bigint Int64 real float Real Single double precision double Double Double numeric decimal, BigInteger (6.0+) Numeric Decimal, VarNumeric money decimal Money Currency text string, char[], char Text String, StringFixedLength, AnsiString, AnsiStringFixedLength character varying string, char[], char Varchar character string, char[], char Char citext string, char[], char Citext json string, char[], char Json jsonb string, char[], char Jsonb xml string, char[], char Xml uuid Guid Uuid bytea byte[] ArraySegment<byte> Bytea Binary timestamp with time zone DateTime (Utc) 1 , DateTimeOffset TimestampTz DateTime 2 , DateTimeOffset timestamp without time zone DateTime (Local/Unspecified) 1 Timestamp DateTime2 date DateOnly (6.0+) DateTime Date Date time without time zone TimeOnly (6.0+) TimeSpan Time Time time with time zone DateTimeOffset TimeTz interval TimeSpan NpgsqlInterval Interval cidr ValueTuple<IPAddress, int>, IPAddress Cidr inet IPAddress ValueTuple<IPAddress, int> Inet macaddr PhysicalAddress MacAddr tsquery NpgsqlTsQuery TsQuery tsvector NpgsqlTsVector TsVector bit bool, BitArray, string Bit bit varying BitArray bool, BitArray, string Varbit point NpgsqlPoint Point lseg NpgsqlLSeg LSeg path NpgsqlPath Path polygon NpgsqlPolygon Polygon line NpgsqlLine Line circle NpgsqlCircle Circle box NpgsqlBox Box hstore IDictionary<string, string> Hstore oid uint Oid xid uint Xid cid uint Cid oidvector uint[] Oidvector name string, char[], char Name (internal) char byte InternalChar composite types Pre-mapped type Composite range types NpgsqlRange<TSubtype> Range | NpgsqlDbType enum types Pre-mapped type Enum array types T[], List<T> Array | NpgsqlDbType 1 UTC DateTime is written as timestamp with time zone , Local/Unspecified DateTimes are written as timestamp without time zone . In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), DateTime is always written as timestamp without time zone . 2 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), DbType.DateTime is mapped to timestamp without time zone . Notes when using Range and Array, bitwise-or NpgsqlDbType.Range or NpgsqlDbType.Array with the child type. For example, to construct the NpgsqlDbType for a int4range , write NpgsqlDbType.Range | NpgsqlDbType.Integer . To construct the NpgsqlDbType for an int[] , write NpgsqlDbType.Array | NpgsqlDbType.Integer . For information about enums, see the Enums and Composites page ."
  },
  "doc/types/datetime.html": {
    "href": "doc/types/datetime.html",
    "title": "Date and Time Handling | Npgsql Documentation",
    "keywords": "Date and Time Handling Warning Npgsql 6.0 introduced some important changes to how timestamps are mapped, see the release notes for more information . Note The recommended way of working with date/time types is the NodaTime plugin : the NodaTime types are much better-designed, avoid the flaws in the built-in BCL types, and are fully supported by Npgsql. Handling date and time values usually isn't hard, but you must pay careful attention to differences in how the .NET types and PostgreSQL represent dates. It's worth reading the PostgreSQL date/time type documentation to familiarize yourself with PostgreSQL's types. .NET types and PostgreSQL types The .NET and PostgreSQL types differ in the resolution and range they provide; the .NET type usually have a higher resolution but a lower range than the PostgreSQL types: PostgreSQL type Precision/Range .NET Native Type Precision/Range timestamp with time zone 1 microsecond, 4713BC-294276AD DateTime (UTC) 100 nanoseconds, 1AD-9999AD timestamp without time zone 1 microsecond, 4713BC-294276AD DateTime (Unspecified) 100 nanoseconds, 1AD-9999AD date 1 day, 4713BC-5874897AD DateOnly (6.0+), DateTime 100 nanoseconds, 1AD-9999AD time without time zone 1 microsecond, 0-24 hours TimeOnly (6.0+), TimeSpan 100 nanoseconds, -10,675,199 - 10,675,199 days time with time zone 1 microsecond, 0-24 hours DateTimeOffset (ignore date) 100 nanoseconds, 1AD-9999AD interval 1 microsecond, -178000000-178000000 years TimeSpan 100 nanoseconds, -10,675,199 - 10,675,199 days For almost all applications, the range of the .NET native types (or the NodaTime types) are more than sufficient. In the rare cases where you need to access values outside these ranges, timestamps can be accessed as long , dates as int , and intervals as NpgsqlInterval . These are the raw PostgreSQL binary representations of these type, so you'll have to deal with encoding/decoding yourself. Timestamps and timezones Warning A common mistake is for users to think that the PostgreSQL timestamp with time zone type stores the timezone in the database. This is not the case: only a UTC timestamp is stored. There is no single PostgreSQL type that stores both a date/time and a timezone, similar to .NET DateTimeOffset . To store a timezone in the database, add a separate text column containing the timezone ID. In PostgreSQL, timestamp with time zone represents a UTC timestamp, while timestamp without time zone represents a local or unspecified time zone. Starting with 6.0, Npgsql maps UTC DateTime to timestamp with time zone , and Local/Unspecified DateTime to timestamp without time zone ; trying to send a non-UTC DateTime as timestamptz will throw an exception, etc. Npgsql also supports reading and writing DateTimeOffset to timestamp with time zone , but only with Offset=0. Prior to 6.0, timestamp with time zone would be converted to a local timestamp when read - see below for more details. The precise improvements and breaking changes are detailed in the 6.0 breaking changes ; to revert to the pre-6.0 behavior, add the following at the start of your application, before any Npgsql operations are invoked: AppContext.SetSwitch(\"Npgsql.EnableLegacyTimestampBehavior\", true); Use of the time with time zone type is discouraged, see the PostgreSQL documentation . You can use a DateTimeOffset to read and write values - the date component will be ignored. Infinity values PostgreSQL supports the special values -infinity and infinity for the timestamp and date types ( see docs ); these can be useful to represent a value which is earlier or later than any other value. Starting with Npgsql 6.0, these special values are mapped to the MinValue and MaxValue value on the corresponding .NET types ( DateTime and DateOnly , NodaTime Instant and LocalDate ). To opt out of this behavior, set the following AppContext switch at the start of your application: AppContext.SetSwitch(\"Npgsql.DisableDateTimeInfinityConversions\", true); Note: in versions prior to 6.0, the connection string parameter Convert Infinity DateTime could be used to opt into these infinity conversions. That connection string parameter has been removed. Detailed Behavior: Reading values from the database PostgreSQL type Default .NET type Non-default .NET types timestamp with time zone DateTime (Utc 1 ) DateTimeOffset (Offset=0) 2 timestamp without time zone DateTime (Unspecified) date DateTime DateOnly (6.0+) time without time zone TimeSpan TimeOnly (6.0+) time with time zone DateTimeOffset interval TimeSpan ( 3 ) NpgsqlInterval 1 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), reading a timestamp with time zone returns a Local DateTime instead of Utc. See the breaking change note for more info . 2 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), reading a timestamp with time zone as a DateTimeOffset returns a local offset based on the timezone of the server where Npgsql is running. 3 PostgreSQL intervals with month or year components cannot be read as TimeSpan. Consider using NodaTime's Period type, or NpgsqlInterval . Detailed Behavior: Sending values to the database PostgreSQL type Default .NET types Non-default .NET types NpgsqlDbType DbType timestamp with time zone DateTime (Utc) 1 , DateTimeOffset TimestampTz DateTime 2 , DateTimeOffset timestamp without time zone DateTime (Local/Unspecified) 1 Timestamp DateTime2 date DateOnly (6.0+) DateTime Date Date time without time zone TimeOnly (6.0+) TimeSpan Time Time time with time zone DateTimeOffset TimeTz interval TimeSpan Interval 1 UTC DateTime is written as timestamp with time zone , Local/Unspecified DateTimes are written as timestamp without time zone . In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), DateTime is always written as timestamp without time zone . 2 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), DbType.DateTime is mapped to timestamp without time zone ."
  },
  "doc/types/enums_and_composites.html": {
    "href": "doc/types/enums_and_composites.html",
    "title": "PostgreSQL enums and composites | Npgsql Documentation",
    "keywords": "PostgreSQL enums and composites PostgreSQL supports enum types and composite types as database columns, and Npgsql supports reading and writing these. This allows you to seamlessly read and write enum and composite values to the database without worrying about conversions. Creating your types Let's assume you've created some enum and composite types in PostgreSQL: CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy'); CREATE TYPE inventory_item AS ( name text, supplier_id integer, price numeric ); To use these types with Npgsql, you must first define corresponding CLR types that will be mapped to the PostgreSQL types: public enum Mood { Sad, Ok, Happy } public class InventoryItem { public string Name { get; set; } = \"\"; public int SupplierId { get; set; } public decimal Price { get; set; } } Mapping your CLR types Once your types are defined both in PostgreSQL and in C#, you can now configure the mapping between them with Npgsql. NpgsqlDataSource Global mapping Connection mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.MapEnum<Mood>(); dataSourceBuilder.MapComposite<InventoryItem>(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource , you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.MapEnum<Mood>(); NpgsqlConnection.GlobalTypeMapper.MapComposite<InventoryItem>(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Note This mapping method has been removed in Npgsql 7.0. Older versions of Npgsql supported configuring a type mapping on an individual connection, as follows: var conn = new NpgsqlConnection(...); conn.TypeMapper.MapEnum<Mood>(); conn.TypeMapper.MapComposite<InventoryItem>(); Whatever the method used, your CLR types Mood and InventoryItem are now mapped to the PostgreSQL types mood and inventory_item . Using your mapped types Once your mapping is in place, you can read and write your CLR types as usual: // Writing await using (var cmd = new NpgsqlCommand(\"INSERT INTO some_table (my_enum, my_composite) VALUES ($1, $2)\", conn)) { cmd.Parameters.Add(new() { Value = Mood.Happy }); cmd.Parameters.Add(new() { Value = new InventoryItem { ... } }); cmd.ExecuteNonQuery(); } // Reading await using (var cmd = new NpgsqlCommand(\"SELECT my_enum, my_composite FROM some_table\", conn)) await using (var reader = cmd.ExecuteReader()) { reader.Read(); var enumValue = reader.GetFieldValue<Mood>(0); var compositeValue = reader.GetFieldValue<InventoryItem>(1); } Note that your PostgreSQL enum and composites types ( mood and inventory_data in the sample above) must be defined in your database before the first connection is created (see CREATE TYPE ). If you're creating PostgreSQL types within your program, call NpgsqlConnection.ReloadTypes() to make sure Npgsql becomes properly aware of them. Name translation CLR type and field names are usually Pascal case (e.g. InventoryData ), whereas in PostgreSQL they are snake case (e.g. inventory_data ). To help make the mapping for enums and composites seamless, pluggable name translators are used translate all names. The default translation scheme is NpgsqlSnakeCaseNameTranslator , which maps names like SomeType to some_type , but you can specify others. The default name translator can be set for all your connections via NpgsqlConnection.GlobalTypeMapper.DefaultNameTranslator , or for a specific connection for NpgsqlConnection.TypeMapper.DefaultNameTranslator . You also have the option of specifying a name translator when setting up a mapping: NpgsqlConnection.GlobalTypeMapper.MapComposite<InventoryData>(\"inventory_data\", new NpgsqlNullNameTranslator()); Finally, you may control mappings on a field-by-field basis via the [PgName] attribute. This overrides the name translator. public enum Mood { [PgName(\"depressed\")] Sad, Ok, [PgName(\"ebullient\")] Happy } Reading and writing unmapped enums In some cases, it may be desirable to interact with PostgreSQL enums without a pre-existing CLR enum type - this is useful mainly if your program doesn't know the database schema and types in advance, and needs to interact with any enum/composite type. Npgsql allows reading and writing enums as simple strings: // Writing enum as string await using (var cmd = new NpgsqlCommand(\"INSERT INTO some_table (my_enum) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = \"Happy\" DataTypeName = \"mood\" }); cmd.ExecuteNonQuery(); } // Reading enum as string await using (var cmd = new NpgsqlCommand(\"SELECT my_enum FROM some_table\", conn)) await using (var reader = cmd.ExecuteReader()) { reader.Read(); var enumValue = reader.GetFieldValue<string>(0); }"
  },
  "doc/types/geojson.html": {
    "href": "doc/types/geojson.html",
    "title": "PostGIS/GeoJSON Type Plugin | Npgsql Documentation",
    "keywords": "PostGIS/GeoJSON Type Plugin The Npgsql.GeoJSON plugin makes Npgsql read and write PostGIS spatial types as GeoJSON (RFC7946) types , via the GeoJSON.NET library. As an alternative, you can use Npgsql.NetTopologySuite , which is a full-fledged .NET spatial library with many features. Setup To avoid forcing a dependency on the GeoJSON library for users not using spatial, GeoJSON support is delivered as a separate plugin. To use the plugin, simply add a dependency on Npgsql.GeoJSON and set it up in one of the following ways: NpgsqlDataSource Global mapping Connection mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UseGeoJson(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource , you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.UseGeoJson(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Note This mapping method has been removed in Npgsql 7.0. Older versions of Npgsql supported configuring a type mapping on an individual connection, as follows: var conn = new NpgsqlConnection(...); conn.TypeMapper.UseGeoJson(); Reading and Writing Geometry Values When reading PostGIS values from the database, Npgsql will automatically return the appropriate GeoJSON types: Point , LineString , and so on. Npgsql will also automatically recognize GeoJSON's types in parameters, and will automatically send the corresponding PostGIS type to the database. The following code demonstrates a roundtrip of a GeoJSON Point to the database: conn.ExecuteNonQuery(\"CREATE TEMP TABLE data (geom GEOMETRY)\"); await using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geom) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = new Point(new Position(51.899523, -2.124156)) }); await cmd.ExecuteNonQueryAsync(); } await using (var cmd = new NpgsqlCommand(\"SELECT geom FROM data\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) { await reader.ReadAsync(); var point2 = reader.GetFieldValue<Point>(0);; } You may also explicitly specify a parameter's type by setting NpgsqlDbType.Geometry . Geography (geodetic) Support PostGIS has two types: geometry (for Cartesian coordinates) and geography (for geodetic or spherical coordinates). You can read about the geometry/geography distinction in the PostGIS docs or in this blog post . In a nutshell, geography is much more accurate when doing calculations over long distances, but is more expensive computationally and supports only a small subset of the spatial operations supported by geometry . Npgsql uses the same GeoJSON types to represent both geometry and geography - the Point type represents a point in either Cartesian or geodetic space. You usually don't need to worry about this distinction because PostgreSQL will usually cast types back and forth as needed. However, it's worth noting that Npgsql sends Cartesian geometry by default, because that's the usual requirement. You have the option of telling Npgsql to send geography instead by specifying NpgsqlDbType.Geography : using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geog) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = point, NpgsqlDbType = NpgsqlDbType.Geography }); await cmd.ExecuteNonQueryAsync(); } If you prefer to use geography everywhere by default, you can also specify that when setting up the plugin: dataSourceBuilder.UseGeoJson(geographyAsDefault: true);"
  },
  "doc/types/jsonnet.html": {
    "href": "doc/types/jsonnet.html",
    "title": "Json.NET Type Plugin | Npgsql Documentation",
    "keywords": "Json.NET Type Plugin The Json.NET plugin allows applications to automatically make use of Newtonsoft Json.NET when reading and writing JSON data. Note that Npgsql includes built-in support for System.Text.Json , without requiring extra package; this page only covers using Newtonsoft Json.NET. PostgreSQL natively supports two JSON types : jsonb and json . Out of the box, Npgsql allows reading and writing these types as strings and provides no further processing to avoid taking a dependency on an external JSON library, forcing Npgsql users to serialize and deserialize JSON values themselves. The Json.NET plugin removes this burden from users by performing serialization/deserialization within Npgsql itself. Setup To avoid forcing a dependency on the Json.NET library for users not using spatial, Json.NET support is delivered as a separate plugin. To use the plugin, simply add a dependency on Npgsql.Json.NET and set it up in one of the following ways: NpgsqlDataSource Global mapping Connection mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UseJsonNet(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource , you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.UseJsonNet(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Note This mapping method has been removed in Npgsql 7.0. Older versions of Npgsql supported configuring a type mapping on an individual connection, as follows: var conn = new NpgsqlConnection(...); conn.TypeMapper.UseJsonNet(); Arbitrary CLR Types Once the plugin is set up, you can transparently read and write CLR objects as JSON values - the plugin will automatically have them serialized/deserialized: // Write arbitrary CLR types as JSON await using (var cmd = new NpgsqlCommand(@\"INSERT INTO mytable (my_json_column) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = myClrInstance, NpgsqlDbType = NpgsqlDbType.Jsonb }); await cmd.ExecuteNonQueryAsync(); } // Read arbitrary CLR types as JSON await using (var cmd = new NpgsqlCommand(@\"SELECT my_json_column FROM mytable\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) { await reader.ReadAsync(); var someValue = reader.GetFieldValue<MyClrType>(0); } Note that in the example above, you must still specify NpgsqlDbType.Json (or Jsonb ) to tell Npgsql that the parameter type is JSON. If you have several CLR types which you'll be using, you have the option of mapping them to JSON: dataSourceBuilder.UseJsonNet(new[] { typeof(MyClrType) }); Note that the UseJsonNet() method accepts two type arrays: the first for types to map to jsonb , the second for types to map to json . JObject/JArray You can also read and write Json.NET's JObject/JArray types directly: var value = new JObject { [\"Foo\"] = 8 }; await using (var cmd = new NpgsqlCommand(@\"INSERT INTO mytable (my_json_column) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = myClrInstance, NpgsqlDbType = NpgsqlDbType.Jsonb }); await cmd.ExecuteNonQueryAsync(); } await using (var cmd = new NpgsqlCommand(@\"SELECT my_json_column FROM mytable\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) { await reader.ReadAsync(); var someValue = reader.GetFieldValue<JObject>(0); } CLR Arrays You can even read and write native CLR arrays as JSON: await using (var cmd = new NpgsqlCommand(@\"INSERT INTO mytable (my_json_column) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = new[] { 1, 2, 3 }, NpgsqlDbType = NpgsqlDbType.Jsonb) }); await cmd.ExecuteNonQueryAsync(); } await using (var cmd = new NpgsqlCommand(@\"SELECT my_json_column FROM mytable\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) { await reader.ReadAsync(); var someValue = reader.GetFieldValue<int[]>(0); } And for extra credit, you can specify JSON by default for array types just like for regular CLR types: dataSourceBuilder.UseJsonNet(new[] { typeof(int[]) }); This overwrites the default array mapping (which sends PostgreSQL arrays ), making Npgsql send int arrays as JSON by default."
  },
  "doc/types/nodatime.html": {
    "href": "doc/types/nodatime.html",
    "title": "NodaTime Type Plugin | Npgsql Documentation",
    "keywords": "NodaTime Type Plugin Npgsql provides a plugin that allows mapping the NodaTime date/time library; this is the recommended way to interact with PostgreSQL date/time types, rather than the built-in .NET types. What is NodaTime By default, the PostgreSQL date/time types are mapped to the built-in .NET types ( DateTime , TimeSpan ). Unfortunately, these built-in types are flawed in many ways. The NodaTime library was created to solve many of these problems, and if your application handles dates and times in anything but the most basic way, you should consider using it. To learn more read this blog post by Jon Skeet . Beyond NodaTime's general advantages, some specific advantages NodaTime for PostgreSQL date/time mapping include: NodaTime's types map very cleanly to the PostgreSQL types. For example Instant corresponds to timestamptz , and LocalDateTime corresponds to timestamp without time zone . The BCL's DateTime can correspond to both, depending on its type; this can create confusion and errors. Period is much more suitable for mapping PostgreSQL interval than TimeSpan . NodaTime types can fully represent PostgreSQL's microsecond precision, and can represent dates outside the BCL's date limit (1AD-9999AD). Setup To avoid forcing a dependency on the NetTopologySuite library for users not using spatial, NodaTime support is delivered as a separate plugin. To use the plugin, simply add a dependency on Npgsql.NodaTime and set it up in one of the following ways: NpgsqlDataSource Global mapping Connection mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UseNodaTime(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource , you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.UseNodaTime(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Note This mapping method has been removed in Npgsql 7.0. Older versions of Npgsql supported configuring a type mapping on an individual connection, as follows: var conn = new NpgsqlConnection(...); conn.TypeMapper.UseNodaTime(); Reading and Writing Values Once the plugin is set up, you can transparently read and write NodaTime objects: // Write NodaTime Instant to PostgreSQL \"timestamp with time zone\" (UTC) await using (var cmd = new NpgsqlCommand(@\"INSERT INTO mytable (my_timestamptz) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = Instant.FromUtc(2011, 1, 1, 10, 30) }); await cmd.ExecuteNonQueryAsync(); } // Read timestamp back from the database as an Instant await using (var cmd = new NpgsqlCommand(@\"SELECT my_timestamptz FROM mytable\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) { await reader.ReadAsync(); var instant = reader.GetFieldValue<Instant>(0); } Mapping Table Warning A common mistake is for users to think that the PostgreSQL timestamp with time zone type stores the timezone in the database. This is not the case: only a UTC timestamp is stored. There is no single PostgreSQL type that stores both a date/time and a timezone, similar to .NET DateTimeOffset . To store a timezone in the database, add a separate text column containing the timezone ID. PostgreSQL Type Default NodaTime Type Additional NodaTime Type Notes timestamp with time zone Instant ZonedDateTime 1 , OffsetDateTime 1 A UTC timestamp in the database. Only UTC ZonedDateTime and OffsetDateTime are supported. timestamp without time zone LocalDateTime 2 A timestamp in an unknown or implicit time zone. date LocalDate A simple date with no timezone or offset information. time without time zone LocalTime A simple time-of-day, with no timezone or offset information. time with time zone OffsetTime A type that stores a time and an offset. It's use is generally discouraged. interval Period Duration An interval of time, from sub-second units to years. NodaTime Duration is supported for intervals with days and smaller, but not with years or months (as these have no absolute duration). Period can be used with any interval unit. tstzrange Interval NpgsqlRange<Instant> etc. An interval between two instants in time (start and end). tsrange NpgsqlRange<LocalDateTime> An interval between two timestamps in an unknown or implicit time zone. daterange DateInterval NpgsqlRange<LocalDate> etc. An interval between two dates. 1 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), writing or reading ZonedDateTime or OffsetDateTime automatically converted to or from UTC. See the breaking change note for more info . 2 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), timestamp without time zone was mapped to Instant by default, instead of LocalDateTime. See the breaking change note for more info . Infinity values PostgreSQL supports the special values -infinity and infinity for the timestamp and date types ( see docs ); these can be useful to represent a value which is earlier or later than any other value. Starting with Npgsql 6.0, these special values are mapped to the MinValue and MaxValue value on the corresponding .NET types ( Instant and LocalDate ). To opt out of this behavior, set the following AppContext switch at the start of your application: AppContext.SetSwitch(\"Npgsql.DisableDateTimeInfinityConversions\", true); Note: in versions prior to 6.0, the connection string parameter Convert Infinity DateTime could be used to opt into these infinity conversions. That connection string parameter has been removed."
  },
  "doc/types/nts.html": {
    "href": "doc/types/nts.html",
    "title": "PostGIS/NetTopologySuite Type Plugin | Npgsql Documentation",
    "keywords": "PostGIS/NetTopologySuite Type Plugin PostgreSQL supports spatial data and operations via the PostGIS extension , which is a mature and feature-rich database spatial implementation. .NET doesn't provide a standard spatial library, but NetTopologySuite is a leading spatial library. Npgsql has a plugin which allows which allows you to map the NTS types PostGIS columns, and even translate many useful spatial operations to SQL. This is the recommended way to interact with spatial types in Npgsql. PostgreSQL provides support for spatial types (geometry/geography) via the powerful PostGIS extension; this allows you to store points and other spatial constructs in the database, and efficiently perform operations and searches on them. Npgsql supports the PostGIS types via NetTopologySuite , which is the leading spatial library in the .NET world: the NTS types can be read and written directly to their corresponding PostGIS types. This is the recommended way to work with spatial types in Npgsql. Setup To avoid forcing a dependency on the NetTopologySuite library for users not using spatial, NTS support is delivered as a separate plugin. To use the plugin, simply add a dependency on Npgsql.NetTopologySuite and set it up in one of the following ways: NpgsqlDataSource Global mapping Connection mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UseNetTopologySuite(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource , you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.UseNetTopologySuite(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Note This mapping method has been removed in Npgsql 7.0. Older versions of Npgsql supported configuring a type mapping on an individual connection, as follows: var conn = new NpgsqlConnection(...); conn.TypeMapper.UseNetTopologySuite(); By default the plugin handles only ordinates provided by the DefaultCoordinateSequenceFactory of GeometryServiceProvider.Instance . If GeometryServiceProvider is initialized automatically the X and Y ordinates are handled. To change the behavior specify the handleOrdinates parameter like in the following example: dataSourceBuilder.UseNetTopologySuite(handleOrdinates: Ordinates.XYZ); To process the M ordinate, you must initialize GeometryServiceProvider.Instance to a new NtsGeometryServices instance with coordinateSequenceFactory set to a DotSpatialAffineCoordinateSequenceFactory . Or you can specify the factory when calling UseNetTopologySuite . // Place this at the beginning of your program to use the specified settings everywhere (recommended) GeometryServiceProvider.Instance = new NtsGeometryServices( new DotSpatialAffineCoordinateSequenceFactory(Ordinates.XYM), new PrecisionModel(PrecisionModels.Floating), -1); // Or specify settings for Npgsql only dataSourceBuilder.UseNetTopologySuite.UseNetTopologySuite( new DotSpatialAffineCoordinateSequenceFactory(Ordinates.XYM)); Reading and Writing Geometry Values When reading PostGIS values from the database, Npgsql will automatically return the appropriate NetTopologySuite types: Point , LineString , and so on. Npgsql will also automatically recognize NetTopologySuite's types in parameters, and will automatically send the corresponding PostGIS type to the database. The following code demonstrates a roundtrip of a NetTopologySuite Point to the database: await conn.ExecuteNonQueryAsync(\"CREATE TEMP TABLE data (geom GEOMETRY)\"); await using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geom) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = new Point(new Coordinate(1d, 1d)) }); await cmd.ExecuteNonQueryAsync(); } await using (var cmd = new NpgsqlCommand(\"SELECT geom FROM data\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) { await reader.ReadAsync(); var point = reader.GetFieldValue<Point>(0); } You may also explicitly specify a parameter's type by setting NpgsqlDbType.Geometry . Geography (geodetic) Support PostGIS has two types: geometry (for Cartesian coordinates) and geography (for geodetic or spherical coordinates). You can read about the geometry/geography distinction in the PostGIS docs or in this blog post . In a nutshell, geography is much more accurate when doing calculations over long distances, but is more expensive computationally and supports only a small subset of the spatial operations supported by geometry . Npgsql uses the same NetTopologySuite types to represent both geometry and geography - the Point type represents a point in either Cartesian or geodetic space. You usually don't need to worry about this distinction because PostgreSQL will usually cast types back and forth as needed. However, it's worth noting that Npgsql sends Cartesian geometry by default, because that's the usual requirement. You have the option of telling Npgsql to send geography instead by specifying NpgsqlDbType.Geography : await using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geog) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = point, NpgsqlDbType = NpgsqlDbType.Geography }); await cmd.ExecuteNonQueryAsync(); } If you prefer to use geography everywhere by default, you can also specify that when setting up the plugin: dataSourceBuilder.UseNetTopologySuite(geographyAsDefault: true);"
  },
  "doc/wait.html": {
    "href": "doc/wait.html",
    "title": "Waiting for Notifications | Npgsql Documentation",
    "keywords": "Waiting for Notifications Note: This functionality replaces Npgsql 3.0's \"Continuous processing mode\" . PostgreSQL Asynchronous messages PostgreSQL has a feature whereby arbitrary notification messages can be sent between clients. For example, one client may wait until it is notified by another client of a task that it is supposed to perform. Notifications are, by their nature, asynchronous - they can arrive at any point. For more detail about this feature, see the PostgreSQL NOTIFY command . Some other asynchronous message types are notices (e.g. database shutdown imminent) and parameter changes, see the PostgreSQL protocol docs for more details. Note that despite the word \"asynchronous\", this page has nothing to do with ADO.NET async operations (e.g. ExecuteReaderAsync). Processing of Notifications Npgsql exposes notification messages via the Notification event on NpgsqlConnection. Since asynchronous notifications are rarely used and processing can be complex, Npgsql only processes notification messages as part of regular (synchronous) query interaction. That is, if an asynchronous notification is sent, Npgsql will only process it and emit an event to the user the next time a command is sent and processed. To receive notifications outside a synchronous request-response cycle, call NpgsqlConnection.Wait() . This will make your thread block until a single notification is received (note that a version with a timeout as well as an async version exist). Note that the notification is still delivered via the Notification event as before. var conn = new NpgsqlConnection(ConnectionString); conn.Open(); conn.Notification += (o, e) => Console.WriteLine(\"Received notification\"); using (var cmd = new NpgsqlCommand(\"LISTEN channel_name\", conn)) { cmd.ExecuteNonQuery(); } while (true) { conn.Wait(); // Thread will block here } Keepalive You may want to turn on keepalives ."
  },
  "ef6/index.html": {
    "href": "ef6/index.html",
    "title": "Entity Framework 6 | Npgsql Documentation",
    "keywords": "Npgsql has an Entity Framework 6 provider. You can use it by installing the EntityFramework6.Npgsql nuget. Basic Configuration Configuration for an Entity Framework application can be specified in a config file (app.config/web.config) or through code. The latter is known as code-based configuration. Code-based To use Entity Framework with Npgsql, define a class that inherits from DbConfiguration in the same assembly as your class inheriting DbContext . Ensure that you configure provider services, a provider factory, a default connection factory as shown below: using Npgsql; using System.Data.Entity; class NpgSqlConfiguration : DbConfiguration { public NpgSqlConfiguration() { var name = \"Npgsql\"; SetProviderFactory(providerInvariantName: name, providerFactory: NpgsqlFactory.Instance); SetProviderServices(providerInvariantName: name, provider: NpgsqlServices.Instance); SetDefaultConnectionFactory(connectionFactory: new NpgsqlConnectionFactory()); } } Config file When installing EntityFramework6.Npgsql nuget package, the relevant sections in App.config / Web.config are usually automatically updated. You typically only have to add your connectionString with the correct providerName . <configuration> <connectionStrings> <add name=\"BlogDbContext\" connectionString=\"Server=localhost;port=5432;Database=Blog;User Id=postgres;Password=postgres;\" providerName=\"Npgsql\" /> </connectionStrings> <entityFramework> <providers> <provider invariantName=\"Npgsql\" type=\"Npgsql.NpgsqlServices, EntityFramework6.Npgsql\" /> </providers> <!-- setting the default connection factory is optional --> <defaultConnectionFactory type=\"Npgsql.NpgsqlConnectionFactory, EntityFramework6.Npgsql\" /> </entityFramework> <system.data> <DbProviderFactories> <add name=\"Npgsql Provider\" invariant=\"Npgsql\" description=\".NET Framework Data Provider for PostgreSQL\" type=\"Npgsql.NpgsqlFactory, Npgsql, Version=4.1.3.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\" /> </DbProviderFactories> </system.data> </configuration> Guid Support Npgsql EF migrations support uses uuid_generate_v4() function to generate guids. In order to have access to this function, you have to install the extension uuid-ossp through the following command: create extension \"uuid-ossp\"; If you don't have this extension installed, when you run Npgsql migrations you will get the following error message: ERROR: function uuid_generate_v4() does not exist If the database is being created by Npgsql Migrations, you will need to run the create extension command in the template1 database . This way, when the new database is created, the extension will be installed already. Optimistic Concurrency EntityFramework supports optimistic concurrency , through the system column xmin . To use this column as the concurrency token, some customization is needed . The following code will setup Department.Version to map to xmin , while the SqlGenerator will generate CREATE/ALTER TABLE statements omitting system columns. public class Department { public string Version { get; private set; } } [DbConfigurationType(typeof(Configuration))] public class UniversityDbContext : DbContext { public DbSet<Department> Departments { get; set; } protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Entity<Department>() .Property(p => p.Version) .HasColumnName(\"xmin\") .HasColumnType(\"text\") .IsConcurrencyToken() .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed); base.OnModelCreating(modelBuilder); } } internal class Configuration : DbConfiguration { public Configuration() { SetMigrationSqlGenerator(\"Npgsql\", () => new SqlGenerator()); } } public class SqlGenerator : NpgsqlMigrationSqlGenerator { private readonly string[] systemColumnNames = { \"oid\", \"tableoid\", \"xmin\", \"cmin\", \"xmax\", \"cmax\", \"ctid\" }; protected override void Convert(CreateTableOperation createTableOperation) { var systemColumns = createTableOperation.Columns.Where(x => systemColumnNames.Contains(x.Name)).ToArray(); foreach (var systemColumn in systemColumns) createTableOperation.Columns.Remove(systemColumn); base.Convert(createTableOperation); } } Template Database When the Entity Framework 6 provider creates a database, it issues a simple CREATE DATABASE command. In PostgreSQL, this implicitly uses template1 as the template - anything existing in template1 will be copied to your new database. If you wish to change the database used as a template, you can specify the EF Template Database connection string parameter. For more info see the PostgreSQL docs . Customizing DataReader Behavior You can use an Entity Framework 6 IDbCommandInterceptor to wrap the DataReader instance returned by Npgsql when Entity Framework executes queries. This is possible using a DbConfiguration class. Example use cases: Forcing all returned DateTime and DateTimeOffset values to be in the UTC timezone. Preventing accidental insertion of DateTime values having DateTimeKind.Unspecified . Forcing all postgres date/time types to be returned to Entity Framework as DateTimeOffset . [DbConfigurationType(typeof(AppDbContextConfiguration))] public class AppDbContext : DbContext { // ... } public class AppDbContextConfiguration : DbConfiguration { public AppDbContextConfiguration() { this.AddInterceptor(new MyEntityFrameworkInterceptor()); } } class MyEntityFrameworkInterceptor : DbCommandInterceptor { public override void ReaderExecuted( DbCommand command, DbCommandInterceptionContext<DbDataReader> interceptionContext) { if (interceptionContext.Result == null) return; interceptionContext.Result = new WrappingDbDataReader(interceptionContext.Result); } public override void ScalarExecuted( DbCommand command, DbCommandInterceptionContext<object> interceptionContext) { interceptionContext.Result = ModifyReturnValues(interceptionContext.Result); } static object ModifyReturnValues(object result) { // Transform and then return result; } } class WrappingDbDataReader : DbDataReader, IDataReader { // Wrap an existing DbDataReader, proxy all calls to the underlying instance, // modify return values and/or parameters as needed... public WrappingDbDataReader(DbDataReader reader) { } }"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.html",
    "title": "Namespace Microsoft.EntityFrameworkCore.Diagnostics | Npgsql Documentation",
    "keywords": "Namespace Microsoft.EntityFrameworkCore.Diagnostics Classes NpgsqlEfEventId Event IDs for PostgreSQL/Npgsql events that correspond to messages logged to an and events sent to a . These IDs are also used with to configure the behavior of warnings."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.NpgsqlEfEventId.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.NpgsqlEfEventId.html",
    "title": "Class NpgsqlEfEventId | Npgsql Documentation",
    "keywords": "Class NpgsqlEfEventId Event IDs for PostgreSQL/Npgsql events that correspond to messages logged to an and events sent to a . These IDs are also used with to configure the behavior of warnings. Inheritance Object NpgsqlEfEventId Namespace : Microsoft.EntityFrameworkCore.Diagnostics Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEfEventId : object Fields | Improve this Doc View Source CollationFound A collation was found. This event is in the category. Declaration public static readonly EventId CollationFound Field Value Type Description EventId | Improve this Doc View Source ColumnFound A column was found. This event is in the category. Declaration public static readonly EventId ColumnFound Field Value Type Description EventId | Improve this Doc View Source EnumColumnSkippedWarning Enum column cannot be scaffolded, define a CLR enum type and add the property manually. This event is in the category. Declaration public static readonly EventId EnumColumnSkippedWarning Field Value Type Description EventId | Improve this Doc View Source ExpressionIndexSkippedWarning Expression index cannot be scaffolded, expression indices aren't supported and must be added via raw SQL in migrations. This event is in the category. Declaration public static readonly EventId ExpressionIndexSkippedWarning Field Value Type Description EventId | Improve this Doc View Source ForeignKeyFound A foreign key was found. This event is in the category. Declaration public static readonly EventId ForeignKeyFound Field Value Type Description EventId | Improve this Doc View Source ForeignKeyPrincipalColumnMissingWarning A principal column referenced by a foreign key was not found. This event is in the category. Declaration public static readonly EventId ForeignKeyPrincipalColumnMissingWarning Field Value Type Description EventId | Improve this Doc View Source ForeignKeyReferencesMissingPrincipalTableWarning A foreign key references a missing table at the principal end. This event is in the category. Declaration public static readonly EventId ForeignKeyReferencesMissingPrincipalTableWarning Field Value Type Description EventId | Improve this Doc View Source IndexFound An index was found. This event is in the category. Declaration public static readonly EventId IndexFound Field Value Type Description EventId | Improve this Doc View Source MissingSchemaWarning The database is missing a schema. This event is in the category. Declaration public static readonly EventId MissingSchemaWarning Field Value Type Description EventId | Improve this Doc View Source MissingTableWarning The database is missing a table. This event is in the category. Declaration public static readonly EventId MissingTableWarning Field Value Type Description EventId | Improve this Doc View Source PrimaryKeyFound A primary key was found. This event is in the category. Declaration public static readonly EventId PrimaryKeyFound Field Value Type Description EventId | Improve this Doc View Source SequenceFound A sequence was found. This event is in the category. Declaration public static readonly EventId SequenceFound Field Value Type Description EventId | Improve this Doc View Source TableFound A table was found. This event is in the category. Declaration public static readonly EventId TableFound Field Value Type Description EventId | Improve this Doc View Source UniqueConstraintFound A unique constraint was found. This event is in the category. Declaration public static readonly EventId UniqueConstraintFound Field Value Type Description EventId | Improve this Doc View Source UnsupportedColumnConstraintSkippedWarning Constraint '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). This event is in the category. Declaration public static readonly EventId UnsupportedColumnConstraintSkippedWarning Field Value Type Description EventId | Improve this Doc View Source UnsupportedColumnIndexSkippedWarning Index '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). This event is in the category. Declaration public static readonly EventId UnsupportedColumnIndexSkippedWarning Field Value Type Description EventId"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.html",
    "title": "Namespace Microsoft.EntityFrameworkCore | Npgsql Documentation",
    "keywords": "Namespace Microsoft.EntityFrameworkCore Classes NpgsqlAggregateDbFunctionsExtensions Provides extension methods supporting aggregate function translation for PostgreSQL. NpgsqlAlterDatabaseOperationExtensions Extension methods for for Npgsql-specific metadata. NpgsqlDatabaseFacadeExtensions Npgsql specific extension methods for . NpgsqlDatabaseModelExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDbContextOptionsBuilderExtensions Provides extension methods on and used to configure a to context to a PostgreSQL database with Npgsql. NpgsqlDbFunctionsExtensions Provides Npgsql-specific extension methods on . NpgsqlEntityTypeBuilderExtensions Npgsql-specific extension methods for . NpgsqlEntityTypeExtensions Extension methods for for Npgsql-specific metadata. NpgsqlFullTextSearchDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via . NpgsqlFullTextSearchLinqExtensions Provides EF Core extension methods for Npgsql full-text search types. NpgsqlFuzzyStringMatchDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via . NpgsqlIndexBuilderExtensions Npgsql specific extension methods for . NpgsqlIndexExtensions Extension methods for for Npgsql-specific metadata. NpgsqlJsonDbFunctionsExtensions Provides methods for supporting translation to PostgreSQL JSON operators and functions. NpgsqlMigrationBuilderExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlModelBuilderExtensions Npgsql-specific extension methods for . NpgsqlModelExtensions Model extension methods for Npgsql-specific metadata. NpgsqlMultirangeDbFunctionsExtensions Provides extension methods for multiranges supporting PostgreSQL translation. NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions NetTopologySuite specific extension methods for NpgsqlDbContextOptionsBuilder . NpgsqlNetTopologySuiteDbFunctionsExtensions Provides Npgsql-specific spatial extension methods on . NpgsqlNetworkDbFunctionsExtensions Provides extension methods supporting operator translation for PostgreSQL network types. NpgsqlNodaTimeDbContextOptionsBuilderExtensions NodaTime specific extension methods for NpgsqlDbContextOptionsBuilder . NpgsqlNodaTimeDbFunctionsExtensions Provides extension methods supporting NodaTime function translation for PostgreSQL. NpgsqlPropertyBuilderExtensions Npgsql specific extension methods for . NpgsqlPropertyExtensions Property extension methods for Npgsql-specific metadata. NpgsqlRangeDbFunctionsExtensions Provides extension methods for supporting PostgreSQL translation. NpgsqlTrigramsDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via . Structs LTree Represents a PostgreSQL ltree type. This type is implicitly convertible to a .NET . Enums NpgsqlTsRankingNormalization Specifies whether and how a document's length should impact its rank. This is used with the ranking functions in NpgsqlFullTextSearchLinqExtensions . See http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING for more information about the behaviors that are controlled by this value."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.LTree.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.LTree.html",
    "title": "Struct LTree | Npgsql Documentation",
    "keywords": "Struct LTree Represents a PostgreSQL ltree type. This type is implicitly convertible to a .NET . Implements IEquatable < LTree > Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public readonly struct LTree Remarks See https://www.postgresql.org/docs/current/ltree.html Constructors | Improve this Doc View Source LTree(String) Constructs a new instance of LTree . Declaration public LTree(string value) Parameters Type Name Description String value The string value for the ltree. Properties | Improve this Doc View Source NLevel Returns number of labels in path. Declaration public readonly int NLevel { get; } Property Value Type Description Int32 Remarks The property is translated to nlevel(ltree) . See https://www.postgresql.org/docs/current/ltree.html Methods | Improve this Doc View Source Equals(LTree) Declaration public readonly bool Equals(LTree other) Parameters Type Name Description LTree other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override readonly bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Index(LTree) Returns position of first occurrence of other in this ltree, or -1 if not found. Declaration public readonly int Index(LTree other) Parameters Type Name Description LTree other Returns Type Description Int32 Remarks The method call is translated to index(ltree1, ltree2) . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source Index(LTree, Int32) Returns position of first occurrence of other in this ltree, or -1 if not found. The search starts at position offset ; negative offset means start -offset labels from the end of the path. Declaration public readonly int Index(LTree other, int offset) Parameters Type Name Description LTree other Int32 offset Returns Type Description Int32 Remarks The method call is translated to index(ltree1, ltree2, offset) . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source IsAncestorOf(LTree) Returns whether this ltree is an ancestor of other (or equal). Declaration public readonly bool IsAncestorOf(LTree other) Parameters Type Name Description LTree other Returns Type Description Boolean Remarks The method call is translated to left @> right . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source IsDescendantOf(LTree) Returns whether this ltree is a descendant of other (or equal). Declaration public readonly bool IsDescendantOf(LTree other) Parameters Type Name Description LTree other Returns Type Description Boolean Remarks The method call is translated to left &lt;@ right . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source LongestCommonAncestor(LTree[]) Computes longest common ancestor of paths. Declaration public static LTree LongestCommonAncestor(params LTree[] others) Parameters Type Name Description LTree [] others Returns Type Description LTree Remarks The method call is translated to lca(others) . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source MatchesLQuery(String) Returns whether this ltree matches lquery . Declaration public readonly bool MatchesLQuery(string lquery) Parameters Type Name Description String lquery Returns Type Description Boolean Remarks The method call is translated to left ~ right . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source MatchesLTxtQuery(String) Returns whether this ltree matches ltxtquery . Declaration public readonly bool MatchesLTxtQuery(string ltxtquery) Parameters Type Name Description String ltxtquery Returns Type Description Boolean Remarks The method call is translated to left @ right . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source Subpath(Int32) Returns subpath of ltree starting at position offset , extending to end of path. If offset is negative, subpath starts that far from the end of the path. Declaration public readonly LTree Subpath(int offset) Parameters Type Name Description Int32 offset Returns Type Description LTree Remarks The method call is translated to subpath(ltree, offset) . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source Subpath(Int32, Int32) Returns subpath of this ltree starting at position offset , with length len . If offset is negative, subpath starts that far from the end of the path. If len is negative, leaves that many labels off the end of the path. Declaration public readonly LTree Subpath(int offset, int len) Parameters Type Name Description Int32 offset Int32 len Returns Type Description LTree Remarks The method call is translated to subpath(ltree, offset, len) . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source Subtree(Int32, Int32) Returns subpath of this ltree from position start to position end -1 (counting from 0). Declaration public readonly LTree Subtree(int start, int end) Parameters Type Name Description Int32 start Int32 end Returns Type Description LTree Remarks The method call is translated to subltree(ltree, start, end) . See https://www.postgresql.org/docs/current/ltree.html | Improve this Doc View Source ToString() Declaration public override readonly string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(LTree, LTree) Compares two LTree instances for equality. Declaration public static bool operator ==(LTree x, LTree y) Parameters Type Name Description LTree x LTree y Returns Type Description Boolean | Improve this Doc View Source Implicit(LTree to String) Converts a string to an LTree type. Declaration public static implicit operator string (LTree ltree) Parameters Type Name Description LTree ltree Returns Type Description String | Improve this Doc View Source Implicit(String to LTree) Converts an LTree type to a string. Declaration public static implicit operator LTree(string value) Parameters Type Name Description String value Returns Type Description LTree | Improve this Doc View Source Inequality(LTree, LTree) Compares two LTree instances for inequality. Declaration public static bool operator !=(LTree x, LTree y) Parameters Type Name Description LTree x LTree y Returns Type Description Boolean Implements IEquatable<>"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Internal.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Internal.html",
    "title": "Namespace Microsoft.EntityFrameworkCore.Metadata.Internal | Npgsql Documentation",
    "keywords": "Namespace Microsoft.EntityFrameworkCore.Metadata.Internal Classes NpgsqlIndexExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Internal.NpgsqlIndexExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Internal.NpgsqlIndexExtensions.html",
    "title": "Class NpgsqlIndexExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlIndexExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlIndexExtensions Namespace : Microsoft.EntityFrameworkCore.Metadata.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlIndexExtensions : object Methods | Improve this Doc View Source AreCompatibleForNpgsql(IReadOnlyIndex, IReadOnlyIndex, in StoreObjectIdentifier, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static bool AreCompatibleForNpgsql(this IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, in StoreObjectIdentifier storeObject, bool shouldThrow) Parameters Type Name Description IReadOnlyIndex index IReadOnlyIndex duplicateIndex StoreObjectIdentifier storeObject Boolean shouldThrow Returns Type Description Boolean"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAggregateDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAggregateDbFunctionsExtensions.html",
    "title": "Class NpgsqlAggregateDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlAggregateDbFunctionsExtensions Provides extension methods supporting aggregate function translation for PostgreSQL. Inheritance Object NpgsqlAggregateDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlAggregateDbFunctionsExtensions : object Methods | Improve this Doc View Source ArrayAgg<T>(DbFunctions, IEnumerable<T>) Collects all the input values, including nulls, into a PostgreSQL array. Corresponds to the PostgreSQL array_agg aggregate function. Declaration public static T[] ArrayAgg<T>(this DbFunctions _, IEnumerable<T> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable <T> input The input values to be aggregated into an array. Returns Type Description T[] Type Parameters Name Description T See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source Average(DbFunctions, IEnumerable<TimeSpan>) Computes the average (arithmetic mean) of the non-null input intervals. Corresponds to the PostgreSQL avg aggregate function. Declaration public static TimeSpan? Average(this DbFunctions _, IEnumerable<TimeSpan> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < TimeSpan > input The input values to be computed into an average. Returns Type Description Nullable < TimeSpan > See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source Correlation(DbFunctions, IEnumerable<(Double, Double)>) Computes the correlation coefficient. Corresponds to the PostgreSQL corr function. Declaration public static double? Correlation(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source CovariancePopulation(DbFunctions, IEnumerable<(Double, Double)>) Computes the population covariance. Corresponds to the PostgreSQL covar_pop function. Declaration public static double? CovariancePopulation(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source CovarianceSample(DbFunctions, IEnumerable<(Double, Double)>) Computes the sample covariance. Corresponds to the PostgreSQL covar_samp function. Declaration public static double? CovarianceSample(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source JsonAgg<T>(DbFunctions, IEnumerable<T>) Collects all the input values, including nulls, into a json array. Values are converted to JSON as per to_json or to_jsonb . Corresponds to the PostgreSQL json_agg aggregate function. Declaration public static T[] JsonAgg<T>(this DbFunctions _, IEnumerable<T> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable <T> input The input values to be aggregated into a JSON array. Returns Type Description T[] Type Parameters Name Description T See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source JsonbAgg<T>(DbFunctions, IEnumerable<T>) Collects all the input values, including nulls, into a jsonb array. Values are converted to JSON as per to_json or to_jsonb . Corresponds to the PostgreSQL jsonb_agg aggregate function. Declaration public static T[] JsonbAgg<T>(this DbFunctions _, IEnumerable<T> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable <T> input The input values to be aggregated into a JSON array. Returns Type Description T[] Type Parameters Name Description T See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source JsonbObjectAgg<T1, T2>(DbFunctions, IEnumerable<(T1, T2)>) Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_jsonb . Values can be null , but not keys. Corresponds to the PostgreSQL jsonb_object_agg aggregate function. Declaration public static string JsonbObjectAgg<T1, T2>(this DbFunctions _, IEnumerable<(T1, T2)> keyValuePairs) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) <T1, T2>> keyValuePairs An enumerable of key-value pairs to be aggregated into a JSON object. Returns Type Description String Type Parameters Name Description T1 T2 See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source JsonbObjectAgg<T1, T2, TReturn>(DbFunctions, IEnumerable<(T1, T2)>) Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_jsonb . Values can be null , but not keys. Corresponds to the PostgreSQL jsonb_object_agg aggregate function. Declaration public static TReturn JsonbObjectAgg<T1, T2, TReturn>(this DbFunctions _, IEnumerable<(T1, T2)> keyValuePairs) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) <T1, T2>> keyValuePairs An enumerable of key-value pairs to be aggregated into a JSON object. Returns Type Description TReturn Type Parameters Name Description T1 T2 TReturn See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source JsonObjectAgg<T1, T2>(DbFunctions, IEnumerable<(T1, T2)>) Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json . Values can be null , but not keys. Corresponds to the PostgreSQL json_object_agg aggregate function. Declaration public static string JsonObjectAgg<T1, T2>(this DbFunctions _, IEnumerable<(T1, T2)> keyValuePairs) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) <T1, T2>> keyValuePairs An enumerable of key-value pairs to be aggregated into a JSON object. Returns Type Description String Type Parameters Name Description T1 T2 See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source JsonObjectAgg<T1, T2, TReturn>(DbFunctions, IEnumerable<(T1, T2)>) Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json . Values can be null , but not keys. Corresponds to the PostgreSQL json_object_agg aggregate function. Declaration public static TReturn JsonObjectAgg<T1, T2, TReturn>(this DbFunctions _, IEnumerable<(T1, T2)> keyValuePairs) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) <T1, T2>> keyValuePairs An enumerable of key-value pairs to be aggregated into a JSON object. Returns Type Description TReturn Type Parameters Name Description T1 T2 TReturn See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source RegrAverageX(DbFunctions, IEnumerable<(Double, Double)>) Computes the average of the independent variable, sum(X)/N . Corresponds to the PostgreSQL regr_avgx function. Declaration public static double? RegrAverageX(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source RegrAverageY(DbFunctions, IEnumerable<(Double, Double)>) Computes the average of the dependent variable, sum(Y)/N . Corresponds to the PostgreSQL regr_avgy function. Declaration public static double? RegrAverageY(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source RegrCount(DbFunctions, IEnumerable<(Double, Double)>) Computes the number of rows in which both inputs are non-null. Corresponds to the PostgreSQL regr_count function. Declaration public static long? RegrCount(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Int64 > | Improve this Doc View Source RegrIntercept(DbFunctions, IEnumerable<(Double, Double)>) Computes the y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs. Corresponds to the PostgreSQL regr_intercept function. Declaration public static double? RegrIntercept(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source RegrR2(DbFunctions, IEnumerable<(Double, Double)>) Computes the square of the correlation coefficient. Corresponds to the PostgreSQL regr_r2 function. Declaration public static double? RegrR2(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source RegrSlope(DbFunctions, IEnumerable<(Double, Double)>) Computes the slope of the least-squares-fit linear equation determined by the (X, Y) pairs. Corresponds to the PostgreSQL regr_slope function. Declaration public static double? RegrSlope(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source RegrSXX(DbFunctions, IEnumerable<(Double, Double)>) Computes the “sum of squares” of the independent variable, sum(X^2) - sum(X)^2/N . Corresponds to the PostgreSQL regr_sxx function. Declaration public static double? RegrSXX(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source RegrSXY(DbFunctions, IEnumerable<(Double, Double)>) Computes the “sum of products” of independent times dependent variables, sum(X*Y) - sum(X) * sum(Y)/N . Corresponds to the PostgreSQL regr_sxy function. Declaration public static double? RegrSXY(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < (, ) < Double , Double >> values The values. Returns Type Description Nullable < Double > | Improve this Doc View Source StandardDeviationPopulation(DbFunctions, IEnumerable<Byte>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<byte> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Byte > values The values. Returns Type Description Nullable < Double > The computed population standard deviation. | Improve this Doc View Source StandardDeviationPopulation(DbFunctions, IEnumerable<Decimal>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<decimal> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Decimal > values The values. Returns Type Description Nullable < Double > The computed population standard deviation. | Improve this Doc View Source StandardDeviationPopulation(DbFunctions, IEnumerable<Double>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<double> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Double > values The values. Returns Type Description Nullable < Double > The computed population standard deviation. | Improve this Doc View Source StandardDeviationPopulation(DbFunctions, IEnumerable<Int16>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<short> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int16 > values The values. Returns Type Description Nullable < Double > The computed population standard deviation. | Improve this Doc View Source StandardDeviationPopulation(DbFunctions, IEnumerable<Int32>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<int> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int32 > values The values. Returns Type Description Nullable < Double > The computed population standard deviation. | Improve this Doc View Source StandardDeviationPopulation(DbFunctions, IEnumerable<Int64>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<long> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int64 > values The values. Returns Type Description Nullable < Double > The computed population standard deviation. | Improve this Doc View Source StandardDeviationPopulation(DbFunctions, IEnumerable<Single>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<float> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Single > values The values. Returns Type Description Nullable < Double > The computed population standard deviation. | Improve this Doc View Source StandardDeviationSample(DbFunctions, IEnumerable<Byte>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<byte> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Byte > values The values. Returns Type Description Nullable < Double > The computed sample standard deviation. | Improve this Doc View Source StandardDeviationSample(DbFunctions, IEnumerable<Decimal>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<decimal> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Decimal > values The values. Returns Type Description Nullable < Double > The computed sample standard deviation. | Improve this Doc View Source StandardDeviationSample(DbFunctions, IEnumerable<Double>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<double> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Double > values The values. Returns Type Description Nullable < Double > The computed sample standard deviation. | Improve this Doc View Source StandardDeviationSample(DbFunctions, IEnumerable<Int16>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<short> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int16 > values The values. Returns Type Description Nullable < Double > The computed sample standard deviation. | Improve this Doc View Source StandardDeviationSample(DbFunctions, IEnumerable<Int32>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<int> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int32 > values The values. Returns Type Description Nullable < Double > The computed sample standard deviation. | Improve this Doc View Source StandardDeviationSample(DbFunctions, IEnumerable<Int64>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<long> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int64 > values The values. Returns Type Description Nullable < Double > The computed sample standard deviation. | Improve this Doc View Source StandardDeviationSample(DbFunctions, IEnumerable<Single>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<float> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Single > values The values. Returns Type Description Nullable < Double > The computed sample standard deviation. | Improve this Doc View Source Sum(DbFunctions, IEnumerable<TimeSpan>) Computes the sum of the non-null input intervals. Corresponds to the PostgreSQL sum aggregate function. Declaration public static TimeSpan? Sum(this DbFunctions _, IEnumerable<TimeSpan> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < TimeSpan > input The input values to be summed. Returns Type Description Nullable < TimeSpan > See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source VariancePopulation(DbFunctions, IEnumerable<Byte>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<byte> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Byte > values The values. Returns Type Description Nullable < Double > The computed population variance. | Improve this Doc View Source VariancePopulation(DbFunctions, IEnumerable<Decimal>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<decimal> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Decimal > values The values. Returns Type Description Nullable < Double > The computed population variance. | Improve this Doc View Source VariancePopulation(DbFunctions, IEnumerable<Double>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<double> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Double > values The values. Returns Type Description Nullable < Double > The computed population variance. | Improve this Doc View Source VariancePopulation(DbFunctions, IEnumerable<Int16>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<short> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int16 > values The values. Returns Type Description Nullable < Double > The computed population variance. | Improve this Doc View Source VariancePopulation(DbFunctions, IEnumerable<Int32>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<int> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int32 > values The values. Returns Type Description Nullable < Double > The computed population variance. | Improve this Doc View Source VariancePopulation(DbFunctions, IEnumerable<Int64>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<long> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int64 > values The values. Returns Type Description Nullable < Double > The computed population variance. | Improve this Doc View Source VariancePopulation(DbFunctions, IEnumerable<Single>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<float> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Single > values The values. Returns Type Description Nullable < Double > The computed population variance. | Improve this Doc View Source VarianceSample(DbFunctions, IEnumerable<Byte>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<byte> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Byte > values The values. Returns Type Description Nullable < Double > The computed sample variance. | Improve this Doc View Source VarianceSample(DbFunctions, IEnumerable<Decimal>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<decimal> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Decimal > values The values. Returns Type Description Nullable < Double > The computed sample variance. | Improve this Doc View Source VarianceSample(DbFunctions, IEnumerable<Double>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<double> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Double > values The values. Returns Type Description Nullable < Double > The computed sample variance. | Improve this Doc View Source VarianceSample(DbFunctions, IEnumerable<Int16>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<short> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int16 > values The values. Returns Type Description Nullable < Double > The computed sample variance. | Improve this Doc View Source VarianceSample(DbFunctions, IEnumerable<Int32>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<int> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int32 > values The values. Returns Type Description Nullable < Double > The computed sample variance. | Improve this Doc View Source VarianceSample(DbFunctions, IEnumerable<Int64>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<long> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Int64 > values The values. Returns Type Description Nullable < Double > The computed sample variance. | Improve this Doc View Source VarianceSample(DbFunctions, IEnumerable<Single>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<float> values) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Single > values The values. Returns Type Description Nullable < Double > The computed sample variance."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAlterDatabaseOperationExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAlterDatabaseOperationExtensions.html",
    "title": "Class NpgsqlAlterDatabaseOperationExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlAlterDatabaseOperationExtensions Extension methods for for Npgsql-specific metadata. Inheritance Object NpgsqlAlterDatabaseOperationExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlAlterDatabaseOperationExtensions : object Methods | Improve this Doc View Source GetOldPostgresCollations(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresCollation> GetOldPostgresCollations(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList < PostgresCollation > | Improve this Doc View Source GetOldPostgresEnums(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresEnum> GetOldPostgresEnums(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList < PostgresEnum > | Improve this Doc View Source GetOldPostgresExtensions(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresExtension> GetOldPostgresExtensions(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList < PostgresExtension > | Improve this Doc View Source GetOldPostgresRanges(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresRange> GetOldPostgresRanges(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList < PostgresRange > | Improve this Doc View Source GetOrAddPostgresExtension(AlterDatabaseOperation, Nullable<String>, String, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresExtension GetOrAddPostgresExtension(this AlterDatabaseOperation operation, string? schema, string name, string? version) Parameters Type Name Description AlterDatabaseOperation operation Nullable < String > schema String name Nullable < String > version Returns Type Description PostgresExtension | Improve this Doc View Source GetPostgresCollations(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresCollation> GetPostgresCollations(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList < PostgresCollation > | Improve this Doc View Source GetPostgresEnums(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresEnum> GetPostgresEnums(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList < PostgresEnum > | Improve this Doc View Source GetPostgresExtensions(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresExtension> GetPostgresExtensions(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList < PostgresExtension > | Improve this Doc View Source GetPostgresRanges(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresRange> GetPostgresRanges(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList < PostgresRange >"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseFacadeExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseFacadeExtensions.html",
    "title": "Class NpgsqlDatabaseFacadeExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseFacadeExtensions Npgsql specific extension methods for . Inheritance Object NpgsqlDatabaseFacadeExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDatabaseFacadeExtensions : object Methods | Improve this Doc View Source IsNpgsql(DatabaseFacade) Returns true if the database provider currently in use is the Npgsql provider. This method can only be used after the has been configured because it is only then that the provider is known. This means that this method cannot be used in because this is where application code sets the provider to use as part of configuring the context. Declaration public static bool IsNpgsql(this DatabaseFacade database) Parameters Type Name Description DatabaseFacade database The facade from . Returns Type Description Boolean True if Npgsql is being used; false otherwise. | Improve this Doc View Source SetDbDataSource(DatabaseFacade, DbDataSource) Sets the underlying configured for this . Declaration public static void SetDbDataSource(this DatabaseFacade databaseFacade, DbDataSource dataSource) Parameters Type Name Description DatabaseFacade databaseFacade The for the context. DbDataSource dataSource The connection string. Remarks It may not be possible to change the data source if existing connection, if any, is open. See Connections and connection strings for more information and examples."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseModelExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseModelExtensions.html",
    "title": "Class NpgsqlDatabaseModelExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseModelExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlDatabaseModelExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDatabaseModelExtensions : object Methods | Improve this Doc View Source GetOrAddPostgresExtension(DatabaseModel, Nullable<String>, String, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresExtension GetOrAddPostgresExtension(this DatabaseModel model, string? schema, string name, string? version) Parameters Type Name Description DatabaseModel model Nullable < String > schema String name Nullable < String > version Returns Type Description PostgresExtension | Improve this Doc View Source GetPostgresEnums(DatabaseModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresEnum> GetPostgresEnums(this DatabaseModel model) Parameters Type Name Description DatabaseModel model Returns Type Description IReadOnlyList < PostgresEnum > | Improve this Doc View Source GetPostgresExtensions(DatabaseModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresExtension> GetPostgresExtensions(this DatabaseModel model) Parameters Type Name Description DatabaseModel model Returns Type Description IReadOnlyList < PostgresExtension >"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsBuilderExtensions.html",
    "title": "Class NpgsqlDbContextOptionsBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDbContextOptionsBuilderExtensions Provides extension methods on and used to configure a to context to a PostgreSQL database with Npgsql. Inheritance Object NpgsqlDbContextOptionsBuilderExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDbContextOptionsBuilderExtensions : object Methods | Improve this Doc View Source UseNpgsql(DbContextOptionsBuilder, DbConnection, Nullable<Action<NpgsqlDbContextOptionsBuilder>>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, DbConnection connection, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder A builder for setting options on the context. DbConnection connection An existing to be used to connect to the database. If the connection is in the open state then EF will not open or close the connection. If the connection is in the closed state then EF will open and close the connection as needed. Nullable < Action < NpgsqlDbContextOptionsBuilder >> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Improve this Doc View Source UseNpgsql(DbContextOptionsBuilder, DbDataSource, Nullable<Action<NpgsqlDbContextOptionsBuilder>>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, DbDataSource dataSource, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder A builder for setting options on the context. DbDataSource dataSource A which will be used to get database connections. Nullable < Action < NpgsqlDbContextOptionsBuilder >> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Improve this Doc View Source UseNpgsql(DbContextOptionsBuilder, Nullable<Action<NpgsqlDbContextOptionsBuilder>>) Configures the context to connect to a PostgreSQL server with Npgsql, but without initially setting any or connection string. The connection or connection string must be set before the is used to connect to a database. Set a connection using . Set a connection string using . Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder The builder being used to configure the context. Nullable < Action < NpgsqlDbContextOptionsBuilder >> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Improve this Doc View Source UseNpgsql(DbContextOptionsBuilder, Nullable<String>, Nullable<Action<NpgsqlDbContextOptionsBuilder>>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, string? connectionString, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder A builder for setting options on the context. Nullable < String > connectionString The connection string of the database to connect to. Nullable < Action < NpgsqlDbContextOptionsBuilder >> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Improve this Doc View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, DbConnection, Nullable<Action<NpgsqlDbContextOptionsBuilder>>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, DbConnection connection, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder <TContext> optionsBuilder A builder for setting options on the context. DbConnection connection An existing to be used to connect to the database. If the connection is in the open state then EF will not open or close the connection. If the connection is in the closed state then EF will open and close the connection as needed. Nullable < Action < NpgsqlDbContextOptionsBuilder >> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder <TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext | Improve this Doc View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, DbDataSource, Nullable<Action<NpgsqlDbContextOptionsBuilder>>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, DbDataSource dataSource, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder <TContext> optionsBuilder A builder for setting options on the context. DbDataSource dataSource A which will be used to get database connections. Nullable < Action < NpgsqlDbContextOptionsBuilder >> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder <TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext | Improve this Doc View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, Nullable<Action<NpgsqlDbContextOptionsBuilder>>) Configures the context to connect to a PostgreSQL server with Npgsql, but without initially setting any , or connection string. The connection, data source or connection string must be set before the is used to connect to a database. Set a connection using , a data source using SetDbDataSource(DatabaseFacade, DbDataSource) , or a connection string using . Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder <TContext> optionsBuilder The builder being used to configure the context. Nullable < Action < NpgsqlDbContextOptionsBuilder >> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder <TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext | Improve this Doc View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, Nullable<String>, Nullable<Action<NpgsqlDbContextOptionsBuilder>>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, string? connectionString, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder <TContext> optionsBuilder A builder for setting options on the context. Nullable < String > connectionString The connection string of the database to connect to. Nullable < Action < NpgsqlDbContextOptionsBuilder >> npgsqlOptionsAction An optional action to allow additional Npgsql-configuration. Returns Type Description DbContextOptionsBuilder <TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbFunctionsExtensions.html",
    "title": "Class NpgsqlDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDbFunctionsExtensions Provides Npgsql-specific extension methods on . Inheritance Object NpgsqlDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDbFunctionsExtensions : object Methods | Improve this Doc View Source Distance(DbFunctions, DateOnly, DateOnly) Returns the distance between two dates as a number of days, particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, DateOnly a, DateOnly b) Parameters Type Name Description DbFunctions _ DateOnly a DateOnly b Returns Type Description Int32 Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html . | Improve this Doc View Source Distance(DbFunctions, DateTime, DateTime) Returns the distance between two timestamps as a PostgreSQL interval , particularly suitable for sorting where the appropriate index is defined. Declaration public static TimeSpan Distance(this DbFunctions _, DateTime a, DateTime b) Parameters Type Name Description DbFunctions _ DateTime a DateTime b Returns Type Description TimeSpan Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html . | Improve this Doc View Source GreaterThan(DbFunctions, ITuple, ITuple) Returns whether the row value represented by a is greater than the row value represented by b . Declaration public static bool GreaterThan(this DbFunctions _, ITuple a, ITuple b) Parameters Type Name Description DbFunctions _ ITuple a ITuple b Returns Type Description Boolean Remarks For more information on row value comparisons, see the PostgreSQL documentation . | Improve this Doc View Source GreaterThanOrEqual(DbFunctions, ITuple, ITuple) Returns whether the row value represented by a is greater than or equal to the row value represented by b . Declaration public static bool GreaterThanOrEqual(this DbFunctions _, ITuple a, ITuple b) Parameters Type Name Description DbFunctions _ ITuple a ITuple b Returns Type Description Boolean Remarks For more information on row value comparisons, see the PostgreSQL documentation . | Improve this Doc View Source ILike(DbFunctions, String, String) An implementation of the PostgreSQL ILIKE operation, which is an insensitive LIKE. Declaration public static bool ILike(this DbFunctions _, string matchExpression, string pattern) Parameters Type Name Description DbFunctions _ The instance. String matchExpression The string that is to be matched. String pattern The pattern which may involve wildcards %,_,[,],^. Returns Type Description Boolean true if there is a match. | Improve this Doc View Source ILike(DbFunctions, String, String, String) An implementation of the PostgreSQL ILIKE operation, which is an insensitive LIKE. Declaration public static bool ILike(this DbFunctions _, string matchExpression, string pattern, string escapeCharacter) Parameters Type Name Description DbFunctions _ The instance. String matchExpression The string that is to be matched. String pattern The pattern which may involve wildcards %,_,[,],^. String escapeCharacter The escape character (as a single character string) to use in front of %,_,[,],^ if they are not used as wildcards. Returns Type Description Boolean true if there is a match. | Improve this Doc View Source LessThan(DbFunctions, ITuple, ITuple) Returns whether the row value represented by a is less than the row value represented by b . Declaration public static bool LessThan(this DbFunctions _, ITuple a, ITuple b) Parameters Type Name Description DbFunctions _ ITuple a ITuple b Returns Type Description Boolean Remarks For more information on row value comparisons, see the PostgreSQL documentation . | Improve this Doc View Source LessThanOrEqual(DbFunctions, ITuple, ITuple) Returns whether the row value represented by a is less than or equal to the row value represented by b . Declaration public static bool LessThanOrEqual(this DbFunctions _, ITuple a, ITuple b) Parameters Type Name Description DbFunctions _ ITuple a ITuple b Returns Type Description Boolean Remarks For more information on row value comparisons, see the PostgreSQL documentation . | Improve this Doc View Source Reverse(DbFunctions, String) Reverses a string by calling PostgreSQL reverse() . Declaration public static string Reverse(this DbFunctions _, string value) Parameters Type Name Description DbFunctions _ The instance. String value The string that is to be reversed. Returns Type Description String The reversed string."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeBuilderExtensions.html",
    "title": "Class NpgsqlEntityTypeBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlEntityTypeBuilderExtensions Npgsql-specific extension methods for . Inheritance Object NpgsqlEntityTypeBuilderExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEntityTypeBuilderExtensions : object Remarks See Modeling entity types and relationships . Methods | Improve this Doc View Source CanSetIsUnlogged(IConventionEntityTypeBuilder, Boolean, Boolean) Returns a value indicating whether the mapped table can be configured to use an unlogged table when targeting Npgsql. Declaration public static bool CanSetIsUnlogged(this IConventionEntityTypeBuilder entityTypeBuilder, bool unlogged = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. Boolean unlogged True to configure the entity to use an unlogged table; otherwise, false. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source CanSetStorageParameter(IConventionEntityTypeBuilder, String, Nullable<Object>, Boolean) Returns a value indicating whether the PostgreSQL storage parameter on the table created for this entity. Declaration public static bool CanSetStorageParameter(this IConventionEntityTypeBuilder entityTypeBuilder, string parameterName, object? parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. String parameterName The name of the storage parameter. Nullable < Object > parameterValue The value of the storage parameter. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the mapped table can be configured as with the storage parameter. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source HasGeneratedTsVectorColumn<TEntity>(EntityTypeBuilder<TEntity>, Expression<Func<TEntity, NpgsqlTsVector>>, String, Expression<Func<TEntity, Object>>) Configures a property on this entity to be a full-text search tsvector column over other given properties. Declaration public static EntityTypeBuilder<TEntity> HasGeneratedTsVectorColumn<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, Expression<Func<TEntity, NpgsqlTsVector>> tsVectorPropertyExpression, string config, Expression<Func<TEntity, object>> includeExpression) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity being configured. Expression < Func <TEntity, NpgsqlTsVector >> tsVectorPropertyExpression A lambda expression representing the property to be configured as a tsvector column ( blog => blog.Url ). String config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Expression < Func <TEntity, Object >> includeExpression A lambda expression representing the property(s) to be included in the tsvector column ( blog => blog.Url ). If multiple properties are to be included then specify an anonymous type including the properties ( post => new { post.Title, post.BlogId } ). Returns Type Description EntityTypeBuilder <TEntity> A builder to further configure the property. Type Parameters Name Description TEntity | Improve this Doc View Source HasStorageParameter(EntityTypeBuilder, String, Nullable<Object>) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration public static EntityTypeBuilder HasStorageParameter(this EntityTypeBuilder entityTypeBuilder, string parameterName, object? parameterValue) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. String parameterName The name of the storage parameter. Nullable < Object > parameterValue The value of the storage parameter. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source HasStorageParameter(IConventionEntityTypeBuilder, String, Nullable<Object>, Boolean) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration public static IConventionEntityTypeBuilder? HasStorageParameter(this IConventionEntityTypeBuilder entityTypeBuilder, string parameterName, object? parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. String parameterName The name of the storage parameter. Nullable < Object > parameterValue The value of the storage parameter. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionEntityTypeBuilder > The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source HasStorageParameter<TEntity>(EntityTypeBuilder<TEntity>, String, Nullable<Object>) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration public static EntityTypeBuilder<TEntity> HasStorageParameter<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, string parameterName, object? parameterValue) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. String parameterName The name of the storage parameter. Nullable < Object > parameterValue The value of the storage parameter. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source IsUnlogged(EntityTypeBuilder, Boolean) Configures the entity to use an unlogged table when targeting Npgsql. Declaration public static EntityTypeBuilder IsUnlogged(this EntityTypeBuilder entityTypeBuilder, bool unlogged = true) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. Boolean unlogged True to configure the entity to use an unlogged table; otherwise, false. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source IsUnlogged(IConventionEntityTypeBuilder, Boolean, Boolean) Configures the mapped table to use an unlogged table when targeting Npgsql. Declaration public static IConventionEntityTypeBuilder? IsUnlogged(this IConventionEntityTypeBuilder entityTypeBuilder, bool unlogged = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. Boolean unlogged True to configure the entity to use an unlogged table; otherwise, false. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionEntityTypeBuilder > The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source IsUnlogged<TEntity>(EntityTypeBuilder<TEntity>, Boolean) Configures the mapped table to use an unlogged table when targeting Npgsql. Declaration public static EntityTypeBuilder<TEntity> IsUnlogged<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, bool unlogged = true) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. Boolean unlogged True to configure the entity to use an unlogged table; otherwise, false. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source UseCockroachDbInterleaveInParent(EntityTypeBuilder, Type, List<String>) Specifies that the CockroachDB-specific \"interleave in parent\" feature should be used. Declaration public static EntityTypeBuilder UseCockroachDbInterleaveInParent(this EntityTypeBuilder entityTypeBuilder, Type parentTableType, List<string> interleavePrefix) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder Type parentTableType List < String > interleavePrefix Returns Type Description EntityTypeBuilder | Improve this Doc View Source UseCockroachDbInterleaveInParent<TEntity>(EntityTypeBuilder<TEntity>, Type, List<String>) Specifies that the CockroachDB-specific \"interleave in parent\" feature should be used. Declaration public static EntityTypeBuilder<TEntity> UseCockroachDbInterleaveInParent<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, Type parentTableType, List<string> interleavePrefix) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder Type parentTableType List < String > interleavePrefix Returns Type Description EntityTypeBuilder <TEntity> Type Parameters Name Description TEntity | Improve this Doc View Source UseXminAsConcurrencyToken(EntityTypeBuilder) Configures using the auto-updating system column xmin as the optimistic concurrency token. Declaration public static EntityTypeBuilder UseXminAsConcurrencyToken(this EntityTypeBuilder entityTypeBuilder) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See Concurrency tokens for more information on using optimistic concurrency in PostgreSQL. | Improve this Doc View Source UseXminAsConcurrencyToken<TEntity>(EntityTypeBuilder<TEntity>) Configures using the auto-updating system column xmin as the optimistic concurrency token. Declaration public static EntityTypeBuilder<TEntity> UseXminAsConcurrencyToken<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See http://www.npgsql.org/efcore/miscellaneous.html#optimistic-concurrency-and-concurrency-tokens"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeExtensions.html",
    "title": "Class NpgsqlEntityTypeExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlEntityTypeExtensions Extension methods for for Npgsql-specific metadata. Inheritance Object NpgsqlEntityTypeExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEntityTypeExtensions : object Methods | Improve this Doc View Source GetCockroachDbInterleaveInParent(IReadOnlyEntityType) Gets the CockroachDB-specific interleave-in-parent setting for the table to which the entity is mapped. Declaration public static CockroachDbInterleaveInParent GetCockroachDbInterleaveInParent(this IReadOnlyEntityType entityType) Parameters Type Name Description IReadOnlyEntityType entityType Returns Type Description CockroachDbInterleaveInParent | Improve this Doc View Source GetIsUnlogged(IReadOnlyEntityType) Gets whether the table to which the entity is mapped is unlogged. Declaration public static bool GetIsUnlogged(this IReadOnlyEntityType entityType) Parameters Type Name Description IReadOnlyEntityType entityType Returns Type Description Boolean | Improve this Doc View Source GetIsUnloggedConfigurationSource(IConventionEntityType) Gets the configuration source for whether the table to which the entity is mapped is unlogged. Declaration public static ConfigurationSource? GetIsUnloggedConfigurationSource(this IConventionEntityType index) Parameters Type Name Description IConventionEntityType index Returns Type Description Nullable < ConfigurationSource > | Improve this Doc View Source GetStorageParameter(IEntityType, String) Gets a table storage parameter for the table mapped to the entity type. Declaration public static string? GetStorageParameter(this IEntityType entityType, string parameterName) Parameters Type Name Description IEntityType entityType String parameterName Returns Type Description Nullable < String > | Improve this Doc View Source GetStorageParameterConfigurationSource(IConventionEntityType, String) Gets the configuration source fo a table storage parameter for the table mapped to the entity type. Declaration public static ConfigurationSource? GetStorageParameterConfigurationSource(this IConventionEntityType index, string parameterName) Parameters Type Name Description IConventionEntityType index String parameterName Returns Type Description Nullable < ConfigurationSource > | Improve this Doc View Source GetStorageParameters(IReadOnlyEntityType) Gets all table storage parameters for the table mapped to the entity type. Declaration public static Dictionary<string, object?> GetStorageParameters(this IReadOnlyEntityType entityType) Parameters Type Name Description IReadOnlyEntityType entityType Returns Type Description Dictionary < String , Nullable < Object >> | Improve this Doc View Source SetIsUnlogged(IConventionEntityType, Boolean, Boolean) Sets whether the table to which the entity is mapped is unlogged. Declaration public static bool SetIsUnlogged(this IConventionEntityType entityType, bool unlogged, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityType entityType Boolean unlogged Boolean fromDataAnnotation Returns Type Description Boolean | Improve this Doc View Source SetIsUnlogged(IMutableEntityType, Boolean) Sets whether the table to which the entity is mapped is unlogged. Declaration public static void SetIsUnlogged(this IMutableEntityType entityType, bool unlogged) Parameters Type Name Description IMutableEntityType entityType Boolean unlogged | Improve this Doc View Source SetStorageParameter(IConventionEntityType, String, Nullable<Object>, Boolean) Sets a table storage parameter for the table mapped to the entity type. Declaration public static object SetStorageParameter(this IConventionEntityType entityType, string parameterName, object? parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityType entityType String parameterName Nullable < Object > parameterValue Boolean fromDataAnnotation Returns Type Description Object | Improve this Doc View Source SetStorageParameter(IMutableEntityType, String, Nullable<Object>) Sets a table storage parameter for the table mapped to the entity type. Declaration public static void SetStorageParameter(this IMutableEntityType entityType, string parameterName, object? parameterValue) Parameters Type Name Description IMutableEntityType entityType String parameterName Nullable < Object > parameterValue"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchDbFunctionsExtensions.html",
    "title": "Class NpgsqlFullTextSearchDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlFullTextSearchDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via . Inheritance Object NpgsqlFullTextSearchDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlFullTextSearchDbFunctionsExtensions : object Remarks See Database functions . Methods | Improve this Doc View Source ArrayToTsVector(DbFunctions, String[]) Convert lexemes to a tsvector. Declaration public static NpgsqlTsVector ArrayToTsVector(this DbFunctions _, string[] lexemes) Parameters Type Name Description DbFunctions _ String [] lexemes Returns Type Description NpgsqlTsVector Remarks https://www.postgresql.org/docs/current/static/functions-textsearch.html | Improve this Doc View Source PhraseToTsQuery(DbFunctions, String) Produce tsquery that searches for a phrase from query ignoring punctuation. Declaration public static NpgsqlTsQuery PhraseToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source PhraseToTsQuery(DbFunctions, String, String) Produce tsquery that searches for a phrase from query ignoring punctuation and using the text search configuration specified by config . Declaration public static NpgsqlTsQuery PhraseToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ String config String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source PlainToTsQuery(DbFunctions, String) Produce tsquery from query ignoring punctuation. Declaration public static NpgsqlTsQuery PlainToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source PlainToTsQuery(DbFunctions, String, String) Produce tsquery from query ignoring punctuation and using the text search configuration specified by config . Declaration public static NpgsqlTsQuery PlainToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ String config String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source ToTsQuery(DbFunctions, String) Normalize words in query and convert to tsquery. If your input contains punctuation that should not be treated as text search operators, use PlainToTsQuery(DbFunctions, String) instead. Declaration public static NpgsqlTsQuery ToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source ToTsQuery(DbFunctions, String, String) Normalize words in query and convert to tsquery using the text search configuration specified by config . If your input contains punctuation that should not be treated as text search operators, use PlainToTsQuery(DbFunctions, String, String) instead. Declaration public static NpgsqlTsQuery ToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ String config String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source ToTsVector(DbFunctions, String) Reduce document to tsvector. Declaration public static NpgsqlTsVector ToTsVector(this DbFunctions _, string document) Parameters Type Name Description DbFunctions _ String document Returns Type Description NpgsqlTsVector Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-DOCUMENTS | Improve this Doc View Source ToTsVector(DbFunctions, String, String) Reduce document to tsvector using the text search configuration specified by config . Declaration public static NpgsqlTsVector ToTsVector(this DbFunctions _, string config, string document) Parameters Type Name Description DbFunctions _ String config String document Returns Type Description NpgsqlTsVector Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-DOCUMENTS | Improve this Doc View Source Unaccent(DbFunctions, String) Returns a new string that removes diacritics from characters in the given text . Declaration public static string Unaccent(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ The instance. String text The text to remove the diacritics. Returns Type Description String A string without diacritics. Remarks The method call is translated to unaccent(text) . See https://www.postgresql.org/docs/current/unaccent.html . | Improve this Doc View Source Unaccent(DbFunctions, String, String) Returns a new string that removes diacritics from characters in the given text . Declaration public static string Unaccent(this DbFunctions _, string regDictionary, string text) Parameters Type Name Description DbFunctions _ The instance. String regDictionary A specific text search dictionary. String text The text to remove the diacritics. Returns Type Description String A string without diacritics. Remarks The method call is translated to unaccent(regdictionary, text) . See https://www.postgresql.org/docs/current/unaccent.html . | Improve this Doc View Source WebSearchToTsQuery(DbFunctions, String) Convert query tsquery using the simplified websearch syntax. Declaration public static NpgsqlTsQuery WebSearchToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source WebSearchToTsQuery(DbFunctions, String, String) Convert query tsquery using the simplified websearch syntax and the text search configuration specified by config . Declaration public static NpgsqlTsQuery WebSearchToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ String config String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchLinqExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchLinqExtensions.html",
    "title": "Class NpgsqlFullTextSearchLinqExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlFullTextSearchLinqExtensions Provides EF Core extension methods for Npgsql full-text search types. Inheritance Object NpgsqlFullTextSearchLinqExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlFullTextSearchLinqExtensions : object Methods | Improve this Doc View Source And(NpgsqlTsQuery, NpgsqlTsQuery) AND tsquerys together. Generates the \"&&\" operator. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery And(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description NpgsqlTsQuery | Improve this Doc View Source Concat(NpgsqlTsVector, NpgsqlTsVector) Returns a vector which combines the lexemes and positional information of vector1 and vector2 using the || tsvector operator. Positions and weight labels are retained during the concatenation. https://www.postgresql.org/docs/10/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector Concat(this NpgsqlTsVector vector1, NpgsqlTsVector vector2) Parameters Type Name Description NpgsqlTsVector vector1 NpgsqlTsVector vector2 Returns Type Description NpgsqlTsVector | Improve this Doc View Source Contains(NpgsqlTsQuery, NpgsqlTsQuery) Returns whether query1 contains query2 . Generates the &quot;@>\" operator. http://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static bool Contains(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description Boolean | Improve this Doc View Source Delete(NpgsqlTsVector, String) Return a new vector with lexeme removed from vector https://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static NpgsqlTsVector Delete(this NpgsqlTsVector vector, string lexeme) Parameters Type Name Description NpgsqlTsVector vector String lexeme Returns Type Description NpgsqlTsVector | Improve this Doc View Source Delete(NpgsqlTsVector, String[]) Return a new vector with lexemes removed from vector https://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static NpgsqlTsVector Delete(this NpgsqlTsVector vector, string[] lexemes) Parameters Type Name Description NpgsqlTsVector vector String [] lexemes Returns Type Description NpgsqlTsVector | Improve this Doc View Source Filter(NpgsqlTsVector, Char[]) Returns a new vector with only lexemes having weights specified in weights . https://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static NpgsqlTsVector Filter(this NpgsqlTsVector vector, char[] weights) Parameters Type Name Description NpgsqlTsVector vector Char [] weights Returns Type Description NpgsqlTsVector | Improve this Doc View Source GetLength(NpgsqlTsVector) Returns the number of lexemes in vector . http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static int GetLength(this NpgsqlTsVector vector) Parameters Type Name Description NpgsqlTsVector vector Returns Type Description Int32 | Improve this Doc View Source GetNodeCount(NpgsqlTsQuery) Returns the number of lexemes plus operators in query . http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static int GetNodeCount(this NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsQuery query Returns Type Description Int32 | Improve this Doc View Source GetQueryTree(NpgsqlTsQuery) Get the indexable part of query . http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static string GetQueryTree(this NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsQuery query Returns Type Description String | Improve this Doc View Source GetResultHeadline(NpgsqlTsQuery, String) Returns a string suitable for display containing a query match. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-HEADLINE Declaration public static string GetResultHeadline(this NpgsqlTsQuery query, string document) Parameters Type Name Description NpgsqlTsQuery query String document Returns Type Description String | Improve this Doc View Source GetResultHeadline(NpgsqlTsQuery, String, String) Returns a string suitable for display containing a query match. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-HEADLINE Declaration public static string GetResultHeadline(this NpgsqlTsQuery query, string document, string options) Parameters Type Name Description NpgsqlTsQuery query String document String options Returns Type Description String | Improve this Doc View Source GetResultHeadline(NpgsqlTsQuery, String, String, String) Returns a string suitable for display containing a query match using the text search configuration specified by config . http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-HEADLINE Declaration public static string GetResultHeadline(this NpgsqlTsQuery query, string config, string document, string options) Parameters Type Name Description NpgsqlTsQuery query String config String document String options Returns Type Description String | Improve this Doc View Source IsContainedIn(NpgsqlTsQuery, NpgsqlTsQuery) Returns whether query1 is contained within query2 . Generates the &quot;&lt;@\" operator. http://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static bool IsContainedIn(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description Boolean | Improve this Doc View Source Matches(NpgsqlTsVector, NpgsqlTsQuery) This method generates the &quot;@@\" match operator. http://www.postgresql.org/docs/current/static/textsearch-intro.html#TEXTSEARCH-MATCHING Declaration public static bool Matches(this NpgsqlTsVector vector, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query Returns Type Description Boolean | Improve this Doc View Source Matches(NpgsqlTsVector, String) This method generates the &quot;@@\" match operator. The query parameter is assumed to be a plain search query and will be converted to a tsquery using plainto_tsquery. http://www.postgresql.org/docs/current/static/textsearch-intro.html#TEXTSEARCH-MATCHING Declaration public static bool Matches(this NpgsqlTsVector vector, string query) Parameters Type Name Description NpgsqlTsVector vector String query Returns Type Description Boolean | Improve this Doc View Source Or(NpgsqlTsQuery, NpgsqlTsQuery) OR tsquerys together. Generates the \"||\" operator. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery Or(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description NpgsqlTsQuery | Improve this Doc View Source Rank(NpgsqlTsVector, NpgsqlTsQuery) Calculates the rank of vector for query . http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query Returns Type Description Single | Improve this Doc View Source Rank(NpgsqlTsVector, NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query while normalizing the result according to the behaviors specified by normalization . http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description Single | Improve this Doc View Source Rank(NpgsqlTsVector, Single[], NpgsqlTsQuery) Calculates the rank of vector for query with custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector Single [] weights NpgsqlTsQuery query Returns Type Description Single | Improve this Doc View Source Rank(NpgsqlTsVector, Single[], NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query while normalizing the result according to the behaviors specified by normalization and using custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector Single [] weights NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description Single | Improve this Doc View Source RankCoverDensity(NpgsqlTsVector, NpgsqlTsQuery) Calculates the rank of vector for query using the cover density method. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query Returns Type Description Single | Improve this Doc View Source RankCoverDensity(NpgsqlTsVector, NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query using the cover density method while normalizing the result according to the behaviors specified by normalization . http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description Single | Improve this Doc View Source RankCoverDensity(NpgsqlTsVector, Single[], NpgsqlTsQuery) Calculates the rank of vector for query using the cover density method with custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector Single [] weights NpgsqlTsQuery query Returns Type Description Single | Improve this Doc View Source RankCoverDensity(NpgsqlTsVector, Single[], NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query using the cover density method while normalizing the result according to the behaviors specified by normalization and using custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector Single [] weights NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description Single | Improve this Doc View Source Rewrite(NpgsqlTsQuery, NpgsqlTsQuery, NpgsqlTsQuery) Searches query for occurrences of target , and replaces each occurrence with a substitute . All parameters are of type tsquery. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery Rewrite(this NpgsqlTsQuery query, NpgsqlTsQuery target, NpgsqlTsQuery substitute) Parameters Type Name Description NpgsqlTsQuery query NpgsqlTsQuery target NpgsqlTsQuery substitute Returns Type Description NpgsqlTsQuery | Improve this Doc View Source SetWeight(NpgsqlTsVector, NpgsqlTsVector.Lexeme.Weight) Assign weight to each element of vector and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, NpgsqlTsVector.Lexeme.Weight weight) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsVector.Lexeme.Weight weight Returns Type Description NpgsqlTsVector | Improve this Doc View Source SetWeight(NpgsqlTsVector, NpgsqlTsVector.Lexeme.Weight, String[]) Assign weight to elements of vector that are in lexemes and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, NpgsqlTsVector.Lexeme.Weight weight, string[] lexemes) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsVector.Lexeme.Weight weight String [] lexemes Returns Type Description NpgsqlTsVector | Improve this Doc View Source SetWeight(NpgsqlTsVector, Char) Assign weight to each element of vector and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, char weight) Parameters Type Name Description NpgsqlTsVector vector Char weight Returns Type Description NpgsqlTsVector | Improve this Doc View Source SetWeight(NpgsqlTsVector, Char, String[]) Assign weight to elements of vector that are in lexemes and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, char weight, string[] lexemes) Parameters Type Name Description NpgsqlTsVector vector Char weight String [] lexemes Returns Type Description NpgsqlTsVector | Improve this Doc View Source ToNegative(NpgsqlTsQuery) Negate a tsquery. Generates the \"!!\" operator. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery ToNegative(this NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsQuery query Returns Type Description NpgsqlTsQuery | Improve this Doc View Source ToPhrase(NpgsqlTsQuery, NpgsqlTsQuery) Returns a tsquery that searches for a match to query1 followed by a match to query2 . http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery ToPhrase(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description NpgsqlTsQuery | Improve this Doc View Source ToPhrase(NpgsqlTsQuery, NpgsqlTsQuery, Int32) Returns a tsquery that searches for a match to query1 followed by a match to query2 at a distance of distance lexemes using the <N> tsquery operator http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery ToPhrase(this NpgsqlTsQuery query1, NpgsqlTsQuery query2, int distance) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Int32 distance Returns Type Description NpgsqlTsQuery | Improve this Doc View Source ToStripped(NpgsqlTsVector) Removes weights and positions from vector and returns a new stripped tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector ToStripped(this NpgsqlTsVector vector) Parameters Type Name Description NpgsqlTsVector vector Returns Type Description NpgsqlTsVector"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFuzzyStringMatchDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFuzzyStringMatchDbFunctionsExtensions.html",
    "title": "Class NpgsqlFuzzyStringMatchDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlFuzzyStringMatchDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via . Inheritance Object NpgsqlFuzzyStringMatchDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlFuzzyStringMatchDbFunctionsExtensions : object Remarks See Database functions . Methods | Improve this Doc View Source FuzzyStringMatchDifference(DbFunctions, String, String) The difference function converts two strings to their Soundex codes and then returns the number of matching code positions. Since Soundex codes have four characters, the result ranges from zero to four, with zero being no match and four being an exact match. Declaration public static int FuzzyStringMatchDifference(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Int32 Remarks The method call is translated to difference(source, target) . See https://www.postgresql.org/docs/current/fuzzystrmatch.html . | Improve this Doc View Source FuzzyStringMatchDoubleMetaphone(DbFunctions, String) The dmetaphone function converts a string to its primary Double Metaphone code. Declaration public static string FuzzyStringMatchDoubleMetaphone(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ String text Returns Type Description String Remarks The method call is translated to dmetaphone(text) . See https://www.postgresql.org/docs/current/fuzzystrmatch.html . | Improve this Doc View Source FuzzyStringMatchDoubleMetaphoneAlt(DbFunctions, String) The dmetaphone_alt function converts a string to its alternate Double Metaphone code. Declaration public static string FuzzyStringMatchDoubleMetaphoneAlt(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ String text Returns Type Description String Remarks The method call is translated to dmetaphone_alt(text) . See https://www.postgresql.org/docs/current/fuzzystrmatch.html . | Improve this Doc View Source FuzzyStringMatchLevenshtein(DbFunctions, String, String) Returns the Levenshtein distance between two strings. Declaration public static int FuzzyStringMatchLevenshtein(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Int32 Remarks The method call is translated to levenshtein(source, target) . See https://www.postgresql.org/docs/current/fuzzystrmatch.html . | Improve this Doc View Source FuzzyStringMatchLevenshtein(DbFunctions, String, String, Int32, Int32, Int32) Returns the Levenshtein distance between two strings. Declaration public static int FuzzyStringMatchLevenshtein(this DbFunctions _, string source, string target, int insertionCost, int deletionCost, int substitutionCost) Parameters Type Name Description DbFunctions _ String source String target Int32 insertionCost Int32 deletionCost Int32 substitutionCost Returns Type Description Int32 Remarks The method call is translated to levenshtein(source, target, insertionCost, deletionCost, substitutionCost) . See https://www.postgresql.org/docs/current/fuzzystrmatch.html . | Improve this Doc View Source FuzzyStringMatchLevenshteinLessEqual(DbFunctions, String, String, Int32) levenshtein_less_equal is an accelerated version of the Levenshtein function for use when only small distances are of interest. If the actual distance is less than or equal to maximum distance, then levenshtein_less_equal returns the correct distance; otherwise it returns some value greater than maximum distance. If maximum distance is negative then the behavior is the same as levenshtein. Declaration public static int FuzzyStringMatchLevenshteinLessEqual(this DbFunctions _, string source, string target, int maximumDistance) Parameters Type Name Description DbFunctions _ String source String target Int32 maximumDistance Returns Type Description Int32 Remarks The method call is translated to levenshtein_less_equal(source, target, maximumDistance) . See https://www.postgresql.org/docs/current/fuzzystrmatch.html . | Improve this Doc View Source FuzzyStringMatchLevenshteinLessEqual(DbFunctions, String, String, Int32, Int32, Int32, Int32) levenshtein_less_equal is an accelerated version of the Levenshtein function for use when only small distances are of interest. If the actual distance is less than or equal to maximum distance, then levenshtein_less_equal returns the correct distance; otherwise it returns some value greater than maximum distance. If maximum distance is negative then the behavior is the same as levenshtein. Declaration public static int FuzzyStringMatchLevenshteinLessEqual(this DbFunctions _, string source, string target, int insertionCost, int deletionCost, int substitutionCost, int maximumDistance) Parameters Type Name Description DbFunctions _ String source String target Int32 insertionCost Int32 deletionCost Int32 substitutionCost Int32 maximumDistance Returns Type Description Int32 Remarks The method call is translated to levenshtein_less_equal(source, target, insertionCost, deletionCost, substitutionCost, maximumDistance) . See https://www.postgresql.org/docs/current/fuzzystrmatch.html . | Improve this Doc View Source FuzzyStringMatchMetaphone(DbFunctions, String, Int32) The metaphone function converts a string to its Metaphone code. Declaration public static string FuzzyStringMatchMetaphone(this DbFunctions _, string text, int maximumOutputLength) Parameters Type Name Description DbFunctions _ String text Int32 maximumOutputLength Returns Type Description String Remarks The method call is translated to metaphone(text, maximumOutputLength) . See https://www.postgresql.org/docs/current/fuzzystrmatch.html . | Improve this Doc View Source FuzzyStringMatchSoundex(DbFunctions, String) The soundex function converts a string to its Soundex code. Declaration public static string FuzzyStringMatchSoundex(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ String text Returns Type Description String Remarks The method call is translated to soundex(text) . See https://www.postgresql.org/docs/current/fuzzystrmatch.html ."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexBuilderExtensions.html",
    "title": "Class NpgsqlIndexBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlIndexBuilderExtensions Npgsql specific extension methods for . Inheritance Object NpgsqlIndexBuilderExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlIndexBuilderExtensions : object Methods | Improve this Doc View Source AreNullsDistinct(IConventionIndexBuilder, Boolean, Boolean) Specifies whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static IConventionIndexBuilder? AreNullsDistinct(this IConventionIndexBuilder indexBuilder, bool nullsDistinct = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Boolean nullsDistinct Whether nulls should be considered distinct. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionIndexBuilder > A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source AreNullsDistinct(IndexBuilder, Boolean) Specifies whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static IndexBuilder AreNullsDistinct(this IndexBuilder indexBuilder, bool nullsDistinct = true) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. Boolean nullsDistinct Whether nulls should be considered distinct. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source AreNullsDistinct<TEntity>(IndexBuilder<TEntity>, Boolean) Specifies whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static IndexBuilder<TEntity> AreNullsDistinct<TEntity>(this IndexBuilder<TEntity> indexBuilder, bool nullsDistinct = true) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. Boolean nullsDistinct Whether nulls should be considered distinct. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source CanSetAreNullsDistinct(IConventionIndexBuilder, Boolean, Boolean) Specifies whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static bool CanSetAreNullsDistinct(this IConventionIndexBuilder indexBuilder, bool nullsDistinct = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Boolean nullsDistinct Whether nulls should be considered distinct. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the index can be configured with the method Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source CanSetCollation(IConventionIndexBuilder, Nullable<IReadOnlyList<String>>, Boolean) Returns a value indicating whether the PostgreSQL index collation can be set. Declaration public static bool CanSetCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < String >> values The sort options to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source CanSetHasCollation(IConventionIndexBuilder, Nullable<IReadOnlyList<String>>, Boolean) Returns a value indicating whether the PostgreSQL index collation can be set. Declaration public static bool CanSetHasCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < String >> values The sort options to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source CanSetHasMethod(IConventionIndexBuilder, Nullable<String>, Boolean) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static bool CanSetHasMethod(this IConventionIndexBuilder indexBuilder, string? method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < String > method The name of the index. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the index can be configured with the method Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source CanSetHasNullSortOrder(IConventionIndexBuilder, Nullable<IReadOnlyList<NullSortOrder>>, Boolean) Returns a value indicating whether the PostgreSQL index null sort ordering can be set. Declaration public static bool CanSetHasNullSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<NullSortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < NullSortOrder >> values The sort order to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source CanSetHasOperators(IConventionIndexBuilder, Nullable<IReadOnlyList<String>>, Boolean) Returns a value indicating whether the PostgreSQL index operators can be set. Declaration public static bool CanSetHasOperators(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? operators, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < String >> operators The operators to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the index can be configured with the method. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source CanSetHasSortOrder(IConventionIndexBuilder, Nullable<IReadOnlyList<SortOrder>>, Boolean) Returns a value indicating whether the PostgreSQL index sort ordering can be set. Declaration public static bool CanSetHasSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<SortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < SortOrder >> values The sort order to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source CanSetInclude(IConventionIndexBuilder, Nullable<IReadOnlyList<String>>, Boolean) Returns a value indicating whether the given include properties can be set. Declaration public static bool CanSetInclude(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? propertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < String >> propertyNames An array of property names to be used in 'include' clause. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the given include properties can be set. | Improve this Doc View Source CanSetIncludeProperties(IConventionIndexBuilder, Nullable<IReadOnlyList<String>>, Boolean) Returns a value indicating whether the given include properties can be set. Declaration public static bool CanSetIncludeProperties(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? propertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < String >> propertyNames An array of property names to be used in 'include' clause. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the given include properties can be set. | Improve this Doc View Source CanSetIsCreatedConcurrently(IConventionIndexBuilder, Nullable<Boolean>, Boolean) Returns a value indicating whether concurrent creation for the index can be set. Declaration public static bool CanSetIsCreatedConcurrently(this IConventionIndexBuilder indexBuilder, bool? createdConcurrently, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < Boolean > createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Improve this Doc View Source CanSetIsTsVectorExpressionIndex(IConventionIndexBuilder, Nullable<String>, Boolean) Returns a value indicating whether the index can be configured as a full-text tsvector expression index. Declaration public static bool CanSetIsTsVectorExpressionIndex(this IConventionIndexBuilder indexBuilder, string? config, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < String > config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the index can be configured as a full-text tsvector expression index. | Improve this Doc View Source CanSetMethod(IConventionIndexBuilder, Nullable<String>, Boolean) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static bool CanSetMethod(this IConventionIndexBuilder indexBuilder, string? method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < String > method The name of the index. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the index can be configured with the method Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source CanSetNullSortOrder(IConventionIndexBuilder, Nullable<IReadOnlyList<NullSortOrder>>, Boolean) Returns a value indicating whether the PostgreSQL index null sort ordering can be set. Declaration public static bool CanSetNullSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<NullSortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < NullSortOrder >> values The sort order to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source CanSetOperators(IConventionIndexBuilder, Nullable<IReadOnlyList<String>>, Boolean) Returns a value indicating whether the PostgreSQL index operators can be set. Declaration public static bool CanSetOperators(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? operators, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < String >> operators The operators to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the index can be configured with the method. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source CanSetSortOrder(IConventionIndexBuilder, Nullable<IReadOnlyList<SortOrder>>, Boolean) Returns a value indicating whether the PostgreSQL index sort ordering can be set. Declaration public static bool CanSetSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<SortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < SortOrder >> values The sort order to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source CanSetToTsVector(IConventionIndexBuilder, Nullable<String>, Boolean) Returns a value indicating whether the index can be configured as a full-text tsvector expression index. Declaration public static bool CanSetToTsVector(this IConventionIndexBuilder indexBuilder, string? config, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < String > config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the index can be configured as a full-text tsvector expression index. | Improve this Doc View Source HasCollation(IConventionIndexBuilder, Nullable<IReadOnlyList<String>>, Boolean) The PostgreSQL index collation to be used. Declaration public static IConventionIndexBuilder? HasCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < String >> values The sort options to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionIndexBuilder > A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source HasCollation(IndexBuilder, String[]) The PostgreSQL index collation to be used. Declaration public static IndexBuilder HasCollation(this IndexBuilder indexBuilder, params string[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. String [] values The sort options to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source HasCollation<TEntity>(IndexBuilder<TEntity>, String[]) The PostgreSQL index collation to be used. Declaration public static IndexBuilder<TEntity> HasCollation<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[] values) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. String [] values The sort options to use for each column. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source HasMethod(IConventionIndexBuilder, Nullable<String>, Boolean) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static IConventionIndexBuilder? HasMethod(this IConventionIndexBuilder indexBuilder, string? method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < String > method The name of the index. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionIndexBuilder > A builder to further configure the index. Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source HasMethod(IndexBuilder, Nullable<String>) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static IndexBuilder HasMethod(this IndexBuilder indexBuilder, string? method) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. Nullable < String > method The name of the index. Returns Type Description IndexBuilder A builder to further configure the index. Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source HasMethod<TEntity>(IndexBuilder<TEntity>, Nullable<String>) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static IndexBuilder<TEntity> HasMethod<TEntity>(this IndexBuilder<TEntity> indexBuilder, string? method) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. Nullable < String > method The name of the index. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source HasNullSortOrder(IConventionIndexBuilder, Nullable<IReadOnlyList<NullSortOrder>>, Boolean) The PostgreSQL index NULL sort ordering to be used. Declaration public static IConventionIndexBuilder? HasNullSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<NullSortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < NullSortOrder >> values The sort order to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionIndexBuilder > A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasNullSortOrder(IndexBuilder, NullSortOrder[]) The PostgreSQL index NULL sort ordering to be used. Declaration public static IndexBuilder HasNullSortOrder(this IndexBuilder indexBuilder, params NullSortOrder[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. NullSortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasNullSortOrder<TEntity>(IndexBuilder<TEntity>, NullSortOrder[]) The PostgreSQL index NULL sort ordering to be used. Declaration public static IndexBuilder<TEntity> HasNullSortOrder<TEntity>(this IndexBuilder<TEntity> indexBuilder, params NullSortOrder[] values) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. NullSortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasOperators(IConventionIndexBuilder, Nullable<IReadOnlyList<String>>, Boolean) The PostgreSQL index operators to be used. Declaration public static IConventionIndexBuilder? HasOperators(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? operators, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < String >> operators The operators to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionIndexBuilder > A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source HasOperators(IndexBuilder, String[]) The PostgreSQL index operators to be used. Declaration public static IndexBuilder HasOperators(this IndexBuilder indexBuilder, params string[] operators) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. String [] operators The operators to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source HasOperators<TEntity>(IndexBuilder<TEntity>, String[]) The PostgreSQL index operators to be used. Declaration public static IndexBuilder<TEntity> HasOperators<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[] operators) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. String [] operators The operators to use for each column. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source HasSortOrder(IConventionIndexBuilder, Nullable<IReadOnlyList<SortOrder>>, Boolean) The PostgreSQL index sort ordering to be used. Declaration public static IConventionIndexBuilder? HasSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<SortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < SortOrder >> values The sort order to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionIndexBuilder > A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasSortOrder(IndexBuilder, SortOrder[]) The PostgreSQL index sort ordering to be used. Declaration public static IndexBuilder HasSortOrder(this IndexBuilder indexBuilder, params SortOrder[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. SortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasSortOrder<TEntity>(IndexBuilder<TEntity>, SortOrder[]) The PostgreSQL index sort ordering to be used. Declaration public static IndexBuilder<TEntity> HasSortOrder<TEntity>(this IndexBuilder<TEntity> indexBuilder, params SortOrder[] values) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. SortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source IncludeProperties(IConventionIndexBuilder, IReadOnlyList<String>, Boolean) Adds an INCLUDE clause to the index definition with the specified property names. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IConventionIndexBuilder? IncludeProperties(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string> propertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList < String > propertyNames An array of property names to be used in INCLUDE clause. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionIndexBuilder > A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source IncludeProperties(IndexBuilder, String[]) Adds an INCLUDE clause to the index definition with the specified property names. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IndexBuilder IncludeProperties(this IndexBuilder indexBuilder, params string[] propertyNames) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. String [] propertyNames An array of property names to be used in INCLUDE clause. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source IncludeProperties<TEntity>(IndexBuilder<TEntity>, Expression<Func<TEntity, Object>>) Adds an INCLUDE clause to the index definition with property names from the specified expression. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IndexBuilder<TEntity> IncludeProperties<TEntity>(this IndexBuilder<TEntity> indexBuilder, Expression<Func<TEntity, object>> includeExpression) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. Expression < Func <TEntity, Object >> includeExpression A lambda expression representing the property(s) to be included in the INCLUDE clause ( blog => blog.Url ). If multiple properties are to be included then specify an anonymous type including the properties ( post => new { post.Title, post.BlogId } ). Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source IncludeProperties<TEntity>(IndexBuilder<TEntity>, String[]) Adds an INCLUDE clause to the index definition with the specified property names. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IndexBuilder<TEntity> IncludeProperties<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[] propertyNames) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. String [] propertyNames An array of property names to be used in INCLUDE clause. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source IsCreatedConcurrently(IConventionIndexBuilder, Nullable<Boolean>, Boolean) When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. Declaration public static IConventionIndexBuilder? IsCreatedConcurrently(this IConventionIndexBuilder indexBuilder, bool? createdConcurrently, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < Boolean > createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionIndexBuilder > A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Improve this Doc View Source IsCreatedConcurrently(IndexBuilder, Boolean) When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. Declaration public static IndexBuilder IsCreatedConcurrently(this IndexBuilder indexBuilder, bool createdConcurrently = true) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. Boolean createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Improve this Doc View Source IsCreatedConcurrently<TEntity>(IndexBuilder<TEntity>, Boolean) When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. Declaration public static IndexBuilder<TEntity> IsCreatedConcurrently<TEntity>(this IndexBuilder<TEntity> indexBuilder, bool createdConcurrently = true) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. Boolean createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Improve this Doc View Source IsTsVectorExpressionIndex(IConventionIndexBuilder, Nullable<String>) Configures this index to be a full-text tsvector expression index. Declaration public static IConventionIndexBuilder? IsTsVectorExpressionIndex(this IConventionIndexBuilder indexBuilder, string? config) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < String > config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Returns Type Description Nullable < IConventionIndexBuilder > The same builder instance if the configuration was applied, null otherwise. | Improve this Doc View Source IsTsVectorExpressionIndex(IndexBuilder, String) Configures this index to be a full-text tsvector expression index. Declaration public static IndexBuilder IsTsVectorExpressionIndex(this IndexBuilder indexBuilder, string config) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. String config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Returns Type Description IndexBuilder A builder to further configure the index. | Improve this Doc View Source IsTsVectorExpressionIndex<TEntity>(IndexBuilder<TEntity>, String) Configures this index to be a full-text tsvector expression index. Declaration public static IndexBuilder<TEntity> IsTsVectorExpressionIndex<TEntity>(this IndexBuilder<TEntity> indexBuilder, string config) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. String config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity | Improve this Doc View Source UseCollation(IConventionIndexBuilder, Nullable<IReadOnlyList<String>>, Boolean) The PostgreSQL index collation to be used. Declaration public static IConventionIndexBuilder? UseCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. Nullable < IReadOnlyList < String >> values The sort options to use for each column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionIndexBuilder > A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source UseCollation(IndexBuilder, String[]) The PostgreSQL index collation to be used. Declaration public static IndexBuilder UseCollation(this IndexBuilder indexBuilder, params string[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. String [] values The sort options to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source UseCollation<TEntity>(IndexBuilder<TEntity>, String[]) The PostgreSQL index collation to be used. Declaration public static IndexBuilder<TEntity> UseCollation<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[] values) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. String [] values The sort options to use for each column. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexExtensions.html",
    "title": "Class NpgsqlIndexExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlIndexExtensions Extension methods for for Npgsql-specific metadata. Inheritance Object NpgsqlIndexExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlIndexExtensions : object Methods | Improve this Doc View Source GetAreNullsDistinct(IReadOnlyIndex) Returns whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static bool? GetAreNullsDistinct(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description Nullable < Boolean > Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source GetAreNullsDistinctConfigurationSource(IConventionIndex) Returns the for whether nulls are considered distinct. Declaration public static ConfigurationSource? GetAreNullsDistinctConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description Nullable < ConfigurationSource > The . | Improve this Doc View Source GetCollation(IReadOnlyIndex) Returns the column collations to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string>? GetCollation(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description Nullable < IReadOnlyList < String >> Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source GetCollationConfigurationSource(IConventionIndex) Returns the for the index collations. Declaration public static ConfigurationSource? GetCollationConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description Nullable < ConfigurationSource > The for the index collations. | Improve this Doc View Source GetIncludeProperties(IReadOnlyIndex) Returns included property names, or null if they have not been specified. Declaration public static IReadOnlyList<string>? GetIncludeProperties(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index The index. Returns Type Description Nullable < IReadOnlyList < String >> The included property names, or null if they have not been specified. | Improve this Doc View Source GetIncludePropertiesConfigurationSource(IConventionIndex) Returns the for the included property names. Declaration public static ConfigurationSource? GetIncludePropertiesConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description Nullable < ConfigurationSource > The for the included property names. | Improve this Doc View Source GetIsCreatedConcurrentlyConfigurationSource(IConventionIndex) Returns the for whether the index is created concurrently. Declaration public static ConfigurationSource? GetIsCreatedConcurrentlyConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description Nullable < ConfigurationSource > The for whether the index is created concurrently. | Improve this Doc View Source GetMethod(IReadOnlyIndex) Returns the index method to be used, or null if it hasn't been specified. null selects the default (currently btree ). Declaration public static string? GetMethod(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description Nullable < String > Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source GetMethodConfigurationSource(IConventionIndex) Returns the for the index method. Declaration public static ConfigurationSource? GetMethodConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description Nullable < ConfigurationSource > The for the index method. | Improve this Doc View Source GetNullSortOrder(IReadOnlyIndex) Returns the column NULL sort orders to be used, or null if they have not been specified. Declaration public static IReadOnlyList<NullSortOrder>? GetNullSortOrder(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description Nullable < IReadOnlyList < NullSortOrder >> Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source GetNullSortOrderConfigurationSource(IConventionIndex) Returns the for the index null sort orders. Declaration public static ConfigurationSource? GetNullSortOrderConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description Nullable < ConfigurationSource > The for the index null sort orders. | Improve this Doc View Source GetOperators(IReadOnlyIndex) Returns the column operators to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string>? GetOperators(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description Nullable < IReadOnlyList < String >> Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source GetOperatorsConfigurationSource(IConventionIndex) Returns the for the index operators. Declaration public static ConfigurationSource? GetOperatorsConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description Nullable < ConfigurationSource > The for the index operators. | Improve this Doc View Source GetSortOrder(IReadOnlyIndex) Returns the column sort orders to be used, or null if they have not been specified. Declaration public static IReadOnlyList<SortOrder>? GetSortOrder(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description Nullable < IReadOnlyList < SortOrder >> Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source GetSortOrderConfigurationSource(IConventionIndex) Returns the for the index sort orders. Declaration public static ConfigurationSource? GetSortOrderConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description Nullable < ConfigurationSource > The for the index sort orders. | Improve this Doc View Source GetTsVectorConfig(IReadOnlyIndex) Returns the text search configuration for this tsvector expression index, or null if this is not a tsvector expression index. Declaration public static string? GetTsVectorConfig(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index The index. Returns Type Description Nullable < String > Remarks https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX | Improve this Doc View Source GetTsVectorConfigConfigurationSource(IConventionIndex) Returns the for the tsvector config. Declaration public static ConfigurationSource? GetTsVectorConfigConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description Nullable < ConfigurationSource > The for the tsvector config. | Improve this Doc View Source IsCreatedConcurrently(IReadOnlyIndex) Returns a value indicating whether the index is created concurrently. Declaration public static bool? IsCreatedConcurrently(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index The index. Returns Type Description Nullable < Boolean > true if the index is created concurrently. | Improve this Doc View Source SetAreNullsDistinct(IConventionIndex, Nullable<Boolean>, Boolean) Sets whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static bool? SetAreNullsDistinct(this IConventionIndex index, bool? nullsDistinct, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index Nullable < Boolean > nullsDistinct Boolean fromDataAnnotation Returns Type Description Nullable < Boolean > Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source SetAreNullsDistinct(IMutableIndex, Nullable<Boolean>) Sets whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static void SetAreNullsDistinct(this IMutableIndex index, bool? nullsDistinct) Parameters Type Name Description IMutableIndex index Nullable < Boolean > nullsDistinct Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source SetCollation(IConventionIndex, Nullable<IReadOnlyList<String>>, Boolean) Sets the column collations to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string>? SetCollation(this IConventionIndex index, IReadOnlyList<string>? collations, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index Nullable < IReadOnlyList < String >> collations Boolean fromDataAnnotation Returns Type Description Nullable < IReadOnlyList < String >> Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source SetCollation(IMutableIndex, Nullable<IReadOnlyList<String>>) Sets the column collations to be used, or null if they have not been specified. Declaration public static void SetCollation(this IMutableIndex index, IReadOnlyList<string>? collations) Parameters Type Name Description IMutableIndex index Nullable < IReadOnlyList < String >> collations Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source SetIncludeProperties(IConventionIndex, Nullable<IReadOnlyList<String>>, Boolean) Sets included property names. Declaration public static IReadOnlyList<string>? SetIncludeProperties(this IConventionIndex index, IReadOnlyList<string>? properties, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index The index. Nullable < IReadOnlyList < String >> properties The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IReadOnlyList < String >> | Improve this Doc View Source SetIncludeProperties(IMutableIndex, Nullable<IReadOnlyList<String>>) Sets included property names. Declaration public static void SetIncludeProperties(this IMutableIndex index, IReadOnlyList<string>? properties) Parameters Type Name Description IMutableIndex index The index. Nullable < IReadOnlyList < String >> properties The value to set. | Improve this Doc View Source SetIsCreatedConcurrently(IConventionIndex, Nullable<Boolean>, Boolean) Sets a value indicating whether the index is created concurrently. Declaration public static bool? SetIsCreatedConcurrently(this IConventionIndex index, bool? createdConcurrently, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index The index. Nullable < Boolean > createdConcurrently The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < Boolean > | Improve this Doc View Source SetIsCreatedConcurrently(IMutableIndex, Nullable<Boolean>) Sets a value indicating whether the index is created concurrently. Declaration public static void SetIsCreatedConcurrently(this IMutableIndex index, bool? createdConcurrently) Parameters Type Name Description IMutableIndex index The index. Nullable < Boolean > createdConcurrently The value to set. | Improve this Doc View Source SetMethod(IConventionIndex, Nullable<String>, Boolean) Sets the index method to be used, or null if it hasn't been specified. null selects the default (currently btree ). Declaration public static string? SetMethod(this IConventionIndex index, string? method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index Nullable < String > method Boolean fromDataAnnotation Returns Type Description Nullable < String > Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source SetMethod(IMutableIndex, Nullable<String>) Sets the index method to be used, or null if it hasn't been specified. null selects the default (currently btree ). Declaration public static void SetMethod(this IMutableIndex index, string? method) Parameters Type Name Description IMutableIndex index Nullable < String > method Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source SetNullSortOrder(IConventionIndex, Nullable<IReadOnlyList<NullSortOrder>>, Boolean) Sets the column NULL sort orders to be used, or null if they have not been specified. Declaration public static IReadOnlyList<NullSortOrder>? SetNullSortOrder(this IConventionIndex index, IReadOnlyList<NullSortOrder>? nullSortOrder, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index Nullable < IReadOnlyList < NullSortOrder >> nullSortOrder Boolean fromDataAnnotation Returns Type Description Nullable < IReadOnlyList < NullSortOrder >> Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source SetNullSortOrder(IMutableIndex, Nullable<IReadOnlyList<NullSortOrder>>) Sets the column NULL sort orders to be used, or null if they have not been specified. Declaration public static void SetNullSortOrder(this IMutableIndex index, IReadOnlyList<NullSortOrder>? nullSortOrder) Parameters Type Name Description IMutableIndex index Nullable < IReadOnlyList < NullSortOrder >> nullSortOrder Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source SetOperators(IConventionIndex, Nullable<IReadOnlyList<String>>, Boolean) Sets the column operators to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string>? SetOperators(this IConventionIndex index, IReadOnlyList<string>? operators, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index Nullable < IReadOnlyList < String >> operators Boolean fromDataAnnotation Returns Type Description Nullable < IReadOnlyList < String >> Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source SetOperators(IMutableIndex, Nullable<IReadOnlyList<String>>) Sets the column operators to be used, or null if they have not been specified. Declaration public static void SetOperators(this IMutableIndex index, IReadOnlyList<string>? operators) Parameters Type Name Description IMutableIndex index Nullable < IReadOnlyList < String >> operators Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source SetSortOrder(IConventionIndex, Nullable<IReadOnlyList<SortOrder>>, Boolean) Sets the column sort orders to be used, or null if they have not been specified. Declaration public static IReadOnlyList<SortOrder>? SetSortOrder(this IConventionIndex index, IReadOnlyList<SortOrder>? sortOrder, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index Nullable < IReadOnlyList < SortOrder >> sortOrder Boolean fromDataAnnotation Returns Type Description Nullable < IReadOnlyList < SortOrder >> Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source SetSortOrder(IMutableIndex, Nullable<IReadOnlyList<SortOrder>>) Sets the column sort orders to be used, or null if they have not been specified. Declaration public static void SetSortOrder(this IMutableIndex index, IReadOnlyList<SortOrder>? sortOrder) Parameters Type Name Description IMutableIndex index Nullable < IReadOnlyList < SortOrder >> sortOrder Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source SetTsVectorConfig(IConventionIndex, Nullable<String>, Boolean) Sets the index to tsvector config name to be used. Declaration public static string? SetTsVectorConfig(this IConventionIndex index, string? config, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index The index. Nullable < String > config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < String > Remarks https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX | Improve this Doc View Source SetTsVectorConfig(IMutableIndex, Nullable<String>) Sets the text search configuration for this tsvector expression index, or null if this is not a tsvector expression index. Declaration public static void SetTsVectorConfig(this IMutableIndex index, string? config) Parameters Type Name Description IMutableIndex index The index. Nullable < String > config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Remarks https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlJsonDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlJsonDbFunctionsExtensions.html",
    "title": "Class NpgsqlJsonDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonDbFunctionsExtensions Provides methods for supporting translation to PostgreSQL JSON operators and functions. Inheritance Object NpgsqlJsonDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlJsonDbFunctionsExtensions : object Methods | Improve this Doc View Source JsonContained(DbFunctions, Object, Object) Checks if contained is contained in json as top-level entries. Declaration public static bool JsonContained(this DbFunctions _, object contained, object json) Parameters Type Name Description DbFunctions _ DbFunctions instance Object contained A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. Returns Type Description Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonContains(DbFunctions, Object, Object) Checks if json contains contained as top-level entries. Declaration public static bool JsonContains(this DbFunctions _, object json, object contained) Parameters Type Name Description DbFunctions _ DbFunctions instance Object json A JSON column or value. Can be a , a string property mapped to JSON, or a user POCO mapped to JSON. Object contained A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. Returns Type Description Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonExistAll(DbFunctions, Object, String[]) Checks if all of the given keys exist as top-level keys within json . Declaration public static bool JsonExistAll(this DbFunctions _, object json, params string[] keys) Parameters Type Name Description DbFunctions _ DbFunctions instance Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. String [] keys A set of keys to be checked inside json . Returns Type Description Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonExistAny(DbFunctions, Object, String[]) Checks if any of the given keys exist as top-level keys within json . Declaration public static bool JsonExistAny(this DbFunctions _, object json, params string[] keys) Parameters Type Name Description DbFunctions _ DbFunctions instance Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. String [] keys A set of keys to be checked inside json . Returns Type Description Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonExists(DbFunctions, Object, String) Checks if key exists as a top-level key within json . Declaration public static bool JsonExists(this DbFunctions _, object json, string key) Parameters Type Name Description DbFunctions _ DbFunctions instance Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. String key A key to be checked inside json . Returns Type Description Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonTypeof(DbFunctions, Object) Returns the type of the outermost JSON value as a text string. Possible types are object, array, string, number, boolean, and null. Declaration public static string JsonTypeof(this DbFunctions _, object json) Parameters Type Name Description DbFunctions _ DbFunctions instance Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. Returns Type Description String Remarks See https://www.postgresql.org/docs/current/functions-json.html ."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMigrationBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMigrationBuilderExtensions.html",
    "title": "Class NpgsqlMigrationBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlMigrationBuilderExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlMigrationBuilderExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlMigrationBuilderExtensions : object Methods | Improve this Doc View Source CreatePostgresExtension(MigrationBuilder, String, Nullable<String>, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static MigrationBuilder CreatePostgresExtension(this MigrationBuilder builder, string name, string? schema = null, string? version = null) Parameters Type Name Description MigrationBuilder builder String name Nullable < String > schema Nullable < String > version Returns Type Description MigrationBuilder | Improve this Doc View Source DropPostgresExtension(MigrationBuilder, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static MigrationBuilder DropPostgresExtension(this MigrationBuilder builder, string name) Parameters Type Name Description MigrationBuilder builder String name Returns Type Description MigrationBuilder | Improve this Doc View Source EnsurePostgresExtension(MigrationBuilder, String, Nullable<String>, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static MigrationBuilder EnsurePostgresExtension(this MigrationBuilder builder, string name, string? schema = null, string? version = null) Parameters Type Name Description MigrationBuilder builder String name Nullable < String > schema Nullable < String > version Returns Type Description MigrationBuilder | Improve this Doc View Source IsNpgsql(MigrationBuilder) Returns true if the active provider in a migration is the Npgsql provider. Declaration public static bool IsNpgsql(this MigrationBuilder builder) Parameters Type Name Description MigrationBuilder builder Returns Type Description Boolean True if Npgsql is being used; false otherwise."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelBuilderExtensions.html",
    "title": "Class NpgsqlModelBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlModelBuilderExtensions Npgsql-specific extension methods for . Inheritance Object NpgsqlModelBuilderExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlModelBuilderExtensions : object Methods | Improve this Doc View Source CanSetDefaultColumnCollation(IConventionModelBuilder, Nullable<String>, Boolean) Returns a value indicating whether the given value can be set as the default column collation. Declaration public static bool CanSetDefaultColumnCollation(this IConventionModelBuilder modelBuilder, string? collation, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. Nullable < String > collation The collation. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the given value can be set as the collation. | Improve this Doc View Source CanSetHiLoSequence(IConventionModelBuilder, Nullable<String>, Nullable<String>, Boolean) Returns a value indicating whether the given name and schema can be set for the hi-lo sequence. Declaration public static bool CanSetHiLoSequence(this IConventionModelBuilder modelBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. Nullable < String > name The name of the sequence. Nullable < String > schema The schema of the sequence. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the given name and schema can be set for the hi-lo sequence. | Improve this Doc View Source CanSetPostgresExtension(IConventionModelBuilder, Nullable<String>, String, Nullable<String>, Boolean) Returns a value indicating whether the given PostgreSQL extension can be registered in the model. Declaration public static bool CanSetPostgresExtension(this IConventionModelBuilder modelBuilder, string? schema, string name, string? version = null, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. Nullable < String > schema The schema in which to create the extension. String name The name of the extension to create. Nullable < String > version The version of the extension. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the given value can be set as the default increment for SQL Server IDENTITY. Remarks See Modeling entity types and relationships , and Accessing SQL Server and SQL Azure databases with EF Core for more information and examples. | Improve this Doc View Source CanSetValueGenerationStrategy(IConventionModelBuilder, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Returns a value indicating whether the given value can be set as the default value generation strategy. Declaration public static bool CanSetValueGenerationStrategy(this IConventionModelBuilder modelBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. Nullable < NpgsqlValueGenerationStrategy > valueGenerationStrategy The value generation strategy. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the given value can be set as the default value generation strategy. | Improve this Doc View Source HasCollation(ModelBuilder, Nullable<String>, String, String, Nullable<String>, Nullable<Boolean>) Creates a new collation in the database. Declaration public static ModelBuilder HasCollation(this ModelBuilder modelBuilder, string? schema, string name, string locale, string? provider = null, bool? deterministic = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the collation. Nullable < String > schema The schema in which to create the collation, or null for the default schema. String name The name of the collation to create. String locale Sets LC_COLLATE and LC_CTYPE at once. Nullable < String > provider Specifies the provider to use for locale services associated with this collation. The available choices depend on the operating system and build options. Nullable < Boolean > deterministic Specifies whether the collation should use deterministic comparisons. Defaults to true . Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/sql-createcollation.html . | Improve this Doc View Source HasCollation(ModelBuilder, Nullable<String>, String, String, String, Nullable<String>, Nullable<Boolean>) Creates a new collation in the database. Declaration public static ModelBuilder HasCollation(this ModelBuilder modelBuilder, string? schema, string name, string lcCollate, string lcCtype, string? provider = null, bool? deterministic = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the collation. Nullable < String > schema The schema in which to create the collation, or null for the default schema. String name The name of the collation to create. String lcCollate Use the specified operating system locale for the LC_COLLATE locale category. String lcCtype Use the specified operating system locale for the LC_CTYPE locale category. Nullable < String > provider Specifies the provider to use for locale services associated with this collation. The available choices depend on the operating system and build options. Nullable < Boolean > deterministic Specifies whether the collation should use deterministic comparisons. Defaults to true . Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/sql-createcollation.html . | Improve this Doc View Source HasCollation(ModelBuilder, String, String, Nullable<String>, Nullable<Boolean>) Creates a new collation in the database. Declaration public static ModelBuilder HasCollation(this ModelBuilder modelBuilder, string name, string locale, string? provider = null, bool? deterministic = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the collation. String name The name of the collation to create. String locale Sets LC_COLLATE and LC_CTYPE at once. Nullable < String > provider Specifies the provider to use for locale services associated with this collation. The available choices depend on the operating system and build options. Nullable < Boolean > deterministic Specifies whether the collation should use deterministic comparisons. Defaults to true . Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/sql-createcollation.html . | Improve this Doc View Source HasHiLoSequence(IConventionModelBuilder, Nullable<String>, Nullable<String>, Boolean) Configures the database sequence used for the hi-lo pattern to generate values for key properties marked as , when targeting PostgreSQL. Declaration public static IConventionSequenceBuilder? HasHiLoSequence(this IConventionModelBuilder modelBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. Nullable < String > name The name of the sequence. Nullable < String > schema The schema of the sequence. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionSequenceBuilder > A builder to further configure the sequence. | Improve this Doc View Source HasPostgresEnum(ModelBuilder, Nullable<String>, String, String[]) Registers a user-defined enum type in the model. Declaration public static ModelBuilder HasPostgresEnum(this ModelBuilder modelBuilder, string? schema, string name, string[] labels) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. Nullable < String > schema The schema in which to create the enum type. String name The name of the enum type to create. String [] labels The enum label values. Returns Type Description ModelBuilder The updated . Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html | Improve this Doc View Source HasPostgresEnum(ModelBuilder, String, String[]) Registers a user-defined enum type in the model. Declaration public static ModelBuilder HasPostgresEnum(this ModelBuilder modelBuilder, string name, string[] labels) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. String name The name of the enum type to create. String [] labels The enum label values. Returns Type Description ModelBuilder The updated . Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html | Improve this Doc View Source HasPostgresEnum<TEnum>(ModelBuilder, Nullable<String>, Nullable<String>, Nullable<INpgsqlNameTranslator>) Registers a user-defined enum type in the model. Declaration public static ModelBuilder HasPostgresEnum<TEnum>(this ModelBuilder modelBuilder, string? schema = null, string? name = null, INpgsqlNameTranslator? nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. Nullable < String > schema The schema in which to create the enum type. Nullable < String > name The name of the enum type to create. Nullable < INpgsqlNameTranslator > nameTranslator The translator for name and label inference. Defaults to . Returns Type Description ModelBuilder The updated . Type Parameters Name Description TEnum Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html | Improve this Doc View Source HasPostgresExtension(IConventionModelBuilder, Nullable<String>, String, Nullable<String>, Boolean) Registers a PostgreSQL extension in the model. Declaration public static IConventionModelBuilder? HasPostgresExtension(this IConventionModelBuilder modelBuilder, string? schema, string name, string? version = null, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder in which to define the extension. Nullable < String > schema The schema in which to create the extension. String name The name of the extension to create. Nullable < String > version The version of the extension. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionModelBuilder > The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/external-extensions.html | Improve this Doc View Source HasPostgresExtension(IConventionModelBuilder, String, Boolean) Registers a PostgreSQL extension in the model. Declaration public static IConventionModelBuilder? HasPostgresExtension(this IConventionModelBuilder modelBuilder, string name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder in which to define the extension. String name The name of the extension to create. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionModelBuilder > The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/external-extensions.html | Improve this Doc View Source HasPostgresExtension(ModelBuilder, Nullable<String>, String, Nullable<String>) Registers a PostgreSQL extension in the model. Declaration public static ModelBuilder HasPostgresExtension(this ModelBuilder modelBuilder, string? schema, string name, string? version = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to define the extension. Nullable < String > schema The schema in which to create the extension. String name The name of the extension to create. Nullable < String > version The version of the extension. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/external-extensions.html | Improve this Doc View Source HasPostgresExtension(ModelBuilder, String) Registers a PostgreSQL extension in the model. Declaration public static ModelBuilder HasPostgresExtension(this ModelBuilder modelBuilder, string name) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to define the extension. String name The name of the extension to create. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/external-extensions.html | Improve this Doc View Source HasPostgresRange(ModelBuilder, Nullable<String>, String, String, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>) Registers a user-defined range type in the model. Declaration public static ModelBuilder HasPostgresRange(this ModelBuilder modelBuilder, string? schema, string name, string subtype, string? canonicalFunction = null, string? subtypeOpClass = null, string? collation = null, string? subtypeDiff = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the range type. Nullable < String > schema The schema in which to create the range type. String name The name of the range type to be created. String subtype The subtype (or element type) of the range Nullable < String > canonicalFunction An optional PostgreSQL function which converts range values to a canonical form. Nullable < String > subtypeOpClass Used to specify a non-default operator class. Nullable < String > collation Used to specify a non-default collation in the range's order. Nullable < String > subtypeDiff An optional PostgreSQL function taking two values of the subtype type as argument, and return a double precision value representing the difference between the two given values. Returns Type Description ModelBuilder Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html , https://www.postgresql.org/docs/current/static/sql-createtype.html , | Improve this Doc View Source HasPostgresRange(ModelBuilder, String, String) Registers a user-defined range type in the model. Declaration public static ModelBuilder HasPostgresRange(this ModelBuilder modelBuilder, string name, string subtype) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the range type. String name The name of the range type to be created. String subtype The subtype (or element type) of the range Returns Type Description ModelBuilder Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html , https://www.postgresql.org/docs/current/static/sql-createtype.html , | Improve this Doc View Source HasValueGenerationStrategy(IConventionModelBuilder, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Configures the value generation strategy for the key property, when targeting PostgreSQL. Declaration public static IConventionModelBuilder? HasValueGenerationStrategy(this IConventionModelBuilder modelBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The builder for the property being configured. Nullable < NpgsqlValueGenerationStrategy > valueGenerationStrategy The value generation strategy. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionModelBuilder > The same builder instance if the configuration was applied, null otherwise. | Improve this Doc View Source UseDatabaseTemplate(ModelBuilder, String) Specifies the PostgreSQL database to use as a template when creating a new database for this model. Declaration public static ModelBuilder UseDatabaseTemplate(this ModelBuilder modelBuilder, string templateDatabaseName) Parameters Type Name Description ModelBuilder modelBuilder String templateDatabaseName Returns Type Description ModelBuilder | Improve this Doc View Source UseDefaultColumnCollation(IConventionModelBuilder, Nullable<String>, Boolean) Configures the default collation for all columns in the database. This causes EF Core to specify an explicit collation when creating each column (unless overridden). Declaration public static IConventionModelBuilder? UseDefaultColumnCollation(this IConventionModelBuilder modelBuilder, string? collation, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. Nullable < String > collation The collation. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionModelBuilder > A builder to further configure the property. Remarks An alternative is to specify a database collation via , which will specify the query on CREATE DATABASE instead of for each and every column. However, PostgreSQL support is limited for the collations that can be specific via this mechanism; ICU collations - which include all case-insensitive collations - are currently unsupported. For more information, see https://www.postgresql.org/docs/current/collation.html . | Improve this Doc View Source UseDefaultColumnCollation(ModelBuilder, Nullable<String>) Configures the default collation for all columns in the database. This causes EF Core to specify an explicit collation when creating each column (unless overridden). Declaration public static ModelBuilder UseDefaultColumnCollation(this ModelBuilder modelBuilder, string? collation) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Nullable < String > collation The collation. Returns Type Description ModelBuilder A builder to further configure the property. Remarks An alternative is to specify a database collation via , which will specify the query on CREATE DATABASE instead of for each and every column. However, PostgreSQL support is limited for the collations that can be specific via this mechanism; ICU collations - which include all case-insensitive collations - are currently unsupported. For more information, see https://www.postgresql.org/docs/current/collation.html . | Improve this Doc View Source UseHiLo(ModelBuilder, Nullable<String>, Nullable<String>) Configures the model to use a sequence-based hi-lo pattern to generate values for properties marked as , when targeting PostgreSQL. Declaration public static ModelBuilder UseHiLo(this ModelBuilder modelBuilder, string? name = null, string? schema = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Nullable < String > name The name of the sequence. Nullable < String > schema The schema of the sequence. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityAlwaysColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as , when targeting PostgreSQL. Values for these columns will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static ModelBuilder UseIdentityAlwaysColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityByDefaultColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as , when targeting PostgreSQL. Values for these columns will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static ModelBuilder UseIdentityByDefaultColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as , when targeting PostgreSQL. Values for these columns will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static ModelBuilder UseIdentityColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseKeySequences(ModelBuilder, Nullable<String>, Nullable<String>) Configures the model to use a sequence per hierarchy to generate values for key properties marked as , when targeting PostgreSQL. Declaration public static ModelBuilder UseKeySequences(this ModelBuilder modelBuilder, string? nameSuffix = null, string? schema = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Nullable < String > nameSuffix The name that will suffix the table name for each sequence created automatically. Nullable < String > schema The schema of the sequence. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseSerialColumns(ModelBuilder) Configures the model to use the PostgreSQL SERIAL feature to generate values for properties marked as , when targeting PostgreSQL. This option should be considered deprecated starting with PostgreSQL 10, consider using UseIdentityColumns(ModelBuilder) instead. Declaration public static ModelBuilder UseSerialColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseTablespace(ModelBuilder, String) Specifies the PostgreSQL tablespace in which to place the new database created for this model. Declaration public static ModelBuilder UseTablespace(this ModelBuilder modelBuilder, string tablespace) Parameters Type Name Description ModelBuilder modelBuilder String tablespace Returns Type Description ModelBuilder"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelExtensions.html",
    "title": "Class NpgsqlModelExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlModelExtensions Model extension methods for Npgsql-specific metadata. Inheritance Object NpgsqlModelExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlModelExtensions : object Remarks See Modeling entity types and relationships . Fields | Improve this Doc View Source DefaultHiLoSequenceName The default name for the hi-lo sequence. Declaration public const string DefaultHiLoSequenceName = null Field Value Type Description String | Improve this Doc View Source DefaultSequenceNameSuffix The default prefix for sequences applied to properties. Declaration public const string DefaultSequenceNameSuffix = null Field Value Type Description String Methods | Improve this Doc View Source GetCollations(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresCollation> GetCollations(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description IReadOnlyList < PostgresCollation > | Improve this Doc View Source GetDatabaseTemplate(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string? GetDatabaseTemplate(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description Nullable < String > | Improve this Doc View Source GetDatabaseTemplateConfigurationSource(IConventionModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static ConfigurationSource? GetDatabaseTemplateConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model Returns Type Description Nullable < ConfigurationSource > | Improve this Doc View Source GetDefaultColumnCollation(IReadOnlyModel) Gets the default collation for all columns in the database, or null if none is defined. This causes EF Core to specify an explicit collation when creating all column, unless one is overridden on a column. Declaration public static string? GetDefaultColumnCollation(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description Nullable < String > Remarks See for another approach to defining a database-wide collation. For more information, see https://www.postgresql.org/docs/current/collation.html . | Improve this Doc View Source GetDefaultColumnCollationConfigurationSource(IConventionModel) Returns the for the default column collation. Declaration public static ConfigurationSource? GetDefaultColumnCollationConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description Nullable < ConfigurationSource > The for the default column collation. | Improve this Doc View Source GetHiLoSequenceName(IReadOnlyModel) Returns the name to use for the default hi-lo sequence. Declaration public static string GetHiLoSequenceName(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description String The name to use for the default hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceNameConfigurationSource(IConventionModel) Returns the for the default hi-lo sequence name. Declaration public static ConfigurationSource? GetHiLoSequenceNameConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description Nullable < ConfigurationSource > The for the default hi-lo sequence name. | Improve this Doc View Source GetHiLoSequenceSchema(IReadOnlyModel) Returns the schema to use for the default hi-lo sequence. UseHiLo(PropertyBuilder, Nullable<String>, Nullable<String>) Declaration public static string? GetHiLoSequenceSchema(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description Nullable < String > The schema to use for the default hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceSchemaConfigurationSource(IConventionModel) Returns the for the default hi-lo sequence schema. Declaration public static ConfigurationSource? GetHiLoSequenceSchemaConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description Nullable < ConfigurationSource > The for the default hi-lo sequence schema. | Improve this Doc View Source GetOrAddCollation(IMutableModel, Nullable<String>, String, String, String, Nullable<String>, Nullable<Boolean>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresCollation GetOrAddCollation(this IMutableModel model, string? schema, string name, string lcCollate, string lcCtype, string? provider = null, bool? deterministic = null) Parameters Type Name Description IMutableModel model Nullable < String > schema String name String lcCollate String lcCtype Nullable < String > provider Nullable < Boolean > deterministic Returns Type Description PostgresCollation | Improve this Doc View Source GetOrAddPostgresEnum(IMutableModel, Nullable<String>, String, String[]) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresEnum GetOrAddPostgresEnum(this IMutableModel model, string? schema, string name, string[] labels) Parameters Type Name Description IMutableModel model Nullable < String > schema String name String [] labels Returns Type Description PostgresEnum | Improve this Doc View Source GetOrAddPostgresExtension(IConventionModel, Nullable<String>, String, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresExtension GetOrAddPostgresExtension(this IConventionModel model, string? schema, string name, string? version) Parameters Type Name Description IConventionModel model Nullable < String > schema String name Nullable < String > version Returns Type Description PostgresExtension | Improve this Doc View Source GetOrAddPostgresExtension(IMutableModel, Nullable<String>, String, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresExtension GetOrAddPostgresExtension(this IMutableModel model, string? schema, string name, string? version) Parameters Type Name Description IMutableModel model Nullable < String > schema String name Nullable < String > version Returns Type Description PostgresExtension | Improve this Doc View Source GetOrAddPostgresRange(IMutableModel, Nullable<String>, String, String, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresRange GetOrAddPostgresRange(this IMutableModel model, string? schema, string name, string subtype, string? canonicalFunction = null, string? subtypeOpClass = null, string? collation = null, string? subtypeDiff = null) Parameters Type Name Description IMutableModel model Nullable < String > schema String name String subtype Nullable < String > canonicalFunction Nullable < String > subtypeOpClass Nullable < String > collation Nullable < String > subtypeDiff Returns Type Description PostgresRange | Improve this Doc View Source GetPostgresEnums(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresEnum> GetPostgresEnums(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description IReadOnlyList < PostgresEnum > | Improve this Doc View Source GetPostgresExtensions(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresExtension> GetPostgresExtensions(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description IReadOnlyList < PostgresExtension > | Improve this Doc View Source GetSequenceNameSuffix(IReadOnlyModel) Returns the suffix to append to the name of automatically created sequences. Declaration public static string GetSequenceNameSuffix(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description String The name to use for the default key value generation sequence. | Improve this Doc View Source GetSequenceNameSuffixConfigurationSource(IConventionModel) Returns the for the default value generation sequence name suffix. Declaration public static ConfigurationSource? GetSequenceNameSuffixConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description Nullable < ConfigurationSource > The for the default key value generation sequence name. | Improve this Doc View Source GetSequenceSchema(IReadOnlyModel) Returns the schema to use for the default value generation sequence. UseSequence(PropertyBuilder, Nullable<String>, Nullable<String>) Declaration public static string? GetSequenceSchema(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description Nullable < String > The schema to use for the default key value generation sequence. | Improve this Doc View Source GetSequenceSchemaConfigurationSource(IConventionModel) Returns the for the default key value generation sequence schema. Declaration public static ConfigurationSource? GetSequenceSchemaConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description Nullable < ConfigurationSource > The for the default key value generation sequence schema. | Improve this Doc View Source GetTablespace(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string? GetTablespace(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description Nullable < String > | Improve this Doc View Source GetTablespaceConfigurationSource(IConventionModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static ConfigurationSource? GetTablespaceConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model Returns Type Description Nullable < ConfigurationSource > | Improve this Doc View Source GetValueGenerationStrategy(IReadOnlyModel) Returns the NpgsqlValueGenerationStrategy to use for properties of keys in the model, unless the property has a strategy explicitly set. Declaration public static NpgsqlValueGenerationStrategy? GetValueGenerationStrategy(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description Nullable < NpgsqlValueGenerationStrategy > The default NpgsqlValueGenerationStrategy . | Improve this Doc View Source GetValueGenerationStrategyConfigurationSource(IConventionModel) Returns the for the default NpgsqlValueGenerationStrategy . Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description Nullable < ConfigurationSource > The for the default NpgsqlValueGenerationStrategy . | Improve this Doc View Source PostgresRanges(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresRange> PostgresRanges(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description IReadOnlyList < PostgresRange > | Improve this Doc View Source SetDatabaseTemplate(IConventionModel, Nullable<String>, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string? SetDatabaseTemplate(this IConventionModel model, string? template, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model Nullable < String > template Boolean fromDataAnnotation Returns Type Description Nullable < String > | Improve this Doc View Source SetDatabaseTemplate(IMutableModel, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void SetDatabaseTemplate(this IMutableModel model, string? template) Parameters Type Name Description IMutableModel model Nullable < String > template | Improve this Doc View Source SetDefaultColumnCollation(IConventionModel, Nullable<String>, Boolean) Sets the default collation for all columns in the database, or null if none is defined. This causes EF Core to specify an explicit collation when creating all column, unless one is overridden on a column. Declaration public static string? SetDefaultColumnCollation(this IConventionModel model, string? collation, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model Nullable < String > collation Boolean fromDataAnnotation Returns Type Description Nullable < String > Remarks See for another approach to defining a database-wide collation. For more information, see https://www.postgresql.org/docs/current/collation.html . | Improve this Doc View Source SetDefaultColumnCollation(IMutableModel, Nullable<String>) Sets the default collation for all columns in the database, or null if none is defined. This causes EF Core to specify an explicit collation when creating all column, unless one is overridden on a column. Declaration public static void SetDefaultColumnCollation(this IMutableModel model, string? collation) Parameters Type Name Description IMutableModel model Nullable < String > collation Remarks See for another approach to defining a database-wide collation. For more information, see https://www.postgresql.org/docs/current/collation.html . | Improve this Doc View Source SetHiLoSequenceName(IConventionModel, Nullable<String>, Boolean) Sets the name to use for the default hi-lo sequence. Declaration public static string? SetHiLoSequenceName(this IConventionModel model, string? name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. Nullable < String > name The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < String > | Improve this Doc View Source SetHiLoSequenceName(IMutableModel, Nullable<String>) Sets the name to use for the default hi-lo sequence. Declaration public static void SetHiLoSequenceName(this IMutableModel model, string? name) Parameters Type Name Description IMutableModel model The model. Nullable < String > name The value to set. | Improve this Doc View Source SetHiLoSequenceSchema(IConventionModel, Nullable<String>, Boolean) Sets the schema to use for the default hi-lo sequence. Declaration public static string? SetHiLoSequenceSchema(this IConventionModel model, string? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. Nullable < String > value The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < String > | Improve this Doc View Source SetHiLoSequenceSchema(IMutableModel, Nullable<String>) Sets the schema to use for the default hi-lo sequence. Declaration public static void SetHiLoSequenceSchema(this IMutableModel model, string? value) Parameters Type Name Description IMutableModel model The model. Nullable < String > value The value to set. | Improve this Doc View Source SetSequenceNameSuffix(IConventionModel, Nullable<String>, Boolean) Sets the suffix to append to the name of automatically created sequences. Declaration public static string? SetSequenceNameSuffix(this IConventionModel model, string? name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. Nullable < String > name The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < String > The configured value. | Improve this Doc View Source SetSequenceNameSuffix(IMutableModel, Nullable<String>) Sets the suffix to append to the name of automatically created sequences. Declaration public static void SetSequenceNameSuffix(this IMutableModel model, string? name) Parameters Type Name Description IMutableModel model The model. Nullable < String > name The value to set. | Improve this Doc View Source SetSequenceSchema(IConventionModel, Nullable<String>, Boolean) Sets the schema to use for the default key value generation sequence. Declaration public static string? SetSequenceSchema(this IConventionModel model, string? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. Nullable < String > value The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < String > The configured value. | Improve this Doc View Source SetSequenceSchema(IMutableModel, Nullable<String>) Sets the schema to use for the default key value generation sequence. Declaration public static void SetSequenceSchema(this IMutableModel model, string? value) Parameters Type Name Description IMutableModel model The model. Nullable < String > value The value to set. | Improve this Doc View Source SetTablespace(IConventionModel, Nullable<String>, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string? SetTablespace(this IConventionModel model, string? tablespace, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model Nullable < String > tablespace Boolean fromDataAnnotation Returns Type Description Nullable < String > | Improve this Doc View Source SetTablespace(IMutableModel, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void SetTablespace(this IMutableModel model, string? tablespace) Parameters Type Name Description IMutableModel model Nullable < String > tablespace | Improve this Doc View Source SetValueGenerationStrategy(IConventionModel, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Attempts to set the NpgsqlValueGenerationStrategy to use for properties of keys in the model that don't have a strategy explicitly set. Declaration public static NpgsqlValueGenerationStrategy? SetValueGenerationStrategy(this IConventionModel model, NpgsqlValueGenerationStrategy? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. Nullable < NpgsqlValueGenerationStrategy > value The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < NpgsqlValueGenerationStrategy > | Improve this Doc View Source SetValueGenerationStrategy(IMutableModel, Nullable<NpgsqlValueGenerationStrategy>) Attempts to set the NpgsqlValueGenerationStrategy to use for properties of keys in the model that don't have a strategy explicitly set. Declaration public static void SetValueGenerationStrategy(this IMutableModel model, NpgsqlValueGenerationStrategy? value) Parameters Type Name Description IMutableModel model The model. Nullable < NpgsqlValueGenerationStrategy > value The value to set."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMultirangeDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMultirangeDbFunctionsExtensions.html",
    "title": "Class NpgsqlMultirangeDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlMultirangeDbFunctionsExtensions Provides extension methods for multiranges supporting PostgreSQL translation. Inheritance Object NpgsqlMultirangeDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlMultirangeDbFunctionsExtensions : object Methods | Improve this Doc View Source ContainedBy<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange is contained by a specified multirange. Declaration public static bool ContainedBy<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The specified multirange to locate in the multirange. List < NpgsqlRange <T>> multirange2 The multirange in which to locate the specified multirange. Returns Type Description Boolean true if the multirange contains the specified multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source ContainedBy<T>(NpgsqlRange<T>, List<NpgsqlRange<T>>) Determines whether a range is contained by a specified multirange. Declaration public static bool ContainedBy<T>(this NpgsqlRange<T> range, List<NpgsqlRange<T>> multirange) Parameters Type Name Description NpgsqlRange <T> range The specified range to locate in the multirange. List < NpgsqlRange <T>> multirange The multirange in which to locate the specified range. Returns Type Description Boolean true if the multirange contains the specified range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source ContainedBy<T>(NpgsqlRange<T>, NpgsqlRange<T>[]) Determines whether a range is contained by a specified multirange. Declaration public static bool ContainedBy<T>(this NpgsqlRange<T> range, NpgsqlRange<T>[] multirange) Parameters Type Name Description NpgsqlRange <T> range The specified range to locate in the multirange. NpgsqlRange <T>[] multirange The multirange in which to locate the specified range. Returns Type Description Boolean true if the multirange contains the specified range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source ContainedBy<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange is contained by a specified multirange. Declaration public static bool ContainedBy<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The specified multirange to locate in the multirange. NpgsqlRange <T>[] multirange2 The multirange in which to locate the specified multirange. Returns Type Description Boolean true if the multirange contains the specified multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Contains<T>(List<NpgsqlRange<T>>, T) Determines whether a multirange contains a specified value. Declaration public static bool Contains<T>(this List<NpgsqlRange<T>> multirange, T value) Parameters Type Name Description List < NpgsqlRange <T>> multirange The multirange in which to locate the value. T value The value to locate in the range. Returns Type Description Boolean true if the multirange contains the specified value; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Contains<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange contains a specified multirange. Declaration public static bool Contains<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The multirange in which to locate the specified multirange. List < NpgsqlRange <T>> multirange2 The specified multirange to locate in the multirange. Returns Type Description Boolean true if the multirange contains the specified multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Contains<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange contains a specified range. Declaration public static bool Contains<T>(this List<NpgsqlRange<T>> multirange1, NpgsqlRange<T> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The multirange in which to locate the specified range. NpgsqlRange <T> multirange2 The specified range to locate in the multirange. Returns Type Description Boolean true if the multirange contains the specified range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Contains<T>(NpgsqlRange<T>[], T) Determines whether a multirange contains a specified value. Declaration public static bool Contains<T>(this NpgsqlRange<T>[] multirange, T value) Parameters Type Name Description NpgsqlRange <T>[] multirange The multirange in which to locate the value. T value The value to locate in the range. Returns Type Description Boolean true if the multirange contains the specified value; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Contains<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange contains a specified range. Declaration public static bool Contains<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T> multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The multirange in which to locate the specified range. NpgsqlRange <T> multirange2 The specified range to locate in the multirange. Returns Type Description Boolean true if the multirange contains the specified range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Contains<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange contains a specified multirange. Declaration public static bool Contains<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The multirange in which to locate the specified multirange. NpgsqlRange <T>[] multirange2 The specified multirange to locate in the multirange. Returns Type Description Boolean true if the multirange contains the specified multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source DoesNotExtendLeftOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange does not extend to the left of another multirange. Declaration public static bool DoesNotExtendLeftOf<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The first multirange. List < NpgsqlRange <T>> multirange2 The second multirange. Returns Type Description Boolean true if the first multirange does not extend to the left of the multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source DoesNotExtendLeftOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange does not extend to the left of a range. Declaration public static bool DoesNotExtendLeftOf<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List < NpgsqlRange <T>> multirange The multirange. NpgsqlRange <T> range The multirange. Returns Type Description Boolean true if the multirange does not extend to the left of the range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source DoesNotExtendLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange does not extend to the left of a range. Declaration public static bool DoesNotExtendLeftOf<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange <T>[] multirange The multirange. NpgsqlRange <T> range The multirange. Returns Type Description Boolean true if the multirange does not extend to the left of the range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source DoesNotExtendLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange does not extend to the left of another multirange. Declaration public static bool DoesNotExtendLeftOf<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The first multirange. NpgsqlRange <T>[] multirange2 The second multirange. Returns Type Description Boolean true if the first multirange does not extend to the left of the multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source DoesNotExtendRightOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange does not extend to the right of another multirange. Declaration public static bool DoesNotExtendRightOf<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The first multirange. List < NpgsqlRange <T>> multirange2 The second multirange. Returns Type Description Boolean true if the first multirange does not extend to the right of the multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source DoesNotExtendRightOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange does not extend to the right of a range. Declaration public static bool DoesNotExtendRightOf<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List < NpgsqlRange <T>> multirange The multirange. NpgsqlRange <T> range The multirange. Returns Type Description Boolean true if the multirange does not extend to the right of the range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source DoesNotExtendRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange does not extend to the right of a range. Declaration public static bool DoesNotExtendRightOf<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange <T>[] multirange The multirange. NpgsqlRange <T> range The multirange. Returns Type Description Boolean true if the multirange does not extend to the right of the range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source DoesNotExtendRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange does not extend to the right of another multirange. Declaration public static bool DoesNotExtendRightOf<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The first multirange. NpgsqlRange <T>[] multirange2 The second multirange. Returns Type Description Boolean true if the first multirange does not extend to the right of the multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Except<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Returns the set difference, which means the elements of one multirange that do not appear in a second multirange. Declaration public static List<NpgsqlRange<T>> Except<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The first multirange. List < NpgsqlRange <T>> multirange2 The second multirange. Returns Type Description List < NpgsqlRange <T>> A multirange containing the elements that appear in the first range, but not the second range. Type Parameters Name Description T | Improve this Doc View Source Except<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Returns the set difference, which means the elements of one multirange that do not appear in a second multirange. Declaration public static NpgsqlRange<T>[] Except<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The first multirange. NpgsqlRange <T>[] multirange2 The second multirange. Returns Type Description NpgsqlRange <T>[] A multirange containing the elements that appear in the first range, but not the second range. Type Parameters Name Description T | Improve this Doc View Source Intersect<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Returns the set intersection, which means elements that appear in each of two multiranges. Declaration public static List<NpgsqlRange<T>> Intersect<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The first multirange. List < NpgsqlRange <T>> multirange2 The second multirange. Returns Type Description List < NpgsqlRange <T>> A multirange containing the elements that appear in both ranges. Type Parameters Name Description T | Improve this Doc View Source Intersect<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Returns the set intersection, which means elements that appear in each of two multiranges. Declaration public static NpgsqlRange<T>[] Intersect<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The first multirange. NpgsqlRange <T>[] multirange2 The second multirange. Returns Type Description NpgsqlRange <T>[] A multirange containing the elements that appear in both ranges. Type Parameters Name Description T | Improve this Doc View Source IsAdjacentTo<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange is adjacent to another multirange. Declaration public static bool IsAdjacentTo<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The first multirange. List < NpgsqlRange <T>> multirange2 The second multirange. Returns Type Description Boolean true if the multiranges are adjacent; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsAdjacentTo<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange is adjacent to a range. Declaration public static bool IsAdjacentTo<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List < NpgsqlRange <T>> multirange The multirange. NpgsqlRange <T> range The range. Returns Type Description Boolean true if the multirange and range are adjacent; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsAdjacentTo<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange is adjacent to a range. Declaration public static bool IsAdjacentTo<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange <T>[] multirange The multirange. NpgsqlRange <T> range The range. Returns Type Description Boolean true if the multirange and range are adjacent; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsAdjacentTo<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange is adjacent to another multirange. Declaration public static bool IsAdjacentTo<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The first multirange. NpgsqlRange <T>[] multirange2 The second multirange. Returns Type Description Boolean true if the multiranges are adjacent; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsStrictlyLeftOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange is strictly to the left of another multirange. Declaration public static bool IsStrictlyLeftOf<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The first multirange. List < NpgsqlRange <T>> multirange2 The second multirange. Returns Type Description Boolean true if the first multirange is strictly to the left of the second multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsStrictlyLeftOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange is strictly to the left of a range. Declaration public static bool IsStrictlyLeftOf<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List < NpgsqlRange <T>> multirange The multirange. NpgsqlRange <T> range The range. Returns Type Description Boolean true if the multirange is strictly to the left of the range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsStrictlyLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange is strictly to the left of a range. Declaration public static bool IsStrictlyLeftOf<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange <T>[] multirange The multirange. NpgsqlRange <T> range The range. Returns Type Description Boolean true if the multirange is strictly to the left of the range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsStrictlyLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange is strictly to the left of another multirange. Declaration public static bool IsStrictlyLeftOf<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The first multirange. NpgsqlRange <T>[] multirange2 The second multirange. Returns Type Description Boolean true if the first multirange is strictly to the left of the second multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsStrictlyRightOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange is strictly to the right of another multirange. Declaration public static bool IsStrictlyRightOf<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The first multirange. List < NpgsqlRange <T>> multirange2 The second multirange. Returns Type Description Boolean true if the first multirange is strictly to the right of the second multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsStrictlyRightOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange is strictly to the right of a range. Declaration public static bool IsStrictlyRightOf<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List < NpgsqlRange <T>> multirange The multirange. NpgsqlRange <T> range The range. Returns Type Description Boolean true if the multirange is strictly to the right of the range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsStrictlyRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange is strictly to the right of a range. Declaration public static bool IsStrictlyRightOf<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange <T>[] multirange The multirange. NpgsqlRange <T> range The range. Returns Type Description Boolean true if the multirange is strictly to the right of the range; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsStrictlyRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange is strictly to the right of another multirange. Declaration public static bool IsStrictlyRightOf<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The first multirange. NpgsqlRange <T>[] multirange2 The second multirange. Returns Type Description Boolean true if the first multirange is strictly to the right of the second multirange; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Merge<T>(List<NpgsqlRange<T>>) Computes the smallest range that includes the entire multirange. Declaration public static NpgsqlRange<T> Merge<T>(this List<NpgsqlRange<T>> multirange) Parameters Type Name Description List < NpgsqlRange <T>> multirange The multirange. Returns Type Description NpgsqlRange <T> The smallest range that includes the entire multirange. Type Parameters Name Description T | Improve this Doc View Source Merge<T>(NpgsqlRange<T>[]) Computes the smallest range that includes the entire multirange. Declaration public static NpgsqlRange<T> Merge<T>(this NpgsqlRange<T>[] multirange) Parameters Type Name Description NpgsqlRange <T>[] multirange The multirange. Returns Type Description NpgsqlRange <T> The smallest range that includes the entire multirange. Type Parameters Name Description T | Improve this Doc View Source Overlaps<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange overlaps another multirange. Declaration public static bool Overlaps<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The first multirange. List < NpgsqlRange <T>> multirange2 The second multirange. Returns Type Description Boolean true if the multiranges overlap (share points in common); otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Overlaps<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange overlaps another range. Declaration public static bool Overlaps<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List < NpgsqlRange <T>> multirange The multirange. NpgsqlRange <T> range The range. Returns Type Description Boolean true if the multirange and range overlap (share points in common); otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Overlaps<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange overlaps another range. Declaration public static bool Overlaps<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange <T>[] multirange The multirange. NpgsqlRange <T> range The range. Returns Type Description Boolean true if the multirange and range overlap (share points in common); otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Overlaps<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange overlaps another multirange. Declaration public static bool Overlaps<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The first multirange. NpgsqlRange <T>[] multirange2 The second multirange. Returns Type Description Boolean true if the multiranges overlap (share points in common); otherwise, false . Type Parameters Name Description T | Improve this Doc View Source Union<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Returns the set union, which means unique elements that appear in either of two multiranges. Declaration public static List<NpgsqlRange<T>> Union<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List < NpgsqlRange <T>> multirange1 The first multirange. List < NpgsqlRange <T>> multirange2 The second multirange. Returns Type Description List < NpgsqlRange <T>> A multirange containing the unique elements that appear in either multirange. Type Parameters Name Description T | Improve this Doc View Source Union<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Returns the set union, which means unique elements that appear in either of two multiranges. Declaration public static NpgsqlRange<T>[] Union<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange <T>[] multirange1 The first multirange. NpgsqlRange <T>[] multirange2 The second multirange. Returns Type Description NpgsqlRange <T>[] A multirange containing the unique elements that appear in either multirange. Type Parameters Name Description T"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions NetTopologySuite specific extension methods for NpgsqlDbContextOptionsBuilder . Inheritance Object NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions : object Methods | Improve this Doc View Source UseNetTopologySuite(NpgsqlDbContextOptionsBuilder, Nullable<CoordinateSequenceFactory>, Nullable<PrecisionModel>, Ordinates, Boolean) Use NetTopologySuite to access SQL Server spatial data. Declaration public static NpgsqlDbContextOptionsBuilder UseNetTopologySuite(this NpgsqlDbContextOptionsBuilder optionsBuilder, CoordinateSequenceFactory? coordinateSequenceFactory = null, PrecisionModel? precisionModel = null, Ordinates handleOrdinates = null, bool geographyAsDefault = false) Parameters Type Name Description NpgsqlDbContextOptionsBuilder optionsBuilder Nullable < CoordinateSequenceFactory > coordinateSequenceFactory Nullable < PrecisionModel > precisionModel Ordinates handleOrdinates Boolean geographyAsDefault Returns Type Description NpgsqlDbContextOptionsBuilder The options builder so that further configuration can be chained."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbFunctionsExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteDbFunctionsExtensions Provides Npgsql-specific spatial extension methods on . Inheritance Object NpgsqlNetTopologySuiteDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteDbFunctionsExtensions : object Methods | Improve this Doc View Source Distance(DbFunctions, Geometry, Geometry, Boolean) Returns the minimum distance between the origin geometry and another geometry g. Translates to ST_Distance . Declaration public static double Distance(this DbFunctions _, Geometry geometry, Geometry anotherGeometry, bool useSpheroid) Parameters Type Name Description DbFunctions _ The instance. Geometry geometry The origin geometry. Geometry anotherGeometry The geometry from which to compute the distance. Boolean useSpheroid Whether to use sphere or spheroid distance measurement. Returns Type Description Double The distance between the geometries. Remarks See https://postgis.net/docs/ST_Distance.html . | Improve this Doc View Source DistanceKnn(DbFunctions, Geometry, Geometry) Returns the 2D distance between two geometries. Used in the \"ORDER BY\" clause, provides index-assisted nearest-neighbor result sets. Translates to <-> . Declaration public static double DistanceKnn(this DbFunctions _, Geometry geometry, Geometry anotherGeometry) Parameters Type Name Description DbFunctions _ The instance. Geometry geometry The origin geometry. Geometry anotherGeometry The geometry from which to compute the distance. Returns Type Description Double The 2D distance between the geometries. Remarks See https://postgis.net/docs/ST_Distance.html . | Improve this Doc View Source Force2D<TGeometry>(DbFunctions, TGeometry) Forces the geometries into a \"2-dimensional mode\" so that all output representations will only have the X and Y coordinates. Translates to ST_Force2D(geometry) Declaration public static TGeometry Force2D<TGeometry>(this DbFunctions _, TGeometry geometry) where TGeometry : Geometry Parameters Type Name Description DbFunctions _ TGeometry geometry Returns Type Description TGeometry Type Parameters Name Description TGeometry Remarks See https://postgis.net/docs/ST_Force2D.html . | Improve this Doc View Source IsWithinDistance(DbFunctions, Geometry, Geometry, Double, Boolean) Tests whether the distance from the origin geometry to another is less than or equal to a specified value. Translates to ST_DWithin . Declaration public static bool IsWithinDistance(this DbFunctions _, Geometry geometry, Geometry anotherGeometry, double distance, bool useSpheroid) Parameters Type Name Description DbFunctions _ The instance. Geometry geometry The origin geometry. Geometry anotherGeometry The geometry to check the distance to. Double distance The distance value to compare. Boolean useSpheroid Whether to use sphere or spheroid distance measurement. Returns Type Description Boolean true if the geometries are less than distance apart. Remarks See https://postgis.net/docs/ST_DWithin.html . | Improve this Doc View Source Transform<TGeometry>(DbFunctions, TGeometry, Int32) Returns a new geometry with its coordinates transformed to a different spatial reference system. Translates to ST_Transform(geometry, srid) . Declaration public static TGeometry Transform<TGeometry>(this DbFunctions _, TGeometry geometry, int srid) where TGeometry : Geometry Parameters Type Name Description DbFunctions _ TGeometry geometry Int32 srid Returns Type Description TGeometry Type Parameters Name Description TGeometry Remarks See https://postgis.net/docs/ST_Transform.html ."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetworkDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetworkDbFunctionsExtensions.html",
    "title": "Class NpgsqlNetworkDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetworkDbFunctionsExtensions Provides extension methods supporting operator translation for PostgreSQL network types. Inheritance Object NpgsqlNetworkDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlNetworkDbFunctionsExtensions : object Remarks See: https://www.postgresql.org/docs/current/static/functions-net.html Methods | Improve this Doc View Source Abbreviate(DbFunctions, IPAddress) Returns the abbreviated display format as text. Declaration public static string Abbreviate(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet to abbreviate. Returns Type Description String The abbreviated display format as text. | Improve this Doc View Source Abbreviate(DbFunctions, (IPAddress Address, Int32 Subnet)) Returns the abbreviated display format as text. Declaration public static string Abbreviate(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr to abbreviate. Returns Type Description String The abbreviated display format as text. | Improve this Doc View Source Add(DbFunctions, IPAddress, Int32) Adds the value to the . Declaration public static IPAddress Add(this DbFunctions _, IPAddress inet, int value) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet. Int32 value The value to add. Returns Type Description IPAddress The augmented by the value . | Improve this Doc View Source Add(DbFunctions, (IPAddress Address, Int32 Subnet), Int32) Adds the value to the (IPAddress Address, int Subnet). Declaration public static (IPAddress Address, int Subnet) Add(this DbFunctions _, (IPAddress Address, int Subnet) cidr, int value) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr. Int32 value The value to add. Returns Type Description (, ) < IPAddress , Int32 > The (IPAddress Address, int Subnet) augmented by the value . | Improve this Doc View Source BitwiseAnd(DbFunctions, IPAddress, IPAddress) Computes the bitwise AND of two instances. Declaration public static IPAddress BitwiseAnd(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The left-hand inet. IPAddress other The right-hand inet. Returns Type Description IPAddress The result of the bitwise AND operation. | Improve this Doc View Source BitwiseAnd(DbFunctions, PhysicalAddress, PhysicalAddress) Computes the bitwise AND of two instances. Declaration public static PhysicalAddress BitwiseAnd(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description PhysicalAddress The result of the bitwise AND operation. | Improve this Doc View Source BitwiseAnd(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Computes the bitwise AND of two (IPAddress Address, int Subnet) instances. Declaration public static (IPAddress Address, int Subnet) BitwiseAnd(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The left-hand cidr. (, ) < IPAddress , Int32 > other The right-hand cidr. Returns Type Description (, ) < IPAddress , Int32 > The result of the bitwise AND operation. | Improve this Doc View Source BitwiseNot(DbFunctions, IPAddress) Computes the bitwise NOT operation on an . Declaration public static IPAddress BitwiseNot(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet to negate. Returns Type Description IPAddress The result of the bitwise NOT operation. | Improve this Doc View Source BitwiseNot(DbFunctions, PhysicalAddress) Computes the bitwise NOT operation on an . Declaration public static PhysicalAddress BitwiseNot(this DbFunctions _, PhysicalAddress macaddr) Parameters Type Name Description DbFunctions _ The instance. PhysicalAddress macaddr The macaddr to negate. Returns Type Description PhysicalAddress The result of the bitwise NOT operation. | Improve this Doc View Source BitwiseNot(DbFunctions, (IPAddress Address, Int32 Subnet)) Computes the bitwise NOT operation on an (IPAddress Address, int Subnet). Declaration public static (IPAddress Address, int Subnet) BitwiseNot(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr to negate. Returns Type Description (, ) < IPAddress , Int32 > The result of the bitwise NOT operation. | Improve this Doc View Source BitwiseOr(DbFunctions, IPAddress, IPAddress) Computes the bitwise OR of two instances. Declaration public static IPAddress BitwiseOr(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The left-hand inet. IPAddress other The right-hand inet. Returns Type Description IPAddress The result of the bitwise OR operation. | Improve this Doc View Source BitwiseOr(DbFunctions, PhysicalAddress, PhysicalAddress) Computes the bitwise OR of two instances. Declaration public static PhysicalAddress BitwiseOr(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description PhysicalAddress The result of the bitwise OR operation. | Improve this Doc View Source BitwiseOr(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Computes the bitwise OR of two (IPAddress Address, int Subnet) instances. Declaration public static (IPAddress Address, int Subnet) BitwiseOr(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The left-hand cidr. (, ) < IPAddress , Int32 > other The right-hand cidr. Returns Type Description (, ) < IPAddress , Int32 > The result of the bitwise OR operation. | Improve this Doc View Source Broadcast(DbFunctions, IPAddress) Returns the broadcast address for a network. Declaration public static IPAddress Broadcast(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet used to derive the broadcast address. Returns Type Description IPAddress The broadcast address for a network. | Improve this Doc View Source Broadcast(DbFunctions, (IPAddress Address, Int32 Subnet)) Returns the broadcast address for a network. Declaration public static IPAddress Broadcast(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr used to derive the broadcast address. Returns Type Description IPAddress The broadcast address for a network. | Improve this Doc View Source ContainedBy(DbFunctions, IPAddress, IPAddress) Determines whether an is contained within another . Declaration public static bool ContainedBy(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet to locate. IPAddress other The inet to search. Returns Type Description Boolean True if the is contained within the other ; otherwise, false. | Improve this Doc View Source ContainedBy(DbFunctions, IPAddress, (IPAddress Address, Int32 Subnet)) Determines whether an is contained within a network. Declaration public static bool ContainedBy(this DbFunctions _, IPAddress inet, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet to locate. (, ) < IPAddress , Int32 > other The cidr to search. Returns Type Description Boolean True if the is contained within the network; otherwise, false. | Improve this Doc View Source ContainedBy(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is contained within another (IPAddress Address, int Subnet). Declaration public static bool ContainedBy(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr to locate. (, ) < IPAddress , Int32 > other The cidr to search. Returns Type Description Boolean True if the (IPAddress Address, int Subnet) is contained within the other (IPAddress Address, int Subnet); otherwise, false. | Improve this Doc View Source ContainedByOrEqual(DbFunctions, IPAddress, IPAddress) Determines whether an is contained within or equal to another . Declaration public static bool ContainedByOrEqual(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet to locate. IPAddress other The inet to search. Returns Type Description Boolean True if the is contained within or equal to the other ; otherwise, false. | Improve this Doc View Source ContainedByOrEqual(DbFunctions, IPAddress, (IPAddress Address, Int32 Subnet)) Determines whether an is contained within or equal to a network. Declaration public static bool ContainedByOrEqual(this DbFunctions _, IPAddress inet, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet to locate. (, ) < IPAddress , Int32 > other The cidr to search. Returns Type Description Boolean True if the is contained within or equal to the network; otherwise, false. | Improve this Doc View Source ContainedByOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is contained within or equal to another (IPAddress Address, int Subnet). Declaration public static bool ContainedByOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr to locate. (, ) < IPAddress , Int32 > other The cidr to search. Returns Type Description Boolean True if the (IPAddress Address, int Subnet) is contained within or equal to the other (IPAddress Address, int Subnet); otherwise, false. | Improve this Doc View Source Contains(DbFunctions, IPAddress, IPAddress) Determines whether an contains another . Declaration public static bool Contains(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The IP address to search. IPAddress other The IP address to locate. Returns Type Description Boolean True if the contains the other ; otherwise, false. | Improve this Doc View Source Contains(DbFunctions, (IPAddress Address, Int32 Subnet), IPAddress) Determines whether a network contains another . Declaration public static bool Contains(this DbFunctions _, (IPAddress Address, int Subnet) cidr, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The network to search. IPAddress other The IP address to locate. Returns Type Description Boolean True if the network contains the other ; otherwise, false. | Improve this Doc View Source Contains(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) contains another (IPAddress Address, int Subnet). Declaration public static bool Contains(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr to search. (, ) < IPAddress , Int32 > other The cidr to locate. Returns Type Description Boolean True if the (IPAddress Address, int Subnet) contains the other (IPAddress Address, int Subnet); otherwise, false. | Improve this Doc View Source ContainsOrContainedBy(DbFunctions, IPAddress, IPAddress) Determines whether an contains or is contained by another . Declaration public static bool ContainsOrContainedBy(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The IP address to search. IPAddress other The IP address to locate. Returns Type Description Boolean True if the contains or is contained by the other ; otherwise, false. | Improve this Doc View Source ContainsOrContainedBy(DbFunctions, IPAddress, (IPAddress Address, Int32 Subnet)) Determines whether an contains or is contained by a network. Declaration public static bool ContainsOrContainedBy(this DbFunctions _, IPAddress inet, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The IP address to search. (, ) < IPAddress , Int32 > other The network to locate. Returns Type Description Boolean True if the contains or is contained by the network; otherwise, false. | Improve this Doc View Source ContainsOrContainedBy(DbFunctions, (IPAddress Address, Int32 Subnet), IPAddress) Determines whether a network contains or is contained by an . Declaration public static bool ContainsOrContainedBy(this DbFunctions _, (IPAddress Address, int Subnet) cidr, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The network to search. IPAddress other The IP address to locate. Returns Type Description Boolean True if the network contains or is contained by the ; otherwise, false. | Improve this Doc View Source ContainsOrContainedBy(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) contains or is contained by another (IPAddress Address, int Subnet). Declaration public static bool ContainsOrContainedBy(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr to search. (, ) < IPAddress , Int32 > other The cidr to locate. Returns Type Description Boolean True if the (IPAddress Address, int Subnet) contains or is contained by the other (IPAddress Address, int Subnet); otherwise, false. | Improve this Doc View Source ContainsOrEqual(DbFunctions, IPAddress, IPAddress) Determines whether an contains or is equal to another . Declaration public static bool ContainsOrEqual(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The IP address to search. IPAddress other The IP address to locate. Returns Type Description Boolean True if the contains or is equal to the other ; otherwise, false. | Improve this Doc View Source ContainsOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), IPAddress) Determines whether a network contains or is equal to another . Declaration public static bool ContainsOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The network to search. IPAddress other The IP address to locate. Returns Type Description Boolean True if the network contains or is equal to the other ; otherwise, false. | Improve this Doc View Source ContainsOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) contains or is equal to another (IPAddress Address, int Subnet). Declaration public static bool ContainsOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr to search. (, ) < IPAddress , Int32 > other The cidr to locate. Returns Type Description Boolean True if the (IPAddress Address, int Subnet) contains or is equal to the other (IPAddress Address, int Subnet); otherwise, false. | Improve this Doc View Source Family(DbFunctions, IPAddress) Extracts the family of an address; 4 for IPv4, 6 for IPv6. Declaration public static int Family(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet used to derive the family. Returns Type Description Int32 The family of an address; 4 for IPv4, 6 for IPv6. | Improve this Doc View Source Family(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the family of an address; 4 for IPv4, 6 for IPv6. Declaration public static int Family(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr used to derive the family. Returns Type Description Int32 The family of an address; 4 for IPv4, 6 for IPv6. | Improve this Doc View Source GreaterThan(DbFunctions, IPAddress, IPAddress) Determines whether an is greater than another . Declaration public static bool GreaterThan(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The left-hand inet. IPAddress other The right-hand inet. Returns Type Description Boolean True if the is greater than the other ; otherwise, false. | Improve this Doc View Source GreaterThan(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an is greater than another . Declaration public static bool GreaterThan(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description Boolean True if the is greater than the other ; otherwise, false. | Improve this Doc View Source GreaterThan(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is greater than another (IPAddress Address, int Subnet). Declaration public static bool GreaterThan(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The left-hand cidr. (, ) < IPAddress , Int32 > other The right-hand cidr. Returns Type Description Boolean True if the (IPAddress Address, int Subnet) is greater than the other (IPAddress Address, int Subnet); otherwise, false. | Improve this Doc View Source GreaterThanOrEqual(DbFunctions, IPAddress, IPAddress) Determines whether an is greater than or equal to another . Declaration public static bool GreaterThanOrEqual(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The left-hand inet. IPAddress other The right-hand inet. Returns Type Description Boolean True if the is greater than or equal to the other ; otherwise, false. | Improve this Doc View Source GreaterThanOrEqual(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an is greater than or equal to another . Declaration public static bool GreaterThanOrEqual(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description Boolean True if the is greater than or equal to the other ; otherwise, false. | Improve this Doc View Source GreaterThanOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is greater than or equal to another (IPAddress Address, int Subnet). Declaration public static bool GreaterThanOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The left-hand cidr. (, ) < IPAddress , Int32 > other The right-hand cidr. Returns Type Description Boolean True if the (IPAddress Address, int Subnet) is greater than or equal to the other (IPAddress Address, int Subnet); otherwise, false. | Improve this Doc View Source Host(DbFunctions, IPAddress) Extracts the host (i.e. the IP address) as text. Declaration public static string Host(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet from which to extract the host. Returns Type Description String The host (i.e. the IP address) as text. | Improve this Doc View Source Host(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the host (i.e. the IP address) as text. Declaration public static string Host(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr from which to extract the host. Returns Type Description String The host (i.e. the IP address) as text. | Improve this Doc View Source HostMask(DbFunctions, IPAddress) Constructs the host mask for the network. Declaration public static IPAddress HostMask(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet used to construct the host mask. Returns Type Description IPAddress The constructed host mask. | Improve this Doc View Source HostMask(DbFunctions, (IPAddress Address, Int32 Subnet)) Constructs the host mask for the network. Declaration public static IPAddress HostMask(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr used to construct the host mask. Returns Type Description IPAddress The constructed host mask. | Improve this Doc View Source LessThan(DbFunctions, IPAddress, IPAddress) Determines whether an is less than another . Declaration public static bool LessThan(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The left-hand inet. IPAddress other The right-hand inet. Returns Type Description Boolean True if the is less than the other ; otherwise, false. | Improve this Doc View Source LessThan(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an is less than another . Declaration public static bool LessThan(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description Boolean True if the is less than the other ; otherwise, false. | Improve this Doc View Source LessThan(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is less than another (IPAddress Address, int Subnet). Declaration public static bool LessThan(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The left-hand cidr. (, ) < IPAddress , Int32 > other The right-hand cidr. Returns Type Description Boolean True if the (IPAddress Address, int Subnet) is less than the other (IPAddress Address, int Subnet); otherwise, false. | Improve this Doc View Source LessThanOrEqual(DbFunctions, IPAddress, IPAddress) Determines whether an is less than or equal to another . Declaration public static bool LessThanOrEqual(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The left-hand inet. IPAddress other The right-hand inet. Returns Type Description Boolean True if the is less than or equal to the other ; otherwise, false. | Improve this Doc View Source LessThanOrEqual(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an is less than or equal to another . Declaration public static bool LessThanOrEqual(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description Boolean True if the is less than or equal to the other ; otherwise, false. | Improve this Doc View Source LessThanOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is less than or equal to another (IPAddress Address, int Subnet). Declaration public static bool LessThanOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The left-hand cidr. (, ) < IPAddress , Int32 > other The right-hand cidr. Returns Type Description Boolean True if the (IPAddress Address, int Subnet) is less than or equal to the other (IPAddress Address, int Subnet); otherwise, false. | Improve this Doc View Source MaskLength(DbFunctions, IPAddress) Extracts the length of the subnet mask. Declaration public static int MaskLength(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet used to extract the subnet length. Returns Type Description Int32 The length of the subnet mask. | Improve this Doc View Source MaskLength(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the length of the subnet mask. Declaration public static int MaskLength(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr used to extract the subnet length. Returns Type Description Int32 The length of the subnet mask. | Improve this Doc View Source Merge(DbFunctions, IPAddress, IPAddress) Constructs the smallest network which includes both of the given networks. Declaration public static (IPAddress Address, int Subnet) Merge(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The first inet. IPAddress other The second inet. Returns Type Description (, ) < IPAddress , Int32 > The smallest network which includes both of the given networks. | Improve this Doc View Source Merge(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Constructs the smallest network which includes both of the given networks. Declaration public static (IPAddress Address, int Subnet) Merge(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The first cidr. (, ) < IPAddress , Int32 > other The second cidr. Returns Type Description (, ) < IPAddress , Int32 > The smallest network which includes both of the given networks. | Improve this Doc View Source Netmask(DbFunctions, IPAddress) Constructs the subnet mask for the network. Declaration public static IPAddress Netmask(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet used to construct the subnet mask. Returns Type Description IPAddress The subnet mask for the network. | Improve this Doc View Source Netmask(DbFunctions, (IPAddress Address, Int32 Subnet)) Constructs the subnet mask for the network. Declaration public static IPAddress Netmask(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr used to construct the subnet mask. Returns Type Description IPAddress The subnet mask for the network. | Improve this Doc View Source Network(DbFunctions, IPAddress) Extracts the network part of the address. Declaration public static (IPAddress Address, int Subnet) Network(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet used to extract the network. Returns Type Description (, ) < IPAddress , Int32 > The network part of the address. | Improve this Doc View Source Network(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the network part of the address. Declaration public static (IPAddress Address, int Subnet) Network(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr used to extract the network. Returns Type Description (, ) < IPAddress , Int32 > The network part of the address. | Improve this Doc View Source SameFamily(DbFunctions, IPAddress, IPAddress) Tests if the addresses are in the same family. Declaration public static bool SameFamily(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The primary inet. IPAddress other The other inet. Returns Type Description Boolean True if the addresses are in the same family; otherwise, false. | Improve this Doc View Source SameFamily(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Tests if the addresses are in the same family. Declaration public static bool SameFamily(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The primary cidr. (, ) < IPAddress , Int32 > other The other cidr. Returns Type Description Boolean True if the addresses are in the same family; otherwise, false. | Improve this Doc View Source Set7BitMac8(DbFunctions, PhysicalAddress) Sets the 7th bit to one, also known as modified EUI-64, for inclusion in an IPv6 address. Declaration public static PhysicalAddress Set7BitMac8(this DbFunctions _, PhysicalAddress macAddress) Parameters Type Name Description DbFunctions _ The instance. PhysicalAddress macAddress The MAC address to modify. Returns Type Description PhysicalAddress The MAC address with the 7th bit set to one. | Improve this Doc View Source SetMaskLength(DbFunctions, IPAddress, Int32) Sets the length of the subnet mask. Declaration public static IPAddress SetMaskLength(this DbFunctions _, IPAddress inet, int length) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet to modify. Int32 length The subnet mask length to set. Returns Type Description IPAddress The network with a subnet mask of the specified length. | Improve this Doc View Source SetMaskLength(DbFunctions, (IPAddress Address, Int32 Subnet), Int32) Sets the length of the subnet mask. Declaration public static (IPAddress Address, int Subnet) SetMaskLength(this DbFunctions _, (IPAddress Address, int Subnet) cidr, int length) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr to modify. Int32 length The subnet mask length to set. Returns Type Description (, ) < IPAddress , Int32 > The network with a subnet mask of the specified length. | Improve this Doc View Source Subtract(DbFunctions, IPAddress, IPAddress) Subtracts one from another . Declaration public static int Subtract(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet from which to subtract. IPAddress other The inet to subtract. Returns Type Description Int32 The numeric difference between the two given addresses. | Improve this Doc View Source Subtract(DbFunctions, IPAddress, Int32) Subtracts the value from the . Declaration public static IPAddress Subtract(this DbFunctions _, IPAddress inet, int value) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet. Int32 value The value to subtract. Returns Type Description IPAddress The augmented by the value . | Improve this Doc View Source Subtract(DbFunctions, (IPAddress Address, Int32 Subnet), Int32) Subtracts the value from the (IPAddress Address, int Subnet). Declaration public static (IPAddress Address, int Subnet) Subtract(this DbFunctions _, (IPAddress Address, int Subnet) cidr, int value) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The inet. Int32 value The value to subtract. Returns Type Description (, ) < IPAddress , Int32 > The (IPAddress Address, int Subnet) augmented by the value . | Improve this Doc View Source Subtract(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Subtracts one (IPAddress Address, int Subnet) from another (IPAddress Address, int Subnet). Declaration public static int Subtract(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr from which to subtract. (, ) < IPAddress , Int32 > other The cidr to subtract. Returns Type Description Int32 The difference between the two addresses. | Improve this Doc View Source Text(DbFunctions, IPAddress) Extracts the IP address and subnet mask as text. Declaration public static string Text(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. IPAddress inet The inet to extract as text. Returns Type Description String The IP address and subnet mask as text. | Improve this Doc View Source Text(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the IP address and subnet mask as text. Declaration public static string Text(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. (, ) < IPAddress , Int32 > cidr The cidr to extract as text. Returns Type Description String The IP address and subnet mask as text. | Improve this Doc View Source Truncate(DbFunctions, PhysicalAddress) Sets the last 3 bytes of the MAC address to zero. For macaddr8, the last 5 bytes are set to zero. Declaration public static PhysicalAddress Truncate(this DbFunctions _, PhysicalAddress macAddress) Parameters Type Name Description DbFunctions _ The instance. PhysicalAddress macAddress The MAC address to truncate. Returns Type Description PhysicalAddress The MAC address with the last 3 bytes set to zero. For macaddr8, the last 5 bytes are set to zero."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbContextOptionsBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbContextOptionsBuilderExtensions.html",
    "title": "Class NpgsqlNodaTimeDbContextOptionsBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeDbContextOptionsBuilderExtensions NodaTime specific extension methods for NpgsqlDbContextOptionsBuilder . Inheritance Object NpgsqlNodaTimeDbContextOptionsBuilderExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public static class NpgsqlNodaTimeDbContextOptionsBuilderExtensions : object Methods | Improve this Doc View Source UseNodaTime(NpgsqlDbContextOptionsBuilder) Use NetTopologySuite to access SQL Server spatial data. Declaration public static NpgsqlDbContextOptionsBuilder UseNodaTime(this NpgsqlDbContextOptionsBuilder optionsBuilder) Parameters Type Name Description NpgsqlDbContextOptionsBuilder optionsBuilder Returns Type Description NpgsqlDbContextOptionsBuilder The options builder so that further configuration can be chained."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbFunctionsExtensions.html",
    "title": "Class NpgsqlNodaTimeDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeDbFunctionsExtensions Provides extension methods supporting NodaTime function translation for PostgreSQL. Inheritance Object NpgsqlNodaTimeDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public static class NpgsqlNodaTimeDbFunctionsExtensions : object Methods | Improve this Doc View Source Average(DbFunctions, IEnumerable<Duration>) Computes the average (arithmetic mean) of the non-null input intervals. Corresponds to the PostgreSQL avg aggregate function. Declaration public static Duration? Average(this DbFunctions _, IEnumerable<Duration> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Duration > input The input values to be computed into an average. Returns Type Description Nullable < Duration > See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source Average(DbFunctions, IEnumerable<Period>) Computes the average (arithmetic mean) of the non-null input intervals. Corresponds to the PostgreSQL avg aggregate function. Declaration public static Period? Average(this DbFunctions _, IEnumerable<Period> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Period > input The input values to be computed into an average. Returns Type Description Nullable < Period > See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source Distance(DbFunctions, Instant, Instant) Returns the distance between two instants as a , particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, Instant a, Instant b) Parameters Type Name Description DbFunctions _ Instant a Instant b Returns Type Description Int32 Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html . | Improve this Doc View Source Distance(DbFunctions, LocalDate, LocalDate) Returns the distance between two dates as a number of days, particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, LocalDate a, LocalDate b) Parameters Type Name Description DbFunctions _ LocalDate a LocalDate b Returns Type Description Int32 Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html . | Improve this Doc View Source Distance(DbFunctions, LocalDateTime, LocalDateTime) Returns the distance between two local timestamps as a , particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, LocalDateTime a, LocalDateTime b) Parameters Type Name Description DbFunctions _ LocalDateTime a LocalDateTime b Returns Type Description Int32 Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html . | Improve this Doc View Source Distance(DbFunctions, ZonedDateTime, ZonedDateTime) Returns the distance between two zoned timestamps as a , particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, ZonedDateTime a, ZonedDateTime b) Parameters Type Name Description DbFunctions _ ZonedDateTime a ZonedDateTime b Returns Type Description Int32 Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html . | Improve this Doc View Source RangeAgg(DbFunctions, IEnumerable<DateInterval>) Computes the union of the non-null input date intervals. Corresponds to the PostgreSQL range_agg aggregate function. Declaration public static DateInterval[] RangeAgg(this DbFunctions _, IEnumerable<DateInterval> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < DateInterval > input The date intervals to be aggregated via union into a multirange. Returns Type Description DateInterval [] See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source RangeAgg(DbFunctions, IEnumerable<Interval>) Computes the union of the non-null input intervals. Corresponds to the PostgreSQL range_agg aggregate function. Declaration public static Interval[] RangeAgg(this DbFunctions _, IEnumerable<Interval> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Interval > input The intervals to be aggregated via union into a multirange. Returns Type Description Interval [] See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source RangeIntersectAgg(DbFunctions, IEnumerable<DateInterval[]>) Computes the intersection of the non-null input date interval multiranges. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static DateInterval[] RangeIntersectAgg(this DbFunctions _, IEnumerable<DateInterval[]> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < DateInterval []> input The date intervals on which to perform the intersection operation. Returns Type Description DateInterval [] See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source RangeIntersectAgg(DbFunctions, IEnumerable<DateInterval>) Computes the intersection of the non-null input date intervals. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static DateInterval RangeIntersectAgg(this DbFunctions _, IEnumerable<DateInterval> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < DateInterval > input The date intervals on which to perform the intersection operation. Returns Type Description DateInterval See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source RangeIntersectAgg(DbFunctions, IEnumerable<Interval[]>) Computes the intersection of the non-null input interval multiranges. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static Interval[] RangeIntersectAgg(this DbFunctions _, IEnumerable<Interval[]> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Interval []> input The intervals on which to perform the intersection operation. Returns Type Description Interval [] See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source RangeIntersectAgg(DbFunctions, IEnumerable<Interval>) Computes the intersection of the non-null input intervals. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static Interval RangeIntersectAgg(this DbFunctions _, IEnumerable<Interval> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Interval > input The intervals on which to perform the intersection operation. Returns Type Description Interval See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source Sum(DbFunctions, IEnumerable<Duration>) Computes the sum of the non-null input intervals. Corresponds to the PostgreSQL sum aggregate function. Declaration public static Duration? Sum(this DbFunctions _, IEnumerable<Duration> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Duration > input The input values to be summed. Returns Type Description Nullable < Duration > See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source Sum(DbFunctions, IEnumerable<Period>) Computes the sum of the non-null input intervals. Corresponds to the PostgreSQL sum aggregate function. Declaration public static Period? Sum(this DbFunctions _, IEnumerable<Period> input) Parameters Type Name Description DbFunctions _ The instance. IEnumerable < Period > input The input values to be summed. Returns Type Description Nullable < Period > See Also PostgreSQL documentation for aggregate functions."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyBuilderExtensions.html",
    "title": "Class NpgsqlPropertyBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlPropertyBuilderExtensions Npgsql specific extension methods for . Inheritance Object NpgsqlPropertyBuilderExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlPropertyBuilderExtensions : object Methods | Improve this Doc View Source CanSetCompressionMethod(IConventionPropertyBuilder, Nullable<String>, Boolean) Whether the compression method for the column can be set. Declaration public static bool CanSetCompressionMethod(this IConventionPropertyBuilder propertyBuilder, string? compressionMethod, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > compressionMethod The compression method. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the index can be configured with the method Remarks This feature was introduced in PostgreSQL 14. | Improve this Doc View Source CanSetHiLoSequence(IConventionPropertyBuilder, Nullable<String>, Nullable<String>, Boolean) Returns a value indicating whether the given name and schema can be set for the hi-lo sequence. Declaration public static bool CanSetHiLoSequence(this IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > name The name of the sequence. Nullable < String > schema The schema of the sequence. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the given name and schema can be set for the hi-lo sequence. | Improve this Doc View Source CanSetIdentityOptions(IConventionPropertyBuilder, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>) Returns a value indicating whether the sequence options can be set on the identity column. Declaration public static bool CanSetIdentityOptions(this IConventionPropertyBuilder propertyBuilder, long? startValue = null, long? incrementBy = null, long? minValue = null, long? maxValue = null, bool? cyclic = null, long? numbersToCache = null) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < Int64 > startValue The starting value for the sequence. The default starting value is minValue for ascending sequences and maxValue for descending ones. Nullable < Int64 > incrementBy The amount to increment between values. Defaults to 1. Nullable < Int64 > minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. Nullable < Int64 > maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. Nullable < Boolean > cyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. Nullable < Int64 > numbersToCache Specifies how many sequence numbers are to be pre-allocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description Boolean The same builder instance so that multiple calls can be chained. | Improve this Doc View Source CanSetIsGeneratedTsVectorColumn(IConventionPropertyBuilder, Nullable<String>, Nullable<IReadOnlyList<String>>, Boolean) Returns a value indicating whether the property can be configured as a full-text search tsvector column. Declaration public static bool CanSetIsGeneratedTsVectorColumn(this IConventionPropertyBuilder propertyBuilder, string? config, IReadOnlyList<string>? includedPropertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Nullable < IReadOnlyList < String >> includedPropertyNames An array of property names to be included in the tsvector. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the property can be configured as a full-text search tsvector column. | Improve this Doc View Source CanSetSequence(IConventionPropertyBuilder, Nullable<String>, Nullable<String>, Boolean) Returns a value indicating whether the given name and schema can be set for the key value generation sequence. Declaration public static bool CanSetSequence(this IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > name The name of the sequence. Nullable < String > schema The schema of the sequence. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the given name and schema can be set for the key value generation sequence. | Improve this Doc View Source CanSetValueGenerationStrategy(IConventionPropertyBuilder, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Returns a value indicating whether the given value can be set as the value generation strategy. Declaration public static bool CanSetValueGenerationStrategy(this IConventionPropertyBuilder propertyBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < NpgsqlValueGenerationStrategy > valueGenerationStrategy The value generation strategy. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Boolean true if the given value can be set as the default value generation strategy. | Improve this Doc View Source HasHiLoSequence(IConventionPropertyBuilder, Nullable<String>, Nullable<String>, Boolean) Configures the database sequence used for the hi-lo pattern to generate values for the key property, when targeting SQL Server. Declaration public static IConventionSequenceBuilder? HasHiLoSequence(this IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > name The name of the sequence. Nullable < String > schema The schema of the sequence. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionSequenceBuilder > A builder to further configure the sequence. | Improve this Doc View Source HasIdentityOptions(IConventionPropertyBuilder, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>) Sets the sequence options on an identity column. The column must be set as identity via UseIdentityColumn(PropertyBuilder) or UseIdentityAlwaysColumn(PropertyBuilder) . Declaration public static IConventionPropertyBuilder? HasIdentityOptions(this IConventionPropertyBuilder propertyBuilder, long? startValue = null, long? incrementBy = null, long? minValue = null, long? maxValue = null, bool? cyclic = null, long? numbersToCache = null) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < Int64 > startValue The starting value for the sequence. The default starting value is minValue for ascending sequences and maxValue for descending ones. Nullable < Int64 > incrementBy The amount to increment between values. Defaults to 1. Nullable < Int64 > minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. Nullable < Int64 > maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. Nullable < Boolean > cyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. Nullable < Int64 > numbersToCache Specifies how many sequence numbers are to be pre-allocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description Nullable < IConventionPropertyBuilder > The same builder instance so that multiple calls can be chained. | Improve this Doc View Source HasIdentityOptions(PropertyBuilder, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>) Sets the sequence options on an identity column. The column must be set as identity via UseIdentityColumn(PropertyBuilder) or UseIdentityAlwaysColumn(PropertyBuilder) . Declaration public static PropertyBuilder HasIdentityOptions(this PropertyBuilder propertyBuilder, long? startValue = null, long? incrementBy = null, long? minValue = null, long? maxValue = null, bool? cyclic = null, long? numbersToCache = null) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Nullable < Int64 > startValue The starting value for the sequence. The default starting value is minValue for ascending sequences and maxValue for descending ones. Nullable < Int64 > incrementBy The amount to increment between values. Defaults to 1. Nullable < Int64 > minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. Nullable < Int64 > maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. Nullable < Boolean > cyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. Nullable < Int64 > numbersToCache Specifies how many sequence numbers are to be pre0allocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source HasIdentityOptions<TProperty>(PropertyBuilder<TProperty>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>) Sets the sequence options on an identity column. The column must be set as identity via UseIdentityColumn(PropertyBuilder) or UseIdentityAlwaysColumn(PropertyBuilder) . Declaration public static PropertyBuilder<TProperty> HasIdentityOptions<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, long? startValue = null, long? incrementBy = null, long? minValue = null, long? maxValue = null, bool? cyclic = null, long? numbersToCache = null) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Nullable < Int64 > startValue The starting value for the sequence. The default starting value is minValue for ascending sequences and maxValue for descending ones. Nullable < Int64 > incrementBy The amount to increment between values. Defaults to 1. Nullable < Int64 > minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. Nullable < Int64 > maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. Nullable < Boolean > cyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. Nullable < Int64 > numbersToCache Specifies how many sequence numbers are to be pre-allocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Improve this Doc View Source HasPostgresArrayConversion<TElementProperty, TElementProvider>(PropertyBuilder<TElementProperty[]>, Expression<Func<TElementProperty, TElementProvider>>, Expression<Func<TElementProvider, TElementProperty>>) Configures a PostgreSQL array conversion. Declaration public static PropertyBuilder<TElementProperty[]> HasPostgresArrayConversion<TElementProperty, TElementProvider>(this PropertyBuilder<TElementProperty[]> propertyBuilder, Expression<Func<TElementProperty, TElementProvider>> convertToProviderExpression, Expression<Func<TElementProvider, TElementProperty>> convertFromProviderExpression) Parameters Type Name Description PropertyBuilder <TElementProperty[]> propertyBuilder Expression < Func <TElementProperty, TElementProvider>> convertToProviderExpression Expression < Func <TElementProvider, TElementProperty>> convertFromProviderExpression Returns Type Description PropertyBuilder <TElementProperty[]> Type Parameters Name Description TElementProperty TElementProvider | Improve this Doc View Source HasPostgresArrayConversion<TElementProperty, TElementProvider>(PropertyBuilder<TElementProperty[]>, ValueConverter) Configures a PostgreSQL array conversion. Declaration public static PropertyBuilder<TElementProperty[]> HasPostgresArrayConversion<TElementProperty, TElementProvider>(this PropertyBuilder<TElementProperty[]> propertyBuilder, ValueConverter elementValueConverter) Parameters Type Name Description PropertyBuilder <TElementProperty[]> propertyBuilder ValueConverter elementValueConverter Returns Type Description PropertyBuilder <TElementProperty[]> Type Parameters Name Description TElementProperty TElementProvider | Improve this Doc View Source HasPostgresArrayConversion<TElementProperty, TElementProvider>(PropertyBuilder<List<TElementProperty>>, Expression<Func<TElementProperty, TElementProvider>>, Expression<Func<TElementProvider, TElementProperty>>) Configures a PostgreSQL array conversion. Declaration public static PropertyBuilder<List<TElementProperty>> HasPostgresArrayConversion<TElementProperty, TElementProvider>(this PropertyBuilder<List<TElementProperty>> propertyBuilder, Expression<Func<TElementProperty, TElementProvider>> convertToProviderExpression, Expression<Func<TElementProvider, TElementProperty>> convertFromProviderExpression) Parameters Type Name Description PropertyBuilder < List <TElementProperty>> propertyBuilder Expression < Func <TElementProperty, TElementProvider>> convertToProviderExpression Expression < Func <TElementProvider, TElementProperty>> convertFromProviderExpression Returns Type Description PropertyBuilder < List <TElementProperty>> Type Parameters Name Description TElementProperty TElementProvider | Improve this Doc View Source HasPostgresArrayConversion<TElementProperty, TElementProvider>(PropertyBuilder<List<TElementProperty>>, ValueConverter) Configures a PostgreSQL array conversion. Declaration public static PropertyBuilder<List<TElementProperty>> HasPostgresArrayConversion<TElementProperty, TElementProvider>(this PropertyBuilder<List<TElementProperty>> propertyBuilder, ValueConverter elementValueConverter) Parameters Type Name Description PropertyBuilder < List <TElementProperty>> propertyBuilder ValueConverter elementValueConverter Returns Type Description PropertyBuilder < List <TElementProperty>> Type Parameters Name Description TElementProperty TElementProvider | Improve this Doc View Source HasSequence(IConventionPropertyBuilder, Nullable<String>, Nullable<String>, Boolean) Configures the database sequence used for the key value generation pattern to generate values for the key property, when targeting PostgreSQL. Declaration public static IConventionSequenceBuilder? HasSequence(this IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > name The name of the sequence. Nullable < String > schema The schema of the sequence. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionSequenceBuilder > A builder to further configure the sequence. | Improve this Doc View Source HasValueGenerationStrategy(IConventionPropertyBuilder, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Configures the value generation strategy for the key property, when targeting PostgreSQL. Declaration public static IConventionPropertyBuilder? HasValueGenerationStrategy(this IConventionPropertyBuilder propertyBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < NpgsqlValueGenerationStrategy > valueGenerationStrategy The value generation strategy. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionPropertyBuilder > The same builder instance if the configuration was applied, null otherwise. | Improve this Doc View Source IsGeneratedTsVectorColumn(IConventionPropertyBuilder, String, IReadOnlyList<String>, Boolean) Configures the property to be a full-text search tsvector column over the given properties. Declaration public static IConventionPropertyBuilder? IsGeneratedTsVectorColumn(this IConventionPropertyBuilder propertyBuilder, string config, IReadOnlyList<string> includedPropertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. String config The text search configuration for this generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. IReadOnlyList < String > includedPropertyNames An array of property names to be included in the tsvector. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionPropertyBuilder > The same builder instance if the configuration was applied, null otherwise. | Improve this Doc View Source IsGeneratedTsVectorColumn(PropertyBuilder, String, String[]) Configures the property to be a full-text search tsvector column over the given properties. Declaration public static PropertyBuilder IsGeneratedTsVectorColumn(this PropertyBuilder propertyBuilder, string config, params string[] includedPropertyNames) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. String config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. String [] includedPropertyNames An array of property names to be included in the tsvector. Returns Type Description PropertyBuilder A builder to further configure the property. | Improve this Doc View Source IsGeneratedTsVectorColumn(PropertyBuilder<NpgsqlTsVector>, String, String[]) Configures the property to be a full-text search tsvector column over the given properties. Declaration public static PropertyBuilder<NpgsqlTsVector> IsGeneratedTsVectorColumn(this PropertyBuilder<NpgsqlTsVector> propertyBuilder, string config, params string[] includedPropertyNames) Parameters Type Name Description PropertyBuilder < NpgsqlTsVector > propertyBuilder The builder for the property being configured. String config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. String [] includedPropertyNames An array of property names to be included in the tsvector. Returns Type Description PropertyBuilder < NpgsqlTsVector > A builder to further configure the property. | Improve this Doc View Source UseCompressionMethod(IConventionPropertyBuilder, Nullable<String>, Boolean) Sets the compression method for the column. Declaration public static IConventionPropertyBuilder? UseCompressionMethod(this IConventionPropertyBuilder propertyBuilder, string? compressionMethod, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > compressionMethod The compression method. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IConventionPropertyBuilder > A builder to further configure the property. Remarks This feature was introduced in PostgreSQL 14. | Improve this Doc View Source UseCompressionMethod(PropertyBuilder, Nullable<String>) Sets the compression method for the column. Declaration public static PropertyBuilder UseCompressionMethod(this PropertyBuilder propertyBuilder, string? compressionMethod) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > compressionMethod The compression method. Returns Type Description PropertyBuilder A builder to further configure the property. Remarks This feature was introduced in PostgreSQL 14. | Improve this Doc View Source UseCompressionMethod<TEntity>(PropertyBuilder<TEntity>, Nullable<String>) Sets the compression method for the column. Declaration public static PropertyBuilder<TEntity> UseCompressionMethod<TEntity>(this PropertyBuilder<TEntity> propertyBuilder, string? compressionMethod) Parameters Type Name Description PropertyBuilder <TEntity> propertyBuilder The builder for the property being configured. Nullable < String > compressionMethod The compression method. Returns Type Description PropertyBuilder <TEntity> A builder to further configure the property. Type Parameters Name Description TEntity Remarks This feature was introduced in PostgreSQL 14. | Improve this Doc View Source UseHiLo(PropertyBuilder, Nullable<String>, Nullable<String>) Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static PropertyBuilder UseHiLo(this PropertyBuilder propertyBuilder, string? name = null, string? schema = null) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > name The comment of the sequence. Nullable < String > schema The schema of the sequence. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseHiLo<TProperty>(PropertyBuilder<TProperty>, Nullable<String>, Nullable<String>) Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static PropertyBuilder<TProperty> UseHiLo<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, string? name = null, string? schema = null) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Nullable < String > name The comment of the sequence. Nullable < String > schema The schema of the sequence. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Improve this Doc View Source UseIdentityAlwaysColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder UseIdentityAlwaysColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityAlwaysColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder<TProperty> UseIdentityAlwaysColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Improve this Doc View Source UseIdentityByDefaultColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder UseIdentityByDefaultColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityByDefaultColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder<TProperty> UseIdentityByDefaultColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. | Improve this Doc View Source UseIdentityColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This internally calls . This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder UseIdentityColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This internally calls . This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder<TProperty> UseIdentityColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. | Improve this Doc View Source UseSequence(PropertyBuilder, Nullable<String>, Nullable<String>) Configures the key property to use a sequence-based key value generation pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static PropertyBuilder UseSequence(this PropertyBuilder propertyBuilder, string? name = null, string? schema = null) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Nullable < String > name The name of the sequence. Nullable < String > schema The schema of the sequence. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseSequence<TProperty>(PropertyBuilder<TProperty>, Nullable<String>, Nullable<String>) Configures the key property to use a sequence-based key value generation pattern to generate values for new entities, when targeting SQL Server. This method sets the property to be . Declaration public static PropertyBuilder<TProperty> UseSequence<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, string? name = null, string? schema = null) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Nullable < String > name The name of the sequence. Nullable < String > schema The schema of the sequence. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. Remarks See Modeling entity types and relationships , and Accessing SQL Server and SQL Azure databases with EF Core for more information and examples. | Improve this Doc View Source UseSerialColumn(PropertyBuilder) Configures the property to use the PostgreSQL SERIAL feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static PropertyBuilder UseSerialColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseSerialColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL SERIAL feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static PropertyBuilder<TProperty> UseSerialColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyExtensions.html",
    "title": "Class NpgsqlPropertyExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlPropertyExtensions Property extension methods for Npgsql-specific metadata. Inheritance Object NpgsqlPropertyExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlPropertyExtensions : object Remarks See Modeling entity types and relationships . Methods | Improve this Doc View Source FindHiLoSequence(IProperty) Finds the in the model to use for the hi-lo pattern. Declaration public static ISequence? FindHiLoSequence(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description Nullable < ISequence > The sequence to use, or null if no sequence exists in the model. | Improve this Doc View Source FindHiLoSequence(IProperty, in StoreObjectIdentifier) Finds the in the model to use for the hi-lo pattern. Declaration public static ISequence? FindHiLoSequence(this IProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description Nullable < ISequence > The sequence to use, or null if no sequence exists in the model. | Improve this Doc View Source FindHiLoSequence(IReadOnlyProperty) Finds the in the model to use for the hi-lo pattern. Declaration public static IReadOnlySequence? FindHiLoSequence(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < IReadOnlySequence > The sequence to use, or null if no sequence exists in the model. | Improve this Doc View Source FindHiLoSequence(IReadOnlyProperty, in StoreObjectIdentifier) Finds the in the model to use for the hi-lo pattern. Declaration public static IReadOnlySequence? FindHiLoSequence(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description Nullable < IReadOnlySequence > The sequence to use, or null if no sequence exists in the model. | Improve this Doc View Source FindSequence(IProperty) Finds the in the model to use for the key value generation pattern. Declaration public static ISequence? FindSequence(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description Nullable < ISequence > The sequence to use, or null if no sequence exists in the model. | Improve this Doc View Source FindSequence(IProperty, in StoreObjectIdentifier) Finds the in the model to use for the key value generation pattern. Declaration public static ISequence? FindSequence(this IProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description Nullable < ISequence > The sequence to use, or null if no sequence exists in the model. | Improve this Doc View Source FindSequence(IReadOnlyProperty) Finds the in the model to use for the key value generation pattern. Declaration public static IReadOnlySequence? FindSequence(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < IReadOnlySequence > The sequence to use, or null if no sequence exists in the model. | Improve this Doc View Source FindSequence(IReadOnlyProperty, in StoreObjectIdentifier) Finds the in the model to use for the key value generation pattern. Declaration public static IReadOnlySequence? FindSequence(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description Nullable < IReadOnlySequence > The sequence to use, or null if no sequence exists in the model. | Improve this Doc View Source GetCompressionMethod(IReadOnlyProperty) Returns the compression method to be used, or null if it hasn't been specified. Declaration public static string? GetCompressionMethod(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property Returns Type Description Nullable < String > Remarks This feature was introduced in PostgreSQL 14. | Improve this Doc View Source GetCompressionMethod(IReadOnlyProperty, in StoreObjectIdentifier) Returns the compression method to be used, or null if it hasn't been specified. Declaration public static string? GetCompressionMethod(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property StoreObjectIdentifier storeObject Returns Type Description Nullable < String > Remarks This feature was introduced in PostgreSQL 14. | Improve this Doc View Source GetCompressionMethodConfigurationSource(IConventionProperty) Returns the for the compression method. Declaration public static ConfigurationSource? GetCompressionMethodConfigurationSource(this IConventionProperty index) Parameters Type Name Description IConventionProperty index The property. Returns Type Description Nullable < ConfigurationSource > The for the compression method. | Improve this Doc View Source GetDefaultCollation(IReadOnlyProperty) Returns the collation to be used for the column - including the PostgreSQL-specific default column collation defined at the model level (see ). Declaration public static string? GetDefaultCollation(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < String > The collation for the column this property is mapped to. | Improve this Doc View Source GetHiLoSequenceName(IReadOnlyProperty) Returns the name to use for the hi-lo sequence. Declaration public static string? GetHiLoSequenceName(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < String > The name to use for the hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceName(IReadOnlyProperty, in StoreObjectIdentifier) Returns the name to use for the hi-lo sequence. Declaration public static string? GetHiLoSequenceName(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description Nullable < String > The name to use for the hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceNameConfigurationSource(IConventionProperty) Returns the for the hi-lo sequence name. Declaration public static ConfigurationSource? GetHiLoSequenceNameConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the hi-lo sequence name. | Improve this Doc View Source GetHiLoSequenceSchema(IReadOnlyProperty) Returns the schema to use for the hi-lo sequence. Declaration public static string? GetHiLoSequenceSchema(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < String > The schema to use for the hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceSchema(IReadOnlyProperty, in StoreObjectIdentifier) Returns the schema to use for the hi-lo sequence. Declaration public static string? GetHiLoSequenceSchema(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description Nullable < String > The schema to use for the hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceSchemaConfigurationSource(IConventionProperty) Returns the for the hi-lo sequence schema. Declaration public static ConfigurationSource? GetHiLoSequenceSchemaConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the hi-lo sequence schema. | Improve this Doc View Source GetIdentityIncrementBy(IReadOnlyProperty) Returns the identity increment value. Declaration public static long? GetIdentityIncrementBy(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < Int64 > The identity increment value. | Improve this Doc View Source GetIdentityIncrementByConfigurationSource(IConventionProperty) Returns the for the identity increment value. Declaration public static ConfigurationSource? GetIdentityIncrementByConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the identity increment value. | Improve this Doc View Source GetIdentityIsCyclic(IReadOnlyProperty) Returns whether the identity's sequence is cyclic. Declaration public static bool? GetIdentityIsCyclic(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < Boolean > Whether the identity's sequence is cyclic. | Improve this Doc View Source GetIdentityIsCyclicConfigurationSource(IConventionProperty) Returns the for whether the identity's sequence is cyclic. Declaration public static ConfigurationSource? GetIdentityIsCyclicConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for whether the identity's sequence is cyclic. | Improve this Doc View Source GetIdentityMaxValue(IReadOnlyProperty) Returns the identity maximum value. Declaration public static long? GetIdentityMaxValue(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < Int64 > The identity maximum value. | Improve this Doc View Source GetIdentityMaxValueConfigurationSource(IConventionProperty) Returns the for the identity maximum value. Declaration public static ConfigurationSource? GetIdentityMaxValueConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the identity maximum value. | Improve this Doc View Source GetIdentityMinValue(IReadOnlyProperty) Returns the identity minimum value. Declaration public static long? GetIdentityMinValue(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < Int64 > The identity minimum value. | Improve this Doc View Source GetIdentityMinValueConfigurationSource(IConventionProperty) Returns the for the identity minimum value. Declaration public static ConfigurationSource? GetIdentityMinValueConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the identity minimum value. | Improve this Doc View Source GetIdentityNumbersToCache(IReadOnlyProperty) Returns the number of sequence numbers to be preallocated and stored in memory for faster access. Defaults to 1 (no cache). Declaration public static long? GetIdentityNumbersToCache(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < Int64 > The number of sequence numbers to be cached. | Improve this Doc View Source GetIdentityNumbersToCacheConfigurationSource(IConventionProperty) Returns the for the number of sequence numbers to be preallocated and stored in memory for faster access. Declaration public static ConfigurationSource? GetIdentityNumbersToCacheConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the number of sequence numbers to be preallocated and stored in memory for faster access. | Improve this Doc View Source GetIdentityStartValue(IReadOnlyProperty) Returns the identity start value. Declaration public static long? GetIdentityStartValue(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < Int64 > The identity start value. | Improve this Doc View Source GetIdentityStartValueConfigurationSource(IConventionProperty) Returns the for the identity start value. Declaration public static ConfigurationSource? GetIdentityStartValueConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the identity start value. | Improve this Doc View Source GetSequenceName(IReadOnlyProperty) Returns the name to use for the key value generation sequence. Declaration public static string? GetSequenceName(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < String > The name to use for the key value generation sequence. | Improve this Doc View Source GetSequenceName(IReadOnlyProperty, in StoreObjectIdentifier) Returns the name to use for the key value generation sequence. Declaration public static string? GetSequenceName(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description Nullable < String > The name to use for the key value generation sequence. | Improve this Doc View Source GetSequenceNameConfigurationSource(IConventionProperty) Returns the for the key value generation sequence name. Declaration public static ConfigurationSource? GetSequenceNameConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the key value generation sequence name. | Improve this Doc View Source GetSequenceSchema(IReadOnlyProperty) Returns the schema to use for the key value generation sequence. Declaration public static string? GetSequenceSchema(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < String > The schema to use for the key value generation sequence. | Improve this Doc View Source GetSequenceSchema(IReadOnlyProperty, in StoreObjectIdentifier) Returns the schema to use for the key value generation sequence. Declaration public static string? GetSequenceSchema(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description Nullable < String > The schema to use for the key value generation sequence. | Improve this Doc View Source GetSequenceSchemaConfigurationSource(IConventionProperty) Returns the for the key value generation sequence schema. Declaration public static ConfigurationSource? GetSequenceSchemaConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the key value generation sequence schema. | Improve this Doc View Source GetTsVectorConfig(IReadOnlyProperty) Returns the text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. Declaration public static string? GetTsVectorConfig(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < String > The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. | Improve this Doc View Source GetTsVectorConfigConfigurationSource(IConventionProperty) Returns the for the text search configuration for the generated tsvector property. Declaration public static ConfigurationSource? GetTsVectorConfigConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The configuration source for the text search configuration for the generated tsvector property. | Improve this Doc View Source GetTsVectorProperties(IReadOnlyProperty) Returns the properties included in this generated tsvector property, or null if this is not a generated tsvector property. Declaration public static IReadOnlyList<string>? GetTsVectorProperties(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Nullable < IReadOnlyList < String >> The included property names, or null if this is not a Generated tsvector column. | Improve this Doc View Source GetTsVectorPropertiesConfigurationSource(IConventionProperty) Returns the for the properties included in the generated tsvector property. Declaration public static ConfigurationSource? GetTsVectorPropertiesConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The configuration source for the properties included in the generated tsvector property. | Improve this Doc View Source GetValueGenerationStrategy(IReadOnlyProperty) Returns the NpgsqlValueGenerationStrategy to use for the property. If no strategy is set for the property, then the strategy to use will be taken from the . Declaration public static NpgsqlValueGenerationStrategy GetValueGenerationStrategy(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property Returns Type Description NpgsqlValueGenerationStrategy The strategy, or None if none was set. | Improve this Doc View Source GetValueGenerationStrategy(IReadOnlyProperty, in StoreObjectIdentifier) Returns the NpgsqlValueGenerationStrategy to use for the property. If no strategy is set for the property, then the strategy to use will be taken from the . Declaration public static NpgsqlValueGenerationStrategy GetValueGenerationStrategy(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description NpgsqlValueGenerationStrategy The strategy, or None if none was set. | Improve this Doc View Source GetValueGenerationStrategy(IReadOnlyRelationalPropertyOverrides) Returns the NpgsqlValueGenerationStrategy to use for the property. Declaration public static NpgsqlValueGenerationStrategy? GetValueGenerationStrategy(this IReadOnlyRelationalPropertyOverrides overrides) Parameters Type Name Description IReadOnlyRelationalPropertyOverrides overrides The property overrides. Returns Type Description Nullable < NpgsqlValueGenerationStrategy > The strategy, or None if none was set. Remarks If no strategy is set for the property, then the strategy to use will be taken from the . | Improve this Doc View Source GetValueGenerationStrategyConfigurationSource(IConventionProperty) Returns the for the NpgsqlValueGenerationStrategy . Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ConfigurationSource > The for the NpgsqlValueGenerationStrategy . | Improve this Doc View Source GetValueGenerationStrategyConfigurationSource(IConventionProperty, in StoreObjectIdentifier) Returns the for the NpgsqlValueGenerationStrategy for a particular table. Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IConventionProperty property The property. StoreObjectIdentifier storeObject The identifier of the table containing the column. Returns Type Description Nullable < ConfigurationSource > The for the NpgsqlValueGenerationStrategy . | Improve this Doc View Source GetValueGenerationStrategyConfigurationSource(IConventionRelationalPropertyOverrides) Returns the for the NpgsqlValueGenerationStrategy for a particular table. Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionRelationalPropertyOverrides overrides) Parameters Type Name Description IConventionRelationalPropertyOverrides overrides The property overrides. Returns Type Description Nullable < ConfigurationSource > The for the NpgsqlValueGenerationStrategy . | Improve this Doc View Source IsCompatibleWithValueGeneration(IReadOnlyProperty) Returns a value indicating whether the property is compatible with any NpgsqlValueGenerationStrategy . Declaration public static bool IsCompatibleWithValueGeneration(IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description Boolean true if compatible. | Improve this Doc View Source RemoveHiLoOptions(IConventionProperty) Removes all identity sequence annotations from the property. Declaration public static void RemoveHiLoOptions(this IConventionProperty property) Parameters Type Name Description IConventionProperty property | Improve this Doc View Source RemoveHiLoOptions(IMutableProperty) Removes all identity sequence annotations from the property. Declaration public static void RemoveHiLoOptions(this IMutableProperty property) Parameters Type Name Description IMutableProperty property | Improve this Doc View Source RemoveIdentityOptions(IConventionProperty) Removes identity sequence options from the property. Declaration public static void RemoveIdentityOptions(this IConventionProperty property) Parameters Type Name Description IConventionProperty property | Improve this Doc View Source RemoveIdentityOptions(IMutableProperty) Removes identity sequence options from the property. Declaration public static void RemoveIdentityOptions(this IMutableProperty property) Parameters Type Name Description IMutableProperty property | Improve this Doc View Source SetCompressionMethod(IConventionProperty, Nullable<String>, Boolean) Sets the compression method to be used, or null if it hasn't been specified. Declaration public static string? SetCompressionMethod(this IConventionProperty property, string? compressionMethod, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property Nullable < String > compressionMethod Boolean fromDataAnnotation Returns Type Description Nullable < String > Remarks This feature was introduced in PostgreSQL 14. | Improve this Doc View Source SetCompressionMethod(IMutableProperty, Nullable<String>) Sets the compression method to be used, or null if it hasn't been specified. Declaration public static void SetCompressionMethod(this IMutableProperty property, string? compressionMethod) Parameters Type Name Description IMutableProperty property Nullable < String > compressionMethod Remarks This feature was introduced in PostgreSQL 14. | Improve this Doc View Source SetHiLoSequenceName(IConventionProperty, Nullable<String>, Boolean) Sets the name to use for the hi-lo sequence. Declaration public static string? SetHiLoSequenceName(this IConventionProperty property, string? name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < String > name The sequence name to use. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < String > | Improve this Doc View Source SetHiLoSequenceName(IMutableProperty, Nullable<String>) Sets the name to use for the hi-lo sequence. Declaration public static void SetHiLoSequenceName(this IMutableProperty property, string? name) Parameters Type Name Description IMutableProperty property The property. Nullable < String > name The sequence name to use. | Improve this Doc View Source SetHiLoSequenceSchema(IConventionProperty, Nullable<String>, Boolean) Sets the schema to use for the hi-lo sequence. Declaration public static string? SetHiLoSequenceSchema(this IConventionProperty property, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < String > schema The schema to use. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < String > | Improve this Doc View Source SetHiLoSequenceSchema(IMutableProperty, Nullable<String>) Sets the schema to use for the hi-lo sequence. Declaration public static void SetHiLoSequenceSchema(this IMutableProperty property, string? schema) Parameters Type Name Description IMutableProperty property The property. Nullable < String > schema The schema to use. | Improve this Doc View Source SetIdentityIncrementBy(IConventionProperty, Nullable<Int64>, Boolean) Sets the identity increment value. Declaration public static long? SetIdentityIncrementBy(this IConventionProperty property, long? incrementBy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < Int64 > incrementBy The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < Int64 > | Improve this Doc View Source SetIdentityIncrementBy(IMutableProperty, Nullable<Int64>) Sets the identity increment value. Declaration public static void SetIdentityIncrementBy(this IMutableProperty property, long? incrementBy) Parameters Type Name Description IMutableProperty property The property. Nullable < Int64 > incrementBy The value to set. | Improve this Doc View Source SetIdentityIsCyclic(IConventionProperty, Nullable<Boolean>, Boolean) Sets whether the identity's sequence is cyclic. Declaration public static bool? SetIdentityIsCyclic(this IConventionProperty property, bool? cyclic, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < Boolean > cyclic The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < Boolean > | Improve this Doc View Source SetIdentityIsCyclic(IMutableProperty, Nullable<Boolean>) Sets whether the identity's sequence is cyclic. Declaration public static void SetIdentityIsCyclic(this IMutableProperty property, bool? cyclic) Parameters Type Name Description IMutableProperty property The property. Nullable < Boolean > cyclic The value to set. | Improve this Doc View Source SetIdentityMaxValue(IConventionProperty, Nullable<Int64>, Boolean) Sets the identity maximum value. Declaration public static long? SetIdentityMaxValue(this IConventionProperty property, long? maxValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < Int64 > maxValue The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < Int64 > | Improve this Doc View Source SetIdentityMaxValue(IMutableProperty, Nullable<Int64>) Sets the identity maximum value. Declaration public static void SetIdentityMaxValue(this IMutableProperty property, long? maxValue) Parameters Type Name Description IMutableProperty property The property. Nullable < Int64 > maxValue The value to set. | Improve this Doc View Source SetIdentityMinValue(IConventionProperty, Nullable<Int64>, Boolean) Sets the identity minimum value. Declaration public static long? SetIdentityMinValue(this IConventionProperty property, long? minValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < Int64 > minValue The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < Int64 > | Improve this Doc View Source SetIdentityMinValue(IMutableProperty, Nullable<Int64>) Sets the identity minimum value. Declaration public static void SetIdentityMinValue(this IMutableProperty property, long? minValue) Parameters Type Name Description IMutableProperty property The property. Nullable < Int64 > minValue The value to set. | Improve this Doc View Source SetIdentityNumbersToCache(IConventionProperty, Nullable<Int64>, Boolean) Sets the number of sequence numbers to be preallocated and stored in memory for faster access. Declaration public static long? SetIdentityNumbersToCache(this IConventionProperty property, long? numbersToCache, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < Int64 > numbersToCache The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < Int64 > | Improve this Doc View Source SetIdentityNumbersToCache(IMutableProperty, Nullable<Int64>) Sets the number of sequence numbers to be preallocated and stored in memory for faster access. Declaration public static void SetIdentityNumbersToCache(this IMutableProperty property, long? numbersToCache) Parameters Type Name Description IMutableProperty property The property. Nullable < Int64 > numbersToCache The value to set. | Improve this Doc View Source SetIdentityStartValue(IConventionProperty, Nullable<Int64>, Boolean) Sets the identity start value. Declaration public static long? SetIdentityStartValue(this IConventionProperty property, long? startValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < Int64 > startValue The value to set. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < Int64 > | Improve this Doc View Source SetIdentityStartValue(IMutableProperty, Nullable<Int64>) Sets the identity start value. Declaration public static void SetIdentityStartValue(this IMutableProperty property, long? startValue) Parameters Type Name Description IMutableProperty property The property. Nullable < Int64 > startValue The value to set. | Improve this Doc View Source SetSequenceName(IConventionProperty, Nullable<String>, Boolean) Sets the name to use for the key value generation sequence. Declaration public static string? SetSequenceName(this IConventionProperty property, string? name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < String > name The sequence name to use. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < String > The configured value. | Improve this Doc View Source SetSequenceName(IMutableProperty, Nullable<String>) Sets the name to use for the key value generation sequence. Declaration public static void SetSequenceName(this IMutableProperty property, string? name) Parameters Type Name Description IMutableProperty property The property. Nullable < String > name The sequence name to use. | Improve this Doc View Source SetSequenceSchema(IConventionProperty, Nullable<String>, Boolean) Sets the schema to use for the key value generation sequence. Declaration public static string? SetSequenceSchema(this IConventionProperty property, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < String > schema The schema to use. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < String > The configured value. | Improve this Doc View Source SetSequenceSchema(IMutableProperty, Nullable<String>) Sets the schema to use for the key value generation sequence. Declaration public static void SetSequenceSchema(this IMutableProperty property, string? schema) Parameters Type Name Description IMutableProperty property The property. Nullable < String > schema The schema to use. | Improve this Doc View Source SetTsVectorConfig(IConventionProperty, String, Boolean) Returns the text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. Declaration public static string SetTsVectorConfig(this IConventionProperty property, string config, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. String config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description String | Improve this Doc View Source SetTsVectorConfig(IMutableProperty, Nullable<String>) Sets the text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. Declaration public static void SetTsVectorConfig(this IMutableProperty property, string? config) Parameters Type Name Description IMutableProperty property The property. Nullable < String > config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. | Improve this Doc View Source SetTsVectorProperties(IConventionProperty, Nullable<IReadOnlyList<String>>, Boolean) Sets properties included in this generated tsvector property, or null to make this a regular, non-generated property. Declaration public static IReadOnlyList<string>? SetTsVectorProperties(this IConventionProperty property, IReadOnlyList<string>? properties, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < IReadOnlyList < String >> properties The included property names. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < IReadOnlyList < String >> | Improve this Doc View Source SetTsVectorProperties(IMutableProperty, Nullable<IReadOnlyList<String>>) Sets the properties included in this generated tsvector property, or null to make this a regular, non-generated property. Declaration public static void SetTsVectorProperties(this IMutableProperty property, IReadOnlyList<string>? properties) Parameters Type Name Description IMutableProperty property The property. Nullable < IReadOnlyList < String >> properties The included property names. | Improve this Doc View Source SetValueGenerationStrategy(IConventionProperty, Nullable<NpgsqlValueGenerationStrategy>, in StoreObjectIdentifier, Boolean) Sets the NpgsqlValueGenerationStrategy to use for the property for a particular table. Declaration public static NpgsqlValueGenerationStrategy? SetValueGenerationStrategy(this IConventionProperty property, NpgsqlValueGenerationStrategy? value, in StoreObjectIdentifier storeObject, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < NpgsqlValueGenerationStrategy > value The strategy to use. StoreObjectIdentifier storeObject The identifier of the table containing the column. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < NpgsqlValueGenerationStrategy > The configured value. | Improve this Doc View Source SetValueGenerationStrategy(IConventionProperty, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Sets the NpgsqlValueGenerationStrategy to use for the property. Declaration public static NpgsqlValueGenerationStrategy? SetValueGenerationStrategy(this IConventionProperty property, NpgsqlValueGenerationStrategy? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. Nullable < NpgsqlValueGenerationStrategy > value The strategy to use. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < NpgsqlValueGenerationStrategy > | Improve this Doc View Source SetValueGenerationStrategy(IConventionRelationalPropertyOverrides, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Sets the NpgsqlValueGenerationStrategy to use for the property for a particular table. Declaration public static NpgsqlValueGenerationStrategy? SetValueGenerationStrategy(this IConventionRelationalPropertyOverrides overrides, NpgsqlValueGenerationStrategy? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionRelationalPropertyOverrides overrides The property overrides. Nullable < NpgsqlValueGenerationStrategy > value The strategy to use. Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description Nullable < NpgsqlValueGenerationStrategy > The configured value. | Improve this Doc View Source SetValueGenerationStrategy(IMutableProperty, Nullable<NpgsqlValueGenerationStrategy>) Sets the NpgsqlValueGenerationStrategy to use for the property. Declaration public static void SetValueGenerationStrategy(this IMutableProperty property, NpgsqlValueGenerationStrategy? value) Parameters Type Name Description IMutableProperty property The property. Nullable < NpgsqlValueGenerationStrategy > value The strategy to use. | Improve this Doc View Source SetValueGenerationStrategy(IMutableProperty, Nullable<NpgsqlValueGenerationStrategy>, in StoreObjectIdentifier) Sets the NpgsqlValueGenerationStrategy to use for the property for a particular table. Declaration public static void SetValueGenerationStrategy(this IMutableProperty property, NpgsqlValueGenerationStrategy? value, in StoreObjectIdentifier storeObject) Parameters Type Name Description IMutableProperty property The property. Nullable < NpgsqlValueGenerationStrategy > value The strategy to use. StoreObjectIdentifier storeObject The identifier of the table containing the column. | Improve this Doc View Source SetValueGenerationStrategy(IMutableRelationalPropertyOverrides, Nullable<NpgsqlValueGenerationStrategy>) Sets the NpgsqlValueGenerationStrategy to use for the property for a particular table. Declaration public static void SetValueGenerationStrategy(this IMutableRelationalPropertyOverrides overrides, NpgsqlValueGenerationStrategy? value) Parameters Type Name Description IMutableRelationalPropertyOverrides overrides The property overrides. Nullable < NpgsqlValueGenerationStrategy > value The strategy to use."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlRangeDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlRangeDbFunctionsExtensions.html",
    "title": "Class NpgsqlRangeDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlRangeDbFunctionsExtensions Provides extension methods for supporting PostgreSQL translation. Inheritance Object NpgsqlRangeDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlRangeDbFunctionsExtensions : object Methods | Improve this Doc View Source ContainedBy<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is contained by a specified range. Declaration public static bool ContainedBy<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The specified range to locate in the range. NpgsqlRange <T> b The range in which to locate the specified range. Returns Type Description Boolean true if the range contains the specified range; otherwise, false . Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source Contains<T>(NpgsqlRange<T>, T) Determines whether a range contains a specified value. Declaration public static bool Contains<T>(this NpgsqlRange<T> range, T value) Parameters Type Name Description NpgsqlRange <T> range The range in which to locate the value. T value The value to locate in the range. Returns Type Description Boolean true if the range contains the specified value; otherwise, false . Type Parameters Name Description T The type of the elements of range . | Improve this Doc View Source Contains<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range contains a specified range. Declaration public static bool Contains<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The range in which to locate the specified range. NpgsqlRange <T> b The specified range to locate in the range. Returns Type Description Boolean true if the range contains the specified range; otherwise, false . Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source DoesNotExtendLeftOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range does not extend to the left of another range. Declaration public static bool DoesNotExtendLeftOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description Boolean true if the first range does not extend to the left of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source DoesNotExtendRightOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range does not extend to the right of another range. Declaration public static bool DoesNotExtendRightOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description Boolean true if the first range does not extend to the right of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source Except<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the set difference, which means the elements of one range that do not appear in a second range. Declaration public static NpgsqlRange<T> Except<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description NpgsqlRange <T> The elements that appear in the first range, but not the second range. Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source Intersect<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the set intersection, which means elements that appear in each of two ranges. Declaration public static NpgsqlRange<T> Intersect<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description NpgsqlRange <T> A range containing the elements that appear in both ranges. Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source IsAdjacentTo<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is adjacent to another range. Declaration public static bool IsAdjacentTo<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description Boolean true if the ranges are adjacent; otherwise, false . Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source IsStrictlyLeftOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is strictly to the left of another range. Declaration public static bool IsStrictlyLeftOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description Boolean true if the first range is strictly to the left of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source IsStrictlyRightOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is strictly to the right of another range. Declaration public static bool IsStrictlyRightOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description Boolean true if the first range is strictly to the right of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source Merge<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the smallest range which includes both of the given ranges. Declaration public static NpgsqlRange<T> Merge<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description NpgsqlRange <T> The smallest range which includes both of the given ranges. Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source Overlaps<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range overlaps another range. Declaration public static bool Overlaps<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description Boolean true if the ranges overlap (share points in common); otherwise, false . Type Parameters Name Description T The type of the elements of a . | Improve this Doc View Source RangeAgg<T>(IEnumerable<NpgsqlRange<T>>) Computes the union of the non-null input ranges. Corresponds to the PostgreSQL range_agg aggregate function. Declaration public static NpgsqlRange<T>[] RangeAgg<T>(this IEnumerable<NpgsqlRange<T>> input) Parameters Type Name Description IEnumerable < NpgsqlRange <T>> input The ranges to be aggregated via union into a multirange. Returns Type Description NpgsqlRange <T>[] Type Parameters Name Description T See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source RangeIntersectAgg<T>(IEnumerable<NpgsqlRange<T>[]>) Computes the intersection of the non-null input multiranges. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static NpgsqlRange<T>[] RangeIntersectAgg<T>(this IEnumerable<NpgsqlRange<T>[]> input) Parameters Type Name Description IEnumerable < NpgsqlRange <T>[]> input The multiranges on which to perform the intersection operation. Returns Type Description NpgsqlRange <T>[] Type Parameters Name Description T See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source RangeIntersectAgg<T>(IEnumerable<NpgsqlRange<T>>) Computes the intersection of the non-null input ranges. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static NpgsqlRange<T> RangeIntersectAgg<T>(this IEnumerable<NpgsqlRange<T>> input) Parameters Type Name Description IEnumerable < NpgsqlRange <T>> input The ranges on which to perform the intersection operation. Returns Type Description NpgsqlRange <T> Type Parameters Name Description T See Also PostgreSQL documentation for aggregate functions. | Improve this Doc View Source Union<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the set union, which means unique elements that appear in either of two ranges. Declaration public static NpgsqlRange<T> Union<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description NpgsqlRange <T> A range containing the unique elements that appear in either range. Type Parameters Name Description T The type of the elements of a ."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTrigramsDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTrigramsDbFunctionsExtensions.html",
    "title": "Class NpgsqlTrigramsDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlTrigramsDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via . Inheritance Object NpgsqlTrigramsDbFunctionsExtensions Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlTrigramsDbFunctionsExtensions : object Remarks See Database functions . Methods | Improve this Doc View Source TrigramsAreNotStrictWordSimilar(DbFunctions, String, String) Commutator of the <<% operator. Declaration public static bool TrigramsAreNotStrictWordSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Boolean Remarks The method call is translated to source %>> target . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsAreNotWordSimilar(DbFunctions, String, String) Commutator of the <% operator. Declaration public static bool TrigramsAreNotWordSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Boolean Remarks The method call is translated to source %> target . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsAreSimilar(DbFunctions, String, String) Returns true if its arguments have a similarity that is greater than the current similarity threshold set by pg_trgm.similarity_threshold. Declaration public static bool TrigramsAreSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Boolean Remarks The method call is translated to source % target . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsAreStrictWordSimilar(DbFunctions, String, String) Returns true if its second argument has a continuous extent of an ordered trigram set that matches word boundaries, and its similarity to the trigram set of the first argument is greater than the current strict word similarity threshold set by the pg_trgm.strict_word_similarity_threshold parameter. Declaration public static bool TrigramsAreStrictWordSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Boolean Remarks The method call is translated to source <<% target . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsAreWordSimilar(DbFunctions, String, String) Returns true if the similarity between the trigram set in the first argument and a continuous extent of an ordered trigram set in the second argument is greater than the current word similarity threshold set by pg_trgm.word_similarity_threshold parameter. Declaration public static bool TrigramsAreWordSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Boolean Remarks The method call is translated to source <% target . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsShow(DbFunctions, String) Returns an array of all the trigrams in the given text . (In practice this is seldom useful except for debugging.) Declaration public static string[] TrigramsShow(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ String text Returns Type Description String [] Remarks The method call is translated to show_trgm(text) . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsSimilarity(DbFunctions, String, String) Returns a number that indicates how similar the two arguments are. The range of the result is zero (indicating that the two strings are completely dissimilar) to one (indicating that the two strings are identical). Declaration public static double TrigramsSimilarity(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Double Remarks The method call is translated to similarity(source, target) . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsSimilarityDistance(DbFunctions, String, String) Returns the \"distance\" between the arguments, that is one minus the similarity() value. Declaration public static double TrigramsSimilarityDistance(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Double Remarks The method call is translated to source <-> target . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsStrictWordSimilarity(DbFunctions, String, String) Same as word_similarity(text, text), but forces extent boundaries to match word boundaries. Since we don't have cross-word trigrams, this function actually returns greatest similarity between first string and any continuous extent of words of the second string. Declaration public static double TrigramsStrictWordSimilarity(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Double Remarks The method call is translated to strict_word_similarity(source, target) . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsStrictWordSimilarityDistance(DbFunctions, String, String) Returns the \"distance\" between the arguments, that is one minus the strict_word_similarity() value. Declaration public static double TrigramsStrictWordSimilarityDistance(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Double Remarks The method call is translated to source <<<-> target . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsStrictWordSimilarityDistanceInverted(DbFunctions, String, String) Commutator of the <<<-> operator. Declaration public static double TrigramsStrictWordSimilarityDistanceInverted(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Double Remarks The method call is translated to source <->>> target . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsWordSimilarity(DbFunctions, String, String) Returns a number that indicates the greatest similarity between the set of trigrams in the first string and any continuous extent of an ordered set of trigrams in the second string. Declaration public static double TrigramsWordSimilarity(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Double Remarks The method call is translated to word_similarity(source, target) . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsWordSimilarityDistance(DbFunctions, String, String) Returns the \"distance\" between the arguments, that is one minus the word_similarity() value. Declaration public static double TrigramsWordSimilarityDistance(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Double Remarks The method call is translated to source <<-> target . See https://www.postgresql.org/docs/current/pgtrgm.html . | Improve this Doc View Source TrigramsWordSimilarityDistanceInverted(DbFunctions, String, String) Commutator of the <<-> operator. Declaration public static double TrigramsWordSimilarityDistanceInverted(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ String source String target Returns Type Description Double Remarks The method call is translated to source <->> target . See https://www.postgresql.org/docs/current/pgtrgm.html ."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTsRankingNormalization.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTsRankingNormalization.html",
    "title": "Enum NpgsqlTsRankingNormalization | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsRankingNormalization Specifies whether and how a document's length should impact its rank. This is used with the ranking functions in NpgsqlFullTextSearchLinqExtensions . See http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING for more information about the behaviors that are controlled by this value. Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum NpgsqlTsRankingNormalization : int Fields Name Description Default Ignores the document length. DivideBy1PlusLogLength Divides the rank by 1 + the logarithm of the document length. DivideByItselfPlusOne Divides the rank by itself + 1. DivideByLength Divides the rank by the document length. DivideByMeanHarmonicDistanceBetweenExtents Divides the rank by the mean harmonic distance between extents (this is implemented only by ts_rank_cd). DivideByUniqueWordCount Divides the rank by the number of unique words in document. DividesBy1PlusLogUniqueWordCount Divides the rank by 1 + the logarithm of the number of unique words in document."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Npgsql Documentation",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes NpgsqlNetTopologySuiteServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite extension methods for . NpgsqlNodaTimeServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime extension methods for . NpgsqlServiceCollectionExtensions Provides extension methods to configure Entity Framework Core for Npgsql."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNetTopologySuiteServiceCollectionExtensions.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNetTopologySuiteServiceCollectionExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteServiceCollectionExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite extension methods for . Inheritance Object NpgsqlNetTopologySuiteServiceCollectionExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteServiceCollectionExtensions : object Methods | Improve this Doc View Source AddEntityFrameworkNpgsqlNetTopologySuite(IServiceCollection) Adds the services required for NetTopologySuite support in the Npgsql provider for Entity Framework. Declaration public static IServiceCollection AddEntityFrameworkNpgsqlNetTopologySuite(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNodaTimeServiceCollectionExtensions.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNodaTimeServiceCollectionExtensions.html",
    "title": "Class NpgsqlNodaTimeServiceCollectionExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime extension methods for . Inheritance Object NpgsqlNodaTimeServiceCollectionExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public static class NpgsqlNodaTimeServiceCollectionExtensions : object Methods | Improve this Doc View Source AddEntityFrameworkNpgsqlNodaTime(IServiceCollection) Adds the services required for NodaTime support in the Npgsql provider for Entity Framework. Declaration public static IServiceCollection AddEntityFrameworkNpgsqlNodaTime(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlServiceCollectionExtensions.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlServiceCollectionExtensions.html",
    "title": "Class NpgsqlServiceCollectionExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlServiceCollectionExtensions Provides extension methods to configure Entity Framework Core for Npgsql. Inheritance Object NpgsqlServiceCollectionExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlServiceCollectionExtensions : object Methods | Improve this Doc View Source AddEntityFrameworkNpgsql(IServiceCollection) Adds the services required by the Npgsql database provider for Entity Framework to an . Calling this method is no longer necessary when building most applications, including those that use dependency injection in ASP.NET or elsewhere. It is only needed when building the internal service provider for use with the method. This is not recommend other than for some advanced scenarios. Declaration public static IServiceCollection AddEntityFrameworkNpgsql(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained. | Improve this Doc View Source AddNpgsql<TContext>(IServiceCollection, Nullable<String>, Nullable<Action<NpgsqlDbContextOptionsBuilder>>, Nullable<Action<DbContextOptionsBuilder>>) Registers the given Entity Framework context as a service in the and configures it to connect to a PostgreSQL database. Use this method when using dependency injection in your application, such as with ASP.NET Core. For applications that don't use dependency injection, consider creating instances directly with its constructor. The method can then be overridden to configure the SQL Server provider and connection string. To configure the for the context, either override the method in your derived context, or supply an optional action to configure the for the context. For more information on how to use this method, see the Entity Framework Core documentation at https://aka.ms/efdocs . For more information on using dependency injection, see https://go.microsoft.com/fwlink/?LinkId=526890 . Declaration public static IServiceCollection AddNpgsql<TContext>(this IServiceCollection serviceCollection, string? connectionString, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null, Action<DbContextOptionsBuilder>? optionsAction = null) where TContext : DbContext Parameters Type Name Description IServiceCollection serviceCollection The to add services to. Nullable < String > connectionString The connection string of the database to connect to. Nullable < Action < NpgsqlDbContextOptionsBuilder >> npgsqlOptionsAction An optional action to allow additional SQL Server specific configuration. Nullable < Action < DbContextOptionsBuilder >> optionsAction An optional action to configure the for the context. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained. Type Parameters Name Description TContext The type of context to be registered."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Classes NpgsqlAnnotationCodeGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlAnnotationCodeGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlAnnotationCodeGenerator.html",
    "title": "Class NpgsqlAnnotationCodeGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlAnnotationCodeGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlAnnotationCodeGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlAnnotationCodeGenerator : AnnotationCodeGenerator Constructors | Improve this Doc View Source NpgsqlAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies) Parameters Type Name Description AnnotationCodeGeneratorDependencies dependencies Methods | Improve this Doc View Source GenerateFluentApi(IEntityType, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override MethodCallCodeFragment? GenerateFluentApi(IEntityType entityType, IAnnotation annotation) Parameters Type Name Description IEntityType entityType IAnnotation annotation Returns Type Description Nullable < MethodCallCodeFragment > | Improve this Doc View Source GenerateFluentApi(IIndex, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override MethodCallCodeFragment? GenerateFluentApi(IIndex index, IAnnotation annotation) Parameters Type Name Description IIndex index IAnnotation annotation Returns Type Description Nullable < MethodCallCodeFragment > | Improve this Doc View Source GenerateFluentApi(IModel, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override MethodCallCodeFragment? GenerateFluentApi(IModel model, IAnnotation annotation) Parameters Type Name Description IModel model IAnnotation annotation Returns Type Description Nullable < MethodCallCodeFragment > | Improve this Doc View Source GenerateFluentApiCalls(IModel, IDictionary<String, IAnnotation>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(IModel model, IDictionary<string, IAnnotation> annotations) Parameters Type Name Description IModel model IDictionary < String , IAnnotation > annotations Returns Type Description IReadOnlyList < MethodCallCodeFragment > | Improve this Doc View Source GenerateFluentApiCalls(IProperty, IDictionary<String, IAnnotation>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(IProperty property, IDictionary<string, IAnnotation> annotations) Parameters Type Name Description IProperty property IDictionary < String , IAnnotation > annotations Returns Type Description IReadOnlyList < MethodCallCodeFragment > | Improve this Doc View Source IsHandledByConvention(IIndex, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsHandledByConvention(IIndex index, IAnnotation annotation) Parameters Type Name Description IIndex index IAnnotation annotation Returns Type Description Boolean | Improve this Doc View Source IsHandledByConvention(IModel, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsHandledByConvention(IModel model, IAnnotation annotation) Parameters Type Name Description IModel model IAnnotation annotation Returns Type Description Boolean | Improve this Doc View Source IsHandledByConvention(IProperty, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsHandledByConvention(IProperty property, IAnnotation annotation) Parameters Type Name Description IProperty property IAnnotation annotation Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlDesignTimeServices.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlDesignTimeServices.html",
    "title": "Class NpgsqlDesignTimeServices | Npgsql Documentation",
    "keywords": "Class NpgsqlDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlDesignTimeServices Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDesignTimeServices : IDesignTimeServices Methods | Improve this Doc View Source ConfigureDesignTimeServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesignTimeServices.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesignTimeServices.html",
    "title": "Class NpgsqlNetTopologySuiteDesignTimeServices | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteDesignTimeServices Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteDesignTimeServices : IDesignTimeServices Methods | Improve this Doc View Source ConfigureDesignTimeServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNodaTimeDesignTimeServices.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNodaTimeDesignTimeServices.html",
    "title": "Class NpgsqlNodaTimeDesignTimeServices | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNodaTimeDesignTimeServices Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeDesignTimeServices : IDesignTimeServices Methods | Improve this Doc View Source ConfigureDesignTimeServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal Classes NpgsqlLoggingDefinitions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.NpgsqlLoggingDefinitions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.NpgsqlLoggingDefinitions.html",
    "title": "Class NpgsqlLoggingDefinitions | Npgsql Documentation",
    "keywords": "Class NpgsqlLoggingDefinitions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlLoggingDefinitions Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLoggingDefinitions : RelationalLoggingDefinitions Fields | Improve this Doc View Source LogEnumColumnSkipped This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogEnumColumnSkipped Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogExpressionIndexSkipped This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogExpressionIndexSkipped Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogFoundCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundCollation Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogFoundColumn This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundColumn Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogFoundDefaultSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundDefaultSchema Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogFoundForeignKey This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundForeignKey Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogFoundIndex This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundIndex Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogFoundPrimaryKey This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundPrimaryKey Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogFoundSequence This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundSequence Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogFoundTable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundTable Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogFoundUniqueConstraint This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundUniqueConstraint Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogMissingSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogMissingSchema Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogMissingTable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogMissingTable Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogPrincipalColumnNotFound This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogPrincipalColumnNotFound Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogPrincipalTableNotInSelectionSet This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogPrincipalTableNotInSelectionSet Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogUnsupportedColumnConstraintSkipped This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogUnsupportedColumnConstraintSkipped Field Value Type Description Nullable < EventDefinitionBase > | Improve this Doc View Source LogUnsupportedColumnIndexSkipped This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogUnsupportedColumnIndexSkipped Field Value Type Description Nullable < EventDefinitionBase >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL Classes NpgsqlRetryingExecutionStrategy An implementation for retrying failed executions on PostgreSQL."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure Classes NpgsqlDbContextOptionsBuilder Allows for options specific to PostgreSQL to be configured for a ."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Classes NpgsqlModelValidator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteOptionsExtension This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeOptionsExtension This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlOptionsExtension Represents options managed by the Npgsql. UserRangeDefinition A definition for a user-defined PostgreSQL range to be mapped. Interfaces INpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the singleton level. INpgsqlSingletonOptions Represents options for Npgsql that can only be set at the singleton level."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlNetTopologySuiteOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlNetTopologySuiteOptions.html",
    "title": "Interface INpgsqlNetTopologySuiteOptions | Npgsql Documentation",
    "keywords": "Interface INpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the singleton level. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public interface INpgsqlNetTopologySuiteOptions Properties | Improve this Doc View Source IsGeographyDefault True if geography is to be used by default instead of geometry Declaration bool IsGeographyDefault { get; } Property Value Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlSingletonOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlSingletonOptions.html",
    "title": "Interface INpgsqlSingletonOptions | Npgsql Documentation",
    "keywords": "Interface INpgsqlSingletonOptions Represents options for Npgsql that can only be set at the singleton level. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlSingletonOptions Properties | Improve this Doc View Source PostgresVersion The backend version to target. Declaration Version PostgresVersion { get; } Property Value Type Description Version | Improve this Doc View Source PostgresVersionWithoutDefault The backend version to target, but returns null unless the user explicitly specified a version. Declaration Version? PostgresVersionWithoutDefault { get; } Property Value Type Description Nullable < Version > | Improve this Doc View Source ReverseNullOrderingEnabled True if reverse null ordering is enabled; otherwise, false. Declaration bool ReverseNullOrderingEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source UseRedshift Whether to target Redshift. Declaration bool UseRedshift { get; } Property Value Type Description Boolean | Improve this Doc View Source UserRangeDefinitions The collection of range mappings. Declaration IReadOnlyList<UserRangeDefinition> UserRangeDefinitions { get; } Property Value Type Description IReadOnlyList < UserRangeDefinition >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlModelValidator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlModelValidator.html",
    "title": "Class NpgsqlModelValidator | Npgsql Documentation",
    "keywords": "Class NpgsqlModelValidator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlModelValidator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModelValidator : RelationalModelValidator Constructors | Improve this Doc View Source NpgsqlModelValidator(ModelValidatorDependencies, RelationalModelValidatorDependencies, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description ModelValidatorDependencies dependencies RelationalModelValidatorDependencies relationalDependencies INpgsqlSingletonOptions npgsqlSingletonOptions Methods | Improve this Doc View Source Validate(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void Validate(IModel model, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IModel model IDiagnosticsLogger < DbLoggerCategory.Model.Validation > logger | Improve this Doc View Source ValidateCompatible(IProperty, IProperty, String, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) Declaration protected override void ValidateCompatible(IProperty property, IProperty duplicateProperty, string columnName, in StoreObjectIdentifier storeObject, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IProperty property IProperty duplicateProperty String columnName StoreObjectIdentifier storeObject IDiagnosticsLogger < DbLoggerCategory.Model.Validation > logger | Improve this Doc View Source ValidateIdentityVersionCompatibility(IModel) Validates that identity columns are used only with PostgreSQL 10.0 or later. Declaration protected virtual void ValidateIdentityVersionCompatibility(IModel model) Parameters Type Name Description IModel model The model to validate. | Improve this Doc View Source ValidateIndexIncludeProperties(IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual void ValidateIndexIncludeProperties(IModel model) Parameters Type Name Description IModel model | Improve this Doc View Source ValidateJsonEntities(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) Declaration protected override void ValidateJsonEntities(IModel model, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IModel model IDiagnosticsLogger < DbLoggerCategory.Model.Validation > logger | Improve this Doc View Source ValidateStoredProcedures(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) Declaration protected override void ValidateStoredProcedures(IModel model, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IModel model IDiagnosticsLogger < DbLoggerCategory.Model.Validation > logger | Improve this Doc View Source ValidateValueGeneration(IEntityType, IKey, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ValidateValueGeneration(IEntityType entityType, IKey key, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IEntityType entityType IKey key IDiagnosticsLogger < DbLoggerCategory.Model.Validation > logger"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNetTopologySuiteOptionsExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNetTopologySuiteOptionsExtension.html",
    "title": "Class NpgsqlNetTopologySuiteOptionsExtension | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteOptionsExtension This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteOptionsExtension Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteOptionsExtension : IDbContextOptionsExtension Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteOptionsExtension() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteOptionsExtension() | Improve this Doc View Source NpgsqlNetTopologySuiteOptionsExtension(NpgsqlNetTopologySuiteOptionsExtension) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlNetTopologySuiteOptionsExtension(NpgsqlNetTopologySuiteOptionsExtension copyFrom) Parameters Type Name Description NpgsqlNetTopologySuiteOptionsExtension copyFrom Properties | Improve this Doc View Source Info This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual DbContextOptionsExtensionInfo Info { get; } Property Value Type Description DbContextOptionsExtensionInfo | Improve this Doc View Source IsGeographyDefault This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool IsGeographyDefault { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ApplyServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ApplyServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services | Improve this Doc View Source Clone() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual NpgsqlNetTopologySuiteOptionsExtension Clone() Returns Type Description NpgsqlNetTopologySuiteOptionsExtension | Improve this Doc View Source Validate(IDbContextOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Improve this Doc View Source WithGeographyDefault(Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlNetTopologySuiteOptionsExtension WithGeographyDefault(bool isGeographyDefault = true) Parameters Type Name Description Boolean isGeographyDefault Returns Type Description NpgsqlNetTopologySuiteOptionsExtension"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNodaTimeOptionsExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNodaTimeOptionsExtension.html",
    "title": "Class NpgsqlNodaTimeOptionsExtension | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeOptionsExtension This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNodaTimeOptionsExtension Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeOptionsExtension : IDbContextOptionsExtension Properties | Improve this Doc View Source Info This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual DbContextOptionsExtensionInfo Info { get; } Property Value Type Description DbContextOptionsExtensionInfo Methods | Improve this Doc View Source ApplyServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ApplyServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services | Improve this Doc View Source Validate(IDbContextOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlOptionsExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlOptionsExtension.html",
    "title": "Class NpgsqlOptionsExtension | Npgsql Documentation",
    "keywords": "Class NpgsqlOptionsExtension Represents options managed by the Npgsql. Inheritance Object NpgsqlOptionsExtension Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlOptionsExtension : RelationalOptionsExtension Constructors | Improve this Doc View Source NpgsqlOptionsExtension() Initializes an instance of NpgsqlOptionsExtension with the default settings. Declaration public NpgsqlOptionsExtension() | Improve this Doc View Source NpgsqlOptionsExtension(NpgsqlOptionsExtension) Initializes an instance of NpgsqlOptionsExtension by copying the specified instance. Declaration public NpgsqlOptionsExtension(NpgsqlOptionsExtension copyFrom) Parameters Type Name Description NpgsqlOptionsExtension copyFrom The instance to copy. Properties | Improve this Doc View Source AdminDatabase The name of the database for administrative operations. Declaration public virtual string? AdminDatabase { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source DataSource The , or null if a connection string or was used instead of a . Declaration public virtual DbDataSource? DataSource { get; } Property Value Type Description Nullable < DbDataSource > | Improve this Doc View Source Info Declaration public override DbContextOptionsExtensionInfo Info { get; } Property Value Type Description DbContextOptionsExtensionInfo | Improve this Doc View Source MinBatchSize This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override int? MinBatchSize { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source PostgresVersion The backend version to target. Declaration public virtual Version? PostgresVersion { get; } Property Value Type Description Nullable < Version > | Improve this Doc View Source ProvideClientCertificatesCallback The specified ProvideClientCertificatesCallback . Declaration public virtual ProvideClientCertificatesCallback? ProvideClientCertificatesCallback { get; } Property Value Type Description Nullable < ProvideClientCertificatesCallback > | Improve this Doc View Source ProvidePasswordCallback The specified ProvidePasswordCallback . Declaration public virtual ProvidePasswordCallback? ProvidePasswordCallback { get; } Property Value Type Description Nullable < ProvidePasswordCallback > | Improve this Doc View Source RemoteCertificateValidationCallback The specified RemoteCertificateValidationCallback . Declaration public virtual RemoteCertificateValidationCallback? RemoteCertificateValidationCallback { get; } Property Value Type Description Nullable < RemoteCertificateValidationCallback > | Improve this Doc View Source ReverseNullOrdering True if reverse null ordering is enabled; otherwise, false. Declaration public virtual bool ReverseNullOrdering { get; } Property Value Type Description Boolean | Improve this Doc View Source UseRedshift Whether to target Redshift. Declaration public virtual bool UseRedshift { get; } Property Value Type Description Boolean | Improve this Doc View Source UserRangeDefinitions The list of range mappings specified by the user. Declaration public virtual IReadOnlyList<UserRangeDefinition> UserRangeDefinitions { get; } Property Value Type Description IReadOnlyList < UserRangeDefinition > Methods | Improve this Doc View Source ApplyServices(IServiceCollection) Declaration public override void ApplyServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services | Improve this Doc View Source Clone() Declaration protected override RelationalOptionsExtension Clone() Returns Type Description RelationalOptionsExtension | Improve this Doc View Source Validate(IDbContextOptions) Declaration public override void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Improve this Doc View Source WithAdminDatabase(Nullable<String>) Returns a copy of the current instance configured to use the specified administrative database. Declaration public virtual NpgsqlOptionsExtension WithAdminDatabase(string? adminDatabase) Parameters Type Name Description Nullable < String > adminDatabase The name of the database for administrative operations. Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithDataSource(Nullable<DbDataSource>) Creates a new instance with all options the same as for this instance, but with the given option changed. It is unusual to call this method directly. Instead use . Declaration public virtual RelationalOptionsExtension WithDataSource(DbDataSource? dataSource) Parameters Type Name Description Nullable < DbDataSource > dataSource The option to change. Returns Type Description RelationalOptionsExtension A new instance with the option changed. | Improve this Doc View Source WithPostgresVersion(Nullable<Version>) Returns a copy of the current instance with the specified PostgreSQL version. Declaration public virtual NpgsqlOptionsExtension WithPostgresVersion(Version? postgresVersion) Parameters Type Name Description Nullable < Version > postgresVersion The backend version to target. Returns Type Description NpgsqlOptionsExtension A copy of the current instance with the specified PostgreSQL version. | Improve this Doc View Source WithProvideClientCertificatesCallback(Nullable<ProvideClientCertificatesCallback>) Returns a copy of the current instance with the specified ProvideClientCertificatesCallback . Declaration public virtual NpgsqlOptionsExtension WithProvideClientCertificatesCallback(ProvideClientCertificatesCallback? callback) Parameters Type Name Description Nullable < ProvideClientCertificatesCallback > callback The specified callback. Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithProvidePasswordCallback(Nullable<ProvidePasswordCallback>) Returns a copy of the current instance with the specified ProvidePasswordCallback . Declaration public virtual NpgsqlOptionsExtension WithProvidePasswordCallback(ProvidePasswordCallback? callback) Parameters Type Name Description Nullable < ProvidePasswordCallback > callback The specified callback. Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithRedshift(Boolean) Returns a copy of the current instance with the specified Redshift settings. Declaration public virtual NpgsqlOptionsExtension WithRedshift(bool useRedshift) Parameters Type Name Description Boolean useRedshift Whether to target Redshift. Returns Type Description NpgsqlOptionsExtension A copy of the current instance with the specified Redshift setting. | Improve this Doc View Source WithRemoteCertificateValidationCallback(Nullable<RemoteCertificateValidationCallback>) Returns a copy of the current instance with the specified RemoteCertificateValidationCallback . Declaration public virtual NpgsqlOptionsExtension WithRemoteCertificateValidationCallback(RemoteCertificateValidationCallback? callback) Parameters Type Name Description Nullable < RemoteCertificateValidationCallback > callback The specified callback. Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithUserRangeDefinition(String, Nullable<String>, Type, Nullable<String>) Returns a copy of the current instance configured with the specified range mapping. Declaration public virtual NpgsqlOptionsExtension WithUserRangeDefinition(string rangeName, string? schemaName, Type subtypeClrType, string? subtypeName) Parameters Type Name Description String rangeName Nullable < String > schemaName Type subtypeClrType Nullable < String > subtypeName Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithUserRangeDefinition<TSubtype>(String, Nullable<String>, Nullable<String>) Returns a copy of the current instance configured with the specified range mapping. Declaration public virtual NpgsqlOptionsExtension WithUserRangeDefinition<TSubtype>(string rangeName, string? schemaName = null, string? subtypeName = null) Parameters Type Name Description String rangeName Nullable < String > schemaName Nullable < String > subtypeName Returns Type Description NpgsqlOptionsExtension Type Parameters Name Description TSubtype"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.UserRangeDefinition.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.UserRangeDefinition.html",
    "title": "Class UserRangeDefinition | Npgsql Documentation",
    "keywords": "Class UserRangeDefinition A definition for a user-defined PostgreSQL range to be mapped. Inheritance Object UserRangeDefinition Implements IEquatable < UserRangeDefinition > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class UserRangeDefinition : object Constructors | Improve this Doc View Source UserRangeDefinition(String, Nullable<String>, Type, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public UserRangeDefinition(string rangeName, string? schemaName, Type subtypeClrType, string? subtypeName) Parameters Type Name Description String rangeName Nullable < String > schemaName Type subtypeClrType Nullable < String > subtypeName Properties | Improve this Doc View Source RangeName The name of the PostgreSQL range type to be mapped. Declaration public virtual string RangeName { get; } Property Value Type Description String | Improve this Doc View Source SchemaName The PostgreSQL schema in which the range is defined. If null, the default schema is used (which is public unless changed on the model). Declaration public virtual string? SchemaName { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source SubtypeClrType The CLR type of the range's subtype (or element). The actual mapped type will be an over this type. Declaration public virtual Type SubtypeClrType { get; } Property Value Type Description Type | Improve this Doc View Source SubtypeName Optionally, the name of the range's PostgreSQL subtype (or element). This is usually not needed - the subtype will be inferred based on SubtypeClrType . Declaration public virtual string? SubtypeName { get; } Property Value Type Description Nullable < String > Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlDbContextOptionsBuilder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlDbContextOptionsBuilder.html",
    "title": "Class NpgsqlDbContextOptionsBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlDbContextOptionsBuilder Allows for options specific to PostgreSQL to be configured for a . Inheritance Object NpgsqlDbContextOptionsBuilder Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDbContextOptionsBuilder : RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension> Constructors | Improve this Doc View Source NpgsqlDbContextOptionsBuilder(DbContextOptionsBuilder) Initializes a new instance of the NpgsqlDbContextOptionsBuilder class. Declaration public NpgsqlDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder The core options builder. Methods | Improve this Doc View Source EnableRetryOnFailure() Configures the context to use the default retrying . Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure() Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder configured to use the default retrying . | Improve this Doc View Source EnableRetryOnFailure(Int32) Configures the context to use the default retrying . Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount) Parameters Type Name Description Int32 maxRetryCount Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder with the specified parameters. | Improve this Doc View Source EnableRetryOnFailure(Int32, TimeSpan, Nullable<ICollection<String>>) Configures the context to use the default retrying . Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount, TimeSpan maxRetryDelay, ICollection<string>? errorCodesToAdd) Parameters Type Name Description Int32 maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay between retries. Nullable < ICollection < String >> errorCodesToAdd Additional error codes that should be considered transient. Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder with the specified parameters. | Improve this Doc View Source EnableRetryOnFailure(Nullable<ICollection<String>>) Configures the context to use the default retrying . Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(ICollection<string>? errorCodesToAdd) Parameters Type Name Description Nullable < ICollection < String >> errorCodesToAdd Additional error codes that should be considered transient. Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder with the specified parameters. | Improve this Doc View Source MapRange(String, Type, Nullable<String>, Nullable<String>) Maps a user-defined PostgreSQL range type for use. Declaration public virtual NpgsqlDbContextOptionsBuilder MapRange(string rangeName, Type subtypeClrType, string? schemaName = null, string? subtypeName = null) Parameters Type Name Description String rangeName The name of the PostgreSQL range type to be mapped. Type subtypeClrType The CLR type of the range's subtype (or element). The actual mapped type will be an over this type. Nullable < String > schemaName The name of the PostgreSQL schema in which the range is defined. Nullable < String > subtypeName Optionally, the name of the range's PostgreSQL subtype (or element). This is usually not needed - the subtype will be inferred based on subtypeClrType . Returns Type Description NpgsqlDbContextOptionsBuilder Examples To map a range of PostgreSQL real, use the following: NpgsqlTypeMappingSource.MapRange(\"floatrange\", typeof(float)); | Improve this Doc View Source MapRange<TSubtype>(String, Nullable<String>, Nullable<String>) Maps a user-defined PostgreSQL range type for use. Declaration public virtual NpgsqlDbContextOptionsBuilder MapRange<TSubtype>(string rangeName, string? schemaName = null, string? subtypeName = null) Parameters Type Name Description String rangeName The name of the PostgreSQL range type to be mapped. Nullable < String > schemaName The name of the PostgreSQL schema in which the range is defined. Nullable < String > subtypeName Optionally, the name of the range's PostgreSQL subtype (or element). This is usually not needed - the subtype will be inferred based on TSubtype . Returns Type Description NpgsqlDbContextOptionsBuilder Type Parameters Name Description TSubtype The CLR type of the range's subtype (or element). The actual mapped type will be an over this type. Examples To map a range of PostgreSQL real, use the following: NpgsqlTypeMappingSource.MapRange{float}(\"floatrange\"); | Improve this Doc View Source ProvideClientCertificatesCallback(Nullable<ProvideClientCertificatesCallback>) Configures the to use the specified ProvideClientCertificatesCallback(Nullable<ProvideClientCertificatesCallback>) . Declaration public virtual NpgsqlDbContextOptionsBuilder ProvideClientCertificatesCallback(ProvideClientCertificatesCallback? callback) Parameters Type Name Description Nullable < ProvideClientCertificatesCallback > callback The callback to use. Returns Type Description NpgsqlDbContextOptionsBuilder | Improve this Doc View Source ProvidePasswordCallback(Nullable<ProvidePasswordCallback>) Configures the to use the specified ProvidePasswordCallback(Nullable<ProvidePasswordCallback>) . Declaration public virtual NpgsqlDbContextOptionsBuilder ProvidePasswordCallback(ProvidePasswordCallback? callback) Parameters Type Name Description Nullable < ProvidePasswordCallback > callback The callback to use. Returns Type Description NpgsqlDbContextOptionsBuilder | Improve this Doc View Source RemoteCertificateValidationCallback(Nullable<RemoteCertificateValidationCallback>) Configures the to use the specified RemoteCertificateValidationCallback(Nullable<RemoteCertificateValidationCallback>) . Declaration public virtual NpgsqlDbContextOptionsBuilder RemoteCertificateValidationCallback(RemoteCertificateValidationCallback? callback) Parameters Type Name Description Nullable < RemoteCertificateValidationCallback > callback The callback to use. Returns Type Description NpgsqlDbContextOptionsBuilder | Improve this Doc View Source SetPostgresVersion(Int32, Int32) Configures the backend version to target. Declaration public virtual NpgsqlDbContextOptionsBuilder SetPostgresVersion(int major, int minor) Parameters Type Name Description Int32 major The PostgreSQL major version to target. Int32 minor The PostgreSQL minor version to target. Returns Type Description NpgsqlDbContextOptionsBuilder | Improve this Doc View Source SetPostgresVersion(Nullable<Version>) Configures the backend version to target. Declaration public virtual NpgsqlDbContextOptionsBuilder SetPostgresVersion(Version? postgresVersion) Parameters Type Name Description Nullable < Version > postgresVersion The backend version to target. Returns Type Description NpgsqlDbContextOptionsBuilder | Improve this Doc View Source UseAdminDatabase(Nullable<String>) Connect to this database for administrative operations (creating/dropping databases). Declaration public virtual NpgsqlDbContextOptionsBuilder UseAdminDatabase(string? dbName) Parameters Type Name Description Nullable < String > dbName The name of the database for administrative operations. Returns Type Description NpgsqlDbContextOptionsBuilder | Improve this Doc View Source UseRedshift(Boolean) Configures the provider to work in Redshift compatibility mode, which avoids certain unsupported features from modern PostgreSQL versions. Declaration public virtual NpgsqlDbContextOptionsBuilder UseRedshift(bool useRedshift = true) Parameters Type Name Description Boolean useRedshift Whether to target Redshift. Returns Type Description NpgsqlDbContextOptionsBuilder Extension Methods NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions.UseNetTopologySuite(NpgsqlDbContextOptionsBuilder, Nullable<CoordinateSequenceFactory>, Nullable<PrecisionModel>, Ordinates, Boolean) NpgsqlNodaTimeDbContextOptionsBuilderExtensions.UseNodaTime(NpgsqlDbContextOptionsBuilder)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Internal Classes NpgsqlLoggerExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteConventionSetPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteExtensionAddingConvention This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the singleton level. NpgsqlResources This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSingletonOptions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlStrings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlLoggerExtensions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlLoggerExtensions.html",
    "title": "Class NpgsqlLoggerExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlLoggerExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlLoggerExtensions Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlLoggerExtensions : object Methods | Improve this Doc View Source CollationFound(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String, String, String, Nullable<String>, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void CollationFound(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string schema, string collationName, string lcCollate, string lcCtype, string? provider, bool deterministic) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics String schema String collationName String lcCollate String lcCtype Nullable < String > provider Boolean deterministic | Improve this Doc View Source ColumnFound(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String, String, Boolean, Boolean, Nullable<String>, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void ColumnFound(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string tableName, string columnName, string dataTypeName, bool nullable, bool identity, string? defaultValue, string? computedValue) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics String tableName String columnName String dataTypeName Boolean nullable Boolean identity Nullable < String > defaultValue Nullable < String > computedValue | Improve this Doc View Source EnumColumnSkippedWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void EnumColumnSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string columnName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics String columnName | Improve this Doc View Source ExpressionIndexSkippedWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void ExpressionIndexSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string indexName, string tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics String indexName String tableName | Improve this Doc View Source ForeignKeyReferencesMissingPrincipalTableWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, Nullable<String>, Nullable<String>, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void ForeignKeyReferencesMissingPrincipalTableWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? foreignKeyName, string? tableName, string? principalTableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics Nullable < String > foreignKeyName Nullable < String > tableName Nullable < String > principalTableName | Improve this Doc View Source MissingSchemaWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void MissingSchemaWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? schemaName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics Nullable < String > schemaName | Improve this Doc View Source MissingTableWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void MissingTableWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics Nullable < String > tableName | Improve this Doc View Source UniqueConstraintFound(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, Nullable<String>, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void UniqueConstraintFound(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? uniqueConstraintName, string tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics Nullable < String > uniqueConstraintName String tableName | Improve this Doc View Source UnsupportedColumnConstraintSkippedWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, Nullable<String>, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void UnsupportedColumnConstraintSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? indexName, string tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics Nullable < String > indexName String tableName | Improve this Doc View Source UnsupportedColumnIndexSkippedWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void UnsupportedColumnIndexSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string indexName, string tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics String indexName String tableName"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteConventionSetPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteConventionSetPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteConventionSetPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteConventionSetPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteConventionSetPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteConventionSetPlugin : IConventionSetPlugin Methods | Improve this Doc View Source ModifyConventions(ConventionSet) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ConventionSet ModifyConventions(ConventionSet conventionSet) Parameters Type Name Description ConventionSet conventionSet Returns Type Description ConventionSet"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteExtensionAddingConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteExtensionAddingConvention.html",
    "title": "Class NpgsqlNetTopologySuiteExtensionAddingConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteExtensionAddingConvention This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteExtensionAddingConvention Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteExtensionAddingConvention : IModelFinalizingConvention Methods | Improve this Doc View Source ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder IConventionContext < IConventionModelBuilder > context"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteOptions.html",
    "title": "Class NpgsqlNetTopologySuiteOptions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the singleton level. Inheritance Object NpgsqlNetTopologySuiteOptions Implements INpgsqlNetTopologySuiteOptions ISingletonOptions Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteOptions : object, INpgsqlNetTopologySuiteOptions Properties | Improve this Doc View Source IsGeographyDefault True if geography is to be used by default instead of geometry Declaration public virtual bool IsGeographyDefault { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Initialize(IDbContextOptions) Declaration public virtual void Initialize(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Improve this Doc View Source Validate(IDbContextOptions) Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options Implements INpgsqlNetTopologySuiteOptions ISingletonOptions"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlResources.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlResources.html",
    "title": "Class NpgsqlResources | Npgsql Documentation",
    "keywords": "Class NpgsqlResources This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlResources Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlResources : object Methods | Improve this Doc View Source LogEnumColumnSkipped(IDiagnosticsLogger) Enum column '{name}' cannot be scaffolded, define a CLR enum type and add the property manually. Declaration public static EventDefinition<string> LogEnumColumnSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < String > | Improve this Doc View Source LogExpressionIndexSkipped(IDiagnosticsLogger) Expression index '{name}' on table {tableName} cannot be scaffolded, expression indices aren't supported and must be added via raw SQL in migrations. Declaration public static EventDefinition<string, string> LogExpressionIndexSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < String , String > | Improve this Doc View Source LogFoundCollation(IDiagnosticsLogger) Found collation with name: {collationName}, schema: {schema}, LC_COLLATE: {lcCollate}, LC_CTYPE: {lcCtype}, provider: {provider}, deterministic: {isDeterministic} Declaration public static EventDefinition<string, string, string, string, string?, bool> LogFoundCollation(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < String , String , String , String , Nullable < String >, Boolean > | Improve this Doc View Source LogFoundColumn(IDiagnosticsLogger) Found column with table: {tableName}, column name: {columnName}, data type: {dataType}, nullable: {isNullable}, identity: {isIdentity}, default value: {defaultValue}, computed value: {computedValue} Declaration public static FallbackEventDefinition LogFoundColumn(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description FallbackEventDefinition | Improve this Doc View Source LogFoundForeignKey(IDiagnosticsLogger) Found foreign key on table: {tableName}, name: {foreignKeyName}, principal table: {principalTableName}, delete action: {deleteAction}. Declaration public static EventDefinition<string, string, string, string> LogFoundForeignKey(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < String , String , String , String > | Improve this Doc View Source LogFoundIndex(IDiagnosticsLogger) Found index with name: {indexName}, table: {tableName}, is unique: {isUnique}. Declaration public static EventDefinition<string, string, bool> LogFoundIndex(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < String , String , Boolean > | Improve this Doc View Source LogFoundPrimaryKey(IDiagnosticsLogger) Found primary key with name: {primaryKeyName}, table: {tableName}. Declaration public static EventDefinition<string, string> LogFoundPrimaryKey(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < String , String > | Improve this Doc View Source LogFoundSequence(IDiagnosticsLogger) Found sequence name: {name}, data type: {dataType}, cyclic: {isCyclic}, increment: {increment}, start: {start}, minimum: {min}, maximum: {max}. Declaration public static FallbackEventDefinition LogFoundSequence(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description FallbackEventDefinition | Improve this Doc View Source LogFoundTable(IDiagnosticsLogger) Found table with name: {name}. Declaration public static EventDefinition<string> LogFoundTable(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < String > | Improve this Doc View Source LogFoundUniqueConstraint(IDiagnosticsLogger) Found unique constraint with name: {uniqueConstraintName}, table: {tableName}. Declaration public static EventDefinition<string?, string> LogFoundUniqueConstraint(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < Nullable < String >, String > | Improve this Doc View Source LogMissingSchema(IDiagnosticsLogger) Unable to find a schema in the database matching the selected schema {schema}. Declaration public static EventDefinition<string?> LogMissingSchema(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < Nullable < String >> | Improve this Doc View Source LogMissingTable(IDiagnosticsLogger) Unable to find a table in the database matching the selected table {table}. Declaration public static EventDefinition<string?> LogMissingTable(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < Nullable < String >> | Improve this Doc View Source LogPrincipalColumnNotFound(IDiagnosticsLogger) For foreign key {foreignKeyName} on table {tableName}, unable to find the column called {principalColumnName} on the foreign key's principal table, {principaltableName}. Skipping foreign key. Declaration public static EventDefinition<string, string, string, string> LogPrincipalColumnNotFound(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < String , String , String , String > | Improve this Doc View Source LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger) For foreign key {fkName} on table {tableName}, unable to model the end of the foreign key on principal table {principaltableName}. This is usually because the principal table was not included in the selection set. Declaration public static EventDefinition<string?, string?, string?> LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < Nullable < String >, Nullable < String >, Nullable < String >> | Improve this Doc View Source LogUnsupportedColumnConstraintSkipped(IDiagnosticsLogger) Constraint '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). Declaration public static EventDefinition<string?, string> LogUnsupportedColumnConstraintSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < Nullable < String >, String > | Improve this Doc View Source LogUnsupportedColumnIndexSkipped(IDiagnosticsLogger) Index '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). Declaration public static EventDefinition<string, string> LogUnsupportedColumnIndexSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < String , String >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlSingletonOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlSingletonOptions.html",
    "title": "Class NpgsqlSingletonOptions | Npgsql Documentation",
    "keywords": "Class NpgsqlSingletonOptions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlSingletonOptions Implements INpgsqlSingletonOptions ISingletonOptions Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSingletonOptions : object, INpgsqlSingletonOptions Constructors | Improve this Doc View Source NpgsqlSingletonOptions() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlSingletonOptions() Fields | Improve this Doc View Source DefaultPostgresVersion This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static readonly Version DefaultPostgresVersion Field Value Type Description Version Properties | Improve this Doc View Source PostgresVersion The backend version to target. Declaration public virtual Version PostgresVersion { get; } Property Value Type Description Version | Improve this Doc View Source PostgresVersionWithoutDefault This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Version? PostgresVersionWithoutDefault { get; } Property Value Type Description Nullable < Version > | Improve this Doc View Source ReverseNullOrderingEnabled This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool ReverseNullOrderingEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source UseRedshift This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool UseRedshift { get; } Property Value Type Description Boolean | Improve this Doc View Source UserRangeDefinitions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IReadOnlyList<UserRangeDefinition> UserRangeDefinitions { get; } Property Value Type Description IReadOnlyList < UserRangeDefinition > Methods | Improve this Doc View Source Initialize(IDbContextOptions) Declaration public virtual void Initialize(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Improve this Doc View Source Validate(IDbContextOptions) Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options Implements INpgsqlSingletonOptions ISingletonOptions"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlStrings.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlStrings.html",
    "title": "Class NpgsqlStrings | Npgsql Documentation",
    "keywords": "Class NpgsqlStrings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlStrings Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlStrings : object Properties | Improve this Doc View Source CannotUseDataSourceWithAuthCallbacks Cannot set ProvideClientCertificatesCallback, RemoteCertificateValidationCallback or ProvidePasswordCallback when a data source is provided. Declaration public static string CannotUseDataSourceWithAuthCallbacks { get; } Property Value Type Description String | Improve this Doc View Source Ef7JsonMappingNotSupported The EF Core 7.0 JSON support isn't currently supported by the Npgsql provider. To map to JSON, see https://www.npgsql.org/efcore/mapping/json.html . Declaration public static string Ef7JsonMappingNotSupported { get; } Property Value Type Description String | Improve this Doc View Source FreeTextFunctionOnClient The 'FreeText' method is not supported because the query has switched to client-evaluation. Inspect the log to determine which query expressions are triggering client-evaluation. Declaration public static string FreeTextFunctionOnClient { get; } Property Value Type Description String | Improve this Doc View Source RowValueComparisonRequiresTuplesOfSameLength Row values comparisons require two tuple arguments of the same length. Declaration public static string RowValueComparisonRequiresTuplesOfSameLength { get; } Property Value Type Description String | Improve this Doc View Source TransientExceptionDetected An exception has been raised that is likely due to a transient failure. Consider enabling transient error resiliency by adding 'EnableRetryOnFailure()' to the 'UseSqlServer' call. Declaration public static string TransientExceptionDetected { get; } Property Value Type Description String Methods | Improve this Doc View Source DuplicateColumnCompressionMethodMismatch(Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>) '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}', but are configured with different compression methods. Declaration public static string DuplicateColumnCompressionMethodMismatch(object? entityType1, object? property1, object? entityType2, object? property2, object? columnName, object? table) Parameters Type Name Description Nullable < Object > entityType1 Nullable < Object > property1 Nullable < Object > entityType2 Nullable < Object > property2 Nullable < Object > columnName Nullable < Object > table Returns Type Description String | Improve this Doc View Source DuplicateColumnNameValueGenerationStrategyMismatch(Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>) '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different value generation strategies. Declaration public static string DuplicateColumnNameValueGenerationStrategyMismatch(object? entityType1, object? property1, object? entityType2, object? property2, object? columnName, object? table) Parameters Type Name Description Nullable < Object > entityType1 Nullable < Object > property1 Nullable < Object > entityType2 Nullable < Object > property2 Nullable < Object > columnName Nullable < Object > table Returns Type Description String | Improve this Doc View Source DuplicateIndexCollationMismatch(Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>) The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different collation configurations. Declaration public static string DuplicateIndexCollationMismatch(object? index1, object? entityType1, object? index2, object? entityType2, object? table, object? indexName) Parameters Type Name Description Nullable < Object > index1 Nullable < Object > entityType1 Nullable < Object > index2 Nullable < Object > entityType2 Nullable < Object > table Nullable < Object > indexName Returns Type Description String | Improve this Doc View Source DuplicateIndexConcurrentCreationMismatch(Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>) The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different concurrent creation configurations. Declaration public static string DuplicateIndexConcurrentCreationMismatch(object? index1, object? entityType1, object? index2, object? entityType2, object? table, object? indexName) Parameters Type Name Description Nullable < Object > index1 Nullable < Object > entityType1 Nullable < Object > index2 Nullable < Object > entityType2 Nullable < Object > table Nullable < Object > indexName Returns Type Description String | Improve this Doc View Source DuplicateIndexIncludedMismatch(Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>, Nullable<Object>) The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different included columns: {includedColumns1} and {includedColumns2}. Declaration public static string DuplicateIndexIncludedMismatch(object? index1, object? entityType1, object? index2, object? entityType2, object? table, object? indexName, object? includedColumns1, object? includedColumns2) Parameters Type Name Description Nullable < Object > index1 Nullable < Object > entityType1 Nullable < Object > index2 Nullable < Object > entityType2 Nullable < Object > table Nullable < Object > indexName Nullable < Object > includedColumns1 Nullable < Object > includedColumns2 Returns Type Description String | Improve this Doc View Source HeterogeneousTypesInNewArray(Nullable<Object>, Nullable<Object>) Heterogeneous store types detected when making new array ({type1}, {type2}). Declaration public static string HeterogeneousTypesInNewArray(object? type1, object? type2) Parameters Type Name Description Nullable < Object > type1 Nullable < Object > type2 Returns Type Description String | Improve this Doc View Source IdentityBadType(Nullable<Object>, Nullable<Object>, Nullable<Object>) Identity value generation cannot be used for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Identity value generation can only be used with signed integer properties. Declaration public static string IdentityBadType(object? property, object? entityType, object? propertyType) Parameters Type Name Description Nullable < Object > property Nullable < Object > entityType Nullable < Object > propertyType Returns Type Description String | Improve this Doc View Source IncludePropertyDuplicated(Nullable<Object>, Nullable<Object>) Include property '{entityType}.{property}' cannot be defined multiple times Declaration public static string IncludePropertyDuplicated(object? entityType, object? property) Parameters Type Name Description Nullable < Object > entityType Nullable < Object > property Returns Type Description String | Improve this Doc View Source IncludePropertyInIndex(Nullable<Object>, Nullable<Object>) Include property '{entityType}.{property}' is already included in the index Declaration public static string IncludePropertyInIndex(object? entityType, object? property) Parameters Type Name Description Nullable < Object > entityType Nullable < Object > property Returns Type Description String | Improve this Doc View Source IncludePropertyNotFound(Nullable<Object>, Nullable<Object>) Include property '{entityType}.{property}' not found Declaration public static string IncludePropertyNotFound(object? entityType, object? property) Parameters Type Name Description Nullable < Object > entityType Nullable < Object > property Returns Type Description String | Improve this Doc View Source InvalidTableToIncludeInScaffolding(Nullable<Object>) The specified table '{table}' is not valid. Specify tables using the format '[schema].[table]'. Declaration public static string InvalidTableToIncludeInScaffolding(object? table) Parameters Type Name Description Nullable < Object > table Returns Type Description String | Improve this Doc View Source NonKeyValueGeneration(Nullable<Object>, Nullable<Object>) The property '{property}' on entity type '{entityType}' is configured to use 'SequenceHiLo' value generator, which is only intended for keys. If this was intentional configure an alternate key on the property, otherwise call 'ValueGeneratedNever' or configure store generation for this property. Declaration public static string NonKeyValueGeneration(object? property, object? entityType) Parameters Type Name Description Nullable < Object > property Nullable < Object > entityType Returns Type Description String | Improve this Doc View Source SequenceBadType(Nullable<Object>, Nullable<Object>, Nullable<Object>) PostgreSQL sequences cannot be used to generate values for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Sequences can only be used with integer properties. Declaration public static string SequenceBadType(object? property, object? entityType, object? propertyType) Parameters Type Name Description Nullable < Object > property Nullable < Object > entityType Nullable < Object > propertyType Returns Type Description String | Improve this Doc View Source StoredProcedureResultColumnsNotSupported(Nullable<Object>, Nullable<Object>) The entity type '{entityType}' is mapped to the stored procedure '{sproc}', which is configured with result columns. PostgreSQL stored procedures do not support result columns; use output parameters instead. Declaration public static string StoredProcedureResultColumnsNotSupported(object? entityType, object? sproc) Parameters Type Name Description Nullable < Object > entityType Nullable < Object > sproc Returns Type Description String | Improve this Doc View Source StoredProcedureReturnValueNotSupported(Nullable<Object>, Nullable<Object>) The entity type '{entityType}' is mapped to the stored procedure '{sproc}', which is configured with result columns. PostgreSQL stored procedures do not support return values; use output parameters instead. Declaration public static string StoredProcedureReturnValueNotSupported(object? entityType, object? sproc) Parameters Type Name Description Nullable < Object > entityType Nullable < Object > sproc Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.CockroachDbInterleaveInParent.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.CockroachDbInterleaveInParent.html",
    "title": "Class CockroachDbInterleaveInParent | Npgsql Documentation",
    "keywords": "Class CockroachDbInterleaveInParent This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object CockroachDbInterleaveInParent Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class CockroachDbInterleaveInParent : object Constructors | Improve this Doc View Source CockroachDbInterleaveInParent(IReadOnlyAnnotatable) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public CockroachDbInterleaveInParent(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable Properties | Improve this Doc View Source Annotatable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Improve this Doc View Source InterleavePrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual List<string> InterleavePrefix { get; set; } Property Value Type Description List < String > | Improve this Doc View Source ParentTableName This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string ParentTableName { get; set; } Property Value Type Description String | Improve this Doc View Source ParentTableSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string? ParentTableSchema { get; set; } Property Value Type Description Nullable < String >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Classes NpgsqlConventionSetBuilder A builder for building conventions for Npgsql. NpgsqlPostgresModelFinalizingConvention A convention that discovers certain common PostgreSQL extensions based on store types used in the model (e.g. hstore). NpgsqlRuntimeModelConvention A convention that creates an optimized copy of the mutable model. NpgsqlSharedTableConvention A convention that manipulates names of database objects for entity types that share a table to avoid clashes. NpgsqlStoreGenerationConvention A convention that ensures that properties aren't configured to have a default value, as computed column or using a NpgsqlValueGenerationStrategy at the same time. NpgsqlValueGenerationConvention A convention that configures store value generation as on properties that are part of the primary key and not part of any foreign keys, were configured to have a database default value or were configured to use a NpgsqlValueGenerationStrategy . It also configures properties as if they were configured as computed columns. NpgsqlValueGenerationStrategyConvention A convention that configures the default model NpgsqlValueGenerationStrategy as IdentityByDefaultColumn for newer PostgreSQL versions, and SerialColumn for pre-10.0 versions."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlConventionSetBuilder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlConventionSetBuilder.html",
    "title": "Class NpgsqlConventionSetBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlConventionSetBuilder A builder for building conventions for Npgsql. Inheritance Object NpgsqlConventionSetBuilder Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlConventionSetBuilder : RelationalConventionSetBuilder Remarks The service lifetime is and multiple registrations are allowed. This means that each instance will use its own set of instances of this service. The implementations may depend on other services registered with any lifetime. The implementations do not need to be thread-safe. See Model building conventions , and Constructors | Improve this Doc View Source NpgsqlConventionSetBuilder(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies, IRelationalTypeMappingSource, INpgsqlSingletonOptions) Creates a new NpgsqlConventionSetBuilder instance. Declaration public NpgsqlConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, IRelationalTypeMappingSource typeMappingSource, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies The core dependencies for this service. RelationalConventionSetBuilderDependencies relationalDependencies The relational dependencies for this service. IRelationalTypeMappingSource typeMappingSource The type mapping source to use. INpgsqlSingletonOptions npgsqlSingletonOptions The singleton options to use. Methods | Improve this Doc View Source Build() Call this method to build a for Npgsql when using the outside of . Note that it is unusual to use this method. Consider using in the normal way instead. Declaration public static ConventionSet Build() Returns Type Description ConventionSet The convention set. | Improve this Doc View Source CreateConventionSet() Declaration public override ConventionSet CreateConventionSet() Returns Type Description ConventionSet | Improve this Doc View Source CreateModelBuilder() Call this method to build a for Npgsql outside of . Note that it is unusual to use this method. Consider using in the normal way instead. Declaration public static ModelBuilder CreateModelBuilder() Returns Type Description ModelBuilder The convention set."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlPostgresModelFinalizingConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlPostgresModelFinalizingConvention.html",
    "title": "Class NpgsqlPostgresModelFinalizingConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlPostgresModelFinalizingConvention A convention that discovers certain common PostgreSQL extensions based on store types used in the model (e.g. hstore). Inheritance Object NpgsqlPostgresModelFinalizingConvention Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPostgresModelFinalizingConvention : IModelFinalizingConvention Remarks See Model building conventions . Constructors | Improve this Doc View Source NpgsqlPostgresModelFinalizingConvention(IRelationalTypeMappingSource) Creates a new instance of NpgsqlPostgresModelFinalizingConvention . Declaration public NpgsqlPostgresModelFinalizingConvention(IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource The type mapping source to use. Methods | Improve this Doc View Source DiscoverPostgresExtensions(IConventionProperty, RelationalTypeMapping, IConventionModelBuilder) Discovers certain common PostgreSQL extensions based on property store types (e.g. hstore). Declaration protected virtual void DiscoverPostgresExtensions(IConventionProperty property, RelationalTypeMapping typeMapping, IConventionModelBuilder modelBuilder) Parameters Type Name Description IConventionProperty property RelationalTypeMapping typeMapping IConventionModelBuilder modelBuilder | Improve this Doc View Source ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Declaration public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder IConventionContext < IConventionModelBuilder > context | Improve this Doc View Source ProcessRowVersionProperty(IConventionProperty, RelationalTypeMapping) Detects properties which are uint, OnAddOrUpdate and configured as concurrency tokens, and maps these to the PostgreSQL internal \"xmin\" column, which changes every time the row is modified. Declaration protected virtual void ProcessRowVersionProperty(IConventionProperty property, RelationalTypeMapping typeMapping) Parameters Type Name Description IConventionProperty property RelationalTypeMapping typeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlRuntimeModelConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlRuntimeModelConvention.html",
    "title": "Class NpgsqlRuntimeModelConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlRuntimeModelConvention A convention that creates an optimized copy of the mutable model. Inheritance Object NpgsqlRuntimeModelConvention Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRuntimeModelConvention : RelationalRuntimeModelConvention Constructors | Improve this Doc View Source NpgsqlRuntimeModelConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlRuntimeModelConvention . Declaration public NpgsqlRuntimeModelConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Methods | Improve this Doc View Source ProcessEntityTypeAnnotations(Dictionary<String, Nullable<Object>>, IEntityType, RuntimeEntityType, Boolean) Declaration protected override void ProcessEntityTypeAnnotations(Dictionary<string, object?> annotations, IEntityType entityType, RuntimeEntityType runtimeEntityType, bool runtime) Parameters Type Name Description Dictionary < String , Nullable < Object >> annotations IEntityType entityType RuntimeEntityType runtimeEntityType Boolean runtime | Improve this Doc View Source ProcessIndexAnnotations(Dictionary<String, Nullable<Object>>, IIndex, RuntimeIndex, Boolean) Declaration protected override void ProcessIndexAnnotations(Dictionary<string, object?> annotations, IIndex index, RuntimeIndex runtimeIndex, bool runtime) Parameters Type Name Description Dictionary < String , Nullable < Object >> annotations IIndex index RuntimeIndex runtimeIndex Boolean runtime | Improve this Doc View Source ProcessModelAnnotations(Dictionary<String, Nullable<Object>>, IModel, RuntimeModel, Boolean) Declaration protected override void ProcessModelAnnotations(Dictionary<string, object?> annotations, IModel model, RuntimeModel runtimeModel, bool runtime) Parameters Type Name Description Dictionary < String , Nullable < Object >> annotations IModel model RuntimeModel runtimeModel Boolean runtime | Improve this Doc View Source ProcessPropertyAnnotations(Dictionary<String, Nullable<Object>>, IProperty, RuntimeProperty, Boolean) Declaration protected override void ProcessPropertyAnnotations(Dictionary<string, object?> annotations, IProperty property, RuntimeProperty runtimeProperty, bool runtime) Parameters Type Name Description Dictionary < String , Nullable < Object >> annotations IProperty property RuntimeProperty runtimeProperty Boolean runtime"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlSharedTableConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlSharedTableConvention.html",
    "title": "Class NpgsqlSharedTableConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlSharedTableConvention A convention that manipulates names of database objects for entity types that share a table to avoid clashes. Inheritance Object NpgsqlSharedTableConvention Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSharedTableConvention : SharedTableConvention Constructors | Improve this Doc View Source NpgsqlSharedTableConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlSharedTableConvention . Declaration public NpgsqlSharedTableConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Properties | Improve this Doc View Source CheckConstraintsUniqueAcrossTables Declaration protected override bool CheckConstraintsUniqueAcrossTables { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AreCompatible(IReadOnlyIndex, IReadOnlyIndex, in StoreObjectIdentifier) Declaration protected override bool AreCompatible(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyIndex index IReadOnlyIndex duplicateIndex StoreObjectIdentifier storeObject Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlStoreGenerationConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlStoreGenerationConvention.html",
    "title": "Class NpgsqlStoreGenerationConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlStoreGenerationConvention A convention that ensures that properties aren't configured to have a default value, as computed column or using a NpgsqlValueGenerationStrategy at the same time. Inheritance Object NpgsqlStoreGenerationConvention Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStoreGenerationConvention : StoreGenerationConvention Constructors | Improve this Doc View Source NpgsqlStoreGenerationConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlStoreGenerationConvention . Declaration public NpgsqlStoreGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Methods | Improve this Doc View Source ProcessPropertyAnnotationChanged(IConventionPropertyBuilder, String, Nullable<IConventionAnnotation>, Nullable<IConventionAnnotation>, IConventionContext<IConventionAnnotation>) Called after an annotation is changed on a property. Declaration public override void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation? annotation, IConventionAnnotation? oldAnnotation, IConventionContext<IConventionAnnotation> context) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property. String name The annotation name. Nullable < IConventionAnnotation > annotation The new annotation. Nullable < IConventionAnnotation > oldAnnotation The old annotation. IConventionContext < IConventionAnnotation > context Additional information associated with convention execution. | Improve this Doc View Source Validate(IConventionProperty, in StoreObjectIdentifier) Declaration protected override void Validate(IConventionProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IConventionProperty property StoreObjectIdentifier storeObject"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationConvention.html",
    "title": "Class NpgsqlValueGenerationConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGenerationConvention A convention that configures store value generation as on properties that are part of the primary key and not part of any foreign keys, were configured to have a database default value or were configured to use a NpgsqlValueGenerationStrategy . It also configures properties as if they were configured as computed columns. Inheritance Object NpgsqlValueGenerationConvention Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGenerationConvention : RelationalValueGenerationConvention Constructors | Improve this Doc View Source NpgsqlValueGenerationConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlValueGenerationConvention . Declaration public NpgsqlValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Methods | Improve this Doc View Source GetValueGenerated(IConventionProperty) Returns the store value generation strategy to set for the given property. Declaration protected override ValueGenerated? GetValueGenerated(IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description Nullable < ValueGenerated > The store value generation strategy to set for the given property. | Improve this Doc View Source GetValueGenerated(IReadOnlyProperty, in StoreObjectIdentifier) Returns the store value generation strategy to set for the given property. Declaration public static ValueGenerated? GetValueGenerated(IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description Nullable < ValueGenerated > The store value generation strategy to set for the given property. | Improve this Doc View Source ProcessPropertyAnnotationChanged(IConventionPropertyBuilder, String, Nullable<IConventionAnnotation>, Nullable<IConventionAnnotation>, IConventionContext<IConventionAnnotation>) Called after an annotation is changed on a property. Declaration public override void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation? annotation, IConventionAnnotation? oldAnnotation, IConventionContext<IConventionAnnotation> context) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property. String name The annotation name. Nullable < IConventionAnnotation > annotation The new annotation. Nullable < IConventionAnnotation > oldAnnotation The old annotation. IConventionContext < IConventionAnnotation > context Additional information associated with convention execution."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationStrategyConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationStrategyConvention.html",
    "title": "Class NpgsqlValueGenerationStrategyConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGenerationStrategyConvention A convention that configures the default model NpgsqlValueGenerationStrategy as IdentityByDefaultColumn for newer PostgreSQL versions, and SerialColumn for pre-10.0 versions. Inheritance Object NpgsqlValueGenerationStrategyConvention Implements IModelFinalizingConvention Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGenerationStrategyConvention : IModelInitializedConvention Constructors | Improve this Doc View Source NpgsqlValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies, Nullable<Version>) Creates a new instance of NpgsqlValueGenerationStrategyConvention . Declaration public NpgsqlValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, Version? postgresVersion) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Nullable < Version > postgresVersion The PostgreSQL version being targeted. This affects the default value generation strategy. Properties | Improve this Doc View Source Dependencies Parameter object containing service dependencies. Declaration protected virtual ProviderConventionSetBuilderDependencies Dependencies { get; } Property Value Type Description ProviderConventionSetBuilderDependencies | Improve this Doc View Source RelationalDependencies Relational provider-specific dependencies for this service. Declaration protected virtual RelationalConventionSetBuilderDependencies RelationalDependencies { get; } Property Value Type Description RelationalConventionSetBuilderDependencies Methods | Improve this Doc View Source ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Declaration public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder IConventionContext < IConventionModelBuilder > context | Improve this Doc View Source ProcessModelInitialized(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Declaration public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder IConventionContext < IConventionModelBuilder > context Implements IModelFinalizingConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Classes CockroachDbInterleaveInParent This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlValueGenerationStrategyExtensions Extension methods over NpgsqlValueGenerationStrategy . PostgresCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. PostgresEnum Represents the metadata for a PostgreSQL enum. PostgresExtension Represents the metadata for a PostgreSQL extension. PostgresRange Represents the metadata for a PostgreSQL range. Enums NpgsqlValueGenerationStrategy Defines strategies to use when generating values for database columns. NullSortOrder Options for modifying sort ordering of NULL -values in indexes. SortOrder Options for modifying sort ordering of index values."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.CockroachDbAnnotationNames.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.CockroachDbAnnotationNames.html",
    "title": "Class CockroachDbAnnotationNames | Npgsql Documentation",
    "keywords": "Class CockroachDbAnnotationNames This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object CockroachDbAnnotationNames Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class CockroachDbAnnotationNames : object Fields | Improve this Doc View Source InterleaveInParent This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string InterleaveInParent = null Field Value Type Description String | Improve this Doc View Source Prefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string Prefix = null Field Value Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Classes CockroachDbAnnotationNames This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. IdentitySequenceOptionsData This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlAnnotationNames This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlAnnotationProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.IdentitySequenceOptionsData.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.IdentitySequenceOptionsData.html",
    "title": "Class IdentitySequenceOptionsData | Npgsql Documentation",
    "keywords": "Class IdentitySequenceOptionsData This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object IdentitySequenceOptionsData Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class IdentitySequenceOptionsData : IEquatable<IdentitySequenceOptionsData> Fields | Improve this Doc View Source Empty This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static readonly IdentitySequenceOptionsData Empty Field Value Type Description IdentitySequenceOptionsData Properties | Improve this Doc View Source IncrementBy This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long IncrementBy { get; set; } Property Value Type Description Int64 | Improve this Doc View Source IsCyclic This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool IsCyclic { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MaxValue This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long? MaxValue { get; set; } Property Value Type Description Nullable < Int64 > | Improve this Doc View Source MinValue This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long? MinValue { get; set; } Property Value Type Description Nullable < Int64 > | Improve this Doc View Source NumbersToCache This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long NumbersToCache { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StartValue This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long? StartValue { get; set; } Property Value Type Description Nullable < Int64 > Methods | Improve this Doc View Source Deserialize(Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IdentitySequenceOptionsData Deserialize(string? value) Parameters Type Name Description Nullable < String > value Returns Type Description IdentitySequenceOptionsData | Improve this Doc View Source Equals(IdentitySequenceOptionsData) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool Equals(IdentitySequenceOptionsData other) Parameters Type Name Description IdentitySequenceOptionsData other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source Get(IReadOnlyAnnotatable) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IdentitySequenceOptionsData Get(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable Returns Type Description IdentitySequenceOptionsData | Improve this Doc View Source GetHashCode() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Serialize() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string Serialize() Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationNames.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationNames.html",
    "title": "Class NpgsqlAnnotationNames | Npgsql Documentation",
    "keywords": "Class NpgsqlAnnotationNames This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlAnnotationNames Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlAnnotationNames : object Fields | Improve this Doc View Source CollationDefinitionPrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string CollationDefinitionPrefix = null Field Value Type Description String | Improve this Doc View Source Comment This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string Comment = null Field Value Type Description String | Improve this Doc View Source CompressionMethod This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string CompressionMethod = null Field Value Type Description String | Improve this Doc View Source CreatedConcurrently This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string CreatedConcurrently = null Field Value Type Description String | Improve this Doc View Source DatabaseTemplate This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string DatabaseTemplate = null Field Value Type Description String | Improve this Doc View Source DefaultColumnCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string DefaultColumnCollation = null Field Value Type Description String | Improve this Doc View Source ElementDataType If this column's data type is an array, contains the data type of its elements. Otherwise null. Declaration public const string ElementDataType = null Field Value Type Description String | Improve this Doc View Source EnumPrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string EnumPrefix = null Field Value Type Description String | Improve this Doc View Source HiLoSequenceName This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string HiLoSequenceName = null Field Value Type Description String | Improve this Doc View Source HiLoSequenceSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string HiLoSequenceSchema = null Field Value Type Description String | Improve this Doc View Source IdentityOptions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IdentityOptions = null Field Value Type Description String | Improve this Doc View Source IndexCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexCollation = null Field Value Type Description String | Improve this Doc View Source IndexExpression If the index contains an expression (rather than simple column references), the expression is contained here. This is currently unsupported and will be ignored. Declaration public const string IndexExpression = null Field Value Type Description String | Improve this Doc View Source IndexInclude This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexInclude = null Field Value Type Description String | Improve this Doc View Source IndexMethod This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexMethod = null Field Value Type Description String | Improve this Doc View Source IndexNullSortOrder This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexNullSortOrder = null Field Value Type Description String | Improve this Doc View Source IndexOperators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexOperators = null Field Value Type Description String | Improve this Doc View Source IndexSortOrder This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexSortOrder = null Field Value Type Description String | Improve this Doc View Source NullsDistinct This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string NullsDistinct = null Field Value Type Description String | Improve this Doc View Source PostgresExtensionPrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string PostgresExtensionPrefix = null Field Value Type Description String | Improve this Doc View Source PostgresTypeType Identifies the type of the PostgreSQL type of this column (e.g. array, range, base). Declaration public const string PostgresTypeType = null Field Value Type Description String | Improve this Doc View Source Prefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string Prefix = null Field Value Type Description String | Improve this Doc View Source RangePrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string RangePrefix = null Field Value Type Description String | Improve this Doc View Source SequenceName This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string SequenceName = null Field Value Type Description String | Improve this Doc View Source SequenceNameSuffix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string SequenceNameSuffix = null Field Value Type Description String | Improve this Doc View Source SequenceSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string SequenceSchema = null Field Value Type Description String | Improve this Doc View Source StorageParameterPrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string StorageParameterPrefix = null Field Value Type Description String | Improve this Doc View Source Tablespace This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string Tablespace = null Field Value Type Description String | Improve this Doc View Source TsVectorConfig This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string TsVectorConfig = null Field Value Type Description String | Improve this Doc View Source TsVectorProperties This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string TsVectorProperties = null Field Value Type Description String | Improve this Doc View Source UnloggedTable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string UnloggedTable = null Field Value Type Description String | Improve this Doc View Source ValueGeneratedOnAdd This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string ValueGeneratedOnAdd = null Field Value Type Description String | Improve this Doc View Source ValueGenerationStrategy This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string ValueGenerationStrategy = null Field Value Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationProvider.html",
    "title": "Class NpgsqlAnnotationProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlAnnotationProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlAnnotationProvider Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlAnnotationProvider : RelationalAnnotationProvider Constructors | Improve this Doc View Source NpgsqlAnnotationProvider(RelationalAnnotationProviderDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlAnnotationProvider(RelationalAnnotationProviderDependencies dependencies) Parameters Type Name Description RelationalAnnotationProviderDependencies dependencies Methods | Improve this Doc View Source For(IColumn, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IEnumerable<IAnnotation> For(IColumn column, bool designTime) Parameters Type Name Description IColumn column Boolean designTime Returns Type Description IEnumerable < IAnnotation > | Improve this Doc View Source For(IRelationalModel, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IEnumerable<IAnnotation> For(IRelationalModel model, bool designTime) Parameters Type Name Description IRelationalModel model Boolean designTime Returns Type Description IEnumerable < IAnnotation > | Improve this Doc View Source For(ITable, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IEnumerable<IAnnotation> For(ITable table, bool designTime) Parameters Type Name Description ITable table Boolean designTime Returns Type Description IEnumerable < IAnnotation > | Improve this Doc View Source For(ITableIndex, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IEnumerable<IAnnotation> For(ITableIndex index, bool designTime) Parameters Type Name Description ITableIndex index Boolean designTime Returns Type Description IEnumerable < IAnnotation >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategy.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategy.html",
    "title": "Enum NpgsqlValueGenerationStrategy | Npgsql Documentation",
    "keywords": "Enum NpgsqlValueGenerationStrategy Defines strategies to use when generating values for database columns. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum NpgsqlValueGenerationStrategy : int Remarks See Model building conventions . Fields Name Description IdentityAlwaysColumn Selects the always-identity column strategy (a value cannot be provided). Available only starting PostgreSQL 10. IdentityByDefaultColumn Selects the by-default-identity column strategy (a value can be provided to override the identity mechanism). Available only starting PostgreSQL 10. None No Npgsql-specific strategy. Sequence A pattern that uses a database sequence to generate values for the column. SequenceHiLo A sequence-based hi-lo pattern where blocks of IDs are allocated from the server and used client-side for generating keys. This is an advanced pattern--only use this strategy if you are certain it is what you need. SerialColumn Selects the serial column strategy, which is a regular column backed by an auto-created index. If you are creating a new project on PostgreSQL 10 or above, consider using IdentityByDefaultColumn instead. Extension Methods NpgsqlValueGenerationStrategyExtensions.IsIdentity()"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategyExtensions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategyExtensions.html",
    "title": "Class NpgsqlValueGenerationStrategyExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGenerationStrategyExtensions Extension methods over NpgsqlValueGenerationStrategy . Inheritance Object NpgsqlValueGenerationStrategyExtensions Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlValueGenerationStrategyExtensions : object Methods | Improve this Doc View Source IsIdentity(NpgsqlValueGenerationStrategy) Whether the given strategy is either IdentityByDefaultColumn or IdentityAlwaysColumn . Declaration public static bool IsIdentity(this NpgsqlValueGenerationStrategy strategy) Parameters Type Name Description NpgsqlValueGenerationStrategy strategy Returns Type Description Boolean | Improve this Doc View Source IsIdentity(Nullable<NpgsqlValueGenerationStrategy>) Whether the given strategy is either IdentityByDefaultColumn or IdentityAlwaysColumn . Declaration public static bool IsIdentity(this NpgsqlValueGenerationStrategy? strategy) Parameters Type Name Description Nullable < NpgsqlValueGenerationStrategy > strategy Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NullSortOrder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NullSortOrder.html",
    "title": "Enum NullSortOrder | Npgsql Documentation",
    "keywords": "Enum NullSortOrder Options for modifying sort ordering of NULL -values in indexes. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum NullSortOrder : int Fields Name Description NullsFirst Specifies that nulls sort before non-nulls. NullsLast Specifies that nulls sort after non-nulls. Unspecified Represents an unspecified sort order. The database default will be used."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresCollation.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresCollation.html",
    "title": "Class PostgresCollation | Npgsql Documentation",
    "keywords": "Class PostgresCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object PostgresCollation Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresCollation : object Properties | Improve this Doc View Source Annotatable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Improve this Doc View Source IsDeterministic This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool? IsDeterministic { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source LcCollate This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string LcCollate { get; set; } Property Value Type Description String | Improve this Doc View Source LcCtype This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string LcCtype { get; set; } Property Value Type Description String | Improve this Doc View Source Name This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string Name { get; } Property Value Type Description String | Improve this Doc View Source Provider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string? Provider { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source Schema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string? Schema { get; } Property Value Type Description Nullable < String > Methods | Improve this Doc View Source FindCollation(IReadOnlyAnnotatable, Nullable<String>, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresCollation FindCollation(IReadOnlyAnnotatable annotatable, string? schema, string name) Parameters Type Name Description IReadOnlyAnnotatable annotatable Nullable < String > schema String name Returns Type Description PostgresCollation | Improve this Doc View Source GetCollations(IReadOnlyAnnotatable) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IEnumerable<PostgresCollation> GetCollations(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable Returns Type Description IEnumerable < PostgresCollation > | Improve this Doc View Source GetOrAddCollation(IMutableAnnotatable, Nullable<String>, String, String, String, Nullable<String>, Nullable<Boolean>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresCollation GetOrAddCollation(IMutableAnnotatable annotatable, string? schema, string name, string lcCollate, string lcCtype, string? provider = null, bool? deterministic = null) Parameters Type Name Description IMutableAnnotatable annotatable Nullable < String > schema String name String lcCollate String lcCtype Nullable < String > provider Nullable < Boolean > deterministic Returns Type Description PostgresCollation"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresEnum.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresEnum.html",
    "title": "Class PostgresEnum | Npgsql Documentation",
    "keywords": "Class PostgresEnum Represents the metadata for a PostgreSQL enum. Inheritance Object PostgresEnum Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresEnum : object Properties | Improve this Doc View Source Annotatable The Annotatable that stores the enum. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Improve this Doc View Source Labels The enum labels. Declaration public virtual IReadOnlyList<string> Labels { get; set; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source Name The enum name. Declaration public virtual string Name { get; } Property Value Type Description String | Improve this Doc View Source Schema The enum schema or null to represent the default schema. Declaration public virtual string? Schema { get; } Property Value Type Description Nullable < String > Methods | Improve this Doc View Source FindPostgresEnum(IReadOnlyAnnotatable, Nullable<String>, String) Finds a PostgresEnum in the , or returns null if not found. Declaration public static PostgresEnum FindPostgresEnum(IReadOnlyAnnotatable annotatable, string? schema, string name) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for the enum. Nullable < String > schema The enum schema or null to use the model's default schema. String name The enum name. Returns Type Description PostgresEnum The PostgresEnum from the . | Improve this Doc View Source GetOrAddPostgresEnum(IMutableAnnotatable, Nullable<String>, String, String[]) Gets or adds a PostgresEnum from or to the . Declaration public static PostgresEnum GetOrAddPostgresEnum(IMutableAnnotatable annotatable, string? schema, string name, string[] labels) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the enum. Nullable < String > schema The enum schema or null to use the model's default schema. String name The enum name. String [] labels The enum labels. Returns Type Description PostgresEnum The PostgresEnum from the . | Improve this Doc View Source GetOrAddPostgresEnum(IMutableAnnotatable, String, String[]) Gets or adds a PostgresEnum from or to the . Declaration public static PostgresEnum GetOrAddPostgresEnum(IMutableAnnotatable annotatable, string name, string[] labels) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the enum. String name The enum name. String [] labels The enum labels. Returns Type Description PostgresEnum The PostgresEnum from the . | Improve this Doc View Source GetPostgresEnums(IReadOnlyAnnotatable) Gets the collection of PostgresEnum stored in the . Declaration public static IEnumerable<PostgresEnum> GetPostgresEnums(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for PostgresEnum annotations. Returns Type Description IEnumerable < PostgresEnum > The collection of PostgresEnum stored in the ."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresExtension.html",
    "title": "Class PostgresExtension | Npgsql Documentation",
    "keywords": "Class PostgresExtension Represents the metadata for a PostgreSQL extension. Inheritance Object PostgresExtension Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresExtension : object Properties | Improve this Doc View Source Annotatable The Annotatable that stores the extension. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Improve this Doc View Source Name The extension name. Declaration public virtual string Name { get; } Property Value Type Description String | Improve this Doc View Source Schema The extension schema or null to represent the default schema. Declaration public virtual string? Schema { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source Version The extension version. Declaration public virtual string? Version { get; set; } Property Value Type Description Nullable < String > Methods | Improve this Doc View Source FindPostgresExtension(IReadOnlyAnnotatable, Nullable<String>, String) Finds a PostgresExtension in the , or returns null if not found. Declaration public static PostgresExtension FindPostgresExtension(IReadOnlyAnnotatable annotatable, string? schema, string name) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for the extension. Nullable < String > schema The extension schema. The default schema is never used. String name The extension name. Returns Type Description PostgresExtension The PostgresExtension from the . | Improve this Doc View Source GetOrAddPostgresExtension(IConventionAnnotatable, Nullable<String>, String, Nullable<String>) Gets or adds a PostgresExtension from or to the . Declaration public static PostgresExtension GetOrAddPostgresExtension(IConventionAnnotatable annotatable, string? schema, string name, string? version) Parameters Type Name Description IConventionAnnotatable annotatable The annotatable from which to get or add the extension. Nullable < String > schema The extension schema or null to use the model's default schema. String name The extension name. Nullable < String > version The extension version. Returns Type Description PostgresExtension The PostgresExtension from the . | Improve this Doc View Source GetOrAddPostgresExtension(IMutableAnnotatable, Nullable<String>, String, Nullable<String>) Gets or adds a PostgresExtension from or to the . Declaration public static PostgresExtension GetOrAddPostgresExtension(IMutableAnnotatable annotatable, string? schema, string name, string? version) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the extension. Nullable < String > schema The extension schema or null to use the model's default schema. String name The extension name. Nullable < String > version The extension version. Returns Type Description PostgresExtension The PostgresExtension from the . | Improve this Doc View Source GetOrAddPostgresExtension(IMutableAnnotatable, String, Nullable<String>) Gets or adds a PostgresExtension from or to the . Declaration public static PostgresExtension GetOrAddPostgresExtension(IMutableAnnotatable annotatable, string name, string? version) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the extension. String name The extension name. Nullable < String > version The extension version. Returns Type Description PostgresExtension The PostgresExtension from the . | Improve this Doc View Source GetPostgresExtensions(IReadOnlyAnnotatable) Gets the collection of PostgresExtension stored in the . Declaration public static IEnumerable<PostgresExtension> GetPostgresExtensions(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for PostgresExtension annotations. Returns Type Description IEnumerable < PostgresExtension > The collection of PostgresExtension stored in the ."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresRange.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresRange.html",
    "title": "Class PostgresRange | Npgsql Documentation",
    "keywords": "Class PostgresRange Represents the metadata for a PostgreSQL range. Inheritance Object PostgresRange Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresRange : object Properties | Improve this Doc View Source Annotatable The Annotatable that stores the range. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Improve this Doc View Source CanonicalFunction The function defining a \"step\" in a discrete range. Declaration public virtual string? CanonicalFunction { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source Collation The collation to use. Declaration public virtual string? Collation { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source Name The range name. Declaration public virtual string Name { get; } Property Value Type Description String | Improve this Doc View Source Schema The range schema or null to represent the default schema. Declaration public virtual string? Schema { get; } Property Value Type Description Nullable < String > | Improve this Doc View Source Subtype The subtype of the range. Declaration public virtual string Subtype { get; set; } Property Value Type Description String | Improve this Doc View Source SubtypeDiff The function defining a difference in subtype values. Declaration public virtual string? SubtypeDiff { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source SubtypeOpClass The operator class to use. Declaration public virtual string? SubtypeOpClass { get; set; } Property Value Type Description Nullable < String > Methods | Improve this Doc View Source FindPostgresRange(IReadOnlyAnnotatable, Nullable<String>, String) Finds a PostgresRange in the , or returns null if not found. Declaration public static PostgresRange FindPostgresRange(IReadOnlyAnnotatable annotatable, string? schema, string name) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for the range. Nullable < String > schema The range schema or null to use the model's default schema. String name The range name. Returns Type Description PostgresRange The PostgresRange from the . | Improve this Doc View Source GetOrAddPostgresRange(IMutableAnnotatable, Nullable<String>, String, String, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>) Gets or adds a PostgresRange from or to the . Declaration public static PostgresRange GetOrAddPostgresRange(IMutableAnnotatable annotatable, string? schema, string name, string subtype, string? canonicalFunction = null, string? subtypeOpClass = null, string? collation = null, string? subtypeDiff = null) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the range. Nullable < String > schema The range schema or null to use the model's default schema. String name The range name. String subtype The range subtype. Nullable < String > canonicalFunction Nullable < String > subtypeOpClass Nullable < String > collation Nullable < String > subtypeDiff Returns Type Description PostgresRange The PostgresRange from the . | Improve this Doc View Source GetPostgresRanges(IReadOnlyAnnotatable) Gets the collection of PostgresRange stored in the . Declaration public static IEnumerable<PostgresRange> GetPostgresRanges(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for PostgresRange annotations. Returns Type Description IEnumerable < PostgresRange > The collection of PostgresRange stored in the ."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.SortOrder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.SortOrder.html",
    "title": "Enum SortOrder | Npgsql Documentation",
    "keywords": "Enum SortOrder Options for modifying sort ordering of index values. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum SortOrder : int Fields Name Description Ascending Specifies ascending sort order, which is the default. Descending Specifies descending sort order."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations Classes NpgsqlMigrationsSqlGenerator PostgreSQL-specific implementation of ."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal Classes NpgsqlHistoryRepository This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlHistoryRepository.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlHistoryRepository.html",
    "title": "Class NpgsqlHistoryRepository | Npgsql Documentation",
    "keywords": "Class NpgsqlHistoryRepository This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlHistoryRepository Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlHistoryRepository : HistoryRepository Constructors | Improve this Doc View Source NpgsqlHistoryRepository(HistoryRepositoryDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlHistoryRepository(HistoryRepositoryDependencies dependencies) Parameters Type Name Description HistoryRepositoryDependencies dependencies Properties | Improve this Doc View Source ExistsSql This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ExistsSql { get; } Property Value Type Description String Methods | Improve this Doc View Source GetBeginIfExistsScript(String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string GetBeginIfExistsScript(string migrationId) Parameters Type Name Description String migrationId Returns Type Description String | Improve this Doc View Source GetBeginIfNotExistsScript(String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string GetBeginIfNotExistsScript(string migrationId) Parameters Type Name Description String migrationId Returns Type Description String | Improve this Doc View Source GetCreateIfNotExistsScript() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string GetCreateIfNotExistsScript() Returns Type Description String | Improve this Doc View Source GetEndIfScript() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string GetEndIfScript() Returns Type Description String | Improve this Doc View Source InterpretExistsResult(Nullable<Object>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool InterpretExistsResult(object? value) Parameters Type Name Description Nullable < Object > value Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.NpgsqlMigrationsSqlGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.NpgsqlMigrationsSqlGenerator.html",
    "title": "Class NpgsqlMigrationsSqlGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlMigrationsSqlGenerator PostgreSQL-specific implementation of . Inheritance Object NpgsqlMigrationsSqlGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Migrations Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMigrationsSqlGenerator : MigrationsSqlGenerator Remarks The service lifetime is . This means that each instance will use its own instance of this service. The implementation may depend on other services registered with any lifetime. The implementation does not need to be thread-safe. See Database migrations . Constructors | Improve this Doc View Source NpgsqlMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies, INpgsqlSingletonOptions) Creates a new NpgsqlMigrationsSqlGenerator instance. Declaration public NpgsqlMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description MigrationsSqlGeneratorDependencies dependencies Parameter object containing dependencies for this service. INpgsqlSingletonOptions npgsqlSingletonOptions The singleton options to use. Methods | Improve this Doc View Source ApplyTsVectorColumnSql(ColumnOperation, Nullable<IModel>, String, Nullable<String>, String) Checks for a TsVectorConfig annotation on the given column, and if found, assigns the appropriate SQL to . Declaration protected virtual void ApplyTsVectorColumnSql(ColumnOperation column, IModel? model, string name, string? schema, string table) Parameters Type Name Description ColumnOperation column Nullable < IModel > model String name Nullable < String > schema String table | Improve this Doc View Source ColumnDefinition(Nullable<String>, String, String, ColumnOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void ColumnDefinition(string? schema, string table, string name, ColumnOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description Nullable < String > schema String table String name ColumnOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source ComputedColumnDefinition(Nullable<String>, String, String, ColumnOperation, Nullable<IModel>, MigrationCommandListBuilder) Generates a SQL fragment for a computed column definition for the given column metadata. Declaration protected override void ComputedColumnDefinition(string? schema, string table, string name, ColumnOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description Nullable < String > schema The schema that contains the table, or null to use the default schema. String table The table that contains the column. String name The column name. ColumnOperation operation The column metadata. Nullable < IModel > model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to add the SQL fragment. | Improve this Doc View Source Generate(AddColumnOperation, Nullable<IModel>, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(AddColumnOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description AddColumnOperation operation Nullable < IModel > model MigrationCommandListBuilder builder Boolean terminate | Improve this Doc View Source Generate(AlterColumnOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(AlterColumnOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterColumnOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(AlterDatabaseOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(AlterDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(AlterTableOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(AlterTableOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterTableOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(CreateIndexOperation, Nullable<IModel>, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(CreateIndexOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description CreateIndexOperation operation Nullable < IModel > model MigrationCommandListBuilder builder Boolean terminate | Improve this Doc View Source Generate(CreateSequenceOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(CreateSequenceOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description CreateSequenceOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(CreateTableOperation, Nullable<IModel>, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(CreateTableOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description CreateTableOperation operation Nullable < IModel > model MigrationCommandListBuilder builder Boolean terminate | Improve this Doc View Source Generate(DropColumnOperation, Nullable<IModel>, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(DropColumnOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description DropColumnOperation operation Nullable < IModel > model MigrationCommandListBuilder builder Boolean terminate | Improve this Doc View Source Generate(DropIndexOperation, Nullable<IModel>, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(DropIndexOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description DropIndexOperation operation Nullable < IModel > model MigrationCommandListBuilder builder Boolean terminate | Improve this Doc View Source Generate(EnsureSchemaOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(EnsureSchemaOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description EnsureSchemaOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(InsertDataOperation, Nullable<IModel>, MigrationCommandListBuilder, Boolean) Builds commands for the given by making calls on the given , and then terminates the final command. Declaration protected override void Generate(InsertDataOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description InsertDataOperation operation The operation. Nullable < IModel > model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Boolean terminate Indicates whether or not to terminate the command after generating SQL for the operation. | Improve this Doc View Source Generate(IReadOnlyList<MigrationOperation>, Nullable<IModel>, MigrationsSqlGenerationOptions) Declaration public override IReadOnlyList<MigrationCommand> Generate(IReadOnlyList<MigrationOperation> operations, IModel? model = null, MigrationsSqlGenerationOptions options = null) Parameters Type Name Description IReadOnlyList < MigrationOperation > operations Nullable < IModel > model MigrationsSqlGenerationOptions options Returns Type Description IReadOnlyList < MigrationCommand > | Improve this Doc View Source Generate(MigrationOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(MigrationOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description MigrationOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(NpgsqlCreateDatabaseOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void Generate(NpgsqlCreateDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description NpgsqlCreateDatabaseOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(NpgsqlDropDatabaseOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration public virtual void Generate(NpgsqlDropDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description NpgsqlDropDatabaseOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(RenameColumnOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(RenameColumnOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameColumnOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(RenameIndexOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(RenameIndexOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameIndexOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(RenameSequenceOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(RenameSequenceOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameSequenceOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(RenameTableOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void Generate(RenameTableOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameTableOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateAddEnumLabel(PostgresEnum, String, Nullable<String>, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateAddEnumLabel(PostgresEnum enumType, string addedLabel, string? beforeLabel, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresEnum enumType String addedLabel Nullable < String > beforeLabel Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateCollationStatements(AlterDatabaseOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateCollationStatements(AlterDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateCreateCollation(PostgresCollation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateCollation(PostgresCollation collation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresCollation collation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateCreateEnum(PostgresEnum, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateEnum(PostgresEnum enumType, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresEnum enumType Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateCreateExtension(PostgresExtension, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateExtension(PostgresExtension extension, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresExtension extension Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateCreateRange(PostgresRange, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateRange(PostgresRange rangeType, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresRange rangeType Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateDropCollation(PostgresCollation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateDropCollation(PostgresCollation collation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresCollation collation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateDropEnum(PostgresEnum, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateDropEnum(PostgresEnum enumType, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresEnum enumType Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateDropRange(PostgresRange, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateDropRange(PostgresRange rangeType, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresRange rangeType Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateEnumStatements(AlterDatabaseOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateEnumStatements(AlterDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateRangeStatements(AlterDatabaseOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected virtual void GenerateRangeStatements(AlterDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source IdentityDefinition(ColumnOperation, MigrationCommandListBuilder) Declaration protected virtual void IdentityDefinition(ColumnOperation operation, MigrationCommandListBuilder builder) Parameters Type Name Description ColumnOperation operation MigrationCommandListBuilder builder | Improve this Doc View Source IndexOptions(CreateIndexOperation, Nullable<IModel>, MigrationCommandListBuilder) Declaration protected override void IndexOptions(CreateIndexOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description CreateIndexOperation operation Nullable < IModel > model MigrationCommandListBuilder builder | Improve this Doc View Source RecreateIndexes(Nullable<IColumn>, MigrationOperation, MigrationCommandListBuilder) Declaration protected virtual void RecreateIndexes(IColumn? column, MigrationOperation currentOperation, MigrationCommandListBuilder builder) Parameters Type Name Description Nullable < IColumn > column MigrationOperation currentOperation MigrationCommandListBuilder builder | Improve this Doc View Source Rename(Nullable<String>, String, String, String, MigrationCommandListBuilder) Renames a database object such as a table, index, or sequence. Declaration public virtual void Rename(string? schema, string name, string newName, string type, MigrationCommandListBuilder builder) Parameters Type Name Description Nullable < String > schema The current schema of the object to rename. String name The current name of the object to rename. String newName The new name. String type The type of the object (e.g. TABLE, INDEX, SEQUENCE). MigrationCommandListBuilder builder The builder to which operations are appended. | Improve this Doc View Source Transfer(String, Nullable<String>, String, String, MigrationCommandListBuilder) Transfers a database object such as a table, index, or sequence between schemas. Declaration public virtual void Transfer(string newSchema, string? schema, string name, string type, MigrationCommandListBuilder builder) Parameters Type Name Description String newSchema The new schema. Nullable < String > schema The current schema. String name The name of the object to transfer. String type The type of the object (e.g. TABLE, INDEX, SEQUENCE). MigrationCommandListBuilder builder The builder to which operations are appended."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations Classes NpgsqlCreateDatabaseOperation A PostgreSQL-specific to create a database. NpgsqlDropDatabaseOperation A PostgreSQL-specific to drop a database."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlCreateDatabaseOperation.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlCreateDatabaseOperation.html",
    "title": "Class NpgsqlCreateDatabaseOperation | Npgsql Documentation",
    "keywords": "Class NpgsqlCreateDatabaseOperation A PostgreSQL-specific to create a database. Inheritance Object NpgsqlCreateDatabaseOperation Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCreateDatabaseOperation : DatabaseOperation Remarks See Database migrations . Properties | Improve this Doc View Source Name The name of the database. Declaration public virtual string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Tablespace The PostgreSQL tablespace in which to create the database. Declaration public virtual string? Tablespace { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source Template The PostgreSQL database to use as a template for the new database to be created. Declaration public virtual string? Template { get; set; } Property Value Type Description Nullable < String >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlDropDatabaseOperation.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlDropDatabaseOperation.html",
    "title": "Class NpgsqlDropDatabaseOperation | Npgsql Documentation",
    "keywords": "Class NpgsqlDropDatabaseOperation A PostgreSQL-specific to drop a database. Inheritance Object NpgsqlDropDatabaseOperation Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDropDatabaseOperation : MigrationOperation Remarks See Database migrations . Properties | Improve this Doc View Source Name The name of the database. Declaration public virtual string Name { get; set; } Property Value Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal Classes NpgsqlNetTopologySuiteCodeGeneratorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.NpgsqlNetTopologySuiteCodeGeneratorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.NpgsqlNetTopologySuiteCodeGeneratorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteCodeGeneratorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteCodeGeneratorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteCodeGeneratorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteCodeGeneratorPlugin : ProviderCodeGeneratorPlugin Methods | Improve this Doc View Source GenerateProviderOptions() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override MethodCallCodeFragment GenerateProviderOptions() Returns Type Description MethodCallCodeFragment"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Classes NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeEvaluatableExpressionFilterPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeMemberTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. NpgsqlNodaTimeMethodCallTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeMethodCallTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin : IAggregateMethodCallTranslatorPlugin Constructors | Improve this Doc View Source NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin(ISqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Properties | Improve this Doc View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IAggregateMethodCallTranslator> Translators { get; } Property Value Type Description IEnumerable < IAggregateMethodCallTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeAggregateMethodTranslator.html",
    "title": "Class NpgsqlNodaTimeAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNodaTimeAggregateMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlNodaTimeAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeEvaluatableExpressionFilterPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeEvaluatableExpressionFilterPlugin.html",
    "title": "Class NpgsqlNodaTimeEvaluatableExpressionFilterPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeEvaluatableExpressionFilterPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNodaTimeEvaluatableExpressionFilterPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeEvaluatableExpressionFilterPlugin : IEvaluatableExpressionFilterPlugin Methods | Improve this Doc View Source IsEvaluatableExpression(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool IsEvaluatableExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMemberTranslator.html",
    "title": "Class NpgsqlNodaTimeMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNodaTimeMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMemberTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlNodaTimeMemberTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeMemberTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMemberTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMemberTranslatorPlugin.html",
    "title": "Class NpgsqlNodaTimeMemberTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMemberTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. Inheritance Object NpgsqlNodaTimeMemberTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMemberTranslatorPlugin : IMemberTranslatorPlugin Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Improve this Doc View Source NpgsqlNodaTimeMemberTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeMemberTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Improve this Doc View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IMemberTranslator> Translators { get; } Property Value Type Description IEnumerable < IMemberTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMethodCallTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMethodCallTranslator.html",
    "title": "Class NpgsqlNodaTimeMethodCallTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMethodCallTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNodaTimeMethodCallTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMethodCallTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlNodaTimeMethodCallTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeMethodCallTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNodaTimeMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMethodCallTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. Inheritance Object NpgsqlNodaTimeMethodCallTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMethodCallTranslatorPlugin : IMethodCallTranslatorPlugin Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Improve this Doc View Source NpgsqlNodaTimeMethodCallTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeMethodCallTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Improve this Doc View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IMethodCallTranslator> Translators { get; } Property Value Type Description IEnumerable < IMethodCallTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal Classes NpgsqlNodaTimeCodeGeneratorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.NpgsqlNodaTimeCodeGeneratorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.NpgsqlNodaTimeCodeGeneratorPlugin.html",
    "title": "Class NpgsqlNodaTimeCodeGeneratorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeCodeGeneratorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNodaTimeCodeGeneratorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeCodeGeneratorPlugin : ProviderCodeGeneratorPlugin Methods | Improve this Doc View Source GenerateProviderOptions() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override MethodCallCodeFragment GenerateProviderOptions() Returns Type Description MethodCallCodeFragment"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NpgsqlRetryingExecutionStrategy.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NpgsqlRetryingExecutionStrategy.html",
    "title": "Class NpgsqlRetryingExecutionStrategy | Npgsql Documentation",
    "keywords": "Class NpgsqlRetryingExecutionStrategy An implementation for retrying failed executions on PostgreSQL. Inheritance Object NpgsqlRetryingExecutionStrategy Namespace : Npgsql.EntityFrameworkCore.PostgreSQL Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRetryingExecutionStrategy : ExecutionStrategy Remarks The service lifetime is . This means that each instance will use its own instance of this service. The implementation may depend on other services registered with any lifetime. The implementation does not need to be thread-safe. See Connection resiliency and database retries for more information and examples. Constructors | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(DbContext) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(DbContext context) Parameters Type Name Description DbContext context The context on which the operations will be invoked. Remarks The default retry limit is 6, which means that the total amount of time spent before failing is about a minute. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(DbContext, Int32) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(DbContext context, int maxRetryCount) Parameters Type Name Description DbContext context The context on which the operations will be invoked. Int32 maxRetryCount The maximum number of retry attempts. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(DbContext, Int32, TimeSpan, Nullable<ICollection<String>>) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay, ICollection<string>? errorCodesToAdd) Parameters Type Name Description DbContext context The context on which the operations will be invoked. Int32 maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay between retries. Nullable < ICollection < String >> errorCodesToAdd Additional error codes that should be considered transient. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies, Int32) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. Int32 maxRetryCount The maximum number of retry attempts. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies, Int32, TimeSpan, Nullable<ICollection<String>>) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay, ICollection<string>? errorCodesToAdd) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. Int32 maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay between retries. Nullable < ICollection < String >> errorCodesToAdd Additional SQL error numbers that should be considered transient. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies, Nullable<ICollection<String>>) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, ICollection<string>? errorCodesToAdd) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. Nullable < ICollection < String >> errorCodesToAdd Additional error codes that should be considered transient. Methods | Improve this Doc View Source ShouldRetryOn(Nullable<Exception>) Declaration protected override bool ShouldRetryOn(Exception? exception) Parameters Type Name Description Nullable < Exception > exception Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions Enums PostgresExpressionType PostgreSQL-specific expression node types."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Classes PostgresAllExpression Represents a PostgreSQL array ALL expression. PostgresAnyExpression Represents a PostgreSQL array ANY expression. PostgresArrayIndexExpression An SQL expression that represents an indexing into a PostgreSQL array. PostgresBinaryExpression An expression that represents a PostgreSQL-specific binary operation in a SQL tree. PostgresDeleteExpression An SQL expression that represents a PostgreSQL DELETE operation. PostgresFunctionExpression Represents a SQL function call expression, supporting PostgreSQL's named parameter notation (e.g. make_interval(weeks => 2) and non-comma parameter separators (e.g. position(substring in string)). PostgresILikeExpression Represents a PostgreSQL ILIKE expression. PostgresJsonTraversalExpression Represents a PostgreSQL JSON operator traversing a JSON document with a path (i.e. x#>y or x#>>y) PostgresNewArrayExpression Represents creating a new PostgreSQL array. PostgresRegexMatchExpression Represents a PostgreSQL regular expression match expression. PostgresRowValueExpression An expression that represents a PostgreSQL-specific row value expression in a SQL tree. PostgresUnknownBinaryExpression A binary expression only to be used by plugins, since new expressions can only be added (and handled) within the provider itself. Allows defining the operator as a string within the expression, and has default (i.e. propagating) nullability semantics. All type mappings must be applied to the operands before the expression is constructed, since there's no inference logic for it in NpgsqlSqlExpressionFactory . Enums PostgresAllOperatorType Determines the operator type for a PostgresAllExpression . PostgresAnyOperatorType Determines the operator type for a PostgresAnyExpression ."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAllExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAllExpression.html",
    "title": "Class PostgresAllExpression | Npgsql Documentation",
    "keywords": "Class PostgresAllExpression Represents a PostgreSQL array ALL expression. Inheritance Object PostgresAllExpression Implements IEquatable < PostgresAllExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresAllExpression : SqlExpression Remarks See https://www.postgresql.org/docs/current/static/functions-comparisons.html Constructors | Improve this Doc View Source PostgresAllExpression(SqlExpression, SqlExpression, PostgresAllOperatorType, Nullable<RelationalTypeMapping>) Constructs a PostgresAllExpression . Declaration public PostgresAllExpression(SqlExpression item, SqlExpression array, PostgresAllOperatorType operatorType, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression item The value to find. SqlExpression array The array to search. PostgresAllOperatorType operatorType The operator symbol to the array expression. Nullable < RelationalTypeMapping > typeMapping The type mapping for the expression. Properties | Improve this Doc View Source Array The array of values or patterns to test for the Item . Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Item The value to test against the Array . Declaration public virtual SqlExpression Item { get; } Property Value Type Description SqlExpression | Improve this Doc View Source OperatorType The operator. Declaration public virtual PostgresAllOperatorType OperatorType { get; } Property Value Type Description PostgresAllOperatorType | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source Equals(PostgresAllExpression) Declaration public virtual bool Equals(PostgresAllExpression other) Parameters Type Name Description PostgresAllExpression other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresAllExpression Update(SqlExpression item, SqlExpression array) Parameters Type Name Description SqlExpression item The Item property of the result. SqlExpression array The Array property of the result. Returns Type Description PostgresAllExpression This expression if no children changed, or an expression with the updated children. | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IEquatable<>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAllOperatorType.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAllOperatorType.html",
    "title": "Enum PostgresAllOperatorType | Npgsql Documentation",
    "keywords": "Enum PostgresAllOperatorType Determines the operator type for a PostgresAllExpression . Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum PostgresAllOperatorType : int Fields Name Description ILike Represents a PostgreSQL ILIKE ALL operator. Like Represents a PostgreSQL LIKE ALL operator."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAnyExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAnyExpression.html",
    "title": "Class PostgresAnyExpression | Npgsql Documentation",
    "keywords": "Class PostgresAnyExpression Represents a PostgreSQL array ANY expression. Inheritance Object PostgresAnyExpression Implements IEquatable < PostgresAnyExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresAnyExpression : SqlExpression Remarks See https://www.postgresql.org/docs/current/static/functions-comparisons.html Examples 1 = ANY ('{0,1,2}'), 'cat' LIKE ANY ('{a%,b%,c%}') Constructors | Improve this Doc View Source PostgresAnyExpression(SqlExpression, SqlExpression, PostgresAnyOperatorType, Nullable<RelationalTypeMapping>) Constructs a PostgresAnyExpression . Declaration public PostgresAnyExpression(SqlExpression item, SqlExpression array, PostgresAnyOperatorType operatorType, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression item The value to find. SqlExpression array The array to search. PostgresAnyOperatorType operatorType The operator symbol to the array expression. Nullable < RelationalTypeMapping > typeMapping The type mapping for the expression. Properties | Improve this Doc View Source Array The array of values or patterns to test for the Item . Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Item The value to test against the Array . Declaration public virtual SqlExpression Item { get; } Property Value Type Description SqlExpression | Improve this Doc View Source OperatorType The operator. Declaration public virtual PostgresAnyOperatorType OperatorType { get; } Property Value Type Description PostgresAnyOperatorType | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source Equals(PostgresAnyExpression) Declaration public virtual bool Equals(PostgresAnyExpression other) Parameters Type Name Description PostgresAnyExpression other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresAnyExpression Update(SqlExpression item, SqlExpression array) Parameters Type Name Description SqlExpression item The Item property of the result. SqlExpression array The Array property of the result. Returns Type Description PostgresAnyExpression This expression if no children changed, or an expression with the updated children. | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IEquatable<>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAnyOperatorType.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAnyOperatorType.html",
    "title": "Enum PostgresAnyOperatorType | Npgsql Documentation",
    "keywords": "Enum PostgresAnyOperatorType Determines the operator type for a PostgresAnyExpression . Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum PostgresAnyOperatorType : int Fields Name Description Equal Represents a PostgreSQL = ANY operator. ILike Represents a PostgreSQL ILIKE ANY operator. Like Represents a PostgreSQL LIKE ANY operator."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresArrayIndexExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresArrayIndexExpression.html",
    "title": "Class PostgresArrayIndexExpression | Npgsql Documentation",
    "keywords": "Class PostgresArrayIndexExpression An SQL expression that represents an indexing into a PostgreSQL array. Inheritance Object PostgresArrayIndexExpression Implements IEquatable < PostgresArrayIndexExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresArrayIndexExpression : SqlExpression Remarks specifically disallows having an of value as arrays are a PostgreSQL-only feature. Constructors | Improve this Doc View Source PostgresArrayIndexExpression(SqlExpression, SqlExpression, Type, Nullable<RelationalTypeMapping>) Creates a new instance of the PostgresArrayIndexExpression class. Declaration public PostgresArrayIndexExpression(SqlExpression array, SqlExpression index, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression array The array tp index into. SqlExpression index An position in the array to index into. Type type The of the expression. Nullable < RelationalTypeMapping > typeMapping The associated with the expression. Properties | Improve this Doc View Source Array The array being indexed. Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Index The index in the array. Declaration public virtual SqlExpression Index { get; } Property Value Type Description SqlExpression Methods | Improve this Doc View Source Equals(PostgresArrayIndexExpression) Declaration public virtual bool Equals(PostgresArrayIndexExpression other) Parameters Type Name Description PostgresArrayIndexExpression other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresArrayIndexExpression Update(SqlExpression array, SqlExpression index) Parameters Type Name Description SqlExpression array The Array property of the result. SqlExpression index The Index property of the result. Returns Type Description PostgresArrayIndexExpression This expression if no children changed, or an expression with the updated children. | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IEquatable<>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresBinaryExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresBinaryExpression.html",
    "title": "Class PostgresBinaryExpression | Npgsql Documentation",
    "keywords": "Class PostgresBinaryExpression An expression that represents a PostgreSQL-specific binary operation in a SQL tree. Inheritance Object PostgresBinaryExpression Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresBinaryExpression : SqlExpression Constructors | Improve this Doc View Source PostgresBinaryExpression(PostgresExpressionType, SqlExpression, SqlExpression, Type, Nullable<RelationalTypeMapping>) Creates a new instance of the PostgresBinaryExpression class. Declaration public PostgresBinaryExpression(PostgresExpressionType operatorType, SqlExpression left, SqlExpression right, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description PostgresExpressionType operatorType The operator to apply. SqlExpression left An expression which is left operand. SqlExpression right An expression which is right operand. Type type The of the expression. Nullable < RelationalTypeMapping > typeMapping The associated with the expression. Properties | Improve this Doc View Source Left The left operand. Declaration public virtual SqlExpression Left { get; } Property Value Type Description SqlExpression | Improve this Doc View Source OperatorType The operator of this PostgreSQL binary operation. Declaration public virtual PostgresExpressionType OperatorType { get; } Property Value Type Description PostgresExpressionType | Improve this Doc View Source Right The right operand. Declaration public virtual SqlExpression Right { get; } Property Value Type Description SqlExpression Methods | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresBinaryExpression Update(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left The Left property of the result. SqlExpression right The Right property of the result. Returns Type Description PostgresBinaryExpression This expression if no children changed, or an expression with the updated children. | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresDeleteExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresDeleteExpression.html",
    "title": "Class PostgresDeleteExpression | Npgsql Documentation",
    "keywords": "Class PostgresDeleteExpression An SQL expression that represents a PostgreSQL DELETE operation. Inheritance Object PostgresDeleteExpression Implements IPrintableExpression Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class PostgresDeleteExpression : Expression Constructors | Improve this Doc View Source PostgresDeleteExpression(TableExpression, IReadOnlyList<TableExpressionBase>, Nullable<SqlExpression>, ISet<String>) Creates a new instance of the PostgresDeleteExpression class. Declaration public PostgresDeleteExpression(TableExpression table, IReadOnlyList<TableExpressionBase> fromItems, SqlExpression? predicate, ISet<string> tags) Parameters Type Name Description TableExpression table IReadOnlyList < TableExpressionBase > fromItems Nullable < SqlExpression > predicate ISet < String > tags Properties | Improve this Doc View Source FromItems Additional tables which can be referenced in the predicate. Declaration public IReadOnlyList<TableExpressionBase> FromItems { get; } Property Value Type Description IReadOnlyList < TableExpressionBase > | Improve this Doc View Source NodeType Declaration public override ExpressionType NodeType { get; } Property Value Type Description ExpressionType | Improve this Doc View Source Predicate The WHERE predicate for the DELETE. Declaration public SqlExpression? Predicate { get; } Property Value Type Description Nullable < SqlExpression > | Improve this Doc View Source Table The tables that rows are to be deleted from. Declaration public TableExpression Table { get; } Property Value Type Description TableExpression | Improve this Doc View Source Tags The list of tags applied to this . Declaration public ISet<string> Tags { get; } Property Value Type Description ISet < String > | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration public void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source Update(Nullable<SqlExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public PostgresDeleteExpression Update(SqlExpression? predicate) Parameters Type Name Description Nullable < SqlExpression > predicate The Predicate property of the result. Returns Type Description PostgresDeleteExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IPrintableExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresFunctionExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresFunctionExpression.html",
    "title": "Class PostgresFunctionExpression | Npgsql Documentation",
    "keywords": "Class PostgresFunctionExpression Represents a SQL function call expression, supporting PostgreSQL's named parameter notation (e.g. make_interval(weeks => 2) and non-comma parameter separators (e.g. position(substring in string)). Inheritance Object PostgresFunctionExpression Implements IEquatable < PostgresFunctionExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresFunctionExpression : SqlFunctionExpression Constructors | Improve this Doc View Source PostgresFunctionExpression(String, IEnumerable<SqlExpression>, Nullable<IEnumerable<Nullable<String>>>, Nullable<IEnumerable<Nullable<String>>>, Boolean, Nullable<SqlExpression>, IReadOnlyList<OrderingExpression>, Boolean, IEnumerable<Boolean>, Type, Nullable<RelationalTypeMapping>) Creates a new instance of PostgresFunctionExpression . Declaration public PostgresFunctionExpression(string name, IEnumerable<SqlExpression> arguments, IEnumerable<string?>? argumentNames, IEnumerable<string?>? argumentSeparators, bool aggregateDistinct, SqlExpression? aggregatePredicate, IReadOnlyList<OrderingExpression> aggregateOrderings, bool nullable, IEnumerable<bool> argumentsPropagateNullability, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description String name IEnumerable < SqlExpression > arguments Nullable < IEnumerable < Nullable < String >>> argumentNames Nullable < IEnumerable < Nullable < String >>> argumentSeparators Boolean aggregateDistinct Nullable < SqlExpression > aggregatePredicate IReadOnlyList < OrderingExpression > aggregateOrderings Boolean nullable IEnumerable < Boolean > argumentsPropagateNullability Type type Nullable < RelationalTypeMapping > typeMapping Properties | Improve this Doc View Source AggregateOrderings For aggregate methods, contains the orderings to be applied. Declaration public virtual IReadOnlyList<OrderingExpression> AggregateOrderings { get; } Property Value Type Description IReadOnlyList < OrderingExpression > | Improve this Doc View Source AggregatePredicate For aggregate methods, contains the predicate to be applied (generated as the SQL FILTER clause). Declaration public virtual SqlExpression? AggregatePredicate { get; } Property Value Type Description Nullable < SqlExpression > | Improve this Doc View Source ArgumentNames List of argument names, corresponding position-wise to arguments in . Unnamed (positional) arguments must come first, so this list must contain possible nulls, followed by non-nulls. Declaration public virtual IReadOnlyList<string?> ArgumentNames { get; } Property Value Type Description IReadOnlyList < Nullable < String >> | Improve this Doc View Source Arguments Declaration public virtual IReadOnlyList<SqlExpression> Arguments { get; } Property Value Type Description IReadOnlyList < SqlExpression > | Improve this Doc View Source ArgumentSeparators List of non-comma separators between argument separators, in the order in which they appear between the arguments. null as well as positions beyond the end of the list mean regular commas. Declaration public virtual IReadOnlyList<string?> ArgumentSeparators { get; } Property Value Type Description IReadOnlyList < Nullable < String >> | Improve this Doc View Source ArgumentsPropagateNullability Declaration public virtual IReadOnlyList<bool> ArgumentsPropagateNullability { get; } Property Value Type Description IReadOnlyList < Boolean > | Improve this Doc View Source IsAggregateDistinct For aggregate methods, contains whether to apply distinct. Declaration public virtual bool IsAggregateDistinct { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ApplyTypeMapping(Nullable<RelationalTypeMapping>) Declaration public override SqlFunctionExpression ApplyTypeMapping(RelationalTypeMapping? typeMapping) Parameters Type Name Description Nullable < RelationalTypeMapping > typeMapping Returns Type Description SqlFunctionExpression | Improve this Doc View Source CreateWithArgumentSeparators(String, IEnumerable<SqlExpression>, IEnumerable<Nullable<String>>, Boolean, IEnumerable<Boolean>, Boolean, Type, Nullable<RelationalTypeMapping>) Creates an instance of PostgresFunctionExpression with argument separators. Declaration public static PostgresFunctionExpression CreateWithArgumentSeparators(string name, IEnumerable<SqlExpression> arguments, IEnumerable<string?> argumentSeparators, bool nullable, IEnumerable<bool> argumentsPropagateNullability, bool builtIn, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description String name IEnumerable < SqlExpression > arguments IEnumerable < Nullable < String >> argumentSeparators Boolean nullable IEnumerable < Boolean > argumentsPropagateNullability Boolean builtIn Type type Nullable < RelationalTypeMapping > typeMapping Returns Type Description PostgresFunctionExpression | Improve this Doc View Source CreateWithNamedArguments(String, IEnumerable<SqlExpression>, IEnumerable<Nullable<String>>, Boolean, IEnumerable<Boolean>, Boolean, Type, Nullable<RelationalTypeMapping>) Creates an instance of PostgresFunctionExpression with named arguments. Declaration public static PostgresFunctionExpression CreateWithNamedArguments(string name, IEnumerable<SqlExpression> arguments, IEnumerable<string?> argumentNames, bool nullable, IEnumerable<bool> argumentsPropagateNullability, bool builtIn, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description String name IEnumerable < SqlExpression > arguments IEnumerable < Nullable < String >> argumentNames Boolean nullable IEnumerable < Boolean > argumentsPropagateNullability Boolean builtIn Type type Nullable < RelationalTypeMapping > typeMapping Returns Type Description PostgresFunctionExpression | Improve this Doc View Source Equals(PostgresFunctionExpression) Declaration public virtual bool Equals(PostgresFunctionExpression other) Parameters Type Name Description PostgresFunctionExpression other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source Update(Nullable<SqlExpression>, Nullable<IReadOnlyList<SqlExpression>>) Declaration public override SqlFunctionExpression Update(SqlExpression? instance, IReadOnlyList<SqlExpression>? arguments) Parameters Type Name Description Nullable < SqlExpression > instance Nullable < IReadOnlyList < SqlExpression >> arguments Returns Type Description SqlFunctionExpression | Improve this Doc View Source UpdateAggregateComponents(Nullable<SqlExpression>, IReadOnlyList<OrderingExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresFunctionExpression UpdateAggregateComponents(SqlExpression? predicate, IReadOnlyList<OrderingExpression> orderings) Parameters Type Name Description Nullable < SqlExpression > predicate IReadOnlyList < OrderingExpression > orderings Returns Type Description PostgresFunctionExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IEquatable<>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresILikeExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresILikeExpression.html",
    "title": "Class PostgresILikeExpression | Npgsql Documentation",
    "keywords": "Class PostgresILikeExpression Represents a PostgreSQL ILIKE expression. Inheritance Object PostgresILikeExpression Implements IEquatable < PostgresILikeExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresILikeExpression : SqlExpression Constructors | Improve this Doc View Source PostgresILikeExpression(SqlExpression, SqlExpression, Nullable<SqlExpression>, Nullable<RelationalTypeMapping>) Constructs a PostgresILikeExpression . Declaration public PostgresILikeExpression(SqlExpression match, SqlExpression pattern, SqlExpression? escapeChar, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression match The expression to match. SqlExpression pattern The pattern to match. Nullable < SqlExpression > escapeChar The escape character to use in pattern . Nullable < RelationalTypeMapping > typeMapping The associated with the expression. Properties | Improve this Doc View Source EscapeChar The escape character to use in Pattern . Declaration public virtual SqlExpression? EscapeChar { get; } Property Value Type Description Nullable < SqlExpression > | Improve this Doc View Source Match The match expression. Declaration public virtual SqlExpression Match { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Pattern The pattern to match. Declaration public virtual SqlExpression Pattern { get; } Property Value Type Description SqlExpression Methods | Improve this Doc View Source Equals(PostgresILikeExpression) Declaration public virtual bool Equals(PostgresILikeExpression other) Parameters Type Name Description PostgresILikeExpression other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source Update(SqlExpression, SqlExpression, Nullable<SqlExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresILikeExpression Update(SqlExpression match, SqlExpression pattern, SqlExpression? escapeChar) Parameters Type Name Description SqlExpression match SqlExpression pattern Nullable < SqlExpression > escapeChar Returns Type Description PostgresILikeExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IEquatable<>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresJsonTraversalExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresJsonTraversalExpression.html",
    "title": "Class PostgresJsonTraversalExpression | Npgsql Documentation",
    "keywords": "Class PostgresJsonTraversalExpression Represents a PostgreSQL JSON operator traversing a JSON document with a path (i.e. x#>y or x#>>y) Inheritance Object PostgresJsonTraversalExpression Implements IEquatable < PostgresJsonTraversalExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresJsonTraversalExpression : SqlExpression Constructors | Improve this Doc View Source PostgresJsonTraversalExpression(SqlExpression, IReadOnlyList<SqlExpression>, Boolean, Type, Nullable<RelationalTypeMapping>) Constructs a PostgresJsonTraversalExpression . Declaration public PostgresJsonTraversalExpression(SqlExpression expression, IReadOnlyList<SqlExpression> path, bool returnsText, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression expression IReadOnlyList < SqlExpression > path Boolean returnsText Type type Nullable < RelationalTypeMapping > typeMapping Properties | Improve this Doc View Source Expression The match expression. Declaration public virtual SqlExpression Expression { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Path The pattern to match. Declaration public virtual IReadOnlyList<SqlExpression> Path { get; } Property Value Type Description IReadOnlyList < SqlExpression > | Improve this Doc View Source ReturnsText Whether the text-returning operator (x#>>y) or the object-returning operator (x#>y) is used. Declaration public virtual bool ReturnsText { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Append(SqlExpression) Appends an additional path component to this PostgresJsonTraversalExpression and returns the result. Declaration public virtual PostgresJsonTraversalExpression Append(SqlExpression pathComponent) Parameters Type Name Description SqlExpression pathComponent Returns Type Description PostgresJsonTraversalExpression | Improve this Doc View Source Equals(PostgresJsonTraversalExpression) Declaration public virtual bool Equals(PostgresJsonTraversalExpression other) Parameters Type Name Description PostgresJsonTraversalExpression other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source Update(SqlExpression, IReadOnlyList<SqlExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresJsonTraversalExpression Update(SqlExpression expression, IReadOnlyList<SqlExpression> path) Parameters Type Name Description SqlExpression expression IReadOnlyList < SqlExpression > path Returns Type Description PostgresJsonTraversalExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IEquatable<>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresNewArrayExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresNewArrayExpression.html",
    "title": "Class PostgresNewArrayExpression | Npgsql Documentation",
    "keywords": "Class PostgresNewArrayExpression Represents creating a new PostgreSQL array. Inheritance Object PostgresNewArrayExpression Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresNewArrayExpression : SqlExpression Constructors | Improve this Doc View Source PostgresNewArrayExpression(IReadOnlyList<SqlExpression>, Type, Nullable<RelationalTypeMapping>) Creates a new instance of the PostgresNewArrayExpression class. Declaration public PostgresNewArrayExpression(IReadOnlyList<SqlExpression> expressions, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description IReadOnlyList < SqlExpression > expressions The values to initialize the elements of the new array. Type type The of the expression. Nullable < RelationalTypeMapping > typeMapping The associated with the expression. Properties | Improve this Doc View Source Expressions The operator of this PostgreSQL binary operation. Declaration public virtual IReadOnlyList<SqlExpression> Expressions { get; } Property Value Type Description IReadOnlyList < SqlExpression > Methods | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source Update(IReadOnlyList<SqlExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresNewArrayExpression Update(IReadOnlyList<SqlExpression> expressions) Parameters Type Name Description IReadOnlyList < SqlExpression > expressions The values to initialize the elements of the new array. Returns Type Description PostgresNewArrayExpression This expression if no children changed, or an expression with the updated children. | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresRegexMatchExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresRegexMatchExpression.html",
    "title": "Class PostgresRegexMatchExpression | Npgsql Documentation",
    "keywords": "Class PostgresRegexMatchExpression Represents a PostgreSQL regular expression match expression. Inheritance Object PostgresRegexMatchExpression Implements IEquatable < PostgresRegexMatchExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresRegexMatchExpression : SqlExpression Constructors | Improve this Doc View Source PostgresRegexMatchExpression(SqlExpression, SqlExpression, RegexOptions, Nullable<RelationalTypeMapping>) Constructs a PostgresRegexMatchExpression . Declaration public PostgresRegexMatchExpression(SqlExpression match, SqlExpression pattern, RegexOptions options, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression match The expression to match. SqlExpression pattern The pattern to match. RegexOptions options The options for regular expression evaluation. Nullable < RelationalTypeMapping > typeMapping The type mapping for the expression. Properties | Improve this Doc View Source Match The match expression. Declaration public virtual SqlExpression Match { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Options The options for regular expression evaluation. Declaration public virtual RegexOptions Options { get; } Property Value Type Description RegexOptions | Improve this Doc View Source Pattern The pattern to match. Declaration public virtual SqlExpression Pattern { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source Equals(PostgresRegexMatchExpression) Declaration public virtual bool Equals(PostgresRegexMatchExpression other) Parameters Type Name Description PostgresRegexMatchExpression other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? other) Parameters Type Name Description Nullable < Object > other Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresRegexMatchExpression Update(SqlExpression match, SqlExpression pattern) Parameters Type Name Description SqlExpression match SqlExpression pattern Returns Type Description PostgresRegexMatchExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IEquatable<>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresRowValueExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresRowValueExpression.html",
    "title": "Class PostgresRowValueExpression | Npgsql Documentation",
    "keywords": "Class PostgresRowValueExpression An expression that represents a PostgreSQL-specific row value expression in a SQL tree. Inheritance Object PostgresRowValueExpression Implements IEquatable < PostgresRowValueExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresRowValueExpression : SqlExpression Remarks See the PostgreSQL docs for more information. Constructors | Improve this Doc View Source PostgresRowValueExpression(IReadOnlyList<SqlExpression>, Type, Nullable<RelationalTypeMapping>) Declaration public PostgresRowValueExpression(IReadOnlyList<SqlExpression> values, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description IReadOnlyList < SqlExpression > values Type type Nullable < RelationalTypeMapping > typeMapping Properties | Improve this Doc View Source Values The values of this PostgreSQL row value expression. Declaration public virtual IReadOnlyList<SqlExpression> Values { get; } Property Value Type Description IReadOnlyList < SqlExpression > Methods | Improve this Doc View Source Equals(PostgresRowValueExpression) Declaration public virtual bool Equals(PostgresRowValueExpression other) Parameters Type Name Description PostgresRowValueExpression other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source Update(IReadOnlyList<SqlExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresRowValueExpression Update(IReadOnlyList<SqlExpression> values) Parameters Type Name Description IReadOnlyList < SqlExpression > values Returns Type Description PostgresRowValueExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IEquatable<>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresUnknownBinaryExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresUnknownBinaryExpression.html",
    "title": "Class PostgresUnknownBinaryExpression | Npgsql Documentation",
    "keywords": "Class PostgresUnknownBinaryExpression A binary expression only to be used by plugins, since new expressions can only be added (and handled) within the provider itself. Allows defining the operator as a string within the expression, and has default (i.e. propagating) nullability semantics. All type mappings must be applied to the operands before the expression is constructed, since there's no inference logic for it in NpgsqlSqlExpressionFactory . Inheritance Object PostgresUnknownBinaryExpression Implements IEquatable < PostgresUnknownBinaryExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresUnknownBinaryExpression : SqlExpression Constructors | Improve this Doc View Source PostgresUnknownBinaryExpression(SqlExpression, SqlExpression, String, Type, Nullable<RelationalTypeMapping>) Constructs a PostgresUnknownBinaryExpression . Declaration public PostgresUnknownBinaryExpression(SqlExpression left, SqlExpression right, string binaryOperator, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression left The left-hand expression. SqlExpression right The right-hand expression. String binaryOperator The operator symbol acting on the expression. Type type The result type. Nullable < RelationalTypeMapping > typeMapping The type mapping for the expression. Properties | Improve this Doc View Source Left The left-hand expression. Declaration public virtual SqlExpression Left { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Operator The operator. Declaration public virtual string Operator { get; } Property Value Type Description String | Improve this Doc View Source Right The right-hand expression. Declaration public virtual SqlExpression Right { get; } Property Value Type Description SqlExpression Methods | Improve this Doc View Source Equals(PostgresUnknownBinaryExpression) Declaration public virtual bool Equals(PostgresUnknownBinaryExpression other) Parameters Type Name Description PostgresUnknownBinaryExpression other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PostgresUnknownBinaryExpression Update(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left SqlExpression right Returns Type Description PostgresUnknownBinaryExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor Returns Type Description Expression Implements IEquatable<>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.PostgresExpressionType.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.PostgresExpressionType.html",
    "title": "Enum PostgresExpressionType | Npgsql Documentation",
    "keywords": "Enum PostgresExpressionType PostgreSQL-specific expression node types. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum PostgresExpressionType : int Fields Name Description ContainedBy Represents a PostgreSQL contained-by operator. Contains Represents a PostgreSQL contains operator. Distance Represents a PostgreSQL operator for finding the distance between two things (e.g. 2D distance between two geometries, between timestamps...) JsonExists Represents a PostgreSQL operator for checking whether a key exists in a JSON document. JsonExistsAll Represents a PostgreSQL operator for checking whether all the given keys exist in a JSON document. JsonExistsAny Represents a PostgreSQL operator for checking whether any of multiple keys exists in a JSON document. LTreeFirstAncestor Represents a PostgreSQL operator for finding the first ancestor in an ltree type. LTreeFirstDescendent Represents a PostgreSQL operator for finding the first descendent in an ltree type. LTreeFirstMatches Represents a PostgreSQL operator for finding the first match in an ltree type. LTreeMatches Represents a PostgreSQL operator for matching in an ltree type. LTreeMatchesAny Represents a PostgreSQL operator for matching in an ltree type. NetworkContainedByOrEqual Represents a PostgreSQL network contained-by-or-equal operator. NetworkContainsOrContainedBy Represents a PostgreSQL network contains-or-contained-by operator. NetworkContainsOrEqual Represents a PostgreSQL network contains-or-equal operator. Overlaps Represents a PostgreSQL overlap operator. RangeDoesNotExtendLeftOf Represents a PostgreSQL operator for checking if a range does not extend to the left of another range. RangeDoesNotExtendRightOf Represents a PostgreSQL operator for checking if a range does not extend to the right of another range. RangeExcept Represents a PostgreSQL operator for performing an except operation between two ranges. RangeIntersect Represents a PostgreSQL operator for performing an intersection between two ranges. RangeIsAdjacentTo Represents a PostgreSQL operator for checking if a range is adjacent to another range. RangeIsStrictlyLeftOf Represents a PostgreSQL operator for checking if a range is strictly to the left of another range. RangeIsStrictlyRightOf Represents a PostgreSQL operator for checking if a range is strictly to the right of another range. RangeUnion Represents a PostgreSQL operator for performing a union between two ranges. TextSearchAnd Represents a PostgreSQL operator for logical AND within a full-text search match. TextSearchMatch Represents a PostgreSQL operator for performing a full-text search match. TextSearchOr Represents a PostgreSQL operator for logical OR within a full-text search match."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Classes NpgsqlAggregateMethodCallTranslatorProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlArrayTranslator Translates method and property calls on arrays/lists into their corresponding PostgreSQL operations. NpgsqlBigIntegerMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlByteArrayMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlConvertTranslator Translates methods defined on Convert into PostgreSQL CAST expressions. NpgsqlDateTimeMemberTranslator Provides translation services for members. NpgsqlDateTimeMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlFullTextSearchMethodTranslator Provides translations for PostgreSQL full-text search methods. NpgsqlFuzzyStringMatchMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlGeometryMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlGeometryMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlJsonDbFunctionsTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlJsonDomTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlJsonPocoTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlLikeTranslator Translates DbFunctionsExtensions.Like methods into PostgreSQL LIKE expressions. NpgsqlLTreeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlMathTranslator Provides translation services for static methods.. NpgsqlMemberTranslatorProvider A composite member translator that dispatches to multiple specialized member translators specific to Npgsql. NpgsqlMethodCallTranslatorProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlMiscAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteMemberTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetworkTranslator Provides translation services for operators and functions of PostgreSQL network typess (cidr, inet, macaddr, macaddr8). NpgsqlNewGuidTranslator Provides translation services for PostgreSQL UUID functions. NpgsqlObjectToStringTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryableAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRandomTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRangeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRegexIsMatchTranslator Translates Regex.IsMatch calls into PostgreSQL regex expressions for database-side processing. NpgsqlRowValueTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlStatisticsAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlStringMemberTranslator Translates string.Length to 'length(text)'. NpgsqlStringMethodTranslator Provides translation services for PostgreSQL string functions. NpgsqlTimeSpanMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTrigramsMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlAggregateMethodCallTranslatorProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlAggregateMethodCallTranslatorProvider.html",
    "title": "Class NpgsqlAggregateMethodCallTranslatorProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlAggregateMethodCallTranslatorProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlAggregateMethodCallTranslatorProvider Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlAggregateMethodCallTranslatorProvider : RelationalAggregateMethodCallTranslatorProvider Constructors | Improve this Doc View Source NpgsqlAggregateMethodCallTranslatorProvider(RelationalAggregateMethodCallTranslatorProviderDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlAggregateMethodCallTranslatorProvider(RelationalAggregateMethodCallTranslatorProviderDependencies dependencies) Parameters Type Name Description RelationalAggregateMethodCallTranslatorProviderDependencies dependencies"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlArrayTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlArrayTranslator.html",
    "title": "Class NpgsqlArrayTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayTranslator Translates method and property calls on arrays/lists into their corresponding PostgreSQL operations. Inheritance Object NpgsqlArrayTranslator Implements IMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayTranslator : IMethodCallTranslator Remarks https://www.postgresql.org/docs/current/static/functions-array.html Constructors | Improve this Doc View Source NpgsqlArrayTranslator(NpgsqlSqlExpressionFactory, NpgsqlJsonPocoTranslator, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlArrayTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, NpgsqlJsonPocoTranslator jsonPocoTranslator, bool useRedshift) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory NpgsqlJsonPocoTranslator jsonPocoTranslator Boolean useRedshift Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > Implements IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlBigIntegerMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlBigIntegerMemberTranslator.html",
    "title": "Class NpgsqlBigIntegerMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlBigIntegerMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlBigIntegerMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBigIntegerMemberTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlBigIntegerMemberTranslator(NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlBigIntegerMemberTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlByteArrayMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlByteArrayMethodTranslator.html",
    "title": "Class NpgsqlByteArrayMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlByteArrayMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlByteArrayMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlByteArrayMethodTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlByteArrayMethodTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlByteArrayMethodTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlConvertTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlConvertTranslator.html",
    "title": "Class NpgsqlConvertTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlConvertTranslator Translates methods defined on Convert into PostgreSQL CAST expressions. Inheritance Object NpgsqlConvertTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlConvertTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlConvertTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlConvertTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMemberTranslator.html",
    "title": "Class NpgsqlDateTimeMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTimeMemberTranslator Provides translation services for members. Inheritance Object NpgsqlDateTimeMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateTimeMemberTranslator : IMemberTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Improve this Doc View Source NpgsqlDateTimeMemberTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDateTimeMemberTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > | Improve this Doc View Source TranslateDateTimeOffset(SqlExpression, MemberInfo, Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? TranslateDateTimeOffset(SqlExpression instance, MemberInfo member, Type returnType) Parameters Type Name Description SqlExpression instance MemberInfo member Type returnType Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMethodTranslator.html",
    "title": "Class NpgsqlDateTimeMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTimeMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlDateTimeMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateTimeMethodTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlDateTimeMethodTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDateTimeMethodTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFullTextSearchMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFullTextSearchMethodTranslator.html",
    "title": "Class NpgsqlFullTextSearchMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlFullTextSearchMethodTranslator Provides translations for PostgreSQL full-text search methods. Inheritance Object NpgsqlFullTextSearchMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlFullTextSearchMethodTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlFullTextSearchMethodTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlFullTextSearchMethodTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFuzzyStringMatchMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFuzzyStringMatchMethodTranslator.html",
    "title": "Class NpgsqlFuzzyStringMatchMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlFuzzyStringMatchMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlFuzzyStringMatchMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlFuzzyStringMatchMethodTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlFuzzyStringMatchMethodTranslator(NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlFuzzyStringMatchMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMemberTranslator.html",
    "title": "Class NpgsqlGeometryMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlGeometryMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlGeometryMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlGeometryMemberTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlGeometryMemberTranslator(ISqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlGeometryMemberTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMethodTranslator.html",
    "title": "Class NpgsqlGeometryMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlGeometryMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlGeometryMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlGeometryMethodTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlGeometryMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlGeometryMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDbFunctionsTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDbFunctionsTranslator.html",
    "title": "Class NpgsqlJsonDbFunctionsTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonDbFunctionsTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlJsonDbFunctionsTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonDbFunctionsTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlJsonDbFunctionsTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlJsonDbFunctionsTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDomTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDomTranslator.html",
    "title": "Class NpgsqlJsonDomTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonDomTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlJsonDomTranslator Implements IMethodCallTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonDomTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlJsonDomTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlJsonDomTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonPocoTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonPocoTranslator.html",
    "title": "Class NpgsqlJsonPocoTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonPocoTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlJsonPocoTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonPocoTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlJsonPocoTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlJsonPocoTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > | Improve this Doc View Source TranslateArrayLength(SqlExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? TranslateArrayLength(SqlExpression expression) Parameters Type Name Description SqlExpression expression Returns Type Description Nullable < SqlExpression > | Improve this Doc View Source TranslateMemberAccess(SqlExpression, SqlExpression, Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? TranslateMemberAccess(SqlExpression instance, SqlExpression member, Type returnType) Parameters Type Name Description SqlExpression instance SqlExpression member Type returnType Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLikeTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLikeTranslator.html",
    "title": "Class NpgsqlLikeTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlLikeTranslator Translates DbFunctionsExtensions.Like methods into PostgreSQL LIKE expressions. Inheritance Object NpgsqlLikeTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLikeTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlLikeTranslator(NpgsqlSqlExpressionFactory) Initializes a new instance of the NpgsqlMathTranslator class. Declaration public NpgsqlLikeTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory The SQL expression factory to use when generating expressions.. Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLTreeTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLTreeTranslator.html",
    "title": "Class NpgsqlLTreeTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlLTreeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlLTreeTranslator Implements IMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLTreeTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlLTreeTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlLTreeTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > | Improve this Doc View Source VisitArrayMethodCall(NpgsqlSqlTranslatingExpressionVisitor, MethodInfo, ReadOnlyCollection<Expression>) Called directly from NpgsqlSqlTranslatingExpressionVisitor to translate LTree array-related constructs which cannot be translated in regular method translators, since they require accessing lambdas. Declaration public virtual Expression? VisitArrayMethodCall(NpgsqlSqlTranslatingExpressionVisitor sqlTranslatingExpressionVisitor, MethodInfo method, ReadOnlyCollection<Expression> arguments) Parameters Type Name Description NpgsqlSqlTranslatingExpressionVisitor sqlTranslatingExpressionVisitor MethodInfo method ReadOnlyCollection < Expression > arguments Returns Type Description Nullable < Expression > Implements IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMathTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMathTranslator.html",
    "title": "Class NpgsqlMathTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlMathTranslator Provides translation services for static methods.. Inheritance Object NpgsqlMathTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMathTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-math.html https://www.postgresql.org/docs/current/static/functions-conditional.html#FUNCTIONS-GREATEST-LEAST Constructors | Improve this Doc View Source NpgsqlMathTranslator(IRelationalTypeMappingSource, ISqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMathTranslator(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory IModel model Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMemberTranslatorProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMemberTranslatorProvider.html",
    "title": "Class NpgsqlMemberTranslatorProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlMemberTranslatorProvider A composite member translator that dispatches to multiple specialized member translators specific to Npgsql. Inheritance Object NpgsqlMemberTranslatorProvider Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMemberTranslatorProvider : RelationalMemberTranslatorProvider Constructors | Improve this Doc View Source NpgsqlMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies, IModel, IRelationalTypeMappingSource, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies, IModel model, IRelationalTypeMappingSource typeMappingSource, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description RelationalMemberTranslatorProviderDependencies dependencies IModel model IRelationalTypeMappingSource typeMappingSource INpgsqlSingletonOptions npgsqlSingletonOptions Properties | Improve this Doc View Source JsonPocoTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlJsonPocoTranslator JsonPocoTranslator { get; } Property Value Type Description NpgsqlJsonPocoTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMethodCallTranslatorProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMethodCallTranslatorProvider.html",
    "title": "Class NpgsqlMethodCallTranslatorProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlMethodCallTranslatorProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlMethodCallTranslatorProvider Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMethodCallTranslatorProvider : RelationalMethodCallTranslatorProvider Constructors | Improve this Doc View Source NpgsqlMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies, IModel, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies, IModel model, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description RelationalMethodCallTranslatorProviderDependencies dependencies IModel model INpgsqlSingletonOptions npgsqlSingletonOptions Properties | Improve this Doc View Source LTreeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlLTreeTranslator LTreeTranslator { get; } Property Value Type Description NpgsqlLTreeTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMiscAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMiscAggregateMethodTranslator.html",
    "title": "Class NpgsqlMiscAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlMiscAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlMiscAggregateMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMiscAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlMiscAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMiscAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin : IAggregateMethodCallTranslatorPlugin Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Improve this Doc View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IAggregateMethodCallTranslator> Translators { get; } Property Value Type Description IEnumerable < IAggregateMethodCallTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteAggregateMethodTranslator.html",
    "title": "Class NpgsqlNetTopologySuiteAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteAggregateMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMemberTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMemberTranslatorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteMemberTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteMemberTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteMemberTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteMemberTranslatorPlugin : IMemberTranslatorPlugin Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteMemberTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteMemberTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Improve this Doc View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IMemberTranslator> Translators { get; } Property Value Type Description IEnumerable < IMemberTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteMethodCallTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteMethodCallTranslatorPlugin : IMethodCallTranslatorPlugin Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteMethodCallTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteMethodCallTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Improve this Doc View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IMethodCallTranslator> Translators { get; } Property Value Type Description IEnumerable < IMethodCallTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetworkTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetworkTranslator.html",
    "title": "Class NpgsqlNetworkTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNetworkTranslator Provides translation services for operators and functions of PostgreSQL network typess (cidr, inet, macaddr, macaddr8). Inheritance Object NpgsqlNetworkTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlNetworkTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-net.html Constructors | Improve this Doc View Source NpgsqlNetworkTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetworkTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNewGuidTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNewGuidTranslator.html",
    "title": "Class NpgsqlNewGuidTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNewGuidTranslator Provides translation services for PostgreSQL UUID functions. Inheritance Object NpgsqlNewGuidTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlNewGuidTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/datatype-uuid.html Constructors | Improve this Doc View Source NpgsqlNewGuidTranslator(ISqlExpressionFactory, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNewGuidTranslator(ISqlExpressionFactory sqlExpressionFactory, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory INpgsqlSingletonOptions npgsqlSingletonOptions Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlObjectToStringTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlObjectToStringTranslator.html",
    "title": "Class NpgsqlObjectToStringTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlObjectToStringTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlObjectToStringTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlObjectToStringTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlObjectToStringTranslator(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlObjectToStringTranslator(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlQueryableAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlQueryableAggregateMethodTranslator.html",
    "title": "Class NpgsqlQueryableAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryableAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlQueryableAggregateMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryableAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlQueryableAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryableAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRandomTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRandomTranslator.html",
    "title": "Class NpgsqlRandomTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRandomTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlRandomTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRandomTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlRandomTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRandomTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRangeTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRangeTranslator.html",
    "title": "Class NpgsqlRangeTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRangeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlRangeTranslator Implements IMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRangeTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlRangeTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRangeTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory npgsqlSqlExpressionFactory, IModel model, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory npgsqlSqlExpressionFactory IModel model INpgsqlSingletonOptions npgsqlSingletonOptions Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression > Implements IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRegexIsMatchTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRegexIsMatchTranslator.html",
    "title": "Class NpgsqlRegexIsMatchTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRegexIsMatchTranslator Translates Regex.IsMatch calls into PostgreSQL regex expressions for database-side processing. Inheritance Object NpgsqlRegexIsMatchTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRegexIsMatchTranslator : IMethodCallTranslator Remarks http://www.postgresql.org/docs/current/static/functions-matching.html Constructors | Improve this Doc View Source NpgsqlRegexIsMatchTranslator(NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRegexIsMatchTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRowValueTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRowValueTranslator.html",
    "title": "Class NpgsqlRowValueTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRowValueTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlRowValueTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRowValueTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlRowValueTranslator(NpgsqlSqlExpressionFactory) Initializes a new instance of the NpgsqlRowValueTranslator class. Declaration public NpgsqlRowValueTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStatisticsAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStatisticsAggregateMethodTranslator.html",
    "title": "Class NpgsqlStatisticsAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlStatisticsAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlStatisticsAggregateMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStatisticsAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlStatisticsAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlStatisticsAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMemberTranslator.html",
    "title": "Class NpgsqlStringMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlStringMemberTranslator Translates string.Length to 'length(text)'. Inheritance Object NpgsqlStringMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStringMemberTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlStringMemberTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlStringMemberTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMethodTranslator.html",
    "title": "Class NpgsqlStringMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlStringMethodTranslator Provides translation services for PostgreSQL string functions. Inheritance Object NpgsqlStringMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStringMethodTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-string.html Constructors | Improve this Doc View Source NpgsqlStringMethodTranslator(NpgsqlTypeMappingSource, ISqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlStringMethodTranslator(NpgsqlTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description NpgsqlTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory IModel model Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTimeSpanMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTimeSpanMemberTranslator.html",
    "title": "Class NpgsqlTimeSpanMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlTimeSpanMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTimeSpanMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimeSpanMemberTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlTimeSpanMemberTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimeSpanMemberTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MemberInfo member Type returnType IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTrigramsMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTrigramsMethodTranslator.html",
    "title": "Class NpgsqlTrigramsMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlTrigramsMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTrigramsMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTrigramsMethodTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlTrigramsMethodTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTrigramsMethodTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Improve this Doc View Source Translate(Nullable<SqlExpression>, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description Nullable < SqlExpression > instance MethodInfo method IReadOnlyList < SqlExpression > arguments IDiagnosticsLogger < DbLoggerCategory.Query > logger Returns Type Description Nullable < SqlExpression >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query Classes NpgsqlSqlExpressionFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Classes NpgsqlCompiledQueryCacheKeyGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDeleteConvertingExpressionVisitor Converts the relational into a PG-specific PostgresDeleteExpression , which precisely models a DELETE statement in PostgreSQL. This is done to handle the PG-specific USING syntax for table joining. NpgsqlEvaluatableExpressionFilter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlParameterBasedSqlProcessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlParameterBasedSqlProcessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryableMethodTranslatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryableMethodTranslatingExpressionVisitorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryCompilationContext This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryCompilationContextFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQuerySqlGenerator The default query SQL generator for Npgsql. NpgsqlQuerySqlGeneratorFactory The default factory for Npgsql-specific query SQL generators. NpgsqlQueryTranslationPostprocessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryTranslationPostprocessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSqlNullabilityProcessor NpgsqlSqlTranslatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSqlTranslatingExpressionVisitorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlCompiledQueryCacheKeyGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlCompiledQueryCacheKeyGenerator.html",
    "title": "Class NpgsqlCompiledQueryCacheKeyGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlCompiledQueryCacheKeyGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlCompiledQueryCacheKeyGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCompiledQueryCacheKeyGenerator : RelationalCompiledQueryCacheKeyGenerator Constructors | Improve this Doc View Source NpgsqlCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies) Parameters Type Name Description CompiledQueryCacheKeyGeneratorDependencies dependencies RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies Methods | Improve this Doc View Source GenerateCacheKey(Expression, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override object GenerateCacheKey(Expression query, bool async) Parameters Type Name Description Expression query Boolean async Returns Type Description Object"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlDeleteConvertingExpressionVisitor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlDeleteConvertingExpressionVisitor.html",
    "title": "Class NpgsqlDeleteConvertingExpressionVisitor | Npgsql Documentation",
    "keywords": "Class NpgsqlDeleteConvertingExpressionVisitor Converts the relational into a PG-specific PostgresDeleteExpression , which precisely models a DELETE statement in PostgreSQL. This is done to handle the PG-specific USING syntax for table joining. Inheritance Object NpgsqlDeleteConvertingExpressionVisitor Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDeleteConvertingExpressionVisitor : ExpressionVisitor Methods | Improve this Doc View Source Process(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Expression Process(Expression node) Parameters Type Name Description Expression node Returns Type Description Expression | Improve this Doc View Source VisitDelete(DeleteExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitDelete(DeleteExpression deleteExpression) Parameters Type Name Description DeleteExpression deleteExpression Returns Type Description Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlEvaluatableExpressionFilter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlEvaluatableExpressionFilter.html",
    "title": "Class NpgsqlEvaluatableExpressionFilter | Npgsql Documentation",
    "keywords": "Class NpgsqlEvaluatableExpressionFilter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlEvaluatableExpressionFilter Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlEvaluatableExpressionFilter : RelationalEvaluatableExpressionFilter Constructors | Improve this Doc View Source NpgsqlEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies, RelationalEvaluatableExpressionFilterDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies, RelationalEvaluatableExpressionFilterDependencies relationalDependencies) Parameters Type Name Description EvaluatableExpressionFilterDependencies dependencies RelationalEvaluatableExpressionFilterDependencies relationalDependencies Methods | Improve this Doc View Source IsEvaluatableExpression(Expression, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool IsEvaluatableExpression(Expression expression, IModel model) Parameters Type Name Description Expression expression IModel model Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessor.html",
    "title": "Class NpgsqlParameterBasedSqlProcessor | Npgsql Documentation",
    "keywords": "Class NpgsqlParameterBasedSqlProcessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlParameterBasedSqlProcessor Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlParameterBasedSqlProcessor : RelationalParameterBasedSqlProcessor Constructors | Improve this Doc View Source NpgsqlParameterBasedSqlProcessor(RelationalParameterBasedSqlProcessorDependencies, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlParameterBasedSqlProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls) Parameters Type Name Description RelationalParameterBasedSqlProcessorDependencies dependencies Boolean useRelationalNulls Methods | Improve this Doc View Source Optimize(Expression, IReadOnlyDictionary<String, Nullable<Object>>, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression Optimize(Expression queryExpression, IReadOnlyDictionary<string, object?> parametersValues, out bool canCache) Parameters Type Name Description Expression queryExpression IReadOnlyDictionary < String , Nullable < Object >> parametersValues Boolean canCache Returns Type Description Expression | Improve this Doc View Source ProcessSqlNullability(Expression, IReadOnlyDictionary<String, Nullable<Object>>, out Boolean) Declaration protected override Expression ProcessSqlNullability(Expression selectExpression, IReadOnlyDictionary<string, object?> parametersValues, out bool canCache) Parameters Type Name Description Expression selectExpression IReadOnlyDictionary < String , Nullable < Object >> parametersValues Boolean canCache Returns Type Description Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessorFactory.html",
    "title": "Class NpgsqlParameterBasedSqlProcessorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlParameterBasedSqlProcessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlParameterBasedSqlProcessorFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlParameterBasedSqlProcessorFactory : IRelationalParameterBasedSqlProcessorFactory Constructors | Improve this Doc View Source NpgsqlParameterBasedSqlProcessorFactory(RelationalParameterBasedSqlProcessorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlParameterBasedSqlProcessorFactory(RelationalParameterBasedSqlProcessorDependencies dependencies) Parameters Type Name Description RelationalParameterBasedSqlProcessorDependencies dependencies Methods | Improve this Doc View Source Create(Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual RelationalParameterBasedSqlProcessor Create(bool useRelationalNulls) Parameters Type Name Description Boolean useRelationalNulls Returns Type Description RelationalParameterBasedSqlProcessor"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitor.html",
    "title": "Class NpgsqlQueryableMethodTranslatingExpressionVisitor | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryableMethodTranslatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlQueryableMethodTranslatingExpressionVisitor Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryableMethodTranslatingExpressionVisitor : RelationalQueryableMethodTranslatingExpressionVisitor Constructors | Improve this Doc View Source NpgsqlQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies, QueryCompilationContext) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryableMethodTranslatingExpressionVisitorDependencies dependencies RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies QueryCompilationContext queryCompilationContext Methods | Improve this Doc View Source IsValidSelectExpressionForExecuteDelete(SelectExpression, EntityShaperExpression, out Nullable<TableExpression>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsValidSelectExpressionForExecuteDelete(SelectExpression selectExpression, EntityShaperExpression entityShaperExpression, out TableExpression? tableExpression) Parameters Type Name Description SelectExpression selectExpression EntityShaperExpression entityShaperExpression Nullable < TableExpression > tableExpression Returns Type Description Boolean | Improve this Doc View Source IsValidSelectExpressionForExecuteUpdate(SelectExpression, EntityShaperExpression, out Nullable<TableExpression>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsValidSelectExpressionForExecuteUpdate(SelectExpression selectExpression, EntityShaperExpression entityShaperExpression, out TableExpression? tableExpression) Parameters Type Name Description SelectExpression selectExpression EntityShaperExpression entityShaperExpression Nullable < TableExpression > tableExpression Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitorFactory.html",
    "title": "Class NpgsqlQueryableMethodTranslatingExpressionVisitorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryableMethodTranslatingExpressionVisitorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlQueryableMethodTranslatingExpressionVisitorFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryableMethodTranslatingExpressionVisitorFactory : IQueryableMethodTranslatingExpressionVisitorFactory Constructors | Improve this Doc View Source NpgsqlQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies) Parameters Type Name Description QueryableMethodTranslatingExpressionVisitorDependencies dependencies RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies Properties | Improve this Doc View Source Dependencies This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; } Property Value Type Description QueryableMethodTranslatingExpressionVisitorDependencies | Improve this Doc View Source RelationalDependencies This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; } Property Value Type Description RelationalQueryableMethodTranslatingExpressionVisitorDependencies Methods | Improve this Doc View Source Create(QueryCompilationContext) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual QueryableMethodTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryCompilationContext queryCompilationContext Returns Type Description QueryableMethodTranslatingExpressionVisitor"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContext.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContext.html",
    "title": "Class NpgsqlQueryCompilationContext | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryCompilationContext This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlQueryCompilationContext Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryCompilationContext : RelationalQueryCompilationContext Constructors | Improve this Doc View Source NpgsqlQueryCompilationContext(QueryCompilationContextDependencies, RelationalQueryCompilationContextDependencies, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryCompilationContext(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies, bool async) Parameters Type Name Description QueryCompilationContextDependencies dependencies RelationalQueryCompilationContextDependencies relationalDependencies Boolean async Properties | Improve this Doc View Source IsBuffering This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool IsBuffering { get; } Property Value Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContextFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContextFactory.html",
    "title": "Class NpgsqlQueryCompilationContextFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryCompilationContextFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlQueryCompilationContextFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryCompilationContextFactory : IQueryCompilationContextFactory Constructors | Improve this Doc View Source NpgsqlQueryCompilationContextFactory(QueryCompilationContextDependencies, RelationalQueryCompilationContextDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryCompilationContextFactory(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies) Parameters Type Name Description QueryCompilationContextDependencies dependencies RelationalQueryCompilationContextDependencies relationalDependencies Methods | Improve this Doc View Source Create(Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual QueryCompilationContext Create(bool async) Parameters Type Name Description Boolean async Returns Type Description QueryCompilationContext"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGenerator.html",
    "title": "Class NpgsqlQuerySqlGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlQuerySqlGenerator The default query SQL generator for Npgsql. Inheritance Object NpgsqlQuerySqlGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQuerySqlGenerator : QuerySqlGenerator Constructors | Improve this Doc View Source NpgsqlQuerySqlGenerator(QuerySqlGeneratorDependencies, Boolean, Version) Declaration public NpgsqlQuerySqlGenerator(QuerySqlGeneratorDependencies dependencies, bool reverseNullOrderingEnabled, Version postgresVersion) Parameters Type Name Description QuerySqlGeneratorDependencies dependencies Boolean reverseNullOrderingEnabled Version postgresVersion Methods | Improve this Doc View Source GenerateLimitOffset(SelectExpression) Declaration protected override void GenerateLimitOffset(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression | Improve this Doc View Source GenerateRootCommand(Expression) Declaration protected override void GenerateRootCommand(Expression queryExpression) Parameters Type Name Description Expression queryExpression | Improve this Doc View Source GenerateSetOperationOperand(SetOperationBase, SelectExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void GenerateSetOperationOperand(SetOperationBase setOperation, SelectExpression operand) Parameters Type Name Description SetOperationBase setOperation SelectExpression operand | Improve this Doc View Source GenerateTop(SelectExpression) Declaration protected override void GenerateTop(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression | Improve this Doc View Source GetOperator(SqlBinaryExpression) Declaration protected override string GetOperator(SqlBinaryExpression e) Parameters Type Name Description SqlBinaryExpression e Returns Type Description String | Improve this Doc View Source VisitArrayAll(PostgresAllExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Expression VisitArrayAll(PostgresAllExpression expression) Parameters Type Name Description PostgresAllExpression expression Returns Type Description Expression | Improve this Doc View Source VisitArrayAny(PostgresAnyExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Expression VisitArrayAny(PostgresAnyExpression expression) Parameters Type Name Description PostgresAnyExpression expression Returns Type Description Expression | Improve this Doc View Source VisitArrayIndex(PostgresArrayIndexExpression) Produces SQL array index expression (e.g. arr[1]). Declaration public virtual Expression VisitArrayIndex(PostgresArrayIndexExpression expression) Parameters Type Name Description PostgresArrayIndexExpression expression Returns Type Description Expression | Improve this Doc View Source VisitArrayIndex(SqlBinaryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitArrayIndex(SqlBinaryExpression expression) Parameters Type Name Description SqlBinaryExpression expression Returns Type Description Expression | Improve this Doc View Source VisitCollate(CollateExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitCollate(CollateExpression collateExpresion) Parameters Type Name Description CollateExpression collateExpresion Returns Type Description Expression | Improve this Doc View Source VisitCrossApply(CrossApplyExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitCrossApply(CrossApplyExpression crossApplyExpression) Parameters Type Name Description CrossApplyExpression crossApplyExpression Returns Type Description Expression | Improve this Doc View Source VisitDelete(DeleteExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitDelete(DeleteExpression deleteExpression) Parameters Type Name Description DeleteExpression deleteExpression Returns Type Description Expression | Improve this Doc View Source VisitExtension(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitExtension(Expression extensionExpression) Parameters Type Name Description Expression extensionExpression Returns Type Description Expression | Improve this Doc View Source VisitILike(PostgresILikeExpression) Visits the children of an PostgresILikeExpression . Declaration public virtual Expression VisitILike(PostgresILikeExpression likeExpression) Parameters Type Name Description PostgresILikeExpression likeExpression The expression. Returns Type Description Expression An . | Improve this Doc View Source VisitJsonPathTraversal(PostgresJsonTraversalExpression) Visits the children of an PostgresJsonTraversalExpression . Declaration public virtual Expression VisitJsonPathTraversal(PostgresJsonTraversalExpression expression) Parameters Type Name Description PostgresJsonTraversalExpression expression The expression. Returns Type Description Expression An . | Improve this Doc View Source VisitOrdering(OrderingExpression) Declaration protected override Expression VisitOrdering(OrderingExpression ordering) Parameters Type Name Description OrderingExpression ordering Returns Type Description Expression | Improve this Doc View Source VisitOuterApply(OuterApplyExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitOuterApply(OuterApplyExpression outerApplyExpression) Parameters Type Name Description OuterApplyExpression outerApplyExpression Returns Type Description Expression | Improve this Doc View Source VisitPostgresBinary(PostgresBinaryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitPostgresBinary(PostgresBinaryExpression binaryExpression) Parameters Type Name Description PostgresBinaryExpression binaryExpression Returns Type Description Expression | Improve this Doc View Source VisitPostgresDelete(PostgresDeleteExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitPostgresDelete(PostgresDeleteExpression pgDeleteExpression) Parameters Type Name Description PostgresDeleteExpression pgDeleteExpression Returns Type Description Expression | Improve this Doc View Source VisitPostgresFunction(PostgresFunctionExpression) Visits the children of a PostgresFunctionExpression . Declaration public virtual Expression VisitPostgresFunction(PostgresFunctionExpression e) Parameters Type Name Description PostgresFunctionExpression e The expression. Returns Type Description Expression An . | Improve this Doc View Source VisitPostgresNewArray(PostgresNewArrayExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitPostgresNewArray(PostgresNewArrayExpression postgresNewArrayExpression) Parameters Type Name Description PostgresNewArrayExpression postgresNewArrayExpression Returns Type Description Expression | Improve this Doc View Source VisitRegexMatch(PostgresRegexMatchExpression) Visits the children of a PostgresRegexMatchExpression . Declaration public virtual Expression VisitRegexMatch(PostgresRegexMatchExpression expression) Parameters Type Name Description PostgresRegexMatchExpression expression The expression. Returns Type Description Expression An . Remarks See: http://www.postgresql.org/docs/current/static/functions-matching.html | Improve this Doc View Source VisitRowValue(PostgresRowValueExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Expression VisitRowValue(PostgresRowValueExpression rowValueExpression) Parameters Type Name Description PostgresRowValueExpression rowValueExpression Returns Type Description Expression | Improve this Doc View Source VisitSqlBinary(SqlBinaryExpression) Declaration protected override Expression VisitSqlBinary(SqlBinaryExpression binary) Parameters Type Name Description SqlBinaryExpression binary Returns Type Description Expression | Improve this Doc View Source VisitSqlUnary(SqlUnaryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression) Parameters Type Name Description SqlUnaryExpression sqlUnaryExpression Returns Type Description Expression | Improve this Doc View Source VisitUnknownBinary(PostgresUnknownBinaryExpression) Visits the children of a PostgresUnknownBinaryExpression . Declaration public virtual Expression VisitUnknownBinary(PostgresUnknownBinaryExpression unknownBinaryExpression) Parameters Type Name Description PostgresUnknownBinaryExpression unknownBinaryExpression The expression. Returns Type Description Expression An . | Improve this Doc View Source VisitUpdate(UpdateExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitUpdate(UpdateExpression updateExpression) Parameters Type Name Description UpdateExpression updateExpression Returns Type Description Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGeneratorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGeneratorFactory.html",
    "title": "Class NpgsqlQuerySqlGeneratorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQuerySqlGeneratorFactory The default factory for Npgsql-specific query SQL generators. Inheritance Object NpgsqlQuerySqlGeneratorFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQuerySqlGeneratorFactory : IQuerySqlGeneratorFactory Constructors | Improve this Doc View Source NpgsqlQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description QuerySqlGeneratorDependencies dependencies INpgsqlSingletonOptions npgsqlSingletonOptions Methods | Improve this Doc View Source Create() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual QuerySqlGenerator Create() Returns Type Description QuerySqlGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessor.html",
    "title": "Class NpgsqlQueryTranslationPostprocessor | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryTranslationPostprocessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlQueryTranslationPostprocessor Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryTranslationPostprocessor : RelationalQueryTranslationPostprocessor Constructors | Improve this Doc View Source NpgsqlQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies, RelationalQueryTranslationPostprocessorDependencies, QueryCompilationContext) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryTranslationPostprocessorDependencies dependencies RelationalQueryTranslationPostprocessorDependencies relationalDependencies QueryCompilationContext queryCompilationContext Methods | Improve this Doc View Source Process(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression Process(Expression query) Parameters Type Name Description Expression query Returns Type Description Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessorFactory.html",
    "title": "Class NpgsqlQueryTranslationPostprocessorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryTranslationPostprocessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlQueryTranslationPostprocessorFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryTranslationPostprocessorFactory : IQueryTranslationPostprocessorFactory Constructors | Improve this Doc View Source NpgsqlQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies, RelationalQueryTranslationPostprocessorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies) Parameters Type Name Description QueryTranslationPostprocessorDependencies dependencies RelationalQueryTranslationPostprocessorDependencies relationalDependencies Properties | Improve this Doc View Source Dependencies Dependencies for this service. Declaration protected virtual QueryTranslationPostprocessorDependencies Dependencies { get; } Property Value Type Description QueryTranslationPostprocessorDependencies | Improve this Doc View Source RelationalDependencies Relational provider-specific dependencies for this service. Declaration protected virtual RelationalQueryTranslationPostprocessorDependencies RelationalDependencies { get; } Property Value Type Description RelationalQueryTranslationPostprocessorDependencies Methods | Improve this Doc View Source Create(QueryCompilationContext) Declaration public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryCompilationContext queryCompilationContext Returns Type Description QueryTranslationPostprocessor"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor.html",
    "title": "Class NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor | Npgsql Documentation",
    "keywords": "Class NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor : ExpressionVisitor Methods | Improve this Doc View Source VisitExtension(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitExtension(Expression extensionExpression) Parameters Type Name Description Expression extensionExpression Returns Type Description Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlNullabilityProcessor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlNullabilityProcessor.html",
    "title": "Class NpgsqlSqlNullabilityProcessor | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlNullabilityProcessor Inheritance Object NpgsqlSqlNullabilityProcessor Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlNullabilityProcessor : SqlNullabilityProcessor Constructors | Improve this Doc View Source NpgsqlSqlNullabilityProcessor(RelationalParameterBasedSqlProcessorDependencies, Boolean) Creates a new instance of the NpgsqlSqlNullabilityProcessor class. Declaration public NpgsqlSqlNullabilityProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls) Parameters Type Name Description RelationalParameterBasedSqlProcessorDependencies dependencies Parameter object containing dependencies for this class. Boolean useRelationalNulls A bool value indicating whether relational null semantics are in use. Methods | Improve this Doc View Source VisitAll(PostgresAllExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitAll(PostgresAllExpression allExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresAllExpression allExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitAny(PostgresAnyExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitAny(PostgresAnyExpression anyExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresAnyExpression anyExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitArrayIndex(PostgresArrayIndexExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitArrayIndex(PostgresArrayIndexExpression arrayIndexExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresArrayIndexExpression arrayIndexExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitCustomSqlExpression(SqlExpression, Boolean, out Boolean) Declaration protected override SqlExpression VisitCustomSqlExpression(SqlExpression sqlExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description SqlExpression sqlExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitILike(PostgresILikeExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitILike(PostgresILikeExpression iLikeExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresILikeExpression iLikeExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitJsonTraversal(PostgresJsonTraversalExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitJsonTraversal(PostgresJsonTraversalExpression jsonTraversalExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresJsonTraversalExpression jsonTraversalExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitNewArray(PostgresNewArrayExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitNewArray(PostgresNewArrayExpression newArrayExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresNewArrayExpression newArrayExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitPostgresBinary(PostgresBinaryExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitPostgresBinary(PostgresBinaryExpression binaryExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresBinaryExpression binaryExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitRegexMatch(PostgresRegexMatchExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitRegexMatch(PostgresRegexMatchExpression regexMatchExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresRegexMatchExpression regexMatchExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitRowValueExpression(PostgresRowValueExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitRowValueExpression(PostgresRowValueExpression rowValueExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresRowValueExpression rowValueExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitSqlBinary(SqlBinaryExpression, Boolean, out Boolean) Declaration protected override SqlExpression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description SqlBinaryExpression sqlBinaryExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitSqlFunction(SqlFunctionExpression, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override SqlExpression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description SqlFunctionExpression sqlFunctionExpression Boolean allowOptimizedExpansion Boolean nullable Returns Type Description SqlExpression | Improve this Doc View Source VisitUnknownBinary(PostgresUnknownBinaryExpression, Boolean, out Boolean) Visits a PostgresUnknownBinaryExpression and computes its nullability. Declaration protected virtual SqlExpression VisitUnknownBinary(PostgresUnknownBinaryExpression unknownBinaryExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PostgresUnknownBinaryExpression unknownBinaryExpression A PostgresUnknownBinaryExpression expression to visit. Boolean allowOptimizedExpansion A bool value indicating if optimized expansion which considers null value as false value is allowed. Boolean nullable A bool value indicating whether the sql expression is nullable. Returns Type Description SqlExpression An optimized sql expression."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitor.html",
    "title": "Class NpgsqlSqlTranslatingExpressionVisitor | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlTranslatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlSqlTranslatingExpressionVisitor Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlTranslatingExpressionVisitor : RelationalSqlTranslatingExpressionVisitor Constructors | Improve this Doc View Source NpgsqlSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies, QueryCompilationContext, QueryableMethodTranslatingExpressionVisitor) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor) Parameters Type Name Description RelationalSqlTranslatingExpressionVisitorDependencies dependencies QueryCompilationContext queryCompilationContext QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor Methods | Improve this Doc View Source VisitBinary(BinaryExpression) Declaration protected override Expression VisitBinary(BinaryExpression binaryExpression) Parameters Type Name Description BinaryExpression binaryExpression Returns Type Description Expression | Improve this Doc View Source VisitMethodCall(MethodCallExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitMethodCall(MethodCallExpression methodCall) Parameters Type Name Description MethodCallExpression methodCall Returns Type Description Expression | Improve this Doc View Source VisitNew(NewExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitNew(NewExpression newExpression) Parameters Type Name Description NewExpression newExpression Returns Type Description Expression | Improve this Doc View Source VisitNewArray(NewArrayExpression) Declaration protected override Expression VisitNewArray(NewArrayExpression newArrayExpression) Parameters Type Name Description NewArrayExpression newArrayExpression Returns Type Description Expression | Improve this Doc View Source VisitUnary(UnaryExpression) Declaration protected override Expression VisitUnary(UnaryExpression unaryExpression) Parameters Type Name Description UnaryExpression unaryExpression Returns Type Description Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitorFactory.html",
    "title": "Class NpgsqlSqlTranslatingExpressionVisitorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlTranslatingExpressionVisitorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlSqlTranslatingExpressionVisitorFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlTranslatingExpressionVisitorFactory : IRelationalSqlTranslatingExpressionVisitorFactory Constructors | Improve this Doc View Source NpgsqlSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies) Parameters Type Name Description RelationalSqlTranslatingExpressionVisitorDependencies dependencies Methods | Improve this Doc View Source Create(QueryCompilationContext, QueryableMethodTranslatingExpressionVisitor) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual RelationalSqlTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor) Parameters Type Name Description QueryCompilationContext queryCompilationContext QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor Returns Type Description RelationalSqlTranslatingExpressionVisitor"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory.html",
    "title": "Class NpgsqlSqlExpressionFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlExpressionFactory Inheritance Object NpgsqlSqlExpressionFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlExpressionFactory : SqlExpressionFactory Constructors | Improve this Doc View Source NpgsqlSqlExpressionFactory(SqlExpressionFactoryDependencies) Creates a new instance of the NpgsqlSqlExpressionFactory class. Declaration public NpgsqlSqlExpressionFactory(SqlExpressionFactoryDependencies dependencies) Parameters Type Name Description SqlExpressionFactoryDependencies dependencies Parameter object containing dependencies for this class. Methods | Improve this Doc View Source AggregateFunction(String, IEnumerable<SqlExpression>, EnumerableExpression, Boolean, IEnumerable<Boolean>, Type, Nullable<RelationalTypeMapping>) Creates a new PostgresFunctionExpression for a PostgreSQL aggregate function call.. Declaration public virtual PostgresFunctionExpression AggregateFunction(string name, IEnumerable<SqlExpression> arguments, EnumerableExpression aggregateEnumerableExpression, bool nullable, IEnumerable<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description String name IEnumerable < SqlExpression > arguments EnumerableExpression aggregateEnumerableExpression Boolean nullable IEnumerable < Boolean > argumentsPropagateNullability Type returnType Nullable < RelationalTypeMapping > typeMapping Returns Type Description PostgresFunctionExpression | Improve this Doc View Source All(SqlExpression, SqlExpression, PostgresAllOperatorType) Creates a new PostgresAllExpression , corresponding to the PostgreSQL-specific LIKE ALL operator. Declaration public virtual PostgresAllExpression All(SqlExpression item, SqlExpression array, PostgresAllOperatorType operatorType) Parameters Type Name Description SqlExpression item SqlExpression array PostgresAllOperatorType operatorType Returns Type Description PostgresAllExpression | Improve this Doc View Source Any(SqlExpression, SqlExpression, PostgresAnyOperatorType) Creates a new PostgresAnyExpression , corresponding to the PostgreSQL-specific = ANY operator. Declaration public virtual PostgresAnyExpression Any(SqlExpression item, SqlExpression array, PostgresAnyOperatorType operatorType) Parameters Type Name Description SqlExpression item SqlExpression array PostgresAnyOperatorType operatorType Returns Type Description PostgresAnyExpression | Improve this Doc View Source ApplyTypeMapping(Nullable<SqlExpression>, Nullable<RelationalTypeMapping>) Declaration public override SqlExpression? ApplyTypeMapping(SqlExpression? sqlExpression, RelationalTypeMapping? typeMapping) Parameters Type Name Description Nullable < SqlExpression > sqlExpression Nullable < RelationalTypeMapping > typeMapping Returns Type Description Nullable < SqlExpression > | Improve this Doc View Source ArrayIndex(SqlExpression, SqlExpression, Nullable<RelationalTypeMapping>) Creates a new PostgresArrayIndexExpression , corresponding to the PostgreSQL-specific array subscripting operator. Declaration public virtual PostgresArrayIndexExpression ArrayIndex(SqlExpression array, SqlExpression index, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression array SqlExpression index Nullable < RelationalTypeMapping > typeMapping Returns Type Description PostgresArrayIndexExpression | Improve this Doc View Source AtTimeZone(SqlExpression, SqlExpression, Type, Nullable<RelationalTypeMapping>) Creates a new , for converting a timestamp to another time zone. Declaration public virtual AtTimeZoneExpression AtTimeZone(SqlExpression timestamp, SqlExpression timeZone, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression timestamp SqlExpression timeZone Type type Nullable < RelationalTypeMapping > typeMapping Returns Type Description AtTimeZoneExpression | Improve this Doc View Source AtUtc(SqlExpression, Nullable<RelationalTypeMapping>) Creates a new , for converting a timestamp to UTC. Declaration public virtual AtTimeZoneExpression AtUtc(SqlExpression timestamp, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression timestamp Nullable < RelationalTypeMapping > typeMapping Returns Type Description AtTimeZoneExpression | Improve this Doc View Source ContainedBy(SqlExpression, SqlExpression) Creates a new PostgresBinaryExpression , for checking whether one value is contained by another. Declaration public virtual PostgresBinaryExpression ContainedBy(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left SqlExpression right Returns Type Description PostgresBinaryExpression | Improve this Doc View Source Contains(SqlExpression, SqlExpression) Creates a new PostgresBinaryExpression , for checking whether one value contains another. Declaration public virtual PostgresBinaryExpression Contains(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left SqlExpression right Returns Type Description PostgresBinaryExpression | Improve this Doc View Source GenerateOneBasedIndexExpression(SqlExpression) PostgreSQL array indexing is 1-based. If the index happens to be a constant, just increment it. Otherwise, append a +1 in the SQL. Declaration public virtual SqlExpression GenerateOneBasedIndexExpression(SqlExpression expression) Parameters Type Name Description SqlExpression expression Returns Type Description SqlExpression | Improve this Doc View Source ILike(SqlExpression, SqlExpression, Nullable<SqlExpression>) Creates a new , for performing a PostgreSQL-specific case-insensitive string match ( ILIKE ). Declaration public virtual PostgresILikeExpression ILike(SqlExpression match, SqlExpression pattern, SqlExpression? escapeChar = null) Parameters Type Name Description SqlExpression match SqlExpression pattern Nullable < SqlExpression > escapeChar Returns Type Description PostgresILikeExpression | Improve this Doc View Source JsonTraversal(SqlExpression, IEnumerable<SqlExpression>, Boolean, Type, Nullable<RelationalTypeMapping>) Creates a new PostgresJsonTraversalExpression , for traversing inside a JSON document. Declaration public virtual PostgresJsonTraversalExpression JsonTraversal(SqlExpression expression, IEnumerable<SqlExpression> path, bool returnsText, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression expression IEnumerable < SqlExpression > path Boolean returnsText Type type Nullable < RelationalTypeMapping > typeMapping Returns Type Description PostgresJsonTraversalExpression | Improve this Doc View Source JsonTraversal(SqlExpression, Boolean, Type, Nullable<RelationalTypeMapping>) Creates a new PostgresJsonTraversalExpression , for traversing inside a JSON document. Declaration public virtual PostgresJsonTraversalExpression JsonTraversal(SqlExpression expression, bool returnsText, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression expression Boolean returnsText Type type Nullable < RelationalTypeMapping > typeMapping Returns Type Description PostgresJsonTraversalExpression | Improve this Doc View Source MakeBinary(ExpressionType, SqlExpression, SqlExpression, Nullable<RelationalTypeMapping>) Declaration public override SqlBinaryExpression? MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping? typeMapping) Parameters Type Name Description ExpressionType operatorType SqlExpression left SqlExpression right Nullable < RelationalTypeMapping > typeMapping Returns Type Description Nullable < SqlBinaryExpression > | Improve this Doc View Source MakePostgresBinary(PostgresExpressionType, SqlExpression, SqlExpression, Nullable<RelationalTypeMapping>) Creates a new PostgresBinaryExpression with the given arguments. Declaration public virtual PostgresBinaryExpression MakePostgresBinary(PostgresExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description PostgresExpressionType operatorType An ExpressionType representing SQL unary operator. SqlExpression left The left operand of binary operation. SqlExpression right The right operand of binary operation. Nullable < RelationalTypeMapping > typeMapping A type mapping to be assigned to the created expression. Returns Type Description PostgresBinaryExpression A PostgresBinaryExpression with the given arguments. | Improve this Doc View Source NewArray(IReadOnlyList<SqlExpression>, Type, Nullable<RelationalTypeMapping>) Creates a new PostgresNewArrayExpression , for creating a new PostgreSQL array. Declaration public virtual PostgresNewArrayExpression NewArray(IReadOnlyList<SqlExpression> expressions, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description IReadOnlyList < SqlExpression > expressions Type type Nullable < RelationalTypeMapping > typeMapping Returns Type Description PostgresNewArrayExpression | Improve this Doc View Source NewArrayOrConstant(IReadOnlyList<SqlExpression>, Type, Nullable<RelationalTypeMapping>) Constructs either a PostgresNewArrayExpression , or, if all provided expressions are constants, a single for the entire array. Declaration public virtual SqlExpression NewArrayOrConstant(IReadOnlyList<SqlExpression> expressions, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description IReadOnlyList < SqlExpression > expressions Type type Nullable < RelationalTypeMapping > typeMapping Returns Type Description SqlExpression | Improve this Doc View Source Overlaps(SqlExpression, SqlExpression) Creates a new PostgresBinaryExpression , for checking whether one value overlaps with another. Declaration public virtual PostgresBinaryExpression Overlaps(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left SqlExpression right Returns Type Description PostgresBinaryExpression | Improve this Doc View Source RegexMatch(SqlExpression, SqlExpression, RegexOptions) Creates a new PostgresRegexMatchExpression , corresponding to the PostgreSQL-specific ~ operator. Declaration public virtual PostgresRegexMatchExpression RegexMatch(SqlExpression match, SqlExpression pattern, RegexOptions options) Parameters Type Name Description SqlExpression match SqlExpression pattern RegexOptions options Returns Type Description PostgresRegexMatchExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Classes NpgsqlCodeGenerator The default code generator for Npgsql. NpgsqlDatabaseModelFactory The default database model factory for Npgsql."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlCodeGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlCodeGenerator.html",
    "title": "Class NpgsqlCodeGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlCodeGenerator The default code generator for Npgsql. Inheritance Object NpgsqlCodeGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCodeGenerator : ProviderCodeGenerator Constructors | Improve this Doc View Source NpgsqlCodeGenerator(ProviderCodeGeneratorDependencies) Constructs an instance of the NpgsqlCodeGenerator class. Declaration public NpgsqlCodeGenerator(ProviderCodeGeneratorDependencies dependencies) Parameters Type Name Description ProviderCodeGeneratorDependencies dependencies The dependencies. Methods | Improve this Doc View Source GenerateUseProvider(String, Nullable<MethodCallCodeFragment>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment? providerOptions) Parameters Type Name Description String connectionString Nullable < MethodCallCodeFragment > providerOptions Returns Type Description MethodCallCodeFragment"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlDatabaseModelFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlDatabaseModelFactory.html",
    "title": "Class NpgsqlDatabaseModelFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseModelFactory The default database model factory for Npgsql. Inheritance Object NpgsqlDatabaseModelFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDatabaseModelFactory : DatabaseModelFactory Constructors | Improve this Doc View Source NpgsqlDatabaseModelFactory(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>) Constructs an instance of the NpgsqlDatabaseModelFactory class. Declaration public NpgsqlDatabaseModelFactory(IDiagnosticsLogger<DbLoggerCategory.Scaffolding> logger) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > logger Methods | Improve this Doc View Source Create(DbConnection, DatabaseModelFactoryOptions) Declaration public override DatabaseModel Create(DbConnection dbConnection, DatabaseModelFactoryOptions options) Parameters Type Name Description DbConnection dbConnection DatabaseModelFactoryOptions options Returns Type Description DatabaseModel | Improve this Doc View Source Create(String, DatabaseModelFactoryOptions) Declaration public override DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options) Parameters Type Name Description String connectionString DatabaseModelFactoryOptions options Returns Type Description DatabaseModel"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateIntervalMultirangeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateIntervalMultirangeMapping.html",
    "title": "Class DateIntervalMultirangeMapping | Npgsql Documentation",
    "keywords": "Class DateIntervalMultirangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping DateIntervalMultirangeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DateIntervalMultirangeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source DateIntervalMultirangeMapping(RelationalTypeMappingParameters, DateIntervalRangeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected DateIntervalMultirangeMapping(RelationalTypeMappingParameters parameters, DateIntervalRangeMapping dateIntervalRangeMapping) Parameters Type Name Description RelationalTypeMappingParameters parameters DateIntervalRangeMapping dateIntervalRangeMapping | Improve this Doc View Source DateIntervalMultirangeMapping(Type, DateIntervalRangeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public DateIntervalMultirangeMapping(Type clrType, DateIntervalRangeMapping dateIntervalRangeMapping) Parameters Type Name Description Type clrType DateIntervalRangeMapping dateIntervalRangeMapping Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateIntervalRangeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateIntervalRangeMapping.html",
    "title": "Class DateIntervalRangeMapping | Npgsql Documentation",
    "keywords": "Class DateIntervalRangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping DateIntervalRangeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DateIntervalRangeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source DateIntervalRangeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public DateIntervalRangeMapping() | Improve this Doc View Source DateIntervalRangeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected DateIntervalRangeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateMapping.html",
    "title": "Class DateMapping | Npgsql Documentation",
    "keywords": "Class DateMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping DateMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DateMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source DateMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public DateMapping() | Improve this Doc View Source DateMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected DateMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DurationIntervalMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DurationIntervalMapping.html",
    "title": "Class DurationIntervalMapping | Npgsql Documentation",
    "keywords": "Class DurationIntervalMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping DurationIntervalMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DurationIntervalMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source DurationIntervalMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public DurationIntervalMapping() | Improve this Doc View Source DurationIntervalMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected DurationIntervalMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Classes DateIntervalMultirangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. DateIntervalRangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. DateMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. DurationIntervalMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. IntervalMultirangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. IntervalRangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. LegacyTimestampInstantMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDatabaseCreator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlExecutionStrategy This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlExecutionStrategyFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlGeometryTypeMapping<TGeometry> This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteTypeMappingSourcePlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeTypeMappingSourcePlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRelationalConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSqlGenerationHelper This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTransientExceptionDetector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTypeMappingSource This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. PeriodIntervalMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimestampLocalDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimestampTzInstantMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimestampTzOffsetDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimestampTzZonedDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimeTzMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Interfaces INpgsqlRelationalConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.INpgsqlRelationalConnection.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.INpgsqlRelationalConnection.html",
    "title": "Interface INpgsqlRelationalConnection | Npgsql Documentation",
    "keywords": "Interface INpgsqlRelationalConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlRelationalConnection Methods | Improve this Doc View Source CloneWith(String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration NpgsqlRelationalConnection CloneWith(string connectionString) Parameters Type Name Description String connectionString Returns Type Description NpgsqlRelationalConnection | Improve this Doc View Source CreateAdminConnection() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration INpgsqlRelationalConnection CreateAdminConnection() Returns Type Description INpgsqlRelationalConnection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalMultirangeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalMultirangeMapping.html",
    "title": "Class IntervalMultirangeMapping | Npgsql Documentation",
    "keywords": "Class IntervalMultirangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping IntervalMultirangeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class IntervalMultirangeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source IntervalMultirangeMapping(RelationalTypeMappingParameters, IntervalRangeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected IntervalMultirangeMapping(RelationalTypeMappingParameters parameters, IntervalRangeMapping intervalRangeMapping) Parameters Type Name Description RelationalTypeMappingParameters parameters IntervalRangeMapping intervalRangeMapping | Improve this Doc View Source IntervalMultirangeMapping(Type, IntervalRangeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public IntervalMultirangeMapping(Type clrType, IntervalRangeMapping intervalRangeMapping) Parameters Type Name Description Type clrType IntervalRangeMapping intervalRangeMapping Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalRangeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalRangeMapping.html",
    "title": "Class IntervalRangeMapping | Npgsql Documentation",
    "keywords": "Class IntervalRangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping IntervalRangeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class IntervalRangeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source IntervalRangeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public IntervalRangeMapping() | Improve this Doc View Source IntervalRangeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected IntervalRangeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.LegacyTimestampInstantMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.LegacyTimestampInstantMapping.html",
    "title": "Class LegacyTimestampInstantMapping | Npgsql Documentation",
    "keywords": "Class LegacyTimestampInstantMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping LegacyTimestampInstantMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class LegacyTimestampInstantMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source LegacyTimestampInstantMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public LegacyTimestampInstantMapping() | Improve this Doc View Source LegacyTimestampInstantMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected LegacyTimestampInstantMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Classes NpgsqlArrayArrayTypeMapping Maps PostgreSQL arrays to .NET arrays. Only single-dimensional arrays are supported. NpgsqlArrayListTypeMapping Maps PostgreSQL arrays to . NpgsqlArrayTypeMapping Abstract base class for PostgreSQL array mappings (i.e. CLR array and . NpgsqlArrayTypeMapping.NullableEqualityComparer<T> This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlBigIntegerTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlBitTypeMapping The type mapping for the PostgreSQL bit string type. NpgsqlBoolTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlBoxTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlByteArrayTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlCharacterCharTypeMapping Type mapping for the PostgreSQL 'character' data type. Handles both CLR strings and chars. NpgsqlCharacterStringTypeMapping Type mapping for the PostgreSQL 'character' data type. Handles both CLR strings and chars. NpgsqlCidrTypeMapping The type mapping for the PostgreSQL cidr type. NpgsqlCircleTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDateTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDecimalTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDoubleTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlEnumTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlEStringTypeMapping Represents a so-called PostgreSQL E-string literal string, which allows C-style escape sequences. This is a \"virtual\" type mapping which is never returned by NpgsqlTypeMappingSource . It is only used internally by some method translators to produce literal strings. NpgsqlFloatTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlHstoreTypeMapping The type mapping for the PostgreSQL hstore type. Supports both and over strings. NpgsqlInetTypeMapping The type mapping for the PostgreSQL inet type. NpgsqlIntervalTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlJsonTypeMapping A mapping for an arbitrary user POCO to PostgreSQL jsonb or json. For mapping to .NET string, see NpgsqlStringTypeMapping . NpgsqlLineSegmentTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlLineTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlLTreeTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlMacaddr8TypeMapping The type mapping for the PostgreSQL macaddr8 type. NpgsqlMacaddrTypeMapping The type mapping for the PostgreSQL macaddr type. NpgsqlMoneyTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlMultirangeTypeMapping The type mapping for PostgreSQL multirange types. NpgsqlPathTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlPgLsnTypeMapping The type mapping for the PostgreSQL pg_lsn type. NpgsqlPointTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlPolygonTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRangeTypeMapping The type mapping for PostgreSQL range types. NpgsqlRegconfigTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRegdictionaryTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRowValueTypeMapping TODO: Update Every node in the SQL tree must have a type mapping, but row values aren't actual values (in the sense that they can be sent as parameters, or have a literal representation). So we have a dummy type mapping for that. NpgsqlStringTypeMapping The base class for mapping Npgsql-specific string types. It configures parameters with the NpgsqlDbType provider-specific type enum. NpgsqlTidTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimestampTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimestampTzTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimeTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimeTzTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTsQueryTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTsRankingNormalizationTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTsVectorTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTypeMapping The base class for mapping Npgsql-specific types. It configures parameters with the NpgsqlDbType provider-specific type enum. NpgsqlUintTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlVarbitTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Interfaces INpgsqlTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.INpgsqlTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.INpgsqlTypeMapping.html",
    "title": "Interface INpgsqlTypeMapping | Npgsql Documentation",
    "keywords": "Interface INpgsqlTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlTypeMapping Properties | Improve this Doc View Source NpgsqlDbType The database type used by Npgsql. Declaration NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayArrayTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayArrayTypeMapping.html",
    "title": "Class NpgsqlArrayArrayTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayArrayTypeMapping Maps PostgreSQL arrays to .NET arrays. Only single-dimensional arrays are supported. Inheritance Object NpgsqlArrayTypeMapping NpgsqlArrayArrayTypeMapping Inherited Members NpgsqlArrayTypeMapping.ElementMapping NpgsqlArrayTypeMapping.NpgsqlDbType NpgsqlArrayTypeMapping.IsElementNullable NpgsqlArrayTypeMapping.Clone(Nullable<ValueConverter>) NpgsqlArrayTypeMapping.Clone(RelationalTypeMappingParameters) NpgsqlArrayTypeMapping.GenerateNonNullSqlLiteral(Object) NpgsqlArrayTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayArrayTypeMapping : NpgsqlArrayTypeMapping Remarks Note that mapping PostgreSQL arrays to .NET is also supported via NpgsqlArrayListTypeMapping . See: https://www.postgresql.org/docs/current/static/arrays.html Constructors | Improve this Doc View Source NpgsqlArrayArrayTypeMapping(RelationalTypeMappingParameters, RelationalTypeMapping, Nullable<Boolean>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlArrayArrayTypeMapping(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping, bool? isElementNullable = null) Parameters Type Name Description RelationalTypeMappingParameters parameters RelationalTypeMapping elementMapping Nullable < Boolean > isElementNullable | Improve this Doc View Source NpgsqlArrayArrayTypeMapping(String, RelationalTypeMapping) Creates the default array mapping (i.e. for the single-dimensional CLR array type) Declaration public NpgsqlArrayArrayTypeMapping(string storeType, RelationalTypeMapping elementMapping) Parameters Type Name Description String storeType The database type to map. RelationalTypeMapping elementMapping The element type mapping. | Improve this Doc View Source NpgsqlArrayArrayTypeMapping(Type, RelationalTypeMapping) Creates the default array mapping (i.e. for the single-dimensional CLR array type) Declaration public NpgsqlArrayArrayTypeMapping(Type arrayType, RelationalTypeMapping elementMapping) Parameters Type Name Description Type arrayType The array type to map. RelationalTypeMapping elementMapping The element type mapping. Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters, RelationalTypeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping) Parameters Type Name Description RelationalTypeMappingParameters parameters RelationalTypeMapping elementMapping Returns Type Description RelationalTypeMapping Overrides NpgsqlArrayTypeMapping.Clone(RelationalTypeMappingParameters, RelationalTypeMapping) | Improve this Doc View Source FlipArrayListClrType(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override NpgsqlArrayTypeMapping FlipArrayListClrType(Type newType) Parameters Type Name Description Type newType Returns Type Description NpgsqlArrayTypeMapping Overrides NpgsqlArrayTypeMapping.FlipArrayListClrType(Type) | Improve this Doc View Source MakeNonNullable() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override NpgsqlArrayTypeMapping MakeNonNullable() Returns Type Description NpgsqlArrayTypeMapping Overrides NpgsqlArrayTypeMapping.MakeNonNullable()"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayListTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayListTypeMapping.html",
    "title": "Class NpgsqlArrayListTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayListTypeMapping Maps PostgreSQL arrays to . Inheritance Object NpgsqlArrayTypeMapping NpgsqlArrayListTypeMapping Inherited Members NpgsqlArrayTypeMapping.ElementMapping NpgsqlArrayTypeMapping.NpgsqlDbType NpgsqlArrayTypeMapping.IsElementNullable NpgsqlArrayTypeMapping.Clone(Nullable<ValueConverter>) NpgsqlArrayTypeMapping.Clone(RelationalTypeMappingParameters) NpgsqlArrayTypeMapping.GenerateNonNullSqlLiteral(Object) NpgsqlArrayTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayListTypeMapping : NpgsqlArrayTypeMapping Remarks Note that mapping PostgreSQL arrays to .NET arrays is also supported via NpgsqlArrayArrayTypeMapping . See: https://www.postgresql.org/docs/current/static/arrays.html Constructors | Improve this Doc View Source NpgsqlArrayListTypeMapping(RelationalTypeMappingParameters, RelationalTypeMapping, Nullable<Boolean>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlArrayListTypeMapping(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping, bool? isElementNullable = null) Parameters Type Name Description RelationalTypeMappingParameters parameters RelationalTypeMapping elementMapping Nullable < Boolean > isElementNullable | Improve this Doc View Source NpgsqlArrayListTypeMapping(String, RelationalTypeMapping) Creates the default list mapping. Declaration public NpgsqlArrayListTypeMapping(string storeType, RelationalTypeMapping elementMapping) Parameters Type Name Description String storeType The database type to map. RelationalTypeMapping elementMapping The element type mapping. | Improve this Doc View Source NpgsqlArrayListTypeMapping(Type, RelationalTypeMapping) Creates the default list mapping. Declaration public NpgsqlArrayListTypeMapping(Type listType, RelationalTypeMapping elementMapping) Parameters Type Name Description Type listType The database type to map. RelationalTypeMapping elementMapping The element type mapping. Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters, RelationalTypeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping) Parameters Type Name Description RelationalTypeMappingParameters parameters RelationalTypeMapping elementMapping Returns Type Description RelationalTypeMapping Overrides NpgsqlArrayTypeMapping.Clone(RelationalTypeMappingParameters, RelationalTypeMapping) | Improve this Doc View Source FlipArrayListClrType(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override NpgsqlArrayTypeMapping FlipArrayListClrType(Type newType) Parameters Type Name Description Type newType Returns Type Description NpgsqlArrayTypeMapping Overrides NpgsqlArrayTypeMapping.FlipArrayListClrType(Type) | Improve this Doc View Source MakeNonNullable() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override NpgsqlArrayTypeMapping MakeNonNullable() Returns Type Description NpgsqlArrayTypeMapping Overrides NpgsqlArrayTypeMapping.MakeNonNullable()"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping.html",
    "title": "Class NpgsqlArrayTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayTypeMapping Abstract base class for PostgreSQL array mappings (i.e. CLR array and . Inheritance Object NpgsqlArrayTypeMapping NpgsqlArrayArrayTypeMapping NpgsqlArrayListTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public abstract class NpgsqlArrayTypeMapping : RelationalTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/arrays.html Constructors | Improve this Doc View Source NpgsqlArrayTypeMapping(RelationalTypeMappingParameters, RelationalTypeMapping, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlArrayTypeMapping(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping, bool isElementNullable) Parameters Type Name Description RelationalTypeMappingParameters parameters RelationalTypeMapping elementMapping Boolean isElementNullable Properties | Improve this Doc View Source ElementMapping The relational type mapping used to initialize the array mapping. Declaration public virtual RelationalTypeMapping ElementMapping { get; } Property Value Type Description RelationalTypeMapping | Improve this Doc View Source IsElementNullable Whether the array's element is nullable. This is required since and ElementMapping do not contain nullable reference type information. Declaration public virtual bool IsElementNullable { get; } Property Value Type Description Boolean | Improve this Doc View Source NpgsqlDbType The database type used by Npgsql. Declaration public virtual NpgsqlDbType? NpgsqlDbType { get; } Property Value Type Description Nullable < NpgsqlDbType > Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(RelationalTypeMappingParameters, RelationalTypeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected abstract RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping) Parameters Type Name Description RelationalTypeMappingParameters parameters RelationalTypeMapping elementMapping Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter | Improve this Doc View Source FlipArrayListClrType(Type) Returns a type mapping identical to this one, but over the other CLR array type. That is, convert a CLR array mapping to a List mapping and vice versa. Declaration public abstract NpgsqlArrayTypeMapping FlipArrayListClrType(Type newType) Parameters Type Name Description Type newType Returns Type Description NpgsqlArrayTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source MakeNonNullable() Returns a copy of this type mapping with IsElementNullable set to false . Declaration public abstract NpgsqlArrayTypeMapping MakeNonNullable() Returns Type Description NpgsqlArrayTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping.NullableEqualityComparer-1.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping.NullableEqualityComparer-1.html",
    "title": "Class NpgsqlArrayTypeMapping.NullableEqualityComparer<T> | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayTypeMapping.NullableEqualityComparer<T> This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlArrayTypeMapping.NullableEqualityComparer<T> Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax protected class NullableEqualityComparer<T> : IEqualityComparer<T?> where T : struct Type Parameters Name Description T Constructors | Improve this Doc View Source NullableEqualityComparer(IEqualityComparer<T>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NullableEqualityComparer(IEqualityComparer<T> underlyingComparer) Parameters Type Name Description IEqualityComparer <T> underlyingComparer Methods | Improve this Doc View Source Equals(Nullable<T>, Nullable<T>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public bool Equals(T? x, T? y) Parameters Type Name Description Nullable <T> x Nullable <T> y Returns Type Description Boolean | Improve this Doc View Source GetHashCode(Nullable<T>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public int GetHashCode(T? obj) Parameters Type Name Description Nullable <T> obj Returns Type Description Int32"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBigIntegerTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBigIntegerTypeMapping.html",
    "title": "Class NpgsqlBigIntegerTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBigIntegerTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlBigIntegerTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBigIntegerTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlBigIntegerTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlBigIntegerTypeMapping() | Improve this Doc View Source NpgsqlBigIntegerTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlBigIntegerTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source ProcessStoreType(RelationalTypeMappingParameters, String, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMappingParameters parameters String storeType String _ Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBitTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBitTypeMapping.html",
    "title": "Class NpgsqlBitTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBitTypeMapping The type mapping for the PostgreSQL bit string type. Inheritance Object NpgsqlTypeMapping NpgsqlBitTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBitTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-bit.html Constructors | Improve this Doc View Source NpgsqlBitTypeMapping() Constructs an instance of the NpgsqlBitTypeMapping class. Declaration public NpgsqlBitTypeMapping() | Improve this Doc View Source NpgsqlBitTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlBitTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoolTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoolTypeMapping.html",
    "title": "Class NpgsqlBoolTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBoolTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlBoolTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBoolTypeMapping : RelationalTypeMapping Constructors | Improve this Doc View Source NpgsqlBoolTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlBoolTypeMapping() | Improve this Doc View Source NpgsqlBoolTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlBoolTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoxTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoxTypeMapping.html",
    "title": "Class NpgsqlBoxTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBoxTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlBoxTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBoxTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlBoxTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlBoxTypeMapping() | Improve this Doc View Source NpgsqlBoxTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlBoxTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlByteArrayTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlByteArrayTypeMapping.html",
    "title": "Class NpgsqlByteArrayTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlByteArrayTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlByteArrayTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlByteArrayTypeMapping : RelationalTypeMapping Constructors | Improve this Doc View Source NpgsqlByteArrayTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlByteArrayTypeMapping() | Improve this Doc View Source NpgsqlByteArrayTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlByteArrayTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterCharTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterCharTypeMapping.html",
    "title": "Class NpgsqlCharacterCharTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCharacterCharTypeMapping Type mapping for the PostgreSQL 'character' data type. Handles both CLR strings and chars. Inheritance Object NpgsqlCharacterCharTypeMapping Implements INpgsqlTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCharacterCharTypeMapping : CharTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-character.html Constructors | Improve this Doc View Source NpgsqlCharacterCharTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlCharacterCharTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlCharacterCharTypeMapping(String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCharacterCharTypeMapping(string storeType) Parameters Type Name Description String storeType Properties | Improve this Doc View Source NpgsqlDbType The database type used by Npgsql. Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterStringTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterStringTypeMapping.html",
    "title": "Class NpgsqlCharacterStringTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCharacterStringTypeMapping Type mapping for the PostgreSQL 'character' data type. Handles both CLR strings and chars. Inheritance Object NpgsqlStringTypeMapping NpgsqlCharacterStringTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlStringTypeMapping.NpgsqlDbType Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCharacterStringTypeMapping : NpgsqlStringTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-character.html Constructors | Improve this Doc View Source NpgsqlCharacterStringTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlCharacterStringTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlCharacterStringTypeMapping(String, Int32) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCharacterStringTypeMapping(string storeType, int size = 1) Parameters Type Name Description String storeType Int32 size Properties | Improve this Doc View Source Comparer This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ValueComparer Comparer { get; } Property Value Type Description ValueComparer | Improve this Doc View Source KeyComparer This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ValueComparer KeyComparer { get; } Property Value Type Description ValueComparer Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides NpgsqlStringTypeMapping.Clone(RelationalTypeMappingParameters) | Improve this Doc View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides NpgsqlStringTypeMapping.ConfigureParameter(DbParameter) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCidrTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCidrTypeMapping.html",
    "title": "Class NpgsqlCidrTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCidrTypeMapping The type mapping for the PostgreSQL cidr type. Inheritance Object NpgsqlTypeMapping NpgsqlCidrTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCidrTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-CIDR Constructors | Improve this Doc View Source NpgsqlCidrTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCidrTypeMapping() | Improve this Doc View Source NpgsqlCidrTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlCidrTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCircleTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCircleTypeMapping.html",
    "title": "Class NpgsqlCircleTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCircleTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlCircleTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCircleTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlCircleTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCircleTypeMapping() | Improve this Doc View Source NpgsqlCircleTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlCircleTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateTypeMapping.html",
    "title": "Class NpgsqlDateTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlDateTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlDateTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlDateTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlDateTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDateTypeMapping(Type clrType) Parameters Type Name Description Type clrType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDecimalTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDecimalTypeMapping.html",
    "title": "Class NpgsqlDecimalTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlDecimalTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlDecimalTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDecimalTypeMapping : DecimalTypeMapping Constructors | Improve this Doc View Source NpgsqlDecimalTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDecimalTypeMapping() | Improve this Doc View Source NpgsqlDecimalTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlDecimalTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source ProcessStoreType(RelationalTypeMappingParameters, String, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMappingParameters parameters String storeType String _ Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDoubleTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDoubleTypeMapping.html",
    "title": "Class NpgsqlDoubleTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlDoubleTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlDoubleTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDoubleTypeMapping : DoubleTypeMapping Constructors | Improve this Doc View Source NpgsqlDoubleTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDoubleTypeMapping() | Improve this Doc View Source NpgsqlDoubleTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlDoubleTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEnumTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEnumTypeMapping.html",
    "title": "Class NpgsqlEnumTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlEnumTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlEnumTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlEnumTypeMapping : RelationalTypeMapping Constructors | Improve this Doc View Source NpgsqlEnumTypeMapping(RelationalTypeMappingParameters, ISqlGenerationHelper, INpgsqlNameTranslator) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlEnumTypeMapping(RelationalTypeMappingParameters parameters, ISqlGenerationHelper sqlGenerationHelper, INpgsqlNameTranslator nameTranslator) Parameters Type Name Description RelationalTypeMappingParameters parameters ISqlGenerationHelper sqlGenerationHelper INpgsqlNameTranslator nameTranslator | Improve this Doc View Source NpgsqlEnumTypeMapping(String, Nullable<String>, Type, ISqlGenerationHelper, Nullable<INpgsqlNameTranslator>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlEnumTypeMapping(string storeType, string? storeTypeSchema, Type enumType, ISqlGenerationHelper sqlGenerationHelper, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description String storeType Nullable < String > storeTypeSchema Type enumType ISqlGenerationHelper sqlGenerationHelper Nullable < INpgsqlNameTranslator > nameTranslator Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEStringTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEStringTypeMapping.html",
    "title": "Class NpgsqlEStringTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlEStringTypeMapping Represents a so-called PostgreSQL E-string literal string, which allows C-style escape sequences. This is a \"virtual\" type mapping which is never returned by NpgsqlTypeMappingSource . It is only used internally by some method translators to produce literal strings. Inheritance Object NpgsqlEStringTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlEStringTypeMapping : StringTypeMapping Remarks See https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS Constructors | Improve this Doc View Source NpgsqlEStringTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlEStringTypeMapping() Methods | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlFloatTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlFloatTypeMapping.html",
    "title": "Class NpgsqlFloatTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlFloatTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlFloatTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlFloatTypeMapping : FloatTypeMapping Constructors | Improve this Doc View Source NpgsqlFloatTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlFloatTypeMapping() | Improve this Doc View Source NpgsqlFloatTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlFloatTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlHstoreTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlHstoreTypeMapping.html",
    "title": "Class NpgsqlHstoreTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlHstoreTypeMapping The type mapping for the PostgreSQL hstore type. Supports both and over strings. Inheritance Object NpgsqlTypeMapping NpgsqlHstoreTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlHstoreTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/hstore.html Constructors | Improve this Doc View Source NpgsqlHstoreTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlHstoreTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlHstoreTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlHstoreTypeMapping(Type clrType) Parameters Type Name Description Type clrType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.html",
    "title": "Class NpgsqlInetTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlInetTypeMapping The type mapping for the PostgreSQL inet type. Inheritance Object NpgsqlTypeMapping NpgsqlInetTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlInetTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-INET Constructors | Improve this Doc View Source NpgsqlInetTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlInetTypeMapping() | Improve this Doc View Source NpgsqlInetTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlInetTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlIntervalTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlIntervalTypeMapping.html",
    "title": "Class NpgsqlIntervalTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlIntervalTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlIntervalTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlIntervalTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlIntervalTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlIntervalTypeMapping() | Improve this Doc View Source NpgsqlIntervalTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlIntervalTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source FormatTimeSpanAsInterval(TimeSpan) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string FormatTimeSpanAsInterval(TimeSpan ts) Parameters Type Name Description TimeSpan ts Returns Type Description String | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source ProcessStoreType(RelationalTypeMappingParameters, String, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMappingParameters parameters String storeType String _ Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlJsonTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlJsonTypeMapping.html",
    "title": "Class NpgsqlJsonTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonTypeMapping A mapping for an arbitrary user POCO to PostgreSQL jsonb or json. For mapping to .NET string, see NpgsqlStringTypeMapping . Inheritance Object NpgsqlTypeMapping NpgsqlJsonTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlJsonTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlJsonTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Improve this Doc View Source NpgsqlJsonTypeMapping(String, Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlJsonTypeMapping(string storeType, Type clrType) Parameters Type Name Description String storeType Type clrType Properties | Improve this Doc View Source IsJsonb This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool IsJsonb { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source EscapeSqlLiteral(String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual string EscapeSqlLiteral(string literal) Parameters Type Name Description String literal Returns Type Description String | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineSegmentTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineSegmentTypeMapping.html",
    "title": "Class NpgsqlLineSegmentTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlLineSegmentTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlLineSegmentTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLineSegmentTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlLineSegmentTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlLineSegmentTypeMapping() | Improve this Doc View Source NpgsqlLineSegmentTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlLineSegmentTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineTypeMapping.html",
    "title": "Class NpgsqlLineTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlLineTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlLineTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLineTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlLineTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlLineTypeMapping() | Improve this Doc View Source NpgsqlLineTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlLineTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLTreeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLTreeTypeMapping.html",
    "title": "Class NpgsqlLTreeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlLTreeTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlStringTypeMapping NpgsqlLTreeTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlStringTypeMapping.NpgsqlDbType NpgsqlStringTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLTreeTypeMapping : NpgsqlStringTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlLTreeTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlLTreeTypeMapping() | Improve this Doc View Source NpgsqlLTreeTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlLTreeTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides NpgsqlStringTypeMapping.Clone(RelationalTypeMappingParameters) | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddr8TypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddr8TypeMapping.html",
    "title": "Class NpgsqlMacaddr8TypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMacaddr8TypeMapping The type mapping for the PostgreSQL macaddr8 type. Inheritance Object NpgsqlTypeMapping NpgsqlMacaddr8TypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMacaddr8TypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-MACADDR8 Constructors | Improve this Doc View Source NpgsqlMacaddr8TypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMacaddr8TypeMapping() | Improve this Doc View Source NpgsqlMacaddr8TypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlMacaddr8TypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddrTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddrTypeMapping.html",
    "title": "Class NpgsqlMacaddrTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMacaddrTypeMapping The type mapping for the PostgreSQL macaddr type. Inheritance Object NpgsqlTypeMapping NpgsqlMacaddrTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMacaddrTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-MACADDR Constructors | Improve this Doc View Source NpgsqlMacaddrTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMacaddrTypeMapping() | Improve this Doc View Source NpgsqlMacaddrTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlMacaddrTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMoneyTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMoneyTypeMapping.html",
    "title": "Class NpgsqlMoneyTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMoneyTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlMoneyTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMoneyTypeMapping : DecimalTypeMapping Constructors | Improve this Doc View Source NpgsqlMoneyTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMoneyTypeMapping() | Improve this Doc View Source NpgsqlMoneyTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlMoneyTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMultirangeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMultirangeTypeMapping.html",
    "title": "Class NpgsqlMultirangeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMultirangeTypeMapping The type mapping for PostgreSQL multirange types. Inheritance Object NpgsqlTypeMapping NpgsqlMultirangeTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMultirangeTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Constructors | Improve this Doc View Source NpgsqlMultirangeTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType, NpgsqlRangeTypeMapping, ISqlGenerationHelper) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlMultirangeTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType, NpgsqlRangeTypeMapping rangeMapping, ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType NpgsqlRangeTypeMapping rangeMapping ISqlGenerationHelper sqlGenerationHelper | Improve this Doc View Source NpgsqlMultirangeTypeMapping(String, Nullable<String>, Type, NpgsqlRangeTypeMapping, ISqlGenerationHelper) Constructs an instance of the NpgsqlRangeTypeMapping class. Declaration public NpgsqlMultirangeTypeMapping(string storeType, string? storeTypeSchema, Type clrType, NpgsqlRangeTypeMapping rangeMapping, ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description String storeType The database type to map Nullable < String > storeTypeSchema The schema of the type. Type clrType The CLR type to map. NpgsqlRangeTypeMapping rangeMapping The type mapping of the ranges contained in this multirange. ISqlGenerationHelper sqlGenerationHelper The SQL generation helper to delimit the store name. | Improve this Doc View Source NpgsqlMultirangeTypeMapping(String, Type, NpgsqlRangeTypeMapping, ISqlGenerationHelper) Constructs an instance of the NpgsqlRangeTypeMapping class. Declaration public NpgsqlMultirangeTypeMapping(string storeType, Type clrType, NpgsqlRangeTypeMapping rangeMapping, ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description String storeType The database type to map Type clrType The CLR type to map. NpgsqlRangeTypeMapping rangeMapping The type mapping of the ranges contained in this multirange. ISqlGenerationHelper sqlGenerationHelper The SQL generation helper to delimit the store name. Properties | Improve this Doc View Source RangeMapping The relational type mapping of the ranges contained in this multirange. Declaration public virtual NpgsqlRangeTypeMapping RangeMapping { get; } Property Value Type Description NpgsqlRangeTypeMapping | Improve this Doc View Source SubtypeMapping The relational type mapping of the values contained in this multirange. Declaration public virtual RelationalTypeMapping SubtypeMapping { get; } Property Value Type Description RelationalTypeMapping Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object, RelationalTypeMapping, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string GenerateNonNullSqlLiteral(object value, RelationalTypeMapping rangeMapping, string multirangeStoreType) Parameters Type Name Description Object value RelationalTypeMapping rangeMapping String multirangeStoreType Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPathTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPathTypeMapping.html",
    "title": "Class NpgsqlPathTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPathTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlPathTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPathTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlPathTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlPathTypeMapping() | Improve this Doc View Source NpgsqlPathTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlPathTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPgLsnTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPgLsnTypeMapping.html",
    "title": "Class NpgsqlPgLsnTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPgLsnTypeMapping The type mapping for the PostgreSQL pg_lsn type. Inheritance Object NpgsqlTypeMapping NpgsqlPgLsnTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPgLsnTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/datatype-pg-lsn.html Constructors | Improve this Doc View Source NpgsqlPgLsnTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlPgLsnTypeMapping() | Improve this Doc View Source NpgsqlPgLsnTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlPgLsnTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPointTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPointTypeMapping.html",
    "title": "Class NpgsqlPointTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPointTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlPointTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPointTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlPointTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlPointTypeMapping() | Improve this Doc View Source NpgsqlPointTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlPointTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPolygonTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPolygonTypeMapping.html",
    "title": "Class NpgsqlPolygonTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPolygonTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlPolygonTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPolygonTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlPolygonTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlPolygonTypeMapping() | Improve this Doc View Source NpgsqlPolygonTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlPolygonTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRangeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRangeTypeMapping.html",
    "title": "Class NpgsqlRangeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRangeTypeMapping The type mapping for PostgreSQL range types. Inheritance Object NpgsqlTypeMapping NpgsqlRangeTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRangeTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Constructors | Improve this Doc View Source NpgsqlRangeTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType, RelationalTypeMapping, ISqlGenerationHelper) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlRangeTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType, RelationalTypeMapping subtypeMapping, ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType RelationalTypeMapping subtypeMapping ISqlGenerationHelper sqlGenerationHelper | Improve this Doc View Source NpgsqlRangeTypeMapping(String, Nullable<String>, Type, RelationalTypeMapping, ISqlGenerationHelper) Constructs an instance of the NpgsqlRangeTypeMapping class. Declaration public NpgsqlRangeTypeMapping(string storeType, string? storeTypeSchema, Type clrType, RelationalTypeMapping subtypeMapping, ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description String storeType The database type to map Nullable < String > storeTypeSchema The schema of the type. Type clrType The CLR type to map. RelationalTypeMapping subtypeMapping The type mapping for the range subtype. ISqlGenerationHelper sqlGenerationHelper The SQL generation helper to delimit the store name. | Improve this Doc View Source NpgsqlRangeTypeMapping(String, Type, RelationalTypeMapping, ISqlGenerationHelper) Constructs an instance of the NpgsqlRangeTypeMapping class. Declaration public NpgsqlRangeTypeMapping(string storeType, Type clrType, RelationalTypeMapping subtypeMapping, ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description String storeType The database type to map Type clrType The CLR type to map. RelationalTypeMapping subtypeMapping The type mapping for the range subtype. ISqlGenerationHelper sqlGenerationHelper The SQL generation helper to delimit the store name. Properties | Improve this Doc View Source SubtypeMapping The relational type mapping of the range's subtype. Declaration public virtual RelationalTypeMapping SubtypeMapping { get; } Property Value Type Description RelationalTypeMapping Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegconfigTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegconfigTypeMapping.html",
    "title": "Class NpgsqlRegconfigTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRegconfigTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlRegconfigTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRegconfigTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlRegconfigTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRegconfigTypeMapping() | Improve this Doc View Source NpgsqlRegconfigTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlRegconfigTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegdictionaryTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegdictionaryTypeMapping.html",
    "title": "Class NpgsqlRegdictionaryTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRegdictionaryTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlRegdictionaryTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRegdictionaryTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlRegdictionaryTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRegdictionaryTypeMapping() | Improve this Doc View Source NpgsqlRegdictionaryTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlRegdictionaryTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRowValueTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRowValueTypeMapping.html",
    "title": "Class NpgsqlRowValueTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRowValueTypeMapping TODO: Update Every node in the SQL tree must have a type mapping, but row values aren't actual values (in the sense that they can be sent as parameters, or have a literal representation). So we have a dummy type mapping for that. Inheritance Object NpgsqlRowValueTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRowValueTypeMapping : RelationalTypeMapping Constructors | Improve this Doc View Source NpgsqlRowValueTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlRowValueTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlRowValueTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRowValueTypeMapping(Type clrType) Parameters Type Name Description Type clrType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlStringTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlStringTypeMapping.html",
    "title": "Class NpgsqlStringTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlStringTypeMapping The base class for mapping Npgsql-specific string types. It configures parameters with the NpgsqlDbType provider-specific type enum. Inheritance Object NpgsqlStringTypeMapping NpgsqlCharacterStringTypeMapping NpgsqlLTreeTypeMapping Implements INpgsqlTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStringTypeMapping : StringTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlStringTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlStringTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Improve this Doc View Source NpgsqlStringTypeMapping(String, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlStringTypeMapping(string storeType, NpgsqlDbType npgsqlDbType) Parameters Type Name Description String storeType NpgsqlDbType npgsqlDbType Properties | Improve this Doc View Source NpgsqlDbType This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTidTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTidTypeMapping.html",
    "title": "Class NpgsqlTidTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTidTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlTidTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTidTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTidTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTidTypeMapping() | Improve this Doc View Source NpgsqlTidTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTidTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTypeMapping.html",
    "title": "Class NpgsqlTimestampTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimestampTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlTimestampTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimestampTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTimestampTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimestampTypeMapping() | Improve this Doc View Source NpgsqlTimestampTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTimestampTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source ProcessStoreType(RelationalTypeMappingParameters, String, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMappingParameters parameters String storeType String _ Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.html",
    "title": "Class NpgsqlTimestampTzTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimestampTzTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlTimestampTzTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimestampTzTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTimestampTzTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTimestampTzTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlTimestampTzTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimestampTzTypeMapping(Type clrType) Parameters Type Name Description Type clrType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source ProcessStoreType(RelationalTypeMappingParameters, String, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMappingParameters parameters String storeType String _ Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTypeMapping.html",
    "title": "Class NpgsqlTimeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimeTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlTimeTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimeTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTimeTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTimeTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlTimeTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimeTypeMapping(Type clrType) Parameters Type Name Description Type clrType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTzTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTzTypeMapping.html",
    "title": "Class NpgsqlTimeTzTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimeTzTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlTimeTzTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimeTzTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTimeTzTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimeTzTypeMapping() | Improve this Doc View Source NpgsqlTimeTzTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTimeTzTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsQueryTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsQueryTypeMapping.html",
    "title": "Class NpgsqlTsQueryTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlTsQueryTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTsQueryTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTsQueryTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTsQueryTypeMapping() | Improve this Doc View Source NpgsqlTsQueryTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTsQueryTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsRankingNormalizationTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsRankingNormalizationTypeMapping.html",
    "title": "Class NpgsqlTsRankingNormalizationTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTsRankingNormalizationTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTsRankingNormalizationTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTsRankingNormalizationTypeMapping : IntTypeMapping Constructors | Improve this Doc View Source NpgsqlTsRankingNormalizationTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTsRankingNormalizationTypeMapping() | Improve this Doc View Source NpgsqlTsRankingNormalizationTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTsRankingNormalizationTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsVectorTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsVectorTypeMapping.html",
    "title": "Class NpgsqlTsVectorTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTsVectorTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlTsVectorTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTsVectorTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTsVectorTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTsVectorTypeMapping() | Improve this Doc View Source NpgsqlTsVectorTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTsVectorTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTypeMapping.html",
    "title": "Class NpgsqlTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeMapping The base class for mapping Npgsql-specific types. It configures parameters with the NpgsqlDbType provider-specific type enum. Inheritance Object NpgsqlTypeMapping DateIntervalMultirangeMapping DateIntervalRangeMapping DateMapping DurationIntervalMapping IntervalMultirangeMapping IntervalRangeMapping LegacyTimestampInstantMapping NpgsqlBigIntegerTypeMapping NpgsqlBitTypeMapping NpgsqlBoxTypeMapping NpgsqlCidrTypeMapping NpgsqlCircleTypeMapping NpgsqlDateTypeMapping NpgsqlHstoreTypeMapping NpgsqlInetTypeMapping NpgsqlIntervalTypeMapping NpgsqlJsonTypeMapping NpgsqlLineSegmentTypeMapping NpgsqlLineTypeMapping NpgsqlMacaddr8TypeMapping NpgsqlMacaddrTypeMapping NpgsqlMultirangeTypeMapping NpgsqlPathTypeMapping NpgsqlPgLsnTypeMapping NpgsqlPointTypeMapping NpgsqlPolygonTypeMapping NpgsqlRangeTypeMapping NpgsqlRegconfigTypeMapping NpgsqlRegdictionaryTypeMapping NpgsqlTidTypeMapping NpgsqlTimestampTypeMapping NpgsqlTimestampTzTypeMapping NpgsqlTimeTypeMapping NpgsqlTimeTzTypeMapping NpgsqlTsQueryTypeMapping NpgsqlTsVectorTypeMapping NpgsqlUintTypeMapping NpgsqlVarbitTypeMapping PeriodIntervalMapping TimeMapping TimestampLocalDateTimeMapping TimestampTzInstantMapping TimestampTzOffsetDateTimeMapping TimestampTzZonedDateTimeMapping TimeTzMapping Implements INpgsqlTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public abstract class NpgsqlTypeMapping : RelationalTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) Constructs an instance of the NpgsqlTypeMapping class. Declaration protected NpgsqlTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMappingParameters parameters The parameters for this mapping. NpgsqlDbType npgsqlDbType The database type of the range subtype. | Improve this Doc View Source NpgsqlTypeMapping(String, Type, NpgsqlDbType) Constructs an instance of the NpgsqlTypeMapping class. Declaration public NpgsqlTypeMapping(string storeType, Type clrType, NpgsqlDbType npgsqlDbType) Parameters Type Name Description String storeType The database type to map. Type clrType The CLR type to map. NpgsqlDbType npgsqlDbType The database type used by Npgsql. Properties | Improve this Doc View Source NpgsqlDbType The database type used by Npgsql. Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType Methods | Improve this Doc View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) Generates the SQL representation of a non-null literal value, meant to be embedded in another literal value, e.g. in a range. Declaration protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value The literal value. Returns Type Description String The generated string. | Improve this Doc View Source GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Generates the SQL representation of a literal value without conversion, meant to be embedded in another literal value, e.g. in a range. Declaration public virtual string GenerateEmbeddedProviderValueSqlLiteral(object? value) Parameters Type Name Description Nullable < Object > value The literal value. Returns Type Description String The generated string. | Improve this Doc View Source GenerateEmbeddedSqlLiteral(Nullable<Object>) Generates the SQL representation of a literal value meant to be embedded in another literal value, e.g. in a range. Declaration public virtual string GenerateEmbeddedSqlLiteral(object? value) Parameters Type Name Description Nullable < Object > value The literal value. Returns Type Description String The generated string. Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlUintTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlUintTypeMapping.html",
    "title": "Class NpgsqlUintTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlUintTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlUintTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlUintTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlUintTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlUintTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Improve this Doc View Source NpgsqlUintTypeMapping(String, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlUintTypeMapping(string storeType, NpgsqlDbType npgsqlDbType) Parameters Type Name Description String storeType NpgsqlDbType npgsqlDbType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlVarbitTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlVarbitTypeMapping.html",
    "title": "Class NpgsqlVarbitTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlVarbitTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping NpgsqlVarbitTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlVarbitTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlVarbitTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlVarbitTypeMapping() | Improve this Doc View Source NpgsqlVarbitTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlVarbitTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator.html",
    "title": "Class NpgsqlDatabaseCreator | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseCreator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlDatabaseCreator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDatabaseCreator : RelationalDatabaseCreator Constructors | Improve this Doc View Source NpgsqlDatabaseCreator(RelationalDatabaseCreatorDependencies, INpgsqlRelationalConnection, IRawSqlCommandBuilder) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder) Parameters Type Name Description RelationalDatabaseCreatorDependencies dependencies INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder Properties | Improve this Doc View Source RetryDelay This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual TimeSpan RetryDelay { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source RetryTimeout This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual TimeSpan RetryTimeout { get; set; } Property Value Type Description TimeSpan Methods | Improve this Doc View Source Create() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void Create() | Improve this Doc View Source CreateAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override async Task CreateAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source CreateTables() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void CreateTables() | Improve this Doc View Source CreateTablesAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override async Task CreateTablesAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Delete() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void Delete() | Improve this Doc View Source DeleteAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override async Task DeleteAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Exists() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool Exists() Returns Type Description Boolean | Improve this Doc View Source ExistsAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Task<bool> ExistsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Boolean > | Improve this Doc View Source HasTables() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool HasTables() Returns Type Description Boolean | Improve this Doc View Source HasTablesAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Task<bool> HasTablesAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Boolean >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.html",
    "title": "Class NpgsqlExecutionStrategy | Npgsql Documentation",
    "keywords": "Class NpgsqlExecutionStrategy This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlExecutionStrategy Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlExecutionStrategy : IExecutionStrategy Constructors | Improve this Doc View Source NpgsqlExecutionStrategy(ExecutionStrategyDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlExecutionStrategy(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Properties | Improve this Doc View Source RetriesOnFailure This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool RetriesOnFailure { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Execute<TState, TResult>(TState, Func<DbContext, TState, TResult>, Nullable<Func<DbContext, TState, ExecutionResult<TResult>>>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual TResult Execute<TState, TResult>(TState state, Func<DbContext, TState, TResult> operation, Func<DbContext, TState, ExecutionResult<TResult>>? verifySucceeded) Parameters Type Name Description TState state Func < DbContext , TState, TResult> operation Nullable < Func < DbContext , TState, ExecutionResult <TResult>>> verifySucceeded Returns Type Description TResult Type Parameters Name Description TState TResult | Improve this Doc View Source ExecuteAsync<TState, TResult>(TState, Func<DbContext, TState, CancellationToken, Task<TResult>>, Nullable<Func<DbContext, TState, CancellationToken, Task<ExecutionResult<TResult>>>>, CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual async Task<TResult> ExecuteAsync<TState, TResult>(TState state, Func<DbContext, TState, CancellationToken, Task<TResult>> operation, Func<DbContext, TState, CancellationToken, Task<ExecutionResult<TResult>>>? verifySucceeded, CancellationToken cancellationToken) Parameters Type Name Description TState state Func < DbContext , TState, CancellationToken , Task <TResult>> operation Nullable < Func < DbContext , TState, CancellationToken , Task < ExecutionResult <TResult>>>> verifySucceeded CancellationToken cancellationToken Returns Type Description Task <TResult> Type Parameters Name Description TState TResult"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategyFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategyFactory.html",
    "title": "Class NpgsqlExecutionStrategyFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlExecutionStrategyFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlExecutionStrategyFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlExecutionStrategyFactory : RelationalExecutionStrategyFactory Constructors | Improve this Doc View Source NpgsqlExecutionStrategyFactory(ExecutionStrategyDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlExecutionStrategyFactory(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Methods | Improve this Doc View Source CreateDefaultStrategy(ExecutionStrategyDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Returns Type Description IExecutionStrategy"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlGeometryTypeMapping-1.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlGeometryTypeMapping-1.html",
    "title": "Class NpgsqlGeometryTypeMapping<TGeometry> | Npgsql Documentation",
    "keywords": "Class NpgsqlGeometryTypeMapping<TGeometry> This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlGeometryTypeMapping<TGeometry> Implements INpgsqlTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlGeometryTypeMapping<TGeometry> : RelationalGeometryTypeMapping<TGeometry, TGeometry>, INpgsqlTypeMapping Type Parameters Name Description TGeometry Constructors | Improve this Doc View Source NpgsqlGeometryTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlGeometryTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlGeometryTypeMapping(String, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlGeometryTypeMapping(string storeType, bool isGeography) Parameters Type Name Description String storeType Boolean isGeography Properties | Improve this Doc View Source NpgsqlDbType Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType | Improve this Doc View Source WKTReaderType This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Type WKTReaderType { get; } Property Value Type Description Type Methods | Improve this Doc View Source AsText(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string AsText(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GetSrid(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override int GetSrid(object value) Parameters Type Name Description Object value Returns Type Description Int32 Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNetTopologySuiteTypeMappingSourcePlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNetTopologySuiteTypeMappingSourcePlugin.html",
    "title": "Class NpgsqlNetTopologySuiteTypeMappingSourcePlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteTypeMappingSourcePlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNetTopologySuiteTypeMappingSourcePlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteTypeMappingSourcePlugin : IRelationalTypeMappingSourcePlugin Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteTypeMappingSourcePlugin(INpgsqlNetTopologySuiteOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteTypeMappingSourcePlugin(INpgsqlNetTopologySuiteOptions options) Parameters Type Name Description INpgsqlNetTopologySuiteOptions options Methods | Improve this Doc View Source FindMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual RelationalTypeMapping? FindMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description Nullable < RelationalTypeMapping > | Improve this Doc View Source TryParseStoreTypeName(String, out String, out Boolean, out Nullable<Type>, out Int32, out Ordinates) Given a PostGIS store type name (e.g. GEOMETRY, GEOGRAPHY(Point, 4326), GEOMETRY(LineStringM, 4326)), attempts to parse it and return its components. Declaration public static bool TryParseStoreTypeName(string storeTypeName, out string subtypeName, out bool isGeography, out Type? clrType, out int srid, out Ordinates ordinates) Parameters Type Name Description String storeTypeName String subtypeName Boolean isGeography Nullable < Type > clrType Int32 srid Ordinates ordinates Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNodaTimeTypeMappingSourcePlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNodaTimeTypeMappingSourcePlugin.html",
    "title": "Class NpgsqlNodaTimeTypeMappingSourcePlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeTypeMappingSourcePlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlNodaTimeTypeMappingSourcePlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeTypeMappingSourcePlugin : IRelationalTypeMappingSourcePlugin Constructors | Improve this Doc View Source NpgsqlNodaTimeTypeMappingSourcePlugin(ISqlGenerationHelper) Constructs an instance of the NpgsqlNodaTimeTypeMappingSourcePlugin class. Declaration public NpgsqlNodaTimeTypeMappingSourcePlugin(ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description ISqlGenerationHelper sqlGenerationHelper Properties | Improve this Doc View Source ClrTypeMappings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ConcurrentDictionary<Type, RelationalTypeMapping> ClrTypeMappings { get; } Property Value Type Description ConcurrentDictionary < Type , RelationalTypeMapping > | Improve this Doc View Source StoreTypeMappings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ConcurrentDictionary<string, RelationalTypeMapping[]> StoreTypeMappings { get; } Property Value Type Description ConcurrentDictionary < String , RelationalTypeMapping []> Methods | Improve this Doc View Source FindArrayMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindArrayMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description Nullable < RelationalTypeMapping > | Improve this Doc View Source FindExistingMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindExistingMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description Nullable < RelationalTypeMapping > | Improve this Doc View Source FindMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual RelationalTypeMapping? FindMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description Nullable < RelationalTypeMapping >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlRelationalConnection.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlRelationalConnection.html",
    "title": "Class NpgsqlRelationalConnection | Npgsql Documentation",
    "keywords": "Class NpgsqlRelationalConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlRelationalConnection Implements INpgsqlRelationalConnection IRelationalConnection Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRelationalConnection : RelationalConnection, INpgsqlRelationalConnection Constructors | Improve this Doc View Source NpgsqlRelationalConnection(RelationalConnectionDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRelationalConnection(RelationalConnectionDependencies dependencies) Parameters Type Name Description RelationalConnectionDependencies dependencies Properties | Improve this Doc View Source ConnectionString This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string? ConnectionString { get; set; } Property Value Type Description Nullable < String > | Improve this Doc View Source CurrentAmbientTransaction This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Transaction? CurrentAmbientTransaction { get; } Property Value Type Description Nullable < Transaction > | Improve this Doc View Source DbConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlConnection DbConnection { get; set; } Property Value Type Description NpgsqlConnection | Improve this Doc View Source DbDataSource This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual DbDataSource? DbDataSource { get; set; } Property Value Type Description Nullable < DbDataSource > | Improve this Doc View Source SupportsAmbientTransactions Indicates whether the store connection supports ambient transactions Declaration protected override bool SupportsAmbientTransactions { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source CloneWith(String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlRelationalConnection CloneWith(string connectionString) Parameters Type Name Description String connectionString Returns Type Description NpgsqlRelationalConnection | Improve this Doc View Source CreateAdminConnection() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual INpgsqlRelationalConnection CreateAdminConnection() Returns Type Description INpgsqlRelationalConnection | Improve this Doc View Source CreateDbConnection() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override DbConnection CreateDbConnection() Returns Type Description DbConnection Implements INpgsqlRelationalConnection IRelationalConnection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlSqlGenerationHelper.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlSqlGenerationHelper.html",
    "title": "Class NpgsqlSqlGenerationHelper | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlGenerationHelper This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlSqlGenerationHelper Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlGenerationHelper : RelationalSqlGenerationHelper Constructors | Improve this Doc View Source NpgsqlSqlGenerationHelper(RelationalSqlGenerationHelperDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies) Parameters Type Name Description RelationalSqlGenerationHelperDependencies dependencies Methods | Improve this Doc View Source DelimitIdentifier(StringBuilder, String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void DelimitIdentifier(StringBuilder builder, string identifier) Parameters Type Name Description StringBuilder builder String identifier | Improve this Doc View Source DelimitIdentifier(String) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string DelimitIdentifier(string identifier) Parameters Type Name Description String identifier Returns Type Description String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTransientExceptionDetector.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTransientExceptionDetector.html",
    "title": "Class NpgsqlTransientExceptionDetector | Npgsql Documentation",
    "keywords": "Class NpgsqlTransientExceptionDetector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTransientExceptionDetector Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTransientExceptionDetector : object Methods | Improve this Doc View Source ShouldRetryOn(Nullable<Exception>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static bool ShouldRetryOn(Exception? ex) Parameters Type Name Description Nullable < Exception > ex Returns Type Description Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTypeMappingSource.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTypeMappingSource.html",
    "title": "Class NpgsqlTypeMappingSource | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeMappingSource This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMappingSource Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTypeMappingSource : RelationalTypeMappingSource Constructors | Improve this Doc View Source NpgsqlTypeMappingSource(TypeMappingSourceDependencies, RelationalTypeMappingSourceDependencies, ISqlGenerationHelper, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description TypeMappingSourceDependencies dependencies RelationalTypeMappingSourceDependencies relationalDependencies ISqlGenerationHelper sqlGenerationHelper INpgsqlSingletonOptions npgsqlSingletonOptions Fields | Improve this Doc View Source EStringTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public readonly StringTypeMapping EStringTypeMapping Field Value Type Description StringTypeMapping Properties | Improve this Doc View Source ClrTypeMappings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual ConcurrentDictionary<Type, RelationalTypeMapping> ClrTypeMappings { get; } Property Value Type Description ConcurrentDictionary < Type , RelationalTypeMapping > | Improve this Doc View Source StoreTypeMappings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual ConcurrentDictionary<string, RelationalTypeMapping[]> StoreTypeMappings { get; } Property Value Type Description ConcurrentDictionary < String , RelationalTypeMapping []> Methods | Improve this Doc View Source FindArrayMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindArrayMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description Nullable < RelationalTypeMapping > | Improve this Doc View Source FindBaseMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindBaseMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description Nullable < RelationalTypeMapping > | Improve this Doc View Source FindContainerMapping(Type, RelationalTypeMapping) Finds the mapping for a container given its CLR type and its containee's type mapping; this is currently used to infer type mappings for ranges and multiranges from their values. Declaration public virtual RelationalTypeMapping? FindContainerMapping(Type containerClrType, RelationalTypeMapping containeeTypeMapping) Parameters Type Name Description Type containerClrType RelationalTypeMapping containeeTypeMapping Returns Type Description Nullable < RelationalTypeMapping > | Improve this Doc View Source FindMapping(IProperty) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping? FindMapping(IProperty property) Parameters Type Name Description IProperty property Returns Type Description Nullable < CoreTypeMapping > | Improve this Doc View Source FindMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping? FindMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description Nullable < RelationalTypeMapping > | Improve this Doc View Source FindRowValueMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindRowValueMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description Nullable < RelationalTypeMapping > | Improve this Doc View Source FindUserRangeMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindUserRangeMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description Nullable < RelationalTypeMapping > | Improve this Doc View Source LoadUserDefinedTypeMappings(ISqlGenerationHelper) To be used in case user-defined mappings are added late, after this TypeMappingSource has already been initialized. This is basically only for test usage. Declaration public virtual void LoadUserDefinedTypeMappings(ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description ISqlGenerationHelper sqlGenerationHelper | Improve this Doc View Source ParseStoreTypeName(Nullable<String>, out Nullable<Boolean>, out Nullable<Int32>, out Nullable<Int32>, out Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string? ParseStoreTypeName(string? storeTypeName, out bool? unicode, out int? size, out int? precision, out int? scale) Parameters Type Name Description Nullable < String > storeTypeName Nullable < Boolean > unicode Nullable < Int32 > size Nullable < Int32 > precision Nullable < Int32 > scale Returns Type Description Nullable < String > | Improve this Doc View Source SetupEnumMappings(ISqlGenerationHelper) Gets all global enum mappings from the ADO.NET layer and creates mappings for them Declaration protected virtual void SetupEnumMappings(ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description ISqlGenerationHelper sqlGenerationHelper"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.PeriodIntervalMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.PeriodIntervalMapping.html",
    "title": "Class PeriodIntervalMapping | Npgsql Documentation",
    "keywords": "Class PeriodIntervalMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping PeriodIntervalMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class PeriodIntervalMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source PeriodIntervalMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public PeriodIntervalMapping() | Improve this Doc View Source PeriodIntervalMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected PeriodIntervalMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeMapping.html",
    "title": "Class TimeMapping | Npgsql Documentation",
    "keywords": "Class TimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping TimeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source TimeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimeMapping() | Improve this Doc View Source TimeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampLocalDateTimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampLocalDateTimeMapping.html",
    "title": "Class TimestampLocalDateTimeMapping | Npgsql Documentation",
    "keywords": "Class TimestampLocalDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping TimestampLocalDateTimeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampLocalDateTimeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source TimestampLocalDateTimeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimestampLocalDateTimeMapping() | Improve this Doc View Source TimestampLocalDateTimeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimestampLocalDateTimeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzInstantMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzInstantMapping.html",
    "title": "Class TimestampTzInstantMapping | Npgsql Documentation",
    "keywords": "Class TimestampTzInstantMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping TimestampTzInstantMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampTzInstantMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source TimestampTzInstantMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimestampTzInstantMapping() | Improve this Doc View Source TimestampTzInstantMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimestampTzInstantMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzOffsetDateTimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzOffsetDateTimeMapping.html",
    "title": "Class TimestampTzOffsetDateTimeMapping | Npgsql Documentation",
    "keywords": "Class TimestampTzOffsetDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping TimestampTzOffsetDateTimeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampTzOffsetDateTimeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source TimestampTzOffsetDateTimeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimestampTzOffsetDateTimeMapping() | Improve this Doc View Source TimestampTzOffsetDateTimeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimestampTzOffsetDateTimeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzZonedDateTimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzZonedDateTimeMapping.html",
    "title": "Class TimestampTzZonedDateTimeMapping | Npgsql Documentation",
    "keywords": "Class TimestampTzZonedDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping TimestampTzZonedDateTimeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampTzZonedDateTimeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source TimestampTzZonedDateTimeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimestampTzZonedDateTimeMapping() | Improve this Doc View Source TimestampTzZonedDateTimeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimestampTzZonedDateTimeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeTzMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeTzMapping.html",
    "title": "Class TimeTzMapping | Npgsql Documentation",
    "keywords": "Class TimeTzMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlTypeMapping TimeTzMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(Nullable<Object>) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(Nullable<Object>) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimeTzMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Improve this Doc View Source TimeTzMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimeTzMapping() | Improve this Doc View Source TimeTzMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimeTzMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(Nullable<ValueConverter>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override CoreTypeMapping Clone(ValueConverter? converter) Parameters Type Name Description Nullable < ValueConverter > converter Returns Type Description CoreTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description String storeType Nullable < Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description Object value Returns Type Description Expression | Improve this Doc View Source GenerateEmbeddedNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description Object value Returns Type Description String Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion Classes NpgsqlArrayConverter<TModelArray, TProviderArray> A value converter that can convert between array types, given another for the elements. NpgsqlValueConverterSelector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Interfaces INpgsqlArrayConverter Implemented by value converters over PostgreSQL arrays."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.INpgsqlArrayConverter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.INpgsqlArrayConverter.html",
    "title": "Interface INpgsqlArrayConverter | Npgsql Documentation",
    "keywords": "Interface INpgsqlArrayConverter Implemented by value converters over PostgreSQL arrays. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlArrayConverter Properties | Improve this Doc View Source ElementConverter The value converter for the element type of the array. Declaration ValueConverter ElementConverter { get; } Property Value Type Description ValueConverter"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlArrayConverter-2.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlArrayConverter-2.html",
    "title": "Class NpgsqlArrayConverter<TModelArray, TProviderArray> | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayConverter<TModelArray, TProviderArray> A value converter that can convert between array types, given another for the elements. Inheritance Object NpgsqlArrayConverter<TModelArray, TProviderArray> Implements INpgsqlArrayConverter Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayConverter<TModelArray, TProviderArray> : ValueConverter<TModelArray, TProviderArray>, INpgsqlArrayConverter Type Parameters Name Description TModelArray TProviderArray Constructors | Improve this Doc View Source NpgsqlArrayConverter(ValueConverter) Constructs a new instance of NpgsqlArrayConverter<TModelArray, TProviderArray> . Declaration public NpgsqlArrayConverter(ValueConverter elementConverter) Parameters Type Name Description ValueConverter elementConverter Properties | Improve this Doc View Source ElementConverter The value converter for the element type of the array. Declaration public virtual ValueConverter ElementConverter { get; } Property Value Type Description ValueConverter Implements INpgsqlArrayConverter"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlValueConverterSelector.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlValueConverterSelector.html",
    "title": "Class NpgsqlValueConverterSelector | Npgsql Documentation",
    "keywords": "Class NpgsqlValueConverterSelector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlValueConverterSelector Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueConverterSelector : ValueConverterSelector Constructors | Improve this Doc View Source NpgsqlValueConverterSelector(ValueConverterSelectorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlValueConverterSelector(ValueConverterSelectorDependencies dependencies) Parameters Type Name Description ValueConverterSelectorDependencies dependencies Methods | Improve this Doc View Source Select(Type, Nullable<Type>) Declaration public override IEnumerable<ValueConverterInfo> Select(Type modelClrType, Type? providerClrType = null) Parameters Type Name Description Type modelClrType Nullable < Type > providerClrType Returns Type Description IEnumerable < ValueConverterInfo >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Classes NpgsqlModificationCommand This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlModificationCommandBatch The Npgsql-specific implementation for . NpgsqlModificationCommandBatchFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlModificationCommandFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlUpdateSqlGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommand.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommand.html",
    "title": "Class NpgsqlModificationCommand | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommand This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlModificationCommand Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommand : ModificationCommand Constructors | Improve this Doc View Source NpgsqlModificationCommand(in ModificationCommandParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlModificationCommand(in ModificationCommandParameters modificationCommandParameters) Parameters Type Name Description ModificationCommandParameters modificationCommandParameters | Improve this Doc View Source NpgsqlModificationCommand(in NonTrackedModificationCommandParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlModificationCommand(in NonTrackedModificationCommandParameters modificationCommandParameters) Parameters Type Name Description NonTrackedModificationCommandParameters modificationCommandParameters Methods | Improve this Doc View Source PropagateResults(RelationalDataReader) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void PropagateResults(RelationalDataReader relationalReader) Parameters Type Name Description RelationalDataReader relationalReader"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch.html",
    "title": "Class NpgsqlModificationCommandBatch | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommandBatch The Npgsql-specific implementation for . Inheritance Object NpgsqlModificationCommandBatch Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommandBatch : ReaderModificationCommandBatch Remarks The usual ModificationCommandBatch implementation is , which selects the number of rows modified via a SQL query. PostgreSQL actually has no way of selecting the modified row count. SQL defines GET DIAGNOSTICS which should provide this, but in PostgreSQL it's only available in PL/pgSQL. See http://www.postgresql.org/docs/9.4/static/unsupported-features-sql-standard.html , identifier F121-01. Instead, the affected row count can be accessed in the PostgreSQL protocol itself, which seems cleaner and more efficient anyway (no additional query). Constructors | Improve this Doc View Source NpgsqlModificationCommandBatch(ModificationCommandBatchFactoryDependencies, Int32) Constructs an instance of the NpgsqlModificationCommandBatch class. Declaration public NpgsqlModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, int maxBatchSize) Parameters Type Name Description ModificationCommandBatchFactoryDependencies dependencies Int32 maxBatchSize Properties | Improve this Doc View Source MaxBatchSize The maximum number of instances that can be added to a single batch; defaults to 1000. Declaration protected override int MaxBatchSize { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddParameter(IColumnModification) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void AddParameter(IColumnModification columnModification) Parameters Type Name Description IColumnModification columnModification | Improve this Doc View Source Consume(RelationalDataReader) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void Consume(RelationalDataReader reader) Parameters Type Name Description RelationalDataReader reader | Improve this Doc View Source ConsumeAsync(RelationalDataReader, CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Task ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken = null) Parameters Type Name Description RelationalDataReader reader CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source ThrowAggregateUpdateConcurrencyException(RelationalDataReader, Int32, Int32, Int32) Throws an exception indicating the command affected an unexpected number of rows. Declaration protected virtual void ThrowAggregateUpdateConcurrencyException(RelationalDataReader reader, int commandIndex, int expectedRowsAffected, int rowsAffected) Parameters Type Name Description RelationalDataReader reader The data reader. Int32 commandIndex The ordinal of the command. Int32 expectedRowsAffected The expected number of rows affected. Int32 rowsAffected The actual number of rows affected. | Improve this Doc View Source ThrowAggregateUpdateConcurrencyExceptionAsync(RelationalDataReader, Int32, Int32, Int32, CancellationToken) Throws an exception indicating the command affected an unexpected number of rows. Declaration protected virtual async Task ThrowAggregateUpdateConcurrencyExceptionAsync(RelationalDataReader reader, int commandIndex, int expectedRowsAffected, int rowsAffected, CancellationToken cancellationToken) Parameters Type Name Description RelationalDataReader reader The data reader. Int32 commandIndex The ordinal of the command. Int32 expectedRowsAffected The expected number of rows affected. Int32 rowsAffected The actual number of rows affected. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Type Description Task A task that represents the asynchronous operation."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatchFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatchFactory.html",
    "title": "Class NpgsqlModificationCommandBatchFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommandBatchFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlModificationCommandBatchFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommandBatchFactory : IModificationCommandBatchFactory Constructors | Improve this Doc View Source NpgsqlModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies, IDbContextOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies dependencies, IDbContextOptions options) Parameters Type Name Description ModificationCommandBatchFactoryDependencies dependencies IDbContextOptions options Methods | Improve this Doc View Source Create() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ModificationCommandBatch Create() Returns Type Description ModificationCommandBatch"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandFactory.html",
    "title": "Class NpgsqlModificationCommandFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommandFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlModificationCommandFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommandFactory : IModificationCommandFactory Methods | Improve this Doc View Source CreateModificationCommand(in ModificationCommandParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IModificationCommand CreateModificationCommand(in ModificationCommandParameters modificationCommandParameters) Parameters Type Name Description ModificationCommandParameters modificationCommandParameters Returns Type Description IModificationCommand | Improve this Doc View Source CreateNonTrackedModificationCommand(in NonTrackedModificationCommandParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual INonTrackedModificationCommand CreateNonTrackedModificationCommand(in NonTrackedModificationCommandParameters modificationCommandParameters) Parameters Type Name Description NonTrackedModificationCommandParameters modificationCommandParameters Returns Type Description INonTrackedModificationCommand"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlUpdateSqlGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlUpdateSqlGenerator.html",
    "title": "Class NpgsqlUpdateSqlGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlUpdateSqlGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlUpdateSqlGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlUpdateSqlGenerator : UpdateSqlGenerator Constructors | Improve this Doc View Source NpgsqlUpdateSqlGenerator(UpdateSqlGeneratorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlUpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies) Parameters Type Name Description UpdateSqlGeneratorDependencies dependencies Methods | Improve this Doc View Source AppendDeleteOperation(StringBuilder, IReadOnlyModificationCommand, Int32, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command Int32 commandPosition Boolean requiresTransaction Returns Type Description ResultSetMapping | Improve this Doc View Source AppendInsertCommand(StringBuilder, String, Nullable<String>, IReadOnlyList<IColumnModification>, IReadOnlyList<IColumnModification>, Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual void AppendInsertCommand(StringBuilder commandStringBuilder, string name, string? schema, IReadOnlyList<IColumnModification> writeOperations, IReadOnlyList<IColumnModification> readOperations, bool overridingSystemValue) Parameters Type Name Description StringBuilder commandStringBuilder String name Nullable < String > schema IReadOnlyList < IColumnModification > writeOperations IReadOnlyList < IColumnModification > readOperations Boolean overridingSystemValue | Improve this Doc View Source AppendInsertOperation(StringBuilder, IReadOnlyModificationCommand, Int32, Boolean, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, bool overridingSystemValue, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command Int32 commandPosition Boolean overridingSystemValue Boolean requiresTransaction Returns Type Description ResultSetMapping | Improve this Doc View Source AppendInsertOperation(StringBuilder, IReadOnlyModificationCommand, Int32, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command Int32 commandPosition Boolean requiresTransaction Returns Type Description ResultSetMapping | Improve this Doc View Source AppendObtainNextSequenceValueOperation(StringBuilder, String, Nullable<String>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void AppendObtainNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string? schema) Parameters Type Name Description StringBuilder commandStringBuilder String name Nullable < String > schema | Improve this Doc View Source AppendStoredProcedureCall(StringBuilder, IReadOnlyModificationCommand, Int32, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ResultSetMapping AppendStoredProcedureCall(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command Int32 commandPosition Boolean requiresTransaction Returns Type Description ResultSetMapping | Improve this Doc View Source AppendUpdateOperation(StringBuilder, IReadOnlyModificationCommand, Int32, out Boolean) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command Int32 commandPosition Boolean requiresTransaction Returns Type Description ResultSetMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Classes NpgsqlSequenceHiLoValueGenerator<TValue> This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlSequenceValueGeneratorState This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlValueGeneratorSelector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Interfaces INpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. INpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlSequenceValueGeneratorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlSequenceValueGeneratorFactory.html",
    "title": "Interface INpgsqlSequenceValueGeneratorFactory | Npgsql Documentation",
    "keywords": "Interface INpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlSequenceValueGeneratorFactory Methods | Improve this Doc View Source Create(IProperty, NpgsqlSequenceValueGeneratorState, INpgsqlRelationalConnection, IRawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration ValueGenerator Create(IProperty property, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger) Parameters Type Name Description IProperty property NpgsqlSequenceValueGeneratorState generatorState INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder IRelationalCommandDiagnosticsLogger commandLogger Returns Type Description ValueGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlValueGeneratorCache.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlValueGeneratorCache.html",
    "title": "Interface INpgsqlValueGeneratorCache | Npgsql Documentation",
    "keywords": "Interface INpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlValueGeneratorCache Methods | Improve this Doc View Source GetOrAddSequenceState(IProperty, IRelationalConnection) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration NpgsqlSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection) Parameters Type Name Description IProperty property IRelationalConnection connection Returns Type Description NpgsqlSequenceValueGeneratorState"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceHiLoValueGenerator-1.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceHiLoValueGenerator-1.html",
    "title": "Class NpgsqlSequenceHiLoValueGenerator<TValue> | Npgsql Documentation",
    "keywords": "Class NpgsqlSequenceHiLoValueGenerator<TValue> This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance Object NpgsqlSequenceHiLoValueGenerator<TValue> Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSequenceHiLoValueGenerator<TValue> : HiLoValueGenerator<TValue> Type Parameters Name Description TValue Constructors | Improve this Doc View Source NpgsqlSequenceHiLoValueGenerator(IRawSqlCommandBuilder, IUpdateSqlGenerator, NpgsqlSequenceValueGeneratorState, INpgsqlRelationalConnection, IRelationalCommandDiagnosticsLogger) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public NpgsqlSequenceHiLoValueGenerator(IRawSqlCommandBuilder rawSqlCommandBuilder, IUpdateSqlGenerator sqlGenerator, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRelationalCommandDiagnosticsLogger commandLogger) Parameters Type Name Description IRawSqlCommandBuilder rawSqlCommandBuilder IUpdateSqlGenerator sqlGenerator NpgsqlSequenceValueGeneratorState generatorState INpgsqlRelationalConnection connection IRelationalCommandDiagnosticsLogger commandLogger Properties | Improve this Doc View Source GeneratesTemporaryValues This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public override bool GeneratesTemporaryValues { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetNewLowValue() This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration protected override long GetNewLowValue() Returns Type Description Int64 | Improve this Doc View Source GetNewLowValueAsync(CancellationToken) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration protected override async Task<long> GetNewLowValueAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Int64 >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorFactory.html",
    "title": "Class NpgsqlSequenceValueGeneratorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance Object NpgsqlSequenceValueGeneratorFactory Implements INpgsqlSequenceValueGeneratorFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSequenceValueGeneratorFactory : object, INpgsqlSequenceValueGeneratorFactory Constructors | Improve this Doc View Source NpgsqlSequenceValueGeneratorFactory(IUpdateSqlGenerator) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public NpgsqlSequenceValueGeneratorFactory(IUpdateSqlGenerator sqlGenerator) Parameters Type Name Description IUpdateSqlGenerator sqlGenerator Methods | Improve this Doc View Source Create(IProperty, NpgsqlSequenceValueGeneratorState, INpgsqlRelationalConnection, IRawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual ValueGenerator Create(IProperty property, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger) Parameters Type Name Description IProperty property NpgsqlSequenceValueGeneratorState generatorState INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder IRelationalCommandDiagnosticsLogger commandLogger Returns Type Description ValueGenerator Implements INpgsqlSequenceValueGeneratorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorState.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorState.html",
    "title": "Class NpgsqlSequenceValueGeneratorState | Npgsql Documentation",
    "keywords": "Class NpgsqlSequenceValueGeneratorState This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance Object NpgsqlSequenceValueGeneratorState Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSequenceValueGeneratorState : HiLoValueGeneratorState Constructors | Improve this Doc View Source NpgsqlSequenceValueGeneratorState(ISequence) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public NpgsqlSequenceValueGeneratorState(ISequence sequence) Parameters Type Name Description ISequence sequence Properties | Improve this Doc View Source Sequence This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual ISequence Sequence { get; } Property Value Type Description ISequence"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorCache.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorCache.html",
    "title": "Class NpgsqlValueGeneratorCache | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance Object NpgsqlValueGeneratorCache Implements INpgsqlValueGeneratorCache IValueGeneratorCache Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGeneratorCache : ValueGeneratorCache, INpgsqlValueGeneratorCache Constructors | Improve this Doc View Source NpgsqlValueGeneratorCache(ValueGeneratorCacheDependencies) Initializes a new instance of the class. Declaration public NpgsqlValueGeneratorCache(ValueGeneratorCacheDependencies dependencies) Parameters Type Name Description ValueGeneratorCacheDependencies dependencies Parameter object containing dependencies for this service. Methods | Improve this Doc View Source GetOrAddSequenceState(IProperty, IRelationalConnection) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual NpgsqlSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection) Parameters Type Name Description IProperty property IRelationalConnection connection Returns Type Description NpgsqlSequenceValueGeneratorState Implements INpgsqlValueGeneratorCache IValueGeneratorCache"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorSelector.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorSelector.html",
    "title": "Class NpgsqlValueGeneratorSelector | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGeneratorSelector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance Object NpgsqlValueGeneratorSelector Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGeneratorSelector : RelationalValueGeneratorSelector Constructors | Improve this Doc View Source NpgsqlValueGeneratorSelector(ValueGeneratorSelectorDependencies, INpgsqlSequenceValueGeneratorFactory, INpgsqlRelationalConnection, IRawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies, INpgsqlSequenceValueGeneratorFactory sequenceFactory, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger) Parameters Type Name Description ValueGeneratorSelectorDependencies dependencies INpgsqlSequenceValueGeneratorFactory sequenceFactory INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder IRelationalCommandDiagnosticsLogger commandLogger Properties | Improve this Doc View Source Cache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual INpgsqlValueGeneratorCache Cache { get; } Property Value Type Description INpgsqlValueGeneratorCache Methods | Improve this Doc View Source Create(IProperty, IEntityType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ValueGenerator Create(IProperty property, IEntityType entityType) Parameters Type Name Description IProperty property IEntityType entityType Returns Type Description ValueGenerator | Improve this Doc View Source Select(IProperty, IEntityType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ValueGenerator Select(IProperty property, IEntityType entityType) Parameters Type Name Description IProperty property IEntityType entityType Returns Type Description ValueGenerator"
  },
  "efcore/index.html": {
    "href": "efcore/index.html",
    "title": "Npgsql Entity Framework Core Provider | Npgsql Documentation",
    "keywords": "Npgsql Entity Framework Core Provider Npgsql has an Entity Framework (EF) Core provider. It behaves like other EF Core providers (e.g. SQL Server), so the general EF Core docs apply here as well. If you're just getting started with EF Core, those docs are the best place to start. Development happens in the Npgsql.EntityFrameworkCore.PostgreSQL repository, all issues should be reported there. Configuring the project file To use the Npgsql EF Core provider, add a dependency on Npgsql.EntityFrameworkCore.PostgreSQL . You can follow the instructions in the general EF Core Getting Started docs . Below is a .csproj file for a console application that uses the Npgsql EF Core provider: <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFramework>netcoreapp3.0</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"3.1.3\" /> </ItemGroup> </Project> Defining a DbContext using System.Collections.Generic; using Microsoft.EntityFrameworkCore; namespace ConsoleApp.PostgreSQL { public class BloggingContext : DbContext { public DbSet<Blog> Blogs { get; set; } public DbSet<Post> Posts { get; set; } protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql(\"Host=my_host;Database=my_db;Username=my_user;Password=my_pw\"); } public class Blog { public int BlogId { get; set; } public string Url { get; set; } public List<Post> Posts { get; set; } } public class Post { public int PostId { get; set; } public string Title { get; set; } public string Content { get; set; } public int BlogId { get; set; } public Blog Blog { get; set; } } } Additional configuration for ASP.NET Core applications Consult this tutorial for general information on how to make ASP.NET work with EF Core. For Npgsql specifically, simply place the following in your ConfigureServices method in Startup.cs : public void ConfigureServices(IServiceCollection services) { // Other DI initializations services.AddDbContext<BloggingContext>(options => options.UseNpgsql(Configuration.GetConnectionString(\"BloggingContext\"))); } Using an Existing Database (Database-First) The Npgsql EF Core provider also supports reverse-engineering a code model from an existing PostgreSQL database (\"database-first\"). To do so, use dotnet CLI to execute the following: dotnet ef dbcontext scaffold \"Host=my_host;Database=my_db;Username=my_user;Password=my_pw\" Npgsql.EntityFrameworkCore.PostgreSQL"
  },
  "efcore/mapping/array.html": {
    "href": "efcore/mapping/array.html",
    "title": "Array Type Mapping | Npgsql Documentation",
    "keywords": "Array Type Mapping PostgreSQL has the unique feature of supporting array data types . This allow you to conveniently and efficiently store several values in a single column, where in other database you'd typically resort to concatenating the values in a string or defining another table with a one-to-many relationship. Note Although PostgreSQL supports multidimensional arrays, these aren't yet supported by the EF Core provider. Mapping arrays Simply define a regular .NET array or List<> property: public class Post { public int Id { get; set; } public string Name { get; set; } public string[] Tags { get; set; } public List<string> AlternativeTags { get; set; } } The provider will create text[] columns for the above two properties, and will properly detect changes in them - if you load an array and change one of its elements, calling SaveChanges will automatically update the row in the database accordingly. Operation translation The provider can also translate CLR array operations to the corresponding SQL operation; this allows you to efficiently work with arrays by evaluating operations in the database and avoids pulling all the data. The following table lists the range operations that currently get translated; all these translations work both for .NET arrays ( int[] ) and for generic Lists ( List<int> ). If you run into a missing operation, please open an issue. .NET SQL Notes array[1] array[1] array.Length / list.Count cardinality(array) array1 == array2 array1 = array2 array1.SequenceEqual(array2) array1 = array2 arrayNonColumn.Contains(element)) element = ANY(arrayNonColumn) Can use regular index arrayColumn.Contains(element) arrayColumn @> ARRAY[element] Can use GIN index array.Append(element) array_append(array, element) Added in 6.0 array1.Concat(array2) array_cat(array1, array2) Added in 6.0 array.IndexOf(element) array_position(array, element) - 1 Added in 6.0 array.IndexOf(element, startIndex) array_position(array, element, startIndex + 1) - 1 Added in 6.0 String.Join(separator, array) array_to_string(array, separator, '') Added in 6.0 array.Any() cardinality(array) > 0 array1.Any(i => array2.Contains(i)) array1 && array2 array1.All(i => array2.Contains(i)) array1 <@ array2 array.Any(s => EF.Functions.Like(string, s)) string LIKE ANY (array) array.Any(s => EF.Functions.ILike(string, s)) string ILIKE ANY (array) array.All(s => EF.Functions.Like(string, s)) string LIKE ALL (array) array.All(s => EF.Functions.ILike(string, s)) string ILIKE ALL (array) EF.Functions.ArrayAgg(values) array_agg(values) Added in 7.0, See Aggregate functions ."
  },
  "efcore/mapping/enum.html": {
    "href": "efcore/mapping/enum.html",
    "title": "Enum Type Mapping | Npgsql Documentation",
    "keywords": "Enum Type Mapping By default, any enum properties in your model will be mapped to database integers. EF Core 2.1 also allows you to map these to strings in the database with value converters. However, the Npgsql provider also allows you to map your CLR enums to database enum types . This option, unique to PostgreSQL, provides the best of both worlds: the enum is internally stored in the database as a number (minimal storage), but is handled like a string (more usable, no need to remember numeric values) and has type safety. Creating your database enum First, you must specify the PostgreSQL enum type on your model, just like you would with tables, sequences or other databases objects: Version 2.2+ Version 2.1 protected override void OnModelCreating(ModelBuilder builder) => builder.HasPostgresEnum<Mood>(); protected override void OnModelCreating(ModelBuilder builder) => builder.HasPostgresEnum(\"mood\", new[] { \"happy\", \"sad\" }); This causes the EF Core provider to create your enum type, mood , with two labels: happy and sad . This will cause the appropriate migration to be created. If you are using context.Database.Migrate() to create your enums, you need to instruct Npgsql to reload all types after applying your migrations: context.Database.Migrate(); using (var conn = (NpgsqlConnection)context.Database.GetDbConnection()) { conn.Open(); conn.ReloadTypes(); } Mapping your enum Even if your database enum is created, Npgsql has to know about it, and especially about your CLR enum type that should be mapped to it. This is done by adding the following code, before any EF Core operations take place. An appropriate place for this is in the static constructor on your DbContext class: static MyDbContext() => NpgsqlConnection.GlobalTypeMapper.MapEnum<Mood>(); This code lets Npgsql know that your CLR enum type, Mood , should be mapped to a database enum called mood . Note that if your enum is in a custom schema (not public ), you must specify that schema in the call to MapEnum . If you're curious as to inner workings, this code maps the enum with the ADO.NET provider - see here for the full docs . When the Npgsql EF Core first initializes, it calls into the ADO.NET provider to get all mapped enums, and sets everything up internally at the EF Core layer as well. Note If you have multiple context types, all MapEnum invocations must be done before any of them is used; this means that the code cannot be in your static constructors, but must be moved to the program start. Using enum properties Once your enum is mapped and created in the database, you can use your CLR enum type just like any other property: public class Blog { public int Id { get; set; } public Mood Mood { get; set; } } using (var ctx = new MyDbContext()) { // Insert ctx.Blogs.Add(new Blog { Mood = Mood.Happy }); ctx.Blogs.SaveChanges(); // Query var blog = ctx.Blogs.Single(b => b.Mood == Mood.Happy); } Altering enum definitions The Npgsql provider only allow adding new values to existing enums, and the appropriate migrations will be automatically created as you add values to your CLR enum type. However, PostgreSQL itself doesn't support removing enum values (since these may be in use), and while renaming values is supported, it isn't automatically done by the provider to avoid using unreliable detection heuristics. Renaming an enum value can be done by including raw SQL in your migrations as follows: migrationBuilder.Sql(@\"ALTER TYPE mood RENAME VALUE 'happy' TO 'thrilled';\"); As always, test your migrations carefully before running them on production databases. Scaffolding from an existing database If you're creating your model from an existing database, the provider will recognize enums in your database, and scaffold the appropriate HasPostgresEnum() lines in your model. However, the scaffolding process has no knowledge of your CLR type, and will therefore skip your enum columns (warnings will be logged). You will have to create the CLR type, add the global mapping and add the properties to your entities. In the future it may be possible to scaffold the actual enum type (and with it the properties), but this doesn't happen at the moment."
  },
  "efcore/mapping/full-text-search.html": {
    "href": "efcore/mapping/full-text-search.html",
    "title": "Full Text Search | Npgsql Documentation",
    "keywords": "Full Text Search PostgreSQL has built-in support for full-text search , which allows you to conveniently and efficiently query natural language documents. Mapping PostgreSQL full text search types are mapped onto .NET types built-in to Npgsql. The tsvector type is mapped to NpgsqlTsVector and tsquery is mapped to NpgsqlTsQuery . This means you can use properties of type NpgsqlTsVector directly in your model to create tsvector columns. The NpgsqlTsQuery type on the other hand, is used in LINQ queries. public class Product { public int Id { get; set; } public string Title { get; set; } public string Description { get; set; } public NpgsqlTsVector SearchVector { get; set; } } Setting up and querying a full text search index on an entity As the PostgreSQL documentation explains , full-text search requires an index to run efficiently. This section will show two ways to do this, each having its benefits and drawbacks. Please read the PostgreSQL docs for more information on the two different approaches. Method 1: tsvector column This method adds a tsvector column to your table, that is automatically updated when the row is modified. First, add an NpgsqlTsVector property to your entity: public class Product { public int Id { get; set; } public string Name { get; set; } public string Description { get; set; } public NpgsqlTsVector SearchVector { get; set; } } Setting up the column to be auto-updated depends on your PostgreSQL version. On PostgreSQL 12 and above, the column can be a simple generated column , and version 5.0.0 contains sugar for setting that up. In previous versions, you must manually set up database triggers that update the column instead. PostgreSQL 12+ Older Versions Note The below only works on PostgreSQL 12 and version 5.0.0 of the EF Core provider. The following will set up a generated tsvector column, over which you can easily create an index: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Product>() .HasGeneratedTsVectorColumn( p => p.SearchVector, \"english\", // Text search config p => new { p.Name, p.Description }) // Included properties .HasIndex(p => p.SearchVector) .HasMethod(\"GIN\"); // Index method on the search vector (GIN or GIST) } First, modify the OnModelCreating() of your context class to add an index as follows: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Product>() .HasIndex(p => p.SearchVector) .HasMethod(\"GIN\"); // Index method on the search vector (GIN or GIST) } Now generate a migration ( dotnet ef migrations add .... ), and open it with your favorite editor, adding the following: public partial class CreateProductTable : Migration { protected override void Up(MigrationBuilder migrationBuilder) { // Migrations for creation of the column and the index will appear here, all we need to do is set up the trigger to update the column: migrationBuilder.Sql( @\"CREATE TRIGGER product_search_vector_update BEFORE INSERT OR UPDATE ON \"\"Products\"\" FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger(\"\"SearchVector\"\", 'pg_catalog.english', \"\"Name\"\", \"\"Description\"\");\"); // If you were adding a tsvector to an existing table, you should populate the column using an UPDATE // migrationBuilder.Sql(\"UPDATE \\\"Products\\\" SET \\\"Name\\\" = \\\"Name\\\";\"); } protected override void Down(MigrationBuilder migrationBuilder) { // Migrations for dropping of the column and the index will appear here, all we need to do is drop the trigger: migrationBuilder.Sql(\"DROP TRIGGER product_search_vector_update\"); } } Once your auto-updated tsvector column is set up, any inserts or updates on the Products table will now update the SearchVector column and maintain it automatically. You can query it as follows: var context = new ProductDbContext(); var npgsql = context.Products .Where(p => p.SearchVector.Matches(\"Npgsql\")) .ToList(); Method 2: Expression index Version 5.0.0 of the provider includes sugar for defining the appropriate expression index; if you're using an older version, you'll have to define a raw SQL migration yourself. Version 5.0.0 Older Versions modelBuilder.Entity<Blog>() .HasIndex(b => new { b.Title, b.Description }) .HasMethod(\"GIN\") .IsTsVectorExpressionIndex(\"english\"); Create a migration which will contain the index creation SQL ( dotnet ef migrations add ... ). At this point, open the generated migration with your editor and add the following: protected override void Up(MigrationBuilder migrationBuilder) { migrationBuilder.Sql(@\"CREATE INDEX fts_idx ON \"\"Product\"\" USING GIN (to_tsvector('english', \"\"Name\"\" || ' ' || \"\"Description\"\"));\"); } protected override void Down(MigrationBuilder migrationBuilder) migrationBuilder.Sql(@\"DROP INDEX fts_idx;\"); } Once the index is created on the Title and Description columns, you can query as follows: var context = new ProductDbContext(); var npgsql = context.Products .Where(p => EF.Functions.ToTsVector(\"english\", p.Title + \" \" + p.Description) .Matches(\"Npgsql\")) .ToList(); Computed column over JSON columns Starting with 7.0, the provider can also create computed tsvector columns over JSON columns. Simply use HasGeneratedTsVectorColumn() as shown above, and when applied to JSON columns, the provider will automatically generate json_to_tsvector/jsonb_to_tsvector as appropriate. Note that this will pass the filter all to these functions, meaning that all values in the JSON document will be included. To customize the filter - or to create the computed column on older versions of the provider - simply specify the function yourself via HasComputedColumnSql . Operation translation Almost all PostgreSQL full text search functions can be called through LINQ queries. All supported EF Core LINQ methods are defined in extension classes in the Microsoft.EntityFrameworkCore namespace, so simply referencing the Npgsql provider will light up these methods. The following table lists all supported operations; if an operation you need is missing, please open an issue to request for it. .NET SQL EF.Functions.ToTsVector(string) to_tsvector(string) EF.Functions.ToTsVector(\"english\", string) to_tsvector('english'::regconfig, string) EF.Functions.ToTsQuery(string)) to_tsquery(string) EF.Functions.ToTsQuery(\"english\", string ) to_tsquery('english'::regconfig, string) EF.Functions.PlainToTsQuery(string) plainto_tsquery(string) EF.Functions.PlainToTsQuery(\"english\", string) plainto_tsquery('english'::regconfig, string) EF.Functions.PhraseToTsQuery(string) phraseto_tsquery(string) EF.Functions.PhraseToTsQuery(\"english\", string) phraseto_tsquery('english'::regconfig, string) EF.Functions.WebSearchToTsQuery(string) websearch_to_tsquery(string) EF.Functions.WebSearchToTsQuery(\"english\", string) websearch_to_tsquery('english'::regconfig, string) EF.functions.ArrayToTsVector(new[] { \"a\", \"b\" }) array_to_tsvector(ARRAY['a', 'b']) NpgsqlTsVector.Parse(string) CAST(string AS tsvector) NpgsqlTsQuery.Parse(string) CAST(queryString AS tsquery) tsvector.Matches(string) tsvector @@ plainto_tsquery(string) tsvector.Matches(tsquery) tsvector @@ tsquery tsquery1.And(tsquery2) tsquery1 && tsquery2 tsquery1.Or(tsquery2) tsquery1 || tsquery2 tsquery.ToNegative() !! tsquery tsquery1.Contains(tsquery2) tsquery1 @> tsquery2 tsquery1.IscontainedIn(tsquery2) tsquery1 <@ tsquery2 tsquery.GetNodeCount() numnode(query) tsquery.GetQueryTree() querytree(query) tsquery.GetResultHeadline(\"a b c\") ts_headline('a b c', query) tsquery.GetResultHeadline(\"a b c\", \"MinWords=1, MaxWords=2\") ts_headline('a b c', query, 'MinWords=1, MaxWords=2') tsquery.Rewrite(targetQuery, substituteQuery) ts_rewrite(to_tsquery(tsquery), to_tsquery(targetQuery), to_tsquery(substituteQuery)) tsquery1.ToPhrase(tsquery2) tsquery_phrase(tsquery1, tsquery2) tsquery1.ToPhrase(tsquery2, distance) tsquery_phrase(tsquery1, tsquery2, distance) tsvector1.Concat(tsvector2) tsvector1 || tsvector2 tsvector.Delete(\"x\") ts_delete(tsvector, 'x') tsvector.Delete(new[] { \"x\", \"y\" }) ts_delete(tsvector, ARRAY['x', 'y']) tsvector.Filter(new[] { \"x\", \"y\" }) ts_filter(tsvector, ARRAY['x', 'y']) tsvector.GetLength() length(tsvector) tsvector.Rank(tsquery) ts_rank(tsvector, tsquery) tsvector.RankCoverDensity(tsquery) ts_rank_cd(tsvector, tsquery) tsvector.SetWeight(NpgsqlTsVector.Lexeme.Weight.A) setweight(tsvector, 'A') tsvector.ToStripped() strip(tsvector) EF.Functions.Unaccent(string) unaccent(string) EF.Functions.Unaccent(regdictionary, string) unaccent(regdictionary, string)"
  },
  "efcore/mapping/general.html": {
    "href": "efcore/mapping/general.html",
    "title": "Type mapping | Npgsql Documentation",
    "keywords": "Type mapping The EF Core provider transparently maps the types supported by Npgsql at the ADO.NET level - see the Npgsql ADO type mapping page . This means that you can use PostgreSQL-specific types, such as inet or circle , directly in your entities. Simply define your properties just as if they were a simple type, such as a string : public class MyEntity { public int Id { get; set; } public string Name { get; set; } public IPAddress IPAddress { get; set; } public NpgsqlCircle Circle { get; set; } public int[] SomeInts { get; set; } } Special types such as arrays and enums have their own documentation pages with more details. PostgreSQL composite types , while supported at the ADO.NET level, aren't yet supported in the EF Core provider. This is tracked by #22 . Explicitly specifying data types In some cases, your .NET property type can be mapped to several PostgreSQL data types; a good example is a string , which will be mapped to text by default, but can also be mapped to jsonb . You can use either Data Annotation attributes or the Fluent API to configure the PostgreSQL data type: Data Annotations Fluent API [Column(TypeName=\"jsonb\")] public string SomeStringProperty { get; set; } builder.Entity<Blog>() .Property(b => b.SomeStringProperty) .HasColumnType(\"jsonb\");"
  },
  "efcore/mapping/json.html": {
    "href": "efcore/mapping/json.html",
    "title": "JSON Mapping | Npgsql Documentation",
    "keywords": "JSON Mapping Note EF Core 7.0 introduced support for JSON columns . Npgsql's JSON support - detailed below - is different, and has been available since version 3.0. We plan to adopt EF's JSON support in version 8.0. PostgreSQL has rich, built-in support for storing JSON columns and efficiently performing complex queries operations on them. Newcomers can read more about the PostgreSQL support on the JSON types page , and on the functions and operators page . Note that the below mapping mechanisms support both the jsonb and json types, although the former is almost always preferred for efficiency reasons. The Npgsql EF Core provider allows you to map PostgreSQL JSON columns in three different ways: As simple strings As strongly-typed user-defined types (POCOs) As System.Text.Json DOM types (JsonDocument or JsonElement) String mapping The simplest form of mapping to JSON is via a regular string property, just like an ordinary text column: Data Annotations Fluent API public class SomeEntity { public int Id { get; set; } [Column(TypeName = \"jsonb\")] public string Customer { get; set; } } class MyContext : DbContext { public DbSet<SomeEntity> SomeEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<SomeEntity>() .Property(b => b.Customer) .HasColumnType(\"jsonb\"); } } public class SomeEntity { public int Id { get; set; } public string Customer { get; set; } } With string mapping, the EF Core provider will save and load properties to database JSON columns, but will not do any further serialization or parsing - it's the developer's responsibility to handle the JSON contents, possibly using System.Text.Json to parse them. This mapping approach is more limited compared to the others. POCO mapping If your column's JSON documents have a stable schema, you can map them to your own .NET types (or POCOs). The provider will use the new System.Text.Json APIs under the hood to serialize instances to JSON documents before sending them to the database, and to deserialize documents coming from the database back. Just like EF Core can map a .NET type to rows in the table, this capability allows you to map a .NET type to a single JSON column. Mapping POCOs is extremely easy: simply add a property with your custom POCO type and instruct the provider to map it to JSON: Data Annotations Fluent API public class SomeEntity { public int Id { get; set; } [Column(TypeName = \"jsonb\")] public Customer Customer { get; set; } } public class Customer // Mapped to a JSON column in the table { public string Name { get; set; } public int Age { get; set; } public Order[] Orders { get; set; } } public class Order // Part of the JSON column { public decimal Price { get; set; } public string ShippingAddress { get; set; } } class MyContext : DbContext { public DbSet<SomeEntity> SomeEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<SomeEntity>() .Property(b => b.Customer) .HasColumnType(\"jsonb\"); } } public class SomeEntity // Mapped to a database table { public int Id { get; set; } public Customer Customer { get; set; } } public class Customer // Mapped to a JSON column in the table { public string Name { get; set; } public int Age { get; set; } public Order[] Orders { get; set; } } public class Order // Part of the JSON column { [JsonPropertyName(\"OrderPrice\")] // Controls the JSON property name public decimal Price { get; set; } public string ShippingAddress { get; set; } } You can now assign a regular Customer instance to the property, and once you call SaveChanges() it will be serialized to database, producing a document such as the following: { \"Age\": 25, \"Name\": \"Joe\", \"Orders\": [ { \"OrderPrice\": 9, \"ShippingAddress\": \"Some address 1\" }, { \"OrderPrice\": 23, \"ShippingAddress\": \"Some address 2\" } ] } Reading is just as simple: var someEntity = context.Entities.First(); Console.WriteLine(someEntity.Customer.Orders[0].Price) This provides a seamless mapping approach, and supports embedding nested types and arrays, resulting in complex JSON document schemas as shown above. This approach also allows you to traverse loaded JSON documents in a type-safe way, using regular C# syntax, and to use LINQ to query inside database JSON documents (see Querying JSON columns below). JsonDocument DOM mapping If your column JSON schema isn't stable, a strongly-typed POCO mapping may not be appropriate. The Npgsql provider also allows you to map the DOM document type provided by System.Text.Json APIs . public class SomeEntity : IDisposable { public int Id { get; set; } public JsonDocument Customer { get; set; } public void Dispose() => Customer?.Dispose(); } Note that neither a data annotation nor the fluent API are required, as JsonDocument is automatically recognized and mapped to jsonb . Note also that JsonDocument is disposable, so the entity type is made disposable as well; not dispose the JsonDocument will result in the memory not being returned to the pool, which will increase GC impact across various parts of the framework. Once a document is loaded from the database, you can traverse it: var someEntity = context.Entities.First(); Console.WriteLine(someEntity.Customer.RootElement.GetProperty(\"Orders\")[0].GetProperty(\"Price\").GetInt32()); Querying JSON columns Saving and loading documents these documents wouldn't be much use without the ability to query them. You can express your queries via the same LINQ constructs you are already using in EF Core: POCO Mapping JsonDocument Mapping var joes = context.CustomerEntries .Where(e => e.Customer.Name == \"Joe\") .ToList(); var joes = context.CustomerEntries .Where(e => e.Customer.RootElement.GetProperty(\"Name\").GetString() == \"Joe\") .ToList(); The provider will recognize the traversal of a JSON document, and translate it to the correspond PostgreSQL JSON traversal operator, producing the following PostgreSQL-specific SQL: SELECT c.\"\"Id\"\", c.\"\"Customer\"\" FROM \"\"CustomerEntries\"\" AS c WHERE c.\"\"Customer\"\"->>'Name' = 'Joe' If indexes are set up properly , this can result in very efficient, server evaluation of searches with database JSON documents. The following expression types and functions are translated: POCO Mapping JsonDocument Mapping .NET SQL customer.Name customer->>'Name' customer.Orders[1].Price customer#>>'{Orders,0,Price}'[1] customer.Orders.Length (or Count) jsonb_array_length(customer->'Orders') EF.Functions.JsonContains(customer, @\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\") 1 customer @> '{\"Name\": \"Joe\", \"Age\": 25}' EF.Functions.JsonContained(@\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\", e.Customer) 1 '{\"Name\": \"Joe\", \"Age\": 25}' <@ customer EF.Functions.JsonExists(e.Customer, \"Age\") customer ? 'Age' EF.Functions.JsonExistsAny(e.Customer, \"Age\", \"Address\") customer ?| ARRAY['Age','Address'] EF.Functions.JsonExistsAll(e.Customer, \"Age\", \"Address\") customer ?& ARRAY['Age','Address'] EF.Functions.JsonTypeof(e.Customer.Age) jsonb_typeof(customer->'Age') .NET SQL customer.RootElement.GetProperty(\"Name\").GetString() customer->>'Name' = 'Joe' customer.RootElement.GetProperty(\"Orders\")[1].GetProperty(\"Price\").GetInt32() customer#>>'{Orders,0,Price}'[1] = 8 customer.RootElement.GetProperty(\"Orders\").GetArrayLength() jsonb_array_length(customer->'Orders' EF.Functions.JsonContains(customer, @\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\") 1 customer @> '{\"Name\": \"Joe\", \"Age\": 25}' EF.Functions.JsonContained(@\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\", customer) 1 '{\"Name\": \"Joe\", \"Age\": 25}' <@ customer EF.Functions.JsonExists(customer, \"Age\") customer ? 'Age' EF.Functions.JsonExistsAny(customer, \"Age\", \"Address\") customer ?| ARRAY['Age','Address'] EF.Functions.JsonExistsAll(customer, \"Age\", \"Address\") customer ?& ARRAY['Age','Address'] EF.Functions.JsonTypeof(customer.GetProperty(\"Age\")) == \"number\" jsonb_typeof(customer->'Age') = 'number' 1 JSON functions which accept a .NET object will not accept .NET scalar values. For example, to pass a scalar to JsonContains wrap it in a JsonElement or alternatively wrap it in a string. Note: a root level JSON string value requires quotes and escaping @\"\"\"Joe\"\"\" , just as any nested JSON string value would. Indexing JSON columns Note A section on indices will be added. In the meantime consult the PostgreSQL documentation and other guides on the Internet. These are early days for EF Core JSON support, and you'll likely run into some limitations. Please let us know how the current features are working for you and what you'd like to see."
  },
  "efcore/mapping/nodatime.html": {
    "href": "efcore/mapping/nodatime.html",
    "title": "Date/Time Mapping with NodaTime | Npgsql Documentation",
    "keywords": "Date/Time Mapping with NodaTime What is NodaTime By default, the PostgreSQL date/time types are mapped to the built-in .NET types ( DateTime , TimeSpan ). Unfortunately, these built-in types are flawed in many ways. The NodaTime library was created to solve many of these problems, and if your application handles dates and times in anything but the most basic way, you should consider using it. To learn more read this blog post by Jon Skeet . Beyond NodaTime's general advantages, some specific advantages NodaTime for PostgreSQL date/time mapping include: NodaTime defines some types which are missing from the BCL, such as LocalDate , LocalTime , and OffsetTime . These cleanly correspond to PostgreSQL date , time and timetz . Period is much more suitable for mapping PostgreSQL interval than TimeSpan . NodaTime types can fully represent PostgreSQL's microsecond precision, and can represent dates outside the BCL's date limit (1AD-9999AD). Setup To set up the NodaTime plugin, add the Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime nuget to your project. Then, make the following modification to your UseNpgsql() line: protected override void OnConfiguring(DbContextOptionsBuilder builder) { builder.UseNpgsql(\"Host=localhost;Database=test;Username=npgsql_tests;Password=npgsql_tests\", o => o.UseNodaTime()); } This will set up all the necessary mappings and operation translators. You can now use NodaTime types as regular properties in your entities, and even perform some operations: public class Post { public int Id { get; set; } public string Name { get; set; } public Instant CreationTime { get; set; } } var recentPosts = context.Posts.Where(p => p.CreationTime > someInstant); Operation translation The provider knows how to translate many members and methods on mapped NodaTime types. For example, the following query will be translated to SQL and evaluated server-side: // Get all events which occurred on a Monday var mondayEvents = context.Events.Where(p => p.SomeDate.DayOfWeek == DayOfWeek.Monday); // Get all events which occurred before the year 2000 var oldEvents = context.Events.Where(p => p.SomeDate.Year < 2000); Following is the list of supported NodaTime translations; If an operation you need is missing, please open an issue to request for it. Note Most translations on ZonedDateTime and Period were added in version 6.0 .NET SQL Notes SystemClock.Instance.GetCurrentInstant() now() LocalDateTime.Date date_trunc('day', timestamp) LocalDateTime.Second (also LocalTime, ZonedDateTime) date_part('second', timestamp)::INT LocalDateTime.Minute (also LocalTime, ZonedDateTime) date_part('minute', timestamp)::INT LocalDateTime.Hour (also LocalTime, ZonedDateTime) date_part('hour', timestamp)::INT LocalDateTime.Day, (also LocalDate, ZonedDateTime) date_part('day', timestamp)::INT LocalDateTime.Month (also LocalDate, ZonedDateTime) date_part('month', timestamp)::INT LocalDateTime.Year (also LocalDate, ZonedDateTime) date_part('year', timestamp)::INT LocalDateTime.DayOfWeek (also LocalDate, ZonedDateTime) floor(date_part('dow', timestamp))::INT LocalDateTime.DayOfYear (also LocalDate, ZonedDateTime) date_part('doy', timestamp)::INT Period.Seconds (also Duration) date_part('second', interval)::INT Period.Minutes (also Duration) date_part('minute', interval)::INT Period.Hours (also Duration) date_part('hour', interval)::INT Period.Days (also Duration) date_part('day', interval)::INT Period.Months date_part('month', interval)::INT Period.Years date_part('year', interval)::INT Period.FromSeconds make_interval(seconds => int) Period.FromMinutes make_interval(minutes => int) Period.FromHours make_interval(hours => int) Period.FromDays make_interval(days => int) Period.FromWeeks make_interval(weeks => int) Period.FromMonths make_interval(months => int) Period.FromYears make_interval(years => int) Duration.TotalMilliseconds date_part('epoch', interval) / 0.001 Duration.TotalSeconds date_part('epoch', interval) Duration.TotalMinutes date_part('epoch', interval) / 60.0 Duration.TotalDays date_part('epoch', interval) / 86400.0 Duration.TotalHours date_part('epoch', interval) / 3600.0 ZonedDateTime.LocalDateTime timestamptz AT TIME ZONE 'UTC' Added in 6.0 DateInterval.Length upper(daterange) - lower(daterange) Added in 6.0 DateInterval.Start lower(daterange) Added in 6.0 DateInterval.End upper(daterange) - INTERVAL 'P1D' Added in 6.0 DateInterval.Contains(LocalDate) daterange @> date Added in 6.0 DateInterval.Contains(DateInterval) daterange @> daterange Added in 6.0 DateInterval.Intersection(DateInterval) daterange * daterange Added in 6.0 DateInterval.Union(DateInterval) daterange + daterange Added in 6.0 Instant.InZone(DateTimeZoneProviders.Tzdb[\"Europe/Berlin\"]).LocalDateTime timestamptz AT TIME ZONE 'Europe/Berlin' Added in 6.0 LocalDateTime.InZoneLeniently(DateTimeZoneProviders.Tzdb[\"Europe/Berlin\"]).ToInstant() timestamp AT TIME ZONE 'Europe/Berlin' Added in 6.0 ZonedDateTime.ToInstant No PG operation (.NET-side conversion from ZonedDateTime to Instant only) Added in 6.0 Instant.InUtc No PG operation (.NET-side conversion from Instant to ZonedDateTime only) Added in 6.0 Instant.ToDateTimeUtc No PG operation (.NET-side conversion from Instant to UTC DateTime only) Added in 6.0 EF.Functions.Sum(periods) sum(periods) Added in 7.0, see Aggregate functions . EF.Functions.Sum(durations) sum(durations) Added in 7.0, see Aggregate functions . EF.Functions.Average(periods) avg(durations) Added in 7.0, see Aggregate functions . EF.Functions.Average(durations) avg(durations) Added in 7.0, see Aggregate functions . In addition to the above, most arithmetic operators are also translated (e.g. LocalDate + Period)."
  },
  "efcore/mapping/nts.html": {
    "href": "efcore/mapping/nts.html",
    "title": "Spatial Mapping with NetTopologySuite | Npgsql Documentation",
    "keywords": "Spatial Mapping with NetTopologySuite Note It's recommended that you start by reading the general Entity Framework Core docs on spatial support . PostgreSQL supports spatial data and operations via the PostGIS extension , which is a mature and feature-rich database spatial implementation. .NET doesn't provide a standard spatial library, but NetTopologySuite is a leading spatial library. The Npgsql EF Core provider has a plugin which allows you to map the NTS types to PostGIS columns, allowing seamless reading and writing. This is the recommended way to interact with spatial types in Npgsql. Note that the EF Core NetTopologySuite plugin depends on the Npgsql ADO.NET NetTopology plugin , which provides NetTopologySuite support at the lower level. The EF Core plugin automatically sets up the ADO.NET plugin. Setup To use the NetTopologySuite plugin, add the Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite nuget to your project. Then, make the following modification to your UseNpgsql() line: protected override void OnConfiguring(DbContextOptionsBuilder builder) { builder.UseNpgsql(\"Host=localhost;Database=test;Username=npgsql_tests;Password=npgsql_tests\", o => o.UseNetTopologySuite()); } This sets up all the necessary mappings and operation translators. In addition, to make sure that the PostGIS extension is installed in your database, add the following to your DbContext: protected override void OnModelCreating(ModelBuilder builder) { builder.HasPostgresExtension(\"postgis\"); } At this point spatial support is set up. You can now use NetTopologySuite types as regular properties in your entities, and even perform some operations: public class City { public int Id { get; set; } public string Name { get; set; } public Point Location { get; set; } } var nearbyCities = context.Cities.Where(c => c.Location.Distance(somePoint) < 100); Constraining your type names With the code above, the provider will create a database column of type geometry . This is perfectly fine, but be aware that this type accepts any geometry type (point, polygon...), with any coordinate system (XY, XYZ...). It's good practice to constrain the column to the exact type of data you will be storing, but unfortunately the provider isn't aware of your required coordinate system and therefore can't do that for you. Consider explicitly specifying your column types on your properties as follows: [Column(TypeName=\"geometry (point)\")] public Point Location { get; set; } This will constrain your column to XY points only. The same can be done via the fluent API with HasColumnType() . Geography (geodetic) support PostGIS has two types: geometry (for Cartesian coordinates) and geography (for geodetic or spherical coordinates). You can read about the geometry/geography distinction in the PostGIS docs or in this blog post . In a nutshell, geography is much more accurate when doing calculations over long distances, but is more expensive computationally and supports only a small subset of the spatial operations supported by geometry . The Npgsql provider will be default map all NetTopologySuite types to PostGIS geometry . However, you can instruct it to map certain properties to geography instead: protected override void OnModelCreating(ModelBuilder builder) { builder.Entity<City>().Property(b => b.Location).HasColumnType(\"geography (point)\"); } or via an attribute: public class City { public int Id { get; set; } public string Name { get; set; } [Column(TypeName=\"geography\")] public Point Location { get; set; } } Once you do this, your column will be created as geography , and spatial operations will behave as expected. Operation translation The following table lists NetTopologySuite operations which are translated to PostGIS SQL operations. This allows you to use these NetTopologySuite methods and members efficiently - evaluation will happen on the server side. Since evaluation happens at the server, table data doesn't need to be transferred to the client (saving bandwidth), and in some cases indexes can be used to speed things up. Note that the plugin is far from covering all spatial operations. If an operation you need is missing, please open an issue to request for it. .NET SQL Notes geom.Area() ST_Area(geom) geom.AsBinary() ST_AsBinary(geom) geom.AsText() ST_AsText(geom) geom.Boundary ST_Boundary(geom) geom.Buffer(d) ST_Buffer(geom,d) geom.Centroid ST_Centroid(geom) geom1.Contains(geom2) ST_Contains(geom1, geom2) geomCollection.Count ST_NumGeometries(geom1) linestring.Count ST_NumPoints(linestring) geom1.ConvexHull() ST_ConvexHull(geom1) geom1.Covers(geom2) ST_Covers(geom1, geom2) geom1.CoveredBy(geom2) ST_CoveredBy(geom1, geom2) geom1.Crosses(geom2) ST_Crosses(geom1, geom2) geom1.Difference(geom2) ST_Difference(geom1, geom2) geom1.Dimension ST_Dimension(geom1) geom1.Disjoint(geom2) ST_Disjoint(geom1, geom2) geom1.Distance(geom2) ST_Distance(geom1, geom2) EF.Functions.DistanceKnn(geom1, geom2) geom1 <-> geom2 Added in 6.0 EF.Functions.Distance(geom1, geom2, useSpheriod) ST_Distance(geom1, geom2, useSpheriod) Added in 6.0 geom1.Envelope ST_Envelope(geom1) geom1.ExactEquals(geom2) ST_OrderingEquals(geom1, geom2) lineString.EndPoint ST_EndPoint(lineString) polygon.ExteriorRing ST_ExteriorRing(polygon) geom1.Equals(geom2) geom1 = geom2 geom1.Polygon.EqualsExact(geom2) geom1 = geom2 geom1.EqualsTopologically(geom2) ST_Equals(geom1, geom2) EF.Functions.Force2D ST_Force2D(geom) Added in 6.0 geom.GeometryType GeometryType(geom) geomCollection.GetGeometryN(i) ST_GeometryN(geomCollection, i) linestring.GetPointN(i) ST_PointN(linestring, i) geom1.Intersection(geom2) ST_Intersection(geom1, geom2) geom1.Intersects(geom2) ST_Intersects(geom1, geom2) geom.InteriorPoint ST_PointOnSurface(geom) lineString.IsClosed() ST_IsClosed(lineString) geomCollection.IsEmpty() ST_IsEmpty(geomCollection) linestring.IsRing ST_IsRing(linestring) geom.IsWithinDistance(geom2,d) ST_DWithin(geom1, geom2, d) EF.Functions.IsWithinDistance(geom1, geom2, d, useSpheriod) ST_DWithin(geom1, geom2, d, useSpheriod) Added in 6.0 geom.IsSimple() ST_IsSimple(geom) geom.IsValid() ST_IsValid(geom) lineString.Length ST_Length(lineString) geom.Normalized ST_Normalize(geom) geomCollection.NumGeometries ST_NumGeometries(geomCollection) polygon.NumInteriorRings ST_NumInteriorRings(polygon) lineString.NumPoints ST_NumPoints(lineString) geom1.Overlaps(geom2) ST_Overlaps(geom1, geom2) geom.PointOnSurface ST_PointOnSurface(geom) geom1.Relate(geom2) ST_Relate(geom1, geom2) geom.Reverse() ST_Reverse(geom) geom1.SRID ST_SRID(geom1) lineString.StartPoint ST_StartPoint(lineString) geom1.SymmetricDifference(geom2) ST_SymDifference(geom1, geom2) geom.ToBinary() ST_AsBinary(geom) geom.ToText() ST_AsText(geom) geom1.Touches(geom2) ST_Touches(geom1, geom2) EF.Functions.Transform(geom, srid) ST_Transform(geom, srid) geom1.Union(geom2) ST_Union(geom1, geom2) geom1.Within(geom2) ST_Within(geom1, geom2) point.M ST_M(point) point.X ST_X(point) point.Y ST_Y(point) point.Z ST_Z(point) UnaryUnionOp.Union(geometries) ST_Union(geometries) Added in 7.0, see Aggregate functions . GeometryCombiner.Combine(geometries) ST_Collect(geometries) Added in 7.0, see Aggregate functions . EnvelopeCombiner.CombineAsGeometry(geometries) ST_Extent(geometries)::geometry Added in 7.0, see Aggregate functions . ConvexHull.Create(geometries) ST_ConvexHull(geometries) Added in 7.0, see Aggregate functions ."
  },
  "efcore/mapping/range.html": {
    "href": "efcore/mapping/range.html",
    "title": "Ranges and Multiranges | Npgsql Documentation",
    "keywords": "Ranges and Multiranges PostgreSQL has the unique feature of supporting range data types . Ranges represent a range of numbers, dates or other data types, and allow you to easily query ranges which contain a value, perform set operations (e.g. query ranges which contain other ranges), and other similar operations. The range operations supported by PostgreSQL are listed in this page . The Npgsql EF Core provider allows you to seamlessly map PostgreSQL ranges, and even perform operations on them that get translated to SQL for server evaluation. In addition, PostgreSQL 14 introduced multiranges , which are basically sorted arrays of non-overlapping ranges with set-theoretic operations defined over them. Most range operators also work on multiranges, and they have a few functions of their own. Multirange support in the EF Core provider was introduced in version 6.0.0. Ranges Npgsql maps PostgreSQL ranges to the generic CLR type NpgsqlRange<T> : public class Event { public int Id { get; set; } public string Name { get; set; } public NpgsqlRange<DateTime> Duration { get; set; } } This will create a column of type daterange in your database. You can similarly have properties of type NpgsqlRange<int> , NpgsqlRange<long> , etc. User-defined ranges PostgreSQL comes with 6 built-in ranges: int4range , int8range , numrange , tsrange , tstzrange , daterange ; these can be used simply by adding the appropriate NpgsqlRange<T> property in your entities as shown above. You can also define your own range types over arbitrary types, and use those in EF Core as well. To make the EF Core type mapper aware of your user-defined range, call the MapRange() method in your context's OnConfiguring() method as follows: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => options.MapRange<float>(\"floatrange\")); This allows you to have properties of type NpgsqlRange<float> , which will be mapped to PostgreSQL floatrange . The above does not create the floatrange type for you. In order to do that, include the following in your context's OnModelCreating() : protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.HasPostgresRange(\"floatrange\", \"real\"); This will cause the appropriate CREATE TYPE ... AS RANGE statement to be generated in your migrations, ensuring that your range is created and ready for use. Note that HasPostgresRange() supports additional parameters as supported by PostgreSQL CREATE TYPE . Multiranges Note This feature was introduced in version 6.0 Npgsql maps arrays or lists of NpgsqlRange<T> to PostgreSQL multiranges: public class Store { public int Id { get; set; } public string Name { get; set; } public NpgsqlRange<DateTime>[] OpeningTimes { get; set; } } Operation translation Ranges can be queried via extensions methods on NpgsqlRange : var events = context.Events.Where(p => p.Duration.Contains(someDate)); This will translate to an SQL operation using the PostgreSQL @> operator, evaluating at the server and saving you from transferring the entire Events table to the client. Note that you can (and probably should) create indexes to make this operation more efficient, see the PostgreSQL docs for more info. The following table lists the range operations that currently get translated. Most operations work on both ranges and multiranges (starting with version 6.0.0); the multirange version is omitted for brevity. If you run into a missing operation, please open an issue. .NET SQL range.LowerBound lower(range) range.UpperBound upper(range) range.LowerBoundIsInclusive lower_inc(range) range.UpperBoundIsInclusive upper_inc(range) range.LowerBoundIsInfinite lower_inf(range) range.UpperBoundIsInfinite upper_inf(range) range.IsEmpty isempty(range) multirange.Any() NOT is_empty(multirange) range.Contains(i) range @> i range1.Contains(range2) range @> range2 range1.ContainedBy(range2) range1 <@ range2 range1.Overlaps(range2) range1 && range2 range1.IsStrictlyLeftOf(range2) range1 << range2 range1.IsStrictlyRightOf(range2) range1 >> range2 range1.DoesNotExtendLeftOf(range2) range1 &> range2 range1.DoesNotExtendRightOf(range2) range1 <& range2 range1.IsAdjacentTo(range2) range1 -|- range2 range1.Union(range2) range1 + range2 range1.Intersect(range2) range1 * range2 range1.Except(range2) range1 - range2 range1.Merge(range2) range_merge(range1, range2) multirange.Merge() range_merge(multirange) ranges.RangeAgg() range_agg(ranges) ranges.RangeIntersectAgg() range_intersect_agg(ranges) multiranges.RangeIntersectAgg() range_intersect_agg(multiranges)"
  },
  "efcore/mapping/translations.html": {
    "href": "efcore/mapping/translations.html",
    "title": "Translations | Npgsql Documentation",
    "keywords": "Translations Entity Framework Core allows providers to translate query expressions to SQL for database evaluation. For example, PostgreSQL supports regular expression operations , and the Npgsql EF Core provider automatically translates .NET's Regex.IsMatch to use this feature. Since evaluation happens at the server, table data doesn't need to be transferred to the client (saving bandwidth), and in some cases indexes can be used to speed things up. The same C# code on other providers will trigger client evaluation. The Npgsql-specific translations are listed below. Some areas, such as full-text search , have their own pages in this section which list additional translations. String functions .NET SQL Notes EF.Functions.Collate(operand, collation) operand COLLATE collation Added in 5.0 EF.Functions.Like(matchExpression, pattern) matchExpression LIKE pattern EF.Functions.Like(matchExpression, pattern, escapeCharacter) matchExpression LIKE pattern ESCAPE escapeCharacter EF.Functions.ILike(matchExpression, pattern) matchExpression ILIKE pattern EF.Functions.ILike(matchExpression, pattern, escapeCharacter) matchExpression ILIKE pattern ESCAPE escapeCharacter string.Compare(strA, strB) CASE WHEN strA = strB THEN 0 ... END string.Concat(str0, str1) str0 || str1 string.IsNullOrEmpty(value) value IS NULL OR value = '' string.IsNullOrWhiteSpace(value) value IS NULL OR btrim(value, E' \\t\\n\\r') = '' stringValue.CompareTo(strB) CASE WHEN stringValue = strB THEN 0 ... END stringValue.Contains(value) strpos(stringValue, value) > 0 stringValue.EndsWith(value) stringValue LIKE '%' || value stringValue.FirstOrDefault() substr(stringValue, 1, 1) Added in 5.0 stringValue.IndexOf(value) strpos(stringValue, value) - 1 stringValue.LastOrDefault() substr(stringValue, length(stringValue), 1) Added in 5.0 stringValue.Length length(stringValue) stringValue.PadLeft(length) lpad(stringValue, length) stringValue.PadLeft(length, char) lpad(stringValue, length, char) stringValue.PadRight(length) rpad(stringValue, length) stringValue.PadRight(length, char) rpad(stringValue, length, char) stringValue.Replace(oldValue, newValue) replace(stringValue, oldValue, newValue) stringValue.StartsWith(value) stringValue LIKE value || '%' stringValue.Substring(startIndex, length) substr(stringValue, startIndex + 1, @length) stringValue.ToLower() lower(stringValue) stringValue.ToUpper() upper(stringValue) stringValue.Trim() btrim(stringValue) stringValue.Trim(trimChar) btrim(stringValue, trimChar) stringValue.TrimEnd() rtrim(stringValue) stringValue.TrimEnd(trimChar) rtrim(stringValue, trimChar) stringValue.TrimStart() ltrim(stringValue) stringValue.TrimStart(trimChar) ltrim(stringValue, trimChar) EF.Functions.Reverse(value) reverse(value) Regex.IsMatch(stringValue, \"^A+\") stringValue ~ '^A+' (with options) Regex.IsMatch(stringValue, \"^A+\", regexOptions) stringValue ~ '^A+' (with options) string.Join(\", \", a, b) concat_ws(', ', a, b) Added in 7.0 (previously array_to_string) string.Join(\", \", array) array_to_string(array, ', ', '') string.Join(\", \", agg_strings) string_agg(agg_strings, ', ') Added in 7.0, see Aggregate functions . Date and time functions Note Some of the operations below depend on the concept of a \"local time zone\" (e.g. DateTime.Today ). While in .NET this is the machine time zone where .NET is running, the corresponding PostgreSQL translations use the TimeZone connection parameter as the local time zone. Since version 6.0, many of the below DateTime translations are also supported on DateTimeOffset. See also Npgsql's NodaTime support , which is a better and safer way of interacting with date/time data. .NET SQL Notes DateTime.UtcNow (6.0+) now() See 6.0 release notes DateTime.Now (6.0+) now()::timestamp See 6.0 release notes DateTime.Today (6.0+) date_trunc('day', now()::timestamp) See 6.0 release notes DateTime.UtcNow (legacy) now() AT TIME ZONE 'UTC' See 6.0 release notes DateTime.Now (legacy) now() See 6.0 release notes DateTime.Today (legacy) date_trunc('day', now()) See 6.0 release notes dateTime.AddDays(1) dateTime + INTERVAL '1 days' dateTime.AddHours(value) dateTime + INTERVAL '1 hours' dateTime.AddMinutes(1) dateTime + INTERVAL '1 minutes' dateTime.AddMonths(1) dateTime + INTERVAL '1 months' dateTime.AddSeconds(1) dateTime + INTERVAL '1 seconds' dateTime.AddYears(1) dateTime + INTERVAL '1 years' dateTime.Date date_trunc('day', dateTime) dateTime.Day date_part('day', dateTime)::INT dateTime.DayOfWeek floor(date_part('dow', dateTime))::INT dateTime.DayOfYear date_part('doy', dateTime)::INT dateTime.Hour date_part('hour', dateTime)::INT dateTime.Minute date_part('minute', dateTime)::INT dateTime.Month date_part('month', dateTime)::INT dateTime.Second date_part('second', dateTime)::INT dateTime.Year date_part('year', dateTime)::INT dateTime.ToUniversalTime dateTime::timestamptz Added in 6.0 dateTime.ToLocalTime dateTime::timestamp Added in 6.0 dateTimeOffset.DateTime dateTimeOffset AT TIME ZONE 'UTC' Added in 6.0 dateTimeOffset.UtcDateTime No PG operation (.NET-side conversion from DateTimeOffset to DateTime only) Added in 6.0 dateTimeOffset.LocalDateTime dateTimeOffset::timestamp Added in 6.0 timeSpan.Days floor(date_part('day', timeSpan))::INT timeSpan.Hours floor(date_part('hour', timeSpan))::INT timeSpan.Minutes floor(date_part('minute', timeSpan))::INT timeSpan.Seconds floor(date_part('second', timeSpan))::INT timeSpan.Milliseconds floor(date_part('millisecond', timeSpan))::INT timeSpan.Milliseconds floor(date_part('millisecond', timeSpan))::INT timeSpan.TotalMilliseconds date_part('epoch', interval) / 0.001 Added in 6.0 timeSpan.TotalSeconds date_part('epoch', interval) Added in 6.0 timeSpan.TotalMinutes date_part('epoch', interval) / 60.0 Added in 6.0 timeSpan.TotalDays date_part('epoch', interval) / 86400.0 Added in 6.0 timeSpan.TotalHours date_part('epoch', interval) / 3600.0 Added in 6.0 dateTime1 - dateTime2 dateTime1 - dateTime2 TimeZoneInfo.ConvertTimeBySystemTimeZoneId(utcDateTime, timezone) utcDateTime AT TIME ZONE timezone Added in 6.0, only for timestamptz columns TimeZoneInfo.ConvertTimeToUtc(nonUtcDateTime) nonUtcDateTime::timestamptz Added in 6.0, only for timestamp columns DateTime.SpecifyKind(utcDateTime, DateTimeKind.Unspecified) utcDateTime AT TIME ZONE 'UTC' Added in 6.0, only for timestamptz columns DateTime.SpecifyKind(nonUtcDateTime, DateTimeKind.Utc) nonUtcDateTime AT TIME ZONE 'UTC' Added in 6.0, only for timestamp columns new DateTime(year, month, day) make_date(year, month, day) new DateTime(y, m, d, h, m, s) make_timestamp(y, m, d, h, m, s) new DateTime(y, m, d, h, m, s, kind) make_timestamp or make_timestamptz , based on kind Added in 6.0 EF.Functions.Sum(timespans) sum(timespans) Added in 7.0, see Aggregate functions . EF.Functions.Average(timespans) avg(timespans) Added in 7.0, see Aggregate functions . Miscellaneous functions .NET SQL collection.Contains(item) item IN collection enumValue.HasFlag(flag) enumValue & flag = flag Guid.NewGuid() uuid_generate_v4() , or gen_random_uuid() on PostgreSQL 13 with EF Core 5 and above. nullable.GetValueOrDefault() coalesce(nullable, 0) nullable.GetValueOrDefault(defaultValue) coalesce(nullable, defaultValue) Binary functions .NET SQL Notes bytes[i] get_byte(bytes, i) Added in 5.0 bytes.Contains(value) position(value IN bytes) > 0 Added in 5.0 bytes.Length length(@bytes) Added in 5.0 bytes1.SequenceEqual(bytes2) @bytes = @second Added in 5.0 Math functions .NET SQL Notes Math.Abs(value) abs(value) Math.Acos(d) acos(d) Math.Asin(d) asin(d) Math.Atan(d) atan(d) Math.Atan2(y, x) atan2(y, x) Math.Ceiling(d) ceiling(d) Math.Cos(d) cos(d) Math.Exp(d) exp(d) Math.Floor(d) floor(d) Math.Log(d) ln(d) Math.Log10(d) log(d) Math.Max(x, y) greatest(x, y) Math.Min(x, y) least(x, y) Math.Pow(x, y) power(x, y) Math.Round(d) round(d) Math.Round(d, decimals) round(d, decimals) Math.Sin(a) sin(a) Math.Sign(value) sign(value)::int Math.Sqrt(d) sqrt(d) Math.Tan(a) tan(a) Math.Truncate(d) trunc(d) EF.Functions.Random() random() Added in 6.0 See also Aggregate statistics functions . Row value comparisons The following allow expressing comparisons over SQL row values . This are particularly useful for implementing efficient pagination, see the EF Core docs for more information. Note All of the below were introduced in version 7.0 of the provider. .NET SQL EF.Functions.GreaterThan(ValueTuple.Create(a, b), ValueTuple.Create(c, d)) (a, b) > (c, d) EF.Functions.LessThan(ValueTuple.Create(a, b), ValueTuple.Create(c, d)) (a, b) < (c, d) EF.Functions.GreaterThanOrEqual(ValueTuple.Create(a, b), ValueTuple.Create(c, d)) (a, b) >= (c, d) EF.Functions.LessThanOrEqual(ValueTuple.Create(a, b), ValueTuple.Create(c, d)) (a, b) <= (c, d) ValueTuple.Create(a, b).Equals(ValueTuple.Create(c, d)) (a, b) = (c, d) !ValueTuple.Create(a, b).Equals(ValueTuple.Create(c, d)) (a, b) <> (c, d) Network functions .NET SQL IPAddress.Parse(string) CAST(string AS inet) PhysicalAddress.Parse(string) CAST(string AS macaddr) EF.Functions.LessThan(net1, net2) net1 < net2 EF.Functions.LessThanOrEqual(net1, net2) net1 <= net2 EF.Functions.GreaterThan(net1, net2) net1 > net2 EF.Functions.GreaterThanOrEqual(net1, net2) net1 >= net2 EF.Functions.ContainedBy(inet1, inet2) inet1 << inet2 EF.Functions.ContainedByOrEqual(inet1, inet2) inet1 <<= inet2 EF.Functions.Contains(inet1, inet2) inet1 >> inet2 EF.Functions.ContainsOrEqual(inet1, inet2) inet1 >>= inet2 EF.Functions.ContainsOrContainedBy(inet1, inet2) inet1 && inet2 EF.Functions.BitwiseNot(net) ~net1 EF.Functions.BitwiseAnd(net1, net2) net1 & net2 EF.Functions.BitwiseOr(net1, net2) net1 | net2 EF.Functions.Add(inet, int) inet + int EF.Functions.Subtract(inet, int) inet - int EF.Functions.Subtract(inet1, inet2) inet1 - inet2 EF.Functions.Abbreviate(inet) abbrev(inet) EF.Functions.Broadcast(inet) broadcast(inet) EF.Functions.Family(inet) family(inet) EF.Functions.Host(inet) host(inet) EF.Functions.HostMark(inet) hostmask(inet) EF.Functions.MaskLength(inet) masklen(inet) EF.Functions.Netmask(inet) netmask(inet) EF.Functions.Network(inet) network(inet) EF.Functions.SetMaskLength(inet) set_masklen(inet) EF.Functions.Text(inet) text(inet) EF.Functions.SameFamily(inet1, inet2) inet_same_family(inet1, inet2) EF.Functions.Merge(inet1, inet2) inet_merge(inet1, inet2) EF.Functions.Truncate(macaddr) trunc(macaddr) EF.Functions.Set7BitMac8(macaddr8) macaddr8_set7bit(macaddr8) Trigram functions The below translations provide functionality for determining the similarity of alphanumeric text based on trigram matching, using the pg_trgm extension which is bundled with standard PostgreSQL distributions. All the below parameters are strings. Note Prior to version 6.0, to use these translations, your project must depend on the Npgsql.EntityFrameworkCore.PostgreSQL.Trigrams package, and call UseTrigrams() in your OnModelConfiguring . .NET SQL EF.Functions.TrigramsShow(s) show_trgm(s) EF.Functions.TrigramsSimilarity(s1, s2) similarity(s1, s2) EF.Functions.TrigramsWordSimilarity(s1, s2) word_similarity(s1, s2) EF.Functions.TrigramsStrictWordSimilarity(s1, s2) strict_word_similarity(s1, s2) EF.Functions.TrigramsAreSimilar(s1, s2) s1 % s2 EF.Functions.TrigramsAreWordSimilar(s1, s2) s1 <% s2 EF.Functions.TrigramsAreNotWordSimilar(s1, s2) s1 %> s2 EF.Functions.TrigramsAreStrictWordSimilar(s1, s2) s1 <<% s2 EF.Functions.TrigramsAreNotStrictWordSimilar(s1, s2) s1 %>> s2 EF.Functions.TrigramsSimilarityDistance(s1, s2) s1 <-> s2 EF.Functions.TrigramsWordSimilarityDistance(s1, s2) s1 <<-> s2 EF.Functions.TrigramsWordSimilarityDistanceInverted(s1, s2) s1 <->> s2 EF.Functions.TrigramsStrictWordSimilarityDistance(s1, s2) s1 <<<-> s2 EF.Functions.TrigramsStrictWordSimilarityDistanceInverted(s1, s2) s1 <->>> s2 LTree functions The below translations are for working with label trees from the PostgreSQL ltree extension. Use the LTree type to represent ltree and invoke methods on it in EF Core LINQ queries. Note LTree support was introduced in version 6.0 of the provider, and requires PostgreSQL 13 or later. .NET SQL ltree1.IsAncestorOf(ltree2) ltree1 @> ltree2 ltree1.IsDescendantOf(ltree2) ltree1 &lt;@ ltree2 ltree.MatchesLQuery(lquery) ltree ~ lquery ltree.MatchesLTxtQuery(ltxtquery) ltree @ ltxtquery lqueries.Any(q => ltree.MatchesLQuery(q)) ltree ? lqueries ltrees.Any(t => t.IsAncestorOf(ltree)) ltrees @> ltree ltrees.Any(t => t.IsDescendantOf(ltree)) ltrees &lt;@ ltree ltrees.Any(t => t.MatchesLQuery(lquery)) ltrees ~ ltree ltrees.Any(t => t.MatchesLTxtQuery(ltxtquery)) ltrees @ ltxtquery ltrees.Any(t => lqueries.Any(q => t.MatchesLQuery(q))) ltrees ? lqueries ltrees.FirstOrDefault(l => l.IsAncestorOf(ltree)) ltrees ?@> ltree ltrees.FirstOrDefault(l => l.IsDescendantOf(ltree)) ltrees ?&lt;@ ltree ltrees.FirstOrDefault(l => l.MatchesLQuery(lquery)) ltrees ?~ ltree ltrees.FirstOrDefault(l => l.MatchesLTxtQuery(ltxtquery)) ltrees ?@ ltree ltree.Subtree(0, 1) subltree(ltree, 0, 1) ltree.Subpath(0, 1) sublpath(ltree, 0, 1) ltree.Subpath(2) sublpath(ltree, 2) ltree.NLevel nlevel(ltree) ltree.Index(subpath) index(ltree, subpath) ltree.Index(subpath, 2) index(ltree, subpath, 2) LTree.LongestCommonAncestor(ltree1, ltree2) lca(index(ltree1, ltree2) Aggregate functions The PostgreSQL aggregate functions are documented here . Note All the below aggregate functions were added in version 7.0. .NET SQL string.Join(\", \", agg_strings) string_agg(agg_strings, ', ') EF.Functions.ArrayAgg(values) array_agg(values) EF.Functions.JsonbAgg(values) jsonb_agg(values) EF.Functions.JsonAgg(values) json_agg(values) EF.Functions.Sum(timespans) sum(timespans) EF.Functions.Average(timespans) avg(timespans) EF.Functions.JsonObjectAgg(tuple_of_2) json_object_agg(tuple_of_2.first, tuple_of_2.second) ranges.RangeAgg() range_agg(ranges) ranges.RangeIntersectAgg() range_intersect_agg(ranges) multiranges.RangeIntersectAgg() range_intersect_agg(multiranges) EF.Functions.StandardDeviationSample(values) stddev_samp(values) EF.Functions.StandardDeviationPopulation(values) stddev_pop(values) EF.Functions.VarianceSample(values) var_samp(values) EF.Functions.VariancePopulation(values) var_pop(values) EF.Functions.Correlation(tuple) corr(tuple_of_2.first, tuple_of_2.second) EF.Functions.CovariancePopulation(tuple) covar_pop(tuple_of_2.first, tuple_of_2.second) EF.Functions.CovarianceSample(tuple) covar_samp(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrAverageX(tuple) regr_avgx(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrAverageY(tuple) regr_avgy(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrCount(tuple) regr_count(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrIntercept(tuple) regr_intercept(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrR2(tuple) regr_r2(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrSlope(tuple) regr_slope(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrSXX(tuple) regr_sxx(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrSXY(tuple) regr_sxy(tuple_of_2.first, tuple_of_2.second) Aggregate functions can be used as follows: var query = ctx.Set<Customer>() .GroupBy(c => c.City) .Select( g => new { City = g.Key, Companies = EF.Functions.ArrayAgg(g.Select(c => c.ContactName)) }); To use functions accepting a tuple_of_2, project out from the group as follows: var query = ctx.Set<Customer>() .GroupBy(c => c.City) .Select( g => new { City = g.Key, Companies = EF.Functions.JsonObjectAgg(g.Select(c => ValueTuple.Create(c.CompanyName, c.ContactName))) });"
  },
  "efcore/misc/collations-and-case-sensitivity.html": {
    "href": "efcore/misc/collations-and-case-sensitivity.html",
    "title": "Collations and Case Sensitivity | Npgsql Documentation",
    "keywords": "Collations and Case Sensitivity Note This feature is introduced in EF Core 5.0. It's recommended that you start by reading the general Entity Framework Core docs on collations and case sensitivity . PostgreSQL is a case-sensitive database by default, but provides various possibilities for performing case-insensitive operations and working with collations. Unfortunately, full collation support is recent and somewhat incomplete, so you may need to carefully review your options below and pick the one which suits you. PostgreSQL collations While PostgreSQL has supported collations for a long time, supported was limited to \"deterministic\" collations, which did not allow for case-insensitive or accent-insensitive operations. PostgreSQL 12 introduced non-deterministic ICU collations, so it is now possible to use collations in a more flexible way. Read more about PostgreSQL collation support in the documentation . Note It is not yet possible to use pattern matching operators such as LIKE on columns with a non-deterministic collation. Creating a collation In PostgreSQL, collations are first-class, named database objects which can be created and dropped, just like tables. To create a collation, place the following in your context's OnModelCreating : modelBuilder.HasCollation(\"my_collation\", locale: \"en-u-ks-primary\", provider: \"icu\", deterministic: false); This creates a collation with the name my_collation : this is an arbitrary name you can choose, which you will be specifying later when assigning the collation to columns. The rest of the parameters instruct PostgreSQL to create a non-deterministic, case-insensitive ICU collation. ICU collations are very powerful, and allow you to specify precise rules with regards to case, accents and other textual aspects. Consult the ICU docs for more information on supported features and keywords. Column collation Once a collation has been created in your database, you can specify it on columns: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.HasCollation(\"my_collation\", locale: \"en-u-ks-primary\", provider: \"icu\", deterministic: false); modelBuilder.Entity<Customer>().Property(c => c.Name) .UseCollation(\"my_collation\"); } This will cause all textual operators on this column to be case-insensitive. Database collation PostgreSQL also allows you to specify collations at the database level, when it is created: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.HasCollation(\"<collation_name>\"); } Unfortunately, the database collation is quote limited in PostgreSQL; it notably does not support non-deterministic collations (e.g. case-insensitive ones). To work around this limitation, you can use EF Core's pre-convention model configuration feature: protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder) { configurationBuilder.Properties<string>().UseCollation(\"my_collation\"); } All columns created with this configuration will automatically have their collation specified accordingly, and all existing columns will be altered. The end result of the above is very similar to specifying a database collation: instead of telling PostgreSQL to implicit apply a collation to all columns, EF Core will do the same for you in its migrations. The citext type The older PostgreSQL method for performing case-insensitive text operations is the citext type; it is similar to the text type, but operators are functions between citext values are implicitly case-insensitive. The PostgreSQL docs provide more information on this type. citext is available in a PostgreSQL-bundled extension, so you'll first have to install it: modelBuilder.HasPostgresExtension(\"citext\"); Specifying that a column should use citext is simply a matter of setting the column's type: Data Annotations Fluent API public class Blog { public int Id { get; set; } [Column(TypeName = \"citext\")] public string Name { get; set; } } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Blog>().Property(b => b.Name) .HasColumnType(\"citext\"); } Some limitations (others are listed in the PostgreSQL docs ): While citext allows case-insensitive comparisons, it doesn't handle other aspects of collations, such as accents. Several PostgreSQL text functions are overloaded to work with citext as expected, but others aren't. Using a function that isn't overloaded will result in a regular, case-sensitive match. Unlike collations, citext does not allow the same column to be compared case-sensitively in some queries, and and insensitively in others. ILIKE ILIKE is a PostgreSQL-specific operator that works just like LIKE , but is case-insensitive. If you only need to perform case-insensitive LIKE pattern matching, then this could be sufficient. The provider exposes this via EF.Functions.ILike : var results = ctx.Blogs .Where(b => EF.Functions.ILike(b.Name, \"a%b\")) .ToList();"
  },
  "efcore/misc/database-creation.html": {
    "href": "efcore/misc/database-creation.html",
    "title": "Database Creation | Npgsql Documentation",
    "keywords": "Database Creation Specifying the administrative db When the Npgsql EF Core provider creates or deletes a database ( EnsureCreated() , EnsureDeleted() ), it must connect to an administrative database which already exists (with PostgreSQL you always have to be connected to some database, even when creating/deleting another database). Up to now the postgres database was used, which is supposed to always be present. However, there are some PostgreSQL-like databases where the postgres database is not available. For these cases you can specify the administrative database as follows: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => options.UseAdminDatabase(\"my_admin_db\")); Using a database template When creating a new database, PostgreSQL allows specifying another \"template database\" which will be copied as the basis for the new one. This can be useful for including database entities which are not managed by Entity Framework Core. You can trigger this by using HasDatabaseTemplate in your context's OnModelCreating : protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseDatabaseTemplate(\"my_template_db\"); Setting a tablespace PostgreSQL allows you to locate your database in different parts of your filesystem, via tablespaces . The Npgsql EF Core provider allows you to specify your database's namespace: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseTablespace(\"my_tablespace\"); You must have created your tablespace prior to this via the CREATE TABLESPACE command - the Npgsql EF Core provider does not do this for you. Note also that specifying a tablespace on specific tables is not supported."
  },
  "efcore/misc/other.html": {
    "href": "efcore/misc/other.html",
    "title": "Other | Npgsql Documentation",
    "keywords": "Other PostgreSQL extensions The Npgsql EF Core provider allows you to specify PostgreSQL extensions that should be set up in your database. Simply use HasPostgresExtension in your context's OnModelCreating method: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.HasPostgresExtension(\"hstore\"); Execution Strategy The Npgsql EF Core provider provides a retrying execution strategy, which will attempt to detect most transient PostgreSQL/network errors and will automatically retry your operation. To enable, place the following code in your context's OnModelConfiguring : protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => options.EnableRetryOnFailure()); This strategy relies on the IsTransient property of NpgsqlException . Both this property and the retrying strategy are new and should be considered somewhat experimental - please report any issues. Certificate authentication The Npgsql allows you to provide a callback for verifying the server-provided certificates, and to provide a callback for providing certificates to the server. The latter, if properly set up on the PostgreSQL side, allows you to do client certificate authentication - see the Npgsql docs and also the PostgreSQL docs on setting this up. The Npgsql EF Core provider allows you to set these two callbacks on the DbContextOptionsBuilder as follows: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => { options.RemoteCertificateValidationCallback(MyCallback1); options.ProvideClientCertificatesCallback(MyCallback2); }); You may also consider passing Trust Server Certificate=true in your connection string to make Npgsql accept whatever certificate your PostgreSQL provides (useful for self-signed certificates). Caution When specifying the options via OnConfiguring , make sure that the callbacks you pass in are static methods. Passing in instance methods causes EF Core to create a new service provider for each context instance, which can degrade performance in a significant way. CockroachDB Interleave In Parent If you're using CockroachDB, the Npgsql EF Core provider exposes its \"interleave in parent\" feature . Use the following code: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Customer>() .UseCockroachDbInterleaveInParent( typeof(ParentEntityType), new List<string> { \"prefix_column_1\", \"prefix_column_2\" });"
  },
  "efcore/modeling/concurrency.html": {
    "href": "efcore/modeling/concurrency.html",
    "title": "Concurrency Tokens | Npgsql Documentation",
    "keywords": "Concurrency Tokens Note Please read the general Entity Framework Core docs on concurrency tokens . Entity Framework Core supports the concept of optimistic concurrency - a property on your entity is designated as a concurrency token, and EF Core detects concurrent modifications by checking whether that token has changed since the entity was read. The PostgreSQL xmin system column Although applications can update concurrency tokens themselves, we frequently rely on the database automatically updating a column on update - a \"last modified\" timestamp, an SQL Server rowversion , etc. Unfortunately PostgreSQL doesn't have such auto-updating columns - but there is one feature that can be used for concurrency token. All PostgreSQL tables have a set of implicit and hidden system columns , among which xmin holds the ID of the latest updating transaction. Since this value automatically gets updated every time the row is changed, it is ideal for use as a concurrency token. Starting with version 7.0, you can map a uint property to the PostgreSQL xmin system column using the standard EF Core mechanisms: Data Annotations Fluent API public class SomeEntity { public int Id { get; set; } [Timestamp] public uint Version { get; set; } } class MyContext : DbContext { public DbSet<SomeEntity> SomeEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<SomeEntity>() .Property(b => b.Version) .IsRowVersion(); } } public class SomeEntity { public int Id { get; set; } public uint Version { get; set; } } In older version of the provider, use the following instead: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Blog>().UseXminAsConcurrencyToken(); }"
  },
  "efcore/modeling/generated-properties.html": {
    "href": "efcore/modeling/generated-properties.html",
    "title": "Value Generation | Npgsql Documentation",
    "keywords": "Value Generation Caution In 3.0.0, the default value generation strategy has changed from the older SERIAL columns to the newer IDENTITY columns. Read the information below carefully if you are migrating an existing database. Note It's recommended that you start by reading the general Entity Framework Core docs on generated properties . Identity and serial columns (auto-increment) Introduction Since PostgreSQL 10, the standard way to define auto-incrementing columns is \"identity columns\". Prior to version 10, \"serial columns\" were used, which are less SQL-compliant and generally more difficult to manage. For more information on these, see this blog post . Note that since PostgreSQL 10, both support smallint , integer and bigint as their data type. The Npgsql EF Core provider allows you to choose which of the above you want on a property-by-property basis, or globally on your model. The following \"value generation strategies\" are available: Identity by default : an identity column whose values are by default generated at the database, but you can still override this behavior by providing values from your application. This will generate the clause GENERATED BY DEFAULT AS IDENTITY on your column, and is the default value generation strategy. Identity always : an identity column whose values are always generated at the database - you cannot provide values from your application. This will generate the clause GENERATED ALWAYS AS IDENTITY on your column. Serial : the traditional PostgreSQL serial column. This will create the column with the serial datatype. Recommended only if you are using an older PostgreSQL version. Sequence HiLo : See below Prior to version 3.0, the Npgsql provider generates \"serial\" columns for ID columns; starting with version 3.0, it generates \"identity by default\" instead. In other words, when ValueGeneratedOnAdd is specified on a short , int or long property, the Npgsql provider will automatically map it to a serial or identity column. Note that EF Core will automatically recognize key properties by convention (e.g. a property called Id in your entity) and will implicitly set them to ValueGeneratedOnAdd ; a standard model with ID columns should automatically get created with the appropriate column type. Caution Since the default strategy has changed, if you have an existing database with migrations, the the first migration created after upgrading to version 3.0 will alter your tables and convert serial columns to identity ones. This is a sensitive, one-time migration operation that should be done with care, and carefully tested before deployment to production. Changing a value generation strategy is a significant change to an existing database. Defining the default strategy for the entire model You can easily control the value generation strategy for the entire model. For example, to opt out of the change to identity columns, simply place the following in your context's OnModelCreating() : protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseSerialColumns(); Note that if you are using PostgreSQL 9.6 or older, identity columns will not work. It is recommended to place the provider in compatibility mode with your specific version - this will also affect the default value generation strategy: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql(\"...\", o => o.SetPostgresVersion(9, 6)); Defining the strategy for a single property Regardless of the model default, you can define a value-generation strategy on a property-by-property basis: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>().Property(b => b.Id).UseIdentityAlwaysColumn(); Identity sequence options Identity columns have a standard sequence, managed behind the scenes by PostgreSQL; you can customize the sequence options for these. For example, the following makes the column values start at 100: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>().Property(b => b.Id) .HasIdentityOptions(startValue: 100); This can be especially useful when seeding data. Seeded data must explicitly specify all columns - including database-generated ones - but the backing sequence for identity columns isn't aware that the values are in use, and will generate conflicting values. This technique allows to start your identity sequence at a value higher than all seeded data values. Another strategy is to seed negative values only, allowing your identity column to start at 1. It is not possible to specify sequence options for serial columns, but you can set up a sequence separately and configure the column's default value (see sequence-driven columns ). Standard sequence-driven columns While identity and serial columns set up a sequence for you behind the scenes, sometimes you may want to manage sequence creation yourself. For example, you may want to have multiple columns drawing their default values from a single sequence. Adding a sequence to your model is described in the general EF Core documentation ; once the sequence is specified, you can simply set a column's default value to extract the next value from that sequence. Note that the SQL used to fetch the next value from a sequence differs across databases (see the PostgreSQL docs ). Your models' OnModelCreating should look like this: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.HasSequence<int>(\"OrderNumbers\") .StartsAt(1000) .IncrementsBy(5); modelBuilder.Entity<Order>() .Property(o => o.OrderNo) .HasDefaultValueSql(\"nextval('\\\"OrderNumbers\\\"')\"); } HiLo Autoincrement Generation One disadvantage of database-generated values is that these values must be read back from the database after a row is inserted. If you're saving multiple related entities, this means you must perform multiple round-trips as the first entity's generated key must be read before writing the second one. One solution to this problem is HiLo value generation: rather than relying on the database to generate each and every value, the application \"allocates\" a range of values, which it can then populate directly on new entities without any additional round-trips. When the range is exhausted, a new range is allocated. In practical terms, this uses a sequence that increments by some large value (100 by default), allowing the application to insert 100 rows autonomously. To use HiLo, specify UseHiLo on a property in your model's OnModelCreating : protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .Property(b => b.Id) .UseHiLo(); You can also make your model use HiLo everywhere: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseHiLo(); GUID/UUID Generation By default, for GUID key properties, a random GUID is generated client-side by the EF provider and sent to the database. If you prefer to generate values in the database instead, you can do so by specifying HasDefaultValueSql on your property, and call the function to generate the value in the SQL expression. Which function to use depends on your PostgreSQL version: PG 13+ Older protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder .Entity<Blog>() .Property(e => e.SomeGuidProperty) .HasDefaultValueSql(\"gen_random_uuid()\"); } Versions of PostgreSQL prior to 13 don't include any GUID/UUID generation functions, but extensions such as uuid-ossp or pgcrypto exist to fill thie gap. This can be done by placing the following code in your model's OnModelCreating : protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.HasPostgresExtension(\"uuid-ossp\"); modelBuilder .Entity<Blog>() .Property(e => e.SomeGuidProperty) .HasDefaultValueSql(\"uuid_generate_v4()\"); } See the PostgreSQL docs on UUID for more details . Note Generating Guid values in the database causes an additional network roundtrip when a principal and a dependent are inserted in the same SaveChanges , as the principal's key needs to be fetched before inserting the dependent's. Timestamp generation In many scenarios, it's useful to have a column containing the timestamp when the row was originally created. To do this, add a DateTime property to your entity type (or Instant if using NodaTime) , and configure its default with HasDefaultValueSql as follows: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder .Entity<Blog>() .Property(e => e.SomeDateTimeProperty) .HasDefaultValueSql(\"now()\"); } In other scenarios, a \"last updated\" is needed, which is automatically updated every time is modified. Unfortunately, while PostgreSQL supports generated columns , the use of functions such as now() isn't supported. It's still possible to use database trigger to set this up; triggers can be managed by adding raw SQL to your migrations , as follows: CREATE FUNCTION \"Blogs_Update_Timestamp_Function\"() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN NEW.\"Timestamp\" := now(); RETURN NEW; END; $$; CREATE TRIGGER \"UpdateTimestamp\" BEFORE INSERT OR UPDATE ON \"Blogs\" FOR EACH ROW EXECUTE FUNCTION \"Blogs_Update_Timestamp_Function\"(); Computed Columns Note This feature works only on PostgreSQL 12 or above, and was introduced in version 3.0.0 of the provider. PostgreSQL 12 added support for stored generated columns , and Npgsql feature supports that feature as well: Version 5.0 Version 3.x protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Person>() .Property(p => p.DisplayName) .HasComputedColumnSql(@\"\"\"FirstName\"\" || ' ' || \"\"LastName\"\"\", stored: true); } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Person>() .Property(p => p.DisplayName) .HasComputedColumnSql(@\"\"\"FirstName\"\" || ' ' || \"\"LastName\"\"\"); } This will cause the following migration SQL to be generated: ALTER TABLE \"\"Person\"\" ADD \"\"DisplayName\"\" text GENERATED ALWAYS AS (\"\"FirstName\"\" || ' ' || \"\"LastName\"\") STORED; Note that this is a stored column - it is computed once when the row is updated, and takes space on disk. Virtual computed columns, which are computed on each select, are not yet supported by PostgreSQL."
  },
  "efcore/modeling/indexes.html": {
    "href": "efcore/modeling/indexes.html",
    "title": "Indexes | Npgsql Documentation",
    "keywords": "Indexes PostgreSQL and the Npgsql provider support the standard index modeling described in the EF Core docs . This page describes some supported PostgreSQL-specific features. Covering indexes (INCLUDE) PostgreSQL supports covering indexes , which allow you to include \"non-key\" columns in your indexes. This allows you to perform index-only scans and can provide a significant performance boost: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .HasIndex(b => b.Id) .IncludeProperties(b => b.Name); This will create an index for searching on Id , but containing also the column Name , so that reading the latter will not involve accessing the table. The SQL generated is as follows: CREATE INDEX \"IX_Blog_Id\" ON blogs (\"Id\") INCLUDE (\"Name\"); Treating nulls as non-distinct Note This feature was introduced in version 7.0, and is available starting with PostgreSQL 15. By default, when you create a unique index, PostgreSQL treats null values as distinct; this means that a unique index can contain multiple null values in a column. When creating an index, you can also instruct PostgreSQL that nulls should be treated as non-distinct ; this causes a unique constraint violation to be raised if a column contains multiple null values: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .IsUnique() .AreNullsDistinct(false); Index methods PostgreSQL supports a number of index methods , or types . These are specified at index creation time via the USING <method> clause, see the PostgreSQL docs for CREATE INDEX and this page for information on the different types. The Npgsql EF Core provider allows you to specify the index method to be used by calling HasMethod() on your index in your context's OnModelCreating method: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .HasIndex(b => b.Url) .HasMethod(\"gin\"); Index operator classes PostgreSQL allows you to specify operator classes on your indexes , to allow tweaking how the index should work. Use the following code to specify an operator class: protected override void OnConfiguring(DbContextOptionsBuilder builder) => modelBuilder.Entity<Blog>() .HasIndex(b => new { b.Id, b.Name }) .HasOperators(null, \"text_pattern_ops\"); Note that each operator class is used for the corresponding index column, by order. In the example above, the text_pattern_ops class will be used for the Name column, while the Id column will use the default class (unspecified), producing the following SQL: CREATE INDEX \"IX_blogs_Id_Name\" ON blogs (\"Id\", \"Name\" text_pattern_ops); Creating indexes concurrently Creating an index can interfere with regular operation of a database. Normally PostgreSQL locks the table to be indexed against writes and performs the entire index build with a single scan of the table. Other transactions can still read the table, but if they try to insert, update, or delete rows in the table they will block until the index build is finished. This could have a severe effect if the system is a live production database. Very large tables can take many hours to be indexed, and even for smaller tables, an index build can lock out writers for periods that are unacceptably long for a production system. The EF provider allows you to specify that an index should be created concurrently , partially mitigating the above issues: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .HasIndex(b => b.Url) .IsCreatedConcurrently(); Caution Do not enable this feature before reading the PostgreSQL documentation and understanding the full implications of concurrent index creation. Note Prior to version 5.0, IsCreatedConcurrently erroneously defaulted to false - explicitly pass true to configure the index for concurrent creation"
  },
  "efcore/modeling/table-column-naming.html": {
    "href": "efcore/modeling/table-column-naming.html",
    "title": "Table and Column Naming | Npgsql Documentation",
    "keywords": "Table and Column Naming By default, EF Core will map to tables and columns named exactly after your .NET classes and properties, so an entity type named BlogPost will be mapped to a PostgreSQL table called BlogPost . While there's nothing wrong with that, the PostgreSQL world tends towards snake_case naming instead. In addition, any upper-case letters in unquoted identifiers are automatically converted to lower-case identifiers, so the Npgsql provider generates quotes around all such identifiers. Starting with 3.0.0, you can use the EFCore.NamingConventions plugin to automatically set all your table and column names to snake_case instead: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder .UseNpgsql(...) .UseSnakeCaseNamingConvention(); public class Customer { public int Id { get; set; } public string FullName { get; set; } } This will cause cleaner SQL such as the following to be generated: CREATE TABLE customers ( id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY, full_name text NULL, CONSTRAINT \"PK_customers\" PRIMARY KEY (id); SELECT c.id, c.full_name FROM customers AS c WHERE c.full_name = 'John Doe'; See the plugin documentation for more details,"
  },
  "efcore/release-notes/1.1.html": {
    "href": "efcore/release-notes/1.1.html",
    "title": "Migrating to 1.1 | Npgsql Documentation",
    "keywords": "Migrating to 1.1 Version 1.1.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 1.1.0 of Entity Framework Core , and contains some new Npgsql features as well. Note that if you're using the command-line tools, you'll have to modify your tools section as described in the EF Core release post: \"tools\": { \"Microsoft.EntityFrameworkCore.Tools.DotNet\": \"1.0.0-preview3-final\" }, New Features Aside from general EF Core features, version 1.1.0 of the Npgsql provider contains the following: Hilo key generation ( #5 ). This can be a much more efficient way to generate autoincrement key values. PostgreSQL array mapping ( #15 ). This allows you to have plain CLR arrays on your entities, and have those arrays mapped to native PostgreSQL array columns . Optimistic concurrency with PostgreSQL's xmin column ( #19 ). Simply specify .UseXminAsConcurrencyToken() on an entity to start using this, see the EF docs for more details . Cleanup of how serial (autoincrement) and generated GUID/UUID columns are managed. Here's the full list of issues . Please report any problems to https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL . Upgrading from 1.0.x If you've used 1.0.x without migrations, you can simply upgrade and everything should just work. Unfortunately, if you already have migrations from 1.0.x you'll have to do some manual fixups because of some bad decisions that were previously made. If deleting your old migrations and starting over (e.g. non-production database) is an option, you may wish to do so. The following are instructions for fixing up 1.0.x migrations. First, Npgsql 1.0.x used a problematic method to identify serial (autoincrement) columns in migrations. If you look at your migration code you'll see .Annotation(\"Npgsql:ValueGeneratedOnAdd\", true) on various columns. Unfortunately this annotation is also present on non-serial columns, e.g. columns with default values. This causes various issues and has been replaced in 1.1. However, you'll have to manually remove .Annotation(\"Npgsql:ValueGeneratedOnAdd\", true) , and replace it with .Annotation(\"Npgsql:ValueGenerationStrategy\", NpgsqlValueGenerationStrategy.SerialColumn) but only on columns which should be serial (e.g. not on columns with defaults). If you attempt to run a migration that has the old annotation, Npgsql will throw an exception and refuse to run your migrations. Unfortunately, this change will cause some incorrect changes the first time you add a migration after the upgrade. To avoid this, simply add a dummy migration right after upgrading to 1.1 and then delete the two new files generated for the dummy migration, but keep the changes made to your ModelSnapshot.cs . From this point on everything should be fine. Make sure you have no pending changes to your model before doing this! . Apologies for this problematic upgrade procedure, it should at least keep things clean going forward. Contributors Thank you very much to the following people who have contributed to the individual 1.1.x. releases. Milestone 1.1.1 Contributor Assigned issues @roji 8 Milestone 1.1.0 Contributor Assigned issues @roji 11"
  },
  "efcore/release-notes/2.0.html": {
    "href": "efcore/release-notes/2.0.html",
    "title": "2.0 Release Notes | Npgsql Documentation",
    "keywords": "2.0 Release Notes Version 2.0.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget.org . This version works with version 2.0.0 of Entity Framework Core , and contains some new Npgsql features as well. New Features Aside from general EF Core features new in 2.0.0, the Npgsql provider contains the following major new features: PostgreSQL array operation translation ( #120 ). While array properties have been supported since 1.1, operations on those arrays where client-evaluated. Version 2.0 will now translate array indexing, .Contains() , .SequenceEquals() and .Length . See the array mapping docs for more details. A retrying execution strategy ( #155 ), which will automatically retry operations on exceptions which are considered transient. PostgreSQL extensions are now included in scaffolded models ( #102 ). More LINQ operations are translated to SQL, and more database scenarios are scaffolded correctly (see the docs ). Here's the full list of issues . Please report any problems to https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL . Upgrading from 1.x Previously an Npgsql.EntityFrameworkCore.PostgreSQL.Design nuget package existed alongside the main package. Its contents have been merged into the main Npgsql.EntityFrameworkCore.PostgreSQL and no new version has been released. Specifying versions when specifying PostgreSQL extensions on your model is no longer supported - this was a very rarely-used feature which interfered with extension scaffolding. Contributors Thank you very much to the following people who have contributed to the individual 2.0.x. releases. Milestone 2.0.2 Contributor Assigned issues @roji 4 Milestone 2.0.1 Contributor Assigned issues @roji 5 Milestone 2.0.0 Contributor Assigned issues @roji 16"
  },
  "efcore/release-notes/2.1.html": {
    "href": "efcore/release-notes/2.1.html",
    "title": "2.1 Release Notes | Npgsql Documentation",
    "keywords": "2.1 Release Notes Version 2.1.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 2.1.0 of Entity Framework Core , and contains some new Npgsql features as well. Thanks to @rwasef1830 and @austindrenski for their valuable contributions. New Features Aside from general EF Core features new in 2.1.0, the Npgsql provider contains the following major new features: Improved Spatial Support (PostGIS) Previous versions have allowed basic usage of PostGIS's spatial types via built-in Npgsql types such as NpgsqlPoint , NpgsqlLineString , etc. These types were limited in many ways, and no operation translation was supported. If you want to calculate, say, the distance between two points, you had to drop down to raw SQL. No more! Thanks to a new plugin infrastructure, the EF Core provider now has full-class support for PostGIS. You can now use the NetTopologySuite spatial library to map PostGIS types - NetTopologySuite's types are more complete, and best of all, the provider knows how to translate its operations to SQL. This allows you to write the following code: var nearbyCities = context.Cities.Where(c => c.Location.Distance(somePoint) < 100); See the full documentation for more information . Thanks to @YohDeadfall for implementing support for this at the ADO level. Full text search PostgreSQL has a powerful feature for efficient natural-language search across multiple columns and tables, see the PostgreSQL docs for more info . The EF Core provider now supports full-text search, allowing you to use .NET functions in your LINQ queries which will get translated to efficient PostgreSQL natural-language search queries. Read the full documentation for more information . Many thanks to @rwasef1830 for contributing this feature. NodaTime date/time support NodaTime is a powerful alternative to .NET's built-in date/time types, such as DateTime . The built-in types are flawed in many ways: they have problematic support for timezones, don't have a date-only or time-only types, and promote problematic programming but not making the right distinctions. If your application handles dates and times in anything but the most basic way, you should seriously consider using NodaTime. To learn more read this blog post by Jon Skeet . Thanks to a new plugin infrastructure, it is now possible to set up the EF Core provider to use NodaTime's types instead of the built-in .NET ones; instead of having DateTime properties on your entities, you can now have Instant properties instead. See the full documentation for more information . PostgreSQL 10 IDENTITY columns PostgreSQL 10 introduced a new IDENTITY column as an alternative to traditional SERIAL columns, and these are now supported by the EF Core provider. IDENTITY columns conform to the SQL standard and are in general safer than SERIAL columns, read this blog post for more info . It's recommended that all new projects use IDENTITY, but Npgsql even provides seamless migration of your existing SERIAL-based model!. Read the full documentation for more information . Enum support It is now possible to map your CLR enums to native PostgreSQL enums . This is a unique PostgreSQL feature that provides the best of both worlds: the enum is internally stored in the database as a number (minimal storage), but is handled like a string (more usable, no need to remember numeric values) and has type safety. See the full documentation for more information . Range support PostgreSQL supports native range types , which allow you to represent ranges of dates, ints and other data types in a single column. You can then efficiently perform queries on these types from LINQ, e.g. select all rows where a given date falls in the row's date range. See the full documentation for more information . Many thanks to @austindrenski for contributing the operation translations. Other notable features Several improvements have been made to the way arrays are mapped. For example, you can now map List<T> to PostgreSQL array (previously only T[] was supported) ( #392 ). In addition, change tracking now works for arrays, so EF Core will automatically detect when you change an element's array and will update the corresponding database column when saving. PostgreSQL's built-in range types can now be mapped ( #63 ), head over to the PostgreSQL docs to find out more about range types. Note that user-defined range types are not supported, if you're interested let us know at #329 . Properties of type char are now supported and will be mapped to character(1) in PostgreSQL ( #374 ). Identifiers in generated SQL will only be quoted if needed ( #327 ). This should make it much easier to read. You can now use client certificate authentication and provide a server certificate validation callback ( #270 ). See the doc for usage instructions . Added support for PostgreSQL 10 sequences with type int and smallint ( #301 ). You can now specify the tablespace when creating your databases ( #332 ). Here's the full list of issues . Please report any problems on https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL . Breaking changes Caution The provider's classes have been moved from the namespace Microsoft.EntityFrameworkCore to Npgsql.EntityFrameworkCore.PostgreSQL . As a result, any migrations already generated in your project (as well as the mode snapshot) will have to be manually updated to use the new namespace. You will need to add using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata to all the relevant files. Columns of type timestamp with time zone / timestamptz will now be scaffolded as DateTime properties, and not DateTimeOffset properties. The general use of timestamp with time zone / timestamptz is discouraged (this type does not store the timezone in the database), consider using timestamp without time zone / timestamp instead. If you're specifying index methods with ForNpgsqlHasMethod() , then you will have to fix migrations which generate those indexes. In these migrations, you will find code such as .Annotation(\"Npgsql:Npgsql:IndexMethod\", \"gin\") . You must remove the extra Npgsql: , leaving .Annotation(\"Npgsql:IndexMethod\", \"gin\") . Specifying versions when specifying PostgreSQL extensions on your model is no longer supported - this was a very rarely-used feature which interfered with extension scaffolding. If you're still referencing the nuget package Npgsql.EntityFrameworkCore.PostgreSQL.Design, please remove it - it's no longer needed or up to date. Contributors Thank you very much to the following people who have contributed to the individual 2.1.x. releases. Milestone 2.1.2 Contributor Assigned issues @roji 6 @austindrenski 3 @rwasef1830 1 Milestone 2.1.11 Contributor Assigned issues @roji 1 Milestone 2.1.1.1 Contributor Assigned issues @roji 4 Milestone 2.1.1 Contributor Assigned issues @roji 9 Milestone 2.1.0 Contributor Assigned issues @roji 24 @austindrenski 1 @rwasef1830 1"
  },
  "efcore/release-notes/2.2.html": {
    "href": "efcore/release-notes/2.2.html",
    "title": "2.2 Release Notes | Npgsql Documentation",
    "keywords": "2.2 Release Notes Version 2.2.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 2.2.0 of Entity Framework Core , and contains some new Npgsql features as well. This release was result of hard work by @roji , @austindrenski , @yohdeadfall and @khellang . New Features Aside from general EF Core features new in 2.2.0, the Npgsql EF Core provider contains the following major new features: PostgreSQL 11 covering indexes PostgreSQL 11 introduced covering indexes feature , which allow you to include \"non-key\" columns in your indexes. This allows you to perform index-only scans and can provide a significant performance boost. Support has been added in ( #697 ): protected override void OnConfiguring(DbContextOptionsBuilder builder) => modelBuilder.Entity<Blog>() .ForNpgsqlHasIndex(b => b.Id) .ForNpgsqlInclude(b => b.Name); This will create an index for searching on Id , but containing also the column Name , so that reading the latter will not involve accessing the table. See the documentation for more details . Thanks to @khellang for contributing this! PostgreSQL user-defined ranges The provider already supported PostgreSQL range types , but prior to 2.2 that support was limited to the built-in range types which come with PostgreSQL. #329 extends that support to range types which you define: protected override void OnConfiguring(DbContextOptionsBuilder builder) => builder.UseNpgsql(\"...\", b => b.MapRange<float>(\"floatrange\")); protected override void OnModelCreating(ModelBuilder builder) => builder.ForNpgsqlHasRange(\"floatrange\", \"real\"); This will make the provider create a PostgreSQL range called floatrange , over the PostgreSQL type real . Any property with type NpgsqlRange<float> will be seamlessly mapped to it. See the documentation for more details . Seeding for Npgsql-specific types When using some Npgsql-specific types, it wasn't possible to seed values for those types. With EF Core support for seeding any type, #667 allows seeding values for network, bit and range types (more are coming). PostgreSQL index operator classes PostgreSQL allows you to specify operator classes on your indexes , to allow tweaking how the index should work. #481 adds support for managing these. See the documentation for more details . Thanks to @khellang for contributing this! Other features Various issues with enum and range types were fixed, including upper/lower case, quoting and schema management. Many new SQL translations were added, so more of your LINQ expressions can run in the database. We'll be working on our documentation to make these more discoverable. The full list of issues for this release is available here . Contributors Thank you very much to the following people who have contributed to the individual 2.2.x. releases. Milestone 2.2.6 Contributor Assigned issues @roji 5 Milestone 2.2.4 Contributor Assigned issues @roji 3 @austindrenski 1 Milestone 2.2.0 Contributor Assigned issues @austindrenski 15 @roji 8"
  },
  "efcore/release-notes/3.1.html": {
    "href": "efcore/release-notes/3.1.html",
    "title": "3.1 Release Notes | Npgsql Documentation",
    "keywords": "3.1 Release Notes Version 3.1 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 3.1 of Entity Framework Core , and brings new Npgsql features in addition to the general EF Core changes. Caution Use these versions with care and do not deploy to production without thorough testing. Read the breaking changes section below. The full list of issues for this release is available here . New Features Aside from general EF Core features new in 3.1, the Npgsql EF Core provider contains the following major new features: It is now possible to map POCOs to JSON columns and query them, see the docs for more info ( #981 ) PostgreSQL identity columns are now the default - see breaking changes below) ( #804 ) Sequence options can now be managed on identity columns ( #819 ) Support has been added for the upcoming PostgreSQL 12 generated columns feature ( #939 ) A plugin is now available to automatically make all your tables and columns be snake_case! See EFCore.NamingConventions . Index sort options (ascending/descending, null sort order...) can now be specified ( #326 ) Indexes can now be created concurrently ( #967 ) Views are now reverse-engineered ( #878 ) Array value converters help mapping with PostgreSQL arrays (e.g. map enum arrays to integer arrays) ( #1031 ). Breaking changes Default value generation strategy is now IDENTITY Caution This is a major change, and upgrading to 3.1 with an existing database will cause a non-trivial schema migration to be generated. Read the following carefully. The default value generation strategy has changed from the older SERIAL columns to the newer IDENTITY columns, introduced in PostgreSQL 10. When producing a migration with 3.1, the Npgsql provider will attempt to automatically generate SQL to alter your tables and convert serial columns to identity ones. This is a sensitive, one-time migration operation that should be done with care, and carefully tested before deployment to production. If you wish to opt out of using IDENTITY columns and continue using SERIAL columns, set the following on your model: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseSerialColumns(); If you are using a PostgreSQL version older than 10, setting the compatibility mode is a better way to switch the default back to SERIAL columns: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql(\"...\", o => o.SetPostgresVersion(9, 6)); More information is available in the page about generated properties . Contributors Thank you very much to the following people who have contributed to the individual 3.x releases. Milestone 3.1.7 Contributor Assigned issues @roji 4 Milestone 3.1.4 Contributor Assigned issues @roji 4 Milestone 3.1.3 Contributor Assigned issues @roji 1 Milestone 3.1.2 Contributor Assigned issues @roji 3 @grzybsonssg 1 Milestone 3.1.1.2 Contributor Assigned issues @roji 1 Milestone 3.1.1.1 Contributor Assigned issues @roji 1 Milestone 3.1.1 Contributor Assigned issues @roji 6 Milestone 3.1.0 Contributor Assigned issues @roji 15 @austindrenski 1 @ins0mniaque 1 @MarioPrabowo 1 Milestone 3.0.1 Contributor Assigned issues @roji 1 Milestone 3.0.0 Contributor Assigned issues @roji 25 @austindrenski 2 @YohDeadfall 1"
  },
  "efcore/release-notes/5.0.html": {
    "href": "efcore/release-notes/5.0.html",
    "title": "5.0 Release Notes | Npgsql Documentation",
    "keywords": "5.0 Release Notes Version 5.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 5.0 of Entity Framework Core , and brings new Npgsql features in addition to the general EF Core changes. New Features Aside from general EF Core features new in 5.0, here is a non-exhaustive list of features added in the Npgsql EF Core provider: Full support for PostgreSQL collations. See the docs for more info. It is now much easier to create indexes for full-text search ( #1097 , #1253 ). See the docs for more info. Sequences are now automatically updated after seeding data to avoid duplicate values ( #367 ). The [JsonPropertyName] attribute is now respected when mapping to JSON ( #1419 ). Improved support for PostgreSQL arrays: Mapping List<T> is now fully supported ( #395 ). Mapping arrays of nullable value types (e.g. int?[] ) is now supported ( #1025 ). Query translations: Precise, exhaustive documentation has been added on which functions can be used in LINQ queries. Contains over arrays now uses indexes in various scenarios, improving performance ( #1372 ). Various members of TimeSpan are now translated and can be used in queries ( #328 ). Support for unaccent ( #1530 ). Thanks @cloudlucky . Various translations over byte array properties have been added ( #1225 , #1226 . Improved null semantics for PostgreSQL-specific operations results in tighter and more efficient SQL ( #1142 ). Better support for NodaTime: It is now possible to map NodaTime Duration to PostgreSQL interval , previously only Period could be mapped ( #1567 . Some additional arithmetic operation are now translated ( #1565 ). It is now possible to add labels to existing enums (but not remove or modify existing ones). The provider will generate the appropriate migrations ( #1182 ). The full list of issues for this release is available here . Breaking changes Please consult the EF Core 5.0 breaking changes page as well - the below lists only changes specific to the Npgsql provider. Computed columns must now explicitly be configured as stored ( #1336 ) Version 3.1 of the provider added support for PostgreSQL generated columns ( #939 ), referred to as computed columns in EF Core . EF Core 5.0 adds support for specifying whether a computed column is virtual (computed when fetched), or stored (persisted on disk and computed when modified). Aligning with most databases, EF Core by default creates virtual computed columns, but these are currently unsupported by PostgreSQL. As a result, you must explicitly specify on all computed columns that they are stored: modelBuilder.Entity<Customer>() .Property(p => p.FullName) .HasComputedColumnSql(\"...\", stored: true); If you have existing migrations which were created with previous versions of EF Core, the column definitions in those also need to be fixed up with stored: true . IsCreatedConcurrently defaults to true ( #1212 ) Previously, when IsCreatedConcurrently was used to configure an index without parameters, the default was false - this has changed to true . Note that indexes are never configured for for concurrent creation unless IsCreatedConcurrently is specified. Contributors A big thank you to all the following people who contributed to the 5.0 release! Milestone 5.0.0 Contributor Assigned issues @artfulsage 1 @cloudlucky 1 @plamen-i 1 @Quogu 1 @YohDeadfall 1 @roji 45"
  },
  "efcore/release-notes/6.0.html": {
    "href": "efcore/release-notes/6.0.html",
    "title": "6.0 Release Notes | Npgsql Documentation",
    "keywords": "6.0 Release Notes The release candidate of Npgsql Entity Framework Core provider version 6.0 has been released and is available on nuget. This version works with version 6.0 of Entity Framework Core , and brings new Npgsql features in addition to the general EF Core changes. Npgsql 6.0 brings some major breaking changes and is not a simple in-place upgrade. Carefully read the breaking change notes below and upgrade with care. New features Timestamp rationalization and improvements Support for timestamp with time zone and timestamp without time zone has been rationalized and simplified, and aligned with PostgreSQL best practices. In particular, the \"UTC everywhere\" pattern is much better supported via the PostgreSQL timestamp with time zone type, which is the recommended way to handle timestamps. A detailed explanation is available in this blog post , below is a summary of the main improvements. UTC timestamps have been cleanly separated from non-UTC timestamps, aligning with the PostgreSQL types. The former are represented by timestamp with time zone and DateTime with Kind UTC, the latter by timestamp without time zone and DateTime with Kind Local or Unspecified. It is recommended to use UTC timestamps where possible. Npgsql no longer performs any implicit timezone conversions when reading or writing any timestamp value - the value in the database is what you get, and the machine timezone no longer plays any role when reading/writing values. Npgsql no longer supports date/time representations which cannot be fully round-tripped to the database. If it can't be fully stored as-is, you can't write it. A compatibility switch enables opting out of the new behavior, to maintain backwards compatibility. This change introduces significant breaking changes (see below), although a compatibility flag can be used to opt out and revert to the previous behavior. Other date/time improvements include: Support for the new .NET DateOnly and TimeOnly types . Most DateTimeOffset members and methods are now translated. Many NodaTime translations have been added for ZonedDateTime , Period , DateInterval and others. PostgreSQL tstzrange is now mapped to NodaTime Interval , and PostgreSQL daterange is now mapped to NodaTime DateInterval . Most methods on these types are translated ( #1998 , #2059 ). Other new features The provider is now fully annotated for nullable reference types. Full support for the PostgreSQL 14 multirange type , mapped to arrays or lists of NpgsqlRange<T> ( #1963 ). Includes translation of all major operators and functions, see the updated docs . Support for PostgreSQL 14 column compression methods ( #2062 ). Support for the PostgreSQL ltree type, which represents labels of data stored in a hierarchical tree-like structure. Requires PostgreSQL 13 and above. Multiple spatial translations have been added for NetTopologySuite ( DistanceKnn, <-> , ST_Force2D , ST_Distance and ST_DWithin with spheriod ). More translations and better type inference for arrays ( #2026 ). The full list of issues for this release is available here . Breaking changes Major changes to timestamp mapping Note It is possible to opt out of these changes to maintain backwards compatibility, see below. Quick summary In many cases, it makes sense to store UTC timestamps in the database. To do this, migrate your timestamp without time zone columns to timestamp with time zone ( see migration notes below ), and always use either DateTime with Kind=Utc or DateTimeOffset with offset 0. If using NodaTime (recommended), use either Instant or ZonedDateTime with time zone UTC. To store non-UTC timestamps, use DateTime with Kind=Unspecified and add explicit configuration to your properties to be timestamp without time zone . If using NodaTime (recommended), use LocalDateTime (no explicit column configuration is required). Detailed notes The below notes will use the PostgreSQL aliases timestamptz to refer to timestamp with time zone , and timestamp to refer to timestamp without time zone . Note that timestamp with time zone represents a UTC timestamp and does not store a timezone in the database. DateTime properties now map to timestamptz by default, instead of to timestamp ; this follows the recommended practice of storing UTC timestamps by default, but will cause the first migration to change your column type. If the intention is to store point-in-time or UTC timestamps, it's recommended to allow the migration to occur ( see migration notes below ). If the column really should store non-UTC timestamps (local or unspecified), explicitly set the column type back to timestamp . This is usually discouraged, but can be a temporary solution before transitioning to timestamptz . It is no longer possible to write DateTime with Kinds Local or Unspecified to timestamptz properties (which are the default for DateTime). Previously, Npgsql allowed writing those, performing timezone conversions from local to UTC. To write to timestamptz , provide a UTC DateTime. Similarly, it is no longer possible to write DateTime with Kind UTC to a timestamp column. timestamptz values are now read back as DateTime with Kind=UTC, without any conversions; these were previously returned as local DateTime, converted to the local machine's timezone. When reading timestamptz values as DateTimeOffset , UTC values (offset 0) are always returned. It is no longer possible to write DateTimeOffset with offsets other than 0 (UTC), since these cannot be represented in PostgreSQL. These were previously implicitly converted to UTC before sending. See the Npgsql ADO.NET docs for additional lower-level changes to timestamp handling. NodaTime changes Properties with type Instant are now mapped to timestamptz columns, and not to timestamp , since they represent a universally agreed-upon point in time. This follows the recommended practice, but will cause the first migration to change your column type. If the intention is to store point-in-time or UTC timestamps, it's recommended to allow the migration to occur ( see migration notes below ). If the column really should store non-UTC timestamps (local or unspecified), change the property's type to LocalDateTime instead; this will maintain the mapping to timestamp . This is usually discouraged, but can be a temporary solution before transitioning to timestamptz . When reading timestamptz as ZonedDateTime or OffsetDateTime , UTC values are always returned. Previously, local values based on the PostgreSQL TimeZone parameter were returned. Migrating columns from timestamp to timestamptz As a result of the above changes, the first migration created after upgrading to 6.0 will alter the columns for all DateTime and Instant properties from timestamp to timestamptz . If these columns are meant to store point-in-time or UTC timestamps (the recommended practice), then it's best to let this migration proceed; but care must be taken. As a starting point, let's assume your existing timestamp column has the timestamp 2020-01-01 12:00:00 : SELECT \"CreatedOn\", pg_typeof(\"CreatedOn\") AS type FROM \"Blogs\"; Results in: CreatedOn | type ---------------------+----------------------------- 2020-01-01 12:00:00 | timestamp without time zone The migration generated by version 6.0 will cause the following SQL to be generated: ALTER TABLE \"Blogs\" ALTER COLUMN \"CreatedOn\" TYPE timestamp with time zone; When converting the timestamp without time zone column to timestamp with time zone , PostgreSQL will assume that existing values are local timestamps, and will convert them to UTC based on the TimeZone parameter. Performing the above query will result in something like: CreatedOn | type ------------------------+-------------------------- 2020-01-01 12:00:00+02 | timestamp with time zone This means that your new timestamptz column now contains 10:00 UTC, which is probably not what you want: if the original values were in fact UTC values, you need them to be preserved as-is, changing only the column type. To do this, edit your migration and add the following to the top of your migration's Up and Down methods: migrationBuilder.Sql(\"SET TimeZone='UTC';\"); This will ensure that no time zone conversions will be applied when converting the columns: CreatedOn | type ------------------------+-------------------------- 2020-01-01 14:00:00+02 | timestamp with time zone Changing timestamp seed data When switching from timestamp without time zone to timezone with time zone , you may have have non-UTC timestamp literals in your seeding configuration: modelBuilder.Entity<Blog>().HasData(new Blog { Id = 1, Timestamp = new DateTime(2020, 1, 1, 0, 0, 0) }); If so, you'll have to change these to be UTC. In addition, all migrations code since the change must be modified in the same way, to only seed UTC DateTime into the column; the model snapshot should be changed as well. Opting out of the new timestamp mapping logic The changes described above are far-reaching, and may break applications in various ways. You can upgrade to version 6.0 but opt out of the new mapping by enabling the Npgsql.EnableLegacyTimestampBehavior AppContext switch . To do this and revert to the legacy timestamp behavior, add the following to your context's constructor, before any Npgsql or EF Core operations are invoked: AppContext.SetSwitch(\"Npgsql.EnableLegacyTimestampBehavior\", true); NodaTime: tstzrange and daterange are mapped to Interval and DateInterval by default When using NodaTime, PostgreSQL tstzrange columns are scaffolded as Interval properties instead of NpgsqlRange<Instant> ( #4070 ), and daterange columns are scaffolded as DateInterval properties of NpgsqlRange<LocalDateTime> ( #1998 ). Date/time min/max values are now converted to PostgreSQL infinity values by default PostgreSQL has special infinity and -infinity values for timestamps and dates, which are later and earlier than other value. Npgsql has supported mapping DateTime.MaxValue and MinValue to these infinity values via an Convert Infinity DateTime connection string parameter, which was disabled by default. This behavior is now on by default, since DateTime.MaxValue and MinValue are very rarely used as actual timestamps/dates, and the Convert Infinity DateTime parameter has been removed. To disable infinity conversions, add the following at the start of your application: AppContext.SetSwitch(\"Npgsql.DisableDateTimeInfinityConversions\", true); See the date/time documentation for more details. Value converters for array/list properties need to use a special new API Previously, it was possible to configure value converters for array/list properties with the general EF Core API: modelBuilder.Entity<SomeEntity>.Property(e => e.ValueConvertedArray) .HasConversion(w => w.Select(x => x.Value).ToArray(), v => v.Select(x => new IntWrapper(x)).ToArray()); This is no longer possible and will cause an exception to be thrown. Instead, use the new HasPostgresArrayConversion API, providing conversion lambdas for the array's elements : modelBuilder.Entity<SomeEntity>.Property(e => e.ValueConvertedArray) .HasPostgresArrayConversion(w => w.Value, v => new IntWrapper(v)); Arrays/lists over ranges are mapped to PG14 multiranges PostgreSQL 14 introduced a new multirange type , which is very similar to an array of ranges but supports various range-related operations efficiently. The provider now maps arrays and lists of NpgsqlRange to these new types by default. To map them to old-style arrays over ranges in PostgreSQL, configure the column type explicitly : Data Annotations Fluent API [Column(TypeName = \"int4range[]\")] public NpgsqlRange<int>[] SomeArrayOverIntNpgsqlRange { get; set;} protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder .Entity<Blog>() .Property(e => e.SomeArrayOverIntNpgsqlRange) .HasColumnType(\"int4range[]\"); } Trigrams and FuzzyStringMatch plugins are now built-in The Npgsql.EntityFrameworkCore.PostgreSQL.Trigrams and Npgsql.EntityFrameworkCore.PostgreSQL.FuzzyStringMatch plugins have been integrated into the main provider; as a result, there are no 6.0 versions of these nuget packages - simply remove the package references from your project when upgrading to 6.0.0."
  },
  "efcore/release-notes/7.0.html": {
    "href": "efcore/release-notes/7.0.html",
    "title": "7.0 Release Notes | Npgsql Documentation",
    "keywords": "7.0 Release Notes New features ExecuteUpdate and ExecuteDelete Support has been added for the new EF Core 7.0 ExecuteUpdate and ExecuteDelete , which allow expressing arbitrary, efficient updates via LINQ. See the EF What's new section for documentation. Support for DbDataSource Npgsql 7.0 introduced NpgsqlDataSource , a major improvement to how database connections and configuration are managed in System.Data. NpgsqlDataSource enabled rich new configuration APIs, which are also available when using the Npgsql EF provider: // Create a data source with the configuration you want: var dataSourceBuilder = new NpgsqlDataSourceBuilder(builder.Configuration.GetConnectionString(\"MyContext\")); dataSourceBuilder .UseLoggerFactory(loggerFactory) // Configure ADO.NET logging .UsePeriodicPasswordProvider(); // Automatically rotate the password periodically await using var dataSource = dataSourceBuilder.Build(); // Pass your data source to the EF provider: builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql(dataSource); Note that the data source configuration works at the Npgsql ADO.NET layer, and is distinct from EF-level configuration. More improvements are planned in 8.0, to make data source usage more streamlined, especially around type mapping plugins, enums, etc. Extensive support for aggregate function translation EF Core 7.0 added support for translating provider-specific aggregate functions, and EFCore.PG builds on top of that to translate most major aggregate functions that PostgreSQL supports. This unlocks support for: string_agg : pack a column's values into a single string, with or without a delimiter. array_agg : pack a column's values into a PostgreSQL array. This can help with efficient fetching of dependent values, avoiding the so-called \"cartesian explosion\" problem. Statistical functions : standard deviation, variance and many others. Spatial functions : ST_Union, ST_Collect, ST_Extent and ST_ConvexHull. JSON functions : load values from the database as JSON documents with json_agg/jsonb_agg and json_object_agg/jsonb_object_agg. For the PostgreSQL documentation on aggregate functions, see this page . The exact translations supported by the provider are documented in the translations page . Row value expressions The provider now supports translations which make use of row value expressions , which are conceptually similar to tuples. Row values are particularly useful for implementing keyset pagination , which is much more efficient than the common, offset-base pagination. To learn more about pagination techniques, see this documentation page . Here's an example comparing two row values as an implementation of keyset pagination: var nextPage = context.Posts .OrderBy(b => b.Date) .ThenBy(b => b.PostId) .Where(b => EF.Functions.GreaterThan( ValueTuple.Create(b.Date, b.PostId), ValueTuple.Create(lastDate, lastId))) .Take(10) .ToList(); This generates the following SQL: SELECT p.\"PostId\", p.\"Date\" FROM \"Posts\" AS p WHERE (p.\"Date\", p.\"PostId\") > (@__lastDate_1, @__lastId_2) ORDER BY p.\"Date\", p.\"PostId\" LIMIT @__p_3 To the list of row value translations, see the translations page . Other new features Support for PostgreSQL 15 non-distinct NULLs in unique indexes, causing unique constraint violations if a column contains multiple null values. See the documentation for more details . Stored procedure mappings: PostgreSQL support has been added for stored procedure mapping , which is a new feature in EF Core 7.0. See the EF What's new section for documentation. Note that PostgreSQL 14 or above is required to use this feature (for output parameters). Breaking changes Obsoleted UseXminAsConcurrencyToken Starting with version 7.0, concurrency token properties can be configured via the standard EF means, rather than the PostgreSQL-specific UseXminAsConcurrencyToken ; simply configure any uint property with the IsRowVersion() Fluent API or the [Timestamp] Data Annotation. See the documentation for more details . Obsoleted default column collations Versions 6.0 and below had a mechanism that allowed defining a \"default column collation\", which is applied individually to every text column by default; this differed from the database collation, which is applied once to the database at creation time. This mechanism was introduced because in PostgreSQL, the database collation is quite limited, and for example does not allow specifying non-deterministic collations (e.g. case-insensitive ones). However, with the introduction of pre-convention model configuration in EF Core, it's now possible to use that generic mechanism for specifying the default collation. As a result, the Npgsql-specific mechanism has been obsoleted and will be removed in a future version. Default column collations involve the following code: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.UseDefaultColumnCollation(\"<collation_name>\"); } To switch to the standard EF Core API, replace the code above with the following: protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder) { configurationBuilder.Properties<string>().UseCollation(\"<collation_name>\"); }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Npgsql - .NET Access to PostgreSQL | Npgsql Documentation",
    "keywords": "Npgsql - .NET Access to PostgreSQL About Npgsql is an open source ADO.NET Data Provider for PostgreSQL, it allows programs written in C#, Visual Basic, F# to access the PostgreSQL database server. It is implemented in 100% C# code, is free and is open source. An Entity Framework Core provider is also available, and exposes some features unique to the PostgreSQL database to EF Core users. Finally, a legacy Entity Framework 6.x (non-Core) provider is also available, but is no longer being actively maintained. Getting Help The best way to get help for Npgsql is to post a question to Stack Overflow and tag it with the npgsql tag. If you think you've encountered a bug or want to request a feature, open an issue in the appropriate project's github repository . License Npgsql is licensed under the PostgreSQL License , a liberal OSI-approved open source license. Contributors Current active contributors to Npgsql are: Shay Rojansky ( @roji ) Nikita Kazmin ( @vonzshik ) Brar Piening ( @Brar ) Nino Floris ( @NinoFloris ) Past contributors to Npgsql: Emmanuel André Jon Asher Raif Atef Josh Cooley Yoh Deadfall Austin Drenski Francisco Figueiredo Jr. Federico Di Gregorio Jon Hanna Emil Lenngren Chris Morgan Dave Page Glen Parker Hiroshi Saito Kenji Uno Warcha Thanks A special thanks to Jetbrains for donating licenses to the project."
  },
  "README.html": {
    "href": "README.html",
    "title": "| Npgsql Documentation",
    "keywords": "This is the documentation repo for Npgsql. It contains conceptual documentation articles for Npgsql, Npgsql.EntityFrameworkCore.PostgreSQL (AKA EFCore.PG) and EntityFramework6.Npgsql (AKA EF6.PG). Note that to properly work, docfx expects to also find the Npgsql and EFCore.PG repos cloned in the repo root - it extracts API documentation from them. A Github Actions workflow automatically clones the appropriate repository, rebuilds the entire documentation and pushes the results to live."
  }
}