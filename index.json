{
  "README.html": {
    "href": "README.html",
    "title": "| Npgsql Documentation",
    "keywords": "This is the documentation repo for Npgsql. It contains conceptual documentation articles for Npgsql, Npgsql.EntityFrameworkCore.PostgreSQL (AKA EFCore.PG) and EntityFramework6.Npgsql (AKA EF6.PG). Note that to properly work, docfx expects to also find the Npgsql and EFCore.PG repos cloned in the repo root - it extracts API documentation from them. A Github Actions workflow automatically clones the appropriate repository, rebuilds the entire documentation and pushes the results to live."
  },
  "dev/build-server.html": {
    "href": "dev/build-server.html",
    "title": "Build Server Notes | Npgsql Documentation",
    "keywords": "This page describes the steps used to set up the Npgsql build server. If you're upgrading the TeamCity version, see \"Give agent service start/stop permissions\" below. Install all supported versions of the Postgresql backend At the time of writing, this means 9.1, 9.2, 9.3, 9.4, 9.5. They are configured on ports 5491, 5492, 5493, 5494, 5495. For SSPI/GSS tests, you need to set up a user with the same name as the user that will be running the tests (i.e. teamcity_agent). You must also add the following lines at the top of each PG's pg_hba.conf to set up SSPI/GSS for that user: host all teamcity_agent 127.0.0.1/32 sspi include_realm=0 host all teamcity_agent ::1/128 sspi include_realm=0 See this page on SSPI. Install a TeamCity-dedicated Postgresql cluster TeamCity itself requires an SQL database, but we don't want it to run in the same environment as that used for the unit tests. So choosing the latest stable Postgresql version (9.6 at time of writing), we create a new Postgresql cluster: initdb -U postgres -W c:\\dev\\TeamcityPostgresData Next we set up a Windows service that starts up the new cluster: pg_ctl register -N postgresql-9.6-teamcity -U teamcity -P <password> -D c:\\dev\\TeamcityPostgresData Finally, create a a user and database and point TeamCity to it. Install .NET SDKs for all supported .NET versions .NET 4.0 (Windows 7 SDK): http://www.microsoft.com/en-us/download/details.aspx?id=8279 .NET 4.5 (Windows 8 SDK): http://msdn.microsoft.com/en-us/windows/hardware/hh852363.aspx .NET 4.5.1 (Windows 8.1 SDK): http://msdn.microsoft.com/en-us/windows/hardware/bg162891.aspx While installing the SDK for .NET 4.0, I had this problem: http://support.microsoft.com/kb/2717426 Give agent service start/stop permissions When upgrading TeamCity, the agent needs to be able to stop and start the Windows service. This is how you can grant a normal user specific permissions on specific services: Download and install subinacl from http://www.microsoft.com/en-us/download/details.aspx?id=23510 cd C:\\Program Files (x86)\\Windows Resource Kits\\Tools\\ subinacl /service TCBuildAgent /grant=teamcity_agent=TO Update build status back in github Download the plugin from https://github.com/jonnyzzz/TeamCity.GitHub, get the ZIP Drop the ZIP in the TeamCity content dir's plugins subdir Add the Build Feature \"Report change status to GitHub\". Configure everything appropriately, and be sure the user you set up has push access to the repository! Install assorted dev utilities GitVersion (with Chocolatey) WiX toolset (v3.10.1 at time of writing) Install WiX WiX 3.10 has a dependency on .NET Framework 3.5, but there's some issue blocking its installation on Windows Server 2012 R2 (at least on Azure). A good workaround is to simply install via Powershell (Add-WindowsFeature NET-Framework-Core), see https://msdn.microsoft.com/en-us/library/dn169001(v=nav.70).aspx#InstallNET35. Note that ICE validation is disabled because apparently it requires an interactive account or admin privileges, which doesn't work in continuous integration."
  },
  "dev/index.html": {
    "href": "dev/index.html",
    "title": "| Npgsql Documentation",
    "keywords": "Tests We maintain a large regression test suite, if you're planning to submit code, please provide a test that reproduces the bug or tests your new feature. See this page for information on the Npgsql test suite. Build Server We have a TeamCity build server running continuous integration builds on commits pushed to our github repository. The Npgsql testsuite is executed over all officially supported PostgreSQL versions to catch errors as early as possible. CI NuGet packages are automatically pushed to our unstable feed at MyGet. For some information about the build server setup, see this page. Thanks to Dave Page at PostgreSQL for donating a VM for this! Release Checklist These are the steps needed to publish release 3.0.6: Merge --no-ff hotfix/3.0.6 into master Tag master with v3.0.6 Push both master and v3.0.6 to Github Wait for the build to complete In TeamCity, go to the artifacts for the build and download them all as a single ZIP Nuget push the packages Write release notes on npgsql.org, publish Create release on github, pointing to npgsql.org Upload MSI to the github release Delete hotfix/3.0.6 both locally and on github Create new branch hotfix/3.0.7 off of master, push to github Close the Github 3.0.6 milestone, create new 3.0.7 milestone Twitter Other stuff Emil compiled a list of PostgreSQL types and their wire representations."
  },
  "dev/tests.html": {
    "href": "dev/tests.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Overview Npgsql comes with an extensive test suite to make sure no regressions occur. All tests are run on our build server on all supported .NET versions (including a recent version of mono) and all supported PostgreSQL backends. There is also a growing suite of speed tests to be able to measure performance. These tests are currently marked [Explicit] and aren't executed automatically. Simple setup The Npgsql test suite requires a PostgreSQL backend to test against. Simply use the latest version of PostgreSQL on your dev machine on the default port (5432). By default, all tests will be run using user npgsql_tests, and password npgsql_tests. Npgsql will automatically create a database called npgsql_tests and run its tests against this. To set this up, connect to PostgreSQL as the admin user as follows: psql -h localhost -U postgres <enter the admin password> create user npgsql_tests password 'npgsql_tests' superuser; And you're done. Superuser access is needed for some tests, e.g. loading the hstore extension, creating and dropping test databases in the Entity Framework tests..."
  },
  "dev/types.html": {
    "href": "dev/types.html",
    "title": "PostgreSQL Types | Npgsql Documentation",
    "keywords": "Overview The following are notes by Emil Lenngren on PostgreSQL wire representation of types: bool: text: t or f binary: a byte: 1 or 0 bytea: text: either \\x followed by hex-characters (lowercase by default), or plain characters, where non-printable characters (between 0x20 and 0x7e, inclusive) are written as \\nnn (octal) and \\ is written as \\\\ binary: the bytes as they are char: This type holds a single char/byte. (Not to be confused with bpchar (blank-padded char) which is PostgreSQL's alias to the SQL standard's char). The char may be the null-character text: the char as a byte, encoding seems to be ignored binary: the char as a byte name: A null-padded string of NAMEDATALEN (currently 64) bytes (the last byte must be a null-character). Used in pg catalog. text: the name as a string binary: the name as a string int2/int4/int8: text: text representation in base 10 binary: binary version of the integer int2vector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as int2[] oidvector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as oid[] regproc: internally just an OID (UInt32) text: -, name of procedure, or numeric if not found binary: only the OID in binary regprocedure/regoper/regoperator/regclass/regconfig/regdictionary: similar to regproc text: text: the string as it is binary: the string as it is oid: A 32-bit unsigned integer used for internal object identification. text: the text-representation of this integer in base 10 binary: the UInt32 tid: tuple id Internally a tuple of a BlockNumber (UInt32) and an OffsetNumber (UInt16) text: (blockNumber,offsetNumber) binary: the block number in binary followed by offset number in binary xid: transaction id Internally just a TransactionId (UInt32) text: the number binary: the number in binary cid: command id Internally just a CommandId (UInt32) text: the number binary: the number in binary json: json text: the json an text binary: the json as text jsonb: json internally stored in an efficient binary format text: the json as text binary: An Int32 (version number, currently 1), followed by data (currently just json as text) xml: Xml. It is probably most efficient to use the text format, especially when receiving from client. text: the xml as text (when sent from the server: encoding removed, when receiving: assuming database encoding) binary: the xml as text (when sent from the server: in the client's specified encoding, when receiving: figures out itself) pg_node_tree: used as type for the column typdefaultbin in pg_type does not accept input text: text binary: text smgr: storage manager can only have the value \"magnetic disk\" text: magnetic disk binary: not available point: A tuple of two float8 text: (x,y) The floats are interpreted with the C strtod function. The floats are written with the snprintf function, with %.*g format. NaN/-Inf/+Inf can be written, but not interpretability depends on platform. The extra_float_digits setting is honored. For linux, NaN, [+-]Infinity, [+-]Inf works, but not on Windows. Windows also have other output syntax for these special numbers. (1.#QNAN for example) binary: the two floats lseg: A tuple of two points text: [(x1,y1),(x2,y2)] see point for details binary: the four floats in the order x1, y1, x2, y2 path: A boolean whether the path is opened or closed + a vector of points. text: [(x1,y1),...] for open path and ((x1,y1),...) for closed paths. See point for details. binary: first a byte indicating open (0) or close (1), then the number of points (Int32), then a vector of points box: A tuple of two points. The coordinates will be reordered so that the first is the upper right and the second is the lower left. text: (x1,y1),(x2,y2) see point for details binary: the four floats in the order x1, y1, x2, y2 (doesn't really matter since they will be reordered) polygon: Same as path but with two differences: is always closed and internally stores the bounding box. text: same as closed path binary: the number of points (Int32), then a vector of points line (version 9.4): Ax + By + C = 0. Stored with three float8. Constraint: A and B must not both be zero (only checked on text input, not binary). text: {A,B,C} see point for details about the string representation of floats. Can also use the same input format as a path with two different points, representing the line between those. binary: the three floats circle: <(x,y),r> (center point and radius), stored with three float8. text: <(x,y),r> see point for details about the string representation of floats. binary: the three floats x, y, r in that order float4/float8: text: (leading/trailing whitespace is skipped) interpreted with the C strtod function, but since it has problems with NaN, [+-]Infinity, [+-]Inf, those strings are identified (case-insensitively) separately. when outputting: NaN, [+-]Infinity is treated separately, otherwise the string is printed with snprintf %.*g and the extra_float_digits setting is honored. binary: the float abstime: A unix timestamp stored as a 32-bit signed integer with seconds-precision (seconds since 1970-01-01 00:00:00), in UTC Has three special values: Invalid (2^31-1), infinity (2^31-3), -infinity (-2^31) text: same format as timestamptz, or \"invalid\", \"infinity\", \"-infinity\" binary: Int32 reltime: A time interval with seconds-precision (stored as an 32-bit signed integer) text: same as interval binary: Int32 tinterval: Consists of a status (Int32) and two abstimes. Status is valid (1) iff both abstimes are valid, else 0. Note that the docs incorrectly states that ' is used as quote instead of \" text: [\"<abstime>\" \"<abstime>\"] binary: Int32 (status), Int32 (abstime 1), Int32 (abstime 2) unknown: text: text binary: text money: A 64-bit signed integer. For example, $123.45 is stored as the integer 12345. Number of fraction digits is locale-dependent. text: a locale-depedent string binary: the raw 64-bit integer macaddr: 6 bytes text: the 6 bytes in hex (always two characters per byte) separated by : binary: the 6 bytes appearing in the same order as when written in text inet/cidr: Struct of Family (byte: ipv4=2, ipv6=3), Netmask (byte with number of bits in the netmask), Ipaddr bytes (16) Text: The IP-address in text format and /netmask. /netmask is omitted in inet if the netmask is the whole address. Binary: family byte, netmask byte, byte (cidr=1, inet=0), number of bytes in address, bytes of the address aclitem: Access list item used in pg_class Text: Something like postgres=arwdDxt/postgres Binary: not available bpchar: Blank-padded char. The type modifier is used to blank-pad the input. text: text binary: text varchar: Variable-length char. The type modifier is used to check the input's length. text: text binary: text date: A signed 32-bit integer of a date. 0 = 2000-01-01. Infinity: INT_MAX, -Infinity: INT_MIN Text: Date only using the specified date style Binary: Int32 time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer timetz: A struct of Time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. Zone: A signed 32-bit integer representing the zone (in seconds). Note that the sign is inverted. So GMT+1h is stored as -1h. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer followed by the 32-bit integer timestamp: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 Infinity is LONG_MAX and -Infinity is LONG_MIN (Infinity would be 294277-01-09 04:00:54.775807) Earliest possible timestamp is 4714-11-24 00:00:00 BC. Even earlier would be possible, but due to internal calculations those are forbidden. text: dependent on date style binary: the 64-bit integer timestamptz: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 UTC. (Time zone is not stored). Infinity is LONG_MAX and -Infinity is LONG_MIN text: first converted to the time zone in the db settings, then printed according to the date style binary: the 64-bit integer interval: A struct of Time (Int64): all time units other than days, months and years (microseconds) Day (Int32): days, after time for alignment Month (Int32): months and years, after time for alignment text: Style dependent, but for example: \"-11 mons +15435 days -11111111:53:00\" binary: all fields in the struct bit/varbit: First a signed 32-bit integer containing the number of bits (negative length not allowed). Then all the bits in big end first. So a varbit of length 1 has the first (and only) byte set to either 0x80 or 0x00. Last byte is assumed (and is automatically zero-padded in recv) to be zero-padded. text: when sending from backend: all the bits, written with 1s and 0s. when receiving from client: (optionally b or B followed by) all the bits as 1s and 0s, or a x or X followed by hexadecimal digits (upper- or lowercase), big endian first. binary: the 32-bit length followed by the bytes containing the bits numeric: A variable-length numeric value, can be negative. text: NaN or first - if it is negative, then the digits with . as decimal separator binary: first a header of 4 16-bit signed integers: number of digits in the digits array that follows (can be 0, but not negative), weight of the first digit (10000^weight), can be both negative, positive or 0, sign: negative=0x4000, positive=0x0000, NaN=0xC000 dscale: number of digits (in base 10) to print after the decimal separator then the array of digits: The digits are stored in base 10000, where each digit is a 16-bit integer. Trailing zeros are not stored in this array, to save space. The digits are stored such that, if written as base 10000, the decimal separator can be inserted between two digits in base 10000, i.e. when this is to be printed in base 10, only the first digit in base 10000 can (possibly) be printed with less than 4 characters. Note that this does not apply for the digits after the decimal separator; the digits should be printed out in chunks of 4 characters and then truncated with the given dscale. refcursor: uses the same routines as text record: Describes a tuple. Is also the \"base class\" for composite types (i.e. it uses the same i/o functions). text: ( followed by a list of comma-separated text-encoded values followed by ). Empty element means null. Quoted with \" and \" if necessary. \" is escaped with \"\" and \\ is escaped with \\\\ (this differs from arrays where \" is escaped with \\\"). Must be quoted if it is an empty string or contains one of \"\\,() or a space. binary: First a 32-bit integer with the number of columns, then for each column: An OID indicating the type of the column The length of the column (32-bit integer), or -1 if null The column data encoded as binary cstring: text/binary: all characters are sent without the trailing null-character void: Used for example as return value in SELECT * FROM func_returning_void() text: an empty string binary: zero bytes uuid: A 16-byte uuid. text: group of 8, 4, 4, 4, 12 hexadecimal lower-case characters, separated by -. The first byte is written first. It is allowed to surround it with {}. binary: the 16 bytes txid_snapshot: (txid is a UInt64) A struct of UInt32 nxip (size of the xip array) txid xmin (no values in xip is smaller than this) txid xmax (no values in xip is larger than or equal this) txid[] xip (is ordered in ascending order) text: xmin:xmax:1,2,3,4 binary: all fields in the structure tsvector: Used for text searching. Example of tsvector: 'a':1,6,10 'on':5 'and':8 'ate':9A 'cat':3 'fat':2,11 'mat':7 'rat':12 'sat':4 Max length for each lexeme string is 2046 bytes (excluding the trailing null-char) The words are sorted when parsed, and only written once. Positions are also sorted and only written once. For some reason, the unique check does not seem to be made for binary input, only text input... text: As seen above. ' is escaped with '' and \\ is escaped with \\\\. binary: UInt32 number of lexemes for each lexeme: lexeme text in client encoding, null-terminated UInt16 number of positions for each position: UInt16 WordEntryPos, where the most significant 2 bits is weight, and the 14 least significant bits is pos (can't be 0). Weights 3,2,1,0 represent A,B,C,D tsquery: A tree with operands and operators (&, |, !). Operands are strings, with optional weight (bitmask of ABCD) and prefix search (yes/no, written with *). text: the tree written in infix notation. Example: ( 'abc':*B | 'def' ) & !'ghi' binary: the tree written in prefix notation: First the number of tokens (a token is an operand or an operator). For each token: UInt8 type (1 = val, 2 = oper) followed by For val: UInt8 weight + UInt8 prefix (1 = yes / 0 = no) + null-terminated string, For oper: UInt8 oper (1 = not, 2 = and, 3 = or, 4 = phrase). In case of phrase oper code, an additional UInt16 field is sent (distance value of operator). Default is 1 for <->, otherwise the n value in '<n>'. enum: Simple text gtsvector: GiST for tsvector. Probably internal type. int4range/numrange/tsrange/tstzrange/daterange/int8range and user-defined range types: /* A range's flags byte contains these bits: */ #define RANGE_EMPTY 0x01 /* range is empty */ #define RANGE_LB_INC 0x02 /* lower bound is inclusive */ #define RANGE_UB_INC 0x04 /* upper bound is inclusive */ #define RANGE_LB_INF 0x08 /* lower bound is -infinity */ #define RANGE_UB_INF 0x10 /* upper bound is +infinity */ #define RANGE_LB_NULL 0x20 /* lower bound is null (NOT USED) */ #define RANGE_UB_NULL 0x40 /* upper bound is null (NOT USED) */ #define RANGE_CONTAIN_EMPTY 0x80/* marks a GiST internal-page entry whose * subtree contains some empty ranges */ A range has no lower bound if any of RANGE_EMPTY, RANGE_LB_INF (or RANGE_LB_NULL, not used anymore) is set. The same applies for upper bounds. text: A range with RANGE_EMPTY is just written as the string \"empty\". Inclusive bounds are written with [ and ], else ( and ) is used. The two values are comma-separated. Missing bounds are written as an empty string (without quotes). Each value is quoted with \" if necessary. Quotes are necessary if the string is either the empty string or contains \"\\,()[] or spaces. \" is escaped with \"\" and \\ is escaped with \\\\. Example: [18,21] binary: First the flag byte. Then, if has lower bound: 32-bit length + binary-encoded data. Then, if has upper bound: 32-bit length + binary-encoded data. hstore: Key/value-store. Both keys and values are strings. text: Comma-space separated string, where each item is written as \"key\"=>\"value\" or \"key\"=>NULL. \" and \\ are escaped as \\\" and \\\\. Example: \"a\"=>\"b\", \"c\"=>NULL, \"d\"=>\"q\" binary: Int32 count for each item: Int32 keylen string of the key (not null-terminated) Int32 length of item (or -1 if null) the item as a string ghstore: internal type for indexing hstore domain types: mapped types used in information_schema: cardinal_number: int4 (must be nonnegative or null) character_data: varchar sql_identifier: varchar time_stamp: timestamptz yes_or_no: varchar(3) (must be \"YES\" or \"NO\" or null) intnotnull: when an int4 is cast to this type, it is checked that the int4 is not null, but it still returns an int4 and not intnotnull..."
  },
  "doc/api/Npgsql.ArrayNullabilityMode.html": {
    "href": "doc/api/Npgsql.ArrayNullabilityMode.html",
    "title": "Enum ArrayNullabilityMode | Npgsql Documentation",
    "keywords": "Enum ArrayNullabilityMode Specifies how the mapping of arrays of value types behaves with respect to nullability when they are requested via an API returning an object. Namespace: Npgsql Assembly: Npgsql.dll Syntax public enum ArrayNullabilityMode Fields Name Description Always Arrays of value types are always returned as nullable arrays (e.g. int?[]). Never Arrays of value types are always returned as non-nullable arrays (e.g. int[]). If the PostgreSQL array contains a NULL value, an exception is thrown. This is the default mode. PerInstance The type of array that gets returned is determined at runtime. Arrays of value types are returned as non-nullable arrays (e.g. int[]) if the actual instance that gets returned doesn't contain null values and as nullable arrays (e.g. int?[]) if it does."
  },
  "doc/api/Npgsql.BackendMessages.FieldDescription.html": {
    "href": "doc/api/Npgsql.BackendMessages.FieldDescription.html",
    "title": "Class FieldDescription | Npgsql Documentation",
    "keywords": "Class FieldDescription A descriptive record on a single field received from PostgreSQL. See RowDescription in https://www.postgresql.org/docs/current/static/protocol-message-formats.html Inheritance object FieldDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.BackendMessages Assembly: Npgsql.dll Syntax public sealed class FieldDescription Properties | Edit this page View Source TypeModifier The type modifier (see pg_attribute.atttypmod). The meaning of the modifier is type-specific. Declaration public int TypeModifier { get; set; } Property Value Type Description int | Edit this page View Source TypeSize The data type size (see pg_type.typlen). Note that negative values denote variable-width types. Declaration public short TypeSize { get; set; } Property Value Type Description short Methods | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "doc/api/Npgsql.BackendMessages.html": {
    "href": "doc/api/Npgsql.BackendMessages.html",
    "title": "Namespace Npgsql.BackendMessages | Npgsql Documentation",
    "keywords": "Namespace Npgsql.BackendMessages Classes FieldDescription A descriptive record on a single field received from PostgreSQL. See RowDescription in https://www.postgresql.org/docs/current/static/protocol-message-formats.html"
  },
  "doc/api/Npgsql.ChannelBinding.html": {
    "href": "doc/api/Npgsql.ChannelBinding.html",
    "title": "Enum ChannelBinding | Npgsql Documentation",
    "keywords": "Enum ChannelBinding Specifies how to manage channel binding. Namespace: Npgsql Assembly: Npgsql.dll Syntax public enum ChannelBinding Fields Name Description Disable Channel binding is disabled. If the server requires channel binding, the connection will fail. Prefer Prefer channel binding if the server allows it, but connect without it if not. Require Fail the connection if the server doesn't support channel binding."
  },
  "doc/api/Npgsql.INpgsqlNameTranslator.html": {
    "href": "doc/api/Npgsql.INpgsqlNameTranslator.html",
    "title": "Interface INpgsqlNameTranslator | Npgsql Documentation",
    "keywords": "Interface INpgsqlNameTranslator A component which translates a CLR name (e.g. SomeClass) into a database name (e.g. some_class) according to some scheme. Used for mapping enum and composite types. Namespace: Npgsql Assembly: Npgsql.dll Syntax public interface INpgsqlNameTranslator Methods | Edit this page View Source TranslateMemberName(string) Given a CLR member name (property or field), translates its name to a database type name. Declaration string TranslateMemberName(string clrName) Parameters Type Name Description string clrName Returns Type Description string | Edit this page View Source TranslateTypeName(string) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration string TranslateTypeName(string clrName) Parameters Type Name Description string clrName Returns Type Description string"
  },
  "doc/api/Npgsql.Internal.BufferRequirements.html": {
    "href": "doc/api/Npgsql.Internal.BufferRequirements.html",
    "title": "Struct BufferRequirements | Npgsql Documentation",
    "keywords": "Struct BufferRequirements Implements IEquatable<BufferRequirements> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public readonly struct BufferRequirements : IEquatable<BufferRequirements> Properties | Edit this page View Source None Declaration public static BufferRequirements None { get; } Property Value Type Description BufferRequirements | Edit this page View Source Read Declaration public Size Read { get; } Property Value Type Description Size | Edit this page View Source Value Declaration public static BufferRequirements Value { get; } Property Value Type Description BufferRequirements | Edit this page View Source Write Declaration public Size Write { get; } Property Value Type Description Size Methods | Edit this page View Source Combine(BufferRequirements) Declaration public BufferRequirements Combine(BufferRequirements other) Parameters Type Name Description BufferRequirements other Returns Type Description BufferRequirements | Edit this page View Source Combine(Size, Size) Declaration public BufferRequirements Combine(Size read, Size write) Parameters Type Name Description Size read Size write Returns Type Description BufferRequirements | Edit this page View Source Combine(int) Declaration public BufferRequirements Combine(int byteCount) Parameters Type Name Description int byteCount Returns Type Description BufferRequirements | Edit this page View Source Create(Size) Declaration public static BufferRequirements Create(Size value) Parameters Type Name Description Size value Returns Type Description BufferRequirements | Edit this page View Source Create(Size, Size) Declaration public static BufferRequirements Create(Size read, Size write) Parameters Type Name Description Size read Size write Returns Type Description BufferRequirements | Edit this page View Source CreateFixedSize(int) Declaration public static BufferRequirements CreateFixedSize(int byteCount) Parameters Type Name Description int byteCount Returns Type Description BufferRequirements | Edit this page View Source Equals(BufferRequirements) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(BufferRequirements other) Parameters Type Name Description BufferRequirements other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(BufferRequirements, BufferRequirements) Declaration public static bool operator ==(BufferRequirements left, BufferRequirements right) Parameters Type Name Description BufferRequirements left BufferRequirements right Returns Type Description bool | Edit this page View Source operator !=(BufferRequirements, BufferRequirements) Declaration public static bool operator !=(BufferRequirements left, BufferRequirements right) Parameters Type Name Description BufferRequirements left BufferRequirements right Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/Npgsql.Internal.DataFormat.html": {
    "href": "doc/api/Npgsql.Internal.DataFormat.html",
    "title": "Enum DataFormat | Npgsql Documentation",
    "keywords": "Enum DataFormat Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public enum DataFormat : byte Fields Name Description Binary Text"
  },
  "doc/api/Npgsql.Internal.DynamicTypeInfoResolver.DynamicMappingCollection.html": {
    "href": "doc/api/Npgsql.Internal.DynamicTypeInfoResolver.DynamicMappingCollection.html",
    "title": "Class DynamicTypeInfoResolver.DynamicMappingCollection | Npgsql Documentation",
    "keywords": "Class DynamicTypeInfoResolver.DynamicMappingCollection Inheritance object DynamicTypeInfoResolver.DynamicMappingCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax protected class DynamicTypeInfoResolver.DynamicMappingCollection Methods | Edit this page View Source AddArrayMapping(Type, string) Declaration public DynamicTypeInfoResolver.DynamicMappingCollection AddArrayMapping(Type elementType, string dataTypeName) Parameters Type Name Description Type elementType string dataTypeName Returns Type Description DynamicTypeInfoResolver.DynamicMappingCollection | Edit this page View Source AddMapping(Type, string, TypeInfoFactory, Func<TypeInfoMapping, TypeInfoMapping>?) Declaration public DynamicTypeInfoResolver.DynamicMappingCollection AddMapping(Type type, string dataTypeName, TypeInfoFactory factory, Func<TypeInfoMapping, TypeInfoMapping>? configureMapping = null) Parameters Type Name Description Type type string dataTypeName TypeInfoFactory factory Func<TypeInfoMapping, TypeInfoMapping> configureMapping Returns Type Description DynamicTypeInfoResolver.DynamicMappingCollection | Edit this page View Source AddResolverArrayMapping(Type, string) Declaration public DynamicTypeInfoResolver.DynamicMappingCollection AddResolverArrayMapping(Type elementType, string dataTypeName) Parameters Type Name Description Type elementType string dataTypeName Returns Type Description DynamicTypeInfoResolver.DynamicMappingCollection | Edit this page View Source AddResolverMapping(Type, string, TypeInfoFactory, Func<TypeInfoMapping, TypeInfoMapping>?) Declaration public DynamicTypeInfoResolver.DynamicMappingCollection AddResolverMapping(Type type, string dataTypeName, TypeInfoFactory factory, Func<TypeInfoMapping, TypeInfoMapping>? configureMapping = null) Parameters Type Name Description Type type string dataTypeName TypeInfoFactory factory Func<TypeInfoMapping, TypeInfoMapping> configureMapping Returns Type Description DynamicTypeInfoResolver.DynamicMappingCollection | Edit this page View Source ToTypeInfoMappingCollection() Declaration public TypeInfoMappingCollection ToTypeInfoMappingCollection() Returns Type Description TypeInfoMappingCollection"
  },
  "doc/api/Npgsql.Internal.DynamicTypeInfoResolver.html": {
    "href": "doc/api/Npgsql.Internal.DynamicTypeInfoResolver.html",
    "title": "Class DynamicTypeInfoResolver | Npgsql Documentation",
    "keywords": "Class DynamicTypeInfoResolver Inheritance object DynamicTypeInfoResolver Implements IPgTypeInfoResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public abstract class DynamicTypeInfoResolver : IPgTypeInfoResolver Methods | Edit this page View Source CreateCollection(TypeInfoMappingCollection?) Declaration protected static DynamicTypeInfoResolver.DynamicMappingCollection CreateCollection(TypeInfoMappingCollection? baseCollection = null) Parameters Type Name Description TypeInfoMappingCollection baseCollection Returns Type Description DynamicTypeInfoResolver.DynamicMappingCollection | Edit this page View Source GetMappings(Type?, DataTypeName, PgSerializerOptions) Declaration protected abstract DynamicTypeInfoResolver.DynamicMappingCollection? GetMappings(Type? type, DataTypeName dataTypeName, PgSerializerOptions options) Parameters Type Name Description Type type DataTypeName dataTypeName PgSerializerOptions options Returns Type Description DynamicTypeInfoResolver.DynamicMappingCollection | Edit this page View Source GetTypeInfo(Type?, DataTypeName?, PgSerializerOptions) Resolve a type info for a given type and data type name, at least one value will be non-null. Declaration public PgTypeInfo? GetTypeInfo(Type? type, DataTypeName? dataTypeName, PgSerializerOptions options) Parameters Type Name Description Type type The clr type being requested. DataTypeName? dataTypeName The postgres type being requested. PgSerializerOptions options Used for configuration state and Npgsql type info or PostgreSQL type catalog lookups. Returns Type Description PgTypeInfo A result, or null if there was no match. | Edit this page View Source IsArrayDataTypeName(DataTypeName, PgSerializerOptions, out DataTypeName) Declaration protected static bool IsArrayDataTypeName(DataTypeName dataTypeName, PgSerializerOptions options, out DataTypeName elementDataTypeName) Parameters Type Name Description DataTypeName dataTypeName PgSerializerOptions options DataTypeName elementDataTypeName Returns Type Description bool | Edit this page View Source IsArrayLikeType(Type, out Type?) Declaration protected static bool IsArrayLikeType(Type type, out Type? elementType) Parameters Type Name Description Type type Type elementType Returns Type Description bool | Edit this page View Source IsTypeOrNullableOfType(Type, Func<Type, bool>, out Type) Declaration protected static bool IsTypeOrNullableOfType(Type type, Func<Type, bool> predicate, out Type matchedType) Parameters Type Name Description Type type Func<Type, bool> predicate Type matchedType Returns Type Description bool Implements IPgTypeInfoResolver"
  },
  "doc/api/Npgsql.Internal.HackyEnumTypeMapping.html": {
    "href": "doc/api/Npgsql.Internal.HackyEnumTypeMapping.html",
    "title": "Class HackyEnumTypeMapping | Npgsql Documentation",
    "keywords": "Class HackyEnumTypeMapping Hacky temporary measure used by EFCore.PG to extract user-configured enum mappings. Accessed via reflection only. Inheritance object HackyEnumTypeMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public sealed class HackyEnumTypeMapping Constructors | Edit this page View Source HackyEnumTypeMapping(Type, string, INpgsqlNameTranslator) Declaration public HackyEnumTypeMapping(Type enumClrType, string pgTypeName, INpgsqlNameTranslator nameTranslator) Parameters Type Name Description Type enumClrType string pgTypeName INpgsqlNameTranslator nameTranslator Properties | Edit this page View Source EnumClrType Declaration public Type EnumClrType { get; } Property Value Type Description Type | Edit this page View Source NameTranslator Declaration public INpgsqlNameTranslator NameTranslator { get; } Property Value Type Description INpgsqlNameTranslator | Edit this page View Source PgTypeName Declaration public string PgTypeName { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.Internal.INpgsqlDatabaseInfoFactory.html": {
    "href": "doc/api/Npgsql.Internal.INpgsqlDatabaseInfoFactory.html",
    "title": "Interface INpgsqlDatabaseInfoFactory | Npgsql Documentation",
    "keywords": "Interface INpgsqlDatabaseInfoFactory A factory which get generate instances of NpgsqlDatabaseInfo, which describe a database and the types it contains. When first connecting to a database, Npgsql will attempt to load information about it via this factory. Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public interface INpgsqlDatabaseInfoFactory Methods | Edit this page View Source Load(NpgsqlConnector, NpgsqlTimeout, bool) Given a connection, loads all necessary information about the connected database, e.g. its types. A factory should only handle the exact database type it was meant for, and return null otherwise. Declaration Task<NpgsqlDatabaseInfo?> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async) Parameters Type Name Description NpgsqlConnector conn NpgsqlTimeout timeout bool async Returns Type Description Task<NpgsqlDatabaseInfo> An object describing the database to which conn is connected, or null if the database isn't of the correct type and isn't handled by this factory."
  },
  "doc/api/Npgsql.Internal.IPgTypeInfoResolver.html": {
    "href": "doc/api/Npgsql.Internal.IPgTypeInfoResolver.html",
    "title": "Interface IPgTypeInfoResolver | Npgsql Documentation",
    "keywords": "Interface IPgTypeInfoResolver An Npgsql resolver for type info. Used by Npgsql to read and write values to PostgreSQL. Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public interface IPgTypeInfoResolver Methods | Edit this page View Source GetTypeInfo(Type?, DataTypeName?, PgSerializerOptions) Resolve a type info for a given type and data type name, at least one value will be non-null. Declaration PgTypeInfo? GetTypeInfo(Type? type, DataTypeName? dataTypeName, PgSerializerOptions options) Parameters Type Name Description Type type The clr type being requested. DataTypeName? dataTypeName The postgres type being requested. PgSerializerOptions options Used for configuration state and Npgsql type info or PostgreSQL type catalog lookups. Returns Type Description PgTypeInfo A result, or null if there was no match."
  },
  "doc/api/Npgsql.Internal.MatchRequirement.html": {
    "href": "doc/api/Npgsql.Internal.MatchRequirement.html",
    "title": "Enum MatchRequirement | Npgsql Documentation",
    "keywords": "Enum MatchRequirement Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public enum MatchRequirement Fields Name Description All DataTypeName Single"
  },
  "doc/api/Npgsql.Internal.NestedReadScope.html": {
    "href": "doc/api/Npgsql.Internal.NestedReadScope.html",
    "title": "Struct NestedReadScope | Npgsql Documentation",
    "keywords": "Struct NestedReadScope Implements IDisposable IAsyncDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public readonly struct NestedReadScope : IDisposable, IAsyncDisposable Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.Internal.NestedWriteScope.html": {
    "href": "doc/api/Npgsql.Internal.NestedWriteScope.html",
    "title": "Struct NestedWriteScope | Npgsql Documentation",
    "keywords": "Struct NestedWriteScope Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public struct NestedWriteScope : IDisposable Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements IDisposable"
  },
  "doc/api/Npgsql.Internal.NpgsqlConnector.html": {
    "href": "doc/api/Npgsql.Internal.NpgsqlConnector.html",
    "title": "Class NpgsqlConnector | Npgsql Documentation",
    "keywords": "Class NpgsqlConnector Represents a connection to a PostgreSQL backend. Unlike NpgsqlConnection objects, which are exposed to users, connectors are internal to Npgsql and are recycled by the connection pool. Inheritance object NpgsqlConnector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public sealed class NpgsqlConnector Properties | Edit this page View Source DatabaseInfo Information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...). Declaration public NpgsqlDatabaseInfo DatabaseInfo { get; } Property Value Type Description NpgsqlDatabaseInfo | Edit this page View Source Settings The parsed connection string. Declaration public NpgsqlConnectionStringBuilder Settings { get; } Property Value Type Description NpgsqlConnectionStringBuilder | Edit this page View Source TextEncoding Declaration public Encoding TextEncoding { get; } Property Value Type Description Encoding Methods | Edit this page View Source CreateBatch() Creates and returns a NpgsqlBatch object associated with the NpgsqlConnector. Declaration public NpgsqlBatch CreateBatch() Returns Type Description NpgsqlBatch A NpgsqlBatch object. | Edit this page View Source CreateCommand(string?) Creates and returns a NpgsqlCommand object associated with the NpgsqlConnector. Declaration public NpgsqlCommand CreateCommand(string? cmdText = null) Parameters Type Name Description string cmdText The text of the query. Returns Type Description NpgsqlCommand A NpgsqlCommand object."
  },
  "doc/api/Npgsql.Internal.NpgsqlDatabaseInfo.html": {
    "href": "doc/api/Npgsql.Internal.NpgsqlDatabaseInfo.html",
    "title": "Class NpgsqlDatabaseInfo | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseInfo Base class for implementations which provide information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...). Inheritance object NpgsqlDatabaseInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public abstract class NpgsqlDatabaseInfo Constructors | Edit this page View Source NpgsqlDatabaseInfo(string, int, string, Version) Initializes the instance of NpgsqlDatabaseInfo. Declaration protected NpgsqlDatabaseInfo(string host, int port, string databaseName, Version version) Parameters Type Name Description string host int port string databaseName Version version | Edit this page View Source NpgsqlDatabaseInfo(string, int, string, Version, string) Initializes the instance of NpgsqlDatabaseInfo. Declaration protected NpgsqlDatabaseInfo(string host, int port, string databaseName, Version version, string serverVersion) Parameters Type Name Description string host int port string databaseName Version version string serverVersion Properties | Edit this page View Source HasIntegerDateTimes Reports whether the backend uses the newer integer timestamp representation. Declaration public virtual bool HasIntegerDateTimes { get; protected set; } Property Value Type Description bool | Edit this page View Source Host The hostname of IP address of the database. Declaration public string Host { get; } Property Value Type Description string | Edit this page View Source Name The database name. Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Port The TCP port of the database. Declaration public int Port { get; } Property Value Type Description int | Edit this page View Source ServerVersion The PostgreSQL version string as returned by the server_version option. Populated during loading. Declaration public string ServerVersion { get; } Property Value Type Description string | Edit this page View Source SupportsAdvisoryLocks Whether the backend supports advisory locks. Declaration public virtual bool SupportsAdvisoryLocks { get; } Property Value Type Description bool | Edit this page View Source SupportsCloseAll Whether the backend supports the CLOSE ALL statement. Declaration public virtual bool SupportsCloseAll { get; } Property Value Type Description bool | Edit this page View Source SupportsDiscard Whether the backend supports the DISCARD statement. Declaration public virtual bool SupportsDiscard { get; } Property Value Type Description bool | Edit this page View Source SupportsDiscardSequences Whether the backend supports the DISCARD SEQUENCES statement. Declaration public virtual bool SupportsDiscardSequences { get; } Property Value Type Description bool | Edit this page View Source SupportsDiscardTemp Whether the backend supports the DISCARD TEMP statement. Declaration public virtual bool SupportsDiscardTemp { get; } Property Value Type Description bool | Edit this page View Source SupportsEnumTypes Whether the backend supports enum types. Declaration public virtual bool SupportsEnumTypes { get; } Property Value Type Description bool | Edit this page View Source SupportsMultirangeTypes Whether the backend supports multirange types. Declaration public virtual bool SupportsMultirangeTypes { get; } Property Value Type Description bool | Edit this page View Source SupportsRangeTypes Whether the backend supports range types. Declaration public virtual bool SupportsRangeTypes { get; } Property Value Type Description bool | Edit this page View Source SupportsTransactions Whether the database supports transactions. Declaration public virtual bool SupportsTransactions { get; protected set; } Property Value Type Description bool | Edit this page View Source SupportsUnlisten Whether the backend supports the UNLISTEN statement. Declaration public virtual bool SupportsUnlisten { get; } Property Value Type Description bool | Edit this page View Source Version The version of the PostgreSQL database we're connected to, as reported in the \"server_version\" parameter. Exposed via PostgreSqlVersion. Declaration public Version Version { get; } Property Value Type Description Version Methods | Edit this page View Source GetPostgresType(string) Declaration public PostgresType GetPostgresType(string pgName) Parameters Type Name Description string pgName Returns Type Description PostgresType | Edit this page View Source GetPostgresType(uint) Declaration public PostgresType GetPostgresType(uint oid) Parameters Type Name Description uint oid Returns Type Description PostgresType | Edit this page View Source GetTypes() Provides all PostgreSQL types detected in this database. Declaration protected abstract IEnumerable<PostgresType> GetTypes() Returns Type Description IEnumerable<PostgresType> | Edit this page View Source ParseServerVersion(string) Parses a PostgreSQL server version (e.g. 10.1, 9.6.3) and returns a CLR Version. Declaration protected static Version ParseServerVersion(string value) Parameters Type Name Description string value Returns Type Description Version | Edit this page View Source RegisterFactory(INpgsqlDatabaseInfoFactory) Registers a new database info factory, which is used to load information about databases. Declaration public static void RegisterFactory(INpgsqlDatabaseInfoFactory factory) Parameters Type Name Description INpgsqlDatabaseInfoFactory factory | Edit this page View Source TryGetPostgresTypeByName(string, out PostgresType?) Declaration public bool TryGetPostgresTypeByName(string pgName, out PostgresType? pgType) Parameters Type Name Description string pgName PostgresType pgType Returns Type Description bool"
  },
  "doc/api/Npgsql.Internal.PgBufferedConverter-1.html": {
    "href": "doc/api/Npgsql.Internal.PgBufferedConverter-1.html",
    "title": "Class PgBufferedConverter<T> | Npgsql Documentation",
    "keywords": "Class PgBufferedConverter<T> Inheritance object PgConverter PgConverter<T> PgBufferedConverter<T> Inherited Members PgConverter<T>.IsDbNullValue(T, ref object) PgConverter<T>.IsDbNull(T, ref object) PgConverter.IsDbNullable PgConverter.CanConvert(DataFormat, out BufferRequirements) PgConverter.CanConvertBufferedDefault(DataFormat, out BufferRequirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public abstract class PgBufferedConverter<T> : PgConverter<T> Type Parameters Name Description T Constructors | Edit this page View Source PgBufferedConverter(bool) Declaration protected PgBufferedConverter(bool customDbNullPredicate = false) Parameters Type Name Description bool customDbNullPredicate Methods | Edit this page View Source GetSize(SizeContext, T, ref object?) Declaration public override Size GetSize(SizeContext context, T value, ref object? writeState) Parameters Type Name Description SizeContext context T value object writeState Returns Type Description Size Overrides PgConverter<T>.GetSize(SizeContext, T, ref object) | Edit this page View Source Read(PgReader) Declaration public override sealed T Read(PgReader reader) Parameters Type Name Description PgReader reader Returns Type Description T Overrides PgConverter<T>.Read(PgReader) | Edit this page View Source ReadAsync(PgReader, CancellationToken) Declaration public override sealed ValueTask<T> ReadAsync(PgReader reader, CancellationToken cancellationToken = default) Parameters Type Name Description PgReader reader CancellationToken cancellationToken Returns Type Description ValueTask<T> Overrides PgConverter<T>.ReadAsync(PgReader, CancellationToken) | Edit this page View Source ReadCore(PgReader) Declaration protected abstract T ReadCore(PgReader reader) Parameters Type Name Description PgReader reader Returns Type Description T | Edit this page View Source Write(PgWriter, T) Declaration public override sealed void Write(PgWriter writer, T value) Parameters Type Name Description PgWriter writer T value Overrides PgConverter<T>.Write(PgWriter, T) | Edit this page View Source WriteAsync(PgWriter, T, CancellationToken) Declaration public override sealed ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken = default) Parameters Type Name Description PgWriter writer T value CancellationToken cancellationToken Returns Type Description ValueTask Overrides PgConverter<T>.WriteAsync(PgWriter, T, CancellationToken) | Edit this page View Source WriteCore(PgWriter, T) Declaration protected abstract void WriteCore(PgWriter writer, T value) Parameters Type Name Description PgWriter writer T value"
  },
  "doc/api/Npgsql.Internal.PgConverter-1.html": {
    "href": "doc/api/Npgsql.Internal.PgConverter-1.html",
    "title": "Class PgConverter<T> | Npgsql Documentation",
    "keywords": "Class PgConverter<T> Inheritance object PgConverter PgConverter<T> PgBufferedConverter<T> PgStreamingConverter<T> Inherited Members PgConverter.IsDbNullable PgConverter.CanConvert(DataFormat, out BufferRequirements) PgConverter.CanConvertBufferedDefault(DataFormat, out BufferRequirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public abstract class PgConverter<T> : PgConverter Type Parameters Name Description T Methods | Edit this page View Source GetSize(SizeContext, T, ref object?) Declaration public abstract Size GetSize(SizeContext context, T value, ref object? writeState) Parameters Type Name Description SizeContext context T value object writeState Returns Type Description Size | Edit this page View Source IsDbNull(T?, ref object?) Declaration public bool IsDbNull(T? value, ref object? writeState) Parameters Type Name Description T value object writeState Returns Type Description bool | Edit this page View Source IsDbNullValue(T?, ref object?) Declaration protected virtual bool IsDbNullValue(T? value, ref object? writeState) Parameters Type Name Description T value object writeState Returns Type Description bool | Edit this page View Source Read(PgReader) Declaration public abstract T Read(PgReader reader) Parameters Type Name Description PgReader reader Returns Type Description T | Edit this page View Source ReadAsync(PgReader, CancellationToken) Declaration public abstract ValueTask<T> ReadAsync(PgReader reader, CancellationToken cancellationToken = default) Parameters Type Name Description PgReader reader CancellationToken cancellationToken Returns Type Description ValueTask<T> | Edit this page View Source Write(PgWriter, T) Declaration public abstract void Write(PgWriter writer, T value) Parameters Type Name Description PgWriter writer T value | Edit this page View Source WriteAsync(PgWriter, T, CancellationToken) Declaration public abstract ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken = default) Parameters Type Name Description PgWriter writer T value CancellationToken cancellationToken Returns Type Description ValueTask"
  },
  "doc/api/Npgsql.Internal.PgConverter.html": {
    "href": "doc/api/Npgsql.Internal.PgConverter.html",
    "title": "Class PgConverter | Npgsql Documentation",
    "keywords": "Class PgConverter Inheritance object PgConverter PgConverter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public abstract class PgConverter Properties | Edit this page View Source IsDbNullable Declaration public bool IsDbNullable { get; } Property Value Type Description bool Methods | Edit this page View Source CanConvert(DataFormat, out BufferRequirements) Whether this converter can handle the given format and with which buffer requirements. Declaration public abstract bool CanConvert(DataFormat format, out BufferRequirements bufferRequirements) Parameters Type Name Description DataFormat format The data format. BufferRequirements bufferRequirements Returns the buffer requirements. Returns Type Description bool Returns true if the given data format is supported. Remarks The buffer requirements should not cover database NULL reads or writes, these are handled by the caller. | Edit this page View Source CanConvertBufferedDefault(DataFormat, out BufferRequirements) Declaration protected bool CanConvertBufferedDefault(DataFormat format, out BufferRequirements bufferRequirements) Parameters Type Name Description DataFormat format BufferRequirements bufferRequirements Returns Type Description bool"
  },
  "doc/api/Npgsql.Internal.PgConverterFactory.html": {
    "href": "doc/api/Npgsql.Internal.PgConverterFactory.html",
    "title": "Class PgConverterFactory | Npgsql Documentation",
    "keywords": "Class PgConverterFactory Inheritance object PgConverterFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public static class PgConverterFactory Methods | Edit this page View Source CreateArrayMultirangeConverter<T>(PgConverter<T>, PgSerializerOptions) Declaration public static PgConverter<T[]> CreateArrayMultirangeConverter<T>(PgConverter<T> rangeConverter, PgSerializerOptions options) where T : notnull Parameters Type Name Description PgConverter<T> rangeConverter PgSerializerOptions options Returns Type Description PgConverter<T[]> Type Parameters Name Description T | Edit this page View Source CreateListMultirangeConverter<T>(PgConverter<T>, PgSerializerOptions) Declaration public static PgConverter<List<T>> CreateListMultirangeConverter<T>(PgConverter<T> rangeConverter, PgSerializerOptions options) where T : notnull Parameters Type Name Description PgConverter<T> rangeConverter PgSerializerOptions options Returns Type Description PgConverter<List<T>> Type Parameters Name Description T | Edit this page View Source CreatePolymorphicArrayConverter<TBase>(Func<PgConverter<TBase>>, Func<PgConverter<TBase>>, PgSerializerOptions) Declaration public static PgConverter<TBase> CreatePolymorphicArrayConverter<TBase>(Func<PgConverter<TBase>> arrayConverterFactory, Func<PgConverter<TBase>> nullableArrayConverterFactory, PgSerializerOptions options) Parameters Type Name Description Func<PgConverter<TBase>> arrayConverterFactory Func<PgConverter<TBase>> nullableArrayConverterFactory PgSerializerOptions options Returns Type Description PgConverter<TBase> Type Parameters Name Description TBase | Edit this page View Source CreateRangeConverter<T>(PgConverter<T>, PgSerializerOptions) Declaration public static PgConverter<NpgsqlRange<T>> CreateRangeConverter<T>(PgConverter<T> subTypeConverter, PgSerializerOptions options) Parameters Type Name Description PgConverter<T> subTypeConverter PgSerializerOptions options Returns Type Description PgConverter<NpgsqlRange<T>> Type Parameters Name Description T"
  },
  "doc/api/Npgsql.Internal.PgConverterResolution.html": {
    "href": "doc/api/Npgsql.Internal.PgConverterResolution.html",
    "title": "Struct PgConverterResolution | Npgsql Documentation",
    "keywords": "Struct PgConverterResolution Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public readonly struct PgConverterResolution Constructors | Edit this page View Source PgConverterResolution(PgConverter, PgTypeId) Declaration public PgConverterResolution(PgConverter converter, PgTypeId pgTypeId) Parameters Type Name Description PgConverter converter PgTypeId pgTypeId Properties | Edit this page View Source Converter Declaration public PgConverter Converter { get; } Property Value Type Description PgConverter | Edit this page View Source PgTypeId Declaration public PgTypeId PgTypeId { get; } Property Value Type Description PgTypeId Methods | Edit this page View Source GetConverter<T>() Declaration public PgConverter<T> GetConverter<T>() Returns Type Description PgConverter<T> Type Parameters Name Description T"
  },
  "doc/api/Npgsql.Internal.PgConverterResolver-1.html": {
    "href": "doc/api/Npgsql.Internal.PgConverterResolver-1.html",
    "title": "Class PgConverterResolver<T> | Npgsql Documentation",
    "keywords": "Class PgConverterResolver<T> Inheritance object PgConverterResolver PgConverterResolver<T> Inherited Members PgConverterResolver.GetDefault(PgTypeId?) PgConverterResolver.Get(Field) PgConverterResolver.CreateUnsupportedPgTypeIdException(PgTypeId) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public abstract class PgConverterResolver<T> : PgConverterResolver Type Parameters Name Description T Methods | Edit this page View Source Get(T?, PgTypeId?) Gets the appropriate converter to write with based on the given value. Declaration public abstract PgConverterResolution? Get(T? value, PgTypeId? expectedPgTypeId) Parameters Type Name Description T value PgTypeId? expectedPgTypeId Returns Type Description PgConverterResolution? The converter resolution. Remarks Implementations should not return new instances of the possible converters that can be returned, instead its expected these are cached once used. Array or other collection converters depend on this to cache their own converter - which wraps the element converter - with the cache key being the element converter reference."
  },
  "doc/api/Npgsql.Internal.PgConverterResolver.html": {
    "href": "doc/api/Npgsql.Internal.PgConverterResolver.html",
    "title": "Class PgConverterResolver | Npgsql Documentation",
    "keywords": "Class PgConverterResolver Inheritance object PgConverterResolver PgConverterResolver<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public abstract class PgConverterResolver Methods | Edit this page View Source CreateUnsupportedPgTypeIdException(PgTypeId) Declaration protected ArgumentOutOfRangeException CreateUnsupportedPgTypeIdException(PgTypeId pgTypeId) Parameters Type Name Description PgTypeId pgTypeId Returns Type Description ArgumentOutOfRangeException | Edit this page View Source Get(Field) Gets the appropriate converter to read with based on the given field info. Declaration public virtual PgConverterResolution Get(Field field) Parameters Type Name Description Field field Returns Type Description PgConverterResolution The converter resolution. Remarks Implementations should not return new instances of the possible converters that can be returned, instead its expected these are cached once used. Array or other collection converters depend on this to cache their own converter - which wraps the element converter - with the cache key being the element converter reference. | Edit this page View Source GetDefault(PgTypeId?) Gets the appropriate converter solely based on PgTypeId. Declaration public abstract PgConverterResolution GetDefault(PgTypeId? pgTypeId) Parameters Type Name Description PgTypeId? pgTypeId Returns Type Description PgConverterResolution The converter resolution. Remarks Implementations should not return new instances of the possible converters that can be returned, instead its expected these are cached once used. Array or other collection converters depend on this to cache their own converter - which wraps the element converter - with the cache key being the element converter reference."
  },
  "doc/api/Npgsql.Internal.PgReader.html": {
    "href": "doc/api/Npgsql.Internal.PgReader.html",
    "title": "Class PgReader | Npgsql Documentation",
    "keywords": "Class PgReader Inheritance object PgReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public class PgReader Properties | Edit this page View Source Current Declaration public ValueMetadata Current { get; } Property Value Type Description ValueMetadata | Edit this page View Source CurrentRemaining Declaration public int CurrentRemaining { get; } Property Value Type Description int | Edit this page View Source IsResumed Declaration public bool IsResumed { get; } Property Value Type Description bool Methods | Edit this page View Source BeginNestedRead(int, Size) Declaration public NestedReadScope BeginNestedRead(int size, Size bufferRequirement) Parameters Type Name Description int size Size bufferRequirement Returns Type Description NestedReadScope | Edit this page View Source BeginNestedReadAsync(int, Size, CancellationToken) Declaration public ValueTask<NestedReadScope> BeginNestedReadAsync(int size, Size bufferRequirement, CancellationToken cancellationToken = default) Parameters Type Name Description int size Size bufferRequirement CancellationToken cancellationToken Returns Type Description ValueTask<NestedReadScope> | Edit this page View Source Buffer(Size) Declaration public void Buffer(Size bufferRequirement) Parameters Type Name Description Size bufferRequirement | Edit this page View Source Buffer(int) Declaration public void Buffer(int byteCount) Parameters Type Name Description int byteCount | Edit this page View Source BufferAsync(Size, CancellationToken) Declaration public ValueTask BufferAsync(Size bufferRequirement, CancellationToken cancellationToken) Parameters Type Name Description Size bufferRequirement CancellationToken cancellationToken Returns Type Description ValueTask | Edit this page View Source BufferAsync(int, CancellationToken) Declaration public ValueTask BufferAsync(int byteCount, CancellationToken cancellationToken) Parameters Type Name Description int byteCount CancellationToken cancellationToken Returns Type Description ValueTask | Edit this page View Source Consume(int?) Declaration public void Consume(int? count = null) Parameters Type Name Description int? count | Edit this page View Source ConsumeAsync(int?, CancellationToken) Declaration public ValueTask ConsumeAsync(int? count = null, CancellationToken cancellationToken = default) Parameters Type Name Description int? count CancellationToken cancellationToken Returns Type Description ValueTask | Edit this page View Source GetStream(int?) Declaration public Stream GetStream(int? length = null) Parameters Type Name Description int? length Returns Type Description Stream | Edit this page View Source GetTextReader(Encoding) Declaration public TextReader GetTextReader(Encoding encoding) Parameters Type Name Description Encoding encoding Returns Type Description TextReader | Edit this page View Source GetTextReaderAsync(Encoding, CancellationToken) Declaration public ValueTask<TextReader> GetTextReaderAsync(Encoding encoding, CancellationToken cancellationToken) Parameters Type Name Description Encoding encoding CancellationToken cancellationToken Returns Type Description ValueTask<TextReader> | Edit this page View Source Read(Span<byte>) Declaration public void Read(Span<byte> destination) Parameters Type Name Description Span<byte> destination | Edit this page View Source ReadByte() Declaration public byte ReadByte() Returns Type Description byte | Edit this page View Source ReadBytes(int) Declaration public ReadOnlySequence<byte> ReadBytes(int count) Parameters Type Name Description int count Returns Type Description ReadOnlySequence<byte> | Edit this page View Source ReadBytes(Span<byte>) Declaration public void ReadBytes(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer | Edit this page View Source ReadBytesAsync(int, CancellationToken) Declaration public ValueTask<ReadOnlySequence<byte>> ReadBytesAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count CancellationToken cancellationToken Returns Type Description ValueTask<ReadOnlySequence<byte>> | Edit this page View Source ReadBytesAsync(Memory<byte>, CancellationToken) Declaration public ValueTask ReadBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer CancellationToken cancellationToken Returns Type Description ValueTask | Edit this page View Source ReadDouble() Declaration public double ReadDouble() Returns Type Description double | Edit this page View Source ReadFloat() Declaration public float ReadFloat() Returns Type Description float | Edit this page View Source ReadInt16() Declaration public short ReadInt16() Returns Type Description short | Edit this page View Source ReadInt32() Declaration public int ReadInt32() Returns Type Description int | Edit this page View Source ReadInt64() Declaration public long ReadInt64() Returns Type Description long | Edit this page View Source ReadNullTerminatedString(Encoding) Declaration public string ReadNullTerminatedString(Encoding encoding) Parameters Type Name Description Encoding encoding Returns Type Description string | Edit this page View Source ReadNullTerminatedStringAsync(Encoding, CancellationToken) Declaration public ValueTask<string> ReadNullTerminatedStringAsync(Encoding encoding, CancellationToken cancellationToken = default) Parameters Type Name Description Encoding encoding CancellationToken cancellationToken Returns Type Description ValueTask<string> | Edit this page View Source ReadUInt16() Declaration public ushort ReadUInt16() Returns Type Description ushort | Edit this page View Source ReadUInt32() Declaration public uint ReadUInt32() Returns Type Description uint | Edit this page View Source ReadUInt64() Declaration public ulong ReadUInt64() Returns Type Description ulong | Edit this page View Source Rewind(int) Declaration public void Rewind(int count) Parameters Type Name Description int count | Edit this page View Source ShouldBuffer(Size) Declaration public bool ShouldBuffer(Size bufferRequirement) Parameters Type Name Description Size bufferRequirement Returns Type Description bool | Edit this page View Source ShouldBuffer(int) Declaration public bool ShouldBuffer(int byteCount) Parameters Type Name Description int byteCount Returns Type Description bool | Edit this page View Source TryReadBytes(int, out ReadOnlyMemory<byte>) Declaration public bool TryReadBytes(int count, out ReadOnlyMemory<byte> bytes) Parameters Type Name Description int count ReadOnlyMemory<byte> bytes Returns Type Description bool | Edit this page View Source TryReadBytes(int, out ReadOnlySpan<byte>) Declaration public bool TryReadBytes(int count, out ReadOnlySpan<byte> bytes) Parameters Type Name Description int count ReadOnlySpan<byte> bytes Returns Type Description bool"
  },
  "doc/api/Npgsql.Internal.PgResolverTypeInfo.html": {
    "href": "doc/api/Npgsql.Internal.PgResolverTypeInfo.html",
    "title": "Class PgResolverTypeInfo | Npgsql Documentation",
    "keywords": "Class PgResolverTypeInfo Inheritance object PgTypeInfo PgResolverTypeInfo Inherited Members PgTypeInfo.Type PgTypeInfo.Options PgTypeInfo.SupportsWriting PgTypeInfo.PreferredFormat PgTypeInfo.PgTypeId PgTypeInfo.GetResolution<T>(T) PgTypeInfo.GetObjectResolution(object) PgTypeInfo.GetBufferRequirements(PgConverter, DataFormat) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public sealed class PgResolverTypeInfo : PgTypeInfo Constructors | Edit this page View Source PgResolverTypeInfo(PgSerializerOptions, PgConverterResolver, PgTypeId?, Type?) Declaration public PgResolverTypeInfo(PgSerializerOptions options, PgConverterResolver converterResolver, PgTypeId? pgTypeId, Type? unboxedType = null) Parameters Type Name Description PgSerializerOptions options PgConverterResolver converterResolver PgTypeId? pgTypeId Type unboxedType Methods | Edit this page View Source GetConverterResolver() Declaration public PgConverterResolver GetConverterResolver() Returns Type Description PgConverterResolver | Edit this page View Source GetDefaultResolution(PgTypeId?) Declaration public PgConverterResolution GetDefaultResolution(PgTypeId? expectedPgTypeId) Parameters Type Name Description PgTypeId? expectedPgTypeId Returns Type Description PgConverterResolution | Edit this page View Source GetResolution(Field) Declaration public PgConverterResolution GetResolution(Field field) Parameters Type Name Description Field field Returns Type Description PgConverterResolution | Edit this page View Source GetResolutionAsObject(object?, PgTypeId?) Declaration public PgConverterResolution? GetResolutionAsObject(object? value, PgTypeId? expectedPgTypeId) Parameters Type Name Description object value PgTypeId? expectedPgTypeId Returns Type Description PgConverterResolution? | Edit this page View Source GetResolution<T>(T?, PgTypeId?) Declaration public PgConverterResolution? GetResolution<T>(T? value, PgTypeId? expectedPgTypeId) Parameters Type Name Description T value PgTypeId? expectedPgTypeId Returns Type Description PgConverterResolution? Type Parameters Name Description T"
  },
  "doc/api/Npgsql.Internal.PgSerializerOptions.html": {
    "href": "doc/api/Npgsql.Internal.PgSerializerOptions.html",
    "title": "Class PgSerializerOptions | Npgsql Documentation",
    "keywords": "Class PgSerializerOptions Inheritance object PgSerializerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public sealed class PgSerializerOptions Properties | Edit this page View Source ArrayNullabilityMode Declaration public ArrayNullabilityMode ArrayNullabilityMode { get; init; } Property Value Type Description ArrayNullabilityMode | Edit this page View Source DefaultNameTranslator Declaration public INpgsqlNameTranslator DefaultNameTranslator { get; init; } Property Value Type Description INpgsqlNameTranslator | Edit this page View Source EnableDateTimeInfinityConversions Declaration public bool EnableDateTimeInfinityConversions { get; init; } Property Value Type Description bool | Edit this page View Source TextEncoding Declaration public Encoding TextEncoding { get; init; } Property Value Type Description Encoding | Edit this page View Source TimeZone Declaration public string TimeZone { get; } Property Value Type Description string | Edit this page View Source TypeInfoResolver Declaration public IPgTypeInfoResolver TypeInfoResolver { get; } Property Value Type Description IPgTypeInfoResolver Methods | Edit this page View Source GetArrayElementTypeId(PgTypeId) Declaration public PgTypeId GetArrayElementTypeId(PgTypeId arrayTypeId) Parameters Type Name Description PgTypeId arrayTypeId Returns Type Description PgTypeId | Edit this page View Source GetArrayTypeId(PgTypeId) Declaration public PgTypeId GetArrayTypeId(PgTypeId elementTypeId) Parameters Type Name Description PgTypeId elementTypeId Returns Type Description PgTypeId | Edit this page View Source GetDataTypeName(PgTypeId) Declaration public DataTypeName GetDataTypeName(PgTypeId pgTypeId) Parameters Type Name Description PgTypeId pgTypeId Returns Type Description DataTypeName | Edit this page View Source GetDefaultTypeInfo(PgTypeId) Declaration public PgTypeInfo? GetDefaultTypeInfo(PgTypeId pgTypeId) Parameters Type Name Description PgTypeId pgTypeId Returns Type Description PgTypeInfo | Edit this page View Source GetDefaultTypeInfo(Type) Declaration public PgTypeInfo? GetDefaultTypeInfo(Type type) Parameters Type Name Description Type type Returns Type Description PgTypeInfo | Edit this page View Source GetMultirangeElementTypeId(PgTypeId) Declaration public PgTypeId GetMultirangeElementTypeId(PgTypeId multirangeTypeId) Parameters Type Name Description PgTypeId multirangeTypeId Returns Type Description PgTypeId | Edit this page View Source GetMultirangeTypeId(PgTypeId) Declaration public PgTypeId GetMultirangeTypeId(PgTypeId rangeTypeId) Parameters Type Name Description PgTypeId rangeTypeId Returns Type Description PgTypeId | Edit this page View Source GetRangeSubtypeTypeId(PgTypeId) Declaration public PgTypeId GetRangeSubtypeTypeId(PgTypeId rangeTypeId) Parameters Type Name Description PgTypeId rangeTypeId Returns Type Description PgTypeId | Edit this page View Source GetRangeTypeId(PgTypeId) Declaration public PgTypeId GetRangeTypeId(PgTypeId subtypeTypeId) Parameters Type Name Description PgTypeId subtypeTypeId Returns Type Description PgTypeId | Edit this page View Source GetTypeInfo(Type, PgTypeId) Declaration public PgTypeInfo? GetTypeInfo(Type type, PgTypeId pgTypeId) Parameters Type Name Description Type type PgTypeId pgTypeId Returns Type Description PgTypeInfo | Edit this page View Source IsWellKnownTextType(Type) Declaration public static bool IsWellKnownTextType(Type type) Parameters Type Name Description Type type Returns Type Description bool | Edit this page View Source TryGetDataTypeName(PgTypeId, out DataTypeName) Declaration public bool TryGetDataTypeName(PgTypeId pgTypeId, out DataTypeName dataTypeName) Parameters Type Name Description PgTypeId pgTypeId DataTypeName dataTypeName Returns Type Description bool"
  },
  "doc/api/Npgsql.Internal.PgStreamingConverter-1.html": {
    "href": "doc/api/Npgsql.Internal.PgStreamingConverter-1.html",
    "title": "Class PgStreamingConverter<T> | Npgsql Documentation",
    "keywords": "Class PgStreamingConverter<T> Inheritance object PgConverter PgConverter<T> PgStreamingConverter<T> Inherited Members PgConverter<T>.IsDbNullValue(T, ref object) PgConverter<T>.IsDbNull(T, ref object) PgConverter<T>.Read(PgReader) PgConverter<T>.ReadAsync(PgReader, CancellationToken) PgConverter<T>.GetSize(SizeContext, T, ref object) PgConverter<T>.Write(PgWriter, T) PgConverter<T>.WriteAsync(PgWriter, T, CancellationToken) PgConverter.IsDbNullable PgConverter.CanConvertBufferedDefault(DataFormat, out BufferRequirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public abstract class PgStreamingConverter<T> : PgConverter<T> Type Parameters Name Description T Constructors | Edit this page View Source PgStreamingConverter(bool) Declaration protected PgStreamingConverter(bool customDbNullPredicate = false) Parameters Type Name Description bool customDbNullPredicate Methods | Edit this page View Source CanConvert(DataFormat, out BufferRequirements) Whether this converter can handle the given format and with which buffer requirements. Declaration public override bool CanConvert(DataFormat format, out BufferRequirements bufferRequirements) Parameters Type Name Description DataFormat format The data format. BufferRequirements bufferRequirements Returns the buffer requirements. Returns Type Description bool Returns true if the given data format is supported. Overrides PgConverter.CanConvert(DataFormat, out BufferRequirements) Remarks The buffer requirements should not cover database NULL reads or writes, these are handled by the caller."
  },
  "doc/api/Npgsql.Internal.PgTypeInfo.html": {
    "href": "doc/api/Npgsql.Internal.PgTypeInfo.html",
    "title": "Class PgTypeInfo | Npgsql Documentation",
    "keywords": "Class PgTypeInfo Inheritance object PgTypeInfo PgResolverTypeInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public class PgTypeInfo Constructors | Edit this page View Source PgTypeInfo(PgSerializerOptions, PgConverter, PgTypeId, Type?) Declaration public PgTypeInfo(PgSerializerOptions options, PgConverter converter, PgTypeId pgTypeId, Type? unboxedType = null) Parameters Type Name Description PgSerializerOptions options PgConverter converter PgTypeId pgTypeId Type unboxedType Properties | Edit this page View Source Options Declaration public PgSerializerOptions Options { get; } Property Value Type Description PgSerializerOptions | Edit this page View Source PgTypeId Declaration public PgTypeId? PgTypeId { get; } Property Value Type Description PgTypeId? | Edit this page View Source PreferredFormat Declaration public DataFormat? PreferredFormat { get; init; } Property Value Type Description DataFormat? | Edit this page View Source SupportsWriting Declaration public bool SupportsWriting { get; init; } Property Value Type Description bool | Edit this page View Source Type Declaration public Type Type { get; } Property Value Type Description Type Methods | Edit this page View Source GetBufferRequirements(PgConverter, DataFormat) Declaration public BufferRequirements? GetBufferRequirements(PgConverter converter, DataFormat format) Parameters Type Name Description PgConverter converter DataFormat format Returns Type Description BufferRequirements? | Edit this page View Source GetObjectResolution(object?) Declaration public PgConverterResolution GetObjectResolution(object? value) Parameters Type Name Description object value Returns Type Description PgConverterResolution | Edit this page View Source GetResolution<T>(T?) Declaration public PgConverterResolution GetResolution<T>(T? value) Parameters Type Name Description T value Returns Type Description PgConverterResolution Type Parameters Name Description T"
  },
  "doc/api/Npgsql.Internal.PgTypeInfoResolverFactory.html": {
    "href": "doc/api/Npgsql.Internal.PgTypeInfoResolverFactory.html",
    "title": "Class PgTypeInfoResolverFactory | Npgsql Documentation",
    "keywords": "Class PgTypeInfoResolverFactory Inheritance object PgTypeInfoResolverFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public abstract class PgTypeInfoResolverFactory Methods | Edit this page View Source CreateArrayResolver() Declaration public abstract IPgTypeInfoResolver? CreateArrayResolver() Returns Type Description IPgTypeInfoResolver | Edit this page View Source CreateMultirangeArrayResolver() Declaration public virtual IPgTypeInfoResolver? CreateMultirangeArrayResolver() Returns Type Description IPgTypeInfoResolver | Edit this page View Source CreateMultirangeResolver() Declaration public virtual IPgTypeInfoResolver? CreateMultirangeResolver() Returns Type Description IPgTypeInfoResolver | Edit this page View Source CreateRangeArrayResolver() Declaration public virtual IPgTypeInfoResolver? CreateRangeArrayResolver() Returns Type Description IPgTypeInfoResolver | Edit this page View Source CreateRangeResolver() Declaration public virtual IPgTypeInfoResolver? CreateRangeResolver() Returns Type Description IPgTypeInfoResolver | Edit this page View Source CreateResolver() Declaration public abstract IPgTypeInfoResolver CreateResolver() Returns Type Description IPgTypeInfoResolver"
  },
  "doc/api/Npgsql.Internal.PgWriter.html": {
    "href": "doc/api/Npgsql.Internal.PgWriter.html",
    "title": "Class PgWriter | Npgsql Documentation",
    "keywords": "Class PgWriter Inheritance object PgWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public sealed class PgWriter Properties | Edit this page View Source Current Declaration public ValueMetadata Current { get; } Property Value Type Description ValueMetadata Methods | Edit this page View Source BeginNestedWrite(Size, int, object?) Declaration public NestedWriteScope BeginNestedWrite(Size bufferRequirement, int byteCount, object? state) Parameters Type Name Description Size bufferRequirement int byteCount object state Returns Type Description NestedWriteScope | Edit this page View Source BeginNestedWriteAsync(Size, int, object?, CancellationToken) Declaration public ValueTask<NestedWriteScope> BeginNestedWriteAsync(Size bufferRequirement, int byteCount, object? state, CancellationToken cancellationToken = default) Parameters Type Name Description Size bufferRequirement int byteCount object state CancellationToken cancellationToken Returns Type Description ValueTask<NestedWriteScope> | Edit this page View Source Flush(TimeSpan) Declaration public void Flush(TimeSpan timeout = default) Parameters Type Name Description TimeSpan timeout | Edit this page View Source FlushAsync(CancellationToken) Declaration public ValueTask FlushAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask | Edit this page View Source GetStream(bool) Gets a Stream that can be used to write to the underlying buffer. Declaration public Stream GetStream(bool allowMixedIO = false) Parameters Type Name Description bool allowMixedIO Blocking flushes during writes that were expected to be non-blocking and vice versa cause an exception to be thrown unless allowMixedIO is set to true, false by default. Returns Type Description Stream The stream. | Edit this page View Source ShouldFlush(Size) Declaration public bool ShouldFlush(Size bufferRequirement) Parameters Type Name Description Size bufferRequirement Returns Type Description bool | Edit this page View Source ShouldFlush(int) Declaration public bool ShouldFlush(int byteCount) Parameters Type Name Description int byteCount Returns Type Description bool | Edit this page View Source WriteAsOid(PgTypeId) Declaration public void WriteAsOid(PgTypeId pgTypeId) Parameters Type Name Description PgTypeId pgTypeId | Edit this page View Source WriteByte(byte) Declaration public void WriteByte(byte value) Parameters Type Name Description byte value | Edit this page View Source WriteBytes(ReadOnlySpan<byte>) Declaration public void WriteBytes(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer | Edit this page View Source WriteBytesAsync(ReadOnlyMemory<byte>, CancellationToken) Declaration public ValueTask WriteBytesAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer CancellationToken cancellationToken Returns Type Description ValueTask | Edit this page View Source WriteChars(ReadOnlySpan<char>, Encoding) Declaration public void WriteChars(ReadOnlySpan<char> data, Encoding encoding) Parameters Type Name Description ReadOnlySpan<char> data Encoding encoding | Edit this page View Source WriteCharsAsync(ReadOnlyMemory<char>, Encoding, CancellationToken) Declaration public ValueTask WriteCharsAsync(ReadOnlyMemory<char> data, Encoding encoding, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<char> data Encoding encoding CancellationToken cancellationToken Returns Type Description ValueTask | Edit this page View Source WriteDouble(double) Declaration public void WriteDouble(double value) Parameters Type Name Description double value | Edit this page View Source WriteFloat(float) Declaration public void WriteFloat(float value) Parameters Type Name Description float value | Edit this page View Source WriteInt16(short) Declaration public void WriteInt16(short value) Parameters Type Name Description short value | Edit this page View Source WriteInt32(int) Declaration public void WriteInt32(int value) Parameters Type Name Description int value | Edit this page View Source WriteInt64(long) Declaration public void WriteInt64(long value) Parameters Type Name Description long value | Edit this page View Source WriteUInt16(ushort) Declaration public void WriteUInt16(ushort value) Parameters Type Name Description ushort value | Edit this page View Source WriteUInt32(uint) Declaration public void WriteUInt32(uint value) Parameters Type Name Description uint value | Edit this page View Source WriteUInt64(ulong) Declaration public void WriteUInt64(ulong value) Parameters Type Name Description ulong value"
  },
  "doc/api/Npgsql.Internal.Postgres.DataTypeName.html": {
    "href": "doc/api/Npgsql.Internal.Postgres.DataTypeName.html",
    "title": "Struct DataTypeName | Npgsql Documentation",
    "keywords": "Struct DataTypeName Represents the fully-qualified name of a PostgreSQL type. Implements IEquatable<DataTypeName> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal.Postgres Assembly: Npgsql.dll Syntax public readonly struct DataTypeName : IEquatable<DataTypeName> Constructors | Edit this page View Source DataTypeName(string) Declaration public DataTypeName(string fullyQualifiedDataTypeName) Parameters Type Name Description string fullyQualifiedDataTypeName Properties | Edit this page View Source DisplayName Declaration public string DisplayName { get; } Property Value Type Description string | Edit this page View Source IsArray Declaration public bool IsArray { get; } Property Value Type Description bool | Edit this page View Source Schema Declaration public string Schema { get; } Property Value Type Description string | Edit this page View Source UnqualifiedDisplayName Declaration public string UnqualifiedDisplayName { get; } Property Value Type Description string | Edit this page View Source UnqualifiedName Declaration public string UnqualifiedName { get; } Property Value Type Description string | Edit this page View Source Unspecified Declaration public static DataTypeName Unspecified { get; } Property Value Type Description DataTypeName | Edit this page View Source Value Declaration public string Value { get; } Property Value Type Description string Methods | Edit this page View Source Equals(DataTypeName) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DataTypeName other) Parameters Type Name Description DataTypeName other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source FromDisplayName(string, string?) Declaration public static DataTypeName FromDisplayName(string displayName, string? schema = null) Parameters Type Name Description string displayName string schema Returns Type Description DataTypeName | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToArrayName() Declaration public DataTypeName ToArrayName() Returns Type Description DataTypeName | Edit this page View Source ToDefaultMultirangeName() Declaration public DataTypeName ToDefaultMultirangeName() Returns Type Description DataTypeName | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(DataTypeName, DataTypeName) Declaration public static bool operator ==(DataTypeName left, DataTypeName right) Parameters Type Name Description DataTypeName left DataTypeName right Returns Type Description bool | Edit this page View Source implicit operator string(DataTypeName) Declaration public static implicit operator string(DataTypeName value) Parameters Type Name Description DataTypeName value Returns Type Description string | Edit this page View Source operator !=(DataTypeName, DataTypeName) Declaration public static bool operator !=(DataTypeName left, DataTypeName right) Parameters Type Name Description DataTypeName left DataTypeName right Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/Npgsql.Internal.Postgres.Field.html": {
    "href": "doc/api/Npgsql.Internal.Postgres.Field.html",
    "title": "Struct Field | Npgsql Documentation",
    "keywords": "Struct Field Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal.Postgres Assembly: Npgsql.dll Syntax public readonly struct Field Constructors | Edit this page View Source Field(string, PgTypeId, int) Declaration public Field(string name, PgTypeId pgTypeId, int typeModifier) Parameters Type Name Description string name PgTypeId pgTypeId int typeModifier Properties | Edit this page View Source Name Declaration public string Name { get; init; } Property Value Type Description string | Edit this page View Source PgTypeId Declaration public PgTypeId PgTypeId { get; init; } Property Value Type Description PgTypeId | Edit this page View Source TypeModifier Declaration public int TypeModifier { get; init; } Property Value Type Description int"
  },
  "doc/api/Npgsql.Internal.Postgres.Oid.html": {
    "href": "doc/api/Npgsql.Internal.Postgres.Oid.html",
    "title": "Struct Oid | Npgsql Documentation",
    "keywords": "Struct Oid Implements IEquatable<Oid> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal.Postgres Assembly: Npgsql.dll Syntax public readonly struct Oid : IEquatable<Oid> Constructors | Edit this page View Source Oid(uint) Declaration public Oid(uint value) Parameters Type Name Description uint value Properties | Edit this page View Source Unspecified Declaration public static Oid Unspecified { get; } Property Value Type Description Oid | Edit this page View Source Value Declaration public uint Value { get; init; } Property Value Type Description uint Methods | Edit this page View Source Equals(Oid) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Oid other) Parameters Type Name Description Oid other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(Oid, Oid) Declaration public static bool operator ==(Oid left, Oid right) Parameters Type Name Description Oid left Oid right Returns Type Description bool | Edit this page View Source explicit operator uint(Oid) Declaration public static explicit operator uint(Oid oid) Parameters Type Name Description Oid oid Returns Type Description uint | Edit this page View Source implicit operator Oid(uint) Declaration public static implicit operator Oid(uint oid) Parameters Type Name Description uint oid Returns Type Description Oid | Edit this page View Source operator !=(Oid, Oid) Declaration public static bool operator !=(Oid left, Oid right) Parameters Type Name Description Oid left Oid right Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/Npgsql.Internal.Postgres.PgTypeId.html": {
    "href": "doc/api/Npgsql.Internal.Postgres.PgTypeId.html",
    "title": "Struct PgTypeId | Npgsql Documentation",
    "keywords": "Struct PgTypeId A discriminated union of Oid and DataTypeName. Implements IEquatable<PgTypeId> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal.Postgres Assembly: Npgsql.dll Syntax public readonly struct PgTypeId : IEquatable<PgTypeId> Constructors | Edit this page View Source PgTypeId(DataTypeName) Declaration public PgTypeId(DataTypeName name) Parameters Type Name Description DataTypeName name | Edit this page View Source PgTypeId(Oid) Declaration public PgTypeId(Oid oid) Parameters Type Name Description Oid oid Properties | Edit this page View Source DataTypeName Declaration public DataTypeName DataTypeName { get; } Property Value Type Description DataTypeName | Edit this page View Source IsDataTypeName Declaration public bool IsDataTypeName { get; } Property Value Type Description bool | Edit this page View Source IsOid Declaration public bool IsOid { get; } Property Value Type Description bool | Edit this page View Source Oid Declaration public Oid Oid { get; } Property Value Type Description Oid Methods | Edit this page View Source Equals(PgTypeId) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PgTypeId other) Parameters Type Name Description PgTypeId other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(PgTypeId, PgTypeId) Declaration public static bool operator ==(PgTypeId left, PgTypeId right) Parameters Type Name Description PgTypeId left PgTypeId right Returns Type Description bool | Edit this page View Source implicit operator PgTypeId(DataTypeName) Declaration public static implicit operator PgTypeId(DataTypeName name) Parameters Type Name Description DataTypeName name Returns Type Description PgTypeId | Edit this page View Source implicit operator PgTypeId(Oid) Declaration public static implicit operator PgTypeId(Oid id) Parameters Type Name Description Oid id Returns Type Description PgTypeId | Edit this page View Source operator !=(PgTypeId, PgTypeId) Declaration public static bool operator !=(PgTypeId left, PgTypeId right) Parameters Type Name Description PgTypeId left PgTypeId right Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/Npgsql.Internal.Postgres.html": {
    "href": "doc/api/Npgsql.Internal.Postgres.html",
    "title": "Namespace Npgsql.Internal.Postgres | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal.Postgres Structs DataTypeName Represents the fully-qualified name of a PostgreSQL type. Field Oid PgTypeId A discriminated union of Oid and DataTypeName."
  },
  "doc/api/Npgsql.Internal.Size.html": {
    "href": "doc/api/Npgsql.Internal.Size.html",
    "title": "Struct Size | Npgsql Documentation",
    "keywords": "Struct Size Implements IEquatable<Size> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public readonly struct Size : IEquatable<Size> Properties | Edit this page View Source Kind Declaration public SizeKind Kind { get; } Property Value Type Description SizeKind | Edit this page View Source Unknown Declaration public static Size Unknown { get; } Property Value Type Description Size | Edit this page View Source Value Declaration public int Value { get; } Property Value Type Description int | Edit this page View Source Zero Declaration public static Size Zero { get; } Property Value Type Description Size Methods | Edit this page View Source Combine(Size) Declaration public Size Combine(Size result) Parameters Type Name Description Size result Returns Type Description Size | Edit this page View Source Create(int) Declaration public static Size Create(int byteCount) Parameters Type Name Description int byteCount Returns Type Description Size | Edit this page View Source CreateUpperBound(int) Declaration public static Size CreateUpperBound(int byteCount) Parameters Type Name Description int byteCount Returns Type Description Size | Edit this page View Source Equals(Size) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Size other) Parameters Type Name Description Size other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(Size, Size) Declaration public static bool operator ==(Size left, Size right) Parameters Type Name Description Size left Size right Returns Type Description bool | Edit this page View Source implicit operator Size(int) Declaration public static implicit operator Size(int value) Parameters Type Name Description int value Returns Type Description Size | Edit this page View Source operator !=(Size, Size) Declaration public static bool operator !=(Size left, Size right) Parameters Type Name Description Size left Size right Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/Npgsql.Internal.SizeContext.html": {
    "href": "doc/api/Npgsql.Internal.SizeContext.html",
    "title": "Struct SizeContext | Npgsql Documentation",
    "keywords": "Struct SizeContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public readonly struct SizeContext Constructors | Edit this page View Source SizeContext(DataFormat, Size) Declaration public SizeContext(DataFormat format, Size bufferRequirement) Parameters Type Name Description DataFormat format Size bufferRequirement Properties | Edit this page View Source BufferRequirement Declaration public required Size BufferRequirement { get; init; } Property Value Type Description Size | Edit this page View Source Format Declaration public DataFormat Format { get; } Property Value Type Description DataFormat"
  },
  "doc/api/Npgsql.Internal.SizeKind.html": {
    "href": "doc/api/Npgsql.Internal.SizeKind.html",
    "title": "Enum SizeKind | Npgsql Documentation",
    "keywords": "Enum SizeKind Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public enum SizeKind Fields Name Description Exact Unknown UpperBound"
  },
  "doc/api/Npgsql.Internal.TypeInfoFactory.html": {
    "href": "doc/api/Npgsql.Internal.TypeInfoFactory.html",
    "title": "Delegate TypeInfoFactory | Npgsql Documentation",
    "keywords": "Delegate TypeInfoFactory Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public delegate PgTypeInfo TypeInfoFactory(PgSerializerOptions options, TypeInfoMapping mapping, bool resolvedDataTypeName) Parameters Type Name Description PgSerializerOptions options TypeInfoMapping mapping bool resolvedDataTypeName Signals whether a resolver based TypeInfo can keep its PgTypeId undecided or whether it should follow mapping.DataTypeName. Returns Type Description PgTypeInfo"
  },
  "doc/api/Npgsql.Internal.TypeInfoMapping.html": {
    "href": "doc/api/Npgsql.Internal.TypeInfoMapping.html",
    "title": "Struct TypeInfoMapping | Npgsql Documentation",
    "keywords": "Struct TypeInfoMapping Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public readonly struct TypeInfoMapping Constructors | Edit this page View Source TypeInfoMapping(Type, string, TypeInfoFactory) Declaration public TypeInfoMapping(Type type, string dataTypeName, TypeInfoFactory factory) Parameters Type Name Description Type type string dataTypeName TypeInfoFactory factory Properties | Edit this page View Source DataTypeName Declaration public string DataTypeName { get; init; } Property Value Type Description string | Edit this page View Source Factory Declaration public TypeInfoFactory Factory { get; init; } Property Value Type Description TypeInfoFactory | Edit this page View Source MatchRequirement Declaration public MatchRequirement MatchRequirement { get; init; } Property Value Type Description MatchRequirement | Edit this page View Source Type Declaration public Type Type { get; init; } Property Value Type Description Type | Edit this page View Source TypeMatchPredicate Declaration public Func<Type?, bool>? TypeMatchPredicate { get; init; } Property Value Type Description Func<Type, bool> Methods | Edit this page View Source DataTypeNameEquals(string) Declaration public bool DataTypeNameEquals(string dataTypeName) Parameters Type Name Description string dataTypeName Returns Type Description bool | Edit this page View Source TypeEquals(Type) Declaration public bool TypeEquals(Type type) Parameters Type Name Description Type type Returns Type Description bool Extension Methods TypeInfoMappingHelpers.CreateInfo(TypeInfoMapping, PgSerializerOptions, PgConverter, DataFormat?, bool) TypeInfoMappingHelpers.CreateInfo(TypeInfoMapping, PgSerializerOptions, PgConverterResolver, bool, DataFormat?, bool)"
  },
  "doc/api/Npgsql.Internal.TypeInfoMappingCollection.html": {
    "href": "doc/api/Npgsql.Internal.TypeInfoMappingCollection.html",
    "title": "Class TypeInfoMappingCollection | Npgsql Documentation",
    "keywords": "Class TypeInfoMappingCollection Inheritance object TypeInfoMappingCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public sealed class TypeInfoMappingCollection Constructors | Edit this page View Source TypeInfoMappingCollection() Declaration public TypeInfoMappingCollection() | Edit this page View Source TypeInfoMappingCollection(TypeInfoMappingCollection) Declaration public TypeInfoMappingCollection(TypeInfoMappingCollection baseCollection) Parameters Type Name Description TypeInfoMappingCollection baseCollection | Edit this page View Source TypeInfoMappingCollection(IEnumerable<TypeInfoMapping>) Declaration public TypeInfoMappingCollection(IEnumerable<TypeInfoMapping> items) Parameters Type Name Description IEnumerable<TypeInfoMapping> items | Edit this page View Source TypeInfoMappingCollection(int) Declaration public TypeInfoMappingCollection(int capacity = 0) Parameters Type Name Description int capacity Properties | Edit this page View Source Items Declaration public IReadOnlyList<TypeInfoMapping> Items { get; } Property Value Type Description IReadOnlyList<TypeInfoMapping> Methods | Edit this page View Source Add(TypeInfoMapping) Declaration public void Add(TypeInfoMapping mapping) Parameters Type Name Description TypeInfoMapping mapping | Edit this page View Source AddArrayType<TElement>(TypeInfoMapping) Declaration public void AddArrayType<TElement>(TypeInfoMapping elementMapping) where TElement : class Parameters Type Name Description TypeInfoMapping elementMapping Type Parameters Name Description TElement | Edit this page View Source AddArrayType<TElement>(TypeInfoMapping, bool) Declaration public void AddArrayType<TElement>(TypeInfoMapping elementMapping, bool suppressObjectMapping) where TElement : class Parameters Type Name Description TypeInfoMapping elementMapping bool suppressObjectMapping Type Parameters Name Description TElement | Edit this page View Source AddArrayType<TElement>(string) Declaration public void AddArrayType<TElement>(string elementDataTypeName) where TElement : class Parameters Type Name Description string elementDataTypeName Type Parameters Name Description TElement | Edit this page View Source AddArrayType<TElement>(string, bool) Declaration public void AddArrayType<TElement>(string elementDataTypeName, bool suppressObjectMapping) where TElement : class Parameters Type Name Description string elementDataTypeName bool suppressObjectMapping Type Parameters Name Description TElement | Edit this page View Source AddPolymorphicResolverArrayType(TypeInfoMapping, Func<PgSerializerOptions, Func<PgConverterResolution, PgConverter>>) Declaration public void AddPolymorphicResolverArrayType(TypeInfoMapping elementMapping, Func<PgSerializerOptions, Func<PgConverterResolution, PgConverter>> elementToArrayConverterFactory) Parameters Type Name Description TypeInfoMapping elementMapping Func<PgSerializerOptions, Func<PgConverterResolution, PgConverter>> elementToArrayConverterFactory | Edit this page View Source AddPolymorphicResolverArrayType(string, Func<PgSerializerOptions, Func<PgConverterResolution, PgConverter>>) Declaration public void AddPolymorphicResolverArrayType(string elementDataTypeName, Func<PgSerializerOptions, Func<PgConverterResolution, PgConverter>> elementToArrayConverterFactory) Parameters Type Name Description string elementDataTypeName Func<PgSerializerOptions, Func<PgConverterResolution, PgConverter>> elementToArrayConverterFactory | Edit this page View Source AddRange(TypeInfoMappingCollection) Declaration public void AddRange(TypeInfoMappingCollection collection) Parameters Type Name Description TypeInfoMappingCollection collection | Edit this page View Source AddResolverArrayType<TElement>(TypeInfoMapping) Declaration public void AddResolverArrayType<TElement>(TypeInfoMapping elementMapping) where TElement : class Parameters Type Name Description TypeInfoMapping elementMapping Type Parameters Name Description TElement | Edit this page View Source AddResolverArrayType<TElement>(TypeInfoMapping, bool) Declaration public void AddResolverArrayType<TElement>(TypeInfoMapping elementMapping, bool suppressObjectMapping) where TElement : class Parameters Type Name Description TypeInfoMapping elementMapping bool suppressObjectMapping Type Parameters Name Description TElement | Edit this page View Source AddResolverArrayType<TElement>(string) Declaration public void AddResolverArrayType<TElement>(string elementDataTypeName) where TElement : class Parameters Type Name Description string elementDataTypeName Type Parameters Name Description TElement | Edit this page View Source AddResolverArrayType<TElement>(string, bool) Declaration public void AddResolverArrayType<TElement>(string elementDataTypeName, bool suppressObjectMapping) where TElement : class Parameters Type Name Description string elementDataTypeName bool suppressObjectMapping Type Parameters Name Description TElement | Edit this page View Source AddResolverStructArrayType<TElement>(TypeInfoMapping, TypeInfoMapping) Declaration public void AddResolverStructArrayType<TElement>(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping) where TElement : struct Parameters Type Name Description TypeInfoMapping elementMapping TypeInfoMapping nullableElementMapping Type Parameters Name Description TElement | Edit this page View Source AddResolverStructArrayType<TElement>(TypeInfoMapping, TypeInfoMapping, bool) Declaration public void AddResolverStructArrayType<TElement>(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping, bool suppressObjectMapping) where TElement : struct Parameters Type Name Description TypeInfoMapping elementMapping TypeInfoMapping nullableElementMapping bool suppressObjectMapping Type Parameters Name Description TElement | Edit this page View Source AddResolverStructArrayType<TElement>(string) Declaration public void AddResolverStructArrayType<TElement>(string elementDataTypeName) where TElement : struct Parameters Type Name Description string elementDataTypeName Type Parameters Name Description TElement | Edit this page View Source AddResolverStructArrayType<TElement>(string, bool) Declaration public void AddResolverStructArrayType<TElement>(string elementDataTypeName, bool suppressObjectMapping) where TElement : struct Parameters Type Name Description string elementDataTypeName bool suppressObjectMapping Type Parameters Name Description TElement | Edit this page View Source AddResolverStructType<T>(string, TypeInfoFactory, MatchRequirement) Declaration public void AddResolverStructType<T>(string dataTypeName, TypeInfoFactory createInfo, MatchRequirement matchRequirement) where T : struct Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo MatchRequirement matchRequirement Type Parameters Name Description T | Edit this page View Source AddResolverStructType<T>(string, TypeInfoFactory, bool) Declaration public void AddResolverStructType<T>(string dataTypeName, TypeInfoFactory createInfo, bool isDefault = false) where T : struct Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo bool isDefault Type Parameters Name Description T | Edit this page View Source AddResolverStructType<T>(string, TypeInfoFactory, Func<TypeInfoMapping, TypeInfoMapping>?) Declaration public void AddResolverStructType<T>(string dataTypeName, TypeInfoFactory createInfo, Func<TypeInfoMapping, TypeInfoMapping>? configure) where T : struct Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo Func<TypeInfoMapping, TypeInfoMapping> configure Type Parameters Name Description T | Edit this page View Source AddResolverType<T>(string, TypeInfoFactory, MatchRequirement) Declaration public void AddResolverType<T>(string dataTypeName, TypeInfoFactory createInfo, MatchRequirement matchRequirement) where T : class Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo MatchRequirement matchRequirement Type Parameters Name Description T | Edit this page View Source AddResolverType<T>(string, TypeInfoFactory, bool) Declaration public void AddResolverType<T>(string dataTypeName, TypeInfoFactory createInfo, bool isDefault = false) where T : class Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo bool isDefault Type Parameters Name Description T | Edit this page View Source AddResolverType<T>(string, TypeInfoFactory, Func<TypeInfoMapping, TypeInfoMapping>?) Declaration public void AddResolverType<T>(string dataTypeName, TypeInfoFactory createInfo, Func<TypeInfoMapping, TypeInfoMapping>? configure) where T : class Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo Func<TypeInfoMapping, TypeInfoMapping> configure Type Parameters Name Description T | Edit this page View Source AddStructArrayType<TElement>(TypeInfoMapping, TypeInfoMapping) Declaration public void AddStructArrayType<TElement>(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping) where TElement : struct Parameters Type Name Description TypeInfoMapping elementMapping TypeInfoMapping nullableElementMapping Type Parameters Name Description TElement | Edit this page View Source AddStructArrayType<TElement>(TypeInfoMapping, TypeInfoMapping, bool) Declaration public void AddStructArrayType<TElement>(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping, bool suppressObjectMapping) where TElement : struct Parameters Type Name Description TypeInfoMapping elementMapping TypeInfoMapping nullableElementMapping bool suppressObjectMapping Type Parameters Name Description TElement | Edit this page View Source AddStructArrayType<TElement>(string) Declaration public void AddStructArrayType<TElement>(string elementDataTypeName) where TElement : struct Parameters Type Name Description string elementDataTypeName Type Parameters Name Description TElement | Edit this page View Source AddStructArrayType<TElement>(string, bool) Declaration public void AddStructArrayType<TElement>(string elementDataTypeName, bool suppressObjectMapping) where TElement : struct Parameters Type Name Description string elementDataTypeName bool suppressObjectMapping Type Parameters Name Description TElement | Edit this page View Source AddStructType<T>(string, TypeInfoFactory, MatchRequirement) Declaration public void AddStructType<T>(string dataTypeName, TypeInfoFactory createInfo, MatchRequirement matchRequirement) where T : struct Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo MatchRequirement matchRequirement Type Parameters Name Description T | Edit this page View Source AddStructType<T>(string, TypeInfoFactory, bool) Declaration public void AddStructType<T>(string dataTypeName, TypeInfoFactory createInfo, bool isDefault = false) where T : struct Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo bool isDefault Type Parameters Name Description T | Edit this page View Source AddStructType<T>(string, TypeInfoFactory, Func<TypeInfoMapping, TypeInfoMapping>?) Declaration public void AddStructType<T>(string dataTypeName, TypeInfoFactory createInfo, Func<TypeInfoMapping, TypeInfoMapping>? configure) where T : struct Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo Func<TypeInfoMapping, TypeInfoMapping> configure Type Parameters Name Description T | Edit this page View Source AddType<T>(string, TypeInfoFactory, MatchRequirement) Declaration public void AddType<T>(string dataTypeName, TypeInfoFactory createInfo, MatchRequirement matchRequirement) where T : class Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo MatchRequirement matchRequirement Type Parameters Name Description T | Edit this page View Source AddType<T>(string, TypeInfoFactory, bool) Declaration public void AddType<T>(string dataTypeName, TypeInfoFactory createInfo, bool isDefault = false) where T : class Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo bool isDefault Type Parameters Name Description T | Edit this page View Source AddType<T>(string, TypeInfoFactory, Func<TypeInfoMapping, TypeInfoMapping>?) Declaration public void AddType<T>(string dataTypeName, TypeInfoFactory createInfo, Func<TypeInfoMapping, TypeInfoMapping>? configure) where T : class Parameters Type Name Description string dataTypeName TypeInfoFactory createInfo Func<TypeInfoMapping, TypeInfoMapping> configure Type Parameters Name Description T | Edit this page View Source Find(Type?, DataTypeName?, PgSerializerOptions) Declaration public PgTypeInfo? Find(Type? type, DataTypeName? dataTypeName, PgSerializerOptions options) Parameters Type Name Description Type type DataTypeName? dataTypeName PgSerializerOptions options Returns Type Description PgTypeInfo | Edit this page View Source IsArrayLikeType(Type, out Type?) Declaration public static bool IsArrayLikeType(Type type, out Type? elementType) Parameters Type Name Description Type type Type elementType Returns Type Description bool"
  },
  "doc/api/Npgsql.Internal.TypeInfoMappingHelpers.html": {
    "href": "doc/api/Npgsql.Internal.TypeInfoMappingHelpers.html",
    "title": "Class TypeInfoMappingHelpers | Npgsql Documentation",
    "keywords": "Class TypeInfoMappingHelpers Inheritance object TypeInfoMappingHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public static class TypeInfoMappingHelpers Methods | Edit this page View Source CreateInfo(TypeInfoMapping, PgSerializerOptions, PgConverter, DataFormat?, bool) Declaration public static PgTypeInfo CreateInfo(this TypeInfoMapping mapping, PgSerializerOptions options, PgConverter converter, DataFormat? preferredFormat = null, bool supportsWriting = true) Parameters Type Name Description TypeInfoMapping mapping PgSerializerOptions options PgConverter converter DataFormat? preferredFormat bool supportsWriting Returns Type Description PgTypeInfo | Edit this page View Source CreateInfo(TypeInfoMapping, PgSerializerOptions, PgConverterResolver, bool, DataFormat?, bool) Declaration public static PgResolverTypeInfo CreateInfo(this TypeInfoMapping mapping, PgSerializerOptions options, PgConverterResolver resolver, bool includeDataTypeName = true, DataFormat? preferredFormat = null, bool supportsWriting = true) Parameters Type Name Description TypeInfoMapping mapping PgSerializerOptions options PgConverterResolver resolver bool includeDataTypeName DataFormat? preferredFormat bool supportsWriting Returns Type Description PgResolverTypeInfo"
  },
  "doc/api/Npgsql.Internal.ValueMetadata.html": {
    "href": "doc/api/Npgsql.Internal.ValueMetadata.html",
    "title": "Struct ValueMetadata | Npgsql Documentation",
    "keywords": "Struct ValueMetadata Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Internal Assembly: Npgsql.dll Syntax public readonly struct ValueMetadata Properties | Edit this page View Source BufferRequirement Declaration public required Size BufferRequirement { get; init; } Property Value Type Description Size | Edit this page View Source Format Declaration public required DataFormat Format { get; init; } Property Value Type Description DataFormat | Edit this page View Source Size Declaration public required Size Size { get; init; } Property Value Type Description Size | Edit this page View Source WriteState Declaration public object? WriteState { get; init; } Property Value Type Description object"
  },
  "doc/api/Npgsql.Internal.html": {
    "href": "doc/api/Npgsql.Internal.html",
    "title": "Namespace Npgsql.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Internal Classes DynamicTypeInfoResolver DynamicTypeInfoResolver.DynamicMappingCollection HackyEnumTypeMapping Hacky temporary measure used by EFCore.PG to extract user-configured enum mappings. Accessed via reflection only. NpgsqlConnector Represents a connection to a PostgreSQL backend. Unlike NpgsqlConnection objects, which are exposed to users, connectors are internal to Npgsql and are recycled by the connection pool. NpgsqlDatabaseInfo Base class for implementations which provide information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...). PgBufferedConverter<T> PgConverter PgConverterFactory PgConverterResolver PgConverterResolver<T> PgConverter<T> PgReader PgResolverTypeInfo PgSerializerOptions PgStreamingConverter<T> PgTypeInfo PgTypeInfoResolverFactory PgWriter TypeInfoMappingCollection TypeInfoMappingHelpers Structs BufferRequirements NestedReadScope NestedWriteScope PgConverterResolution Size SizeContext TypeInfoMapping ValueMetadata Interfaces INpgsqlDatabaseInfoFactory A factory which get generate instances of NpgsqlDatabaseInfo, which describe a database and the types it contains. When first connecting to a database, Npgsql will attempt to load information about it via this factory. IPgTypeInfoResolver An Npgsql resolver for type info. Used by Npgsql to read and write values to PostgreSQL. Enums DataFormat MatchRequirement SizeKind Delegates TypeInfoFactory"
  },
  "doc/api/Npgsql.NameTranslation.NpgsqlNullNameTranslator.html": {
    "href": "doc/api/Npgsql.NameTranslation.NpgsqlNullNameTranslator.html",
    "title": "Class NpgsqlNullNameTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNullNameTranslator A name translator which preserves CLR names (e.g. SomeClass) when mapping names to the database. Inheritance object NpgsqlNullNameTranslator Implements INpgsqlNameTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.NameTranslation Assembly: Npgsql.dll Syntax public sealed class NpgsqlNullNameTranslator : INpgsqlNameTranslator Methods | Edit this page View Source TranslateMemberName(string) Given a CLR member name (property or field), translates its name to a database type name. Declaration public string TranslateMemberName(string clrName) Parameters Type Name Description string clrName Returns Type Description string | Edit this page View Source TranslateTypeName(string) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration public string TranslateTypeName(string clrName) Parameters Type Name Description string clrName Returns Type Description string Implements INpgsqlNameTranslator"
  },
  "doc/api/Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.html": {
    "href": "doc/api/Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.html",
    "title": "Class NpgsqlSnakeCaseNameTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlSnakeCaseNameTranslator A name translator which converts standard CLR names (e.g. SomeClass) to snake-case database names (some_class) Inheritance object NpgsqlSnakeCaseNameTranslator Implements INpgsqlNameTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.NameTranslation Assembly: Npgsql.dll Syntax public sealed class NpgsqlSnakeCaseNameTranslator : INpgsqlNameTranslator Constructors | Edit this page View Source NpgsqlSnakeCaseNameTranslator(bool, CultureInfo?) Creates a new NpgsqlSnakeCaseNameTranslator. Declaration public NpgsqlSnakeCaseNameTranslator(bool legacyMode, CultureInfo? culture = null) Parameters Type Name Description bool legacyMode Uses the legacy naming convention if true, otherwise it uses the new naming convention. CultureInfo culture An object that supplies culture-specific casing rules. This will be used when converting names to lower case. If null then InvariantCulture will be used. | Edit this page View Source NpgsqlSnakeCaseNameTranslator(CultureInfo?) Creates a new NpgsqlSnakeCaseNameTranslator. Declaration public NpgsqlSnakeCaseNameTranslator(CultureInfo? culture = null) Parameters Type Name Description CultureInfo culture An object that supplies culture-specific casing rules. This will be used when converting names to lower case. If null then InvariantCulture will be used. Methods | Edit this page View Source ConvertToSnakeCase(string, CultureInfo?) Converts a string to its snake_case equivalent. Declaration public static string ConvertToSnakeCase(string name, CultureInfo? culture = null) Parameters Type Name Description string name The value to convert. CultureInfo culture An object that supplies culture-specific casing rules. This will be used when converting names to lower case. If null then InvariantCulture will be used. Returns Type Description string | Edit this page View Source TranslateMemberName(string) Given a CLR member name (property or field), translates its name to a database type name. Declaration public string TranslateMemberName(string clrName) Parameters Type Name Description string clrName Returns Type Description string | Edit this page View Source TranslateTypeName(string) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration public string TranslateTypeName(string clrName) Parameters Type Name Description string clrName Returns Type Description string Implements INpgsqlNameTranslator"
  },
  "doc/api/Npgsql.NameTranslation.html": {
    "href": "doc/api/Npgsql.NameTranslation.html",
    "title": "Namespace Npgsql.NameTranslation | Npgsql Documentation",
    "keywords": "Namespace Npgsql.NameTranslation Classes NpgsqlNullNameTranslator A name translator which preserves CLR names (e.g. SomeClass) when mapping names to the database. NpgsqlSnakeCaseNameTranslator A name translator which converts standard CLR names (e.g. SomeClass) to snake-case database names (some_class)"
  },
  "doc/api/Npgsql.NoticeEventHandler.html": {
    "href": "doc/api/Npgsql.NoticeEventHandler.html",
    "title": "Delegate NoticeEventHandler | Npgsql Documentation",
    "keywords": "Delegate NoticeEventHandler Represents a method that handles the Notice event. Namespace: Npgsql Assembly: Npgsql.dll Syntax public delegate void NoticeEventHandler(object sender, NpgsqlNoticeEventArgs e) Parameters Type Name Description object sender The source of the event. NpgsqlNoticeEventArgs e A NpgsqlNoticeEventArgs that contains the notice information (e.g. message, severity...)."
  },
  "doc/api/Npgsql.NotificationEventHandler.html": {
    "href": "doc/api/Npgsql.NotificationEventHandler.html",
    "title": "Delegate NotificationEventHandler | Npgsql Documentation",
    "keywords": "Delegate NotificationEventHandler Represents a method that handles the Notification event. Namespace: Npgsql Assembly: Npgsql.dll Syntax public delegate void NotificationEventHandler(object sender, NpgsqlNotificationEventArgs e) Parameters Type Name Description object sender The source of the event. NpgsqlNotificationEventArgs e A NpgsqlNotificationEventArgs that contains the notification payload."
  },
  "doc/api/Npgsql.NpgsqlBatch.html": {
    "href": "doc/api/Npgsql.NpgsqlBatch.html",
    "title": "Class NpgsqlBatch | Npgsql Documentation",
    "keywords": "Class NpgsqlBatch Represents a batch of commands which can be executed against a data source in a single round trip. Provides a base class for database-specific classes that represent command batches. Inheritance object DbBatch NpgsqlBatch Implements IDisposable IAsyncDisposable Inherited Members DbBatch.DisposeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public class NpgsqlBatch : DbBatch, IDisposable, IAsyncDisposable Constructors | Edit this page View Source NpgsqlBatch(NpgsqlConnection?, NpgsqlTransaction?) Initializes a new NpgsqlBatch. Declaration public NpgsqlBatch(NpgsqlConnection? connection = null, NpgsqlTransaction? transaction = null) Parameters Type Name Description NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. NpgsqlTransaction transaction The NpgsqlTransaction in which the NpgsqlCommand executes. Properties | Edit this page View Source BatchCommands Gets the collection of DbBatchCommand objects. Declaration public NpgsqlBatchCommandCollection BatchCommands { get; } Property Value Type Description NpgsqlBatchCommandCollection The commands contained within the batch. | Edit this page View Source Connection Gets or sets the DbConnection used by this DbBatch. Declaration public NpgsqlConnection? Connection { get; set; } Property Value Type Description NpgsqlConnection The connection to the data source. | Edit this page View Source DbBatchCommands When overridden in a derived class, gets the collection of DbBatchCommand objects. Declaration protected override DbBatchCommandCollection DbBatchCommands { get; } Property Value Type Description DbBatchCommandCollection The commands contained within the batch. Overrides DbBatch.DbBatchCommands | Edit this page View Source DbConnection When overridden in a derived class, gets or sets the DbConnection used by this DbBatch. Declaration protected override DbConnection? DbConnection { get; set; } Property Value Type Description DbConnection The connection to the data source. Overrides DbBatch.DbConnection | Edit this page View Source DbTransaction When overridden in a derived class, gets or sets the DbTransaction within which this DbBatch object executes. Declaration protected override DbTransaction? DbTransaction { get; set; } Property Value Type Description DbTransaction The transaction within which a batch of a .NET data provider executes. The default value is a null reference (Nothing in Visual Basic). Overrides DbBatch.DbTransaction | Edit this page View Source EnableErrorBarriers Controls whether to place error barriers between all batch commands within this batch. Default to false. Declaration public bool EnableErrorBarriers { get; set; } Property Value Type Description bool Remarks By default, any exception in a command causes later commands in the batch to be skipped, and earlier commands to be rolled back. Enabling error barriers ensures that errors do not affect other commands in the batch. Note that if the batch is executed within an explicit transaction, the first error places the transaction in a failed state, causing all later commands to fail in any case. As a result, this option is useful mainly when there is no explicit transaction. At the PostgreSQL wire protocol level, this corresponds to inserting a Sync message between each command, rather than grouping all the batch's commands behind a single terminating Sync. To control error barriers on a command-by-command basis, see AppendErrorBarrier. | Edit this page View Source Timeout Gets or sets the wait time (in seconds) before terminating the attempt to execute the batch and generating an error. Declaration public override int Timeout { get; set; } Property Value Type Description int The time in seconds to wait for the batch to execute. Overrides DbBatch.Timeout | Edit this page View Source Transaction Gets or sets the DbTransaction within which this DbBatch object executes. Declaration public NpgsqlTransaction? Transaction { get; set; } Property Value Type Description NpgsqlTransaction The transaction within which a batch of a .NET data provider executes. The default value is a null reference (Nothing in Visual Basic). Methods | Edit this page View Source Cancel() Attempts to cancel the execution of a DbBatch. Declaration public override void Cancel() Overrides DbBatch.Cancel() | Edit this page View Source CreateBatchCommand() Creates a new instance of a DbBatchCommand object. Declaration public NpgsqlBatchCommand CreateBatchCommand() Returns Type Description NpgsqlBatchCommand A DbBatchCommand object. | Edit this page View Source CreateDbBatchCommand() When overridden in a derived class, creates a new instance of a DbBatchCommand object. Declaration protected override DbBatchCommand CreateDbBatchCommand() Returns Type Description DbBatchCommand A DbBatchCommand object. Overrides DbBatch.CreateDbBatchCommand() | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides DbBatch.Dispose() | Edit this page View Source ExecuteDbDataReader(CommandBehavior) When overridden in a derived class, executes the batch against its connection, returning a DbDataReader which can be used to access the results. Declaration protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) Parameters Type Name Description CommandBehavior behavior An instance of CommandBehavior, specifying options for batch execution and data retrieval. Returns Type Description DbDataReader A DbDataReader object. Overrides DbBatch.ExecuteDbDataReader(CommandBehavior) Exceptions Type Condition DbException An error occurred while executing the batch. ArgumentException The CommandBehavior value is invalid. | Edit this page View Source ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) Providers should implement this method to provide a non-default implementation for System.Data.Common.DbCommand.ExecuteReader* overloads. The default implementation invokes the synchronous ExecuteReader() method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token. Exceptions thrown by ExecuteReader will be communicated via the returned Task Exception property. This method accepts a cancellation token that can be used to request the operation to be cancelled early. Implementations may ignore this request. Declaration protected override Task<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken) Parameters Type Name Description CommandBehavior behavior One of the enumeration values that specifies options for batch execution and data retrieval. CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description Task<DbDataReader> A task representing the asynchronous operation. Overrides DbBatch.ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) | Edit this page View Source ExecuteNonQuery() Executes the batch against its connection object, returning the total number of rows affected across all the batch commands. Declaration public override int ExecuteNonQuery() Returns Type Description int The total number of rows affected across all the batch commands. Overrides DbBatch.ExecuteNonQuery() | Edit this page View Source ExecuteNonQueryAsync(CancellationToken) This is the asynchronous version of ExecuteNonQuery(). Providers should override with an appropriate implementation. The cancellation token may optionally be ignored. The default implementation invokes the synchronous ExecuteNonQuery() method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token. Exceptions thrown by ExecuteNonQuery() will be communicated via the returned Task Exception property. Do not invoke other methods and properties of the DbCommand object until the returned Task is complete. Declaration public override Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description Task<int> A task representing the asynchronous operation. Overrides DbBatch.ExecuteNonQueryAsync(CancellationToken) Exceptions Type Condition DbException An error occurred while executing the batch. | Edit this page View Source ExecuteReader(CommandBehavior) Executes the batch against its connection, returning a DbDataReader which can be used to access the results. Declaration public NpgsqlDataReader ExecuteReader(CommandBehavior behavior = CommandBehavior.Default) Parameters Type Name Description CommandBehavior behavior One of the enumeration values that specifies options for batch execution and data retrieval. Returns Type Description NpgsqlDataReader A DbDataReader object. | Edit this page View Source ExecuteReaderAsync(CommandBehavior, CancellationToken) An asynchronous version of System.Data.Common.DbBatch.ExecuteReader*, which executes the batch against its connection, returning a DbDataReader which can be used to access the results. Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken = default) Parameters Type Name Description CommandBehavior behavior One of the enumeration values that specifies options for batch execution and data retrieval. CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description Task<NpgsqlDataReader> A task representing the asynchronous operation. Exceptions Type Condition DbException An error occurred while executing the batch. ArgumentException The CommandBehavior value is invalid. | Edit this page View Source ExecuteReaderAsync(CancellationToken) An asynchronous version of System.Data.Common.DbBatch.ExecuteReader*, which executes the batch against its connection, returning a DbDataReader which can be used to access the results. Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task<NpgsqlDataReader> A task representing the asynchronous operation. Exceptions Type Condition DbException An error occurred while executing the batch. ArgumentException The CommandBehavior value is invalid. | Edit this page View Source ExecuteScalar() Executes the batch and returns the first column of the first row in the first returned result set. All other columns, rows and resultsets are ignored. Declaration public override object? ExecuteScalar() Returns Type Description object The first column of the first row in the first result set. Overrides DbBatch.ExecuteScalar() Exceptions Type Condition DbException An error occurred while executing the batch. | Edit this page View Source ExecuteScalarAsync(CancellationToken) An asynchronous version of ExecuteScalar(), which executes the batch and returns the first column of the first row in the first returned result set. All other columns, rows and result sets are ignored. Declaration public override Task<object?> ExecuteScalarAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description Task<object> The first column of the first row in the first result set. Overrides DbBatch.ExecuteScalarAsync(CancellationToken) Exceptions Type Condition DbException An error occurred while executing the batch. | Edit this page View Source Prepare() Creates a prepared (or compiled) version of the batch, or of each of its commands, on the data source. Declaration public override void Prepare() Overrides DbBatch.Prepare() | Edit this page View Source PrepareAsync(CancellationToken) Asynchronously creates a prepared (or compiled) version of the batch, or of each of its commands, on the data source. Declaration public override Task PrepareAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task A Task representing the asynchronous operation. Overrides DbBatch.PrepareAsync(CancellationToken) Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlBatchCommand.html": {
    "href": "doc/api/Npgsql.NpgsqlBatchCommand.html",
    "title": "Class NpgsqlBatchCommand | Npgsql Documentation",
    "keywords": "Class NpgsqlBatchCommand Represents a single command within a DbBatch. A batch can be executed against a data source in a single round trip. Inheritance object DbBatchCommand NpgsqlBatchCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlBatchCommand : DbBatchCommand Constructors | Edit this page View Source NpgsqlBatchCommand() Initializes a new NpgsqlBatchCommand. Declaration public NpgsqlBatchCommand() | Edit this page View Source NpgsqlBatchCommand(string) Initializes a new NpgsqlBatchCommand. Declaration public NpgsqlBatchCommand(string commandText) Parameters Type Name Description string commandText The text of the NpgsqlBatchCommand. Properties | Edit this page View Source AppendErrorBarrier Appends an error barrier after this batch command. Defaults to the value of EnableErrorBarriers on the batch. Declaration public bool? AppendErrorBarrier { get; set; } Property Value Type Description bool? Remarks By default, any exception in a command causes later commands in the batch to be skipped, and earlier commands to be rolled back. Appending an error barrier ensures that errors from this command (or previous ones) won't cause later commands to be skipped, and that errors from later commands won't cause this command (or previous ones) to be rolled back). Note that if the batch is executed within an explicit transaction, the first error places the transaction in a failed state, causing all later commands to fail in any case. As a result, this option is useful mainly when there is no explicit transaction. At the PostgreSQL wire protocol level, this corresponds to inserting a Sync message after this command, rather than grouping all the batch's commands behind a single terminating Sync. Controlling error barriers on a command-by-command basis is an advanced feature, consider enabling error barriers for the entire batch via EnableErrorBarriers. | Edit this page View Source CanCreateParameter Declaration public override bool CanCreateParameter { get; } Property Value Type Description bool Overrides DbBatchCommand.CanCreateParameter | Edit this page View Source CommandText Gets or sets the text command to run against the data source. Declaration public override string CommandText { get; set; } Property Value Type Description string The text command to execute. The default value is an empty string (\"\"). Overrides DbBatchCommand.CommandText | Edit this page View Source CommandType Gets or sets how the CommandText property is interpreted. Declaration public override CommandType CommandType { get; set; } Property Value Type Description CommandType One of the enumeration values that specifies how a command string is interpreted. The default is Text. Overrides DbBatchCommand.CommandType | Edit this page View Source DbParameterCollection Gets the collection of DbParameter objects. Declaration protected override DbParameterCollection DbParameterCollection { get; } Property Value Type Description DbParameterCollection The parameters of the SQL statement or stored procedure. Overrides DbBatchCommand.DbParameterCollection | Edit this page View Source OID For an INSERT, the object ID of the inserted row if RecordsAffected is 1 and the target table has OIDs; otherwise 0. Declaration public uint OID { get; } Property Value Type Description uint | Edit this page View Source Parameters Gets the collection of DbParameter objects. For more information on parameters, see Configuring Parameters and Parameter Data Types. Declaration public NpgsqlParameterCollection Parameters { get; } Property Value Type Description NpgsqlParameterCollection The parameters of the SQL statement or stored procedure. | Edit this page View Source RecordsAffected Gets the number of rows changed, inserted, or deleted by execution of this specific DbBatchCommand. Declaration public override int RecordsAffected { get; } Property Value Type Description int The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed. Overrides DbBatchCommand.RecordsAffected | Edit this page View Source Rows The number of rows affected or retrieved. Declaration public ulong Rows { get; } Property Value Type Description ulong Remarks See the command tag in the CommandComplete message for the meaning of this value for each StatementType, https://www.postgresql.org/docs/current/static/protocol-message-formats.html | Edit this page View Source StatementType Specifies the type of query, e.g. SELECT. Declaration public StatementType StatementType { get; } Property Value Type Description StatementType Methods | Edit this page View Source CreateParameter() Declaration public override NpgsqlParameter CreateParameter() Returns Type Description NpgsqlParameter Overrides DbBatchCommand.CreateParameter() | Edit this page View Source ToString() Returns the CommandText. Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "doc/api/Npgsql.NpgsqlBatchCommandCollection.html": {
    "href": "doc/api/Npgsql.NpgsqlBatchCommandCollection.html",
    "title": "Class NpgsqlBatchCommandCollection | Npgsql Documentation",
    "keywords": "Class NpgsqlBatchCommandCollection The base class for a collection of instances of DbBatchCommand, contained in a DbBatch. Inheritance object DbBatchCommandCollection NpgsqlBatchCommandCollection Implements IList<DbBatchCommand> ICollection<DbBatchCommand> IEnumerable<DbBatchCommand> IList<NpgsqlBatchCommand> ICollection<NpgsqlBatchCommand> IEnumerable<NpgsqlBatchCommand> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public class NpgsqlBatchCommandCollection : DbBatchCommandCollection, IList<DbBatchCommand>, ICollection<DbBatchCommand>, IEnumerable<DbBatchCommand>, IList<NpgsqlBatchCommand>, ICollection<NpgsqlBatchCommand>, IEnumerable<NpgsqlBatchCommand>, IEnumerable Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public override int Count { get; } Property Value Type Description int The number of elements contained in the ICollection<T>. Overrides DbBatchCommandCollection.Count | Edit this page View Source IsReadOnly Specifies whether the collection is read-only. Declaration public override bool IsReadOnly { get; } Property Value Type Description bool true if the collection is read-only; otherwise false. Overrides DbBatchCommandCollection.IsReadOnly | Edit this page View Source this[int] Gets or sets the element at the specified index. Declaration public NpgsqlBatchCommand this[int index] { get; set; } Parameters Type Name Description int index The zero-based index of the element to get or set. Property Value Type Description NpgsqlBatchCommand The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Methods | Edit this page View Source Add(NpgsqlBatchCommand) Adds an item to the ICollection<T>. Declaration public void Add(NpgsqlBatchCommand item) Parameters Type Name Description NpgsqlBatchCommand item The object to add to the ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Add(DbBatchCommand) Adds the specified DbBatchCommand object to the DbBatchCommandCollection. Declaration public override void Add(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item The object to add to the ICollection<T>. Overrides DbBatchCommandCollection.Add(DbBatchCommand) | Edit this page View Source Clear() Removes all DbBatchCommand values from the DbBatchCommandCollection. Declaration public override void Clear() Overrides DbBatchCommandCollection.Clear() | Edit this page View Source Contains(NpgsqlBatchCommand) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(NpgsqlBatchCommand item) Parameters Type Name Description NpgsqlBatchCommand item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source Contains(DbBatchCommand) Indicates whether a DbBatchCommand is contained in the collection. Declaration public override bool Contains(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item The object to locate in the ICollection<T>. Returns Type Description bool true if the DbBatchCommand is in the collection; otherwise false. Overrides DbBatchCommandCollection.Contains(DbBatchCommand) | Edit this page View Source CopyTo(NpgsqlBatchCommand[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(NpgsqlBatchCommand[] array, int arrayIndex) Parameters Type Name Description NpgsqlBatchCommand[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source CopyTo(DbBatchCommand[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public override void CopyTo(DbBatchCommand[] array, int arrayIndex) Parameters Type Name Description DbBatchCommand[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Overrides DbBatchCommandCollection.CopyTo(DbBatchCommand[], int) | Edit this page View Source GetBatchCommand(int) Declaration protected override DbBatchCommand GetBatchCommand(int index) Parameters Type Name Description int index Returns Type Description DbBatchCommand Overrides DbBatchCommandCollection.GetBatchCommand(int) | Edit this page View Source GetEnumerator() Returns the DbBatchCommand object at the specified index in the collection. Declaration public override IEnumerator<DbBatchCommand> GetEnumerator() Returns Type Description IEnumerator<DbBatchCommand> The DbBatchCommand object at the specified index in the collection. Overrides DbBatchCommandCollection.GetEnumerator() | Edit this page View Source IndexOf(NpgsqlBatchCommand) Determines the index of a specific item in the IList<T>. Declaration public int IndexOf(NpgsqlBatchCommand item) Parameters Type Name Description NpgsqlBatchCommand item The object to locate in the IList<T>. Returns Type Description int The index of item if found in the list; otherwise, -1. | Edit this page View Source IndexOf(DbBatchCommand) Returns the index of the specified DbBatchCommand object. Declaration public override int IndexOf(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item The object to locate in the IList<T>. Returns Type Description int The index of the specified DbBatchCommand object. Overrides DbBatchCommandCollection.IndexOf(DbBatchCommand) | Edit this page View Source Insert(int, NpgsqlBatchCommand) Inserts an item to the IList<T> at the specified index. Declaration public void Insert(int index, NpgsqlBatchCommand item) Parameters Type Name Description int index The zero-based index at which item should be inserted. NpgsqlBatchCommand item The object to insert into the IList<T>. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. | Edit this page View Source Insert(int, DbBatchCommand) Inserts the specified index of the DbBatchCommand object with the specified name into the collection at the specified index. Declaration public override void Insert(int index, DbBatchCommand item) Parameters Type Name Description int index The index at which to insert the DbBatchCommand object. DbBatchCommand item The object to insert into the IList<T>. Overrides DbBatchCommandCollection.Insert(int, DbBatchCommand) | Edit this page View Source Remove(NpgsqlBatchCommand) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(NpgsqlBatchCommand item) Parameters Type Name Description NpgsqlBatchCommand item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Remove(DbBatchCommand) Removes the specified DbBatchCommand object from the collection. Declaration public override bool Remove(DbBatchCommand item) Parameters Type Name Description DbBatchCommand item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed; otherwise, false. This method also returns false if item was not found in the DbBatchCommandCollection. Overrides DbBatchCommandCollection.Remove(DbBatchCommand) | Edit this page View Source RemoveAt(int) Removes the DbBatchCommand object at the specified from the collection. Declaration public override void RemoveAt(int index) Parameters Type Name Description int index The index where the DbBatchCommand object is located. Overrides DbBatchCommandCollection.RemoveAt(int) | Edit this page View Source SetBatchCommand(int, DbBatchCommand) Sets the DbBatchCommand object at the specified index to a new value. Declaration protected override void SetBatchCommand(int index, DbBatchCommand batchCommand) Parameters Type Name Description int index The index where the DbBatchCommand object is located. DbBatchCommand batchCommand Overrides DbBatchCommandCollection.SetBatchCommand(int, DbBatchCommand) Implements IList<T> ICollection<T> IEnumerable<T> IList<T> ICollection<T> IEnumerable<T> IEnumerable"
  },
  "doc/api/Npgsql.NpgsqlBinaryExporter.html": {
    "href": "doc/api/Npgsql.NpgsqlBinaryExporter.html",
    "title": "Class NpgsqlBinaryExporter | Npgsql Documentation",
    "keywords": "Class NpgsqlBinaryExporter Provides an API for a binary COPY TO operation, a high-performance data export mechanism from a PostgreSQL table. Initiated by BeginBinaryExport(string) Inheritance object NpgsqlBinaryExporter Implements IDisposable IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlBinaryExporter : IDisposable, IAsyncDisposable Properties | Edit this page View Source IsNull Returns whether the current column is null. Declaration public bool IsNull { get; } Property Value Type Description bool | Edit this page View Source Timeout Current timeout Declaration public TimeSpan Timeout { set; } Property Value Type Description TimeSpan Methods | Edit this page View Source Cancel() Cancels an ongoing export. Declaration public void Cancel() | Edit this page View Source CancelAsync() Async cancels an ongoing export. Declaration public Task CancelAsync() Returns Type Description Task | Edit this page View Source Dispose() Completes that binary export and sets the connection back to idle state Declaration public void Dispose() | Edit this page View Source DisposeAsync() Async completes that binary export and sets the connection back to idle state Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask | Edit this page View Source ReadAsync<T>(NpgsqlDbType, CancellationToken) Reads the current column, returns its value according to type and moves ahead to the next column. If the column is null an exception is thrown. Declaration public ValueTask<T> ReadAsync<T>(NpgsqlDbType type, CancellationToken cancellationToken = default) Parameters Type Name Description NpgsqlDbType type In some cases T isn't enough to infer the data type coming in from the database. This parameter can be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which type must be specified as Jsonb. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description ValueTask<T> The value of the column Type Parameters Name Description T The .NET type of the column to be read. | Edit this page View Source ReadAsync<T>(CancellationToken) Reads the current column, returns its value and moves ahead to the next column. If the column is null an exception is thrown. Declaration public ValueTask<T> ReadAsync<T>(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask<T> The value of the column Type Parameters Name Description T The type of the column to be read. This must correspond to the actual type or data corruption will occur. If in doubt, use Read<T>(NpgsqlDbType) to manually specify the type. | Edit this page View Source Read<T>() Reads the current column, returns its value and moves ahead to the next column. If the column is null an exception is thrown. Declaration public T Read<T>() Returns Type Description T The value of the column Type Parameters Name Description T The type of the column to be read. This must correspond to the actual type or data corruption will occur. If in doubt, use Read<T>(NpgsqlDbType) to manually specify the type. | Edit this page View Source Read<T>(NpgsqlDbType) Reads the current column, returns its value according to type and moves ahead to the next column. If the column is null an exception is thrown. Declaration public T Read<T>(NpgsqlDbType type) Parameters Type Name Description NpgsqlDbType type In some cases T isn't enough to infer the data type coming in from the database. This parameter can be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which type must be specified as Jsonb. Returns Type Description T The value of the column Type Parameters Name Description T The .NET type of the column to be read. | Edit this page View Source Skip() Skips the current column without interpreting its value. Declaration public void Skip() | Edit this page View Source SkipAsync(CancellationToken) Skips the current column without interpreting its value. Declaration public Task SkipAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Edit this page View Source StartRow() Starts reading a single row, must be invoked before reading any columns. Declaration public int StartRow() Returns Type Description int The number of columns in the row. -1 if there are no further rows. Note: This will currently be the same value for all rows, but this may change in the future. | Edit this page View Source StartRowAsync(CancellationToken) Starts reading a single row, must be invoked before reading any columns. Declaration public ValueTask<int> StartRowAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask<int> The number of columns in the row. -1 if there are no further rows. Note: This will currently be the same value for all rows, but this may change in the future. Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlBinaryImporter.html": {
    "href": "doc/api/Npgsql.NpgsqlBinaryImporter.html",
    "title": "Class NpgsqlBinaryImporter | Npgsql Documentation",
    "keywords": "Class NpgsqlBinaryImporter Provides an API for a binary COPY FROM operation, a high-performance data import mechanism to a PostgreSQL table. Initiated by BeginBinaryImport(string) Inheritance object NpgsqlBinaryImporter Implements IDisposable IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlBinaryImporter : IDisposable, IAsyncDisposable Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. Properties | Edit this page View Source Timeout Current timeout Declaration public TimeSpan Timeout { set; } Property Value Type Description TimeSpan Methods | Edit this page View Source Close() Terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed. Note that if Complete() hasn't been invoked before calling this, the import will be cancelled and all changes will be reverted. Declaration public void Close() | Edit this page View Source CloseAsync(CancellationToken) Async terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed. Note that if CompleteAsync(CancellationToken) hasn't been invoked before calling this, the import will be cancelled and all changes will be reverted. Declaration public ValueTask CloseAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask | Edit this page View Source Complete() Completes the import operation. The writer is unusable after this operation. Declaration public ulong Complete() Returns Type Description ulong | Edit this page View Source CompleteAsync(CancellationToken) Completes the import operation. The writer is unusable after this operation. Declaration public ValueTask<ulong> CompleteAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask<ulong> | Edit this page View Source Dispose() Terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed. Note that if Complete() hasn't been invoked before calling this, the import will be cancelled and all changes will be reverted. Declaration public void Dispose() | Edit this page View Source DisposeAsync() Async terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed. Note that if CompleteAsync(CancellationToken) hasn't been invoked before calling this, the import will be cancelled and all changes will be reverted. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask | Edit this page View Source StartRow() Starts writing a single row, must be invoked before writing any columns. Declaration public void StartRow() | Edit this page View Source StartRowAsync(CancellationToken) Starts writing a single row, must be invoked before writing any columns. Declaration public Task StartRowAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Edit this page View Source WriteAsync<T>(T, NpgsqlDbType, CancellationToken) Writes a single column in the current row as type npgsqlDbType. Declaration public Task WriteAsync<T>(T value, NpgsqlDbType npgsqlDbType, CancellationToken cancellationToken = default) Parameters Type Name Description T value The value to be written NpgsqlDbType npgsqlDbType In some cases T isn't enough to infer the data type to be written to the database. This parameter can be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which npgsqlDbType must be specified as Jsonb. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Type Parameters Name Description T The .NET type of the column to be written. | Edit this page View Source WriteAsync<T>(T, string, CancellationToken) Writes a single column in the current row as type dataTypeName. Declaration public Task WriteAsync<T>(T value, string dataTypeName, CancellationToken cancellationToken = default) Parameters Type Name Description T value The value to be written string dataTypeName In some cases T isn't enough to infer the data type to be written to the database. This parameter and be used to unambiguously specify the type. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Type Parameters Name Description T The .NET type of the column to be written. | Edit this page View Source WriteAsync<T>(T, CancellationToken) Writes a single column in the current row. Declaration public Task WriteAsync<T>(T value, CancellationToken cancellationToken = default) Parameters Type Name Description T value The value to be written CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Type Parameters Name Description T The type of the column to be written. This must correspond to the actual type or data corruption will occur. If in doubt, use Write<T>(T, NpgsqlDbType) to manually specify the type. | Edit this page View Source WriteNull() Writes a single null column value. Declaration public void WriteNull() | Edit this page View Source WriteNullAsync(CancellationToken) Writes a single null column value. Declaration public Task WriteNullAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Edit this page View Source WriteRow(params object?[]) Writes an entire row of columns. Equivalent to calling StartRow(), followed by multiple Write<T>(T) on each value. Declaration public void WriteRow(params object?[] values) Parameters Type Name Description object[] values An array of column values to be written as a single row | Edit this page View Source WriteRowAsync(CancellationToken, params object?[]) Writes an entire row of columns. Equivalent to calling StartRow(), followed by multiple Write<T>(T) on each value. Declaration public Task WriteRowAsync(CancellationToken cancellationToken = default, params object?[] values) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. object[] values An array of column values to be written as a single row Returns Type Description Task | Edit this page View Source Write<T>(T) Writes a single column in the current row. Declaration public void Write<T>(T value) Parameters Type Name Description T value The value to be written Type Parameters Name Description T The type of the column to be written. This must correspond to the actual type or data corruption will occur. If in doubt, use Write<T>(T, NpgsqlDbType) to manually specify the type. | Edit this page View Source Write<T>(T, NpgsqlDbType) Writes a single column in the current row as type npgsqlDbType. Declaration public void Write<T>(T value, NpgsqlDbType npgsqlDbType) Parameters Type Name Description T value The value to be written NpgsqlDbType npgsqlDbType In some cases T isn't enough to infer the data type to be written to the database. This parameter can be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which npgsqlDbType must be specified as Jsonb. Type Parameters Name Description T The .NET type of the column to be written. | Edit this page View Source Write<T>(T, string) Writes a single column in the current row as type dataTypeName. Declaration public void Write<T>(T value, string dataTypeName) Parameters Type Name Description T value The value to be written string dataTypeName In some cases T isn't enough to infer the data type to be written to the database. This parameter and be used to unambiguously specify the type. Type Parameters Name Description T The .NET type of the column to be written. Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlCommand.html": {
    "href": "doc/api/Npgsql.NpgsqlCommand.html",
    "title": "Class NpgsqlCommand | Npgsql Documentation",
    "keywords": "Class NpgsqlCommand Represents a SQL statement or function (stored procedure) to execute against a PostgreSQL database. This class cannot be inherited. Inheritance object MarshalByRefObject Component DbCommand NpgsqlCommand Implements IDbCommand IAsyncDisposable ICloneable IComponent IDisposable Inherited Members DbCommand.DisposeAsync() DbCommand.ExecuteNonQueryAsync() DbCommand.ExecuteReader() DbCommand.ExecuteReaderAsync() DbCommand.ExecuteReaderAsync(CommandBehavior) DbCommand.ExecuteScalarAsync() Component.Dispose() Component.GetService(Type) Component.ToString() Component.CanRaiseEvents Component.Container Component.DesignMode Component.Events Component.Site Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql Assembly: Npgsql.dll Syntax public class NpgsqlCommand : DbCommand, IDbCommand, IAsyncDisposable, ICloneable, IComponent, IDisposable Constructors | Edit this page View Source NpgsqlCommand() Initializes a new instance of the NpgsqlCommand class. Declaration public NpgsqlCommand() | Edit this page View Source NpgsqlCommand(string?) Initializes a new instance of the NpgsqlCommand class with the text of the query. Declaration public NpgsqlCommand(string? cmdText) Parameters Type Name Description string cmdText The text of the query. | Edit this page View Source NpgsqlCommand(string?, NpgsqlConnection?) Initializes a new instance of the NpgsqlCommand class with the text of the query and a NpgsqlConnection. Declaration public NpgsqlCommand(string? cmdText, NpgsqlConnection? connection) Parameters Type Name Description string cmdText The text of the query. NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. | Edit this page View Source NpgsqlCommand(string?, NpgsqlConnection?, NpgsqlTransaction?) Initializes a new instance of the NpgsqlCommand class with the text of the query, a NpgsqlConnection, and the NpgsqlTransaction. Declaration public NpgsqlCommand(string? cmdText, NpgsqlConnection? connection, NpgsqlTransaction? transaction) Parameters Type Name Description string cmdText The text of the query. NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. NpgsqlTransaction transaction The NpgsqlTransaction in which the NpgsqlCommand executes. Properties | Edit this page View Source AllResultTypesAreUnknown Marks all of the query's result columns as either known or unknown. Unknown result columns are requested from PostgreSQL in text format, and Npgsql makes no attempt to parse them. They will be accessible as strings only. Declaration public bool AllResultTypesAreUnknown { get; set; } Property Value Type Description bool | Edit this page View Source CommandText Gets or sets the SQL statement or function (stored procedure) to execute at the data source. Declaration public override string CommandText { get; set; } Property Value Type Description string The SQL statement or function (stored procedure) to execute. The default is an empty string. Overrides DbCommand.CommandText | Edit this page View Source CommandTimeout Gets or sets the wait time (in seconds) before terminating the attempt to execute a command and generating an error. Declaration public override int CommandTimeout { get; set; } Property Value Type Description int The time (in seconds) to wait for the command to execute. The default value is 30 seconds. Overrides DbCommand.CommandTimeout | Edit this page View Source CommandType Gets or sets a value indicating how the CommandText property is to be interpreted. Declaration public override CommandType CommandType { get; set; } Property Value Type Description CommandType One of the CommandType values. The default is Text. Overrides DbCommand.CommandType | Edit this page View Source Connection Gets or sets the NpgsqlConnection used by this instance of the NpgsqlCommand. Declaration public NpgsqlConnection? Connection { get; set; } Property Value Type Description NpgsqlConnection The connection to a data source. The default value is null. | Edit this page View Source DbConnection DB connection. Declaration protected override DbConnection? DbConnection { get; set; } Property Value Type Description DbConnection Overrides DbCommand.DbConnection | Edit this page View Source DbParameterCollection DB parameter collection. Declaration protected override DbParameterCollection DbParameterCollection { get; } Property Value Type Description DbParameterCollection Overrides DbCommand.DbParameterCollection | Edit this page View Source DbTransaction DB transaction. Declaration protected override DbTransaction? DbTransaction { get; set; } Property Value Type Description DbTransaction Overrides DbCommand.DbTransaction | Edit this page View Source DesignTimeVisible Design time visible. Declaration public override bool DesignTimeVisible { get; set; } Property Value Type Description bool Overrides DbCommand.DesignTimeVisible | Edit this page View Source IsPrepared Returns whether this query will execute as a prepared (compiled) query. Declaration public bool IsPrepared { get; } Property Value Type Description bool | Edit this page View Source Parameters Gets the NpgsqlParameterCollection. Declaration public NpgsqlParameterCollection Parameters { get; } Property Value Type Description NpgsqlParameterCollection The parameters of the SQL statement or function (stored procedure). The default is an empty collection. | Edit this page View Source Statements Returns details about each statement that this command has executed. Is only populated when an Execute* method is called. Declaration [Obsolete(\"Use the new DbBatch API\")] public IReadOnlyList<NpgsqlBatchCommand> Statements { get; } Property Value Type Description IReadOnlyList<NpgsqlBatchCommand> | Edit this page View Source Transaction This property is ignored by Npgsql. PostgreSQL only supports a single transaction at a given time on a given connection, and all commands implicitly run inside the current transaction started via BeginTransaction() Declaration public NpgsqlTransaction? Transaction { get; set; } Property Value Type Description NpgsqlTransaction | Edit this page View Source UnknownResultTypeList Marks the query's result columns as known or unknown, on a column-by-column basis. Unknown result columns are requested from PostgreSQL in text format, and Npgsql makes no attempt to parse them. They will be accessible as strings only. Declaration public bool[]? UnknownResultTypeList { get; set; } Property Value Type Description bool[] Remarks If the query includes several queries (e.g. SELECT 1; SELECT 2), this will only apply to the first one. The rest of the queries will be fetched and parsed as usual. The array size must correspond exactly to the number of result columns the query returns, or an error will be raised. | Edit this page View Source UpdatedRowSource Gets or sets how command results are applied to the DataRow when used by the DbDataAdapter.Update(DataSet) method. Declaration public override UpdateRowSource UpdatedRowSource { get; set; } Property Value Type Description UpdateRowSource One of the UpdateRowSource values. Overrides DbCommand.UpdatedRowSource Methods | Edit this page View Source Cancel() Attempts to cancel the execution of an NpgsqlCommand. Declaration public override void Cancel() Overrides DbCommand.Cancel() Remarks As per the specs, no exception will be thrown by this method in case of failure. | Edit this page View Source Clone() Create a new command based on this one. Declaration public virtual NpgsqlCommand Clone() Returns Type Description NpgsqlCommand A new NpgsqlCommand object. | Edit this page View Source CreateDbParameter() Creates a new instance of an DbParameter object. Declaration protected override DbParameter CreateDbParameter() Returns Type Description DbParameter A DbParameter object. Overrides DbCommand.CreateDbParameter() | Edit this page View Source CreateParameter() Creates a new instance of a NpgsqlParameter object. Declaration public NpgsqlParameter CreateParameter() Returns Type Description NpgsqlParameter An NpgsqlParameter object. | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Component and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Component.Dispose(bool) | Edit this page View Source ExecuteDbDataReader(CommandBehavior) Executes the command text against the connection. Declaration protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) Parameters Type Name Description CommandBehavior behavior Returns Type Description DbDataReader A task representing the operation. Overrides DbCommand.ExecuteDbDataReader(CommandBehavior) | Edit this page View Source ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) Executes the command text against the connection. Declaration protected override Task<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken) Parameters Type Name Description CommandBehavior behavior An instance of CommandBehavior. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<DbDataReader> A task representing the asynchronous operation. Overrides DbCommand.ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) | Edit this page View Source ExecuteNonQuery() Executes a SQL statement against the connection and returns the number of rows affected. Declaration public override int ExecuteNonQuery() Returns Type Description int The number of rows affected if known; -1 otherwise. Overrides DbCommand.ExecuteNonQuery() | Edit this page View Source ExecuteNonQueryAsync(CancellationToken) Asynchronous version of ExecuteNonQuery() Declaration public override Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<int> A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. Overrides DbCommand.ExecuteNonQueryAsync(CancellationToken) | Edit this page View Source ExecuteReader(CommandBehavior) Executes the CommandText against the Connection and returns a NpgsqlDataReader. Declaration public NpgsqlDataReader ExecuteReader(CommandBehavior behavior = CommandBehavior.Default) Parameters Type Name Description CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description NpgsqlDataReader A task representing the operation. | Edit this page View Source ExecuteReaderAsync(CommandBehavior, CancellationToken) An asynchronous version of ExecuteReader(CommandBehavior), which executes the CommandText against the Connection and returns a NpgsqlDataReader. Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken = default) Parameters Type Name Description CommandBehavior behavior One of the enumeration values that specifies the command behavior. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<NpgsqlDataReader> A task representing the asynchronous operation. | Edit this page View Source ExecuteReaderAsync(CancellationToken) An asynchronous version of ExecuteReader(CommandBehavior), which executes the CommandText against the Connection and returns a NpgsqlDataReader. Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<NpgsqlDataReader> A task representing the asynchronous operation. | Edit this page View Source ExecuteScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored. Declaration public override object? ExecuteScalar() Returns Type Description object The first column of the first row in the result set, or a null reference if the result set is empty. Overrides DbCommand.ExecuteScalar() | Edit this page View Source ExecuteScalarAsync(CancellationToken) Asynchronous version of ExecuteScalar() Declaration public override Task<object?> ExecuteScalarAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<object> A task representing the asynchronous operation, with the first column of the first row in the result set, or a null reference if the result set is empty. Overrides DbCommand.ExecuteScalarAsync(CancellationToken) | Edit this page View Source Prepare() Creates a server-side prepared statement on the PostgreSQL server. This will make repeated future executions of this command much faster. Declaration public override void Prepare() Overrides DbCommand.Prepare() | Edit this page View Source PrepareAsync(CancellationToken) Creates a server-side prepared statement on the PostgreSQL server. This will make repeated future executions of this command much faster. Declaration public override Task PrepareAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Overrides DbCommand.PrepareAsync(CancellationToken) | Edit this page View Source Unprepare() Unprepares a command, closing server-side statements associated with it. Note that this only affects commands explicitly prepared with Prepare(), not automatically prepared statements. Declaration public void Unprepare() | Edit this page View Source UnprepareAsync(CancellationToken) Unprepares a command, closing server-side statements associated with it. Note that this only affects commands explicitly prepared with Prepare(), not automatically prepared statements. Declaration public Task UnprepareAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Implements IDbCommand IAsyncDisposable ICloneable IComponent IDisposable"
  },
  "doc/api/Npgsql.NpgsqlCommandBuilder.html": {
    "href": "doc/api/Npgsql.NpgsqlCommandBuilder.html",
    "title": "Class NpgsqlCommandBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlCommandBuilder This class creates database commands for automatic insert, update and delete operations. Inheritance object MarshalByRefObject Component DbCommandBuilder NpgsqlCommandBuilder Implements IComponent IDisposable Inherited Members DbCommandBuilder.RefreshSchema() DbCommandBuilder.CatalogLocation DbCommandBuilder.CatalogSeparator DbCommandBuilder.ConflictOption DbCommandBuilder.DataAdapter DbCommandBuilder.SchemaSeparator DbCommandBuilder.SetAllValues Component.Dispose() Component.ToString() Component.Container Component.Site Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlCommandBuilder : DbCommandBuilder, IComponent, IDisposable Constructors | Edit this page View Source NpgsqlCommandBuilder() Initializes a new instance of the NpgsqlCommandBuilder class. Declaration public NpgsqlCommandBuilder() | Edit this page View Source NpgsqlCommandBuilder(NpgsqlDataAdapter?) Initializes a new instance of the NpgsqlCommandBuilder class. Declaration public NpgsqlCommandBuilder(NpgsqlDataAdapter? adapter) Parameters Type Name Description NpgsqlDataAdapter adapter The adapter. Properties | Edit this page View Source QuotePrefix Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens. Declaration public override string QuotePrefix { get; set; } Property Value Type Description string The beginning character or characters to use. The default is an empty string. Overrides DbCommandBuilder.QuotePrefix | Edit this page View Source QuoteSuffix Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens. Declaration public override string QuoteSuffix { get; set; } Property Value Type Description string The ending character or characters to use. The default is an empty string. Overrides DbCommandBuilder.QuoteSuffix Methods | Edit this page View Source ApplyParameterInfo(DbParameter, DataRow, StatementType, bool) Applies the parameter information. Declaration protected override void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause) Parameters Type Name Description DbParameter p The parameter. DataRow row The row. StatementType statementType Type of the statement. bool whereClause If set to true [where clause]. Overrides DbCommandBuilder.ApplyParameterInfo(DbParameter, DataRow, StatementType, bool) | Edit this page View Source DeriveParameters(NpgsqlCommand) This method is responsible to derive the command parameter list with values obtained from function definition. It clears the Parameters collection of command. Also, if there is any parameter type which is not supported by Npgsql, an InvalidOperationException will be thrown. Parameters name will be parameter1, parameter2, ... for CommandType.StoredProcedure and named after the placeholder for CommandType.Text Declaration public static void DeriveParameters(NpgsqlCommand command) Parameters Type Name Description NpgsqlCommand command NpgsqlCommand whose function parameters will be obtained. | Edit this page View Source GetDeleteCommand() Gets the automatically generated System.Data.Common.DbCommand object required to perform deletions at the data source. Declaration public NpgsqlCommand GetDeleteCommand() Returns Type Description NpgsqlCommand The automatically generated System.Data.Common.DbCommand object required to perform deletions. | Edit this page View Source GetDeleteCommand(bool) Gets the automatically generated NpgsqlCommand object required to perform deletions at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetDeleteCommand(bool useColumnsForParameterNames) Parameters Type Name Description bool useColumnsForParameterNames If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform deletions. | Edit this page View Source GetInsertCommand() Gets the automatically generated NpgsqlCommand object required to perform insertions at the data source. Declaration public NpgsqlCommand GetInsertCommand() Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform insertions. | Edit this page View Source GetInsertCommand(bool) Gets the automatically generated NpgsqlCommand object required to perform insertions at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetInsertCommand(bool useColumnsForParameterNames) Parameters Type Name Description bool useColumnsForParameterNames If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform insertions. | Edit this page View Source GetParameterName(int) Returns the name of the specified parameter in the format of @p#. Declaration protected override string GetParameterName(int parameterOrdinal) Parameters Type Name Description int parameterOrdinal The number to be included as part of the parameter's name.. Returns Type Description string The name of the parameter with the specified number appended as part of the parameter name. Overrides DbCommandBuilder.GetParameterName(int) | Edit this page View Source GetParameterName(string) Returns the full parameter name, given the partial parameter name. Declaration protected override string GetParameterName(string parameterName) Parameters Type Name Description string parameterName The partial name of the parameter. Returns Type Description string The full parameter name corresponding to the partial parameter name requested. Overrides DbCommandBuilder.GetParameterName(string) | Edit this page View Source GetParameterPlaceholder(int) Returns the placeholder for the parameter in the associated SQL statement. Declaration protected override string GetParameterPlaceholder(int parameterOrdinal) Parameters Type Name Description int parameterOrdinal The number to be included as part of the parameter's name. Returns Type Description string The name of the parameter with the specified number appended. Overrides DbCommandBuilder.GetParameterPlaceholder(int) | Edit this page View Source GetUpdateCommand() Gets the automatically generated System.Data.Common.DbCommand object required to perform updates at the data source. Declaration public NpgsqlCommand GetUpdateCommand() Returns Type Description NpgsqlCommand The automatically generated System.Data.Common.DbCommand object required to perform updates. | Edit this page View Source GetUpdateCommand(bool) Gets the automatically generated NpgsqlCommand object required to perform updates at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetUpdateCommand(bool useColumnsForParameterNames) Parameters Type Name Description bool useColumnsForParameterNames If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform updates. | Edit this page View Source QuoteIdentifier(string) Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier. Declaration public override string QuoteIdentifier(string unquotedIdentifier) Parameters Type Name Description string unquotedIdentifier The original unquoted identifier. Returns Type Description string The quoted version of the identifier. Embedded quotes within the identifier are properly escaped. Overrides DbCommandBuilder.QuoteIdentifier(string) Exceptions Type Condition ArgumentNullException Unquoted identifier parameter cannot be null | Edit this page View Source SetRowUpdatingHandler(DbDataAdapter) Registers the NpgsqlCommandBuilder to handle the RowUpdating event for a NpgsqlDataAdapter. Declaration protected override void SetRowUpdatingHandler(DbDataAdapter adapter) Parameters Type Name Description DbDataAdapter adapter The DbDataAdapter to be used for the update. Overrides DbCommandBuilder.SetRowUpdatingHandler(DbDataAdapter) | Edit this page View Source UnquoteIdentifier(string) Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier. Declaration public override string UnquoteIdentifier(string quotedIdentifier) Parameters Type Name Description string quotedIdentifier The identifier that will have its embedded quotes removed. Returns Type Description string The unquoted identifier, with embedded quotes properly un-escaped. Overrides DbCommandBuilder.UnquoteIdentifier(string) Exceptions Type Condition ArgumentNullException Quoted identifier parameter cannot be null Implements IComponent IDisposable"
  },
  "doc/api/Npgsql.NpgsqlConnection.html": {
    "href": "doc/api/Npgsql.NpgsqlConnection.html",
    "title": "Class NpgsqlConnection | Npgsql Documentation",
    "keywords": "Class NpgsqlConnection This class represents a connection to a PostgreSQL server. Inheritance object MarshalByRefObject Component DbConnection NpgsqlConnection Implements IDbConnection IAsyncDisposable ICloneable IComponent IDisposable Inherited Members DbConnection.ChangeDatabaseAsync(string, CancellationToken) DbConnection.OpenAsync() DbConnection.StateChange Component.Dispose() Component.ToString() Component.Container Component.Site Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlConnection : DbConnection, IDbConnection, IAsyncDisposable, ICloneable, IComponent, IDisposable Constructors | Edit this page View Source NpgsqlConnection() Initializes a new instance of the NpgsqlConnection class. Declaration public NpgsqlConnection() | Edit this page View Source NpgsqlConnection(string?) Initializes a new instance of NpgsqlConnection with the given connection string. Declaration public NpgsqlConnection(string? connectionString) Parameters Type Name Description string connectionString The connection used to open the PostgreSQL database. Fields | Edit this page View Source DefaultPort The default TCP/IP port for PostgreSQL. Declaration public const int DefaultPort = 5432 Field Value Type Description int Properties | Edit this page View Source CanCreateBatch Gets a value that indicates whether this DbConnection instance supports the DbBatch class. Declaration public override bool CanCreateBatch { get; } Property Value Type Description bool true if this instance supports the DbBatch class; otherwise, false. The default is false. Overrides DbConnection.CanCreateBatch | Edit this page View Source CommandTimeout Gets the time (in seconds) to wait while trying to execute a command before terminating the attempt and generating an error. Declaration public int CommandTimeout { get; } Property Value Type Description int The time (in seconds) to wait for a command to complete. The default value is 30 seconds. | Edit this page View Source ConnectionString Gets or sets the string used to connect to a PostgreSQL database. See the manual for details. Declaration public override string ConnectionString { get; set; } Property Value Type Description string The connection string that includes the server name, the database name, and other parameters needed to establish the initial connection. The default value is an empty string. Overrides DbConnection.ConnectionString | Edit this page View Source ConnectionTimeout Gets the time (in seconds) to wait while trying to establish a connection before terminating the attempt and generating an error. Declaration public override int ConnectionTimeout { get; } Property Value Type Description int The time (in seconds) to wait for a connection to open. The default value is 15 seconds. Overrides DbConnection.ConnectionTimeout | Edit this page View Source DataSource Gets the string identifying the database server (host and port) Declaration public override string DataSource { get; } Property Value Type Description string The name of the database server (host and port). If the connection uses a Unix-domain socket, the path to that socket is returned. The default value is the empty string. Overrides DbConnection.DataSource | Edit this page View Source Database Gets the name of the current database or the database to be used after a connection is opened. Declaration public override string Database { get; } Property Value Type Description string The name of the current database or the name of the database to be used after a connection is opened. The default value is the empty string. Overrides DbConnection.Database | Edit this page View Source DbProviderFactory DB provider factory. Declaration protected override DbProviderFactory DbProviderFactory { get; } Property Value Type Description DbProviderFactory Overrides DbConnection.DbProviderFactory | Edit this page View Source FullState Gets the current state of the connection. Declaration [Browsable(false)] public ConnectionState FullState { get; } Property Value Type Description ConnectionState A bitwise combination of the ConnectionState values. The default is Closed. | Edit this page View Source GlobalTypeMapper The global type mapper, which contains defaults used by all new connections. Modify mappings on this mapper to affect your entire application. Declaration [Obsolete(\"Global-level type mapping has been replaced with data source mapping, see the 7.0 release notes.\")] public static INpgsqlTypeMapper GlobalTypeMapper { get; } Property Value Type Description INpgsqlTypeMapper | Edit this page View Source HasIntegerDateTimes Reports whether the backend uses the newer integer timestamp representation. Note that the old floating point representation is not supported. Meant for use by type plugins (e.g. NodaTime) Declaration [Browsable(false)] public bool HasIntegerDateTimes { get; } Property Value Type Description bool | Edit this page View Source Host Backend server host name. Declaration [Browsable(true)] public string? Host { get; } Property Value Type Description string | Edit this page View Source Port Backend server port. Declaration [Browsable(true)] public int Port { get; } Property Value Type Description int | Edit this page View Source PostgreSqlVersion The version of the PostgreSQL server we're connected to. This can only be called when the connection is open. In case of a development or pre-release version this field will contain the version of the next version to be released from this branch. Declaration [Browsable(false)] public Version PostgreSqlVersion { get; } Property Value Type Description Version | Edit this page View Source PostgresParameters Holds all PostgreSQL parameters received for this connection. Is updated if the values change (e.g. as a result of a SET command). Declaration [Browsable(false)] public IReadOnlyDictionary<string, string> PostgresParameters { get; } Property Value Type Description IReadOnlyDictionary<string, string> | Edit this page View Source ProcessID Process id of backend server. This can only be called when there is an active connection. Declaration [Browsable(false)] public int ProcessID { get; } Property Value Type Description int | Edit this page View Source ProvideClientCertificatesCallback Selects the local Secure Sockets Layer (SSL) certificate used for authentication. Declaration public ProvideClientCertificatesCallback? ProvideClientCertificatesCallback { get; set; } Property Value Type Description ProvideClientCertificatesCallback Remarks See https://msdn.microsoft.com/en-us/library/system.net.security.localcertificateselectioncallback(v=vs.110).aspx | Edit this page View Source ProvidePasswordCallback Gets or sets the delegate used to generate a password for new database connections. Declaration [Obsolete(\"Use NpgsqlDataSourceBuilder.UsePeriodicPasswordProvider or inject passwords directly into NpgsqlDataSource.Password\")] public ProvidePasswordCallback? ProvidePasswordCallback { get; set; } Property Value Type Description ProvidePasswordCallback Remarks This delegate is executed when a new database connection is opened that requires a password. The Password and Passfile connection string properties have precedence over this delegate: it will not be executed if a password is specified, or if the specified or default Passfile contains a valid entry. Due to connection pooling this delegate is only executed when a new physical connection is opened, not when reusing a connection that was previously opened from the pool. | Edit this page View Source ServerVersion The PostgreSQL server version as returned by the server_version option. This can only be called when the connection is open. Declaration public override string ServerVersion { get; } Property Value Type Description string Overrides DbConnection.ServerVersion | Edit this page View Source State Gets whether the current state of the connection is Open or Closed Declaration [Browsable(false)] public override ConnectionState State { get; } Property Value Type Description ConnectionState ConnectionState.Open, ConnectionState.Closed or ConnectionState.Connecting Overrides DbConnection.State | Edit this page View Source Timezone The connection's timezone as reported by PostgreSQL, in the IANA/Olson database format. Declaration [Browsable(false)] public string Timezone { get; } Property Value Type Description string | Edit this page View Source TypeMapper Connection-level type mapping is no longer supported. See the 7.0 release notes for configuring type mapping on NpgsqlDataSource. Declaration [Obsolete(\"Connection-level type mapping is no longer supported. See the 7.0 release notes for configuring type mapping on NpgsqlDataSource.\", true)] public INpgsqlTypeMapper TypeMapper { get; } Property Value Type Description INpgsqlTypeMapper | Edit this page View Source UserCertificateValidationCallback When using SSL/TLS, this is a callback that allows customizing how the PostgreSQL-provided certificate is verified. This is an advanced API, consider using VerifyFull or VerifyCA instead. Declaration public RemoteCertificateValidationCallback? UserCertificateValidationCallback { get; set; } Property Value Type Description RemoteCertificateValidationCallback Remarks Cannot be used in conjunction with Disable, VerifyCA and VerifyFull. See https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx. | Edit this page View Source UserName User name. Declaration public string? UserName { get; } Property Value Type Description string Methods | Edit this page View Source BeginBinaryExport(string) Begins a binary COPY TO STDOUT operation, a high-performance data export mechanism from a PostgreSQL table. Declaration public NpgsqlBinaryExporter BeginBinaryExport(string copyToCommand) Parameters Type Name Description string copyToCommand A COPY TO STDOUT SQL command Returns Type Description NpgsqlBinaryExporter A NpgsqlBinaryExporter which can be used to read rows and columns Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginBinaryExportAsync(string, CancellationToken) Begins a binary COPY TO STDOUT operation, a high-performance data export mechanism from a PostgreSQL table. Declaration public Task<NpgsqlBinaryExporter> BeginBinaryExportAsync(string copyToCommand, CancellationToken cancellationToken = default) Parameters Type Name Description string copyToCommand A COPY TO STDOUT SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<NpgsqlBinaryExporter> A NpgsqlBinaryExporter which can be used to read rows and columns Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginBinaryImport(string) Begins a binary COPY FROM STDIN operation, a high-performance data import mechanism to a PostgreSQL table. Declaration public NpgsqlBinaryImporter BeginBinaryImport(string copyFromCommand) Parameters Type Name Description string copyFromCommand A COPY FROM STDIN SQL command Returns Type Description NpgsqlBinaryImporter A NpgsqlBinaryImporter which can be used to write rows and columns Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginBinaryImportAsync(string, CancellationToken) Begins a binary COPY FROM STDIN operation, a high-performance data import mechanism to a PostgreSQL table. Declaration public Task<NpgsqlBinaryImporter> BeginBinaryImportAsync(string copyFromCommand, CancellationToken cancellationToken = default) Parameters Type Name Description string copyFromCommand A COPY FROM STDIN SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<NpgsqlBinaryImporter> A NpgsqlBinaryImporter which can be used to write rows and columns Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginDbTransaction(IsolationLevel) Begins a database transaction with the specified isolation level. Declaration protected override DbTransaction BeginDbTransaction(IsolationLevel isolationLevel) Parameters Type Name Description IsolationLevel isolationLevel The isolation level under which the transaction should run. Returns Type Description DbTransaction A DbTransaction object representing the new transaction. Overrides DbConnection.BeginDbTransaction(IsolationLevel) Remarks Nested transactions are not supported. | Edit this page View Source BeginDbTransactionAsync(IsolationLevel, CancellationToken) Asynchronously begins a database transaction. Declaration protected override ValueTask<DbTransaction> BeginDbTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken) Parameters Type Name Description IsolationLevel isolationLevel The isolation level under which the transaction should run. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description ValueTask<DbTransaction> A task whose Result property is an object representing the new transaction. Overrides DbConnection.BeginDbTransactionAsync(IsolationLevel, CancellationToken) Remarks Nested transactions are not supported. | Edit this page View Source BeginRawBinaryCopy(string) Begins a raw binary COPY operation (TO STDOUT or FROM STDIN), a high-performance data export/import mechanism to a PostgreSQL table. Note that unlike the other COPY API methods, BeginRawBinaryCopy(string) doesn't implement any encoding/decoding and is unsuitable for structured import/export operation. It is useful mainly for exporting a table as an opaque blob, for the purpose of importing it back later. Declaration public NpgsqlRawCopyStream BeginRawBinaryCopy(string copyCommand) Parameters Type Name Description string copyCommand A COPY TO STDOUT or COPY FROM STDIN SQL command Returns Type Description NpgsqlRawCopyStream A NpgsqlRawCopyStream that can be used to read or write raw binary data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginRawBinaryCopyAsync(string, CancellationToken) Begins a raw binary COPY operation (TO STDOUT or FROM STDIN), a high-performance data export/import mechanism to a PostgreSQL table. Note that unlike the other COPY API methods, BeginRawBinaryCopyAsync(string, CancellationToken) doesn't implement any encoding/decoding and is unsuitable for structured import/export operation. It is useful mainly for exporting a table as an opaque blob, for the purpose of importing it back later. Declaration public Task<NpgsqlRawCopyStream> BeginRawBinaryCopyAsync(string copyCommand, CancellationToken cancellationToken = default) Parameters Type Name Description string copyCommand A COPY TO STDOUT or COPY FROM STDIN SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<NpgsqlRawCopyStream> A NpgsqlRawCopyStream that can be used to read or write raw binary data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginTextExport(string) Begins a textual COPY TO STDOUT operation, a data export mechanism from a PostgreSQL table. It is the user's responsibility to parse the textual input according to the format specified in copyToCommand. Declaration public TextReader BeginTextExport(string copyToCommand) Parameters Type Name Description string copyToCommand A COPY TO STDOUT SQL command Returns Type Description TextReader A TextReader that can be used to read textual data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginTextExportAsync(string, CancellationToken) Begins a textual COPY TO STDOUT operation, a data export mechanism from a PostgreSQL table. It is the user's responsibility to parse the textual input according to the format specified in copyToCommand. Declaration public Task<TextReader> BeginTextExportAsync(string copyToCommand, CancellationToken cancellationToken = default) Parameters Type Name Description string copyToCommand A COPY TO STDOUT SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<TextReader> A TextReader that can be used to read textual data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginTextImport(string) Begins a textual COPY FROM STDIN operation, a data import mechanism to a PostgreSQL table. It is the user's responsibility to send the textual input according to the format specified in copyFromCommand. Declaration public TextWriter BeginTextImport(string copyFromCommand) Parameters Type Name Description string copyFromCommand A COPY FROM STDIN SQL command Returns Type Description TextWriter A TextWriter that can be used to send textual data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginTextImportAsync(string, CancellationToken) Begins a textual COPY FROM STDIN operation, a data import mechanism to a PostgreSQL table. It is the user's responsibility to send the textual input according to the format specified in copyFromCommand. Declaration public Task<TextWriter> BeginTextImportAsync(string copyFromCommand, CancellationToken cancellationToken = default) Parameters Type Name Description string copyFromCommand A COPY FROM STDIN SQL command CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<TextWriter> A TextWriter that can be used to send textual data. Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. | Edit this page View Source BeginTransaction() Begins a database transaction. Declaration public NpgsqlTransaction BeginTransaction() Returns Type Description NpgsqlTransaction A NpgsqlTransaction object representing the new transaction. Remarks Nested transactions are not supported. Transactions created by this method will have the ReadCommitted isolation level. | Edit this page View Source BeginTransaction(IsolationLevel) Begins a database transaction with the specified isolation level. Declaration public NpgsqlTransaction BeginTransaction(IsolationLevel level) Parameters Type Name Description IsolationLevel level The isolation level under which the transaction should run. Returns Type Description NpgsqlTransaction A NpgsqlTransaction object representing the new transaction. Remarks Nested transactions are not supported. | Edit this page View Source BeginTransactionAsync(IsolationLevel, CancellationToken) Asynchronously begins a database transaction. Declaration public ValueTask<NpgsqlTransaction> BeginTransactionAsync(IsolationLevel level, CancellationToken cancellationToken = default) Parameters Type Name Description IsolationLevel level The isolation level under which the transaction should run. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description ValueTask<NpgsqlTransaction> A task whose Result property is an object representing the new transaction. Remarks Nested transactions are not supported. | Edit this page View Source BeginTransactionAsync(CancellationToken) Asynchronously begins a database transaction. Declaration public ValueTask<NpgsqlTransaction> BeginTransactionAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description ValueTask<NpgsqlTransaction> A task whose Result property is an object representing the new transaction. Remarks Nested transactions are not supported. Transactions created by this method will have the ReadCommitted isolation level. | Edit this page View Source ChangeDatabase(string) This method changes the current database by disconnecting from the actual database and connecting to the specified. Declaration public override void ChangeDatabase(string dbName) Parameters Type Name Description string dbName The name of the database to use in place of the current database. Overrides DbConnection.ChangeDatabase(string) | Edit this page View Source ClearAllPools() Clear all connection pools. All idle physical connections in all pools are immediately closed, and any busy connections which were opened before ClearAllPools() was called will be closed when returned to their pool. Declaration public static void ClearAllPools() | Edit this page View Source ClearPool(NpgsqlConnection) Clears the connection pool. All idle physical connections in the pool of the given connection are immediately closed, and any busy connections which were opened before ClearPool(NpgsqlConnection) was called will be closed when returned to the pool. Declaration public static void ClearPool(NpgsqlConnection connection) Parameters Type Name Description NpgsqlConnection connection | Edit this page View Source CloneWith(string) Clones this connection, replacing its connection string with the given one. This allows creating a new connection with the same security information (password, SSL callbacks) while changing other connection parameters (e.g. database or pooling) Declaration public NpgsqlConnection CloneWith(string connectionString) Parameters Type Name Description string connectionString Returns Type Description NpgsqlConnection | Edit this page View Source Close() Releases the connection. If the connection is pooled, it will be returned to the pool and made available for re-use. If it is non-pooled, the physical connection will be closed. Declaration public override void Close() Overrides DbConnection.Close() | Edit this page View Source CloseAsync() Releases the connection. If the connection is pooled, it will be returned to the pool and made available for re-use. If it is non-pooled, the physical connection will be closed. Declaration public override Task CloseAsync() Returns Type Description Task Overrides DbConnection.CloseAsync() | Edit this page View Source CreateBatch() Returns a new instance of the provider's class that implements the DbBatch class. Declaration public NpgsqlBatch CreateBatch() Returns Type Description NpgsqlBatch A new instance of DbBatch. | Edit this page View Source CreateCommand() Creates and returns a NpgsqlCommand object associated with the NpgsqlConnection. Declaration public NpgsqlCommand CreateCommand() Returns Type Description NpgsqlCommand A NpgsqlCommand object. | Edit this page View Source CreateDbBatch() When overridden in a derived class, returns a new instance of the provider's class that implements the DbBatch class. Declaration protected override DbBatch CreateDbBatch() Returns Type Description DbBatch A new instance of DbBatch. Overrides DbConnection.CreateDbBatch() | Edit this page View Source CreateDbCommand() Creates and returns a DbCommand object associated with the DbConnection. Declaration protected override DbCommand CreateDbCommand() Returns Type Description DbCommand A DbCommand object. Overrides DbConnection.CreateDbCommand() | Edit this page View Source Dispose(bool) Releases all resources used by the NpgsqlConnection. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true when called from Dispose(bool); false when being called from the finalizer. Overrides Component.Dispose(bool) | Edit this page View Source DisposeAsync() Releases all resources used by the NpgsqlConnection. Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask Overrides DbConnection.DisposeAsync() | Edit this page View Source EnlistTransaction(Transaction?) Enlist transaction. Declaration public override void EnlistTransaction(Transaction? transaction) Parameters Type Name Description Transaction transaction Overrides DbConnection.EnlistTransaction(Transaction) | Edit this page View Source GetSchema() Returns the supported collections Declaration public override DataTable GetSchema() Returns Type Description DataTable Overrides DbConnection.GetSchema() | Edit this page View Source GetSchema(string?) Returns the schema collection specified by the collection name. Declaration public override DataTable GetSchema(string? collectionName) Parameters Type Name Description string collectionName The collection name. Returns Type Description DataTable The collection specified. Overrides DbConnection.GetSchema(string) | Edit this page View Source GetSchema(string?, string?[]?) Returns the schema collection specified by the collection name filtered by the restrictions. Declaration public override DataTable GetSchema(string? collectionName, string?[]? restrictions) Parameters Type Name Description string collectionName The collection name. string[] restrictions The restriction values to filter the results. A description of the restrictions is contained in the Restrictions collection. Returns Type Description DataTable The collection specified. Overrides DbConnection.GetSchema(string, string[]) | Edit this page View Source GetSchemaAsync(string, string?[]?, CancellationToken) Asynchronously returns the schema collection specified by the collection name filtered by the restrictions. Declaration public override Task<DataTable> GetSchemaAsync(string collectionName, string?[]? restrictions, CancellationToken cancellationToken = default) Parameters Type Name Description string collectionName The collection name. string[] restrictions The restriction values to filter the results. A description of the restrictions is contained in the Restrictions collection. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<DataTable> The collection specified. Overrides DbConnection.GetSchemaAsync(string, string[], CancellationToken) | Edit this page View Source GetSchemaAsync(string, CancellationToken) Asynchronously returns the schema collection specified by the collection name. Declaration public override Task<DataTable> GetSchemaAsync(string collectionName, CancellationToken cancellationToken = default) Parameters Type Name Description string collectionName The collection name. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<DataTable> The collection specified. Overrides DbConnection.GetSchemaAsync(string, CancellationToken) | Edit this page View Source GetSchemaAsync(CancellationToken) Asynchronously returns the supported collections. Declaration public override Task<DataTable> GetSchemaAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<DataTable> The collection specified. Overrides DbConnection.GetSchemaAsync(CancellationToken) | Edit this page View Source Open() Opens a database connection with the property settings specified by the ConnectionString. Declaration public override void Open() Overrides DbConnection.Open() | Edit this page View Source OpenAsync(CancellationToken) This is the asynchronous version of Open(). Declaration public override Task OpenAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task A task representing the asynchronous operation. Overrides DbConnection.OpenAsync(CancellationToken) Remarks Do not invoke other methods and properties of the NpgsqlConnection object until the returned Task is complete. | Edit this page View Source ReloadTypes() Flushes the type cache for this connection's connection string and reloads the types for this connection only. Type changes will appear for other connections only after they are re-opened from the pool. Declaration public void ReloadTypes() | Edit this page View Source ReloadTypesAsync() Flushes the type cache for this connection's connection string and reloads the types for this connection only. Type changes will appear for other connections only after they are re-opened from the pool. Declaration public Task ReloadTypesAsync() Returns Type Description Task | Edit this page View Source UnprepareAll() Unprepares all prepared statements on this connection. Declaration public void UnprepareAll() | Edit this page View Source Wait() Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events (Notification, Notice). Declaration public void Wait() | Edit this page View Source Wait(int) Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events (Notification, Notice). Declaration public bool Wait(int timeout) Parameters Type Name Description int timeout The time-out value, in milliseconds, passed to ReceiveTimeout. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. Returns Type Description bool true if an asynchronous message was received, false if timed out. | Edit this page View Source Wait(TimeSpan) Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events (Notification, Notice). Declaration public bool Wait(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout The time-out value is passed to ReceiveTimeout. Returns Type Description bool true if an asynchronous message was received, false if timed out. | Edit this page View Source WaitAsync(int, CancellationToken) Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events (Notification, Notice). Declaration public Task<bool> WaitAsync(int timeout, CancellationToken cancellationToken = default) Parameters Type Name Description int timeout The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<bool> true if an asynchronous message was received, false if timed out. | Edit this page View Source WaitAsync(CancellationToken) Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events (Notification, Notice). Declaration public Task WaitAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task | Edit this page View Source WaitAsync(TimeSpan, CancellationToken) Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events (Notification, Notice). Declaration public Task<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout The time-out value as TimeSpan CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<bool> true if an asynchronous message was received, false if timed out. Events | Edit this page View Source Notice Fires when PostgreSQL notices are received from PostgreSQL. Declaration public event NoticeEventHandler? Notice Event Type Type Description NoticeEventHandler Remarks PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator initiates a \"fast\" database shutdown). Note that notices are very different from notifications (see the Notification event). | Edit this page View Source Notification Fires when PostgreSQL notifications are received from PostgreSQL. Declaration public event NotificationEventHandler? Notification Event Type Type Description NotificationEventHandler Remarks PostgreSQL notifications are sent when your connection has registered for notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel. Note that notifications are very different from notices (see the Notice event). Implements IDbConnection IAsyncDisposable ICloneable IComponent IDisposable"
  },
  "doc/api/Npgsql.NpgsqlConnectionStringBuilder.html": {
    "href": "doc/api/Npgsql.NpgsqlConnectionStringBuilder.html",
    "title": "Class NpgsqlConnectionStringBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlConnectionStringBuilder Provides a simple way to create and manage the contents of connection strings used by the NpgsqlConnection class. Inheritance object DbConnectionStringBuilder NpgsqlConnectionStringBuilder Implements IDictionary ICollection ICustomTypeDescriptor IDictionary<string, object> ICollection<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>> IEnumerable Inherited Members DbConnectionStringBuilder.Add(string, object) DbConnectionStringBuilder.AppendKeyValuePair(StringBuilder, string, string) DbConnectionStringBuilder.AppendKeyValuePair(StringBuilder, string, string, bool) DbConnectionStringBuilder.EquivalentTo(DbConnectionStringBuilder) DbConnectionStringBuilder.ShouldSerialize(string) DbConnectionStringBuilder.ToString() DbConnectionStringBuilder.ConnectionString DbConnectionStringBuilder.Count DbConnectionStringBuilder.IsFixedSize DbConnectionStringBuilder.IsReadOnly object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlConnectionStringBuilder : DbConnectionStringBuilder, IDictionary, ICollection, ICustomTypeDescriptor, IDictionary<string, object?>, ICollection<KeyValuePair<string, object?>>, IEnumerable<KeyValuePair<string, object?>>, IEnumerable Constructors | Edit this page View Source NpgsqlConnectionStringBuilder() Initializes a new instance of the NpgsqlConnectionStringBuilder class. Declaration public NpgsqlConnectionStringBuilder() | Edit this page View Source NpgsqlConnectionStringBuilder(bool) Initializes a new instance of the NpgsqlConnectionStringBuilder class, optionally using ODBC rules for quoting values. Declaration public NpgsqlConnectionStringBuilder(bool useOdbcRules) Parameters Type Name Description bool useOdbcRules true to use {} to delimit fields; false to use quotation marks. | Edit this page View Source NpgsqlConnectionStringBuilder(string?) Initializes a new instance of the NpgsqlConnectionStringBuilder class and sets its ConnectionString. Declaration public NpgsqlConnectionStringBuilder(string? connectionString) Parameters Type Name Description string connectionString Properties | Edit this page View Source ApplicationName The optional application name parameter to be sent to the backend during connection initiation. Declaration public string? ApplicationName { get; set; } Property Value Type Description string | Edit this page View Source ArrayNullabilityMode Configure the way arrays of value types are returned when requested as object instances. Declaration public ArrayNullabilityMode ArrayNullabilityMode { get; set; } Property Value Type Description ArrayNullabilityMode | Edit this page View Source AutoPrepareMinUsages The minimum number of usages an SQL statement is used before it's automatically prepared. Defaults to 5. Declaration public int AutoPrepareMinUsages { get; set; } Property Value Type Description int | Edit this page View Source CancellationTimeout The time to wait (in milliseconds) while trying to read a response for a cancellation request for a timed out or cancelled query, before terminating the attempt and generating an error. Zero for infinity, -1 to skip the wait. Defaults to 2000 milliseconds. Declaration public int CancellationTimeout { get; set; } Property Value Type Description int | Edit this page View Source ChannelBinding Controls whether channel binding is required, disabled or preferred, depending on server support. Declaration public ChannelBinding ChannelBinding { get; set; } Property Value Type Description ChannelBinding | Edit this page View Source CheckCertificateRevocation Whether to check the certificate revocation list during authentication. False by default. Declaration public bool CheckCertificateRevocation { get; set; } Property Value Type Description bool | Edit this page View Source ClientEncoding Gets or sets the client_encoding parameter. Declaration public string? ClientEncoding { get; set; } Property Value Type Description string | Edit this page View Source CommandTimeout The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Defaults to 30 seconds. Declaration public int CommandTimeout { get; set; } Property Value Type Description int | Edit this page View Source ConnectionIdleLifetime The time to wait before closing idle connections in the pool if the count of all connections exceeds MinPoolSize. Declaration public int ConnectionIdleLifetime { get; set; } Property Value Type Description int The time (in seconds) to wait. The default value is 300. | Edit this page View Source ConnectionLifetime The total maximum lifetime of connections (in seconds). Connections which have exceeded this value will be destroyed instead of returned from the pool. This is useful in clustered configurations to force load balancing between a running server and a server just brought online. Declaration public int ConnectionLifetime { get; set; } Property Value Type Description int The time (in seconds) to wait, or 0 to to make connections last indefinitely (the default). | Edit this page View Source ConnectionPruningInterval How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime (ConnectionIdleLifetime. Declaration public int ConnectionPruningInterval { get; set; } Property Value Type Description int The interval (in seconds). The default value is 10. | Edit this page View Source Database The PostgreSQL database to connect to. Declaration public string? Database { get; set; } Property Value Type Description string | Edit this page View Source Encoding Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data. Declaration public string Encoding { get; set; } Property Value Type Description string | Edit this page View Source Enlist Whether to enlist in an ambient TransactionScope. Declaration public bool Enlist { get; set; } Property Value Type Description bool | Edit this page View Source Host The hostname or IP address of the PostgreSQL server to connect to. Declaration public string? Host { get; set; } Property Value Type Description string | Edit this page View Source HostRecheckSeconds Controls for how long the host's cached state will be considered as valid. Declaration public int HostRecheckSeconds { get; set; } Property Value Type Description int | Edit this page View Source IncludeErrorDetail When enabled, PostgreSQL error details are included on Detail and Detail. These can contain sensitive data. Declaration public bool IncludeErrorDetail { get; set; } Property Value Type Description bool | Edit this page View Source IncludeRealm The Kerberos realm to be used for authentication. Declaration public bool IncludeRealm { get; set; } Property Value Type Description bool | Edit this page View Source InternalCommandTimeout The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. Declaration [Obsolete(\"The InternalCommandTimeout parameter is no longer needed and does nothing.\")] public int InternalCommandTimeout { get; set; } Property Value Type Description int | Edit this page View Source this[string] Gets or sets the value associated with the specified key. Declaration public override object this[string keyword] { get; set; } Parameters Type Name Description string keyword The key of the item to get or set. Property Value Type Description object The value associated with the specified key. Overrides DbConnectionStringBuilder.this[string] | Edit this page View Source KeepAlive The number of seconds of connection inactivity before Npgsql sends a keepalive query. Set to 0 (the default) to disable. Declaration public int KeepAlive { get; set; } Property Value Type Description int | Edit this page View Source KerberosServiceName The Kerberos service name to be used for authentication. Declaration public string KerberosServiceName { get; set; } Property Value Type Description string | Edit this page View Source Keys Gets an ICollection containing the keys of the NpgsqlConnectionStringBuilder. Declaration public ICollection<string> Keys { get; } Property Value Type Description ICollection<string> | Edit this page View Source LoadBalanceHosts Enables balancing between multiple hosts by round-robin. Declaration public bool LoadBalanceHosts { get; set; } Property Value Type Description bool | Edit this page View Source LoadTableComposites Load table composite type definitions, and not just free-standing composite types. Declaration public bool LoadTableComposites { get; set; } Property Value Type Description bool | Edit this page View Source LogParameters When enabled, parameter values are logged when commands are executed. Defaults to false. Declaration public bool LogParameters { get; set; } Property Value Type Description bool | Edit this page View Source MaxAutoPrepare The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero (the default) disables automatic preparation. Declaration public int MaxAutoPrepare { get; set; } Property Value Type Description int | Edit this page View Source MaxPoolSize The maximum connection pool size. Declaration public int MaxPoolSize { get; set; } Property Value Type Description int | Edit this page View Source MinPoolSize The minimum connection pool size. Declaration public int MinPoolSize { get; set; } Property Value Type Description int | Edit this page View Source Multiplexing Enables multiplexing, which allows more efficient use of connections. Declaration public bool Multiplexing { get; set; } Property Value Type Description bool | Edit this page View Source NoResetOnClose If set to true, a pool connection's state won't be reset when it is closed (improves performance). Do not specify this unless you know what you're doing. Declaration public bool NoResetOnClose { get; set; } Property Value Type Description bool | Edit this page View Source Options Set PostgreSQL configuration parameter default values for the connection. Declaration public string? Options { get; set; } Property Value Type Description string | Edit this page View Source Passfile Path to a PostgreSQL password file (PGPASSFILE), from which the password would be taken. Declaration public string? Passfile { get; set; } Property Value Type Description string | Edit this page View Source Password The password to connect with. Declaration public string? Password { get; set; } Property Value Type Description string | Edit this page View Source PersistSecurityInfo Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Declaration public bool PersistSecurityInfo { get; set; } Property Value Type Description bool | Edit this page View Source Pooling Whether connection pooling should be used. Declaration public bool Pooling { get; set; } Property Value Type Description bool | Edit this page View Source Port The TCP/IP port of the PostgreSQL server. Declaration public int Port { get; set; } Property Value Type Description int | Edit this page View Source ReadBufferSize Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database. Declaration public int ReadBufferSize { get; set; } Property Value Type Description int | Edit this page View Source RootCertificate Location of a CA certificate used to validate the server certificate. Declaration public string? RootCertificate { get; set; } Property Value Type Description string | Edit this page View Source SearchPath Gets or sets the schema search path. Declaration public string? SearchPath { get; set; } Property Value Type Description string | Edit this page View Source ServerCompatibilityMode A compatibility mode for special PostgreSQL server types. Declaration public ServerCompatibilityMode ServerCompatibilityMode { get; set; } Property Value Type Description ServerCompatibilityMode | Edit this page View Source SocketReceiveBufferSize Determines the size of socket read buffer. Declaration public int SocketReceiveBufferSize { get; set; } Property Value Type Description int | Edit this page View Source SocketSendBufferSize Determines the size of socket send buffer. Declaration public int SocketSendBufferSize { get; set; } Property Value Type Description int | Edit this page View Source SslCertificate Location of a client certificate to be sent to the server. Declaration public string? SslCertificate { get; set; } Property Value Type Description string | Edit this page View Source SslKey Location of a client key for a client certificate to be sent to the server. Declaration public string? SslKey { get; set; } Property Value Type Description string | Edit this page View Source SslMode Controls whether SSL is required, disabled or preferred, depending on server support. Declaration public SslMode SslMode { get; set; } Property Value Type Description SslMode | Edit this page View Source SslPassword Password for a key for a client certificate. Declaration public string? SslPassword { get; set; } Property Value Type Description string | Edit this page View Source TargetSessionAttributes Determines the preferred PostgreSQL target server type. Declaration public string? TargetSessionAttributes { get; set; } Property Value Type Description string | Edit this page View Source TcpKeepAlive Whether to use TCP keepalive with system defaults if overrides isn't specified. Declaration public bool TcpKeepAlive { get; set; } Property Value Type Description bool | Edit this page View Source TcpKeepAliveInterval The interval, in seconds, between when successive keep-alive packets are sent if no acknowledgement is received. Defaults to the value of TcpKeepAliveTime. TcpKeepAliveTime must be non-zero as well. Declaration public int TcpKeepAliveInterval { get; set; } Property Value Type Description int | Edit this page View Source TcpKeepAliveTime The number of seconds of connection inactivity before a TCP keepalive query is sent. Use of this option is discouraged, use KeepAlive instead if possible. Set to 0 (the default) to disable. Declaration public int TcpKeepAliveTime { get; set; } Property Value Type Description int | Edit this page View Source Timeout The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. Defaults to 15 seconds. Declaration public int Timeout { get; set; } Property Value Type Description int | Edit this page View Source Timezone Gets or sets the PostgreSQL session timezone, in Olson/IANA database format. Declaration public string? Timezone { get; set; } Property Value Type Description string | Edit this page View Source TrustServerCertificate Whether to trust the server certificate without validating it. Declaration [Obsolete(\"The TrustServerCertificate parameter is no longer needed and does nothing.\")] public bool TrustServerCertificate { get; set; } Property Value Type Description bool | Edit this page View Source Username The username to connect with. Declaration public string? Username { get; set; } Property Value Type Description string | Edit this page View Source Values Gets an ICollection containing the values in the NpgsqlConnectionStringBuilder. Declaration public ICollection<object?> Values { get; } Property Value Type Description ICollection<object> | Edit this page View Source WriteBufferSize Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database. Declaration public int WriteBufferSize { get; set; } Property Value Type Description int | Edit this page View Source WriteCoalescingBufferThresholdBytes When multiplexing is enabled, determines the maximum number of outgoing bytes to buffer before flushing to the network. Declaration public int WriteCoalescingBufferThresholdBytes { get; set; } Property Value Type Description int Methods | Edit this page View Source Add(KeyValuePair<string, object?>) Adds an item to the NpgsqlConnectionStringBuilder. Declaration public void Add(KeyValuePair<string, object?> item) Parameters Type Name Description KeyValuePair<string, object> item The key-value pair to be added. | Edit this page View Source Clear() Clears the contents of the NpgsqlConnectionStringBuilder instance. Declaration public override void Clear() Overrides DbConnectionStringBuilder.Clear() | Edit this page View Source Contains(KeyValuePair<string, object?>) Determines whether the NpgsqlConnectionStringBuilder contains a specific key-value pair. Declaration public bool Contains(KeyValuePair<string, object?> item) Parameters Type Name Description KeyValuePair<string, object> item The item to locate in the NpgsqlConnectionStringBuilder. Returns Type Description bool true if the NpgsqlConnectionStringBuilder contains the entry; otherwise false. | Edit this page View Source ContainsKey(string) Determines whether the NpgsqlConnectionStringBuilder contains a specific key. Declaration public override bool ContainsKey(string keyword) Parameters Type Name Description string keyword The key to locate in the NpgsqlConnectionStringBuilder. Returns Type Description bool true if the NpgsqlConnectionStringBuilder contains an entry with the specified key; otherwise false. Overrides DbConnectionStringBuilder.ContainsKey(string) | Edit this page View Source CopyTo(KeyValuePair<string, object?>[], int) Copies the elements of the NpgsqlConnectionStringBuilder to an Array, starting at a particular Array index. Declaration public void CopyTo(KeyValuePair<string, object?>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<string, object>[] array The one-dimensional Array that is the destination of the elements copied from NpgsqlConnectionStringBuilder. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the NpgsqlConnectionStringBuilder. Declaration public IEnumerator<KeyValuePair<string, object?>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<string, object>> | Edit this page View Source GetHashCode() Hash function. Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source GetProperties(Hashtable) Fills a supplied Hashtable with information about all the properties of this DbConnectionStringBuilder. Declaration protected override void GetProperties(Hashtable propertyDescriptors) Parameters Type Name Description Hashtable propertyDescriptors The Hashtable to be filled with information about this DbConnectionStringBuilder. Overrides DbConnectionStringBuilder.GetProperties(Hashtable) | Edit this page View Source Remove(KeyValuePair<string, object?>) Removes the entry from the DbConnectionStringBuilder instance. Declaration public bool Remove(KeyValuePair<string, object?> item) Parameters Type Name Description KeyValuePair<string, object> item The key/value pair to be removed from the connection string in this DbConnectionStringBuilder. Returns Type Description bool true if the key existed within the connection string and was removed; false if the key did not exist. | Edit this page View Source Remove(string) Removes the entry with the specified key from the DbConnectionStringBuilder instance. Declaration public override bool Remove(string keyword) Parameters Type Name Description string keyword The key of the key/value pair to be removed from the connection string in this DbConnectionStringBuilder. Returns Type Description bool true if the key existed within the connection string and was removed; false if the key did not exist. Overrides DbConnectionStringBuilder.Remove(string) | Edit this page View Source TryGetValue(string, out object?) Retrieves a value corresponding to the supplied key from this NpgsqlConnectionStringBuilder. Declaration public override bool TryGetValue(string keyword, out object? value) Parameters Type Name Description string keyword The key of the item to retrieve. object value The value corresponding to the key. Returns Type Description bool true if keyword was found within the connection string, false otherwise. Overrides DbConnectionStringBuilder.TryGetValue(string, out object) Implements IDictionary ICollection ICustomTypeDescriptor IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable"
  },
  "doc/api/Npgsql.NpgsqlCopyTextReader.html": {
    "href": "doc/api/Npgsql.NpgsqlCopyTextReader.html",
    "title": "Class NpgsqlCopyTextReader | Npgsql Documentation",
    "keywords": "Class NpgsqlCopyTextReader Reader for a text export, initiated by BeginTextExport(string). Inheritance object MarshalByRefObject TextReader StreamReader NpgsqlCopyTextReader Implements IDisposable IAsyncDisposable Inherited Members StreamReader.Null StreamReader.Close() StreamReader.DiscardBufferedData() StreamReader.Peek() StreamReader.Read() StreamReader.Read(char[], int, int) StreamReader.Read(Span<char>) StreamReader.ReadAsync(char[], int, int) StreamReader.ReadAsync(Memory<char>, CancellationToken) StreamReader.ReadBlock(char[], int, int) StreamReader.ReadBlock(Span<char>) StreamReader.ReadBlockAsync(char[], int, int) StreamReader.ReadBlockAsync(Memory<char>, CancellationToken) StreamReader.ReadLine() StreamReader.ReadLineAsync() StreamReader.ReadLineAsync(CancellationToken) StreamReader.ReadToEnd() StreamReader.ReadToEndAsync() StreamReader.ReadToEndAsync(CancellationToken) StreamReader.BaseStream StreamReader.CurrentEncoding StreamReader.EndOfStream TextReader.Dispose() TextReader.Synchronized(TextReader) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlCopyTextReader : StreamReader, IDisposable, IAsyncDisposable Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. Methods | Edit this page View Source Cancel() Cancels and terminates an ongoing export. Declaration public void Cancel() | Edit this page View Source CancelAsync() Asynchronously cancels and terminates an ongoing export. Declaration public Task CancelAsync() Returns Type Description Task | Edit this page View Source DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlCopyTextWriter.html": {
    "href": "doc/api/Npgsql.NpgsqlCopyTextWriter.html",
    "title": "Class NpgsqlCopyTextWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlCopyTextWriter Writer for a text import, initiated by BeginTextImport(string). Inheritance object MarshalByRefObject TextWriter StreamWriter NpgsqlCopyTextWriter Implements IDisposable IAsyncDisposable Inherited Members StreamWriter.Null StreamWriter.Close() StreamWriter.DisposeAsync() StreamWriter.Flush() StreamWriter.FlushAsync() StreamWriter.FlushAsync(CancellationToken) StreamWriter.Write(char) StreamWriter.Write(char[]) StreamWriter.Write(char[], int, int) StreamWriter.Write(ReadOnlySpan<char>) StreamWriter.Write(string) StreamWriter.Write(string, object) StreamWriter.Write(string, object, object) StreamWriter.Write(string, object, object, object) StreamWriter.Write(string, params object[]) StreamWriter.WriteAsync(char) StreamWriter.WriteAsync(char[], int, int) StreamWriter.WriteAsync(ReadOnlyMemory<char>, CancellationToken) StreamWriter.WriteAsync(string) StreamWriter.WriteLine(ReadOnlySpan<char>) StreamWriter.WriteLine(string) StreamWriter.WriteLine(string, object) StreamWriter.WriteLine(string, object, object) StreamWriter.WriteLine(string, object, object, object) StreamWriter.WriteLine(string, params object[]) StreamWriter.WriteLineAsync() StreamWriter.WriteLineAsync(char) StreamWriter.WriteLineAsync(char[], int, int) StreamWriter.WriteLineAsync(ReadOnlyMemory<char>, CancellationToken) StreamWriter.WriteLineAsync(string) StreamWriter.AutoFlush StreamWriter.BaseStream StreamWriter.Encoding TextWriter.Dispose() TextWriter.Synchronized(TextWriter) TextWriter.Write(bool) TextWriter.Write(decimal) TextWriter.Write(double) TextWriter.Write(int) TextWriter.Write(long) TextWriter.Write(object) TextWriter.Write(float) TextWriter.Write(StringBuilder) TextWriter.Write(uint) TextWriter.Write(ulong) TextWriter.WriteAsync(char[]) TextWriter.WriteAsync(StringBuilder, CancellationToken) TextWriter.WriteLine() TextWriter.WriteLine(bool) TextWriter.WriteLine(char) TextWriter.WriteLine(char[]) TextWriter.WriteLine(char[], int, int) TextWriter.WriteLine(decimal) TextWriter.WriteLine(double) TextWriter.WriteLine(int) TextWriter.WriteLine(long) TextWriter.WriteLine(object) TextWriter.WriteLine(float) TextWriter.WriteLine(StringBuilder) TextWriter.WriteLine(uint) TextWriter.WriteLine(ulong) TextWriter.WriteLineAsync(char[]) TextWriter.WriteLineAsync(StringBuilder, CancellationToken) TextWriter.FormatProvider TextWriter.NewLine MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlCopyTextWriter : StreamWriter, IDisposable, IAsyncDisposable Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. Methods | Edit this page View Source Cancel() Cancels and terminates an ongoing import. Any data already written will be discarded. Declaration public void Cancel() | Edit this page View Source CancelAsync() Cancels and terminates an ongoing import. Any data already written will be discarded. Declaration public Task CancelAsync() Returns Type Description Task Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlDataAdapter.html": {
    "href": "doc/api/Npgsql.NpgsqlDataAdapter.html",
    "title": "Class NpgsqlDataAdapter | Npgsql Documentation",
    "keywords": "Class NpgsqlDataAdapter This class represents an adapter from many commands: select, update, insert and delete to fill a DataSet. Inheritance object MarshalByRefObject Component DataAdapter DbDataAdapter NpgsqlDataAdapter Implements IComponent IDisposable IDbDataAdapter IDataAdapter ICloneable Inherited Members DbDataAdapter.DefaultSourceTableName DbDataAdapter.Fill(DataSet) DbDataAdapter.Fill(DataSet, int, int, string) DbDataAdapter.Fill(DataSet, string) DbDataAdapter.Fill(DataTable) DbDataAdapter.Fill(int, int, params DataTable[]) DbDataAdapter.FillSchema(DataSet, SchemaType) DbDataAdapter.FillSchema(DataSet, SchemaType, string) DbDataAdapter.FillSchema(DataTable, SchemaType) DbDataAdapter.GetFillParameters() DbDataAdapter.Update(DataRow[]) DbDataAdapter.Update(DataSet) DbDataAdapter.Update(DataSet, string) DbDataAdapter.Update(DataTable) DbDataAdapter.UpdateBatchSize DataAdapter.AcceptChangesDuringFill DataAdapter.AcceptChangesDuringUpdate DataAdapter.ContinueUpdateOnError DataAdapter.FillLoadOption DataAdapter.MissingMappingAction DataAdapter.MissingSchemaAction DataAdapter.ReturnProviderSpecificTypes DataAdapter.TableMappings DataAdapter.FillError Component.Dispose() Component.ToString() Component.Container Component.Site Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlDataAdapter : DbDataAdapter, IComponent, IDisposable, IDbDataAdapter, IDataAdapter, ICloneable Constructors | Edit this page View Source NpgsqlDataAdapter() Default constructor. Declaration public NpgsqlDataAdapter() | Edit this page View Source NpgsqlDataAdapter(NpgsqlCommand) Constructor. Declaration public NpgsqlDataAdapter(NpgsqlCommand selectCommand) Parameters Type Name Description NpgsqlCommand selectCommand | Edit this page View Source NpgsqlDataAdapter(string, NpgsqlConnection) Constructor. Declaration public NpgsqlDataAdapter(string selectCommandText, NpgsqlConnection selectConnection) Parameters Type Name Description string selectCommandText NpgsqlConnection selectConnection | Edit this page View Source NpgsqlDataAdapter(string, string) Constructor. Declaration public NpgsqlDataAdapter(string selectCommandText, string selectConnectionString) Parameters Type Name Description string selectCommandText string selectConnectionString Properties | Edit this page View Source DeleteCommand Delete command. Declaration public NpgsqlCommand? DeleteCommand { get; set; } Property Value Type Description NpgsqlCommand | Edit this page View Source InsertCommand Insert command. Declaration public NpgsqlCommand? InsertCommand { get; set; } Property Value Type Description NpgsqlCommand | Edit this page View Source SelectCommand Select command. Declaration public NpgsqlCommand? SelectCommand { get; set; } Property Value Type Description NpgsqlCommand | Edit this page View Source UpdateCommand Update command. Declaration public NpgsqlCommand? UpdateCommand { get; set; } Property Value Type Description NpgsqlCommand Methods | Edit this page View Source CreateRowUpdatedEvent(DataRow, IDbCommand?, StatementType, DataTableMapping) Create row updated event. Declaration protected override RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand? command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description DataRow dataRow IDbCommand command StatementType statementType DataTableMapping tableMapping Returns Type Description RowUpdatedEventArgs Overrides DbDataAdapter.CreateRowUpdatedEvent(DataRow, IDbCommand, StatementType, DataTableMapping) | Edit this page View Source CreateRowUpdatingEvent(DataRow, IDbCommand?, StatementType, DataTableMapping) Create row updating event. Declaration protected override RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand? command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description DataRow dataRow IDbCommand command StatementType statementType DataTableMapping tableMapping Returns Type Description RowUpdatingEventArgs Overrides DbDataAdapter.CreateRowUpdatingEvent(DataRow, IDbCommand, StatementType, DataTableMapping) | Edit this page View Source OnRowUpdated(RowUpdatedEventArgs) Raise the RowUpdated event. Declaration protected override void OnRowUpdated(RowUpdatedEventArgs value) Parameters Type Name Description RowUpdatedEventArgs value Overrides DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs) | Edit this page View Source OnRowUpdating(RowUpdatingEventArgs) Raise the RowUpdating event. Declaration protected override void OnRowUpdating(RowUpdatingEventArgs value) Parameters Type Name Description RowUpdatingEventArgs value Overrides DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs) Events | Edit this page View Source RowUpdated Row updated event. Declaration public event NpgsqlRowUpdatedEventHandler? RowUpdated Event Type Type Description NpgsqlRowUpdatedEventHandler | Edit this page View Source RowUpdating Row updating event. Declaration public event NpgsqlRowUpdatingEventHandler? RowUpdating Event Type Type Description NpgsqlRowUpdatingEventHandler Implements IComponent IDisposable IDbDataAdapter IDataAdapter ICloneable"
  },
  "doc/api/Npgsql.NpgsqlDataReader.html": {
    "href": "doc/api/Npgsql.NpgsqlDataReader.html",
    "title": "Class NpgsqlDataReader | Npgsql Documentation",
    "keywords": "Class NpgsqlDataReader Reads a forward-only stream of rows from a data source. Inheritance object MarshalByRefObject DbDataReader NpgsqlDataReader Implements IEnumerable IDataReader IDataRecord IDisposable IAsyncDisposable IDbColumnSchemaGenerator Inherited Members DbDataReader.GetFieldValueAsync<T>(int) DbDataReader.IsDBNullAsync(int) DbDataReader.NextResultAsync() DbDataReader.ReadAsync() DbDataReader.VisibleFieldCount MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlDataReader : DbDataReader, IEnumerable, IDataReader, IDataRecord, IDisposable, IAsyncDisposable, IDbColumnSchemaGenerator Properties | Edit this page View Source Depth Gets a value indicating the depth of nesting for the current row. Always returns zero. Declaration public override int Depth { get; } Property Value Type Description int Overrides DbDataReader.Depth | Edit this page View Source FieldCount Gets the number of columns in the current row. Declaration public override int FieldCount { get; } Property Value Type Description int Overrides DbDataReader.FieldCount | Edit this page View Source HasRows Gets a value that indicates whether this DbDataReader contains one or more rows. Declaration public override bool HasRows { get; } Property Value Type Description bool Overrides DbDataReader.HasRows | Edit this page View Source IsClosed Gets a value indicating whether the data reader is closed. Declaration public override bool IsClosed { get; } Property Value Type Description bool Overrides DbDataReader.IsClosed | Edit this page View Source IsOnRow Indicates whether the reader is currently positioned on a row, i.e. whether reading a column is possible. This property is different from HasRows in that HasRows will return true even if attempting to read a column will fail, e.g. before Read() has been called Declaration public bool IsOnRow { get; } Property Value Type Description bool | Edit this page View Source this[int] Gets the value of the specified column as an instance of object. Declaration public override object this[int ordinal] { get; } Parameters Type Name Description int ordinal The zero-based column ordinal. Property Value Type Description object The value of the specified column. Overrides DbDataReader.this[int] | Edit this page View Source this[string] Gets the value of the specified column as an instance of object. Declaration public override object this[string name] { get; } Parameters Type Name Description string name The name of the column. Property Value Type Description object The value of the specified column. Overrides DbDataReader.this[string] | Edit this page View Source RecordsAffected Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. Declaration public override int RecordsAffected { get; } Property Value Type Description int The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed. Overrides DbDataReader.RecordsAffected | Edit this page View Source Rows Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. Declaration public ulong Rows { get; } Property Value Type Description ulong The number of rows changed, inserted, or deleted. 0 for SELECT statements, if no rows were affected or the statement failed. | Edit this page View Source Statements Returns details about each statement that this reader will or has executed. Declaration [Obsolete(\"Use the new DbBatch API\")] public IReadOnlyList<NpgsqlBatchCommand> Statements { get; } Property Value Type Description IReadOnlyList<NpgsqlBatchCommand> Remarks Note that some fields (i.e. rows and oid) are only populated as the reader traverses the result. For commands with multiple queries, this exposes the number of rows affected on a statement-by-statement basis, unlike RecordsAffected which exposes an aggregation across all statements. Methods | Edit this page View Source Close() Closes the NpgsqlDataReader reader, allowing a new command to be executed. Declaration public override void Close() Overrides DbDataReader.Close() | Edit this page View Source CloseAsync() Closes the NpgsqlDataReader reader, allowing a new command to be executed. Declaration public override Task CloseAsync() Returns Type Description Task Overrides DbDataReader.CloseAsync() | Edit this page View Source Dispose(bool) Releases the resources used by the NpgsqlDataReader. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Overrides DbDataReader.Dispose(bool) | Edit this page View Source DisposeAsync() Releases the resources used by the NpgsqlDataReader. Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask Overrides DbDataReader.DisposeAsync() | Edit this page View Source GetBoolean(int) Gets the value of the specified column as a Boolean. Declaration public override bool GetBoolean(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description bool The value of the specified column. Overrides DbDataReader.GetBoolean(int) | Edit this page View Source GetByte(int) Gets the value of the specified column as a byte. Declaration public override byte GetByte(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description byte The value of the specified column. Overrides DbDataReader.GetByte(int) | Edit this page View Source GetBytes(int, long, byte[]?, int, int) Reads a stream of bytes from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) Parameters Type Name Description int ordinal The zero-based column ordinal. long dataOffset The index within the row from which to begin the read operation. byte[] buffer The buffer into which to copy the data. int bufferOffset The index with the buffer to which the data will be copied. int length The maximum number of characters to read. Returns Type Description long The actual number of bytes read. Overrides DbDataReader.GetBytes(int, long, byte[], int, int) | Edit this page View Source GetChar(int) Gets the value of the specified column as a single character. Declaration public override char GetChar(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description char The value of the specified column. Overrides DbDataReader.GetChar(int) | Edit this page View Source GetChars(int, long, char[]?, int, int) Reads a stream of characters from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) Parameters Type Name Description int ordinal The zero-based column ordinal. long dataOffset The index within the row from which to begin the read operation. char[] buffer The buffer into which to copy the data. int bufferOffset The index with the buffer to which the data will be copied. int length The maximum number of characters to read. Returns Type Description long The actual number of characters read. Overrides DbDataReader.GetChars(int, long, char[], int, int) | Edit this page View Source GetColumnSchema() Returns schema information for the columns in the current resultset. Declaration public ReadOnlyCollection<NpgsqlDbColumn> GetColumnSchema() Returns Type Description ReadOnlyCollection<NpgsqlDbColumn> | Edit this page View Source GetColumnSchemaAsync(CancellationToken) Asynchronously returns schema information for the columns in the current resultset. Declaration public Task<ReadOnlyCollection<NpgsqlDbColumn>> GetColumnSchemaAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task<ReadOnlyCollection<NpgsqlDbColumn>> | Edit this page View Source GetData(int) Returns a nested data reader for the requested column. The column type must be a record or a to Npgsql known composite type, or an array thereof. Currently only supported in non-sequential mode. Declaration public NpgsqlNestedDataReader GetData(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description NpgsqlNestedDataReader A data reader. | Edit this page View Source GetDataTypeName(int) Gets the data type information for the specified field. This is the PostgreSQL type name (e.g. double precision), not the .NET type (see GetFieldType(int) for that). Declaration public override string GetDataTypeName(int ordinal) Parameters Type Name Description int ordinal The zero-based column index. Returns Type Description string Overrides DbDataReader.GetDataTypeName(int) | Edit this page View Source GetDataTypeOID(int) Gets the OID for the PostgreSQL type for the specified field, as it appears in the pg_type table. Declaration public uint GetDataTypeOID(int ordinal) Parameters Type Name Description int ordinal The zero-based column index. Returns Type Description uint Remarks This is a PostgreSQL-internal value that should not be relied upon and should only be used for debugging purposes. | Edit this page View Source GetDateTime(int) Gets the value of the specified column as a DateTime object. Declaration public override DateTime GetDateTime(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description DateTime The value of the specified column. Overrides DbDataReader.GetDateTime(int) | Edit this page View Source GetDbDataReader(int) Returns a DbDataReader object for the requested column ordinal that can be overridden with a provider-specific implementation. Declaration protected override DbDataReader GetDbDataReader(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description DbDataReader A DbDataReader object. Overrides DbDataReader.GetDbDataReader(int) | Edit this page View Source GetDecimal(int) Gets the value of the specified column as a decimal object. Declaration public override decimal GetDecimal(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description decimal The value of the specified column. Overrides DbDataReader.GetDecimal(int) | Edit this page View Source GetDouble(int) Gets the value of the specified column as a double-precision floating point number. Declaration public override double GetDouble(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description double The value of the specified column. Overrides DbDataReader.GetDouble(int) | Edit this page View Source GetEnumerator() Returns an IEnumerator that can be used to iterate through the rows in the data reader. Declaration public override IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator that can be used to iterate through the rows in the data reader. Overrides DbDataReader.GetEnumerator() | Edit this page View Source GetFieldType(int) Gets the data type of the specified column. Declaration public override Type GetFieldType(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description Type The data type of the specified column. Overrides DbDataReader.GetFieldType(int) | Edit this page View Source GetFieldValueAsync<T>(int, CancellationToken) Asynchronously gets the value of the specified column as a type. Declaration public override Task<T> GetFieldValueAsync<T>(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description int ordinal The type of the value to be returned. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<T> Type Parameters Name Description T The type of the value to be returned. Overrides DbDataReader.GetFieldValueAsync<T>(int, CancellationToken) | Edit this page View Source GetFieldValue<T>(int) Synchronously gets the value of the specified column as a type. Declaration public override T GetFieldValue<T>(int ordinal) Parameters Type Name Description int ordinal The column to be retrieved. Returns Type Description T The column to be retrieved. Type Parameters Name Description T Synchronously gets the value of the specified column as a type. Overrides DbDataReader.GetFieldValue<T>(int) | Edit this page View Source GetFloat(int) Gets the value of the specified column as a single-precision floating point number. Declaration public override float GetFloat(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description float The value of the specified column. Overrides DbDataReader.GetFloat(int) | Edit this page View Source GetGuid(int) Gets the value of the specified column as a globally-unique identifier (GUID). Declaration public override Guid GetGuid(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description Guid The value of the specified column. Overrides DbDataReader.GetGuid(int) | Edit this page View Source GetInt16(int) Gets the value of the specified column as a 16-bit signed integer. Declaration public override short GetInt16(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description short The value of the specified column. Overrides DbDataReader.GetInt16(int) | Edit this page View Source GetInt32(int) Gets the value of the specified column as a 32-bit signed integer. Declaration public override int GetInt32(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description int The value of the specified column. Overrides DbDataReader.GetInt32(int) | Edit this page View Source GetInt64(int) Gets the value of the specified column as a 64-bit signed integer. Declaration public override long GetInt64(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description long The value of the specified column. Overrides DbDataReader.GetInt64(int) | Edit this page View Source GetName(int) Gets the name of the column, given the zero-based column ordinal. Declaration public override string GetName(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description string The name of the specified column. Overrides DbDataReader.GetName(int) | Edit this page View Source GetOrdinal(string) Gets the column ordinal given the name of the column. Declaration public override int GetOrdinal(string name) Parameters Type Name Description string name The name of the column. Returns Type Description int The zero-based column ordinal. Overrides DbDataReader.GetOrdinal(string) | Edit this page View Source GetPostgresType(int) Gets a representation of the PostgreSQL data type for the specified field. The returned representation can be used to access various information about the field. Declaration public PostgresType GetPostgresType(int ordinal) Parameters Type Name Description int ordinal The zero-based column index. Returns Type Description PostgresType | Edit this page View Source GetSchemaTable() Returns a System.Data.DataTable that describes the column metadata of the DataReader. Declaration public override DataTable? GetSchemaTable() Returns Type Description DataTable Overrides DbDataReader.GetSchemaTable() | Edit this page View Source GetSchemaTableAsync(CancellationToken) Asynchronously returns a System.Data.DataTable that describes the column metadata of the DataReader. Declaration public override Task<DataTable?> GetSchemaTableAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task<DataTable> Overrides DbDataReader.GetSchemaTableAsync(CancellationToken) | Edit this page View Source GetStream(int) Retrieves data as a Stream. Declaration public override Stream GetStream(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description Stream The returned object. Overrides DbDataReader.GetStream(int) | Edit this page View Source GetStreamAsync(int, CancellationToken) Retrieves data as a Stream. Declaration public Task<Stream> GetStreamAsync(int ordinal, CancellationToken cancellationToken = default) Parameters Type Name Description int ordinal The zero-based column ordinal. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<Stream> The returned object. | Edit this page View Source GetString(int) Gets the value of the specified column as an instance of string. Declaration public override string GetString(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description string The value of the specified column. Overrides DbDataReader.GetString(int) | Edit this page View Source GetTextReader(int) Retrieves data as a TextReader. Declaration public override TextReader GetTextReader(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description TextReader The returned object. Overrides DbDataReader.GetTextReader(int) | Edit this page View Source GetTextReaderAsync(int, CancellationToken) Retrieves data as a TextReader. Declaration public Task<TextReader> GetTextReaderAsync(int ordinal, CancellationToken cancellationToken = default) Parameters Type Name Description int ordinal The zero-based column ordinal. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<TextReader> The returned object. | Edit this page View Source GetTimeSpan(int) Gets the value of the specified column as a TimeSpan, Declaration public TimeSpan GetTimeSpan(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description TimeSpan The value of the specified column. Remarks PostgreSQL's interval type has has a resolution of 1 microsecond and ranges from -178000000 to 178000000 years, while .NET's TimeSpan has a resolution of 100 nanoseconds and ranges from roughly -29247 to 29247 years. See https://www.postgresql.org/docs/current/static/datatype-datetime.html | Edit this page View Source GetValue(int) Gets the value of the specified column as an instance of object. Declaration public override object GetValue(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description object The value of the specified column. Overrides DbDataReader.GetValue(int) | Edit this page View Source GetValues(object[]) Populates an array of objects with the column values of the current row. Declaration public override int GetValues(object[] values) Parameters Type Name Description object[] values An array of Object into which to copy the attribute columns. Returns Type Description int The number of instances of object in the array. Overrides DbDataReader.GetValues(object[]) | Edit this page View Source IsDBNull(int) Gets a value that indicates whether the column contains nonexistent or missing values. Declaration public override bool IsDBNull(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description bool true if the specified column is equivalent to DBNull; otherwise false. Overrides DbDataReader.IsDBNull(int) | Edit this page View Source IsDBNullAsync(int, CancellationToken) An asynchronous version of IsDBNull(int), which gets a value that indicates whether the column contains non-existent or missing values. The cancellationToken parameter is currently ignored. Declaration public override Task<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description int ordinal The zero-based column to be retrieved. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<bool> true if the specified column value is equivalent to DBNull otherwise false. Overrides DbDataReader.IsDBNullAsync(int, CancellationToken) | Edit this page View Source NextResult() Advances the reader to the next result when reading the results of a batch of statements. Declaration public override bool NextResult() Returns Type Description bool Overrides DbDataReader.NextResult() | Edit this page View Source NextResultAsync(CancellationToken) This is the asynchronous version of NextResult. Declaration public override Task<bool> NextResultAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<bool> A task representing the asynchronous operation. Overrides DbDataReader.NextResultAsync(CancellationToken) | Edit this page View Source Read() Advances the reader to the next record in a result set. Declaration public override bool Read() Returns Type Description bool true if there are more rows; otherwise false. Overrides DbDataReader.Read() Remarks The default position of a data reader is before the first record. Therefore, you must call Read to begin accessing data. | Edit this page View Source ReadAsync(CancellationToken) This is the asynchronous version of Read() Declaration public override Task<bool> ReadAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<bool> A task representing the asynchronous operation. Overrides DbDataReader.ReadAsync(CancellationToken) Events | Edit this page View Source ReaderClosed Is raised whenever Close() is called. Declaration public event EventHandler? ReaderClosed Event Type Type Description EventHandler Implements IEnumerable IDataReader IDataRecord IDisposable IAsyncDisposable IDbColumnSchemaGenerator"
  },
  "doc/api/Npgsql.NpgsqlDataSource.html": {
    "href": "doc/api/Npgsql.NpgsqlDataSource.html",
    "title": "Class NpgsqlDataSource | Npgsql Documentation",
    "keywords": "Class NpgsqlDataSource Represents a data source which can be used to obtain open connections, and against which commands can be executed directly. Inheritance object DbDataSource NpgsqlDataSource NpgsqlMultiHostDataSource Implements IDisposable IAsyncDisposable Inherited Members DbDataSource.Dispose() DbDataSource.DisposeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public abstract class NpgsqlDataSource : DbDataSource, IDisposable, IAsyncDisposable Properties | Edit this page View Source ConnectionString Gets the connection string of the database represented by this DbDataSource. The exact contents of the connection string depend on the specific data source for this connection. Declaration public override string ConnectionString { get; } Property Value Type Description string The connection string of the database represented by this DbDataSource. The exact contents of the connection string depend on the specific data source for this connection. Overrides DbDataSource.ConnectionString | Edit this page View Source Password Manually sets the password to be used the next time a physical connection is opened. Consider using UsePeriodicPasswordProvider(Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>?, TimeSpan, TimeSpan) instead. Declaration public string Password { set; } Property Value Type Description string Methods | Edit this page View Source Create(NpgsqlConnectionStringBuilder) Creates a new NpgsqlDataSource for the given connectionStringBuilder. Declaration public static NpgsqlDataSource Create(NpgsqlConnectionStringBuilder connectionStringBuilder) Parameters Type Name Description NpgsqlConnectionStringBuilder connectionStringBuilder Returns Type Description NpgsqlDataSource | Edit this page View Source Create(string) Creates a new NpgsqlDataSource for the given connectionString. Declaration public static NpgsqlDataSource Create(string connectionString) Parameters Type Name Description string connectionString Returns Type Description NpgsqlDataSource | Edit this page View Source CreateBatch() Creates a batch ready for use against this NpgsqlDataSource. Declaration public NpgsqlBatch CreateBatch() Returns Type Description NpgsqlBatch | Edit this page View Source CreateCommand(string?) Creates a command ready for use against this NpgsqlDataSource. Declaration public NpgsqlCommand CreateCommand(string? commandText = null) Parameters Type Name Description string commandText An optional SQL for the command. Returns Type Description NpgsqlCommand | Edit this page View Source CreateConnection() Returns a new, closed connection to the database represented by this DbDataSource. Declaration public NpgsqlConnection CreateConnection() Returns Type Description NpgsqlConnection A new, closed connection to the database represented by this DbDataSource. | Edit this page View Source CreateDbBatch() Returns a DbBatch that's ready for execution against the DbDataSource. Declaration protected override DbBatch CreateDbBatch() Returns Type Description DbBatch A DbBatch that's ready for execution against the DbDataSource. Overrides DbDataSource.CreateDbBatch() | Edit this page View Source CreateDbCommand(string?) Returns a DbCommand that's ready for execution against the DbDataSource. Declaration protected override DbCommand CreateDbCommand(string? commandText = null) Parameters Type Name Description string commandText The text command with which to initialize the DbCommand that this method returns. Returns Type Description DbCommand A DbCommand that's ready for execution against the DbDataSource. Overrides DbDataSource.CreateDbCommand(string) | Edit this page View Source CreateDbConnection() Returns a new, closed connection to the database represented by this DbDataSource. Declaration protected override DbConnection CreateDbConnection() Returns Type Description DbConnection A new, closed connection to the database represented by this DbDataSource. Overrides DbDataSource.CreateDbConnection() | Edit this page View Source Dispose(bool) Called by the Dispose() and Finalize() methods to release the managed and unmanaged resources used by the current instance of the DbDataSource class. Declaration protected override sealed void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides DbDataSource.Dispose(bool) | Edit this page View Source DisposeAsyncBase() Performs application-defined tasks associated with freeing, releasing, or resetting managed resources asynchronously. Declaration protected virtual ValueTask DisposeAsyncBase() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. | Edit this page View Source DisposeAsyncCore() Performs application-defined tasks associated with freeing, releasing, or resetting managed resources asynchronously. Declaration protected override sealed ValueTask DisposeAsyncCore() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. Overrides DbDataSource.DisposeAsyncCore() | Edit this page View Source DisposeBase() Called by the Dispose() and Finalize() methods to release the managed and unmanaged resources used by the current instance of the DbDataSource class. Declaration protected virtual void DisposeBase() | Edit this page View Source OpenConnection() Returns a new, open connection to the database represented by this DbDataSource. Declaration public NpgsqlConnection OpenConnection() Returns Type Description NpgsqlConnection A new, open connection to the database represented by this DbDataSource. | Edit this page View Source OpenConnectionAsync(CancellationToken) Asynchronously returns a new, open connection to the database represented by this DbDataSource. Declaration public ValueTask<NpgsqlConnection> OpenConnectionAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description ValueTask<NpgsqlConnection> A new, open connection to the database represented by this DbDataSource. | Edit this page View Source OpenDbConnection() Returns a new, open connection to the database represented by this DbDataSource. Declaration protected override DbConnection OpenDbConnection() Returns Type Description DbConnection A new, open connection to the database represented by this DbDataSource. Overrides DbDataSource.OpenDbConnection() | Edit this page View Source OpenDbConnectionAsync(CancellationToken) Asynchronously returns a new, open connection to the database represented by this DbDataSource. Declaration protected override ValueTask<DbConnection> OpenDbConnectionAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description ValueTask<DbConnection> A new, open connection to the database represented by this DbDataSource. Overrides DbDataSource.OpenDbConnectionAsync(CancellationToken) Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlDataSourceBuilder.html": {
    "href": "doc/api/Npgsql.NpgsqlDataSourceBuilder.html",
    "title": "Class NpgsqlDataSourceBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlDataSourceBuilder Provides a simple API for configuring and creating an NpgsqlDataSource, from which database connections can be obtained. Inheritance object NpgsqlDataSourceBuilder Implements INpgsqlTypeMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlDataSourceBuilder : INpgsqlTypeMapper Constructors | Edit this page View Source NpgsqlDataSourceBuilder(string?) Constructs a new NpgsqlDataSourceBuilder, optionally starting out from the given connectionString. Declaration public NpgsqlDataSourceBuilder(string? connectionString = null) Parameters Type Name Description string connectionString Properties | Edit this page View Source ConnectionString Returns the connection string, as currently configured on the builder. Declaration public string ConnectionString { get; } Property Value Type Description string | Edit this page View Source ConnectionStringBuilder A connection string builder that can be used to configured the connection string on the builder. Declaration public NpgsqlConnectionStringBuilder ConnectionStringBuilder { get; } Property Value Type Description NpgsqlConnectionStringBuilder | Edit this page View Source DefaultNameTranslator The default name translator to convert CLR type names and member names. Defaults to NpgsqlSnakeCaseNameTranslator. Declaration public INpgsqlNameTranslator DefaultNameTranslator { get; set; } Property Value Type Description INpgsqlNameTranslator | Edit this page View Source Name A diagnostics name used by Npgsql when generating tracing, logging and metrics. Declaration public string? Name { get; set; } Property Value Type Description string Methods | Edit this page View Source AddTypeInfoResolverFactory(PgTypeInfoResolverFactory) Adds a type info resolver factory which can add or modify support for PostgreSQL types. Typically used by plugins. Declaration public void AddTypeInfoResolverFactory(PgTypeInfoResolverFactory factory) Parameters Type Name Description PgTypeInfoResolverFactory factory The type resolver factory to be added. | Edit this page View Source Build() Builds and returns an NpgsqlDataSource which is ready for use. Declaration public NpgsqlDataSource Build() Returns Type Description NpgsqlDataSource | Edit this page View Source BuildMultiHost() Builds and returns a NpgsqlMultiHostDataSource which is ready for use for load-balancing and failover scenarios. Declaration public NpgsqlMultiHostDataSource BuildMultiHost() Returns Type Description NpgsqlMultiHostDataSource | Edit this page View Source ConfigureJsonOptions(JsonSerializerOptions) Configures the JSON serializer options used when reading and writing all System.Text.Json data. Declaration public NpgsqlDataSourceBuilder ConfigureJsonOptions(JsonSerializerOptions serializerOptions) Parameters Type Name Description JsonSerializerOptions serializerOptions Options to customize JSON serialization and deserialization. Returns Type Description NpgsqlDataSourceBuilder | Edit this page View Source EnableDynamicJson(Type[]?, Type[]?) Sets up dynamic System.Text.Json mappings. This allows mapping arbitrary .NET types to PostgreSQL json and jsonb types, as well as JsonNode and its derived types. Declaration public NpgsqlDataSourceBuilder EnableDynamicJson(Type[]? jsonbClrTypes = null, Type[]? jsonClrTypes = null) Parameters Type Name Description Type[] jsonbClrTypes A list of CLR types to map to PostgreSQL jsonb (no need to specify Jsonb). Type[] jsonClrTypes A list of CLR types to map to PostgreSQL json (no need to specify Json). Returns Type Description NpgsqlDataSourceBuilder Remarks Due to the dynamic nature of these mappings, they are not compatible with NativeAOT or trimming. | Edit this page View Source EnableParameterLogging(bool) Enables parameters to be included in logging. This includes potentially sensitive information from data sent to PostgreSQL. You should only enable this flag in development, or if you have the appropriate security measures in place based on the sensitivity of this data. Declaration public NpgsqlDataSourceBuilder EnableParameterLogging(bool parameterLoggingEnabled = true) Parameters Type Name Description bool parameterLoggingEnabled If true, then sensitive data is logged. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableRecordsAsTuples() Sets up mappings for the PostgreSQL record type as a .NET ValueTuple or Tuple. Declaration public NpgsqlDataSourceBuilder EnableRecordsAsTuples() Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableUnmappedTypes() Sets up mappings allowing the use of unmapped enum, range and multirange types. Declaration public NpgsqlDataSourceBuilder EnableUnmappedTypes() Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source MapComposite(Type, string?, INpgsqlNameTranslator?) Maps a CLR type to a composite type. Declaration public INpgsqlTypeMapper MapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be mapped. string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Remarks Maps CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to DefaultNameTranslator. If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Edit this page View Source MapComposite<T>(string?, INpgsqlNameTranslator?) Maps a CLR type to a PostgreSQL composite type. Declaration public INpgsqlTypeMapper MapComposite<T>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator. You can also use the PgNameAttribute on your members to manually specify a PostgreSQL name. If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Edit this page View Source MapEnum(Type, string?, INpgsqlNameTranslator?) Maps a CLR enum to a PostgreSQL enum type. Declaration public INpgsqlTypeMapper MapEnum(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET enum type to be mapped string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator. You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. | Edit this page View Source MapEnum<TEnum>(string?, INpgsqlNameTranslator?) Maps a CLR enum to a PostgreSQL enum type. Declaration public INpgsqlTypeMapper MapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator. You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. | Edit this page View Source UnmapComposite(Type, string?, INpgsqlNameTranslator?) Removes an existing composite mapping. Declaration public bool UnmapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be unmapped. string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description bool | Edit this page View Source UnmapComposite<T>(string?, INpgsqlNameTranslator?) Removes an existing composite mapping. Declaration public bool UnmapComposite<T>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Returns Type Description bool Type Parameters Name Description T | Edit this page View Source UnmapEnum(Type, string?, INpgsqlNameTranslator?) Removes an existing enum mapping. Declaration public bool UnmapEnum(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET enum type to be mapped string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description bool | Edit this page View Source UnmapEnum<TEnum>(string?, INpgsqlNameTranslator?) Removes an existing enum mapping. Declaration public bool UnmapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description bool Type Parameters Name Description TEnum | Edit this page View Source UseClientCertificate(X509Certificate?) Specifies an SSL/TLS certificate which Npgsql will send to PostgreSQL for certificate-based authentication. Declaration public NpgsqlDataSourceBuilder UseClientCertificate(X509Certificate? clientCertificate) Parameters Type Name Description X509Certificate clientCertificate The client certificate to be sent to PostgreSQL when opening a connection. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseClientCertificates(X509CertificateCollection?) Specifies a collection of SSL/TLS certificates which Npgsql will send to PostgreSQL for certificate-based authentication. Declaration public NpgsqlDataSourceBuilder UseClientCertificates(X509CertificateCollection? clientCertificates) Parameters Type Name Description X509CertificateCollection clientCertificates The client certificate collection to be sent to PostgreSQL when opening a connection. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseClientCertificatesCallback(Action<X509CertificateCollection>?) Specifies a callback to modify the collection of SSL/TLS client certificates which Npgsql will send to PostgreSQL for certificate-based authentication. This is an advanced API, consider using UseClientCertificate(X509Certificate?) or UseClientCertificates(X509CertificateCollection?) instead. Declaration public NpgsqlDataSourceBuilder UseClientCertificatesCallback(Action<X509CertificateCollection>? clientCertificatesCallback) Parameters Type Name Description Action<X509CertificateCollection> clientCertificatesCallback The callback to modify the client certificate collection. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks The callback is invoked every time a physical connection is opened, and is therefore suitable for rotating short-lived client certificates. Simply make sure the certificate collection argument has the up-to-date certificate(s). The callback's collection argument already includes any client certificates specified via the connection string or environment variables. | Edit this page View Source UseLoggerFactory(ILoggerFactory?) Sets the ILoggerFactory that will be used for logging. Declaration public NpgsqlDataSourceBuilder UseLoggerFactory(ILoggerFactory? loggerFactory) Parameters Type Name Description ILoggerFactory loggerFactory The logger factory to be used. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UsePasswordProvider(Func<NpgsqlConnectionStringBuilder, string>?, Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>?) Configures a password provider, which is called by the data source when opening connections. Declaration public NpgsqlDataSourceBuilder UsePasswordProvider(Func<NpgsqlConnectionStringBuilder, string>? passwordProvider, Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>? passwordProviderAsync) Parameters Type Name Description Func<NpgsqlConnectionStringBuilder, string> passwordProvider A callback that may be invoked during Open() which returns the password to be sent to PostgreSQL. Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>> passwordProviderAsync A callback that may be invoked during OpenAsync(CancellationToken) which returns the password to be sent to PostgreSQL. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks The provided callback is invoked when opening connections. Therefore its important the callback internally depends on cached data or returns quickly otherwise. Any unnecessary delay will affect connection opening time. | Edit this page View Source UsePeriodicPasswordProvider(Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>?, TimeSpan, TimeSpan) Configures a periodic password provider, which is automatically called by the data source at some regular interval. This is the recommended way to fetch a rotating access token. Declaration public NpgsqlDataSourceBuilder UsePeriodicPasswordProvider(Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>? passwordProvider, TimeSpan successRefreshInterval, TimeSpan failureRefreshInterval) Parameters Type Name Description Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>> passwordProvider A callback which returns the password to be sent to PostgreSQL. TimeSpan successRefreshInterval How long to cache the password before re-invoking the callback. TimeSpan failureRefreshInterval If a password refresh attempt fails, it will be re-attempted with this interval. This should typically be much lower than successRefreshInterval. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks The provided callback is invoked in a timer, and not when opening connections. It therefore doesn't affect opening time. The provided cancellation token is only triggered when the entire data source is disposed. If you'd like to apply a timeout to the token fetching, do so within the provided callback. | Edit this page View Source UsePhysicalConnectionInitializer(Action<NpgsqlConnection>?, Func<NpgsqlConnection, Task>?) Register a connection initializer, which allows executing arbitrary commands when a physical database connection is first opened. Declaration public NpgsqlDataSourceBuilder UsePhysicalConnectionInitializer(Action<NpgsqlConnection>? connectionInitializer, Func<NpgsqlConnection, Task>? connectionInitializerAsync) Parameters Type Name Description Action<NpgsqlConnection> connectionInitializer A synchronous connection initialization lambda, which will be called from Open() when a new physical connection is opened. Func<NpgsqlConnection, Task> connectionInitializerAsync An asynchronous connection initialization lambda, which will be called from OpenAsync(CancellationToken) when a new physical connection is opened. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks If an initializer is registered, both sync and async versions must be provided. If you do not use sync APIs in your code, simply throw NotSupportedException, which would also catch accidental cases of sync opening. | Edit this page View Source UseRootCertificate(X509Certificate2?) Sets the X509Certificate2 that will be used validate SSL certificate, received from the server. Declaration public NpgsqlDataSourceBuilder UseRootCertificate(X509Certificate2? rootCertificate) Parameters Type Name Description X509Certificate2 rootCertificate The CA certificate. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseRootCertificateCallback(Func<X509Certificate2>?) Specifies a callback that will be used to validate SSL certificate, received from the server. Declaration public NpgsqlDataSourceBuilder UseRootCertificateCallback(Func<X509Certificate2>? rootCertificateCallback) Parameters Type Name Description Func<X509Certificate2> rootCertificateCallback The callback to get CA certificate. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks This overload, which accepts a callback, is suitable for scenarios where the certificate rotates and might change during the lifetime of the application. When that's not the case, use the overload which directly accepts the certificate. | Edit this page View Source UseUserCertificateValidationCallback(RemoteCertificateValidationCallback) When using SSL/TLS, this is a callback that allows customizing how the PostgreSQL-provided certificate is verified. This is an advanced API, consider using VerifyFull or VerifyCA instead. Declaration public NpgsqlDataSourceBuilder UseUserCertificateValidationCallback(RemoteCertificateValidationCallback userCertificateValidationCallback) Parameters Type Name Description RemoteCertificateValidationCallback userCertificateValidationCallback The callback containing custom callback verification logic. Returns Type Description NpgsqlDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks Cannot be used in conjunction with Disable, VerifyCA or VerifyFull. See https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx. Implements INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.NpgsqlEventId.html": {
    "href": "doc/api/Npgsql.NpgsqlEventId.html",
    "title": "Class NpgsqlEventId | Npgsql Documentation",
    "keywords": "Class NpgsqlEventId Inheritance object NpgsqlEventId Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public static class NpgsqlEventId Fields | Edit this page View Source AutoPreparingStatement Declaration public const int AutoPreparingStatement = 2102 Field Value Type Description int | Edit this page View Source BreakingConnection Declaration public const int BreakingConnection = 1900 Field Value Type Description int | Edit this page View Source CancellingCommand Declaration public const int CancellingCommand = 2002 Field Value Type Description int | Edit this page View Source CaughtUserExceptionInNoticeEventHandler Declaration public const int CaughtUserExceptionInNoticeEventHandler = 1901 Field Value Type Description int | Edit this page View Source CaughtUserExceptionInNotificationEventHandler Declaration public const int CaughtUserExceptionInNotificationEventHandler = 1902 Field Value Type Description int | Edit this page View Source CleaningUpResourceManager Declaration public const int CleaningUpResourceManager = 31011 Field Value Type Description int | Edit this page View Source ClosedConnection Declaration public const int ClosedConnection = 1004 Field Value Type Description int | Edit this page View Source ClosedPhysicalConnection Declaration public const int ClosedPhysicalConnection = 1113 Field Value Type Description int | Edit this page View Source ClosingConnection Declaration public const int ClosingConnection = 1003 Field Value Type Description int | Edit this page View Source ClosingPhysicalConnection Declaration public const int ClosingPhysicalConnection = 1112 Field Value Type Description int | Edit this page View Source CommandExecutionCompleted Declaration public const int CommandExecutionCompleted = 2001 Field Value Type Description int | Edit this page View Source CommandPreparedExplicitly Declaration public const int CommandPreparedExplicitly = 2101 Field Value Type Description int | Edit this page View Source CommittedTransaction Declaration public const int CommittedTransaction = 30001 Field Value Type Description int | Edit this page View Source CommittingSinglePhaseTransaction Declaration public const int CommittingSinglePhaseTransaction = 31001 Field Value Type Description int | Edit this page View Source CommittingTwoPhaseTransaction Declaration public const int CommittingTwoPhaseTransaction = 31005 Field Value Type Description int | Edit this page View Source CompletedKeepalive Declaration public const int CompletedKeepalive = 1601 Field Value Type Description int | Edit this page View Source ConnectionExceededMaximumLifetime Declaration public const int ConnectionExceededMaximumLifetime = 1500 Field Value Type Description int | Edit this page View Source ConnectionInUseWhenRollingBack Declaration public const int ConnectionInUseWhenRollingBack = 31010 Field Value Type Description int | Edit this page View Source CopyOperationCancelled Declaration public const int CopyOperationCancelled = 40101 Field Value Type Description int | Edit this page View Source CopyOperationCompleted Declaration public const int CopyOperationCompleted = 40100 Field Value Type Description int | Edit this page View Source CreatingReplicationSlot Declaration public const int CreatingReplicationSlot = 50000 Field Value Type Description int | Edit this page View Source CreatingSavepoint Declaration public const int CreatingSavepoint = 30100 Field Value Type Description int | Edit this page View Source DerivingParameters Declaration public const int DerivingParameters = 2500 Field Value Type Description int | Edit this page View Source DroppingReplicationSlot Declaration public const int DroppingReplicationSlot = 50001 Field Value Type Description int | Edit this page View Source EnlistedVolatileResourceManager Declaration public const int EnlistedVolatileResourceManager = 31000 Field Value Type Description int | Edit this page View Source ExceptionDuringTransactionDispose Declaration public const int ExceptionDuringTransactionDispose = 30200 Field Value Type Description int | Edit this page View Source ExceptionWhenClosingPhysicalConnection Declaration public const int ExceptionWhenClosingPhysicalConnection = 1903 Field Value Type Description int | Edit this page View Source ExceptionWhenDisposingCopyOperation Declaration public const int ExceptionWhenDisposingCopyOperation = 40102 Field Value Type Description int | Edit this page View Source ExceptionWhenOpeningConnectionForMultiplexing Declaration public const int ExceptionWhenOpeningConnectionForMultiplexing = 1904 Field Value Type Description int | Edit this page View Source ExceptionWhenWritingMultiplexedCommands Declaration public const int ExceptionWhenWritingMultiplexedCommands = 2600 Field Value Type Description int | Edit this page View Source ExecutingCommand Declaration public const int ExecutingCommand = 2000 Field Value Type Description int | Edit this page View Source ExecutingInternalCommand Declaration public const int ExecutingInternalCommand = 2003 Field Value Type Description int | Edit this page View Source ExecutingReplicationCommand Declaration public const int ExecutingReplicationCommand = 50004 Field Value Type Description int | Edit this page View Source KeepaliveFailed Declaration public const int KeepaliveFailed = 1602 Field Value Type Description int | Edit this page View Source OpenedConnection Declaration public const int OpenedConnection = 1001 Field Value Type Description int | Edit this page View Source OpenedPhysicalConnection Declaration public const int OpenedPhysicalConnection = 1111 Field Value Type Description int | Edit this page View Source OpeningConnection Declaration public const int OpeningConnection = 1000 Field Value Type Description int | Edit this page View Source OpeningPhysicalConnection Declaration public const int OpeningPhysicalConnection = 1110 Field Value Type Description int | Edit this page View Source PreparingCommandExplicitly Declaration public const int PreparingCommandExplicitly = 2100 Field Value Type Description int | Edit this page View Source PreparingTwoPhaseTransaction Declaration public const int PreparingTwoPhaseTransaction = 31004 Field Value Type Description int | Edit this page View Source ReceivedNotice Declaration public const int ReceivedNotice = 1301 Field Value Type Description int | Edit this page View Source ReceivedReplicationPrimaryKeepalive Declaration public const int ReceivedReplicationPrimaryKeepalive = 50100 Field Value Type Description int | Edit this page View Source ReleasedSavepoint Declaration public const int ReleasedSavepoint = 30102 Field Value Type Description int | Edit this page View Source ReplicationFeedbackMessageSendingFailed Declaration public const int ReplicationFeedbackMessageSendingFailed = 50103 Field Value Type Description int | Edit this page View Source RolledBackToSavepoint Declaration public const int RolledBackToSavepoint = 30101 Field Value Type Description int | Edit this page View Source RolledBackTransaction Declaration public const int RolledBackTransaction = 30002 Field Value Type Description int | Edit this page View Source RollingBackSinglePhaseTransaction Declaration public const int RollingBackSinglePhaseTransaction = 31002 Field Value Type Description int | Edit this page View Source RollingBackTwoPhaseTransaction Declaration public const int RollingBackTwoPhaseTransaction = 31007 Field Value Type Description int | Edit this page View Source SendingKeepalive Declaration public const int SendingKeepalive = 1600 Field Value Type Description int | Edit this page View Source SendingReplicationStandbyStatusUpdate Declaration public const int SendingReplicationStandbyStatusUpdate = 50101 Field Value Type Description int | Edit this page View Source SentReplicationFeedbackMessage Declaration public const int SentReplicationFeedbackMessage = 50102 Field Value Type Description int | Edit this page View Source SinglePhaseTransactionRollbackFailed Declaration public const int SinglePhaseTransactionRollbackFailed = 31003 Field Value Type Description int | Edit this page View Source StartedTransaction Declaration public const int StartedTransaction = 30000 Field Value Type Description int | Edit this page View Source StartingBinaryExport Declaration public const int StartingBinaryExport = 40000 Field Value Type Description int | Edit this page View Source StartingBinaryImport Declaration public const int StartingBinaryImport = 40001 Field Value Type Description int | Edit this page View Source StartingLogicalReplication Declaration public const int StartingLogicalReplication = 50002 Field Value Type Description int | Edit this page View Source StartingPhysicalReplication Declaration public const int StartingPhysicalReplication = 50003 Field Value Type Description int | Edit this page View Source StartingRawCopy Declaration public const int StartingRawCopy = 40004 Field Value Type Description int | Edit this page View Source StartingTextExport Declaration public const int StartingTextExport = 40002 Field Value Type Description int | Edit this page View Source StartingTextImport Declaration public const int StartingTextImport = 40003 Field Value Type Description int | Edit this page View Source StartingWait Declaration public const int StartingWait = 1300 Field Value Type Description int | Edit this page View Source TwoPhaseTransactionCommitFailed Declaration public const int TwoPhaseTransactionCommitFailed = 31006 Field Value Type Description int | Edit this page View Source TwoPhaseTransactionInDoubt Declaration public const int TwoPhaseTransactionInDoubt = 31009 Field Value Type Description int | Edit this page View Source TwoPhaseTransactionRollbackFailed Declaration public const int TwoPhaseTransactionRollbackFailed = 31008 Field Value Type Description int | Edit this page View Source UnpreparingCommand Declaration public const int UnpreparingCommand = 2103 Field Value Type Description int"
  },
  "doc/api/Npgsql.NpgsqlException.html": {
    "href": "doc/api/Npgsql.NpgsqlException.html",
    "title": "Class NpgsqlException | Npgsql Documentation",
    "keywords": "Class NpgsqlException The exception that is thrown when server-related issues occur. Inheritance object Exception SystemException ExternalException DbException NpgsqlException NpgsqlOperationInProgressException PostgresException Implements ISerializable Inherited Members DbException.SqlState ExternalException.ToString() ExternalException.ErrorCode Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql Assembly: Npgsql.dll Syntax [Serializable] public class NpgsqlException : DbException, ISerializable Remarks PostgreSQL errors (e.g. query SQL issues, constraint violations) are raised via PostgresException which is a subclass of this class. Purely Npgsql-related issues which aren't related to the server will be raised via the standard CLR exceptions (e.g. ArgumentException). Constructors | Edit this page View Source NpgsqlException() Initializes a new instance of the NpgsqlException class. Declaration public NpgsqlException() | Edit this page View Source NpgsqlException(SerializationInfo, StreamingContext) Initializes a new instance of the NpgsqlException class with serialized data. Declaration [Obsolete(\"This API supports obsolete formatter-based serialization. It should not be called or extended by application code.\")] protected NpgsqlException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. | Edit this page View Source NpgsqlException(string?) Initializes a new instance of the NpgsqlException class with a specified error message. Declaration public NpgsqlException(string? message) Parameters Type Name Description string message The message that describes the error. | Edit this page View Source NpgsqlException(string?, Exception?) Initializes a new instance of the NpgsqlException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NpgsqlException(string? message, Exception? innerException) Parameters Type Name Description string message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference ( Nothing in Visual Basic) if no inner exception is specified. Properties | Edit this page View Source BatchCommand If this DbException was thrown when executing a DbBatch, references the specific DbBatchCommand which triggered the exception. Declaration public NpgsqlBatchCommand? BatchCommand { get; set; } Property Value Type Description NpgsqlBatchCommand The specific DbBatchCommand which triggered the exception. | Edit this page View Source DbBatchCommand When overridden in a derived class, if this DbException was thrown when executing a DbBatch, references the specific DbBatchCommand which triggered the exception. Declaration protected override DbBatchCommand? DbBatchCommand { get; } Property Value Type Description DbBatchCommand The specific DbBatchCommand which triggered the exception. Overrides DbException.DbBatchCommand | Edit this page View Source IsTransient Specifies whether the exception is considered transient, that is, whether retrying the operation could succeed (e.g. a network error or a timeout). Declaration public override bool IsTransient { get; } Property Value Type Description bool Overrides DbException.IsTransient Implements ISerializable"
  },
  "doc/api/Npgsql.NpgsqlFactory.html": {
    "href": "doc/api/Npgsql.NpgsqlFactory.html",
    "title": "Class NpgsqlFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlFactory A factory to create instances of various Npgsql objects. Inheritance object DbProviderFactory NpgsqlFactory Implements IServiceProvider Inherited Members DbProviderFactory.CreateDataSourceEnumerator() DbProviderFactory.CanCreateDataSourceEnumerator object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax [Serializable] public sealed class NpgsqlFactory : DbProviderFactory, IServiceProvider Fields | Edit this page View Source Instance Gets an instance of the NpgsqlFactory. This can be used to retrieve strongly typed data objects. Declaration public static readonly NpgsqlFactory Instance Field Value Type Description NpgsqlFactory Properties | Edit this page View Source CanCreateBatch Gets a value that indicates whether this DbProviderFactory instance supports the DbBatch class. Declaration public override bool CanCreateBatch { get; } Property Value Type Description bool true if this instance supports the DbBatch class; otherwise, false. The default is false. Overrides DbProviderFactory.CanCreateBatch | Edit this page View Source CanCreateCommandBuilder Specifies whether the specific DbProviderFactory supports the DbCommandBuilder class. Declaration public override bool CanCreateCommandBuilder { get; } Property Value Type Description bool Overrides DbProviderFactory.CanCreateCommandBuilder | Edit this page View Source CanCreateDataAdapter Specifies whether the specific DbProviderFactory supports the DbDataAdapter class. Declaration public override bool CanCreateDataAdapter { get; } Property Value Type Description bool Overrides DbProviderFactory.CanCreateDataAdapter Methods | Edit this page View Source CreateBatch() Returns a new instance of the provider's class that implements the DbBatch class. Declaration public override DbBatch CreateBatch() Returns Type Description DbBatch A new instance of DbBatch. Overrides DbProviderFactory.CreateBatch() | Edit this page View Source CreateBatchCommand() Returns a new instance of the provider's class that implements the DbBatchCommand class. Declaration public override DbBatchCommand CreateBatchCommand() Returns Type Description DbBatchCommand A new instance of DbBatchCommand. Overrides DbProviderFactory.CreateBatchCommand() | Edit this page View Source CreateCommand() Returns a strongly typed DbCommand instance. Declaration public override DbCommand CreateCommand() Returns Type Description DbCommand Overrides DbProviderFactory.CreateCommand() | Edit this page View Source CreateCommandBuilder() Returns a strongly typed DbCommandBuilder instance. Declaration public override DbCommandBuilder CreateCommandBuilder() Returns Type Description DbCommandBuilder Overrides DbProviderFactory.CreateCommandBuilder() | Edit this page View Source CreateConnection() Returns a strongly typed DbConnection instance. Declaration public override DbConnection CreateConnection() Returns Type Description DbConnection Overrides DbProviderFactory.CreateConnection() | Edit this page View Source CreateConnectionStringBuilder() Returns a strongly typed DbConnectionStringBuilder instance. Declaration public override DbConnectionStringBuilder CreateConnectionStringBuilder() Returns Type Description DbConnectionStringBuilder Overrides DbProviderFactory.CreateConnectionStringBuilder() | Edit this page View Source CreateDataAdapter() Returns a strongly typed DbDataAdapter instance. Declaration public override DbDataAdapter CreateDataAdapter() Returns Type Description DbDataAdapter Overrides DbProviderFactory.CreateDataAdapter() | Edit this page View Source CreateDataSource(string) Returns a new instance of the provider's class that implements the DbDataSource class, representing the database for the given connection string and ready to hand out connections to it. Declaration public override DbDataSource CreateDataSource(string connectionString) Parameters Type Name Description string connectionString The connection string of the database to be represented by this DbDataSource. The exact contents of the connection string depend on the specific data source for this connection. Returns Type Description DbDataSource A new instance of DbDataSource. Overrides DbProviderFactory.CreateDataSource(string) | Edit this page View Source CreateParameter() Returns a strongly typed DbParameter instance. Declaration public override DbParameter CreateParameter() Returns Type Description DbParameter Overrides DbProviderFactory.CreateParameter() | Edit this page View Source GetService(Type) Gets the service object of the specified type. Declaration public object? GetService(Type serviceType) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. Returns Type Description object A service object of type serviceType, or null if there is no service object of type serviceType. Implements IServiceProvider"
  },
  "doc/api/Npgsql.NpgsqlLargeObjectManager.html": {
    "href": "doc/api/Npgsql.NpgsqlLargeObjectManager.html",
    "title": "Class NpgsqlLargeObjectManager | Npgsql Documentation",
    "keywords": "Class NpgsqlLargeObjectManager Large object manager. This class can be used to store very large files in a PostgreSQL database. Inheritance object NpgsqlLargeObjectManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax [Obsolete(\"NpgsqlLargeObjectManager allows manipulating PostgreSQL large objects via publicly available PostgreSQL functions (lo_read, lo_write); call these yourself directly.\")] public class NpgsqlLargeObjectManager Constructors | Edit this page View Source NpgsqlLargeObjectManager(NpgsqlConnection) Creates an NpgsqlLargeObjectManager for this connection. The connection must be opened to perform remote operations. Declaration public NpgsqlLargeObjectManager(NpgsqlConnection connection) Parameters Type Name Description NpgsqlConnection connection Properties | Edit this page View Source Has64BitSupport Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB. This property returns true whether the PostgreSQL version is >= 9.3. Declaration public bool Has64BitSupport { get; } Property Value Type Description bool | Edit this page View Source MaxTransferBlockSize The largest chunk size (in bytes) read and write operations will read/write each roundtrip to the network. Default 4 MB. Declaration public int MaxTransferBlockSize { get; set; } Property Value Type Description int Methods | Edit this page View Source Create(uint) Create an empty large object in the database. If an oid is specified but is already in use, an PostgresException will be thrown. Declaration public uint Create(uint preferredOid = 0) Parameters Type Name Description uint preferredOid A preferred oid, or specify 0 if one should be automatically assigned Returns Type Description uint The oid for the large object created Exceptions Type Condition PostgresException If an oid is already in use | Edit this page View Source CreateAsync(uint, CancellationToken) Create an empty large object in the database. If an oid is specified but is already in use, an PostgresException will be thrown. Declaration public Task<uint> CreateAsync(uint preferredOid, CancellationToken cancellationToken = default) Parameters Type Name Description uint preferredOid A preferred oid, or specify 0 if one should be automatically assigned CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<uint> The oid for the large object created Exceptions Type Condition PostgresException If an oid is already in use | Edit this page View Source ExportRemote(uint, string) Exports a large object stored in the database to a file on the backend. This requires superuser permissions. Declaration public void ExportRemote(uint oid, string path) Parameters Type Name Description uint oid Oid of the object to export string path Path to write the file on the backend | Edit this page View Source ExportRemoteAsync(uint, string, CancellationToken) Exports a large object stored in the database to a file on the backend. This requires superuser permissions. Declaration public Task ExportRemoteAsync(uint oid, string path, CancellationToken cancellationToken = default) Parameters Type Name Description uint oid Oid of the object to export string path Path to write the file on the backend CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task | Edit this page View Source ImportRemote(string, uint) Imports a large object to be stored as a large object in the database from a file stored on the backend. This requires superuser permissions. Declaration public void ImportRemote(string path, uint oid = 0) Parameters Type Name Description string path Path to read the file on the backend uint oid A preferred oid, or specify 0 if one should be automatically assigned | Edit this page View Source ImportRemoteAsync(string, uint, CancellationToken) Imports a large object to be stored as a large object in the database from a file stored on the backend. This requires superuser permissions. Declaration public Task ImportRemoteAsync(string path, uint oid, CancellationToken cancellationToken = default) Parameters Type Name Description string path Path to read the file on the backend uint oid A preferred oid, or specify 0 if one should be automatically assigned CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task | Edit this page View Source OpenRead(uint) Opens a large object on the backend, returning a stream controlling this remote object. A transaction snapshot is taken by the backend when the object is opened with only read permissions. When reading from this object, the contents reflects the time when the snapshot was taken. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public NpgsqlLargeObjectStream OpenRead(uint oid) Parameters Type Name Description uint oid Oid of the object Returns Type Description NpgsqlLargeObjectStream An NpgsqlLargeObjectStream | Edit this page View Source OpenReadAsync(uint, CancellationToken) Opens a large object on the backend, returning a stream controlling this remote object. A transaction snapshot is taken by the backend when the object is opened with only read permissions. When reading from this object, the contents reflects the time when the snapshot was taken. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public Task<NpgsqlLargeObjectStream> OpenReadAsync(uint oid, CancellationToken cancellationToken = default) Parameters Type Name Description uint oid Oid of the object CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<NpgsqlLargeObjectStream> An NpgsqlLargeObjectStream | Edit this page View Source OpenReadWrite(uint) Opens a large object on the backend, returning a stream controlling this remote object. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public NpgsqlLargeObjectStream OpenReadWrite(uint oid) Parameters Type Name Description uint oid Oid of the object Returns Type Description NpgsqlLargeObjectStream An NpgsqlLargeObjectStream | Edit this page View Source OpenReadWriteAsync(uint, CancellationToken) Opens a large object on the backend, returning a stream controlling this remote object. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public Task<NpgsqlLargeObjectStream> OpenReadWriteAsync(uint oid, CancellationToken cancellationToken = default) Parameters Type Name Description uint oid Oid of the object CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<NpgsqlLargeObjectStream> An NpgsqlLargeObjectStream | Edit this page View Source Unlink(uint) Deletes a large object on the backend. Declaration public void Unlink(uint oid) Parameters Type Name Description uint oid Oid of the object to delete | Edit this page View Source UnlinkAsync(uint, CancellationToken) Deletes a large object on the backend. Declaration public Task UnlinkAsync(uint oid, CancellationToken cancellationToken = default) Parameters Type Name Description uint oid Oid of the object to delete CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task"
  },
  "doc/api/Npgsql.NpgsqlLargeObjectStream.html": {
    "href": "doc/api/Npgsql.NpgsqlLargeObjectStream.html",
    "title": "Class NpgsqlLargeObjectStream | Npgsql Documentation",
    "keywords": "Class NpgsqlLargeObjectStream An interface to remotely control the seekable stream for an opened large object on a PostgreSQL server. Note that the OpenRead/OpenReadWrite method as well as all operations performed on this stream must be wrapped inside a database transaction. Inheritance object MarshalByRefObject Stream NpgsqlLargeObjectStream Implements IAsyncDisposable IDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax [Obsolete(\"NpgsqlLargeObjectStream allows manipulating PostgreSQL large objects via publicly available PostgreSQL functions (lo_read, lo_write); call these yourself directly.\")] public sealed class NpgsqlLargeObjectStream : Stream, IAsyncDisposable, IDisposable Properties | Edit this page View Source CanRead CanRead always returns true, unless the stream has been closed. Declaration public override bool CanRead { get; } Property Value Type Description bool Overrides Stream.CanRead | Edit this page View Source CanSeek CanSeek always returns true, unless the stream has been closed. Declaration public override bool CanSeek { get; } Property Value Type Description bool Overrides Stream.CanSeek | Edit this page View Source CanTimeout CanTimeout always returns false. Declaration public override bool CanTimeout { get; } Property Value Type Description bool Overrides Stream.CanTimeout | Edit this page View Source CanWrite CanWrite returns true if the stream was opened with write permissions, and the stream has not been closed. Declaration public override bool CanWrite { get; } Property Value Type Description bool Overrides Stream.CanWrite | Edit this page View Source Has64BitSupport Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB. This property returns true whether the PostgreSQL version is >= 9.3. Declaration public bool Has64BitSupport { get; } Property Value Type Description bool | Edit this page View Source Length Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again. Declaration public override long Length { get; } Property Value Type Description long Overrides Stream.Length | Edit this page View Source Position Returns the current position in the stream. Getting the current position does not need a round-trip to the server, however setting the current position does. Declaration public override long Position { get; set; } Property Value Type Description long Overrides Stream.Position Methods | Edit this page View Source Close() Releases resources at the backend allocated for this stream. Declaration public override void Close() Overrides Stream.Close() | Edit this page View Source Dispose(bool) Releases resources at the backend allocated for this stream, iff disposing is true. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Whether to release resources allocated at the backend. Overrides Stream.Dispose(bool) | Edit this page View Source Flush() Does nothing. Declaration public override void Flush() Overrides Stream.Flush() | Edit this page View Source GetLengthAsync(CancellationToken) Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again. Declaration public Task<long> GetLengthAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<long> | Edit this page View Source Read(byte[], int, int) Reads count bytes from the large object. The only case when fewer bytes are read is when end of stream is reached. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer The buffer where read data should be stored. int offset The offset in the buffer where the first byte should be read. int count The maximum number of bytes that should be read. Returns Type Description int How many bytes actually read, or 0 if end of file was already reached. Overrides Stream.Read(byte[], int, int) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Reads count bytes from the large object. The only case when fewer bytes are read is when end of stream is reached. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer where read data should be stored. int offset The offset in the buffer where the first byte should be read. int count The maximum number of bytes that should be read. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<int> How many bytes actually read, or 0 if end of file was already reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) | Edit this page View Source Seek(long, SeekOrigin) Seeks in the stream to the specified position. This requires a round-trip to the backend. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long Overrides Stream.Seek(long, SeekOrigin) | Edit this page View Source SeekAsync(long, SeekOrigin, CancellationToken) Seeks in the stream to the specified position. This requires a round-trip to the backend. Declaration public Task<long> SeekAsync(long offset, SeekOrigin origin, CancellationToken cancellationToken = default) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<long> | Edit this page View Source SetLength(long) Truncates or enlarges the large object to the given size. If enlarging, the large object is extended with null bytes. For PostgreSQL versions earlier than 9.3, the value must fit in an Int32. Declaration public override void SetLength(long value) Parameters Type Name Description long value Number of bytes to either truncate or enlarge the large object. Overrides Stream.SetLength(long) | Edit this page View Source SetLength(long, CancellationToken) Truncates or enlarges the large object to the given size. If enlarging, the large object is extended with null bytes. For PostgreSQL versions earlier than 9.3, the value must fit in an Int32. Declaration public Task SetLength(long value, CancellationToken cancellationToken) Parameters Type Name Description long value Number of bytes to either truncate or enlarge the large object. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task | Edit this page View Source Write(byte[], int, int) Writes count bytes to the large object. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The offset in the buffer at which to begin copying bytes. int count The number of bytes to write. Overrides Stream.Write(byte[], int, int) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Writes count bytes to the large object. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The offset in the buffer at which to begin copying bytes. int count The number of bytes to write. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Implements IAsyncDisposable IDisposable"
  },
  "doc/api/Npgsql.NpgsqlLoggingConfiguration.html": {
    "href": "doc/api/Npgsql.NpgsqlLoggingConfiguration.html",
    "title": "Class NpgsqlLoggingConfiguration | Npgsql Documentation",
    "keywords": "Class NpgsqlLoggingConfiguration Configures Npgsql logging Inheritance object NpgsqlLoggingConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public class NpgsqlLoggingConfiguration Methods | Edit this page View Source InitializeLogging(ILoggerFactory, bool) Globally initializes Npgsql logging to use the provided loggerFactory. Must be called before any Npgsql APIs are used. This is a legacy-only, backwards compatibility API. New applications should set the logger factory on NpgsqlDataSourceBuilder and use the resulting NpgsqlDataSource instead. Declaration public static void InitializeLogging(ILoggerFactory loggerFactory, bool parameterLoggingEnabled = false) Parameters Type Name Description ILoggerFactory loggerFactory The logging factory to use when logging from Npgsql. bool parameterLoggingEnabled Determines whether parameter contents will be logged alongside SQL statements - this may reveal sensitive information. Defaults to false."
  },
  "doc/api/Npgsql.NpgsqlMultiHostDataSource.html": {
    "href": "doc/api/Npgsql.NpgsqlMultiHostDataSource.html",
    "title": "Class NpgsqlMultiHostDataSource | Npgsql Documentation",
    "keywords": "Class NpgsqlMultiHostDataSource An NpgsqlDataSource which manages connections for multiple hosts, is aware of their states (primary, secondary, offline...) and can perform failover and load balancing across them. Inheritance object DbDataSource NpgsqlDataSource NpgsqlMultiHostDataSource Implements IDisposable IAsyncDisposable Inherited Members NpgsqlDataSource.ConnectionString NpgsqlDataSource.CreateConnection() NpgsqlDataSource.OpenConnection() NpgsqlDataSource.OpenConnectionAsync(CancellationToken) NpgsqlDataSource.CreateCommand(string) NpgsqlDataSource.CreateBatch() NpgsqlDataSource.Create(string) NpgsqlDataSource.Create(NpgsqlConnectionStringBuilder) NpgsqlDataSource.Password DbDataSource.Dispose() DbDataSource.DisposeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlMultiHostDataSource : NpgsqlDataSource, IDisposable, IAsyncDisposable Remarks See https://www.npgsql.org/doc/failover-and-load-balancing.html. Methods | Edit this page View Source ClearDatabaseStates() Clears the database state (primary, secondary, offline...) for all data sources managed by this multi-host data source. Can be useful to make Npgsql retry a PostgreSQL instance which was previously detected to be offline. Declaration public void ClearDatabaseStates() | Edit this page View Source CreateConnection(TargetSessionAttributes) Returns a new, unopened connection from this data source. Declaration public NpgsqlConnection CreateConnection(TargetSessionAttributes targetSessionAttributes) Parameters Type Name Description TargetSessionAttributes targetSessionAttributes Specifies the server type (e.g. primary, standby). Returns Type Description NpgsqlConnection | Edit this page View Source OpenConnection(TargetSessionAttributes) Returns a new, opened connection from this data source. Declaration public NpgsqlConnection OpenConnection(TargetSessionAttributes targetSessionAttributes) Parameters Type Name Description TargetSessionAttributes targetSessionAttributes Specifies the server type (e.g. primary, standby). Returns Type Description NpgsqlConnection | Edit this page View Source OpenConnectionAsync(TargetSessionAttributes, CancellationToken) Returns a new, opened connection from this data source. Declaration public ValueTask<NpgsqlConnection> OpenConnectionAsync(TargetSessionAttributes targetSessionAttributes, CancellationToken cancellationToken = default) Parameters Type Name Description TargetSessionAttributes targetSessionAttributes Specifies the server type (e.g. primary, standby). CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description ValueTask<NpgsqlConnection> | Edit this page View Source WithTargetSession(TargetSessionAttributes) Returns an NpgsqlDataSource that wraps this multi-host one with the given server type. Declaration public NpgsqlDataSource WithTargetSession(TargetSessionAttributes targetSessionAttributes) Parameters Type Name Description TargetSessionAttributes targetSessionAttributes Specifies the server type (e.g. primary, standby). Returns Type Description NpgsqlDataSource Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlNestedDataReader.html": {
    "href": "doc/api/Npgsql.NpgsqlNestedDataReader.html",
    "title": "Class NpgsqlNestedDataReader | Npgsql Documentation",
    "keywords": "Class NpgsqlNestedDataReader Reads a forward-only stream of rows from a nested data source. Can be retrieved using GetData(int) or GetData(int). Inheritance object MarshalByRefObject DbDataReader NpgsqlNestedDataReader Implements IEnumerable IDataReader IDataRecord IDisposable IAsyncDisposable Inherited Members DbDataReader.CloseAsync() DbDataReader.DisposeAsync() DbDataReader.GetFieldValueAsync<T>(int) DbDataReader.GetFieldValueAsync<T>(int, CancellationToken) DbDataReader.GetSchemaTable() DbDataReader.GetSchemaTableAsync(CancellationToken) DbDataReader.GetColumnSchemaAsync(CancellationToken) DbDataReader.GetStream(int) DbDataReader.GetTextReader(int) DbDataReader.IsDBNullAsync(int) DbDataReader.IsDBNullAsync(int, CancellationToken) DbDataReader.NextResultAsync() DbDataReader.NextResultAsync(CancellationToken) DbDataReader.ReadAsync() DbDataReader.ReadAsync(CancellationToken) DbDataReader.VisibleFieldCount MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlNestedDataReader : DbDataReader, IEnumerable, IDataReader, IDataRecord, IDisposable, IAsyncDisposable Properties | Edit this page View Source Depth Gets a value indicating the depth of nesting for the current row. Declaration public override int Depth { get; } Property Value Type Description int The depth of nesting for the current row. Overrides DbDataReader.Depth | Edit this page View Source FieldCount When overridden in a derived class, gets the number of columns in the current row. Declaration public override int FieldCount { get; } Property Value Type Description int The number of columns in the current row. Overrides DbDataReader.FieldCount Exceptions Type Condition NotSupportedException There is no current connection to an instance of SQL Server. | Edit this page View Source HasRows When overridden in a derived class, gets a value that indicates whether this DbDataReader contains one or more rows. Declaration public override bool HasRows { get; } Property Value Type Description bool true if the DbDataReader contains one or more rows; otherwise, false. Overrides DbDataReader.HasRows | Edit this page View Source IsClosed When overridden in a derived class, gets a value indicating whether the DbDataReader is closed. Declaration public override bool IsClosed { get; } Property Value Type Description bool true if the DbDataReader is closed; otherwise, false. Overrides DbDataReader.IsClosed Exceptions Type Condition InvalidOperationException The DbDataReader is closed. | Edit this page View Source this[int] When overridden in a derived class, gets the value of the specified column as an instance of object. Declaration public override object this[int ordinal] { get; } Parameters Type Name Description int ordinal The zero-based column ordinal. Property Value Type Description object The value of the specified column. Overrides DbDataReader.this[int] Exceptions Type Condition IndexOutOfRangeException The column index is out of range. | Edit this page View Source this[string] When overridden in a derived class, gets the value of the specified column as an instance of object. Declaration public override object this[string name] { get; } Parameters Type Name Description string name The name of the column. Property Value Type Description object The value of the specified column. Overrides DbDataReader.this[string] Exceptions Type Condition IndexOutOfRangeException No column with the specified name was found. | Edit this page View Source RecordsAffected When overridden in a derived class, gets the number of rows changed, inserted, or deleted by execution of the SQL statement. Declaration public override int RecordsAffected { get; } Property Value Type Description int The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed. Overrides DbDataReader.RecordsAffected Methods | Edit this page View Source Close() Closes the DbDataReader object. Declaration public override void Close() Overrides DbDataReader.Close() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the DbDataReader and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release managed and unmanaged resources; false to release only unmanaged resources. Overrides DbDataReader.Dispose(bool) | Edit this page View Source GetBoolean(int) When overridden in a derived class, gets the value of the specified column as a Boolean. Declaration public override bool GetBoolean(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description bool The value of the specified column. Overrides DbDataReader.GetBoolean(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetByte(int) When overridden in a derived class, gets the value of the specified column as a byte. Declaration public override byte GetByte(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description byte The value of the specified column. Overrides DbDataReader.GetByte(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetBytes(int, long, byte[]?, int, int) When overridden in a derived class, reads a specified number of bytes from the specified column starting at a specified index and writes them to a buffer starting at a specified position in the buffer. Declaration public override long GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) Parameters Type Name Description int ordinal The zero-based column ordinal. long dataOffset The index within the row from which to begin the read operation. byte[] buffer The buffer into which to copy the data. int bufferOffset The index with the buffer to which the data will be copied. int length The maximum number of bytes to read. Returns Type Description long The actual number of bytes read. Overrides DbDataReader.GetBytes(int, long, byte[], int, int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetChar(int) When overridden in a derived class, gets the value of the specified column as a single character. Declaration public override char GetChar(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description char The value of the specified column. Overrides DbDataReader.GetChar(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetChars(int, long, char[]?, int, int) When overridden in a derived class, reads a specified number of characters from a specified column starting at a specified index, and writes them to a buffer starting at a specified position. Declaration public override long GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) Parameters Type Name Description int ordinal The zero-based column ordinal. long dataOffset The index within the row from which to begin the read operation. char[] buffer The buffer into which to copy the data. int bufferOffset The index with the buffer to which the data will be copied. int length The maximum number of characters to read. Returns Type Description long The actual number of characters read. Overrides DbDataReader.GetChars(int, long, char[], int, int) | Edit this page View Source GetData(int) Returns a nested data reader for the requested column. The column type must be a record or a to Npgsql known composite type, or an array thereof. Declaration public NpgsqlNestedDataReader GetData(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description NpgsqlNestedDataReader A data reader. | Edit this page View Source GetDataTypeName(int) When overridden in a derived class, gets name of the data type of the specified column. Declaration public override string GetDataTypeName(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description string The name of the data type. Overrides DbDataReader.GetDataTypeName(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. | Edit this page View Source GetDateTime(int) When overridden in a derived class, gets the value of the specified column as a DateTime object. Declaration public override DateTime GetDateTime(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description DateTime The value of the specified column. Overrides DbDataReader.GetDateTime(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetDbDataReader(int) Returns a DbDataReader object for the requested column ordinal that can be overridden with a provider-specific implementation. Declaration protected override DbDataReader GetDbDataReader(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description DbDataReader A DbDataReader object. Overrides DbDataReader.GetDbDataReader(int) | Edit this page View Source GetDecimal(int) When overridden in a derived class, gets the value of the specified column as a decimal. Declaration public override decimal GetDecimal(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description decimal The value of the specified column. Overrides DbDataReader.GetDecimal(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetDouble(int) When overridden in a derived class, gets the value of the specified column as a double-precision floating point number. Declaration public override double GetDouble(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description double The value of the specified column. Overrides DbDataReader.GetDouble(int) Exceptions Type Condition InvalidCastException The specified cast is not valid. | Edit this page View Source GetEnumerator() When overridden in a derived class, returns an enumerator that can be used to iterate through the rows in the data reader. Declaration public override IEnumerator GetEnumerator() Returns Type Description IEnumerator An enumerator that can be used to iterate through the rows in the data reader. Overrides DbDataReader.GetEnumerator() | Edit this page View Source GetFieldType(int) When overridden in a derived class, gets the data type of the specified column. Declaration public override Type GetFieldType(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description Type The data type of the specified column. Overrides DbDataReader.GetFieldType(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetFieldValue<T>(int) Gets the value of the specified column as the requested type. Declaration public override T GetFieldValue<T>(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description T The value of the specified column. Type Parameters Name Description T The type of the value to be returned. Overrides DbDataReader.GetFieldValue<T>(int) Exceptions Type Condition InvalidOperationException The connection was dropped or closed during data retrieval. -or- The data reader was closed during data retrieval. -or- There is no data ready to be read (for example, the first Read() hasn't been called, or it returned false). -or- The reader tried to read a previously-read column in sequential mode. -or- There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream. IndexOutOfRangeException The column index is out of range. InvalidCastException The value returned by the database doesn't match or cannot be cast to T. | Edit this page View Source GetFloat(int) When overridden in a derived class, gets the value of the specified column as a single-precision floating point number. Declaration public override float GetFloat(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description float The value of the specified column. Overrides DbDataReader.GetFloat(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetGuid(int) When overridden in a derived class, gets the value of the specified column as a globally unique identifier (GUID). Declaration public override Guid GetGuid(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description Guid The value of the specified column. Overrides DbDataReader.GetGuid(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetInt16(int) When overridden in a derived class, gets the value of the specified column as a 16-bit signed integer. Declaration public override short GetInt16(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description short The value of the specified column. Overrides DbDataReader.GetInt16(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetInt32(int) When overridden in a derived class, gets the value of the specified column as a 32-bit signed integer. Declaration public override int GetInt32(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description int The value of the specified column. Overrides DbDataReader.GetInt32(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetInt64(int) When overridden in a derived class, gets the value of the specified column as a 64-bit signed integer. Declaration public override long GetInt64(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description long The value of the specified column. Overrides DbDataReader.GetInt64(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetName(int) When overridden in a derived class, gets the name of the column, given the zero-based column ordinal. Declaration public override string GetName(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description string The name of the specified column. Overrides DbDataReader.GetName(int) | Edit this page View Source GetOrdinal(string) When overridden in a derived class, gets the column ordinal given the name of the column. Declaration public override int GetOrdinal(string name) Parameters Type Name Description string name The name of the column. Returns Type Description int The zero-based column ordinal. Overrides DbDataReader.GetOrdinal(string) Exceptions Type Condition IndexOutOfRangeException The name specified is not a valid column name. | Edit this page View Source GetString(int) When overridden in a derived class, gets the value of the specified column as an instance of string. Declaration public override string GetString(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description string The value of the specified column. Overrides DbDataReader.GetString(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. | Edit this page View Source GetValue(int) When overridden in a derived class, gets the value of the specified column as an instance of object. Declaration public override object GetValue(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description object The value of the specified column. Overrides DbDataReader.GetValue(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. | Edit this page View Source GetValues(object[]) When overridden in a derived class, populates an array of objects with the column values of the current row. Declaration public override int GetValues(object[] values) Parameters Type Name Description object[] values An array of object into which to copy the attribute columns. Returns Type Description int The number of instances of object in the array. Overrides DbDataReader.GetValues(object[]) | Edit this page View Source IsDBNull(int) When overridden in a derived class, gets a value that indicates whether the column contains nonexistent or missing values. Declaration public override bool IsDBNull(int ordinal) Parameters Type Name Description int ordinal The zero-based column ordinal. Returns Type Description bool true if the specified column is equivalent to DBNull; otherwise, false. Overrides DbDataReader.IsDBNull(int) Exceptions Type Condition IndexOutOfRangeException The column index is out of range. | Edit this page View Source NextResult() When overridden in a derived class, advances the reader to the next result when reading the results of a batch of statements. Declaration public override bool NextResult() Returns Type Description bool true if there are more result sets; otherwise, false. Overrides DbDataReader.NextResult() | Edit this page View Source Read() When overridden in a derived class, advances the reader to the next record in a result set. Declaration public override bool Read() Returns Type Description bool true if there are more rows; otherwise, false. Overrides DbDataReader.Read() Implements IEnumerable IDataReader IDataRecord IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlNoticeEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlNoticeEventArgs.html",
    "title": "Class NpgsqlNoticeEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlNoticeEventArgs Provides data for a PostgreSQL notice event. Inheritance object EventArgs NpgsqlNoticeEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlNoticeEventArgs : EventArgs Properties | Edit this page View Source Notice The Notice that was sent from the database. Declaration public PostgresNotice Notice { get; } Property Value Type Description PostgresNotice"
  },
  "doc/api/Npgsql.NpgsqlNotificationEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlNotificationEventArgs.html",
    "title": "Class NpgsqlNotificationEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlNotificationEventArgs Provides information on a PostgreSQL notification. Notifications are sent when your connection has registered for notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel. Inheritance object EventArgs NpgsqlNotificationEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlNotificationEventArgs : EventArgs Properties | Edit this page View Source Channel The channel on which the notification was sent. Declaration public string Channel { get; } Property Value Type Description string | Edit this page View Source PID Process ID of the PostgreSQL backend that sent this notification. Declaration public int PID { get; } Property Value Type Description int | Edit this page View Source Payload An optional payload string that was sent with this notification. Declaration public string Payload { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.NpgsqlOperationInProgressException.html": {
    "href": "doc/api/Npgsql.NpgsqlOperationInProgressException.html",
    "title": "Class NpgsqlOperationInProgressException | Npgsql Documentation",
    "keywords": "Class NpgsqlOperationInProgressException Thrown when trying to use a connection that is already busy performing some other operation. Provides information on the already-executing operation to help with debugging. Inheritance object Exception SystemException ExternalException DbException NpgsqlException NpgsqlOperationInProgressException Implements ISerializable Inherited Members NpgsqlException.IsTransient NpgsqlException.BatchCommand DbException.SqlState ExternalException.ToString() ExternalException.ErrorCode Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlOperationInProgressException : NpgsqlException, ISerializable Constructors | Edit this page View Source NpgsqlOperationInProgressException(NpgsqlCommand) Creates a new instance of NpgsqlOperationInProgressException. Declaration public NpgsqlOperationInProgressException(NpgsqlCommand command) Parameters Type Name Description NpgsqlCommand command A command which was in progress when the operation which triggered this exception was executed. Properties | Edit this page View Source CommandInProgress If the connection is busy with another command, this will contain a reference to that command. Otherwise, if the connection if busy with another type of operation (e.g. COPY), contains null. Declaration public NpgsqlCommand? CommandInProgress { get; } Property Value Type Description NpgsqlCommand Implements ISerializable"
  },
  "doc/api/Npgsql.NpgsqlParameter-1.html": {
    "href": "doc/api/Npgsql.NpgsqlParameter-1.html",
    "title": "Class NpgsqlParameter<T> | Npgsql Documentation",
    "keywords": "Class NpgsqlParameter<T> A generic version of NpgsqlParameter which provides more type safety and avoids boxing of value types. Use TypedValue instead of Value. Inheritance object MarshalByRefObject DbParameter NpgsqlParameter NpgsqlParameter<T> Implements IDbDataParameter IDataParameter ICloneable Inherited Members NpgsqlParameter.ParameterName NpgsqlParameter.NpgsqlValue NpgsqlParameter.DbType NpgsqlParameter.NpgsqlDbType NpgsqlParameter.DataTypeName NpgsqlParameter.IsNullable NpgsqlParameter.Direction NpgsqlParameter.Precision NpgsqlParameter.Scale NpgsqlParameter.Size NpgsqlParameter.SourceColumn NpgsqlParameter.SourceVersion NpgsqlParameter.SourceColumnNullMapping NpgsqlParameter.Collection NpgsqlParameter.PostgresType NpgsqlParameter.ResetDbType() NpgsqlParameter.Clone() MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlParameter<T> : NpgsqlParameter, IDbDataParameter, IDataParameter, ICloneable Type Parameters Name Description T The type of the value that will be stored in the parameter. Constructors | Edit this page View Source NpgsqlParameter() Initializes a new instance of NpgsqlParameter<T>. Declaration public NpgsqlParameter() | Edit this page View Source NpgsqlParameter(string, NpgsqlDbType) Initializes a new instance of NpgsqlParameter<T> with a parameter name and type. Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType npgsqlDbType) Parameters Type Name Description string parameterName NpgsqlDbType npgsqlDbType | Edit this page View Source NpgsqlParameter(string, DbType) Initializes a new instance of NpgsqlParameter<T> with a parameter name and type. Declaration public NpgsqlParameter(string parameterName, DbType dbType) Parameters Type Name Description string parameterName DbType dbType | Edit this page View Source NpgsqlParameter(string, T) Initializes a new instance of NpgsqlParameter<T> with a parameter name and value. Declaration public NpgsqlParameter(string parameterName, T value) Parameters Type Name Description string parameterName T value Properties | Edit this page View Source TypedValue Gets or sets the strongly-typed value of the parameter. Declaration public T? TypedValue { get; set; } Property Value Type Description T | Edit this page View Source Value Gets or sets the value of the parameter. This delegates to TypedValue. Declaration public override object? Value { get; set; } Property Value Type Description object Overrides NpgsqlParameter.Value Implements IDbDataParameter IDataParameter ICloneable"
  },
  "doc/api/Npgsql.NpgsqlParameter.html": {
    "href": "doc/api/Npgsql.NpgsqlParameter.html",
    "title": "Class NpgsqlParameter | Npgsql Documentation",
    "keywords": "Class NpgsqlParameter This class represents a parameter to a command that will be sent to server Inheritance object MarshalByRefObject DbParameter NpgsqlParameter NpgsqlParameter<T> Implements IDbDataParameter IDataParameter ICloneable Inherited Members MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public class NpgsqlParameter : DbParameter, IDbDataParameter, IDataParameter, ICloneable Constructors | Edit this page View Source NpgsqlParameter() Initializes a new instance of the NpgsqlParameter class. Declaration public NpgsqlParameter() | Edit this page View Source NpgsqlParameter(string?, NpgsqlDbType) Initializes a new instance of the NpgsqlParameter class with the parameter name and the data type. Declaration public NpgsqlParameter(string? parameterName, NpgsqlDbType parameterType) Parameters Type Name Description string parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. | Edit this page View Source NpgsqlParameter(string?, NpgsqlDbType, int) Initializes a new instance of the NpgsqlParameter. Declaration public NpgsqlParameter(string? parameterName, NpgsqlDbType parameterType, int size) Parameters Type Name Description string parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. int size The length of the parameter. | Edit this page View Source NpgsqlParameter(string?, NpgsqlDbType, int, string?) Initializes a new instance of the NpgsqlParameter Declaration public NpgsqlParameter(string? parameterName, NpgsqlDbType parameterType, int size, string? sourceColumn) Parameters Type Name Description string parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. int size The length of the parameter. string sourceColumn The name of the source column. | Edit this page View Source NpgsqlParameter(string, NpgsqlDbType, int, string?, ParameterDirection, bool, byte, byte, DataRowVersion, object) Initializes a new instance of the NpgsqlParameter. Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string? sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value) Parameters Type Name Description string parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. int size The length of the parameter. string sourceColumn The name of the source column. ParameterDirection direction One of the ParameterDirection values. bool isNullable true if the value of the field can be null, otherwise false. byte precision The total number of digits to the left and right of the decimal point to which Value is resolved. byte scale The total number of decimal places to which Value is resolved. DataRowVersion sourceVersion One of the DataRowVersion values. object value An object that is the value of the NpgsqlParameter. | Edit this page View Source NpgsqlParameter(string?, DbType) Initializes a new instance of the NpgsqlParameter. Declaration public NpgsqlParameter(string? parameterName, DbType parameterType) Parameters Type Name Description string parameterName The name of the parameter to map. DbType parameterType One of the DbType values. | Edit this page View Source NpgsqlParameter(string?, DbType, int) Initializes a new instance of the NpgsqlParameter. Declaration public NpgsqlParameter(string? parameterName, DbType parameterType, int size) Parameters Type Name Description string parameterName The name of the parameter to map. DbType parameterType One of the DbType values. int size The length of the parameter. | Edit this page View Source NpgsqlParameter(string?, DbType, int, string?) Initializes a new instance of the NpgsqlParameter. Declaration public NpgsqlParameter(string? parameterName, DbType parameterType, int size, string? sourceColumn) Parameters Type Name Description string parameterName The name of the parameter to map. DbType parameterType One of the DbType values. int size The length of the parameter. string sourceColumn The name of the source column. | Edit this page View Source NpgsqlParameter(string, DbType, int, string?, ParameterDirection, bool, byte, byte, DataRowVersion, object) Initializes a new instance of the NpgsqlParameter. Declaration public NpgsqlParameter(string parameterName, DbType parameterType, int size, string? sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value) Parameters Type Name Description string parameterName The name of the parameter to map. DbType parameterType One of the DbType values. int size The length of the parameter. string sourceColumn The name of the source column. ParameterDirection direction One of the ParameterDirection values. bool isNullable true if the value of the field can be null, otherwise false. byte precision The total number of digits to the left and right of the decimal point to which Value is resolved. byte scale The total number of decimal places to which Value is resolved. DataRowVersion sourceVersion One of the DataRowVersion values. object value An object that is the value of the NpgsqlParameter. | Edit this page View Source NpgsqlParameter(string?, object?) Initializes a new instance of the NpgsqlParameter class with the parameter name and a value. Declaration public NpgsqlParameter(string? parameterName, object? value) Parameters Type Name Description string parameterName The name of the parameter to map. object value The value of the NpgsqlParameter. Remarks When you specify an object in the value parameter, the DbType is inferred from the CLR type. When using this constructor, you must be aware of a possible misuse of the constructor which takes a DbType parameter. This happens when calling this constructor passing an int 0 and the compiler thinks you are passing a value of DbType. Use ToInt32(object) for example to have compiler calling the correct constructor. Properties | Edit this page View Source Collection The collection to which this parameter belongs, if any. Declaration public NpgsqlParameterCollection? Collection { get; set; } Property Value Type Description NpgsqlParameterCollection | Edit this page View Source DataTypeName Used to specify which PostgreSQL type will be sent to the database for this parameter. Declaration public string? DataTypeName { get; set; } Property Value Type Description string | Edit this page View Source DbType Gets or sets the DbType of the parameter. Declaration public override sealed DbType DbType { get; set; } Property Value Type Description DbType One of the DbType values. The default is object. Overrides DbParameter.DbType | Edit this page View Source Direction Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter. Declaration public override sealed ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection One of the ParameterDirection values. The default is Input. Overrides DbParameter.Direction Exceptions Type Condition ArgumentException The property is not set to one of the valid ParameterDirection values. | Edit this page View Source IsNullable Gets or sets a value that indicates whether the parameter accepts null values. Declaration public override sealed bool IsNullable { get; set; } Property Value Type Description bool true if null values are accepted; otherwise false. The default is false. Overrides DbParameter.IsNullable | Edit this page View Source NpgsqlDbType Gets or sets the NpgsqlDbType of the parameter. Declaration [DbProviderSpecificTypeProperty(true)] public NpgsqlDbType NpgsqlDbType { get; set; } Property Value Type Description NpgsqlDbType One of the NpgsqlDbType values. The default is NpgsqlDbType. | Edit this page View Source NpgsqlValue Gets or sets the value of the parameter. Declaration [TypeConverter(typeof(StringConverter))] public object? NpgsqlValue { get; set; } Property Value Type Description object An object that is the value of the parameter. The default value is null. | Edit this page View Source ParameterName Gets or sets The name of the NpgsqlParameter. Declaration public override sealed string ParameterName { get; set; } Property Value Type Description string The name of the NpgsqlParameter. The default is an empty string. Overrides DbParameter.ParameterName | Edit this page View Source PostgresType The PostgreSQL data type, such as int4 or text, as discovered from pg_type. This property is automatically set if parameters have been derived via DeriveParameters(NpgsqlCommand) and can be used to acquire additional information about the parameters' data type. Declaration public PostgresType? PostgresType { get; } Property Value Type Description PostgresType | Edit this page View Source Precision Gets or sets the maximum number of digits used to represent the Value property. Declaration public byte Precision { get; set; } Property Value Type Description byte The maximum number of digits used to represent the Value property. The default value is 0, which indicates that the data provider sets the precision for Value. | Edit this page View Source Scale Gets or sets the number of decimal places to which Value is resolved. Declaration public byte Scale { get; set; } Property Value Type Description byte The number of decimal places to which Value is resolved. The default is 0. | Edit this page View Source Size Gets or sets the maximum size, in bytes, of the data within the column. Declaration public override sealed int Size { get; set; } Property Value Type Description int The maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value. Overrides DbParameter.Size | Edit this page View Source SourceColumn Gets or sets the name of the source column mapped to the DataSet and used for loading or returning the Value. Declaration public override sealed string SourceColumn { get; set; } Property Value Type Description string The name of the source column mapped to the DataSet. The default is an empty string. Overrides DbParameter.SourceColumn | Edit this page View Source SourceColumnNullMapping Gets or sets a value which indicates whether the source column is nullable. This allows DbCommandBuilder to correctly generate Update statements for nullable columns. Declaration public override sealed bool SourceColumnNullMapping { get; set; } Property Value Type Description bool true if the source column is nullable; false if it is not. Overrides DbParameter.SourceColumnNullMapping | Edit this page View Source SourceVersion Gets or sets the DataRowVersion to use when you load Value. Declaration public override sealed DataRowVersion SourceVersion { get; set; } Property Value Type Description DataRowVersion One of the DataRowVersion values. The default is Current. Overrides DbParameter.SourceVersion Exceptions Type Condition ArgumentException The property is not set to one of the DataRowVersion values. | Edit this page View Source Value Gets or sets the value of the parameter. Declaration [TypeConverter(typeof(StringConverter))] public override object? Value { get; set; } Property Value Type Description object An object that is the value of the parameter. The default value is null. Overrides DbParameter.Value Methods | Edit this page View Source Clone() Creates a new NpgsqlParameter that is a copy of the current instance. Declaration public NpgsqlParameter Clone() Returns Type Description NpgsqlParameter A new NpgsqlParameter that is a copy of this instance. | Edit this page View Source ResetDbType() Resets the DbType property to its original settings. Declaration public override void ResetDbType() Overrides DbParameter.ResetDbType() Implements IDbDataParameter IDataParameter ICloneable"
  },
  "doc/api/Npgsql.NpgsqlParameterCollection.html": {
    "href": "doc/api/Npgsql.NpgsqlParameterCollection.html",
    "title": "Class NpgsqlParameterCollection | Npgsql Documentation",
    "keywords": "Class NpgsqlParameterCollection Represents a collection of parameters relevant to a NpgsqlCommand as well as their respective mappings to columns in a DataSet. Inheritance object MarshalByRefObject DbParameterCollection NpgsqlParameterCollection Implements IDataParameterCollection IList ICollection IList<NpgsqlParameter> ICollection<NpgsqlParameter> IEnumerable<NpgsqlParameter> IEnumerable Inherited Members MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlParameterCollection : DbParameterCollection, IDataParameterCollection, IList, ICollection, IList<NpgsqlParameter>, ICollection<NpgsqlParameter>, IEnumerable<NpgsqlParameter>, IEnumerable Properties | Edit this page View Source Count Gets the number of NpgsqlParameter objects in the collection. Declaration public override int Count { get; } Property Value Type Description int The number of NpgsqlParameter objects in the collection. Overrides DbParameterCollection.Count | Edit this page View Source IsFixedSize Specifies whether the collection is a fixed size. Declaration public override bool IsFixedSize { get; } Property Value Type Description bool true if the collection is a fixed size; otherwise false. Overrides DbParameterCollection.IsFixedSize | Edit this page View Source IsReadOnly Specifies whether the collection is read-only. Declaration public override bool IsReadOnly { get; } Property Value Type Description bool true if the collection is read-only; otherwise false. Overrides DbParameterCollection.IsReadOnly | Edit this page View Source IsSynchronized Specifies whether the collection is synchronized. Declaration public override bool IsSynchronized { get; } Property Value Type Description bool true if the collection is synchronized; otherwise false. Overrides DbParameterCollection.IsSynchronized | Edit this page View Source this[int] Gets the NpgsqlParameter at the specified index. Declaration public NpgsqlParameter this[int index] { get; set; } Parameters Type Name Description int index The zero-based index of the NpgsqlParameter to retrieve. Property Value Type Description NpgsqlParameter The NpgsqlParameter at the specified index. | Edit this page View Source this[string] Gets the NpgsqlParameter with the specified name. Declaration public NpgsqlParameter this[string parameterName] { get; set; } Parameters Type Name Description string parameterName The name of the NpgsqlParameter to retrieve. Property Value Type Description NpgsqlParameter The NpgsqlParameter with the specified name, or a null reference if the parameter is not found. | Edit this page View Source SyncRoot Specifies the object to be used to synchronize access to the collection. Declaration public override object SyncRoot { get; } Property Value Type Description object A object to be used to synchronize access to the DbParameterCollection. Overrides DbParameterCollection.SyncRoot Methods | Edit this page View Source Add(NpgsqlParameter) Adds the specified NpgsqlParameter object to the NpgsqlParameterCollection. Declaration public NpgsqlParameter Add(NpgsqlParameter value) Parameters Type Name Description NpgsqlParameter value The NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Edit this page View Source Add(object) Adds the specified DbParameter object to the DbParameterCollection. Declaration public override int Add(object value) Parameters Type Name Description object value The Value of the DbParameter to add to the collection. Returns Type Description int The index of the DbParameter object in the collection. Overrides DbParameterCollection.Add(object) | Edit this page View Source Add(string, NpgsqlDbType) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the parameter name and the data type. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType) Parameters Type Name Description string parameterName The name of the parameter. NpgsqlDbType parameterType One of the DbType values. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Edit this page View Source Add(string, NpgsqlDbType, int) Adds a NpgsqlParameter to the NpgsqlParameterCollection with the parameter name, the data type, and the column length. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size) Parameters Type Name Description string parameterName The name of the parameter. NpgsqlDbType parameterType One of the DbType values. int size The length of the column. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Edit this page View Source Add(string, NpgsqlDbType, int, string) Adds a NpgsqlParameter to the NpgsqlParameterCollection with the parameter name, the data type, the column length, and the source column name. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn) Parameters Type Name Description string parameterName The name of the parameter. NpgsqlDbType parameterType One of the DbType values. int size The length of the column. string sourceColumn The name of the source column. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Edit this page View Source AddRange(Array) Adds an array of items with the specified values to the DbParameterCollection. Declaration public override void AddRange(Array values) Parameters Type Name Description Array values An array of values of type DbParameter to add to the collection. Overrides DbParameterCollection.AddRange(Array) | Edit this page View Source AddWithValue(NpgsqlDbType, object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified data type and value. Declaration public NpgsqlParameter AddWithValue(NpgsqlDbType parameterType, object value) Parameters Type Name Description NpgsqlDbType parameterType One of the NpgsqlDbType values. object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Edit this page View Source AddWithValue(object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified value. Declaration public NpgsqlParameter AddWithValue(object value) Parameters Type Name Description object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Edit this page View Source AddWithValue(string, NpgsqlDbType, int, object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, object value) Parameters Type Name Description string parameterName The name of the NpgsqlParameter. NpgsqlDbType parameterType One of the NpgsqlDbType values. int size The length of the column. object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Edit this page View Source AddWithValue(string, NpgsqlDbType, int, string?, object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, string? sourceColumn, object value) Parameters Type Name Description string parameterName The name of the NpgsqlParameter. NpgsqlDbType parameterType One of the NpgsqlDbType values. int size The length of the column. string sourceColumn The name of the source column. object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Edit this page View Source AddWithValue(string, NpgsqlDbType, object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name, data type and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, object value) Parameters Type Name Description string parameterName The name of the NpgsqlParameter. NpgsqlDbType parameterType One of the NpgsqlDbType values. object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Edit this page View Source AddWithValue(string, object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, object value) Parameters Type Name Description string parameterName The name of the NpgsqlParameter. object value The value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The parameter that was added. | Edit this page View Source Clear() Removes all items from the collection. Declaration public override void Clear() Overrides DbParameterCollection.Clear() | Edit this page View Source Contains(NpgsqlParameter) Report whether the specified parameter is present in the collection. Declaration public bool Contains(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to find. Returns Type Description bool True if the parameter was found, otherwise false. | Edit this page View Source Contains(object) Indicates whether a DbParameter with the specified Value is contained in the collection. Declaration public override bool Contains(object value) Parameters Type Name Description object value The Value of the DbParameter to look for in the collection. Returns Type Description bool true if the DbParameter is in the collection; otherwise false. Overrides DbParameterCollection.Contains(object) | Edit this page View Source Contains(string) Indicates whether a DbParameter with the specified name exists in the collection. Declaration public override bool Contains(string parameterName) Parameters Type Name Description string parameterName Returns Type Description bool true if the DbParameter is in the collection; otherwise false. Overrides DbParameterCollection.Contains(string) | Edit this page View Source CopyTo(NpgsqlParameter[], int) Convert collection to a System.Array. Declaration public void CopyTo(NpgsqlParameter[] array, int arrayIndex) Parameters Type Name Description NpgsqlParameter[] array Destination array. int arrayIndex Starting index in destination array. | Edit this page View Source CopyTo(Array, int) Copies an array of items to the collection starting at the specified index. Declaration public override void CopyTo(Array array, int index) Parameters Type Name Description Array array The array of items to copy to the collection. int index The index in the collection to copy the items. Overrides DbParameterCollection.CopyTo(Array, int) | Edit this page View Source GetEnumerator() Exposes the GetEnumerator() method, which supports a simple iteration over a collection by a .NET data provider. Declaration public override IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator that can be used to iterate through the collection. Overrides DbParameterCollection.GetEnumerator() | Edit this page View Source GetParameter(int) Returns the DbParameter object at the specified index in the collection. Declaration protected override DbParameter GetParameter(int index) Parameters Type Name Description int index The index of the DbParameter in the collection. Returns Type Description DbParameter The DbParameter object at the specified index in the collection. Overrides DbParameterCollection.GetParameter(int) | Edit this page View Source GetParameter(string) Returns DbParameter the object with the specified name. Declaration protected override DbParameter GetParameter(string parameterName) Parameters Type Name Description string parameterName The name of the DbParameter in the collection. Returns Type Description DbParameter The DbParameter the object with the specified name. Overrides DbParameterCollection.GetParameter(string) | Edit this page View Source IndexOf(NpgsqlParameter) Report the offset within the collection of the given parameter. Declaration public int IndexOf(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to find. Returns Type Description int Index of the parameter, or -1 if the parameter is not present. | Edit this page View Source IndexOf(object) Returns the index of the specified DbParameter object. Declaration public override int IndexOf(object value) Parameters Type Name Description object value The DbParameter object in the collection. Returns Type Description int The index of the specified DbParameter object. Overrides DbParameterCollection.IndexOf(object) | Edit this page View Source IndexOf(string) Returns the index of the DbParameter object with the specified name. Declaration public override int IndexOf(string parameterName) Parameters Type Name Description string parameterName The name of the DbParameter object in the collection. Returns Type Description int The index of the DbParameter object with the specified name. Overrides DbParameterCollection.IndexOf(string) | Edit this page View Source Insert(int, NpgsqlParameter) Insert the specified parameter into the collection. Declaration public void Insert(int index, NpgsqlParameter item) Parameters Type Name Description int index Index of the existing parameter before which to insert the new one. NpgsqlParameter item Parameter to insert. | Edit this page View Source Insert(int, object) Inserts the specified index of the DbParameter object with the specified name into the collection at the specified index. Declaration public override void Insert(int index, object value) Parameters Type Name Description int index The index at which to insert the DbParameter object. object value The DbParameter object to insert into the collection. Overrides DbParameterCollection.Insert(int, object) | Edit this page View Source Remove(NpgsqlParameter) Remove the specified parameter from the collection. Declaration public bool Remove(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to remove. Returns Type Description bool True if the parameter was found and removed, otherwise false. | Edit this page View Source Remove(object) Removes the specified NpgsqlParameter from the collection. Declaration public override void Remove(object value) Parameters Type Name Description object value The NpgsqlParameter to remove from the collection. Overrides DbParameterCollection.Remove(object) | Edit this page View Source Remove(string) Removes the specified NpgsqlParameter from the collection. Declaration public void Remove(string parameterName) Parameters Type Name Description string parameterName The name of the NpgsqlParameter to remove from the collection. | Edit this page View Source RemoveAt(int) Removes the specified NpgsqlParameter from the collection using a specific index. Declaration public override void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the parameter. Overrides DbParameterCollection.RemoveAt(int) | Edit this page View Source RemoveAt(string) Removes the DbParameter object with the specified name from the collection. Declaration public override void RemoveAt(string parameterName) Parameters Type Name Description string parameterName The name of the DbParameter object to remove. Overrides DbParameterCollection.RemoveAt(string) | Edit this page View Source SetParameter(int, DbParameter) Sets the DbParameter object at the specified index to a new value. Declaration protected override void SetParameter(int index, DbParameter value) Parameters Type Name Description int index The index where the DbParameter object is located. DbParameter value The new DbParameter value. Overrides DbParameterCollection.SetParameter(int, DbParameter) | Edit this page View Source SetParameter(string, DbParameter) Sets the DbParameter object with the specified name to a new value. Declaration protected override void SetParameter(string parameterName, DbParameter value) Parameters Type Name Description string parameterName The name of the DbParameter object in the collection. DbParameter value The new DbParameter value. Overrides DbParameterCollection.SetParameter(string, DbParameter) | Edit this page View Source ToArray() Convert collection to a System.Array. Declaration public NpgsqlParameter[] ToArray() Returns Type Description NpgsqlParameter[] NpgsqlParameter[] | Edit this page View Source TryGetValue(string, out NpgsqlParameter?) Gets a value indicating whether a NpgsqlParameter with the specified parameter name exists in the collection. Declaration public bool TryGetValue(string parameterName, out NpgsqlParameter? parameter) Parameters Type Name Description string parameterName The name of the NpgsqlParameter object to find. NpgsqlParameter parameter A reference to the requested parameter is returned in this out param if it is found in the list. This value is null if the parameter is not found. Returns Type Description bool true if the collection contains the parameter and param will contain the parameter; otherwise, false. Implements IDataParameterCollection IList ICollection IList<T> ICollection<T> IEnumerable<T> IEnumerable"
  },
  "doc/api/Npgsql.NpgsqlRawCopyStream.html": {
    "href": "doc/api/Npgsql.NpgsqlRawCopyStream.html",
    "title": "Class NpgsqlRawCopyStream | Npgsql Documentation",
    "keywords": "Class NpgsqlRawCopyStream Provides an API for a raw binary COPY operation, a high-performance data import/export mechanism to a PostgreSQL table. Initiated by BeginRawBinaryCopy(string) Inheritance object MarshalByRefObject Stream NpgsqlRawCopyStream Implements IDisposable IAsyncDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) Stream.WriteByte(byte) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlRawCopyStream : Stream, IDisposable, IAsyncDisposable Remarks See https://www.postgresql.org/docs/current/static/sql-copy.html. Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanTimeout Gets a value that determines whether the current stream can time out. Declaration public override bool CanTimeout { get; } Property Value Type Description bool A value that determines whether the current stream can time out. Overrides Stream.CanTimeout | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. Declaration public override int ReadTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to read before timing out. Overrides Stream.ReadTimeout Exceptions Type Condition InvalidOperationException The ReadTimeout method always throws an InvalidOperationException. | Edit this page View Source WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. Declaration public override int WriteTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to write before timing out. Overrides Stream.WriteTimeout Exceptions Type Condition InvalidOperationException The WriteTimeout method always throws an InvalidOperationException. Methods | Edit this page View Source Cancel() Cancels and terminates an ongoing operation. Any data already written will be discarded. Declaration public void Cancel() | Edit this page View Source CancelAsync() Cancels and terminates an ongoing operation. Any data already written will be discarded. Declaration public Task CancelAsync() Returns Type Description Task | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Stream.Dispose(bool) | Edit this page View Source DisposeAsync() Asynchronously releases the unmanaged resources used by the Stream. Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. Overrides Stream.DisposeAsync() | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> span) Parameters Type Name Description Span<byte> span Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Implements IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatedEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatedEventArgs.html",
    "title": "Class NpgsqlRowUpdatedEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlRowUpdatedEventArgs Inheritance object EventArgs RowUpdatedEventArgs NpgsqlRowUpdatedEventArgs Inherited Members RowUpdatedEventArgs.CopyToRows(DataRow[]) RowUpdatedEventArgs.CopyToRows(DataRow[], int) RowUpdatedEventArgs.Command RowUpdatedEventArgs.Errors RowUpdatedEventArgs.RecordsAffected RowUpdatedEventArgs.Row RowUpdatedEventArgs.RowCount RowUpdatedEventArgs.StatementType RowUpdatedEventArgs.Status RowUpdatedEventArgs.TableMapping EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public class NpgsqlRowUpdatedEventArgs : RowUpdatedEventArgs Constructors | Edit this page View Source NpgsqlRowUpdatedEventArgs(DataRow, IDbCommand?, StatementType, DataTableMapping) Declaration public NpgsqlRowUpdatedEventArgs(DataRow dataRow, IDbCommand? command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description DataRow dataRow IDbCommand command StatementType statementType DataTableMapping tableMapping"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatedEventHandler.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatedEventHandler.html",
    "title": "Delegate NpgsqlRowUpdatedEventHandler | Npgsql Documentation",
    "keywords": "Delegate NpgsqlRowUpdatedEventHandler Represents the method that handles the RowUpdated events. Namespace: Npgsql Assembly: Npgsql.dll Syntax public delegate void NpgsqlRowUpdatedEventHandler(object sender, NpgsqlRowUpdatedEventArgs e) Parameters Type Name Description object sender The source of the event. NpgsqlRowUpdatedEventArgs e An NpgsqlRowUpdatedEventArgs that contains the event data."
  },
  "doc/api/Npgsql.NpgsqlRowUpdatingEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatingEventArgs.html",
    "title": "Class NpgsqlRowUpdatingEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlRowUpdatingEventArgs Inheritance object EventArgs RowUpdatingEventArgs NpgsqlRowUpdatingEventArgs Inherited Members RowUpdatingEventArgs.BaseCommand RowUpdatingEventArgs.Command RowUpdatingEventArgs.Errors RowUpdatingEventArgs.Row RowUpdatingEventArgs.StatementType RowUpdatingEventArgs.Status RowUpdatingEventArgs.TableMapping EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public class NpgsqlRowUpdatingEventArgs : RowUpdatingEventArgs Constructors | Edit this page View Source NpgsqlRowUpdatingEventArgs(DataRow, IDbCommand?, StatementType, DataTableMapping) Declaration public NpgsqlRowUpdatingEventArgs(DataRow dataRow, IDbCommand? command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description DataRow dataRow IDbCommand command StatementType statementType DataTableMapping tableMapping"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatingEventHandler.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatingEventHandler.html",
    "title": "Delegate NpgsqlRowUpdatingEventHandler | Npgsql Documentation",
    "keywords": "Delegate NpgsqlRowUpdatingEventHandler Represents the method that handles the RowUpdating events. Namespace: Npgsql Assembly: Npgsql.dll Syntax public delegate void NpgsqlRowUpdatingEventHandler(object sender, NpgsqlRowUpdatingEventArgs e) Parameters Type Name Description object sender The source of the event. NpgsqlRowUpdatingEventArgs e An NpgsqlRowUpdatingEventArgs that contains the event data."
  },
  "doc/api/Npgsql.NpgsqlSlimDataSourceBuilder.html": {
    "href": "doc/api/Npgsql.NpgsqlSlimDataSourceBuilder.html",
    "title": "Class NpgsqlSlimDataSourceBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlSlimDataSourceBuilder Provides a simple API for configuring and creating an NpgsqlDataSource, from which database connections can be obtained. Inheritance object NpgsqlSlimDataSourceBuilder Implements INpgsqlTypeMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlSlimDataSourceBuilder : INpgsqlTypeMapper Remarks On this builder, various features are disabled by default; unless you're looking to save on code size (e.g. when publishing with NativeAOT), use NpgsqlDataSourceBuilder instead. Constructors | Edit this page View Source NpgsqlSlimDataSourceBuilder(string?) Constructs a new NpgsqlSlimDataSourceBuilder, optionally starting out from the given connectionString. Declaration public NpgsqlSlimDataSourceBuilder(string? connectionString = null) Parameters Type Name Description string connectionString Properties | Edit this page View Source ConnectionString Returns the connection string, as currently configured on the builder. Declaration public string ConnectionString { get; } Property Value Type Description string | Edit this page View Source ConnectionStringBuilder A connection string builder that can be used to configured the connection string on the builder. Declaration public NpgsqlConnectionStringBuilder ConnectionStringBuilder { get; } Property Value Type Description NpgsqlConnectionStringBuilder | Edit this page View Source DefaultNameTranslator The default name translator to convert CLR type names and member names. Defaults to NpgsqlSnakeCaseNameTranslator. Declaration public INpgsqlNameTranslator DefaultNameTranslator { get; set; } Property Value Type Description INpgsqlNameTranslator | Edit this page View Source Name A diagnostics name used by Npgsql when generating tracing, logging and metrics. Declaration public string? Name { get; set; } Property Value Type Description string Methods | Edit this page View Source AddTypeInfoResolverFactory(PgTypeInfoResolverFactory) Adds a type info resolver factory which can add or modify support for PostgreSQL types. Typically used by plugins. Declaration public void AddTypeInfoResolverFactory(PgTypeInfoResolverFactory factory) Parameters Type Name Description PgTypeInfoResolverFactory factory The type resolver factory to be added. | Edit this page View Source Build() Builds and returns an NpgsqlDataSource which is ready for use. Declaration public NpgsqlDataSource Build() Returns Type Description NpgsqlDataSource | Edit this page View Source BuildMultiHost() Builds and returns a NpgsqlMultiHostDataSource which is ready for use for load-balancing and failover scenarios. Declaration public NpgsqlMultiHostDataSource BuildMultiHost() Returns Type Description NpgsqlMultiHostDataSource | Edit this page View Source ConfigureJsonOptions(JsonSerializerOptions) Configures the JSON serializer options used when reading and writing all System.Text.Json data. Declaration public NpgsqlSlimDataSourceBuilder ConfigureJsonOptions(JsonSerializerOptions serializerOptions) Parameters Type Name Description JsonSerializerOptions serializerOptions Options to customize JSON serialization and deserialization. Returns Type Description NpgsqlSlimDataSourceBuilder | Edit this page View Source EnableArrays() Sets up mappings for the PostgreSQL array types. Declaration public NpgsqlSlimDataSourceBuilder EnableArrays() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableDynamicJson(Type[]?, Type[]?) Sets up dynamic System.Text.Json mappings. This allows mapping arbitrary .NET types to PostgreSQL json and jsonb types, as well as JsonNode and its derived types. Declaration public NpgsqlSlimDataSourceBuilder EnableDynamicJson(Type[]? jsonbClrTypes = null, Type[]? jsonClrTypes = null) Parameters Type Name Description Type[] jsonbClrTypes A list of CLR types to map to PostgreSQL jsonb (no need to specify Jsonb). Type[] jsonClrTypes A list of CLR types to map to PostgreSQL json (no need to specify Json). Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks Due to the dynamic nature of these mappings, they are not compatible with NativeAOT or trimming. | Edit this page View Source EnableExtraConversions() Sets up mappings for extra conversions from PostgreSQL to .NET types. Declaration public NpgsqlSlimDataSourceBuilder EnableExtraConversions() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableFullTextSearch() Sets up mappings for the PostgreSQL tsquery and tsvector types. Declaration public NpgsqlSlimDataSourceBuilder EnableFullTextSearch() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableGeometricTypes() Sets up network mappings. This allows mapping types like NpgsqlPoint and NpgsqlPath to PostgreSQL point, path and so on types. Declaration public NpgsqlSlimDataSourceBuilder EnableGeometricTypes() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableIntegratedSecurity() Enables the possibility to use GSS/SSPI authentication for connections to PostgreSQL. This does not guarantee that it will actually be used; see https://www.npgsql.org/doc/security.html for more details. Declaration public NpgsqlSlimDataSourceBuilder EnableIntegratedSecurity() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableJsonTypes() Sets up System.Text.Json mappings. This allows mapping JsonDocument and JsonElement types to PostgreSQL json and jsonb types. Declaration public NpgsqlSlimDataSourceBuilder EnableJsonTypes() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableLTree() Sets up mappings for the PostgreSQL ltree extension types. Declaration public NpgsqlSlimDataSourceBuilder EnableLTree() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableMultiranges() Sets up mappings for the PostgreSQL multirange types. Declaration public NpgsqlSlimDataSourceBuilder EnableMultiranges() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableNetworkTypes() Sets up network mappings. This allows mapping PhysicalAddress, IPAddress, NpgsqlInet and NpgsqlCidr types to PostgreSQL macaddr, macaddr8, inet and cidr types. Declaration public NpgsqlSlimDataSourceBuilder EnableNetworkTypes() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableParameterLogging(bool) Enables parameters to be included in logging. This includes potentially sensitive information from data sent to PostgreSQL. You should only enable this flag in development, or if you have the appropriate security measures in place based on the sensitivity of this data. Declaration public NpgsqlSlimDataSourceBuilder EnableParameterLogging(bool parameterLoggingEnabled = true) Parameters Type Name Description bool parameterLoggingEnabled If true, then sensitive data is logged. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableRanges() Sets up mappings for the PostgreSQL range types. Declaration public NpgsqlSlimDataSourceBuilder EnableRanges() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableRecords() Sets up mappings for the PostgreSQL record type as a .NET object[]. Declaration public NpgsqlSlimDataSourceBuilder EnableRecords() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableRecordsAsTuples() Sets up mappings for the PostgreSQL record type as a .NET ValueTuple or Tuple. Declaration public NpgsqlSlimDataSourceBuilder EnableRecordsAsTuples() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableTransportSecurity() Enables the possibility to use TLS/SSl encryption for connections to PostgreSQL. This does not guarantee that encryption will actually be used; see https://www.npgsql.org/doc/security.html for more details. Declaration public NpgsqlSlimDataSourceBuilder EnableTransportSecurity() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableUnmappedTypes() Sets up mappings allowing the use of unmapped enum, range and multirange types. Declaration public NpgsqlSlimDataSourceBuilder EnableUnmappedTypes() Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source MapComposite(Type, string?, INpgsqlNameTranslator?) Maps a CLR type to a composite type. Declaration public INpgsqlTypeMapper MapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be mapped. string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Remarks Maps CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to DefaultNameTranslator. If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Edit this page View Source MapComposite<T>(string?, INpgsqlNameTranslator?) Maps a CLR type to a PostgreSQL composite type. Declaration public INpgsqlTypeMapper MapComposite<T>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator. You can also use the PgNameAttribute on your members to manually specify a PostgreSQL name. If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Edit this page View Source MapEnum(Type, string?, INpgsqlNameTranslator?) Maps a CLR enum to a PostgreSQL enum type. Declaration public INpgsqlTypeMapper MapEnum(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET enum type to be mapped string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator. You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. | Edit this page View Source MapEnum<TEnum>(string?, INpgsqlNameTranslator?) Maps a CLR enum to a PostgreSQL enum type. Declaration public INpgsqlTypeMapper MapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator. You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. | Edit this page View Source UnmapComposite(Type, string?, INpgsqlNameTranslator?) Removes an existing composite mapping. Declaration public bool UnmapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be unmapped. string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description bool | Edit this page View Source UnmapComposite<T>(string?, INpgsqlNameTranslator?) Removes an existing composite mapping. Declaration public bool UnmapComposite<T>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Returns Type Description bool Type Parameters Name Description T | Edit this page View Source UnmapEnum(Type, string?, INpgsqlNameTranslator?) Removes an existing enum mapping. Declaration public bool UnmapEnum(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET enum type to be mapped string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description bool | Edit this page View Source UnmapEnum<TEnum>(string?, INpgsqlNameTranslator?) Removes an existing enum mapping. Declaration public bool UnmapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description bool Type Parameters Name Description TEnum | Edit this page View Source UseClientCertificate(X509Certificate?) Specifies an SSL/TLS certificate which Npgsql will send to PostgreSQL for certificate-based authentication. Declaration public NpgsqlSlimDataSourceBuilder UseClientCertificate(X509Certificate? clientCertificate) Parameters Type Name Description X509Certificate clientCertificate The client certificate to be sent to PostgreSQL when opening a connection. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseClientCertificates(X509CertificateCollection?) Specifies a collection of SSL/TLS certificates which Npgsql will send to PostgreSQL for certificate-based authentication. Declaration public NpgsqlSlimDataSourceBuilder UseClientCertificates(X509CertificateCollection? clientCertificates) Parameters Type Name Description X509CertificateCollection clientCertificates The client certificate collection to be sent to PostgreSQL when opening a connection. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseClientCertificatesCallback(Action<X509CertificateCollection>?) Specifies a callback to modify the collection of SSL/TLS client certificates which Npgsql will send to PostgreSQL for certificate-based authentication. This is an advanced API, consider using UseClientCertificate(X509Certificate?) or UseClientCertificates(X509CertificateCollection?) instead. Declaration public NpgsqlSlimDataSourceBuilder UseClientCertificatesCallback(Action<X509CertificateCollection>? clientCertificatesCallback) Parameters Type Name Description Action<X509CertificateCollection> clientCertificatesCallback The callback to modify the client certificate collection. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks The callback is invoked every time a physical connection is opened, and is therefore suitable for rotating short-lived client certificates. Simply make sure the certificate collection argument has the up-to-date certificate(s). The callback's collection argument already includes any client certificates specified via the connection string or environment variables. | Edit this page View Source UseLoggerFactory(ILoggerFactory?) Sets the ILoggerFactory that will be used for logging. Declaration public NpgsqlSlimDataSourceBuilder UseLoggerFactory(ILoggerFactory? loggerFactory) Parameters Type Name Description ILoggerFactory loggerFactory The logger factory to be used. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UsePasswordProvider(Func<NpgsqlConnectionStringBuilder, string>?, Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>?) Configures a password provider, which is called by the data source when opening connections. Declaration public NpgsqlSlimDataSourceBuilder UsePasswordProvider(Func<NpgsqlConnectionStringBuilder, string>? passwordProvider, Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>? passwordProviderAsync) Parameters Type Name Description Func<NpgsqlConnectionStringBuilder, string> passwordProvider A callback that may be invoked during Open() which returns the password to be sent to PostgreSQL. Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>> passwordProviderAsync A callback that may be invoked during OpenAsync(CancellationToken) which returns the password to be sent to PostgreSQL. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks The provided callback is invoked when opening connections. Therefore its important the callback internally depends on cached data or returns quickly otherwise. Any unnecessary delay will affect connection opening time. | Edit this page View Source UsePeriodicPasswordProvider(Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>?, TimeSpan, TimeSpan) Configures a periodic password provider, which is automatically called by the data source at some regular interval. This is the recommended way to fetch a rotating access token. Declaration public NpgsqlSlimDataSourceBuilder UsePeriodicPasswordProvider(Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>>? passwordProvider, TimeSpan successRefreshInterval, TimeSpan failureRefreshInterval) Parameters Type Name Description Func<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask<string>> passwordProvider A callback which returns the password to be sent to PostgreSQL. TimeSpan successRefreshInterval How long to cache the password before re-invoking the callback. TimeSpan failureRefreshInterval If a password refresh attempt fails, it will be re-attempted with this interval. This should typically be much lower than successRefreshInterval. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks The provided callback is invoked in a timer, and not when opening connections. It therefore doesn't affect opening time. The provided cancellation token is only triggered when the entire data source is disposed. If you'd like to apply a timeout to the token fetching, do so within the provided callback. | Edit this page View Source UsePhysicalConnectionInitializer(Action<NpgsqlConnection>?, Func<NpgsqlConnection, Task>?) Register a connection initializer, which allows executing arbitrary commands when a physical database connection is first opened. Declaration public NpgsqlSlimDataSourceBuilder UsePhysicalConnectionInitializer(Action<NpgsqlConnection>? connectionInitializer, Func<NpgsqlConnection, Task>? connectionInitializerAsync) Parameters Type Name Description Action<NpgsqlConnection> connectionInitializer A synchronous connection initialization lambda, which will be called from Open() when a new physical connection is opened. Func<NpgsqlConnection, Task> connectionInitializerAsync An asynchronous connection initialization lambda, which will be called from OpenAsync(CancellationToken) when a new physical connection is opened. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks If an initializer is registered, both sync and async versions must be provided. If you do not use sync APIs in your code, simply throw NotSupportedException, which would also catch accidental cases of sync opening. | Edit this page View Source UseRootCertificate(X509Certificate2?) Sets the X509Certificate2 that will be used validate SSL certificate, received from the server. Declaration public NpgsqlSlimDataSourceBuilder UseRootCertificate(X509Certificate2? rootCertificate) Parameters Type Name Description X509Certificate2 rootCertificate The CA certificate. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseRootCertificateCallback(Func<X509Certificate2>?) Specifies a callback that will be used to validate SSL certificate, received from the server. Declaration public NpgsqlSlimDataSourceBuilder UseRootCertificateCallback(Func<X509Certificate2>? rootCertificateCallback) Parameters Type Name Description Func<X509Certificate2> rootCertificateCallback The callback to get CA certificate. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks This overload, which accepts a callback, is suitable for scenarios where the certificate rotates and might change during the lifetime of the application. When that's not the case, use the overload which directly accepts the certificate. | Edit this page View Source UseUserCertificateValidationCallback(RemoteCertificateValidationCallback) When using SSL/TLS, this is a callback that allows customizing how the PostgreSQL-provided certificate is verified. This is an advanced API, consider using VerifyFull or VerifyCA instead. Declaration public NpgsqlSlimDataSourceBuilder UseUserCertificateValidationCallback(RemoteCertificateValidationCallback userCertificateValidationCallback) Parameters Type Name Description RemoteCertificateValidationCallback userCertificateValidationCallback The callback containing custom callback verification logic. Returns Type Description NpgsqlSlimDataSourceBuilder The same builder instance so that multiple calls can be chained. Remarks Cannot be used in conjunction with Disable, VerifyCA or VerifyFull. See https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx. Implements INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.NpgsqlTracingOptions.html": {
    "href": "doc/api/Npgsql.NpgsqlTracingOptions.html",
    "title": "Class NpgsqlTracingOptions | Npgsql Documentation",
    "keywords": "Class NpgsqlTracingOptions Options to configure Npgsql's support for OpenTelemetry tracing. Currently no options are available. Inheritance object NpgsqlTracingOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public class NpgsqlTracingOptions"
  },
  "doc/api/Npgsql.NpgsqlTransaction.html": {
    "href": "doc/api/Npgsql.NpgsqlTransaction.html",
    "title": "Class NpgsqlTransaction | Npgsql Documentation",
    "keywords": "Class NpgsqlTransaction Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited. Inheritance object MarshalByRefObject DbTransaction NpgsqlTransaction Implements IDbTransaction IDisposable IAsyncDisposable Inherited Members DbTransaction.Dispose() MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class NpgsqlTransaction : DbTransaction, IDbTransaction, IDisposable, IAsyncDisposable Properties | Edit this page View Source Connection Specifies the NpgsqlConnection object associated with the transaction. Declaration public NpgsqlConnection? Connection { get; } Property Value Type Description NpgsqlConnection The NpgsqlConnection object associated with the transaction. | Edit this page View Source DbConnection Specifies the NpgsqlConnection object associated with the transaction. Declaration protected override DbConnection? DbConnection { get; } Property Value Type Description DbConnection The NpgsqlConnection object associated with the transaction. Overrides DbTransaction.DbConnection | Edit this page View Source IsolationLevel Specifies the isolation level for this transaction. Declaration public override IsolationLevel IsolationLevel { get; } Property Value Type Description IsolationLevel The isolation level for this transaction. The default is ReadCommitted. Overrides DbTransaction.IsolationLevel | Edit this page View Source SupportsSavepoints Indicates whether this transaction supports database savepoints. Declaration public override bool SupportsSavepoints { get; } Property Value Type Description bool Overrides DbTransaction.SupportsSavepoints Methods | Edit this page View Source Commit() Commits the database transaction. Declaration public override void Commit() Overrides DbTransaction.Commit() | Edit this page View Source CommitAsync(CancellationToken) Commits the database transaction. Declaration public override Task CommitAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Overrides DbTransaction.CommitAsync(CancellationToken) | Edit this page View Source Dispose(bool) Disposes the transaction, rolling it back if it is still pending. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Overrides DbTransaction.Dispose(bool) | Edit this page View Source DisposeAsync() Disposes the transaction, rolling it back if it is still pending. Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask Overrides DbTransaction.DisposeAsync() | Edit this page View Source Release(string) Releases a transaction from a pending savepoint state. Declaration public override void Release(string name) Parameters Type Name Description string name The name of the savepoint. Overrides DbTransaction.Release(string) | Edit this page View Source ReleaseAsync(string, CancellationToken) Releases a transaction from a pending savepoint state. Declaration public override Task ReleaseAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name The name of the savepoint. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Overrides DbTransaction.ReleaseAsync(string, CancellationToken) | Edit this page View Source Rollback() Rolls back a transaction from a pending state. Declaration public override void Rollback() Overrides DbTransaction.Rollback() | Edit this page View Source Rollback(string) Rolls back a transaction from a pending savepoint state. Declaration public override void Rollback(string name) Parameters Type Name Description string name The name of the savepoint. Overrides DbTransaction.Rollback(string) | Edit this page View Source RollbackAsync(string, CancellationToken) Rolls back a transaction from a pending savepoint state. Declaration public override Task RollbackAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name The name of the savepoint. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Overrides DbTransaction.RollbackAsync(string, CancellationToken) | Edit this page View Source RollbackAsync(CancellationToken) Rolls back a transaction from a pending state. Declaration public override Task RollbackAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Overrides DbTransaction.RollbackAsync(CancellationToken) | Edit this page View Source Save(string) Creates a transaction save point. Declaration public override void Save(string name) Parameters Type Name Description string name The name of the savepoint. Overrides DbTransaction.Save(string) Remarks This method does not cause a database roundtrip to be made. The savepoint creation statement will instead be sent along with the next command. | Edit this page View Source SaveAsync(string, CancellationToken) Creates a transaction save point. Declaration public override Task SaveAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name The name of the savepoint. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task Overrides DbTransaction.SaveAsync(string, CancellationToken) Remarks This method does not cause a database roundtrip to be made, and will therefore always complete synchronously. The savepoint creation statement will instead be sent along with the next command. Implements IDbTransaction IDisposable IAsyncDisposable"
  },
  "doc/api/Npgsql.PostgresErrorCodes.html": {
    "href": "doc/api/Npgsql.PostgresErrorCodes.html",
    "title": "Class PostgresErrorCodes | Npgsql Documentation",
    "keywords": "Class PostgresErrorCodes Provides constants for PostgreSQL error codes. Inheritance object PostgresErrorCodes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public static class PostgresErrorCodes Remarks See https://www.postgresql.org/docs/current/static/errcodes-appendix.html Fields | Edit this page View Source ActiveSqlTransaction Declaration public const string ActiveSqlTransaction = \"25001\" Field Value Type Description string | Edit this page View Source AdminShutdown Declaration public const string AdminShutdown = \"57P01\" Field Value Type Description string | Edit this page View Source AmbiguousAlias Declaration public const string AmbiguousAlias = \"42P09\" Field Value Type Description string | Edit this page View Source AmbiguousColumn Declaration public const string AmbiguousColumn = \"42702\" Field Value Type Description string | Edit this page View Source AmbiguousFunction Declaration public const string AmbiguousFunction = \"42725\" Field Value Type Description string | Edit this page View Source AmbiguousParameter Declaration public const string AmbiguousParameter = \"42P08\" Field Value Type Description string | Edit this page View Source ArraySubscriptError Declaration public const string ArraySubscriptError = \"2202E\" Field Value Type Description string | Edit this page View Source AssertFailure Declaration public const string AssertFailure = \"P0004\" Field Value Type Description string | Edit this page View Source BadCopyFileFormat Declaration public const string BadCopyFileFormat = \"22P04\" Field Value Type Description string | Edit this page View Source BranchTransactionAlreadyActive Declaration public const string BranchTransactionAlreadyActive = \"25002\" Field Value Type Description string | Edit this page View Source CannotCoerce Declaration public const string CannotCoerce = \"42846\" Field Value Type Description string | Edit this page View Source CannotConnectNow Declaration public const string CannotConnectNow = \"57P03\" Field Value Type Description string | Edit this page View Source CantChangeRuntimeParam Declaration public const string CantChangeRuntimeParam = \"55P02\" Field Value Type Description string | Edit this page View Source CardinalityViolation Declaration public const string CardinalityViolation = \"21000\" Field Value Type Description string | Edit this page View Source CaseNotFound Declaration public const string CaseNotFound = \"20000\" Field Value Type Description string | Edit this page View Source CharacterNotInRepertoire Declaration public const string CharacterNotInRepertoire = \"22021\" Field Value Type Description string | Edit this page View Source CheckViolation Declaration public const string CheckViolation = \"23514\" Field Value Type Description string | Edit this page View Source CollationMismatch Declaration public const string CollationMismatch = \"42P21\" Field Value Type Description string | Edit this page View Source ConfigFileError Declaration public const string ConfigFileError = \"F0000\" Field Value Type Description string | Edit this page View Source ConfigurationLimitExceeded Declaration public const string ConfigurationLimitExceeded = \"53400\" Field Value Type Description string | Edit this page View Source ConnectionDoesNotExist Declaration public const string ConnectionDoesNotExist = \"08003\" Field Value Type Description string | Edit this page View Source ConnectionException Declaration public const string ConnectionException = \"08000\" Field Value Type Description string | Edit this page View Source ConnectionFailure Declaration public const string ConnectionFailure = \"08006\" Field Value Type Description string | Edit this page View Source ContainingSqlNotPermittedExternalRoutineException Declaration public const string ContainingSqlNotPermittedExternalRoutineException = \"38001\" Field Value Type Description string | Edit this page View Source CrashShutdown Declaration public const string CrashShutdown = \"57P02\" Field Value Type Description string | Edit this page View Source DataCorrupted Declaration public const string DataCorrupted = \"XX001\" Field Value Type Description string | Edit this page View Source DataException Declaration public const string DataException = \"22000\" Field Value Type Description string | Edit this page View Source DatabaseDropped Declaration public const string DatabaseDropped = \"57P04\" Field Value Type Description string | Edit this page View Source DatatypeMismatch Declaration public const string DatatypeMismatch = \"42804\" Field Value Type Description string | Edit this page View Source DatetimeFieldOverflow Declaration public const string DatetimeFieldOverflow = \"22008\" Field Value Type Description string | Edit this page View Source DeadlockDetected Declaration public const string DeadlockDetected = \"40P01\" Field Value Type Description string | Edit this page View Source DependentObjectsStillExist Declaration public const string DependentObjectsStillExist = \"2BP01\" Field Value Type Description string | Edit this page View Source DependentPrivilegeDescriptorsStillExist Declaration public const string DependentPrivilegeDescriptorsStillExist = \"2B000\" Field Value Type Description string | Edit this page View Source DeprecatedFeatureWarning Declaration public const string DeprecatedFeatureWarning = \"01P01\" Field Value Type Description string | Edit this page View Source DiagnosticsException Declaration public const string DiagnosticsException = \"0Z000\" Field Value Type Description string | Edit this page View Source DiskFull Declaration public const string DiskFull = \"53100\" Field Value Type Description string | Edit this page View Source DivisionByZero Declaration public const string DivisionByZero = \"22012\" Field Value Type Description string | Edit this page View Source DuplicateAlias Declaration public const string DuplicateAlias = \"42712\" Field Value Type Description string | Edit this page View Source DuplicateColumn Declaration public const string DuplicateColumn = \"42701\" Field Value Type Description string | Edit this page View Source DuplicateCursor Declaration public const string DuplicateCursor = \"42P03\" Field Value Type Description string | Edit this page View Source DuplicateDatabase Declaration public const string DuplicateDatabase = \"42P04\" Field Value Type Description string | Edit this page View Source DuplicateFile Declaration public const string DuplicateFile = \"58P02\" Field Value Type Description string | Edit this page View Source DuplicateFunction Declaration public const string DuplicateFunction = \"42723\" Field Value Type Description string | Edit this page View Source DuplicateObject Declaration public const string DuplicateObject = \"42710\" Field Value Type Description string | Edit this page View Source DuplicatePreparedStatement Declaration public const string DuplicatePreparedStatement = \"42P05\" Field Value Type Description string | Edit this page View Source DuplicateSchema Declaration public const string DuplicateSchema = \"42P06\" Field Value Type Description string | Edit this page View Source DuplicateTable Declaration public const string DuplicateTable = \"42P07\" Field Value Type Description string | Edit this page View Source DynamicResultSetsReturnedWarning Declaration public const string DynamicResultSetsReturnedWarning = \"0100C\" Field Value Type Description string | Edit this page View Source ErrorInAssignment Declaration public const string ErrorInAssignment = \"22005\" Field Value Type Description string | Edit this page View Source EscapeCharacterConflict Declaration public const string EscapeCharacterConflict = \"2200B\" Field Value Type Description string | Edit this page View Source EventTriggerProtocolViolatedExternalRoutineInvocationException Declaration public const string EventTriggerProtocolViolatedExternalRoutineInvocationException = \"39P03\" Field Value Type Description string | Edit this page View Source ExclusionViolation Declaration public const string ExclusionViolation = \"23P01\" Field Value Type Description string | Edit this page View Source ExternalRoutineException Declaration public const string ExternalRoutineException = \"38000\" Field Value Type Description string | Edit this page View Source ExternalRoutineInvocationException Declaration public const string ExternalRoutineInvocationException = \"39000\" Field Value Type Description string | Edit this page View Source FdwColumnNameNotFound Declaration public const string FdwColumnNameNotFound = \"HV005\" Field Value Type Description string | Edit this page View Source FdwDynamicParameterValueNeeded Declaration public const string FdwDynamicParameterValueNeeded = \"HV002\" Field Value Type Description string | Edit this page View Source FdwError Declaration public const string FdwError = \"HV000\" Field Value Type Description string | Edit this page View Source FdwFunctionSequenceError Declaration public const string FdwFunctionSequenceError = \"HV010\" Field Value Type Description string | Edit this page View Source FdwInconsistentDescriptorInformation Declaration public const string FdwInconsistentDescriptorInformation = \"HV021\" Field Value Type Description string | Edit this page View Source FdwInvalidAttributeValue Declaration public const string FdwInvalidAttributeValue = \"HV024\" Field Value Type Description string | Edit this page View Source FdwInvalidColumnName Declaration public const string FdwInvalidColumnName = \"HV007\" Field Value Type Description string | Edit this page View Source FdwInvalidColumnNumber Declaration public const string FdwInvalidColumnNumber = \"HV008\" Field Value Type Description string | Edit this page View Source FdwInvalidDataType Declaration public const string FdwInvalidDataType = \"HV004\" Field Value Type Description string | Edit this page View Source FdwInvalidDataTypeDescriptors Declaration public const string FdwInvalidDataTypeDescriptors = \"HV006\" Field Value Type Description string | Edit this page View Source FdwInvalidDescriptorFieldIdentifier Declaration public const string FdwInvalidDescriptorFieldIdentifier = \"HV091\" Field Value Type Description string | Edit this page View Source FdwInvalidHandle Declaration public const string FdwInvalidHandle = \"HV00B\" Field Value Type Description string | Edit this page View Source FdwInvalidOptionIndex Declaration public const string FdwInvalidOptionIndex = \"HV00C\" Field Value Type Description string | Edit this page View Source FdwInvalidOptionName Declaration public const string FdwInvalidOptionName = \"HV00D\" Field Value Type Description string | Edit this page View Source FdwInvalidStringFormat Declaration public const string FdwInvalidStringFormat = \"HV00A\" Field Value Type Description string | Edit this page View Source FdwInvalidStringLengthOrBufferLength Declaration public const string FdwInvalidStringLengthOrBufferLength = \"HV090\" Field Value Type Description string | Edit this page View Source FdwInvalidUseOfNullPointer Declaration public const string FdwInvalidUseOfNullPointer = \"HV009\" Field Value Type Description string | Edit this page View Source FdwNoSchemas Declaration public const string FdwNoSchemas = \"HV00P\" Field Value Type Description string | Edit this page View Source FdwOptionNameNotFound Declaration public const string FdwOptionNameNotFound = \"HV00J\" Field Value Type Description string | Edit this page View Source FdwOutOfMemory Declaration public const string FdwOutOfMemory = \"HV001\" Field Value Type Description string | Edit this page View Source FdwReplyHandle Declaration public const string FdwReplyHandle = \"HV00K\" Field Value Type Description string | Edit this page View Source FdwSchemaNotFound Declaration public const string FdwSchemaNotFound = \"HV00Q\" Field Value Type Description string | Edit this page View Source FdwTableNotFound Declaration public const string FdwTableNotFound = \"HV00R\" Field Value Type Description string | Edit this page View Source FdwTooManyHandles Declaration public const string FdwTooManyHandles = \"HV014\" Field Value Type Description string | Edit this page View Source FdwUnableToCreateExecution Declaration public const string FdwUnableToCreateExecution = \"HV00L\" Field Value Type Description string | Edit this page View Source FdwUnableToCreateReply Declaration public const string FdwUnableToCreateReply = \"HV00M\" Field Value Type Description string | Edit this page View Source FdwUnableToEstablishConnection Declaration public const string FdwUnableToEstablishConnection = \"HV00N\" Field Value Type Description string | Edit this page View Source FeatureNotSupported Declaration public const string FeatureNotSupported = \"0A000\" Field Value Type Description string | Edit this page View Source FloatingPointException Declaration public const string FloatingPointException = \"22P01\" Field Value Type Description string | Edit this page View Source ForeignKeyViolation Declaration public const string ForeignKeyViolation = \"23503\" Field Value Type Description string | Edit this page View Source FunctionExecutedNoReturnStatementSqlRoutineException Declaration public const string FunctionExecutedNoReturnStatementSqlRoutineException = \"2F005\" Field Value Type Description string | Edit this page View Source GroupingError Declaration public const string GroupingError = \"42803\" Field Value Type Description string | Edit this page View Source HeldCursorRequiresSameIsolationLevel Declaration public const string HeldCursorRequiresSameIsolationLevel = \"25008\" Field Value Type Description string | Edit this page View Source IdleSessionTimeout Declaration public const string IdleSessionTimeout = \"57P05\" Field Value Type Description string | Edit this page View Source ImplicitZeroBitPaddingWarning Declaration public const string ImplicitZeroBitPaddingWarning = \"01008\" Field Value Type Description string | Edit this page View Source InFailedSqlTransaction Declaration public const string InFailedSqlTransaction = \"25P02\" Field Value Type Description string | Edit this page View Source InappropriateAccessModeForBranchTransaction Declaration public const string InappropriateAccessModeForBranchTransaction = \"25003\" Field Value Type Description string | Edit this page View Source InappropriateIsolationLevelForBranchTransaction Declaration public const string InappropriateIsolationLevelForBranchTransaction = \"25004\" Field Value Type Description string | Edit this page View Source IndeterminateCollation Declaration public const string IndeterminateCollation = \"42P22\" Field Value Type Description string | Edit this page View Source IndeterminateDatatype Declaration public const string IndeterminateDatatype = \"42P18\" Field Value Type Description string | Edit this page View Source IndexCorrupted Declaration public const string IndexCorrupted = \"XX002\" Field Value Type Description string | Edit this page View Source IndicatorOverflow Declaration public const string IndicatorOverflow = \"22022\" Field Value Type Description string | Edit this page View Source InsufficientPrivilege Declaration public const string InsufficientPrivilege = \"42501\" Field Value Type Description string | Edit this page View Source InsufficientResources Declaration public const string InsufficientResources = \"53000\" Field Value Type Description string | Edit this page View Source IntegrityConstraintViolation Declaration public const string IntegrityConstraintViolation = \"23000\" Field Value Type Description string | Edit this page View Source InternalError Declaration public const string InternalError = \"XX000\" Field Value Type Description string | Edit this page View Source IntervalFieldOverflow Declaration public const string IntervalFieldOverflow = \"22015\" Field Value Type Description string | Edit this page View Source InvalidArgumentForLogarithm Declaration public const string InvalidArgumentForLogarithm = \"2201E\" Field Value Type Description string | Edit this page View Source InvalidArgumentForNthValueFunction Declaration public const string InvalidArgumentForNthValueFunction = \"22016\" Field Value Type Description string | Edit this page View Source InvalidArgumentForNtileFunction Declaration public const string InvalidArgumentForNtileFunction = \"22014\" Field Value Type Description string | Edit this page View Source InvalidArgumentForPowerFunction Declaration public const string InvalidArgumentForPowerFunction = \"2201F\" Field Value Type Description string | Edit this page View Source InvalidArgumentForWidthBucketFunction Declaration public const string InvalidArgumentForWidthBucketFunction = \"2201G\" Field Value Type Description string | Edit this page View Source InvalidAuthorizationSpecification Declaration public const string InvalidAuthorizationSpecification = \"28000\" Field Value Type Description string | Edit this page View Source InvalidBinaryRepresentation Declaration public const string InvalidBinaryRepresentation = \"22P03\" Field Value Type Description string | Edit this page View Source InvalidCatalogName Declaration public const string InvalidCatalogName = \"3D000\" Field Value Type Description string | Edit this page View Source InvalidCharacterValueForCast Declaration public const string InvalidCharacterValueForCast = \"22018\" Field Value Type Description string | Edit this page View Source InvalidColumnDefinition Declaration public const string InvalidColumnDefinition = \"42611\" Field Value Type Description string | Edit this page View Source InvalidColumnReference Declaration public const string InvalidColumnReference = \"42P10\" Field Value Type Description string | Edit this page View Source InvalidCursorDefinition Declaration public const string InvalidCursorDefinition = \"42P11\" Field Value Type Description string | Edit this page View Source InvalidCursorName Declaration public const string InvalidCursorName = \"34000\" Field Value Type Description string | Edit this page View Source InvalidCursorState Declaration public const string InvalidCursorState = \"24000\" Field Value Type Description string | Edit this page View Source InvalidDatabaseDefinition Declaration public const string InvalidDatabaseDefinition = \"42P12\" Field Value Type Description string | Edit this page View Source InvalidDatetimeFormat Declaration public const string InvalidDatetimeFormat = \"22007\" Field Value Type Description string | Edit this page View Source InvalidEscapeCharacter Declaration public const string InvalidEscapeCharacter = \"22019\" Field Value Type Description string | Edit this page View Source InvalidEscapeOctet Declaration public const string InvalidEscapeOctet = \"2200D\" Field Value Type Description string | Edit this page View Source InvalidEscapeSequence Declaration public const string InvalidEscapeSequence = \"22025\" Field Value Type Description string | Edit this page View Source InvalidForeignKey Declaration public const string InvalidForeignKey = \"42830\" Field Value Type Description string | Edit this page View Source InvalidFunctionDefinition Declaration public const string InvalidFunctionDefinition = \"42P13\" Field Value Type Description string | Edit this page View Source InvalidGrantOperation Declaration public const string InvalidGrantOperation = \"0LP01\" Field Value Type Description string | Edit this page View Source InvalidGrantor Declaration public const string InvalidGrantor = \"0L000\" Field Value Type Description string | Edit this page View Source InvalidIndicatorParameterValue Declaration public const string InvalidIndicatorParameterValue = \"22010\" Field Value Type Description string | Edit this page View Source InvalidLocatorSpecification Declaration public const string InvalidLocatorSpecification = \"0F001\" Field Value Type Description string | Edit this page View Source InvalidName Declaration public const string InvalidName = \"42602\" Field Value Type Description string | Edit this page View Source InvalidObjectDefinition Declaration public const string InvalidObjectDefinition = \"42P17\" Field Value Type Description string | Edit this page View Source InvalidParameterValue Declaration public const string InvalidParameterValue = \"22023\" Field Value Type Description string | Edit this page View Source InvalidPassword Declaration public const string InvalidPassword = \"28P01\" Field Value Type Description string | Edit this page View Source InvalidPreparedStatementDefinition Declaration public const string InvalidPreparedStatementDefinition = \"42P14\" Field Value Type Description string | Edit this page View Source InvalidRecursion Declaration public const string InvalidRecursion = \"42P19\" Field Value Type Description string | Edit this page View Source InvalidRegularExpression Declaration public const string InvalidRegularExpression = \"2201B\" Field Value Type Description string | Edit this page View Source InvalidRoleSpecification Declaration public const string InvalidRoleSpecification = \"0P000\" Field Value Type Description string | Edit this page View Source InvalidRowCountInLimitClause Declaration public const string InvalidRowCountInLimitClause = \"2201W\" Field Value Type Description string | Edit this page View Source InvalidRowCountInResultOffsetClause Declaration public const string InvalidRowCountInResultOffsetClause = \"2201X\" Field Value Type Description string | Edit this page View Source InvalidSavepointSpecification Declaration public const string InvalidSavepointSpecification = \"3B001\" Field Value Type Description string | Edit this page View Source InvalidSchemaDefinition Declaration public const string InvalidSchemaDefinition = \"42P15\" Field Value Type Description string | Edit this page View Source InvalidSchemaName Declaration public const string InvalidSchemaName = \"3F000\" Field Value Type Description string | Edit this page View Source InvalidSqlStatementName Declaration public const string InvalidSqlStatementName = \"26000\" Field Value Type Description string | Edit this page View Source InvalidSqlstateReturnedExternalRoutineInvocationException Declaration public const string InvalidSqlstateReturnedExternalRoutineInvocationException = \"39001\" Field Value Type Description string | Edit this page View Source InvalidTableDefinition Declaration public const string InvalidTableDefinition = \"42P16\" Field Value Type Description string | Edit this page View Source InvalidTablesampleArgument Declaration public const string InvalidTablesampleArgument = \"2202H\" Field Value Type Description string | Edit this page View Source InvalidTablesampleRepeat Declaration public const string InvalidTablesampleRepeat = \"2202G\" Field Value Type Description string | Edit this page View Source InvalidTextRepresentation Declaration public const string InvalidTextRepresentation = \"22P02\" Field Value Type Description string | Edit this page View Source InvalidTimeZoneDisplacementValue Declaration public const string InvalidTimeZoneDisplacementValue = \"22009\" Field Value Type Description string | Edit this page View Source InvalidTransactionInitiation Declaration public const string InvalidTransactionInitiation = \"0B000\" Field Value Type Description string | Edit this page View Source InvalidTransactionState Declaration public const string InvalidTransactionState = \"25000\" Field Value Type Description string | Edit this page View Source InvalidTransactionTermination Declaration public const string InvalidTransactionTermination = \"2D000\" Field Value Type Description string | Edit this page View Source InvalidUseOfEscapeCharacter Declaration public const string InvalidUseOfEscapeCharacter = \"2200C\" Field Value Type Description string | Edit this page View Source InvalidXmlComment Declaration public const string InvalidXmlComment = \"2200S\" Field Value Type Description string | Edit this page View Source InvalidXmlContent Declaration public const string InvalidXmlContent = \"2200N\" Field Value Type Description string | Edit this page View Source InvalidXmlDocument Declaration public const string InvalidXmlDocument = \"2200M\" Field Value Type Description string | Edit this page View Source InvalidXmlProcessingInstruction Declaration public const string InvalidXmlProcessingInstruction = \"2200T\" Field Value Type Description string | Edit this page View Source IoError Declaration public const string IoError = \"58030\" Field Value Type Description string | Edit this page View Source LocatorException Declaration public const string LocatorException = \"0F000\" Field Value Type Description string | Edit this page View Source LockFileExists Declaration public const string LockFileExists = \"F0001\" Field Value Type Description string | Edit this page View Source LockNotAvailable Declaration public const string LockNotAvailable = \"55P03\" Field Value Type Description string | Edit this page View Source ModifyingSqlDataNotPermittedExternalRoutineException Declaration public const string ModifyingSqlDataNotPermittedExternalRoutineException = \"38002\" Field Value Type Description string | Edit this page View Source ModifyingSqlDataNotPermittedSqlRoutineException Declaration public const string ModifyingSqlDataNotPermittedSqlRoutineException = \"2F002\" Field Value Type Description string | Edit this page View Source MostSpecificTypeMismatch Declaration public const string MostSpecificTypeMismatch = \"2200G\" Field Value Type Description string | Edit this page View Source NameTooLong Declaration public const string NameTooLong = \"42622\" Field Value Type Description string | Edit this page View Source NoActiveSqlTransaction Declaration public const string NoActiveSqlTransaction = \"25P01\" Field Value Type Description string | Edit this page View Source NoActiveSqlTransactionForBranchTransaction Declaration public const string NoActiveSqlTransactionForBranchTransaction = \"25005\" Field Value Type Description string | Edit this page View Source NoAdditionalDynamicResultSetsReturned Declaration public const string NoAdditionalDynamicResultSetsReturned = \"02001\" Field Value Type Description string | Edit this page View Source NoData Declaration public const string NoData = \"02000\" Field Value Type Description string | Edit this page View Source NoDataFound Declaration public const string NoDataFound = \"P0002\" Field Value Type Description string | Edit this page View Source NonstandardUseOfEscapeCharacter Declaration public const string NonstandardUseOfEscapeCharacter = \"22P06\" Field Value Type Description string | Edit this page View Source NotAnXmlDocument Declaration public const string NotAnXmlDocument = \"2200L\" Field Value Type Description string | Edit this page View Source NotNullViolation Declaration public const string NotNullViolation = \"23502\" Field Value Type Description string | Edit this page View Source NullValueEliminatedInSetFunctionWarning Declaration public const string NullValueEliminatedInSetFunctionWarning = \"01003\" Field Value Type Description string | Edit this page View Source NullValueNoIndicatorParameter Declaration public const string NullValueNoIndicatorParameter = \"22002\" Field Value Type Description string | Edit this page View Source NullValueNotAllowed Declaration public const string NullValueNotAllowed = \"22004\" Field Value Type Description string | Edit this page View Source NullValueNotAllowedExternalRoutineInvocationException Declaration public const string NullValueNotAllowedExternalRoutineInvocationException = \"39004\" Field Value Type Description string | Edit this page View Source NumericValueOutOfRange Declaration public const string NumericValueOutOfRange = \"22003\" Field Value Type Description string | Edit this page View Source ObjectInUse Declaration public const string ObjectInUse = \"55006\" Field Value Type Description string | Edit this page View Source ObjectNotInPrerequisiteState Declaration public const string ObjectNotInPrerequisiteState = \"55000\" Field Value Type Description string | Edit this page View Source OperatorIntervention Declaration public const string OperatorIntervention = \"57000\" Field Value Type Description string | Edit this page View Source OutOfMemory Declaration public const string OutOfMemory = \"53200\" Field Value Type Description string | Edit this page View Source PlpgsqlError Declaration public const string PlpgsqlError = \"P0000\" Field Value Type Description string | Edit this page View Source PrivilegeNotGrantedWarning Declaration public const string PrivilegeNotGrantedWarning = \"01007\" Field Value Type Description string | Edit this page View Source PrivilegeNotRevokedWarning Declaration public const string PrivilegeNotRevokedWarning = \"01006\" Field Value Type Description string | Edit this page View Source ProgramLimitExceeded Declaration public const string ProgramLimitExceeded = \"54000\" Field Value Type Description string | Edit this page View Source ProhibitedSqlStatementAttemptedExternalRoutineException Declaration public const string ProhibitedSqlStatementAttemptedExternalRoutineException = \"38003\" Field Value Type Description string | Edit this page View Source ProhibitedSqlStatementAttemptedSqlRoutineException Declaration public const string ProhibitedSqlStatementAttemptedSqlRoutineException = \"2F003\" Field Value Type Description string | Edit this page View Source ProtocolViolation Declaration public const string ProtocolViolation = \"08P01\" Field Value Type Description string | Edit this page View Source QueryCanceled Declaration public const string QueryCanceled = \"57014\" Field Value Type Description string | Edit this page View Source RaiseException Declaration public const string RaiseException = \"P0001\" Field Value Type Description string | Edit this page View Source ReadOnlySqlTransaction Declaration public const string ReadOnlySqlTransaction = \"25006\" Field Value Type Description string | Edit this page View Source ReadingSqlDataNotPermittedExternalRoutineException Declaration public const string ReadingSqlDataNotPermittedExternalRoutineException = \"38004\" Field Value Type Description string | Edit this page View Source ReadingSqlDataNotPermittedSqlRoutineException Declaration public const string ReadingSqlDataNotPermittedSqlRoutineException = \"2F004\" Field Value Type Description string | Edit this page View Source ReservedName Declaration public const string ReservedName = \"42939\" Field Value Type Description string | Edit this page View Source RestrictViolation Declaration public const string RestrictViolation = \"23001\" Field Value Type Description string | Edit this page View Source SavepointException Declaration public const string SavepointException = \"3B000\" Field Value Type Description string | Edit this page View Source SchemaAndDataStatementMixingNotSupported Declaration public const string SchemaAndDataStatementMixingNotSupported = \"25007\" Field Value Type Description string | Edit this page View Source SerializationFailure Declaration public const string SerializationFailure = \"40001\" Field Value Type Description string | Edit this page View Source SnapshotFailure Declaration public const string SnapshotFailure = \"72000\" Field Value Type Description string | Edit this page View Source SqlClientUnableToEstablishSqlConnection Declaration public const string SqlClientUnableToEstablishSqlConnection = \"08001\" Field Value Type Description string | Edit this page View Source SqlRoutineException Declaration public const string SqlRoutineException = \"2F000\" Field Value Type Description string | Edit this page View Source SqlServerRejectedEstablishmentOfSqlConnection Declaration public const string SqlServerRejectedEstablishmentOfSqlConnection = \"08004\" Field Value Type Description string | Edit this page View Source SqlStatementNotYetComplete Declaration public const string SqlStatementNotYetComplete = \"03000\" Field Value Type Description string | Edit this page View Source SrfProtocolViolatedExternalRoutineInvocationException Declaration public const string SrfProtocolViolatedExternalRoutineInvocationException = \"39P02\" Field Value Type Description string | Edit this page View Source StackedDiagnosticsAccessedWithoutActiveHandler Declaration public const string StackedDiagnosticsAccessedWithoutActiveHandler = \"0Z002\" Field Value Type Description string | Edit this page View Source StatementCompletionUnknown Declaration public const string StatementCompletionUnknown = \"40003\" Field Value Type Description string | Edit this page View Source StatementTooComplex Declaration public const string StatementTooComplex = \"54001\" Field Value Type Description string | Edit this page View Source StringDataLengthMismatch Declaration public const string StringDataLengthMismatch = \"22026\" Field Value Type Description string | Edit this page View Source StringDataRightTruncation Declaration public const string StringDataRightTruncation = \"22001\" Field Value Type Description string | Edit this page View Source StringDataRightTruncationWarning Declaration public const string StringDataRightTruncationWarning = \"01004\" Field Value Type Description string | Edit this page View Source SubstringError Declaration public const string SubstringError = \"22011\" Field Value Type Description string | Edit this page View Source SuccessfulCompletion Declaration public const string SuccessfulCompletion = \"00000\" Field Value Type Description string | Edit this page View Source SyntaxError Declaration public const string SyntaxError = \"42601\" Field Value Type Description string | Edit this page View Source SyntaxErrorOrAccessRuleViolation Declaration public const string SyntaxErrorOrAccessRuleViolation = \"42000\" Field Value Type Description string | Edit this page View Source SystemError Declaration public const string SystemError = \"58000\" Field Value Type Description string | Edit this page View Source TooManyArguments Declaration public const string TooManyArguments = \"54023\" Field Value Type Description string | Edit this page View Source TooManyColumns Declaration public const string TooManyColumns = \"54011\" Field Value Type Description string | Edit this page View Source TooManyConnections Declaration public const string TooManyConnections = \"53300\" Field Value Type Description string | Edit this page View Source TooManyRows Declaration public const string TooManyRows = \"P0003\" Field Value Type Description string | Edit this page View Source TransactionIntegrityConstraintViolation Declaration public const string TransactionIntegrityConstraintViolation = \"40002\" Field Value Type Description string | Edit this page View Source TransactionResolutionUnknown Declaration public const string TransactionResolutionUnknown = \"08007\" Field Value Type Description string | Edit this page View Source TransactionRollback Declaration public const string TransactionRollback = \"40000\" Field Value Type Description string | Edit this page View Source TriggerProtocolViolatedExternalRoutineInvocationException Declaration public const string TriggerProtocolViolatedExternalRoutineInvocationException = \"39P01\" Field Value Type Description string | Edit this page View Source TriggeredActionException Declaration public const string TriggeredActionException = \"09000\" Field Value Type Description string | Edit this page View Source TriggeredDataChangeViolation Declaration public const string TriggeredDataChangeViolation = \"27000\" Field Value Type Description string | Edit this page View Source TrimError Declaration public const string TrimError = \"22027\" Field Value Type Description string | Edit this page View Source UndefinedColumn Declaration public const string UndefinedColumn = \"42703\" Field Value Type Description string | Edit this page View Source UndefinedFile Declaration public const string UndefinedFile = \"58P01\" Field Value Type Description string | Edit this page View Source UndefinedFunction Declaration public const string UndefinedFunction = \"42883\" Field Value Type Description string | Edit this page View Source UndefinedObject Declaration public const string UndefinedObject = \"42704\" Field Value Type Description string | Edit this page View Source UndefinedParameter Declaration public const string UndefinedParameter = \"42P02\" Field Value Type Description string | Edit this page View Source UndefinedTable Declaration public const string UndefinedTable = \"42P01\" Field Value Type Description string | Edit this page View Source UniqueViolation Declaration public const string UniqueViolation = \"23505\" Field Value Type Description string | Edit this page View Source UnterminatedCString Declaration public const string UnterminatedCString = \"22024\" Field Value Type Description string | Edit this page View Source UntranslatableCharacter Declaration public const string UntranslatableCharacter = \"22P05\" Field Value Type Description string | Edit this page View Source Warning Declaration public const string Warning = \"01000\" Field Value Type Description string | Edit this page View Source WindowingError Declaration public const string WindowingError = \"42P20\" Field Value Type Description string | Edit this page View Source WithCheckOptionViolation Declaration public const string WithCheckOptionViolation = \"44000\" Field Value Type Description string | Edit this page View Source WrongObjectType Declaration public const string WrongObjectType = \"42809\" Field Value Type Description string | Edit this page View Source ZeroLengthCharacterString Declaration public const string ZeroLengthCharacterString = \"2200F\" Field Value Type Description string"
  },
  "doc/api/Npgsql.PostgresException.html": {
    "href": "doc/api/Npgsql.PostgresException.html",
    "title": "Class PostgresException | Npgsql Documentation",
    "keywords": "Class PostgresException The exception that is thrown when the PostgreSQL backend reports errors (e.g. query SQL issues, constraint violations). Inheritance object Exception SystemException ExternalException DbException NpgsqlException PostgresException Implements ISerializable Inherited Members NpgsqlException.BatchCommand ExternalException.ErrorCode Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Npgsql Assembly: Npgsql.dll Syntax [Serializable] public sealed class PostgresException : NpgsqlException, ISerializable Remarks This exception only corresponds to a PostgreSQL-delivered error. Other errors (e.g. network issues) will be raised via NpgsqlException, and purely Npgsql-related issues which aren't related to the server will be raised via the standard CLR exceptions (e.g. ArgumentException). See https://www.postgresql.org/docs/current/static/errcodes-appendix.html, https://www.postgresql.org/docs/current/static/protocol-error-fields.html Constructors | Edit this page View Source PostgresException(string, string, string, string) Creates a new instance. Declaration public PostgresException(string messageText, string severity, string invariantSeverity, string sqlState) Parameters Type Name Description string messageText string severity string invariantSeverity string sqlState | Edit this page View Source PostgresException(string, string, string, string, string?, string?, int, int, string?, string?, string?, string?, string?, string?, string?, string?, string?, string?) Creates a new instance. Declaration public PostgresException(string messageText, string severity, string invariantSeverity, string sqlState, string? detail = null, string? hint = null, int position = 0, int internalPosition = 0, string? internalQuery = null, string? where = null, string? schemaName = null, string? tableName = null, string? columnName = null, string? dataTypeName = null, string? constraintName = null, string? file = null, string? line = null, string? routine = null) Parameters Type Name Description string messageText string severity string invariantSeverity string sqlState string detail string hint int position int internalPosition string internalQuery string where string schemaName string tableName string columnName string dataTypeName string constraintName string file string line string routine Properties | Edit this page View Source ColumnName If the error was associated with a specific table column, the name of the column. (Refer to the schema and table name fields to identify the table.) Declaration public string? ColumnName { get; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source ConstraintName If the error was associated with a specific constraint, the name of the constraint. Refer to fields listed above for the associated table or domain. (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.) Declaration public string? ConstraintName { get; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source DataTypeName If the error was associated with a specific data type, the name of the data type. (Refer to the schema name field for the name of the data type's schema.) Declaration public string? DataTypeName { get; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source Detail An optional secondary error message carrying more detail about the problem. May run to multiple lines. Declaration public string? Detail { get; } Property Value Type Description string | Edit this page View Source File The file name of the source-code location where the error was reported. Declaration public string? File { get; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source Hint An optional suggestion what to do about the problem. This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. May run to multiple lines. Declaration public string? Hint { get; } Property Value Type Description string | Edit this page View Source InternalPosition This is defined the same as the Position field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client. The InternalQuery field will always appear when this field appears. 0 means not provided. Declaration public int InternalPosition { get; } Property Value Type Description int | Edit this page View Source InternalQuery The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function. Declaration public string? InternalQuery { get; } Property Value Type Description string | Edit this page View Source InvariantSeverity Severity of the error or notice, not localized. Always present since PostgreSQL 9.6. Declaration public string InvariantSeverity { get; } Property Value Type Description string | Edit this page View Source IsTransient Specifies whether the exception is considered transient, that is, whether retrying the operation could succeed (e.g. a network error). Check SqlState. Declaration public override bool IsTransient { get; } Property Value Type Description bool Overrides NpgsqlException.IsTransient | Edit this page View Source Line The line number of the source-code location where the error was reported. Declaration public string? Line { get; } Property Value Type Description string | Edit this page View Source MessageText The primary human-readable error message. This should be accurate but terse. Declaration public string MessageText { get; } Property Value Type Description string Remarks Always present. | Edit this page View Source Position The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string. The first character has index 1, and positions are measured in characters not bytes. 0 means not provided. Declaration public int Position { get; } Property Value Type Description int | Edit this page View Source Routine The name of the source-code routine reporting the error. Declaration public string? Routine { get; } Property Value Type Description string | Edit this page View Source SchemaName If the error was associated with a specific database object, the name of the schema containing that object, if any. Declaration public string? SchemaName { get; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source Severity Severity of the error or notice. Always present. Declaration public string Severity { get; } Property Value Type Description string | Edit this page View Source SqlState The SQLSTATE code for the error. Declaration public override string SqlState { get; } Property Value Type Description string Overrides DbException.SqlState Remarks Always present. Constants are defined in PostgresErrorCodes. See https://www.postgresql.org/docs/current/static/errcodes-appendix.html | Edit this page View Source TableName Table name: if the error was associated with a specific table, the name of the table. (Refer to the schema name field for the name of the table's schema.) Declaration public string? TableName { get; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source Where An indication of the context in which the error occurred. Presently this includes a call stack traceback of active PL functions. The trace is one entry per line, most recent first. Declaration public string? Where { get; } Property Value Type Description string Methods | Edit this page View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo with the data needed to serialize the target object. Declaration [Obsolete(\"This API supports obsolete formatter-based serialization. It should not be called or extended by application code.\")] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo to populate with data. StreamingContext context The destination (see StreamingContext) for this serialization. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) | Edit this page View Source ToString() Returns a string that contains the HRESULT of the error. Declaration public override string ToString() Returns Type Description string A string that represents the HRESULT. Overrides ExternalException.ToString() Implements ISerializable"
  },
  "doc/api/Npgsql.PostgresNotice.html": {
    "href": "doc/api/Npgsql.PostgresNotice.html",
    "title": "Class PostgresNotice | Npgsql Documentation",
    "keywords": "Class PostgresNotice PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator initiates a \"fast\" database shutdown). Inheritance object PostgresNotice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql Assembly: Npgsql.dll Syntax public sealed class PostgresNotice Remarks https://www.postgresql.org/docs/current/static/protocol-flow.html#PROTOCOL-ASYNC Constructors | Edit this page View Source PostgresNotice(string, string, string, string) Creates a new instance. Declaration public PostgresNotice(string severity, string invariantSeverity, string sqlState, string messageText) Parameters Type Name Description string severity string invariantSeverity string sqlState string messageText | Edit this page View Source PostgresNotice(string, string, string, string, string?, string?, int, int, string?, string?, string?, string?, string?, string?, string?, string?, string?, string?) Creates a new instance. Declaration public PostgresNotice(string messageText, string severity, string invariantSeverity, string sqlState, string? detail = null, string? hint = null, int position = 0, int internalPosition = 0, string? internalQuery = null, string? where = null, string? schemaName = null, string? tableName = null, string? columnName = null, string? dataTypeName = null, string? constraintName = null, string? file = null, string? line = null, string? routine = null) Parameters Type Name Description string messageText string severity string invariantSeverity string sqlState string detail string hint int position int internalPosition string internalQuery string where string schemaName string tableName string columnName string dataTypeName string constraintName string file string line string routine Properties | Edit this page View Source ColumnName If the error was associated with a specific table column, the name of the column. (Refer to the schema and table name fields to identify the table.) Declaration public string? ColumnName { get; set; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source ConstraintName If the error was associated with a specific constraint, the name of the constraint. Refer to fields listed above for the associated table or domain. (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.) Declaration public string? ConstraintName { get; set; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source DataTypeName If the error was associated with a specific data type, the name of the data type. (Refer to the schema name field for the name of the data type's schema.) Declaration public string? DataTypeName { get; set; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source Detail An optional secondary error message carrying more detail about the problem. May run to multiple lines. Declaration public string? Detail { get; set; } Property Value Type Description string | Edit this page View Source File The file name of the source-code location where the error was reported. Declaration public string? File { get; set; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source Hint An optional suggestion what to do about the problem. This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. May run to multiple lines. Declaration public string? Hint { get; set; } Property Value Type Description string | Edit this page View Source InternalPosition This is defined the same as the Position field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client. The InternalQuery field will always appear when this field appears. 0 means not provided. Declaration public int InternalPosition { get; set; } Property Value Type Description int | Edit this page View Source InternalQuery The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function. Declaration public string? InternalQuery { get; set; } Property Value Type Description string | Edit this page View Source InvariantSeverity Severity of the error or notice, not localized. Always present since PostgreSQL 9.6. Declaration public string InvariantSeverity { get; } Property Value Type Description string | Edit this page View Source Line The line number of the source-code location where the error was reported. Declaration public string? Line { get; set; } Property Value Type Description string | Edit this page View Source MessageText The primary human-readable error message. This should be accurate but terse. Declaration public string MessageText { get; set; } Property Value Type Description string Remarks Always present. | Edit this page View Source Position The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string. The first character has index 1, and positions are measured in characters not bytes. 0 means not provided. Declaration public int Position { get; set; } Property Value Type Description int | Edit this page View Source Routine The name of the source-code routine reporting the error. Declaration public string? Routine { get; set; } Property Value Type Description string | Edit this page View Source SchemaName If the error was associated with a specific database object, the name of the schema containing that object, if any. Declaration public string? SchemaName { get; set; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source Severity Severity of the error or notice. Always present. Declaration public string Severity { get; set; } Property Value Type Description string | Edit this page View Source SqlState The SQLSTATE code for the error. Declaration public string SqlState { get; set; } Property Value Type Description string Remarks Always present. See https://www.postgresql.org/docs/current/static/errcodes-appendix.html | Edit this page View Source TableName Table name: if the error was associated with a specific table, the name of the table. (Refer to the schema name field for the name of the table's schema.) Declaration public string? TableName { get; set; } Property Value Type Description string Remarks PostgreSQL 9.3 and up. | Edit this page View Source Where An indication of the context in which the error occurred. Presently this includes a call stack traceback of active PL functions. The trace is one entry per line, most recent first. Declaration public string? Where { get; set; } Property Value Type Description string"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresArrayType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresArrayType.html",
    "title": "Class PostgresArrayType | Npgsql Documentation",
    "keywords": "Class PostgresArrayType Represents a PostgreSQL array data type, which can hold several multiple values in a single column. Inheritance object PostgresType PostgresArrayType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public class PostgresArrayType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/arrays.html. Constructors | Edit this page View Source PostgresArrayType(string, string, uint, PostgresType) Constructs a representation of a PostgreSQL array data type. Declaration protected PostgresArrayType(string ns, string name, uint oid, PostgresType elementPostgresType) Parameters Type Name Description string ns string name uint oid PostgresType elementPostgresType Properties | Edit this page View Source Element The PostgreSQL data type of the element contained within this array. Declaration public PostgresType Element { get; } Property Value Type Description PostgresType"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresBaseType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresBaseType.html",
    "title": "Class PostgresBaseType | Npgsql Documentation",
    "keywords": "Class PostgresBaseType Represents a PostgreSQL base data type, which is a simple scalar value. Inheritance object PostgresType PostgresBaseType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public class PostgresBaseType : PostgresType Constructors | Edit this page View Source PostgresBaseType(string, string, uint) Constructs a representation of a PostgreSQL base data type. Declaration protected PostgresBaseType(string ns, string name, uint oid) Parameters Type Name Description string ns string name uint oid"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.Field.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.Field.html",
    "title": "Class PostgresCompositeType.Field | Npgsql Documentation",
    "keywords": "Class PostgresCompositeType.Field Represents a field in a PostgreSQL composite data type. Inheritance object PostgresCompositeType.Field Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public class PostgresCompositeType.Field Properties | Edit this page View Source Name The name of the composite field. Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Type The type of the composite field. Declaration public PostgresType Type { get; } Property Value Type Description PostgresType Methods | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.html",
    "title": "Class PostgresCompositeType | Npgsql Documentation",
    "keywords": "Class PostgresCompositeType Represents a PostgreSQL composite data type, which can hold multiple fields of varying types in a single column. Inheritance object PostgresType PostgresCompositeType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public class PostgresCompositeType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/rowtypes.html. Properties | Edit this page View Source Fields Holds the name and types for all fields. Declaration public IReadOnlyList<PostgresCompositeType.Field> Fields { get; } Property Value Type Description IReadOnlyList<PostgresCompositeType.Field>"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresDomainType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresDomainType.html",
    "title": "Class PostgresDomainType | Npgsql Documentation",
    "keywords": "Class PostgresDomainType Represents a PostgreSQL domain type. Inheritance object PostgresType PostgresDomainType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public class PostgresDomainType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/sql-createdomain.html. When PostgreSQL returns a RowDescription for a domain type, the type OID is the base type's (so fetching a domain type over text returns a RowDescription for text). However, when a composite type is returned, the type OID there is that of the domain, so we provide \"clean\" support for domain types. Constructors | Edit this page View Source PostgresDomainType(string, string, uint, PostgresType, bool) Constructs a representation of a PostgreSQL domain data type. Declaration protected PostgresDomainType(string ns, string name, uint oid, PostgresType baseType, bool notNull) Parameters Type Name Description string ns string name uint oid PostgresType baseType bool notNull Properties | Edit this page View Source BaseType The PostgreSQL data type of the base type, i.e. the type this domain is based on. Declaration public PostgresType BaseType { get; } Property Value Type Description PostgresType | Edit this page View Source NotNull True if the domain has a NOT NULL constraint, otherwise false. Declaration public bool NotNull { get; } Property Value Type Description bool"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresEnumType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresEnumType.html",
    "title": "Class PostgresEnumType | Npgsql Documentation",
    "keywords": "Class PostgresEnumType Represents a PostgreSQL enum data type. Inheritance object PostgresType PostgresEnumType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public class PostgresEnumType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/datatype-enum.html. Constructors | Edit this page View Source PostgresEnumType(string, string, uint) Constructs a representation of a PostgreSQL enum data type. Declaration protected PostgresEnumType(string ns, string name, uint oid) Parameters Type Name Description string ns string name uint oid Properties | Edit this page View Source Labels The enum's fields. Declaration public IReadOnlyList<string> Labels { get; } Property Value Type Description IReadOnlyList<string>"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresMultirangeType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresMultirangeType.html",
    "title": "Class PostgresMultirangeType | Npgsql Documentation",
    "keywords": "Class PostgresMultirangeType Represents a PostgreSQL multirange data type. Inheritance object PostgresType PostgresMultirangeType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public class PostgresMultirangeType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html. Multirange types were introduced in PostgreSQL 14. Constructors | Edit this page View Source PostgresMultirangeType(string, string, uint, PostgresRangeType) Constructs a representation of a PostgreSQL multirange data type. Declaration protected PostgresMultirangeType(string ns, string name, uint oid, PostgresRangeType rangePostgresType) Parameters Type Name Description string ns string name uint oid PostgresRangeType rangePostgresType Properties | Edit this page View Source Subrange The PostgreSQL data type of the range of this multirange. Declaration public PostgresRangeType Subrange { get; } Property Value Type Description PostgresRangeType"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresRangeType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresRangeType.html",
    "title": "Class PostgresRangeType | Npgsql Documentation",
    "keywords": "Class PostgresRangeType Represents a PostgreSQL range data type. Inheritance object PostgresType PostgresRangeType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public class PostgresRangeType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html. Constructors | Edit this page View Source PostgresRangeType(string, string, uint, PostgresType) Constructs a representation of a PostgreSQL range data type. Declaration protected PostgresRangeType(string ns, string name, uint oid, PostgresType subtypePostgresType) Parameters Type Name Description string ns string name uint oid PostgresType subtypePostgresType Properties | Edit this page View Source Multirange The PostgreSQL data type of the multirange of this range. Declaration public PostgresMultirangeType? Multirange { get; } Property Value Type Description PostgresMultirangeType | Edit this page View Source Subtype The PostgreSQL data type of the subtype of this range. Declaration public PostgresType Subtype { get; } Property Value Type Description PostgresType"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresType.html",
    "title": "Class PostgresType | Npgsql Documentation",
    "keywords": "Class PostgresType Represents a PostgreSQL data type, such as int4 or text, as discovered from pg_type. This class is abstract, see derived classes for concrete types of PostgreSQL types. Inheritance object PostgresType PostgresArrayType PostgresBaseType PostgresCompositeType PostgresDomainType PostgresEnumType PostgresMultirangeType PostgresRangeType UnknownBackendType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public abstract class PostgresType Remarks Instances of this class are shared between connections to the same databases. For more info about what this class and its subclasses represent, see https://www.postgresql.org/docs/current/static/catalog-pg-type.html. Properties | Edit this page View Source Array If a PostgreSQL array type exists for this type, it will be referenced here. Otherwise null. Declaration public PostgresArrayType? Array { get; } Property Value Type Description PostgresArrayType | Edit this page View Source DisplayName A display name for this backend type, including the namespace unless it is pg_catalog (the namespace for all built-in types). Declaration public string DisplayName { get; } Property Value Type Description string | Edit this page View Source FullName The full name of the backend type, including its namespace. Declaration public string FullName { get; } Property Value Type Description string | Edit this page View Source InternalName The data type's internal PostgreSQL name (e.g. _int4 not integer[]). See Name for a more user-friendly name. Declaration public string InternalName { get; } Property Value Type Description string | Edit this page View Source Name The data type's name. Declaration public string Name { get; } Property Value Type Description string Remarks Note that this is the standard, user-displayable type name (e.g. integer[]) rather than the internal PostgreSQL name as it is in pg_type (_int4). See InternalName for the latter. | Edit this page View Source Namespace The data type's namespace (or schema). Declaration public string Namespace { get; } Property Value Type Description string | Edit this page View Source OID The data type's OID - a unique id identifying the data type in a given database (in pg_type). Declaration public uint OID { get; } Property Value Type Description uint | Edit this page View Source Range If a PostgreSQL range type exists for this type, it will be referenced here. Otherwise null. Declaration public PostgresRangeType? Range { get; } Property Value Type Description PostgresRangeType Methods | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "doc/api/Npgsql.PostgresTypes.UnknownBackendType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.UnknownBackendType.html",
    "title": "Class UnknownBackendType | Npgsql Documentation",
    "keywords": "Class UnknownBackendType Represents a PostgreSQL data type that isn't known to Npgsql and cannot be handled. Inheritance object PostgresType UnknownBackendType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.PostgresTypes Assembly: Npgsql.dll Syntax public sealed class UnknownBackendType : PostgresType"
  },
  "doc/api/Npgsql.PostgresTypes.html": {
    "href": "doc/api/Npgsql.PostgresTypes.html",
    "title": "Namespace Npgsql.PostgresTypes | Npgsql Documentation",
    "keywords": "Namespace Npgsql.PostgresTypes Classes PostgresArrayType Represents a PostgreSQL array data type, which can hold several multiple values in a single column. PostgresBaseType Represents a PostgreSQL base data type, which is a simple scalar value. PostgresCompositeType Represents a PostgreSQL composite data type, which can hold multiple fields of varying types in a single column. PostgresCompositeType.Field Represents a field in a PostgreSQL composite data type. PostgresDomainType Represents a PostgreSQL domain type. PostgresEnumType Represents a PostgreSQL enum data type. PostgresMultirangeType Represents a PostgreSQL multirange data type. PostgresRangeType Represents a PostgreSQL range data type. PostgresType Represents a PostgreSQL data type, such as int4 or text, as discovered from pg_type. This class is abstract, see derived classes for concrete types of PostgreSQL types. UnknownBackendType Represents a PostgreSQL data type that isn't known to Npgsql and cannot be handled."
  },
  "doc/api/Npgsql.ProvideClientCertificatesCallback.html": {
    "href": "doc/api/Npgsql.ProvideClientCertificatesCallback.html",
    "title": "Delegate ProvideClientCertificatesCallback | Npgsql Documentation",
    "keywords": "Delegate ProvideClientCertificatesCallback Represents a method that allows the application to provide a certificate collection to be used for SSL client authentication Namespace: Npgsql Assembly: Npgsql.dll Syntax public delegate void ProvideClientCertificatesCallback(X509CertificateCollection certificates) Parameters Type Name Description X509CertificateCollection certificates A X509CertificateCollection to be filled with one or more client certificates."
  },
  "doc/api/Npgsql.ProvidePasswordCallback.html": {
    "href": "doc/api/Npgsql.ProvidePasswordCallback.html",
    "title": "Delegate ProvidePasswordCallback | Npgsql Documentation",
    "keywords": "Delegate ProvidePasswordCallback Represents a method that allows the application to provide a password at connection time in code rather than configuration Namespace: Npgsql Assembly: Npgsql.dll Syntax [Obsolete(\"Use NpgsqlDataSourceBuilder.UsePeriodicPasswordProvider or inject passwords directly into NpgsqlDataSource.Password\")] public delegate string ProvidePasswordCallback(string host, int port, string database, string username) Parameters Type Name Description string host Hostname int port Port string database Database Name string username User Returns Type Description string A valid password for connecting to the database"
  },
  "doc/api/Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions.html": {
    "href": "doc/api/Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions.html",
    "title": "Class LogicalReplicationConnectionExtensions | Npgsql Documentation",
    "keywords": "Class LogicalReplicationConnectionExtensions This API is for internal use and for implementing logical replication plugins. It is not meant to be consumed in common Npgsql usage scenarios. Inheritance object LogicalReplicationConnectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication.Internal Assembly: Npgsql.dll Syntax public static class LogicalReplicationConnectionExtensions Methods | Edit this page View Source CreateLogicalReplicationSlot(LogicalReplicationConnection, string, string, bool, LogicalSlotSnapshotInitMode?, bool, CancellationToken) This API is for internal use and for implementing logical replication plugins. It is not meant to be consumed in common Npgsql usage scenarios. Declaration public static Task<ReplicationSlotOptions> CreateLogicalReplicationSlot(this LogicalReplicationConnection connection, string slotName, string outputPlugin, bool isTemporary = false, LogicalSlotSnapshotInitMode? slotSnapshotInitMode = null, bool twoPhase = false, CancellationToken cancellationToken = default) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for creating the replication slot string slotName The name of the slot to create. Must be a valid replication slot name (see https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION). string outputPlugin The name of the output plugin used for logical decoding (see https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html). bool isTemporary true if this replication slot shall be temporary one; otherwise false. Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished. LogicalSlotSnapshotInitMode? slotSnapshotInitMode A LogicalSlotSnapshotInitMode to specify what to do with the snapshot created during logical slot initialization. Export, which is also the default, will export the snapshot for use in other sessions. This option can't be used inside a transaction. Use will use the snapshot for the current transaction executing the command. This option must be used in a transaction, and Use must be the first command run in that transaction. Finally, NoExport will just use the snapshot for logical decoding as normal but won't do anything else with it. bool twoPhase If true, this logical replication slot supports decoding of two-phase transactions. With this option, two-phase commands like PREPARE TRANSACTION, COMMIT PREPARED and ROLLBACK PREPARED are decoded and transmitted. The transaction will be decoded and transmitted at PREPARE TRANSACTION time. The default is false. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<ReplicationSlotOptions> A Task<TResult> representing a ReplicationSlotOptions class that can be used to initialize instances of ReplicationSlot subclasses. Remarks Creates a new replication slot and returns information about the newly-created slot. | Edit this page View Source StartLogicalReplication(LogicalReplicationConnection, LogicalReplicationSlot, CancellationToken, NpgsqlLogSequenceNumber?, IEnumerable<KeyValuePair<string, string?>>?, bool) Instructs the server to start streaming the WAL for logical replication, starting at WAL location walLocation or at the slot's consistent point if walLocation isn't specified. The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public static IAsyncEnumerable<XLogDataMessage> StartLogicalReplication(this LogicalReplicationConnection connection, LogicalReplicationSlot slot, CancellationToken cancellationToken, NpgsqlLogSequenceNumber? walLocation = null, IEnumerable<KeyValuePair<string, string?>>? options = null, bool bypassingStream = false) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for starting replication LogicalReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. CancellationToken cancellationToken The token to monitor for stopping the replication. NpgsqlLogSequenceNumber? walLocation The WAL location to begin streaming at. IEnumerable<KeyValuePair<string, string>> options The collection of options passed to the slot's logical decoding plugin. bool bypassingStream Whether the plugin will be bypassing Data and reading directly from the buffer. Returns Type Description IAsyncEnumerable<XLogDataMessage> A Task<TResult> representing an IAsyncEnumerable<T> that can be used to stream WAL entries in form of XLogDataMessage instances."
  },
  "doc/api/Npgsql.Replication.Internal.LogicalReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.Internal.LogicalReplicationSlot.html",
    "title": "Class LogicalReplicationSlot | Npgsql Documentation",
    "keywords": "Class LogicalReplicationSlot Contains information about a newly-created logical replication slot. Inheritance object ReplicationSlot LogicalReplicationSlot PgOutputReplicationSlot TestDecodingReplicationSlot Inherited Members ReplicationSlot.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication.Internal Assembly: Npgsql.dll Syntax public abstract class LogicalReplicationSlot : ReplicationSlot Constructors | Edit this page View Source LogicalReplicationSlot(string, ReplicationSlotOptions) Creates a new logical replication slot Declaration protected LogicalReplicationSlot(string outputPlugin, ReplicationSlotOptions replicationSlotOptions) Parameters Type Name Description string outputPlugin The logical decoding output plugin to the corresponding replication slot was created for. ReplicationSlotOptions replicationSlotOptions A ReplicationSlotOptions struct with information to create the replication slot. Properties | Edit this page View Source ConsistentPoint The WAL location at which the slot became consistent. This is the earliest location from which streaming can start on this replication slot. Declaration public NpgsqlLogSequenceNumber ConsistentPoint { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source OutputPlugin The name of the output plugin used by the newly-created logical replication slot. Declaration public string OutputPlugin { get; } Property Value Type Description string | Edit this page View Source SnapshotName The identifier of the snapshot exported by the command. The snapshot is valid until a new command is executed on this connection or the replication connection is closed. Declaration public string? SnapshotName { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.Replication.Internal.html": {
    "href": "doc/api/Npgsql.Replication.Internal.html",
    "title": "Namespace Npgsql.Replication.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication.Internal Classes LogicalReplicationConnectionExtensions This API is for internal use and for implementing logical replication plugins. It is not meant to be consumed in common Npgsql usage scenarios. LogicalReplicationSlot Contains information about a newly-created logical replication slot."
  },
  "doc/api/Npgsql.Replication.LogicalReplicationConnection.html": {
    "href": "doc/api/Npgsql.Replication.LogicalReplicationConnection.html",
    "title": "Class LogicalReplicationConnection | Npgsql Documentation",
    "keywords": "Class LogicalReplicationConnection Represents a logical replication connection to a PostgreSQL server. Inheritance object ReplicationConnection LogicalReplicationConnection Implements IAsyncDisposable Inherited Members ReplicationConnection.ConnectionString ReplicationConnection.LastReceivedLsn ReplicationConnection.LastFlushedLsn ReplicationConnection.LastAppliedLsn ReplicationConnection.WalReceiverStatusInterval ReplicationConnection.WalReceiverTimeout ReplicationConnection.PostgreSqlVersion ReplicationConnection.ServerVersion ReplicationConnection.CommandTimeout ReplicationConnection.Encoding ReplicationConnection.ProcessID ReplicationConnection.Open(CancellationToken) ReplicationConnection.DisposeAsync() ReplicationConnection.IdentifySystem(CancellationToken) ReplicationConnection.Show(string, CancellationToken) ReplicationConnection.TimelineHistory(uint, CancellationToken) ReplicationConnection.SetReplicationStatus(NpgsqlLogSequenceNumber) ReplicationConnection.SendStatusUpdate(CancellationToken) ReplicationConnection.DropReplicationSlot(string, bool, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public sealed class LogicalReplicationConnection : ReplicationConnection, IAsyncDisposable Constructors | Edit this page View Source LogicalReplicationConnection() Initializes a new instance of LogicalReplicationConnection. Declaration public LogicalReplicationConnection() | Edit this page View Source LogicalReplicationConnection(string?) Initializes a new instance of LogicalReplicationConnection with the given connection string. Declaration public LogicalReplicationConnection(string? connectionString) Parameters Type Name Description string connectionString The connection used to open the PostgreSQL database. Implements IAsyncDisposable Extension Methods LogicalReplicationConnectionExtensions.CreateLogicalReplicationSlot(LogicalReplicationConnection, string, string, bool, LogicalSlotSnapshotInitMode?, bool, CancellationToken) LogicalReplicationConnectionExtensions.StartLogicalReplication(LogicalReplicationConnection, LogicalReplicationSlot, CancellationToken, NpgsqlLogSequenceNumber?, IEnumerable<KeyValuePair<string, string?>>?, bool) PgOutputConnectionExtensions.CreatePgOutputReplicationSlot(LogicalReplicationConnection, string, bool, LogicalSlotSnapshotInitMode?, bool, CancellationToken) PgOutputConnectionExtensions.StartReplication(LogicalReplicationConnection, PgOutputReplicationSlot, PgOutputReplicationOptions, CancellationToken, NpgsqlLogSequenceNumber?) TestDecodingConnectionExtensions.CreateTestDecodingReplicationSlot(LogicalReplicationConnection, string, bool, LogicalSlotSnapshotInitMode?, bool, CancellationToken) TestDecodingConnectionExtensions.StartReplication(LogicalReplicationConnection, TestDecodingReplicationSlot, CancellationToken, TestDecodingOptions?, NpgsqlLogSequenceNumber?)"
  },
  "doc/api/Npgsql.Replication.LogicalSlotSnapshotInitMode.html": {
    "href": "doc/api/Npgsql.Replication.LogicalSlotSnapshotInitMode.html",
    "title": "Enum LogicalSlotSnapshotInitMode | Npgsql Documentation",
    "keywords": "Enum LogicalSlotSnapshotInitMode Decides what to do with the snapshot created during logical slot initialization. Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public enum LogicalSlotSnapshotInitMode Fields Name Description Export Export the snapshot for use in other sessions. This is the default. This option can't be used inside a transaction. NoExport Just use the snapshot for logical decoding as normal but don't do anything else with it. Use Use the snapshot for the current transaction executing the command. This option must be used in a transaction, and CREATE_REPLICATION_SLOT must be the first command run in that transaction."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.BeginMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.BeginMessage.html",
    "title": "Class BeginMessage | Npgsql Documentation",
    "keywords": "Class BeginMessage Logical Replication Protocol begin message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage BeginMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class BeginMessage : TransactionControlMessage Properties | Edit this page View Source TransactionCommitTimestamp Commit timestamp of the transaction. The value is in number of microseconds since PostgreSQL epoch (2000-01-01). Declaration public DateTime TransactionCommitTimestamp { get; } Property Value Type Description DateTime | Edit this page View Source TransactionFinalLsn The final LSN of the transaction. Declaration public NpgsqlLogSequenceNumber TransactionFinalLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.BeginPrepareMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.BeginPrepareMessage.html",
    "title": "Class BeginPrepareMessage | Npgsql Documentation",
    "keywords": "Class BeginPrepareMessage Logical Replication Protocol begin prepare message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage PrepareMessageBase BeginPrepareMessage Inherited Members PrepareMessageBase.PrepareLsn PrepareMessageBase.PrepareEndLsn PrepareMessageBase.TransactionPrepareTimestamp PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class BeginPrepareMessage : PrepareMessageBase"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.CommitMessage.CommitFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.CommitMessage.CommitFlags.html",
    "title": "Enum CommitMessage.CommitFlags | Npgsql Documentation",
    "keywords": "Enum CommitMessage.CommitFlags Flags for the commit. Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax [Flags] public enum CommitMessage.CommitFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.CommitMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.CommitMessage.html",
    "title": "Class CommitMessage | Npgsql Documentation",
    "keywords": "Class CommitMessage Logical Replication Protocol commit message Inheritance object ReplicationMessage PgOutputReplicationMessage CommitMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class CommitMessage : PgOutputReplicationMessage Properties | Edit this page View Source CommitLsn The LSN of the commit. Declaration public NpgsqlLogSequenceNumber CommitLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source Flags Flags; currently unused. Declaration public CommitMessage.CommitFlags Flags { get; } Property Value Type Description CommitMessage.CommitFlags | Edit this page View Source TransactionCommitTimestamp Commit timestamp of the transaction. Declaration public DateTime TransactionCommitTimestamp { get; } Property Value Type Description DateTime | Edit this page View Source TransactionEndLsn The end LSN of the transaction. Declaration public NpgsqlLogSequenceNumber TransactionEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.CommitPreparedFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.CommitPreparedFlags.html",
    "title": "Enum CommitPreparedMessage.CommitPreparedFlags | Npgsql Documentation",
    "keywords": "Enum CommitPreparedMessage.CommitPreparedFlags Flags for the commit prepared; currently unused. Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax [Flags] public enum CommitPreparedMessage.CommitPreparedFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.html",
    "title": "Class CommitPreparedMessage | Npgsql Documentation",
    "keywords": "Class CommitPreparedMessage Logical Replication Protocol commit prepared message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage CommitPreparedMessage Inherited Members PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class CommitPreparedMessage : PreparedTransactionControlMessage Properties | Edit this page View Source CommitPreparedEndLsn The end LSN of the commit prepared transaction. Declaration public NpgsqlLogSequenceNumber CommitPreparedEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source CommitPreparedLsn The LSN of the commit prepared. Declaration public NpgsqlLogSequenceNumber CommitPreparedLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source Flags Flags for the commit prepared; currently unused. Declaration public CommitPreparedMessage.CommitPreparedFlags Flags { get; } Property Value Type Description CommitPreparedMessage.CommitPreparedFlags | Edit this page View Source TransactionCommitTimestamp Commit timestamp of the transaction. Declaration public DateTime TransactionCommitTimestamp { get; } Property Value Type Description DateTime"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.DefaultUpdateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.DefaultUpdateMessage.html",
    "title": "Class DefaultUpdateMessage | Npgsql Documentation",
    "keywords": "Class DefaultUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to DEFAULT. Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage UpdateMessage DefaultUpdateMessage Inherited Members UpdateMessage.Relation TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public class DefaultUpdateMessage : UpdateMessage Properties | Edit this page View Source NewRow Columns representing the new row. Declaration public override ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple Overrides UpdateMessage.NewRow"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.DeleteMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.DeleteMessage.html",
    "title": "Class DeleteMessage | Npgsql Documentation",
    "keywords": "Class DeleteMessage Abstract base class for Logical Replication Protocol delete message types. Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage DeleteMessage FullDeleteMessage KeyDeleteMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public abstract class DeleteMessage : TransactionalMessage Properties | Edit this page View Source Relation The relation for this InsertMessage. Declaration public RelationMessage Relation { get; } Property Value Type Description RelationMessage"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.FullDeleteMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.FullDeleteMessage.html",
    "title": "Class FullDeleteMessage | Npgsql Documentation",
    "keywords": "Class FullDeleteMessage Logical Replication Protocol delete message for tables with REPLICA IDENTITY REPLICA IDENTITY set to FULL. Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage DeleteMessage FullDeleteMessage Inherited Members DeleteMessage.Relation TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class FullDeleteMessage : DeleteMessage Properties | Edit this page View Source OldRow Columns representing the deleted row. Declaration public ReplicationTuple OldRow { get; } Property Value Type Description ReplicationTuple"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.FullUpdateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.FullUpdateMessage.html",
    "title": "Class FullUpdateMessage | Npgsql Documentation",
    "keywords": "Class FullUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to FULL. Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage UpdateMessage FullUpdateMessage Inherited Members UpdateMessage.Relation TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class FullUpdateMessage : UpdateMessage Properties | Edit this page View Source NewRow Columns representing the new row. Declaration public override ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple Overrides UpdateMessage.NewRow | Edit this page View Source OldRow Columns representing the old row. Declaration public ReplicationTuple OldRow { get; } Property Value Type Description ReplicationTuple"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage.html",
    "title": "Class IndexUpdateMessage | Npgsql Documentation",
    "keywords": "Class IndexUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to USING INDEX. Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage UpdateMessage IndexUpdateMessage Inherited Members UpdateMessage.Relation TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class IndexUpdateMessage : UpdateMessage Properties | Edit this page View Source Key Columns representing the key. Declaration public ReplicationTuple Key { get; } Property Value Type Description ReplicationTuple | Edit this page View Source NewRow Columns representing the new row. Declaration public override ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple Overrides UpdateMessage.NewRow"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.InsertMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.InsertMessage.html",
    "title": "Class InsertMessage | Npgsql Documentation",
    "keywords": "Class InsertMessage Logical Replication Protocol insert message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage InsertMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class InsertMessage : TransactionalMessage Properties | Edit this page View Source NewRow Columns representing the new row. Declaration public ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple | Edit this page View Source Relation The relation for this InsertMessage. Declaration public RelationMessage Relation { get; } Property Value Type Description RelationMessage"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage.html",
    "title": "Class KeyDeleteMessage | Npgsql Documentation",
    "keywords": "Class KeyDeleteMessage Logical Replication Protocol delete message for tables with REPLICA IDENTITY set to DEFAULT or USING INDEX. Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage DeleteMessage KeyDeleteMessage Inherited Members DeleteMessage.Relation TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class KeyDeleteMessage : DeleteMessage Properties | Edit this page View Source Key Columns representing the key. Declaration public ReplicationTuple Key { get; } Property Value Type Description ReplicationTuple"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.html",
    "title": "Class LogicalDecodingMessage | Npgsql Documentation",
    "keywords": "Class LogicalDecodingMessage Logical Replication Protocol logical decoding message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage LogicalDecodingMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class LogicalDecodingMessage : TransactionalMessage Properties | Edit this page View Source Data The content of the logical decoding message. Declaration public Stream Data { get; } Property Value Type Description Stream | Edit this page View Source Flags Flags; Either 0 for no flags or 1 if the logical decoding message is transactional. Declaration public byte Flags { get; } Property Value Type Description byte | Edit this page View Source MessageLsn The LSN of the logical decoding message. Declaration public NpgsqlLogSequenceNumber MessageLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source Prefix The prefix of the logical decoding message. Declaration public string Prefix { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.OriginMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.OriginMessage.html",
    "title": "Class OriginMessage | Npgsql Documentation",
    "keywords": "Class OriginMessage Logical Replication Protocol origin message Inheritance object ReplicationMessage PgOutputReplicationMessage OriginMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class OriginMessage : PgOutputReplicationMessage Properties | Edit this page View Source OriginCommitLsn The LSN of the commit on the origin server. Declaration public NpgsqlLogSequenceNumber OriginCommitLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source OriginName Name of the origin. Declaration public string OriginName { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage.html",
    "title": "Class PgOutputReplicationMessage | Npgsql Documentation",
    "keywords": "Class PgOutputReplicationMessage The base class of all Logical Replication Protocol Messages Inheritance object ReplicationMessage PgOutputReplicationMessage CommitMessage OriginMessage StreamStopMessage TransactionControlMessage TransactionalMessage Inherited Members ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public abstract class PgOutputReplicationMessage : ReplicationMessage Remarks See https://www.postgresql.org/docs/current/protocol-logicalrep-message-formats.html for details about the protocol. Methods | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessage.PrepareFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessage.PrepareFlags.html",
    "title": "Enum PrepareMessage.PrepareFlags | Npgsql Documentation",
    "keywords": "Enum PrepareMessage.PrepareFlags Flags for the prepare; currently unused. Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax [Flags] public enum PrepareMessage.PrepareFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessage.html",
    "title": "Class PrepareMessage | Npgsql Documentation",
    "keywords": "Class PrepareMessage Logical Replication Protocol prepare message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage PrepareMessageBase PrepareMessage Inherited Members PrepareMessageBase.PrepareLsn PrepareMessageBase.PrepareEndLsn PrepareMessageBase.TransactionPrepareTimestamp PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class PrepareMessage : PrepareMessageBase Properties | Edit this page View Source Flags Flags for the prepare; currently unused. Declaration public PrepareMessage.PrepareFlags Flags { get; } Property Value Type Description PrepareMessage.PrepareFlags"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessageBase.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PrepareMessageBase.html",
    "title": "Class PrepareMessageBase | Npgsql Documentation",
    "keywords": "Class PrepareMessageBase Abstract base class for the logical replication protocol begin prepare and prepare message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage PrepareMessageBase BeginPrepareMessage PrepareMessage StreamPrepareMessage Inherited Members PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public abstract class PrepareMessageBase : PreparedTransactionControlMessage Properties | Edit this page View Source PrepareEndLsn The end LSN of the prepared transaction. Declaration public NpgsqlLogSequenceNumber PrepareEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source PrepareLsn The LSN of the prepare. Declaration public NpgsqlLogSequenceNumber PrepareLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source TransactionPrepareTimestamp Prepare timestamp of the transaction. Declaration public DateTime TransactionPrepareTimestamp { get; } Property Value Type Description DateTime"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.PreparedTransactionControlMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.PreparedTransactionControlMessage.html",
    "title": "Class PreparedTransactionControlMessage | Npgsql Documentation",
    "keywords": "Class PreparedTransactionControlMessage Abstract base class for Logical Replication Protocol prepare and begin prepare message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage CommitPreparedMessage PrepareMessageBase RollbackPreparedMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public abstract class PreparedTransactionControlMessage : TransactionControlMessage Properties | Edit this page View Source TransactionGid The user defined GID of the two-phase transaction. Declaration public string TransactionGid { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.ColumnFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.ColumnFlags.html",
    "title": "Enum RelationMessage.Column.ColumnFlags | Npgsql Documentation",
    "keywords": "Enum RelationMessage.Column.ColumnFlags Flags for the column. Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax [Flags] public enum RelationMessage.Column.ColumnFlags Fields Name Description None No flags. PartOfKey Marks the column as part of the key."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.html",
    "title": "Struct RelationMessage.Column | Npgsql Documentation",
    "keywords": "Struct RelationMessage.Column Represents a column in a Logical Replication Protocol relation message Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public readonly struct RelationMessage.Column Properties | Edit this page View Source ColumnName Name of the column. Declaration public string ColumnName { get; } Property Value Type Description string | Edit this page View Source DataTypeId ID of the column's data type. Declaration public uint DataTypeId { get; } Property Value Type Description uint | Edit this page View Source Flags Flags for the column. Declaration public RelationMessage.Column.ColumnFlags Flags { get; } Property Value Type Description RelationMessage.Column.ColumnFlags | Edit this page View Source TypeModifier Type modifier of the column (atttypmod). Declaration public int TypeModifier { get; } Property Value Type Description int"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentitySetting.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentitySetting.html",
    "title": "Enum RelationMessage.ReplicaIdentitySetting | Npgsql Documentation",
    "keywords": "Enum RelationMessage.ReplicaIdentitySetting Replica identity setting for the relation (same as relreplident in pg_class). Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public enum RelationMessage.ReplicaIdentitySetting : byte Remarks See https://www.postgresql.org/docs/current/catalog-pg-class.html Fields Name Description AllColumns All columns. Default Default (primary key, if any). IndexWithIndIsReplIdent Index with indisreplident set (same as nothing if the index used has been dropped) Nothing Nothing."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessage.html",
    "title": "Class RelationMessage | Npgsql Documentation",
    "keywords": "Class RelationMessage Logical Replication Protocol relation message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage RelationMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class RelationMessage : TransactionalMessage Properties | Edit this page View Source Columns Relation columns Declaration public IReadOnlyList<RelationMessage.Column> Columns { get; } Property Value Type Description IReadOnlyList<RelationMessage.Column> | Edit this page View Source Namespace Namespace (empty string for pg_catalog). Declaration public string Namespace { get; } Property Value Type Description string | Edit this page View Source RelationId ID of the relation. Declaration public uint RelationId { get; } Property Value Type Description uint | Edit this page View Source RelationName Relation name. Declaration public string RelationName { get; } Property Value Type Description string | Edit this page View Source ReplicaIdentity Replica identity setting for the relation (same as relreplident in pg_class): columns used to form “replica identity” for rows. Declaration public RelationMessage.ReplicaIdentitySetting ReplicaIdentity { get; } Property Value Type Description RelationMessage.ReplicaIdentitySetting"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.html",
    "title": "Struct RelationMessageColumn | Npgsql Documentation",
    "keywords": "Struct RelationMessageColumn Represents a column in a Logical Replication Protocol relation message Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public readonly struct RelationMessageColumn Properties | Edit this page View Source ColumnName Name of the column. Declaration public string ColumnName { get; } Property Value Type Description string | Edit this page View Source DataTypeId ID of the column's data type. Declaration public uint DataTypeId { get; } Property Value Type Description uint | Edit this page View Source Flags Flags for the column. Currently can be either 0 for no flags or 1 which marks the column as part of the key. Declaration public byte Flags { get; } Property Value Type Description byte | Edit this page View Source TypeModifier Type modifier of the column (atttypmod). Declaration public int TypeModifier { get; } Property Value Type Description int"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.RollbackPreparedFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.RollbackPreparedFlags.html",
    "title": "Enum RollbackPreparedMessage.RollbackPreparedFlags | Npgsql Documentation",
    "keywords": "Enum RollbackPreparedMessage.RollbackPreparedFlags Flags for the rollback prepared; currently unused. Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax [Flags] public enum RollbackPreparedMessage.RollbackPreparedFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.html",
    "title": "Class RollbackPreparedMessage | Npgsql Documentation",
    "keywords": "Class RollbackPreparedMessage Logical Replication Protocol rollback prepared message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage RollbackPreparedMessage Inherited Members PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class RollbackPreparedMessage : PreparedTransactionControlMessage Properties | Edit this page View Source Flags Flags for the rollback prepared; currently unused. Declaration public RollbackPreparedMessage.RollbackPreparedFlags Flags { get; } Property Value Type Description RollbackPreparedMessage.RollbackPreparedFlags | Edit this page View Source PreparedTransactionEndLsn The end LSN of the prepared transaction. Declaration public NpgsqlLogSequenceNumber PreparedTransactionEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source RollbackPreparedEndLsn The end LSN of the rollback prepared transaction. Declaration public NpgsqlLogSequenceNumber RollbackPreparedEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source TransactionPrepareTimestamp Prepare timestamp of the transaction. Declaration public DateTime TransactionPrepareTimestamp { get; } Property Value Type Description DateTime | Edit this page View Source TransactionRollbackTimestamp Rollback timestamp of the transaction. Declaration public DateTime TransactionRollbackTimestamp { get; } Property Value Type Description DateTime"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.html",
    "title": "Class StreamAbortMessage | Npgsql Documentation",
    "keywords": "Class StreamAbortMessage Logical Replication Protocol stream abort message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage StreamAbortMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class StreamAbortMessage : TransactionControlMessage Properties | Edit this page View Source SubtransactionXid Xid of the subtransaction (will be same as xid of the transaction for top-level transactions). Declaration public uint SubtransactionXid { get; } Property Value Type Description uint"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.html",
    "title": "Class StreamCommitMessage | Npgsql Documentation",
    "keywords": "Class StreamCommitMessage Logical Replication Protocol stream commit message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage StreamCommitMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class StreamCommitMessage : TransactionControlMessage Properties | Edit this page View Source CommitLsn The LSN of the commit. Declaration public NpgsqlLogSequenceNumber CommitLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source Flags Flags; currently unused (must be 0). Declaration public byte Flags { get; } Property Value Type Description byte | Edit this page View Source TransactionCommitTimestamp Commit timestamp of the transaction. Declaration public DateTime TransactionCommitTimestamp { get; } Property Value Type Description DateTime | Edit this page View Source TransactionEndLsn The end LSN of the transaction. Declaration public NpgsqlLogSequenceNumber TransactionEndLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.StreamPrepareFlags.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.StreamPrepareFlags.html",
    "title": "Enum StreamPrepareMessage.StreamPrepareFlags | Npgsql Documentation",
    "keywords": "Enum StreamPrepareMessage.StreamPrepareFlags Flags for the prepare; currently unused. Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax [Flags] public enum StreamPrepareMessage.StreamPrepareFlags : byte Fields Name Description None No flags."
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.html",
    "title": "Class StreamPrepareMessage | Npgsql Documentation",
    "keywords": "Class StreamPrepareMessage Logical Replication Protocol stream prepare message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage PreparedTransactionControlMessage PrepareMessageBase StreamPrepareMessage Inherited Members PrepareMessageBase.PrepareLsn PrepareMessageBase.PrepareEndLsn PrepareMessageBase.TransactionPrepareTimestamp PreparedTransactionControlMessage.TransactionGid TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class StreamPrepareMessage : PrepareMessageBase Properties | Edit this page View Source Flags Flags for the prepare; currently unused. Declaration public StreamPrepareMessage.StreamPrepareFlags Flags { get; } Property Value Type Description StreamPrepareMessage.StreamPrepareFlags"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamStartMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamStartMessage.html",
    "title": "Class StreamStartMessage | Npgsql Documentation",
    "keywords": "Class StreamStartMessage Logical Replication Protocol stream start message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage StreamStartMessage Inherited Members TransactionControlMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class StreamStartMessage : TransactionControlMessage Properties | Edit this page View Source StreamSegmentIndicator A value of 1 indicates this is the first stream segment for this XID, 0 for any other stream segment. Declaration public byte StreamSegmentIndicator { get; } Property Value Type Description byte"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.StreamStopMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.StreamStopMessage.html",
    "title": "Class StreamStopMessage | Npgsql Documentation",
    "keywords": "Class StreamStopMessage Logical Replication Protocol stream stop message Inheritance object ReplicationMessage PgOutputReplicationMessage StreamStopMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class StreamStopMessage : PgOutputReplicationMessage"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TransactionControlMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TransactionControlMessage.html",
    "title": "Class TransactionControlMessage | Npgsql Documentation",
    "keywords": "Class TransactionControlMessage The common base class for all replication messages that set the transaction xid of a transaction Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionControlMessage BeginMessage PreparedTransactionControlMessage StreamAbortMessage StreamCommitMessage StreamStartMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public abstract class TransactionControlMessage : PgOutputReplicationMessage Properties | Edit this page View Source TransactionXid Xid of the transaction. Declaration public uint TransactionXid { get; } Property Value Type Description uint"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TransactionalMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TransactionalMessage.html",
    "title": "Class TransactionalMessage | Npgsql Documentation",
    "keywords": "Class TransactionalMessage The common base class for all streaming replication messages that can be part of a streaming transaction (protocol V2) Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage DeleteMessage InsertMessage LogicalDecodingMessage RelationMessage TruncateMessage TypeMessage UpdateMessage Inherited Members PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public abstract class TransactionalMessage : PgOutputReplicationMessage Properties | Edit this page View Source TransactionXid Xid of the transaction (only present for streamed transactions). Declaration public uint? TransactionXid { get; } Property Value Type Description uint?"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TruncateMessage.TruncateOptions.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TruncateMessage.TruncateOptions.html",
    "title": "Enum TruncateMessage.TruncateOptions | Npgsql Documentation",
    "keywords": "Enum TruncateMessage.TruncateOptions Enum representing the additional options for the TRUNCATE command as flags Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax [Flags] public enum TruncateMessage.TruncateOptions : byte Fields Name Description Cascade CASCADE was specified None No additional option was specified RestartIdentity RESTART IDENTITY was specified"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TruncateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TruncateMessage.html",
    "title": "Class TruncateMessage | Npgsql Documentation",
    "keywords": "Class TruncateMessage Logical Replication Protocol truncate message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage TruncateMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class TruncateMessage : TransactionalMessage Properties | Edit this page View Source Options Option flags for TRUNCATE Declaration public TruncateMessage.TruncateOptions Options { get; } Property Value Type Description TruncateMessage.TruncateOptions | Edit this page View Source Relations The relations being truncated. Declaration public IReadOnlyList<RelationMessage> Relations { get; } Property Value Type Description IReadOnlyList<RelationMessage>"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.TypeMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.TypeMessage.html",
    "title": "Class TypeMessage | Npgsql Documentation",
    "keywords": "Class TypeMessage Logical Replication Protocol type message Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage TypeMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public sealed class TypeMessage : TransactionalMessage Properties | Edit this page View Source Name Name of the data type. Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Namespace Namespace (empty string for pg_catalog). Declaration public string Namespace { get; } Property Value Type Description string | Edit this page View Source TypeId ID of the data type. Declaration public uint TypeId { get; } Property Value Type Description uint"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.UpdateMessage.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.UpdateMessage.html",
    "title": "Class UpdateMessage | Npgsql Documentation",
    "keywords": "Class UpdateMessage Abstract base class for Logical Replication Protocol delete message types. Inheritance object ReplicationMessage PgOutputReplicationMessage TransactionalMessage UpdateMessage DefaultUpdateMessage FullUpdateMessage IndexUpdateMessage Inherited Members TransactionalMessage.TransactionXid PgOutputReplicationMessage.ToString() ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.PgOutput.Messages Assembly: Npgsql.dll Syntax public abstract class UpdateMessage : TransactionalMessage Properties | Edit this page View Source NewRow Columns representing the new row. Declaration public abstract ReplicationTuple NewRow { get; } Property Value Type Description ReplicationTuple | Edit this page View Source Relation The relation for this InsertMessage. Declaration public RelationMessage Relation { get; } Property Value Type Description RelationMessage"
  },
  "doc/api/Npgsql.Replication.PgOutput.Messages.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.Messages.html",
    "title": "Namespace Npgsql.Replication.PgOutput.Messages | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication.PgOutput.Messages Classes BeginMessage Logical Replication Protocol begin message BeginPrepareMessage Logical Replication Protocol begin prepare message CommitMessage Logical Replication Protocol commit message CommitPreparedMessage Logical Replication Protocol commit prepared message DefaultUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to DEFAULT. DeleteMessage Abstract base class for Logical Replication Protocol delete message types. FullDeleteMessage Logical Replication Protocol delete message for tables with REPLICA IDENTITY REPLICA IDENTITY set to FULL. FullUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to FULL. IndexUpdateMessage Logical Replication Protocol update message for tables with REPLICA IDENTITY set to USING INDEX. InsertMessage Logical Replication Protocol insert message KeyDeleteMessage Logical Replication Protocol delete message for tables with REPLICA IDENTITY set to DEFAULT or USING INDEX. LogicalDecodingMessage Logical Replication Protocol logical decoding message OriginMessage Logical Replication Protocol origin message PgOutputReplicationMessage The base class of all Logical Replication Protocol Messages PrepareMessage Logical Replication Protocol prepare message PrepareMessageBase Abstract base class for the logical replication protocol begin prepare and prepare message PreparedTransactionControlMessage Abstract base class for Logical Replication Protocol prepare and begin prepare message RelationMessage Logical Replication Protocol relation message RollbackPreparedMessage Logical Replication Protocol rollback prepared message StreamAbortMessage Logical Replication Protocol stream abort message StreamCommitMessage Logical Replication Protocol stream commit message StreamPrepareMessage Logical Replication Protocol stream prepare message StreamStartMessage Logical Replication Protocol stream start message StreamStopMessage Logical Replication Protocol stream stop message TransactionControlMessage The common base class for all replication messages that set the transaction xid of a transaction TransactionalMessage The common base class for all streaming replication messages that can be part of a streaming transaction (protocol V2) TruncateMessage Logical Replication Protocol truncate message TypeMessage Logical Replication Protocol type message UpdateMessage Abstract base class for Logical Replication Protocol delete message types. Structs RelationMessage.Column Represents a column in a Logical Replication Protocol relation message RelationMessageColumn Represents a column in a Logical Replication Protocol relation message Enums CommitMessage.CommitFlags Flags for the commit. CommitPreparedMessage.CommitPreparedFlags Flags for the commit prepared; currently unused. PrepareMessage.PrepareFlags Flags for the prepare; currently unused. RelationMessage.Column.ColumnFlags Flags for the column. RelationMessage.ReplicaIdentitySetting Replica identity setting for the relation (same as relreplident in pg_class). RollbackPreparedMessage.RollbackPreparedFlags Flags for the rollback prepared; currently unused. StreamPrepareMessage.StreamPrepareFlags Flags for the prepare; currently unused. TruncateMessage.TruncateOptions Enum representing the additional options for the TRUNCATE command as flags"
  },
  "doc/api/Npgsql.Replication.PgOutput.PgOutputReplicationOptions.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.PgOutputReplicationOptions.html",
    "title": "Class PgOutputReplicationOptions | Npgsql Documentation",
    "keywords": "Class PgOutputReplicationOptions Options to be passed to the pgoutput plugin Inheritance object PgOutputReplicationOptions Implements IEquatable<PgOutputReplicationOptions> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication.PgOutput Assembly: Npgsql.dll Syntax public class PgOutputReplicationOptions : IEquatable<PgOutputReplicationOptions> Constructors | Edit this page View Source PgOutputReplicationOptions(IEnumerable<string>, ulong, bool?, bool?, bool?, bool?) Creates a new instance of PgOutputReplicationOptions. Declaration public PgOutputReplicationOptions(IEnumerable<string> publicationNames, ulong protocolVersion, bool? binary = null, bool? streaming = null, bool? messages = null, bool? twoPhase = null) Parameters Type Name Description IEnumerable<string> publicationNames The publication names to include into the stream ulong protocolVersion The version of the logical streaming replication protocol bool? binary Send values in binary representation bool? streaming Enable streaming of in-progress transactions bool? messages Write logical decoding messages into the replication stream bool? twoPhase Enable streaming of prepared transactions | Edit this page View Source PgOutputReplicationOptions(string, ulong, bool?, bool?, bool?, bool?) Creates a new instance of PgOutputReplicationOptions. Declaration public PgOutputReplicationOptions(string publicationName, ulong protocolVersion, bool? binary = null, bool? streaming = null, bool? messages = null, bool? twoPhase = null) Parameters Type Name Description string publicationName The publication names to include into the stream ulong protocolVersion The version of the logical streaming replication protocol bool? binary Send values in binary representation bool? streaming Enable streaming of in-progress transactions bool? messages Write logical decoding messages into the replication stream bool? twoPhase Enable streaming of prepared transactions Properties | Edit this page View Source Binary Send values in binary representation Declaration public bool? Binary { get; } Property Value Type Description bool? Remarks This works in PostgreSQL versions 14+ | Edit this page View Source Messages Write logical decoding messages into the replication stream Declaration public bool? Messages { get; } Property Value Type Description bool? Remarks This works in PostgreSQL versions 14+ | Edit this page View Source ProtocolVersion The version of the Logical Streaming Replication Protocol Declaration public ulong ProtocolVersion { get; } Property Value Type Description ulong | Edit this page View Source PublicationNames The publication names to stream Declaration public List<string> PublicationNames { get; } Property Value Type Description List<string> | Edit this page View Source Streaming Enable streaming of in-progress transactions Declaration public bool? Streaming { get; } Property Value Type Description bool? Remarks This works as of logical streaming replication protocol version 2 (PostgreSQL 14+) | Edit this page View Source TwoPhase Enable streaming of prepared transactions Declaration public bool? TwoPhase { get; } Property Value Type Description bool? Remarks This works in PostgreSQL versions 15+ Methods | Edit this page View Source Equals(PgOutputReplicationOptions?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PgOutputReplicationOptions? other) Parameters Type Name Description PgOutputReplicationOptions other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() Implements IEquatable<T>"
  },
  "doc/api/Npgsql.Replication.PgOutput.PgOutputReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.PgOutputReplicationSlot.html",
    "title": "Class PgOutputReplicationSlot | Npgsql Documentation",
    "keywords": "Class PgOutputReplicationSlot Acts as a proxy for a logical replication slot initialized for for the logical streaming replication protocol (pgoutput logical decoding plugin). Inheritance object ReplicationSlot LogicalReplicationSlot PgOutputReplicationSlot Inherited Members LogicalReplicationSlot.SnapshotName LogicalReplicationSlot.OutputPlugin LogicalReplicationSlot.ConsistentPoint ReplicationSlot.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication.PgOutput Assembly: Npgsql.dll Syntax public class PgOutputReplicationSlot : LogicalReplicationSlot Constructors | Edit this page View Source PgOutputReplicationSlot(PgOutputReplicationSlot) Creates a new PgOutputReplicationSlot instance. Declaration protected PgOutputReplicationSlot(PgOutputReplicationSlot slot) Parameters Type Name Description PgOutputReplicationSlot slot The PgOutputReplicationSlot from which the new instance should be initialized Remarks This constructor is intended to be consumed by plugins sitting on top of PgOutputReplicationSlot | Edit this page View Source PgOutputReplicationSlot(ReplicationSlotOptions) Creates a new PgOutputReplicationSlot instance. Declaration public PgOutputReplicationSlot(ReplicationSlotOptions options) Parameters Type Name Description ReplicationSlotOptions options The ReplicationSlotOptions representing the existing replication slot Remarks Create a PgOutputReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for the pgoutput logical decoding plugin. | Edit this page View Source PgOutputReplicationSlot(string) Creates a new PgOutputReplicationSlot instance. Declaration public PgOutputReplicationSlot(string slotName) Parameters Type Name Description string slotName The name of the existing replication slot Remarks Create a PgOutputReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for the pgoutput logical decoding plugin."
  },
  "doc/api/Npgsql.Replication.PgOutput.ReplicationTuple.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.ReplicationTuple.html",
    "title": "Class ReplicationTuple | Npgsql Documentation",
    "keywords": "Class ReplicationTuple Represents a streaming tuple containing ReplicationValue. Inheritance object ReplicationTuple Implements IAsyncEnumerable<ReplicationValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication.PgOutput Assembly: Npgsql.dll Syntax public class ReplicationTuple : IAsyncEnumerable<ReplicationValue> Properties | Edit this page View Source NumColumns The number of columns in the tuple. Declaration public ushort NumColumns { get; } Property Value Type Description ushort Methods | Edit this page View Source GetAsyncEnumerator(CancellationToken) Returns an enumerator that iterates asynchronously through the collection. Declaration public virtual IAsyncEnumerator<ReplicationValue> GetAsyncEnumerator(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken that may be used to cancel the asynchronous iteration. Returns Type Description IAsyncEnumerator<ReplicationValue> An enumerator that can be used to iterate asynchronously through the collection. Implements IAsyncEnumerable<T>"
  },
  "doc/api/Npgsql.Replication.PgOutput.ReplicationValue.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.ReplicationValue.html",
    "title": "Class ReplicationValue | Npgsql Documentation",
    "keywords": "Class ReplicationValue Represents a column value in a logical replication session. Inheritance object ReplicationValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication.PgOutput Assembly: Npgsql.dll Syntax public class ReplicationValue Properties | Edit this page View Source IsDBNull Gets a value that indicates whether the column contains nonexistent or missing values. Declaration public bool IsDBNull { get; } Property Value Type Description bool true if the specified column is equivalent to DBNull; otherwise false. | Edit this page View Source IsUnchangedToastedValue Gets a value that indicates whether the column contains an unchanged TOASTed value (the actual value is not sent). Declaration public bool IsUnchangedToastedValue { get; } Property Value Type Description bool Whether the specified column is an unchanged TOASTed value. | Edit this page View Source Kind The kind of data transmitted for a tuple in a Logical Replication Protocol message. Declaration public TupleDataKind Kind { get; } Property Value Type Description TupleDataKind | Edit this page View Source Length The length of the value in bytes. Declaration public int Length { get; } Property Value Type Description int Methods | Edit this page View Source Get(CancellationToken) Gets the value of the specified column as an instance of object. Declaration public ValueTask<object> Get(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description ValueTask<object> | Edit this page View Source GetDataTypeName() Gets the data type information for the specified field. This is be the PostgreSQL type name (e.g. double precision), not the .NET type (see GetFieldType() for that). Declaration public string GetDataTypeName() Returns Type Description string | Edit this page View Source GetFieldName() Gets the name of the specified column. Declaration public string GetFieldName() Returns Type Description string The name of the specified column. | Edit this page View Source GetFieldType() Gets the data type of the specified column. Declaration public Type GetFieldType() Returns Type Description Type The data type of the specified column. | Edit this page View Source GetPostgresType() Gets a representation of the PostgreSQL data type for the specified field. The returned representation can be used to access various information about the field. Declaration public PostgresType GetPostgresType() Returns Type Description PostgresType | Edit this page View Source GetStream() Retrieves data as a Stream. Declaration public Stream GetStream() Returns Type Description Stream | Edit this page View Source GetTextReader() Retrieves data as a TextReader. Declaration public TextReader GetTextReader() Returns Type Description TextReader | Edit this page View Source Get<T>(CancellationToken) Gets the value of the specified column as a type. Declaration public ValueTask<T> Get<T>(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description ValueTask<T> Type Parameters Name Description T The type of the value to be returned."
  },
  "doc/api/Npgsql.Replication.PgOutput.TupleDataKind.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.TupleDataKind.html",
    "title": "Enum TupleDataKind | Npgsql Documentation",
    "keywords": "Enum TupleDataKind The kind of data transmitted for a tuple in a Logical Replication Protocol message. Namespace: Npgsql.Replication.PgOutput Assembly: Npgsql.dll Syntax public enum TupleDataKind : byte Fields Name Description BinaryValue Identifies the data as binary value. Null Identifies the data as NULL value. TextValue Identifies the data as text formatted value. UnchangedToastedValue Identifies unchanged TOASTed value (the actual value is not sent)."
  },
  "doc/api/Npgsql.Replication.PgOutput.html": {
    "href": "doc/api/Npgsql.Replication.PgOutput.html",
    "title": "Namespace Npgsql.Replication.PgOutput | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication.PgOutput Classes PgOutputReplicationOptions Options to be passed to the pgoutput plugin PgOutputReplicationSlot Acts as a proxy for a logical replication slot initialized for for the logical streaming replication protocol (pgoutput logical decoding plugin). ReplicationTuple Represents a streaming tuple containing ReplicationValue. ReplicationValue Represents a column value in a logical replication session. Enums TupleDataKind The kind of data transmitted for a tuple in a Logical Replication Protocol message."
  },
  "doc/api/Npgsql.Replication.PgOutputConnectionExtensions.html": {
    "href": "doc/api/Npgsql.Replication.PgOutputConnectionExtensions.html",
    "title": "Class PgOutputConnectionExtensions | Npgsql Documentation",
    "keywords": "Class PgOutputConnectionExtensions Extension methods to use LogicalReplicationConnection with the pg_output logical decoding plugin. Inheritance object PgOutputConnectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public static class PgOutputConnectionExtensions Methods | Edit this page View Source CreatePgOutputReplicationSlot(LogicalReplicationConnection, string, bool, LogicalSlotSnapshotInitMode?, bool, CancellationToken) Creates a LogicalReplicationSlot class that wraps a replication slot using the \"pgoutput\" logical decoding plugin and can be used to start streaming replication via the logical streaming replication protocol. Declaration public static Task<PgOutputReplicationSlot> CreatePgOutputReplicationSlot(this LogicalReplicationConnection connection, string slotName, bool temporarySlot = false, LogicalSlotSnapshotInitMode? slotSnapshotInitMode = null, bool twoPhase = false, CancellationToken cancellationToken = default) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for creating the replication slot string slotName The name of the slot to create. Must be a valid replication slot name (see https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION). bool temporarySlot true if this replication slot shall be temporary one; otherwise false. Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished. LogicalSlotSnapshotInitMode? slotSnapshotInitMode A LogicalSlotSnapshotInitMode to specify what to do with the snapshot created during logical slot initialization. Export, which is also the default, will export the snapshot for use in other sessions. This option can't be used inside a transaction. Use will use the snapshot for the current transaction executing the command. This option must be used in a transaction, and Use must be the first command run in that transaction. Finally, NoExport will just use the snapshot for logical decoding as normal but won't do anything else with it. bool twoPhase If true, this logical replication slot supports decoding of two-phase transactions. With this option, two-phase commands like PREPARE TRANSACTION, COMMIT PREPARED and ROLLBACK PREPARED are decoded and transmitted. The transaction will be decoded and transmitted at PREPARE TRANSACTION time. The default is false. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<PgOutputReplicationSlot> A LogicalReplicationSlot that wraps the newly-created replication slot. Remarks See https://www.postgresql.org/docs/current/protocol-logical-replication.html and https://www.postgresql.org/docs/current/protocol-logicalrep-message-formats.html for more information. | Edit this page View Source StartReplication(LogicalReplicationConnection, PgOutputReplicationSlot, PgOutputReplicationOptions, CancellationToken, NpgsqlLogSequenceNumber?) Instructs the server to start the Logical Streaming Replication Protocol (pgoutput logical decoding plugin), starting at WAL location walLocation or at the slot's consistent point if walLocation isn't specified. The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public static IAsyncEnumerable<PgOutputReplicationMessage> StartReplication(this LogicalReplicationConnection connection, PgOutputReplicationSlot slot, PgOutputReplicationOptions options, CancellationToken cancellationToken, NpgsqlLogSequenceNumber? walLocation = null) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for starting replication PgOutputReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. PgOutputReplicationOptions options The collection of options passed to the slot's logical decoding plugin. CancellationToken cancellationToken The token to monitor for stopping the replication. NpgsqlLogSequenceNumber? walLocation The WAL location to begin streaming at. Returns Type Description IAsyncEnumerable<PgOutputReplicationMessage> A Task<TResult> representing an IAsyncEnumerable<T> that can be used to stream WAL entries in form of PgOutputReplicationMessage instances."
  },
  "doc/api/Npgsql.Replication.PhysicalReplicationConnection.html": {
    "href": "doc/api/Npgsql.Replication.PhysicalReplicationConnection.html",
    "title": "Class PhysicalReplicationConnection | Npgsql Documentation",
    "keywords": "Class PhysicalReplicationConnection Represents a physical replication connection to a PostgreSQL server. Inheritance object ReplicationConnection PhysicalReplicationConnection Implements IAsyncDisposable Inherited Members ReplicationConnection.ConnectionString ReplicationConnection.LastReceivedLsn ReplicationConnection.LastFlushedLsn ReplicationConnection.LastAppliedLsn ReplicationConnection.WalReceiverStatusInterval ReplicationConnection.WalReceiverTimeout ReplicationConnection.PostgreSqlVersion ReplicationConnection.ServerVersion ReplicationConnection.CommandTimeout ReplicationConnection.Encoding ReplicationConnection.ProcessID ReplicationConnection.Open(CancellationToken) ReplicationConnection.DisposeAsync() ReplicationConnection.IdentifySystem(CancellationToken) ReplicationConnection.Show(string, CancellationToken) ReplicationConnection.TimelineHistory(uint, CancellationToken) ReplicationConnection.SetReplicationStatus(NpgsqlLogSequenceNumber) ReplicationConnection.SendStatusUpdate(CancellationToken) ReplicationConnection.DropReplicationSlot(string, bool, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public sealed class PhysicalReplicationConnection : ReplicationConnection, IAsyncDisposable Constructors | Edit this page View Source PhysicalReplicationConnection() Initializes a new instance of PhysicalReplicationConnection. Declaration public PhysicalReplicationConnection() | Edit this page View Source PhysicalReplicationConnection(string?) Initializes a new instance of PhysicalReplicationConnection with the given connection string. Declaration public PhysicalReplicationConnection(string? connectionString) Parameters Type Name Description string connectionString The connection used to open the PostgreSQL database. Methods | Edit this page View Source CreateReplicationSlot(string, bool, bool, CancellationToken) Creates a PhysicalReplicationSlot that wraps a PostgreSQL physical replication slot and can be used to start physical streaming replication Declaration public Task<PhysicalReplicationSlot> CreateReplicationSlot(string slotName, bool isTemporary = false, bool reserveWal = false, CancellationToken cancellationToken = default) Parameters Type Name Description string slotName The name of the slot to create. Must be a valid replication slot name (see Section 26.2.6.1). bool isTemporary true if this replication slot shall be a temporary one; otherwise false. Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished. bool reserveWal If this is set to true this physical replication slot reserves WAL immediately. Otherwise, WAL is only reserved upon connection from a streaming replication client. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<PhysicalReplicationSlot> A Task<TResult> representing a PhysicalReplicationSlot that represents the newly-created replication slot. | Edit this page View Source ReadReplicationSlot(string, CancellationToken) Read some information associated to a replication slot. This command is currently only supported for physical replication slots. Declaration public Task<PhysicalReplicationSlot?> ReadReplicationSlot(string slotName, CancellationToken cancellationToken = default) Parameters Type Name Description string slotName The name of the slot to read. Must be a valid replication slot name CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<PhysicalReplicationSlot> A Task<TResult> representing a PhysicalReplicationSlot or null if the replication slot does not exist. | Edit this page View Source StartReplication(PhysicalReplicationSlot?, NpgsqlLogSequenceNumber, CancellationToken, uint) Instructs the server to start streaming the WAL for physical replication, starting at WAL location walLocation. The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public IAsyncEnumerable<XLogDataMessage> StartReplication(PhysicalReplicationSlot? slot, NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, uint timeline = 0) Parameters Type Name Description PhysicalReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. NpgsqlLogSequenceNumber walLocation The WAL location to begin streaming at. CancellationToken cancellationToken The token to be used for stopping the replication. uint timeline Streaming starts on timeline tli. Returns Type Description IAsyncEnumerable<XLogDataMessage> A Task<TResult> representing an IAsyncEnumerable<T> that can be used to stream WAL entries in form of XLogDataMessage instances. Remarks If the client requests a timeline that's not the latest but is part of the history of the server, the server will stream all the WAL on that timeline starting from the requested start point up to the point where the server switched to another timeline. | Edit this page View Source StartReplication(PhysicalReplicationSlot, CancellationToken) Instructs the server to start streaming the WAL for physical replication, starting at the WAL location and timeline id specified in slot. The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public IAsyncEnumerable<XLogDataMessage> StartReplication(PhysicalReplicationSlot slot, CancellationToken cancellationToken) Parameters Type Name Description PhysicalReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. The slot must contain a valid RestartLsn to be used for this overload. CancellationToken cancellationToken The token to be used for stopping the replication. Returns Type Description IAsyncEnumerable<XLogDataMessage> A Task<TResult> representing an IAsyncEnumerable<T> that can be used to stream WAL entries in form of XLogDataMessage instances. Remarks If the client requests a timeline that's not the latest but is part of the history of the server, the server will stream all the WAL on that timeline starting from the requested start point up to the point where the server switched to another timeline. | Edit this page View Source StartReplication(NpgsqlLogSequenceNumber, CancellationToken, uint) Instructs the server to start streaming the WAL for logical replication, starting at WAL location walLocation. The server can reply with an error, for example if the requested section of WAL has already been recycled. Declaration public IAsyncEnumerable<XLogDataMessage> StartReplication(NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, uint timeline = 0) Parameters Type Name Description NpgsqlLogSequenceNumber walLocation The WAL location to begin streaming at. CancellationToken cancellationToken The token to be used for stopping the replication. uint timeline Streaming starts on timeline tli. Returns Type Description IAsyncEnumerable<XLogDataMessage> A Task<TResult> representing an IAsyncEnumerable<T> that can be used to stream WAL entries in form of XLogDataMessage instances. Remarks If the client requests a timeline that's not the latest but is part of the history of the server, the server will stream all the WAL on that timeline starting from the requested start point up to the point where the server switched to another timeline. Implements IAsyncDisposable"
  },
  "doc/api/Npgsql.Replication.PhysicalReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.PhysicalReplicationSlot.html",
    "title": "Class PhysicalReplicationSlot | Npgsql Documentation",
    "keywords": "Class PhysicalReplicationSlot Wraps a replication slot that uses physical replication. Inheritance object ReplicationSlot PhysicalReplicationSlot Inherited Members ReplicationSlot.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public class PhysicalReplicationSlot : ReplicationSlot Constructors | Edit this page View Source PhysicalReplicationSlot(string, NpgsqlLogSequenceNumber?, uint?) Creates a new PhysicalReplicationSlot instance. Declaration public PhysicalReplicationSlot(string slotName, NpgsqlLogSequenceNumber? restartLsn = null, uint? restartTimeline = null) Parameters Type Name Description string slotName The name of the existing replication slot NpgsqlLogSequenceNumber? restartLsn The replication slot's restart_lsn uint? restartTimeline The timeline ID associated to restart_lsn, following the current timeline history. Remarks Create a PhysicalReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for physical replication. Properties | Edit this page View Source RestartLsn The replication slot's restart_lsn. Declaration public NpgsqlLogSequenceNumber? RestartLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber? | Edit this page View Source RestartTimeline The timeline ID associated to restart_lsn, following the current timeline history. Declaration public uint? RestartTimeline { get; } Property Value Type Description uint?"
  },
  "doc/api/Npgsql.Replication.ReplicationConnection.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationConnection.html",
    "title": "Class ReplicationConnection | Npgsql Documentation",
    "keywords": "Class ReplicationConnection Defines the core behavior of replication connections and provides the base class for LogicalReplicationConnection and PhysicalReplicationConnection. Inheritance object ReplicationConnection LogicalReplicationConnection PhysicalReplicationConnection Implements IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public abstract class ReplicationConnection : IAsyncDisposable Properties | Edit this page View Source CommandTimeout Gets or sets the wait time before terminating the attempt to execute a command and generating an error. Declaration public TimeSpan CommandTimeout { get; set; } Property Value Type Description TimeSpan The time to wait for the command to execute. The default value is 30 seconds. | Edit this page View Source ConnectionString Gets or sets the string used to connect to a PostgreSQL database. See the manual for details. Declaration public string ConnectionString { get; set; } Property Value Type Description string The connection string that includes the server name, the database name, and other parameters needed to establish the initial connection. The default value is an empty string. Remarks Since replication connections are a special kind of connection, Pooling, Enlist, Multiplexing and KeepAlive are always disabled no matter what you set them to in your connection string. | Edit this page View Source Encoding The client encoding for the connection This can only be called when there is an active connection. Declaration public Encoding Encoding { get; } Property Value Type Description Encoding | Edit this page View Source LastAppliedLsn The location of the last WAL byte + 1 applied (e. g. written to disk) in the standby. Declaration public NpgsqlLogSequenceNumber LastAppliedLsn { get; set; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source LastFlushedLsn The location of the last WAL byte + 1 flushed to disk in the standby. Declaration public NpgsqlLogSequenceNumber LastFlushedLsn { get; set; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source LastReceivedLsn The location of the last WAL byte + 1 received in the standby. Declaration public NpgsqlLogSequenceNumber LastReceivedLsn { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source PostgreSqlVersion The version of the PostgreSQL server we're connected to. This can only be called when the connection is open. In case of a development or pre-release version this field will contain the version of the next version to be released from this branch. Declaration public Version PostgreSqlVersion { get; } Property Value Type Description Version | Edit this page View Source ProcessID Process id of backend server. This can only be called when there is an active connection. Declaration public int ProcessID { get; } Property Value Type Description int | Edit this page View Source ServerVersion The PostgreSQL server version as returned by the server_version option. This can only be called when the connection is open. Declaration public string ServerVersion { get; } Property Value Type Description string | Edit this page View Source WalReceiverStatusInterval Send replies at least this often. Timeout.InfiniteTimeSpan disables automated replies. Declaration public TimeSpan WalReceiverStatusInterval { get; set; } Property Value Type Description TimeSpan | Edit this page View Source WalReceiverTimeout Time that receiver waits for communication from master. Timeout.InfiniteTimeSpan disables the timeout. Declaration public TimeSpan WalReceiverTimeout { get; set; } Property Value Type Description TimeSpan Methods | Edit this page View Source DisposeAsync() Closes the replication connection and performs tasks associated with freeing, releasing, or resetting its unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. | Edit this page View Source DropReplicationSlot(string, bool, CancellationToken) Drops a replication slot, freeing any reserved server-side resources. If the slot is a logical slot that was created in a database other than the database the walsender is connected to, this command fails. Declaration public Task DropReplicationSlot(string slotName, bool wait = false, CancellationToken cancellationToken = default) Parameters Type Name Description string slotName The name of the slot to drop. bool wait true causes the command to wait until the slot becomes inactive if it currently is active instead of the default behavior of raising an error. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task A task representing the asynchronous drop operation. | Edit this page View Source IdentifySystem(CancellationToken) Requests the server to identify itself. Declaration public Task<ReplicationSystemIdentification> IdentifySystem(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<ReplicationSystemIdentification> A ReplicationSystemIdentification containing information about the system we are connected to. | Edit this page View Source Open(CancellationToken) Opens a database replication connection with the property settings specified by the ConnectionString. Declaration public Task Open(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task A task representing the asynchronous open operation. | Edit this page View Source SendStatusUpdate(CancellationToken) Sends a forced status update to PostgreSQL with the current WAL tracking information. Declaration public Task SendStatusUpdate(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task A Task representing the sending of the status update (and not any PostgreSQL response). Exceptions Type Condition InvalidOperationException The connection currently isn't streaming | Edit this page View Source SetReplicationStatus(NpgsqlLogSequenceNumber) Sets the current status of the replication as it is interpreted by the consuming client. The value supplied in will be sent to the server via LastAppliedLsn and LastFlushedLsn with the next status update. A status update which will happen upon server request, upon expiration of WalReceiverStatusInterval our upon an enforced status update via SendStatusUpdate(CancellationToken), whichever happens first. If you want the value you set here to be pushed to the server immediately (e. g. in synchronous replication scenarios), call SendStatusUpdate(CancellationToken) after calling this method. Declaration public void SetReplicationStatus(NpgsqlLogSequenceNumber lastAppliedAndFlushedLsn) Parameters Type Name Description NpgsqlLogSequenceNumber lastAppliedAndFlushedLsn The location of the last WAL byte + 1 applied (e. g. processed or written to disk) and flushed to disk in the standby. Remarks This is a convenience method setting both LastAppliedLsn and LastFlushedLsn in one operation. You can use it if your application processes replication messages in a way that doesn't care about the difference between writing a message and flushing it to a permanent storage medium. | Edit this page View Source Show(string, CancellationToken) Requests the server to send the current setting of a run-time parameter. This is similar to the SQL command SHOW. Declaration public Task<string> Show(string parameterName, CancellationToken cancellationToken = default) Parameters Type Name Description string parameterName The name of a run-time parameter. Available parameters are documented in https://www.postgresql.org/docs/current/runtime-config.html. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<string> The current setting of the run-time parameter specified in parameterName as string. | Edit this page View Source TimelineHistory(uint, CancellationToken) Requests the server to send over the timeline history file for timeline tli. Declaration public Task<TimelineHistoryFile> TimelineHistory(uint tli, CancellationToken cancellationToken = default) Parameters Type Name Description uint tli The timeline for which the history file should be sent. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<TimelineHistoryFile> The timeline history file for timeline tli Implements IAsyncDisposable"
  },
  "doc/api/Npgsql.Replication.ReplicationMessage.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationMessage.html",
    "title": "Class ReplicationMessage | Npgsql Documentation",
    "keywords": "Class ReplicationMessage The common base class for all streaming replication messages Inheritance object ReplicationMessage PgOutputReplicationMessage TestDecodingData XLogDataMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public abstract class ReplicationMessage Properties | Edit this page View Source ServerClock The server's system clock at the time this message was transmitted, as microseconds since midnight on 2000-01-01. Declaration public DateTime ServerClock { get; } Property Value Type Description DateTime Remarks Since the client using Npgsql and the server may be located in different time zones, as of Npgsql 7.0 this value is no longer converted to local time but keeps its original value in UTC. You can check Kind if you don't want to introduce behavior depending on Npgsql versions. | Edit this page View Source WalEnd The current end of WAL on the server. Declaration public NpgsqlLogSequenceNumber WalEnd { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source WalStart The starting point of the WAL data in this message. Declaration public NpgsqlLogSequenceNumber WalStart { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.ReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationSlot.html",
    "title": "Class ReplicationSlot | Npgsql Documentation",
    "keywords": "Class ReplicationSlot Contains information about a newly-created replication slot. Inheritance object ReplicationSlot LogicalReplicationSlot PhysicalReplicationSlot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public abstract class ReplicationSlot Properties | Edit this page View Source Name The name of the newly-created replication slot. Declaration public string Name { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.Replication.ReplicationSlotOptions.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationSlotOptions.html",
    "title": "Struct ReplicationSlotOptions | Npgsql Documentation",
    "keywords": "Struct ReplicationSlotOptions Contains information about a replication slot. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public readonly struct ReplicationSlotOptions Constructors | Edit this page View Source ReplicationSlotOptions(string, NpgsqlLogSequenceNumber) Creates a new ReplicationSlotOptions instance. Declaration public ReplicationSlotOptions(string slotName, NpgsqlLogSequenceNumber consistentPoint) Parameters Type Name Description string slotName The name of the replication slot. NpgsqlLogSequenceNumber consistentPoint The WAL location at which the slot became consistent. | Edit this page View Source ReplicationSlotOptions(string, string?) Creates a new ReplicationSlotOptions instance. Declaration public ReplicationSlotOptions(string slotName, string? consistentPoint = null) Parameters Type Name Description string slotName The name of the replication slot. string consistentPoint The WAL location at which the slot became consistent. Properties | Edit this page View Source ConsistentPoint The WAL location at which the slot became consistent. Declaration public NpgsqlLogSequenceNumber ConsistentPoint { get; } Property Value Type Description NpgsqlLogSequenceNumber | Edit this page View Source SlotName The name of the replication slot. Declaration public string SlotName { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.Replication.ReplicationSystemIdentification.html": {
    "href": "doc/api/Npgsql.Replication.ReplicationSystemIdentification.html",
    "title": "Class ReplicationSystemIdentification | Npgsql Documentation",
    "keywords": "Class ReplicationSystemIdentification Contains server identification information returned from IdentifySystem(CancellationToken). Inheritance object ReplicationSystemIdentification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public class ReplicationSystemIdentification Properties | Edit this page View Source DbName Database connected to. Declaration public string? DbName { get; } Property Value Type Description string | Edit this page View Source SystemId The unique system identifier identifying the cluster. This can be used to check that the base backup used to initialize the standby came from the same cluster. Declaration public string SystemId { get; } Property Value Type Description string | Edit this page View Source Timeline Current timeline ID. Also useful to check that the standby is consistent with the master. Declaration public uint Timeline { get; } Property Value Type Description uint | Edit this page View Source XLogPos Current WAL flush location. Useful to get a known location in the write-ahead log where streaming can start. Declaration public NpgsqlLogSequenceNumber XLogPos { get; } Property Value Type Description NpgsqlLogSequenceNumber"
  },
  "doc/api/Npgsql.Replication.TestDecoding.TestDecodingData.html": {
    "href": "doc/api/Npgsql.Replication.TestDecoding.TestDecodingData.html",
    "title": "Class TestDecodingData | Npgsql Documentation",
    "keywords": "Class TestDecodingData Text representations of PostgreSQL WAL operations decoded by the \"test_decoding\" plugin. See https://www.postgresql.org/docs/current/test-decoding.html. Inheritance object ReplicationMessage TestDecodingData Inherited Members ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication.TestDecoding Assembly: Npgsql.dll Syntax public sealed class TestDecodingData : ReplicationMessage Properties | Edit this page View Source Data Decoded text representation of the operation performed in this WAL entry Declaration public string Data { get; } Property Value Type Description string Methods | Edit this page View Source Clone() Returns a clone of this message, which can be accessed after other replication messages have been retrieved. Declaration public TestDecodingData Clone() Returns Type Description TestDecodingData | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "doc/api/Npgsql.Replication.TestDecoding.TestDecodingOptions.html": {
    "href": "doc/api/Npgsql.Replication.TestDecoding.TestDecodingOptions.html",
    "title": "Class TestDecodingOptions | Npgsql Documentation",
    "keywords": "Class TestDecodingOptions Options to be passed to the test_decoding plugin Inheritance object TestDecodingOptions Implements IEquatable<TestDecodingOptions> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication.TestDecoding Assembly: Npgsql.dll Syntax public class TestDecodingOptions : IEquatable<TestDecodingOptions> Constructors | Edit this page View Source TestDecodingOptions(bool?, bool?, bool?, bool?, bool?, bool?, bool?) Creates a new instance of TestDecodingOptions. Declaration public TestDecodingOptions(bool? includeXids = null, bool? includeTimestamp = null, bool? forceBinary = null, bool? skipEmptyXacts = null, bool? onlyLocal = null, bool? includeRewrites = null, bool? streamChanges = null) Parameters Type Name Description bool? includeXids Include the transaction number for BEGIN and COMMIT command output bool? includeTimestamp Include the timestamp for COMMIT command output bool? forceBinary Set the output mode to binary bool? skipEmptyXacts Skip output for transactions that didn't change the database bool? onlyLocal Only output data that don't have the replication origin set bool? includeRewrites Include output from table rewrites that were caused by DDL statements bool? streamChanges Enable streaming output Properties | Edit this page View Source ForceBinary Set the output mode to binary Declaration public bool? ForceBinary { get; } Property Value Type Description bool? | Edit this page View Source IncludeRewrites Include output from table rewrites that were caused by DDL statements Declaration public bool? IncludeRewrites { get; } Property Value Type Description bool? | Edit this page View Source IncludeTimestamp Include the timestamp for COMMIT command output Declaration public bool? IncludeTimestamp { get; } Property Value Type Description bool? | Edit this page View Source IncludeXids Include the transaction number for BEGIN and COMMIT command output Declaration public bool? IncludeXids { get; } Property Value Type Description bool? | Edit this page View Source OnlyLocal Only output data that don't have the replication origin set Declaration public bool? OnlyLocal { get; } Property Value Type Description bool? | Edit this page View Source SkipEmptyXacts Skip output for transactions that didn't change the database Declaration public bool? SkipEmptyXacts { get; } Property Value Type Description bool? | Edit this page View Source StreamChanges Enable streaming output Declaration public bool? StreamChanges { get; } Property Value Type Description bool? Methods | Edit this page View Source Equals(TestDecodingOptions?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TestDecodingOptions? other) Parameters Type Name Description TestDecodingOptions other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() Implements IEquatable<T>"
  },
  "doc/api/Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot.html": {
    "href": "doc/api/Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot.html",
    "title": "Class TestDecodingReplicationSlot | Npgsql Documentation",
    "keywords": "Class TestDecodingReplicationSlot Acts as a proxy for a logical replication slot initialized for for the test_decoding logical decoding plugin. Inheritance object ReplicationSlot LogicalReplicationSlot TestDecodingReplicationSlot Inherited Members LogicalReplicationSlot.SnapshotName LogicalReplicationSlot.OutputPlugin LogicalReplicationSlot.ConsistentPoint ReplicationSlot.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication.TestDecoding Assembly: Npgsql.dll Syntax public class TestDecodingReplicationSlot : LogicalReplicationSlot Constructors | Edit this page View Source TestDecodingReplicationSlot(ReplicationSlotOptions) Creates a new TestDecodingReplicationSlot instance. Declaration public TestDecodingReplicationSlot(ReplicationSlotOptions options) Parameters Type Name Description ReplicationSlotOptions options The ReplicationSlotOptions representing the existing replication slot Remarks Create a TestDecodingReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for the test_decoding logical decoding plugin. | Edit this page View Source TestDecodingReplicationSlot(string) Creates a new TestDecodingReplicationSlot instance. Declaration public TestDecodingReplicationSlot(string slotName) Parameters Type Name Description string slotName The name of the existing replication slot Remarks Create a TestDecodingReplicationSlot instance with this constructor to wrap an existing PostgreSQL replication slot that has been initialized for the test_decoding logical decoding plugin."
  },
  "doc/api/Npgsql.Replication.TestDecoding.html": {
    "href": "doc/api/Npgsql.Replication.TestDecoding.html",
    "title": "Namespace Npgsql.Replication.TestDecoding | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication.TestDecoding Classes TestDecodingData Text representations of PostgreSQL WAL operations decoded by the \"test_decoding\" plugin. See https://www.postgresql.org/docs/current/test-decoding.html. TestDecodingOptions Options to be passed to the test_decoding plugin TestDecodingReplicationSlot Acts as a proxy for a logical replication slot initialized for for the test_decoding logical decoding plugin."
  },
  "doc/api/Npgsql.Replication.TestDecodingConnectionExtensions.html": {
    "href": "doc/api/Npgsql.Replication.TestDecodingConnectionExtensions.html",
    "title": "Class TestDecodingConnectionExtensions | Npgsql Documentation",
    "keywords": "Class TestDecodingConnectionExtensions Extension methods to use LogicalReplicationConnection with the test_decoding logical decoding plugin. See https://www.postgresql.org/docs/current/test-decoding.html. Inheritance object TestDecodingConnectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public static class TestDecodingConnectionExtensions Methods | Edit this page View Source CreateTestDecodingReplicationSlot(LogicalReplicationConnection, string, bool, LogicalSlotSnapshotInitMode?, bool, CancellationToken) Creates a TestDecodingReplicationSlot class that wraps a replication slot using the test_decoding logical decoding plugin. Declaration public static Task<TestDecodingReplicationSlot> CreateTestDecodingReplicationSlot(this LogicalReplicationConnection connection, string slotName, bool temporarySlot = false, LogicalSlotSnapshotInitMode? slotSnapshotInitMode = null, bool twoPhase = false, CancellationToken cancellationToken = default) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for creating the replication slot string slotName The name of the slot to create. Must be a valid replication slot name (see https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION). bool temporarySlot true if this replication slot shall be temporary one; otherwise false. Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished. LogicalSlotSnapshotInitMode? slotSnapshotInitMode A LogicalSlotSnapshotInitMode to specify what to do with the snapshot created during logical slot initialization. Export, which is also the default, will export the snapshot for use in other sessions. This option can't be used inside a transaction. Use will use the snapshot for the current transaction executing the command. This option must be used in a transaction, and Use must be the first command run in that transaction. Finally, NoExport will just use the snapshot for logical decoding as normal but won't do anything else with it. bool twoPhase If true, this logical replication slot supports decoding of two-phase transactions. With this option, two-phase commands like PREPARE TRANSACTION, COMMIT PREPARED and ROLLBACK PREPARED are decoded and transmitted. The transaction will be decoded and transmitted at PREPARE TRANSACTION time. The default is false. CancellationToken cancellationToken An optional token to cancel the asynchronous operation. The default value is None. Returns Type Description Task<TestDecodingReplicationSlot> A TestDecodingReplicationSlot that wraps the newly-created replication slot. Remarks See https://www.postgresql.org/docs/current/test-decoding.html for more information. | Edit this page View Source StartReplication(LogicalReplicationConnection, TestDecodingReplicationSlot, CancellationToken, TestDecodingOptions?, NpgsqlLogSequenceNumber?) Instructs the server to start streaming the WAL for logical replication using the test_decoding logical decoding plugin, starting at WAL location walLocation or at the slot's consistent point if walLocation isn't specified. The server can reply with an error, for example if the requested section of the WAL has already been recycled. Declaration public static IAsyncEnumerable<TestDecodingData> StartReplication(this LogicalReplicationConnection connection, TestDecodingReplicationSlot slot, CancellationToken cancellationToken, TestDecodingOptions? options = null, NpgsqlLogSequenceNumber? walLocation = null) Parameters Type Name Description LogicalReplicationConnection connection The LogicalReplicationConnection to use for starting replication TestDecodingReplicationSlot slot The replication slot that will be updated as replication progresses so that the server knows which WAL segments are still needed by the standby. CancellationToken cancellationToken The token to monitor for stopping the replication. TestDecodingOptions options The collection of options passed to the slot's logical decoding plugin. NpgsqlLogSequenceNumber? walLocation The WAL location to begin streaming at. Returns Type Description IAsyncEnumerable<TestDecodingData> A Task<TResult> representing an IAsyncEnumerable<T> that can be used to stream WAL entries in form of TestDecodingData instances."
  },
  "doc/api/Npgsql.Replication.TimelineHistoryFile.html": {
    "href": "doc/api/Npgsql.Replication.TimelineHistoryFile.html",
    "title": "Struct TimelineHistoryFile | Npgsql Documentation",
    "keywords": "Struct TimelineHistoryFile Represents a PostgreSQL timeline history file Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public readonly struct TimelineHistoryFile Properties | Edit this page View Source Content Contents of the timeline history file. Declaration public byte[] Content { get; } Property Value Type Description byte[] | Edit this page View Source FileName File name of the timeline history file, e.g., 00000002.history. Declaration public string FileName { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.Replication.XLogDataMessage.html": {
    "href": "doc/api/Npgsql.Replication.XLogDataMessage.html",
    "title": "Class XLogDataMessage | Npgsql Documentation",
    "keywords": "Class XLogDataMessage A message representing a section of the WAL data stream. Inheritance object ReplicationMessage XLogDataMessage Inherited Members ReplicationMessage.WalStart ReplicationMessage.WalEnd ReplicationMessage.ServerClock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Replication Assembly: Npgsql.dll Syntax public class XLogDataMessage : ReplicationMessage Properties | Edit this page View Source Data A section of the WAL data stream that is raw WAL data in physical replication or decoded with the selected logical decoding plugin in logical replication. It is only valid until the next XLogDataMessage is requested from the stream. Declaration public Stream Data { get; } Property Value Type Description Stream Remarks A single WAL record is never split across two XLogData messages. When a WAL record crosses a WAL page boundary, and is therefore already split using continuation records, it can be split at the page boundary. In other words, the first main WAL record and its continuation records can be sent in different XLogData messages."
  },
  "doc/api/Npgsql.Replication.html": {
    "href": "doc/api/Npgsql.Replication.html",
    "title": "Namespace Npgsql.Replication | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Replication Classes LogicalReplicationConnection Represents a logical replication connection to a PostgreSQL server. PgOutputConnectionExtensions Extension methods to use LogicalReplicationConnection with the pg_output logical decoding plugin. PhysicalReplicationConnection Represents a physical replication connection to a PostgreSQL server. PhysicalReplicationSlot Wraps a replication slot that uses physical replication. ReplicationConnection Defines the core behavior of replication connections and provides the base class for LogicalReplicationConnection and PhysicalReplicationConnection. ReplicationMessage The common base class for all streaming replication messages ReplicationSlot Contains information about a newly-created replication slot. ReplicationSystemIdentification Contains server identification information returned from IdentifySystem(CancellationToken). TestDecodingConnectionExtensions Extension methods to use LogicalReplicationConnection with the test_decoding logical decoding plugin. See https://www.postgresql.org/docs/current/test-decoding.html. XLogDataMessage A message representing a section of the WAL data stream. Structs ReplicationSlotOptions Contains information about a replication slot. TimelineHistoryFile Represents a PostgreSQL timeline history file Enums LogicalSlotSnapshotInitMode Decides what to do with the snapshot created during logical slot initialization."
  },
  "doc/api/Npgsql.Schema.NpgsqlDbColumn.html": {
    "href": "doc/api/Npgsql.Schema.NpgsqlDbColumn.html",
    "title": "Class NpgsqlDbColumn | Npgsql Documentation",
    "keywords": "Class NpgsqlDbColumn Provides schema information about a column. Inheritance object DbColumn NpgsqlDbColumn Inherited Members DbColumn.IsExpression DbColumn.IsHidden object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.Schema Assembly: Npgsql.dll Syntax public class NpgsqlDbColumn : DbColumn Remarks Note that this can correspond to a field returned in a query which isn't an actual table column See https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldatareader.getschematable(v=vs.110).aspx for information on the meaning of the different fields. Constructors | Edit this page View Source NpgsqlDbColumn() Initializes a new instance of the NpgsqlDbColumn class. Declaration public NpgsqlDbColumn() Properties | Edit this page View Source AllowDBNull Gets a nullable boolean value that indicates whether DBNull values are allowed in this column, or returns null if no value is set. Can be set to either true or false indicating whether DBNull values are allowed in this column, or null (Nothing in Visual Basic) when overridden in a derived class. Declaration public bool? AllowDBNull { get; protected set; } Property Value Type Description bool? Returns true if DBNull values are allowed in this column; otherwise, false. If no value is set, returns a null reference (Nothing in Visual Basic). | Edit this page View Source BaseCatalogName Gets the catalog name associated with the data source; otherwise, null if no value is set. Can be set to either the catalog name or null when overridden in a derived class. Declaration public string BaseCatalogName { get; protected set; } Property Value Type Description string The catalog name associated with the data source; otherwise, a null reference (Nothing in Visual Basic) if no value is set. | Edit this page View Source BaseColumnName Gets the base column name; otherwise, null if no value is set. Can be set to either the column name or null when overridden in a derived class. Declaration public string? BaseColumnName { get; protected set; } Property Value Type Description string The base column name; otherwise, a null reference (Nothing in Visual Basic) if no value is set. | Edit this page View Source BaseSchemaName Gets the schema name associated with the data source; otherwise, null if no value is set. Can be set to either the schema name or null when overridden in a derived class. Declaration public string? BaseSchemaName { get; protected set; } Property Value Type Description string The schema name associated with the data source; otherwise, a null reference (Nothing in Visual Basic) if no value is set. | Edit this page View Source BaseServerName Gets the server name associated with the column; otherwise, null if no value is set. Can be set to either the server name or null when overridden in a derived class. Declaration public string BaseServerName { get; protected set; } Property Value Type Description string The server name associated with the column; otherwise, a null reference (Nothing in Visual Basic) if no value is set. | Edit this page View Source BaseTableName Gets the table name in the schema; otherwise, null if no value is set. Can be set to either the table name or null when overridden in a derived class. Declaration public string? BaseTableName { get; protected set; } Property Value Type Description string The table name in the schema; otherwise, a null reference (Nothing in Visual Basic) if no value is set. | Edit this page View Source ColumnAttributeNumber The column's position within its table. Note that this is different from ColumnOrdinal, which is the column's position within the resultset. Declaration public short? ColumnAttributeNumber { get; } Property Value Type Description short? | Edit this page View Source ColumnName Gets the name of the column. Can be set to the column name when overridden in a derived class. Declaration public string ColumnName { get; protected set; } Property Value Type Description string The name of the column. | Edit this page View Source ColumnOrdinal Gets the column position (ordinal) in the datasource row; otherwise, null if no value is set. Can be set to either an int32 value to specify the column position or null when overridden in a derived class. Declaration public int? ColumnOrdinal { get; protected set; } Property Value Type Description int? An int32 value for column ordinal; otherwise, a null reference (Nothing in Visual Basic) if no value is set. | Edit this page View Source ColumnSize Gets the column size; otherwise, null if no value is set. Can be set to either an int32 value to specify the column size or null when overridden in a derived class. Declaration public int? ColumnSize { get; protected set; } Property Value Type Description int? An int32 value for column size; otherwise, a null reference (Nothing in Visual Basic) if no value is set. | Edit this page View Source DataType Gets the type of data stored in the column. Can be set to a Type object that represents the type of data in the column when overridden in a derived class. Declaration public Type? DataType { get; protected set; } Property Value Type Description Type A Type object that represents the type of data the column contains. | Edit this page View Source DataTypeName Gets the name of the data type; otherwise, null if no value is set. Can be set to either the data type name or null when overridden in a derived class. Declaration public string DataTypeName { get; protected set; } Property Value Type Description string The name of the data type; otherwise, a null reference (Nothing in Visual Basic) if no value is set. | Edit this page View Source DefaultValue The default SQL expression for this column. Declaration public string? DefaultValue { get; } Property Value Type Description string | Edit this page View Source IsAliased Gets a nullable boolean value that indicates whether this column is aliased, or returns null if no value is set. Can be set to either true or false indicating whether this column is aliased, or null (Nothing in Visual Basic) when overridden in a derived class. Declaration public bool? IsAliased { get; protected set; } Property Value Type Description bool? Returns true if this column is aliased; otherwise, false. If no value is set, returns a null reference (Nothing in Visual Basic). | Edit this page View Source IsAutoIncrement Gets a nullable boolean value that indicates whether values in this column are automatically incremented, or returns null if no value is set. Can be set to either true or false indicating whether values in this column are automatically incremented, or null (Nothing in Visual Basic) when overridden in a derived class. Declaration public bool? IsAutoIncrement { get; protected set; } Property Value Type Description bool? Returns true if values in this column are automatically incremented; otherwise, false. If no value is set, returns a null reference (Nothing in Visual Basic). | Edit this page View Source IsIdentity Gets a nullable boolean value that indicates whether this column is an identity, or returns null if no value is set. Can be set to either true or false indicating whether this column is an identity, or null (Nothing in Visual Basic) when overridden in a derived class. Declaration public bool? IsIdentity { get; protected set; } Property Value Type Description bool? Returns true if this column is an identity; otherwise, false. If no value is set, returns a null reference (Nothing in Visual Basic). | Edit this page View Source IsKey Gets a nullable boolean value that indicates whether this column is a key, or returns null if no value is set. Can be set to either true or false indicating whether this column is a key, or null (Nothing in Visual Basic) when overridden in a derived class. Declaration public bool? IsKey { get; protected set; } Property Value Type Description bool? Returns true if this column is a key; otherwise, false. If no value is set, returns a null reference (Nothing in Visual Basic). | Edit this page View Source IsLong Gets a nullable boolean value that indicates whether this column contains long data, or returns null if no value is set. Can be set to either true or false indicating whether this column contains long data, or null (Nothing in Visual Basic) when overridden in a derived class. Declaration public bool? IsLong { get; protected set; } Property Value Type Description bool? Returns true if this column contains long data; otherwise, false. If no value is set, returns a null reference (Nothing in Visual Basic). | Edit this page View Source IsReadOnly Gets a nullable boolean value that indicates whether this column is read-only, or returns null if no value is set. Can be set to either true or false indicating whether this column is read-only, or null (Nothing in Visual Basic) when overridden in a derived class. Declaration public bool? IsReadOnly { get; protected set; } Property Value Type Description bool? Returns true if this column is read-only; otherwise, false. If no value is set, returns a null reference (Nothing in Visual Basic). | Edit this page View Source IsUnique Gets a nullable boolean value that indicates whether a unique constraint applies to this column, or returns null if no value is set. Can be set to either true or false indicating whether a unique constraint applies to this column, or null (Nothing in Visual Basic) when overridden in a derived class. Declaration public bool? IsUnique { get; protected set; } Property Value Type Description bool? Returns true if a unique constraint applies to this column; otherwise, false. If no value is set, returns a null reference (Nothing in Visual Basic). | Edit this page View Source this[string] Gets the object based on the column property name. Declaration public override object? this[string propertyName] { get; } Parameters Type Name Description string propertyName Property Value Type Description object The object based on the column property name. Overrides DbColumn.this[string] | Edit this page View Source NpgsqlDbType The NpgsqlDbType value for this column's type. Declaration public NpgsqlDbType? NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType? | Edit this page View Source NumericPrecision Gets the numeric precision of the column data; otherwise, null if no value is set. Can be set to either an int32 value to specify the numeric precision of the column data or null when overridden in a derived class. Declaration public int? NumericPrecision { get; protected set; } Property Value Type Description int? An int32 value that specifies the precision of the column data, if the data is numeric; otherwise, a null reference (Nothing in Visual Basic) if no value is set. | Edit this page View Source NumericScale Gets a nullable int32 value that either returns null or the numeric scale of the column data. Can be set to either null or an int32 value for the numeric scale of the column data when overridden in a derived class. Declaration public int? NumericScale { get; protected set; } Property Value Type Description int? A null reference (Nothing in Visual Basic) if no value is set; otherwise, a int32 value that specifies the scale of the column data, if the data is numeric. | Edit this page View Source PostgresType The PostgresType describing the type of this column. Declaration public PostgresType PostgresType { get; } Property Value Type Description PostgresType | Edit this page View Source TableOID The OID of the PostgreSQL table of this column. Declaration public uint TableOID { get; } Property Value Type Description uint | Edit this page View Source TypeOID The OID of the type of this column in the PostgreSQL pg_type catalog table. Declaration public uint TypeOID { get; } Property Value Type Description uint | Edit this page View Source UdtAssemblyQualifiedName Gets the assembly-qualified name of the Type object that represents the type of data in the column; otherwise, null if no value is set. Can be set to either the assembly-qualified name or null when overridden in a derived class. Declaration public string? UdtAssemblyQualifiedName { get; protected set; } Property Value Type Description string The assembly-qualified name of the Type object that represents the type of data in the column; otherwise, a null reference (Nothing in Visual Basic) if no value is set."
  },
  "doc/api/Npgsql.Schema.html": {
    "href": "doc/api/Npgsql.Schema.html",
    "title": "Namespace Npgsql.Schema | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Schema Classes NpgsqlDbColumn Provides schema information about a column."
  },
  "doc/api/Npgsql.ServerCompatibilityMode.html": {
    "href": "doc/api/Npgsql.ServerCompatibilityMode.html",
    "title": "Enum ServerCompatibilityMode | Npgsql Documentation",
    "keywords": "Enum ServerCompatibilityMode An option specified in the connection string that activates special compatibility features. Namespace: Npgsql Assembly: Npgsql.dll Syntax public enum ServerCompatibilityMode Fields Name Description NoTypeLoading The server is doesn't support full type loading from the PostgreSQL catalogs, support the basic set of types via information hardcoded inside Npgsql. None No special server compatibility mode is active Redshift The server is an Amazon Redshift instance."
  },
  "doc/api/Npgsql.SslMode.html": {
    "href": "doc/api/Npgsql.SslMode.html",
    "title": "Enum SslMode | Npgsql Documentation",
    "keywords": "Enum SslMode Specifies how to manage SSL. Namespace: Npgsql Assembly: Npgsql.dll Syntax public enum SslMode Fields Name Description Allow Prefer non-SSL connections if the server allows them, but allow SSL connections. Disable SSL is disabled. If the server requires SSL, the connection will fail. Prefer Prefer SSL connections if the server allows them, but allow connections without SSL. Require Fail the connection if the server doesn't support SSL. VerifyCA Fail the connection if the server doesn't support SSL. Also verifies server certificate. VerifyFull Fail the connection if the server doesn't support SSL. Also verifies server certificate with host's name."
  },
  "doc/api/Npgsql.StatementType.html": {
    "href": "doc/api/Npgsql.StatementType.html",
    "title": "Enum StatementType | Npgsql Documentation",
    "keywords": "Enum StatementType Specifies the type of SQL statement, e.g. SELECT Namespace: Npgsql Assembly: Npgsql.dll Syntax public enum StatementType Fields Name Description Call Copy CreateTableAs Delete Fetch Insert Merge Move Other Select Unknown Update"
  },
  "doc/api/Npgsql.TargetSessionAttributes.html": {
    "href": "doc/api/Npgsql.TargetSessionAttributes.html",
    "title": "Enum TargetSessionAttributes | Npgsql Documentation",
    "keywords": "Enum TargetSessionAttributes Specifies server type preference. Namespace: Npgsql Assembly: Npgsql.dll Syntax public enum TargetSessionAttributes : byte Fields Name Description Any Any successful connection is acceptable. PreferPrimary First try to find a primary server, but if none of the listed hosts is a primary server, try again in Any mode. PreferStandby First try to find a standby server, but if none of the listed hosts is a standby server, try again in Any mode. Primary Server must not be in hot standby mode. ReadOnly Session must not accept read-write transactions by default (the converse). ReadWrite Session must accept read-write transactions by default (that is, the server must not be in hot standby mode and the default_transaction_read_only parameter must be off). Standby Server must be in hot standby mode."
  },
  "doc/api/Npgsql.TypeMapping.INpgsqlTypeMapper.html": {
    "href": "doc/api/Npgsql.TypeMapping.INpgsqlTypeMapper.html",
    "title": "Interface INpgsqlTypeMapper | Npgsql Documentation",
    "keywords": "Interface INpgsqlTypeMapper A type mapper, managing how to read and write CLR values to PostgreSQL data types. Namespace: Npgsql.TypeMapping Assembly: Npgsql.dll Syntax public interface INpgsqlTypeMapper Remarks The preferred way to manage type mappings is on NpgsqlDataSourceBuilder. An alternative, but discouraged, method, is to manage them globally via GlobalTypeMapper). Properties | Edit this page View Source DefaultNameTranslator The default name translator to convert CLR type names and member names. Defaults to NpgsqlSnakeCaseNameTranslator. Declaration INpgsqlNameTranslator DefaultNameTranslator { get; set; } Property Value Type Description INpgsqlNameTranslator Methods | Edit this page View Source AddTypeInfoResolverFactory(PgTypeInfoResolverFactory) Adds a type info resolver factory which can add or modify support for PostgreSQL types. Typically used by plugins. Declaration void AddTypeInfoResolverFactory(PgTypeInfoResolverFactory factory) Parameters Type Name Description PgTypeInfoResolverFactory factory The type resolver factory to be added. | Edit this page View Source ConfigureJsonOptions(JsonSerializerOptions) Configures the JSON serializer options used when reading and writing all System.Text.Json data. Declaration INpgsqlTypeMapper ConfigureJsonOptions(JsonSerializerOptions serializerOptions) Parameters Type Name Description JsonSerializerOptions serializerOptions Options to customize JSON serialization and deserialization. Returns Type Description INpgsqlTypeMapper | Edit this page View Source EnableDynamicJson(Type[]?, Type[]?) Sets up dynamic System.Text.Json mappings. This allows mapping arbitrary .NET types to PostgreSQL json and jsonb types, as well as JsonNode and its derived types. Declaration INpgsqlTypeMapper EnableDynamicJson(Type[]? jsonbClrTypes = null, Type[]? jsonClrTypes = null) Parameters Type Name Description Type[] jsonbClrTypes A list of CLR types to map to PostgreSQL jsonb (no need to specify Jsonb). Type[] jsonClrTypes A list of CLR types to map to PostgreSQL json (no need to specify Json). Returns Type Description INpgsqlTypeMapper Remarks Due to the dynamic nature of these mappings, they are not compatible with NativeAOT or trimming. | Edit this page View Source EnableRecordsAsTuples() Sets up mappings for the PostgreSQL record type as a .NET ValueTuple or Tuple. Declaration INpgsqlTypeMapper EnableRecordsAsTuples() Returns Type Description INpgsqlTypeMapper The same builder instance so that multiple calls can be chained. | Edit this page View Source EnableUnmappedTypes() Sets up mappings allowing the use of unmapped enum, range and multirange types. Declaration INpgsqlTypeMapper EnableUnmappedTypes() Returns Type Description INpgsqlTypeMapper The same builder instance so that multiple calls can be chained. | Edit this page View Source MapComposite(Type, string?, INpgsqlNameTranslator?) Maps a CLR type to a composite type. Declaration INpgsqlTypeMapper MapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be mapped. string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Remarks Maps CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to DefaultNameTranslator. If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Edit this page View Source MapComposite<T>(string?, INpgsqlNameTranslator?) Maps a CLR type to a PostgreSQL composite type. Declaration INpgsqlTypeMapper MapComposite<T>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL names. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator. You can also use the PgNameAttribute on your members to manually specify a PostgreSQL name. If there is a discrepancy between the .NET type and database type while a composite is read or written, an exception will be raised. | Edit this page View Source MapEnum(Type, string?, INpgsqlNameTranslator?) Maps a CLR enum to a PostgreSQL enum type. Declaration INpgsqlTypeMapper MapEnum(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET enum type to be mapped string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator. You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. | Edit this page View Source MapEnum<TEnum>(string?, INpgsqlNameTranslator?) Maps a CLR enum to a PostgreSQL enum type. Declaration INpgsqlTypeMapper MapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description INpgsqlTypeMapper Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator. You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. | Edit this page View Source Reset() Resets all mapping changes performed on this type mapper and reverts it to its original, starting state. Declaration void Reset() | Edit this page View Source UnmapComposite(Type, string?, INpgsqlNameTranslator?) Removes an existing composite mapping. Declaration bool UnmapComposite(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET type to be unmapped. string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description bool | Edit this page View Source UnmapComposite<T>(string?, INpgsqlNameTranslator?) Removes an existing composite mapping. Declaration bool UnmapComposite<T>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Returns Type Description bool Type Parameters Name Description T | Edit this page View Source UnmapEnum(Type, string?, INpgsqlNameTranslator?) Removes an existing enum mapping. Declaration bool UnmapEnum(Type clrType, string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description Type clrType The .NET enum type to be mapped string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description bool | Edit this page View Source UnmapEnum<TEnum>(string?, INpgsqlNameTranslator?) Removes an existing enum mapping. Declaration bool UnmapEnum<TEnum>(string? pgName = null, INpgsqlNameTranslator? nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description string pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to DefaultNameTranslator. Returns Type Description bool Type Parameters Name Description TEnum"
  },
  "doc/api/Npgsql.TypeMapping.UserTypeMapping.html": {
    "href": "doc/api/Npgsql.TypeMapping.UserTypeMapping.html",
    "title": "Class UserTypeMapping | Npgsql Documentation",
    "keywords": "Class UserTypeMapping The base class for user type mappings. Inheritance object UserTypeMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.TypeMapping Assembly: Npgsql.dll Syntax public abstract class UserTypeMapping Properties | Edit this page View Source ClrType The CLR type that this mapping is for. Declaration public Type ClrType { get; } Property Value Type Description Type | Edit this page View Source PgTypeName The name of the PostgreSQL type that this mapping is for. Declaration public string PgTypeName { get; } Property Value Type Description string"
  },
  "doc/api/Npgsql.TypeMapping.html": {
    "href": "doc/api/Npgsql.TypeMapping.html",
    "title": "Namespace Npgsql.TypeMapping | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeMapping Classes UserTypeMapping The base class for user type mappings. Interfaces INpgsqlTypeMapper A type mapper, managing how to read and write CLR values to PostgreSQL data types."
  },
  "doc/api/Npgsql.Util.NpgsqlTimeout.html": {
    "href": "doc/api/Npgsql.Util.NpgsqlTimeout.html",
    "title": "Struct NpgsqlTimeout | Npgsql Documentation",
    "keywords": "Struct NpgsqlTimeout Represents a timeout that will expire at some point. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.Util Assembly: Npgsql.dll Syntax public readonly struct NpgsqlTimeout"
  },
  "doc/api/Npgsql.Util.html": {
    "href": "doc/api/Npgsql.Util.html",
    "title": "Namespace Npgsql.Util | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Util Structs NpgsqlTimeout Represents a timeout that will expire at some point."
  },
  "doc/api/Npgsql.html": {
    "href": "doc/api/Npgsql.html",
    "title": "Namespace Npgsql | Npgsql Documentation",
    "keywords": "Namespace Npgsql Classes NpgsqlBatch Represents a batch of commands which can be executed against a data source in a single round trip. Provides a base class for database-specific classes that represent command batches. NpgsqlBatchCommand Represents a single command within a DbBatch. A batch can be executed against a data source in a single round trip. NpgsqlBatchCommandCollection The base class for a collection of instances of DbBatchCommand, contained in a DbBatch. NpgsqlBinaryExporter Provides an API for a binary COPY TO operation, a high-performance data export mechanism from a PostgreSQL table. Initiated by BeginBinaryExport(string) NpgsqlBinaryImporter Provides an API for a binary COPY FROM operation, a high-performance data import mechanism to a PostgreSQL table. Initiated by BeginBinaryImport(string) NpgsqlCommand Represents a SQL statement or function (stored procedure) to execute against a PostgreSQL database. This class cannot be inherited. NpgsqlCommandBuilder This class creates database commands for automatic insert, update and delete operations. NpgsqlConnection This class represents a connection to a PostgreSQL server. NpgsqlConnectionStringBuilder Provides a simple way to create and manage the contents of connection strings used by the NpgsqlConnection class. NpgsqlCopyTextReader Reader for a text export, initiated by BeginTextExport(string). NpgsqlCopyTextWriter Writer for a text import, initiated by BeginTextImport(string). NpgsqlDataAdapter This class represents an adapter from many commands: select, update, insert and delete to fill a DataSet. NpgsqlDataReader Reads a forward-only stream of rows from a data source. NpgsqlDataSource Represents a data source which can be used to obtain open connections, and against which commands can be executed directly. NpgsqlDataSourceBuilder Provides a simple API for configuring and creating an NpgsqlDataSource, from which database connections can be obtained. NpgsqlEventId NpgsqlException The exception that is thrown when server-related issues occur. NpgsqlFactory A factory to create instances of various Npgsql objects. NpgsqlLargeObjectManager Large object manager. This class can be used to store very large files in a PostgreSQL database. NpgsqlLargeObjectStream An interface to remotely control the seekable stream for an opened large object on a PostgreSQL server. Note that the OpenRead/OpenReadWrite method as well as all operations performed on this stream must be wrapped inside a database transaction. NpgsqlLoggingConfiguration Configures Npgsql logging NpgsqlMultiHostDataSource An NpgsqlDataSource which manages connections for multiple hosts, is aware of their states (primary, secondary, offline...) and can perform failover and load balancing across them. NpgsqlNestedDataReader Reads a forward-only stream of rows from a nested data source. Can be retrieved using GetData(int) or GetData(int). NpgsqlNoticeEventArgs Provides data for a PostgreSQL notice event. NpgsqlNotificationEventArgs Provides information on a PostgreSQL notification. Notifications are sent when your connection has registered for notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel. NpgsqlOperationInProgressException Thrown when trying to use a connection that is already busy performing some other operation. Provides information on the already-executing operation to help with debugging. NpgsqlParameter This class represents a parameter to a command that will be sent to server NpgsqlParameterCollection Represents a collection of parameters relevant to a NpgsqlCommand as well as their respective mappings to columns in a DataSet. NpgsqlParameter<T> A generic version of NpgsqlParameter which provides more type safety and avoids boxing of value types. Use TypedValue instead of Value. NpgsqlRawCopyStream Provides an API for a raw binary COPY operation, a high-performance data import/export mechanism to a PostgreSQL table. Initiated by BeginRawBinaryCopy(string) NpgsqlRowUpdatedEventArgs NpgsqlRowUpdatingEventArgs NpgsqlSlimDataSourceBuilder Provides a simple API for configuring and creating an NpgsqlDataSource, from which database connections can be obtained. NpgsqlTracingOptions Options to configure Npgsql's support for OpenTelemetry tracing. Currently no options are available. NpgsqlTransaction Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited. PostgresErrorCodes Provides constants for PostgreSQL error codes. PostgresException The exception that is thrown when the PostgreSQL backend reports errors (e.g. query SQL issues, constraint violations). PostgresNotice PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator initiates a \"fast\" database shutdown). Interfaces INpgsqlNameTranslator A component which translates a CLR name (e.g. SomeClass) into a database name (e.g. some_class) according to some scheme. Used for mapping enum and composite types. Enums ArrayNullabilityMode Specifies how the mapping of arrays of value types behaves with respect to nullability when they are requested via an API returning an object. ChannelBinding Specifies how to manage channel binding. ServerCompatibilityMode An option specified in the connection string that activates special compatibility features. SslMode Specifies how to manage SSL. StatementType Specifies the type of SQL statement, e.g. SELECT TargetSessionAttributes Specifies server type preference. Delegates NoticeEventHandler Represents a method that handles the Notice event. NotificationEventHandler Represents a method that handles the Notification event. NpgsqlRowUpdatedEventHandler Represents the method that handles the RowUpdated events. NpgsqlRowUpdatingEventHandler Represents the method that handles the RowUpdating events. ProvideClientCertificatesCallback Represents a method that allows the application to provide a certificate collection to be used for SSL client authentication ProvidePasswordCallback Represents a method that allows the application to provide a password at connection time in code rather than configuration"
  },
  "doc/api/NpgsqlTypes.NpgsqlBox.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlBox.html",
    "title": "Struct NpgsqlBox | Npgsql Documentation",
    "keywords": "Struct NpgsqlBox Represents a PostgreSQL box type. Implements IEquatable<NpgsqlBox> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public struct NpgsqlBox : IEquatable<NpgsqlBox> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Edit this page View Source NpgsqlBox(NpgsqlPoint, NpgsqlPoint) Declaration public NpgsqlBox(NpgsqlPoint upperRight, NpgsqlPoint lowerLeft) Parameters Type Name Description NpgsqlPoint upperRight NpgsqlPoint lowerLeft | Edit this page View Source NpgsqlBox(double, double, double, double) Declaration public NpgsqlBox(double top, double right, double bottom, double left) Parameters Type Name Description double top double right double bottom double left Properties | Edit this page View Source Bottom Declaration public double Bottom { get; } Property Value Type Description double | Edit this page View Source Height Declaration public double Height { get; } Property Value Type Description double | Edit this page View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source Left Declaration public double Left { get; } Property Value Type Description double | Edit this page View Source LowerLeft Declaration public NpgsqlPoint LowerLeft { get; set; } Property Value Type Description NpgsqlPoint | Edit this page View Source Right Declaration public double Right { get; } Property Value Type Description double | Edit this page View Source Top Declaration public double Top { get; } Property Value Type Description double | Edit this page View Source UpperRight Declaration public NpgsqlPoint UpperRight { get; set; } Property Value Type Description NpgsqlPoint | Edit this page View Source Width Declaration public double Width { get; } Property Value Type Description double Methods | Edit this page View Source Equals(NpgsqlBox) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlBox other) Parameters Type Name Description NpgsqlBox other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(NpgsqlBox, NpgsqlBox) Declaration public static bool operator ==(NpgsqlBox x, NpgsqlBox y) Parameters Type Name Description NpgsqlBox x NpgsqlBox y Returns Type Description bool | Edit this page View Source operator !=(NpgsqlBox, NpgsqlBox) Declaration public static bool operator !=(NpgsqlBox x, NpgsqlBox y) Parameters Type Name Description NpgsqlBox x NpgsqlBox y Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlCidr.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlCidr.html",
    "title": "Struct NpgsqlCidr | Npgsql Documentation",
    "keywords": "Struct NpgsqlCidr Represents a PostgreSQL cidr type. Implements IEquatable<NpgsqlCidr> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public readonly record struct NpgsqlCidr : IEquatable<NpgsqlCidr> Remarks https://www.postgresql.org/docs/current/static/datatype-net-types.html Constructors | Edit this page View Source NpgsqlCidr(IPAddress, byte) Declaration public NpgsqlCidr(IPAddress address, byte netmask) Parameters Type Name Description IPAddress address byte netmask | Edit this page View Source NpgsqlCidr(string) Declaration public NpgsqlCidr(string addr) Parameters Type Name Description string addr Properties | Edit this page View Source Address Declaration public IPAddress Address { get; } Property Value Type Description IPAddress | Edit this page View Source Netmask Declaration public byte Netmask { get; } Property Value Type Description byte Methods | Edit this page View Source Deconstruct(out IPAddress, out byte) Declaration public void Deconstruct(out IPAddress address, out byte netmask) Parameters Type Name Description IPAddress address byte netmask | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source explicit operator IPAddress(NpgsqlCidr) Declaration public static explicit operator IPAddress(NpgsqlCidr cidr) Parameters Type Name Description NpgsqlCidr cidr Returns Type Description IPAddress | Edit this page View Source implicit operator NpgsqlInet(NpgsqlCidr) Declaration public static implicit operator NpgsqlInet(NpgsqlCidr cidr) Parameters Type Name Description NpgsqlCidr cidr Returns Type Description NpgsqlInet Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlCircle.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlCircle.html",
    "title": "Struct NpgsqlCircle | Npgsql Documentation",
    "keywords": "Struct NpgsqlCircle Represents a PostgreSQL Circle type. Implements IEquatable<NpgsqlCircle> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public struct NpgsqlCircle : IEquatable<NpgsqlCircle> Constructors | Edit this page View Source NpgsqlCircle(NpgsqlPoint, double) Declaration public NpgsqlCircle(NpgsqlPoint center, double radius) Parameters Type Name Description NpgsqlPoint center double radius | Edit this page View Source NpgsqlCircle(double, double, double) Declaration public NpgsqlCircle(double x, double y, double radius) Parameters Type Name Description double x double y double radius Properties | Edit this page View Source Center Declaration public NpgsqlPoint Center { get; set; } Property Value Type Description NpgsqlPoint | Edit this page View Source Radius Declaration public double Radius { readonly get; set; } Property Value Type Description double | Edit this page View Source X Declaration public double X { readonly get; set; } Property Value Type Description double | Edit this page View Source Y Declaration public double Y { readonly get; set; } Property Value Type Description double Methods | Edit this page View Source Equals(NpgsqlCircle) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlCircle other) Parameters Type Name Description NpgsqlCircle other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(NpgsqlCircle, NpgsqlCircle) Declaration public static bool operator ==(NpgsqlCircle x, NpgsqlCircle y) Parameters Type Name Description NpgsqlCircle x NpgsqlCircle y Returns Type Description bool | Edit this page View Source operator !=(NpgsqlCircle, NpgsqlCircle) Declaration public static bool operator !=(NpgsqlCircle x, NpgsqlCircle y) Parameters Type Name Description NpgsqlCircle x NpgsqlCircle y Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlDbType.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlDbType.html",
    "title": "Enum NpgsqlDbType | Npgsql Documentation",
    "keywords": "Enum NpgsqlDbType Represents a PostgreSQL data type that can be written or read to the database. Used in places such as NpgsqlDbType to unambiguously specify how to encode or decode values. Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public enum NpgsqlDbType Remarks See https://www.postgresql.org/docs/current/static/datatype.html. Fields Name Description Abstime Corresponds to the obsolete PostgreSQL \"abstime\" type. Array Corresponds to the PostgreSQL \"array\" type, a variable-length multidimensional array of another type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Array | NpgsqlDbType.Integer) BigIntMultirange Corresponds to the PostgreSQL \"int8multirange\" type. BigIntRange Corresponds to the PostgreSQL \"int8range\" type. Bigint Corresponds to the PostgreSQL 8-byte \"bigint\" type. Bit Corresponds to the PostgreSQL \"bit\" type. Boolean Corresponds to the PostgreSQL \"boolean\" type. Box Corresponds to the PostgreSQL geometric \"box\" type. Bytea Corresponds to the PostgreSQL \"bytea\" type, holding a raw byte string. Char Corresponds to the PostgreSQL \"char(n)\" type. Cid Corresponds to the PostgreSQL \"cid\" type, an internal command identifier. Cidr Corresponds to the PostgreSQL \"cidr\" type, a field storing an IPv4 or IPv6 network. Circle Corresponds to the PostgreSQL geometric \"circle\" type. Citext Corresponds to the PostgreSQL \"citext\" type for the citext module. Date Corresponds to the PostgreSQL \"date\" type. DateMultirange Corresponds to the PostgreSQL \"datemultirange\" type. DateRange Corresponds to the PostgreSQL \"daterange\" type. Double Corresponds to the PostgreSQL 8-byte floating-point \"double\" type. Geography The geography (geodetic) type for PostgreSQL spatial extension PostGIS. Geometry The geometry type for PostgreSQL spatial extension PostGIS. Hstore Corresponds to the PostgreSQL \"hstore\" type, a dictionary of string key-value pairs. Inet Corresponds to the PostgreSQL \"inet\" type. Int2Vector Corresponds to the PostgreSQL internal \"int2vector\" type. Integer Corresponds to the PostgreSQL 4-byte \"integer\" type. IntegerMultirange Corresponds to the PostgreSQL \"int4multirange\" type. IntegerRange Corresponds to the PostgreSQL \"int4range\" type. InternalChar Corresponds to the PostgreSQL \"char\" type. Interval Corresponds to the PostgreSQL \"interval\" type. Json Corresponds to the PostgreSQL \"json\" type, a field storing JSON in text format. JsonPath Corresponds to the PostgreSQL \"jsonpath\" type, a field storing JSON path in text format. format. Jsonb Corresponds to the PostgreSQL \"jsonb\" type, a field storing JSON in an optimized binary. format. LQuery The PostgreSQL lquery type for PostgreSQL extension ltree LSeg Corresponds to the PostgreSQL geometric \"lseg\" type. LTree The PostgreSQL ltree type, each value is a label path \"a.label.tree.value\", forming a tree in a set. LTxtQuery The PostgreSQL ltxtquery type for PostgreSQL extension ltree Line Corresponds to the PostgreSQL geometric \"line\" type. MacAddr Corresponds to the PostgreSQL \"macaddr\" type, a field storing a 6-byte physical address. MacAddr8 Corresponds to the PostgreSQL \"macaddr8\" type, a field storing a 6-byte or 8-byte physical address. Money Corresponds to the PostgreSQL \"money\" type. Multirange Corresponds to the PostgreSQL \"multirange\" type, continuous range of values of specific type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Multirange | NpgsqlDbType.Integer) Name Corresponds to the PostgreSQL internal \"name\" type. Numeric Corresponds to the PostgreSQL arbitrary-precision \"numeric\" type. NumericMultirange Corresponds to the PostgreSQL \"nummultirange\" type. NumericRange Corresponds to the PostgreSQL \"numrange\" type. Oid Corresponds to the PostgreSQL \"oid\" type. Oidvector Corresponds to the PostgreSQL internal \"oidvector\" type. Path Corresponds to the PostgreSQL geometric \"path\" type. PgLsn Corresponds to the PostgreSQL \"pg_lsn\" type, which can be used to store LSN (Log Sequence Number) data which is a pointer to a location in the WAL. Point Corresponds to the PostgreSQL geometric \"point\" type. Polygon Corresponds to the PostgreSQL geometric \"polygon\" type. Range Corresponds to the PostgreSQL \"range\" type, continuous range of values of specific type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Range | NpgsqlDbType.Integer) Real Corresponds to the PostgreSQL floating-point \"real\" type. Refcursor Corresponds to the PostgreSQL \"refcursor\" type. Regconfig Corresponds to the PostgreSQL \"regconfig\" type. Regtype Corresponds to the PostgreSQL \"regtype\" type, a numeric (OID) ID of a type in the pg_type table. Smallint Corresponds to the PostgreSQL 2-byte \"smallint\" type. Text Corresponds to the PostgreSQL \"text\" type. Tid Corresponds to the PostgreSQL \"tid\" type, a tuple id identifying the physical location of a row within its table. Time Corresponds to the PostgreSQL \"time\" type. TimeTz Corresponds to the PostgreSQL \"time with time zone\" type. Timestamp Corresponds to the PostgreSQL \"timestamp\" type. TimestampMultirange Corresponds to the PostgreSQL \"tsmultirange\" type. TimestampRange Corresponds to the PostgreSQL \"tsrange\" type. TimestampTz Corresponds to the PostgreSQL \"timestamp with time zone\" type. TimestampTzMultirange Corresponds to the PostgreSQL \"tstzmultirange\" type. TimestampTzRange Corresponds to the PostgreSQL \"tstzrange\" type. TsQuery Corresponds to the PostgreSQL \"tsquery\" type. TsVector Corresponds to the PostgreSQL \"tsvector\" type. Unknown A special value that can be used to send parameter values to the database without specifying their type, allowing the database to cast them to another value based on context. The value will be converted to a string and send as text. Uuid Corresponds to the PostgreSQL \"uuid\" type. Varbit Corresponds to the PostgreSQL \"varbit\" type, a field storing a variable-length string of bits. Varchar Corresponds to the PostgreSQL \"varchar\" type. Xid Corresponds to the PostgreSQL \"xid\" type, an internal transaction identifier. Xid8 Corresponds to the PostgreSQL \"xid8\" type, an internal transaction identifier. Xml Corresponds to the PostgreSQL \"xml\" type."
  },
  "doc/api/NpgsqlTypes.NpgsqlInet.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlInet.html",
    "title": "Struct NpgsqlInet | Npgsql Documentation",
    "keywords": "Struct NpgsqlInet Represents a PostgreSQL inet type, which is a combination of an IPAddress and a subnet mask. Implements IEquatable<NpgsqlInet> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public readonly record struct NpgsqlInet : IEquatable<NpgsqlInet> Remarks https://www.postgresql.org/docs/current/static/datatype-net-types.html Constructors | Edit this page View Source NpgsqlInet(IPAddress) Declaration public NpgsqlInet(IPAddress address) Parameters Type Name Description IPAddress address | Edit this page View Source NpgsqlInet(IPAddress, byte) Declaration public NpgsqlInet(IPAddress address, byte netmask) Parameters Type Name Description IPAddress address byte netmask | Edit this page View Source NpgsqlInet(string) Declaration public NpgsqlInet(string addr) Parameters Type Name Description string addr Properties | Edit this page View Source Address Declaration public IPAddress Address { get; } Property Value Type Description IPAddress | Edit this page View Source Netmask Declaration public byte Netmask { get; } Property Value Type Description byte Methods | Edit this page View Source Deconstruct(out IPAddress, out byte) Declaration public void Deconstruct(out IPAddress address, out byte netmask) Parameters Type Name Description IPAddress address byte netmask | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source explicit operator IPAddress(NpgsqlInet) Declaration public static explicit operator IPAddress(NpgsqlInet inet) Parameters Type Name Description NpgsqlInet inet Returns Type Description IPAddress | Edit this page View Source implicit operator NpgsqlInet(IPAddress) Declaration public static implicit operator NpgsqlInet(IPAddress ip) Parameters Type Name Description IPAddress ip Returns Type Description NpgsqlInet Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlInterval.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlInterval.html",
    "title": "Struct NpgsqlInterval | Npgsql Documentation",
    "keywords": "Struct NpgsqlInterval A raw representation of the PostgreSQL interval datatype. Use only when TimeSpan or NodaTime Period do not have sufficient range to handle your values. Implements IEquatable<NpgsqlInterval> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public readonly struct NpgsqlInterval : IEquatable<NpgsqlInterval> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html. Do not use this type unless you have to: prefer TimeSpan or NodaTime Period when possible. Constructors | Edit this page View Source NpgsqlInterval(int, int, long) Constructs an NpgsqlInterval. Declaration public NpgsqlInterval(int months, int days, long time) Parameters Type Name Description int months int days long time Properties | Edit this page View Source Days Days, after time for alignment. Declaration public int Days { get; } Property Value Type Description int | Edit this page View Source Months Months and years, after time for alignment. Declaration public int Months { get; } Property Value Type Description int | Edit this page View Source Time Remaining time unit smaller than a day, in microseconds. Declaration public long Time { get; } Property Value Type Description long Methods | Edit this page View Source Equals(NpgsqlInterval) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlInterval other) Parameters Type Name Description NpgsqlInterval other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlLSeg.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlLSeg.html",
    "title": "Struct NpgsqlLSeg | Npgsql Documentation",
    "keywords": "Struct NpgsqlLSeg Represents a PostgreSQL Line Segment type. Implements IEquatable<NpgsqlLSeg> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public struct NpgsqlLSeg : IEquatable<NpgsqlLSeg> Constructors | Edit this page View Source NpgsqlLSeg(NpgsqlPoint, NpgsqlPoint) Declaration public NpgsqlLSeg(NpgsqlPoint start, NpgsqlPoint end) Parameters Type Name Description NpgsqlPoint start NpgsqlPoint end | Edit this page View Source NpgsqlLSeg(double, double, double, double) Declaration public NpgsqlLSeg(double startx, double starty, double endx, double endy) Parameters Type Name Description double startx double starty double endx double endy Properties | Edit this page View Source End Declaration public NpgsqlPoint End { readonly get; set; } Property Value Type Description NpgsqlPoint | Edit this page View Source Start Declaration public NpgsqlPoint Start { readonly get; set; } Property Value Type Description NpgsqlPoint Methods | Edit this page View Source Equals(NpgsqlLSeg) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlLSeg other) Parameters Type Name Description NpgsqlLSeg other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(NpgsqlLSeg, NpgsqlLSeg) Declaration public static bool operator ==(NpgsqlLSeg x, NpgsqlLSeg y) Parameters Type Name Description NpgsqlLSeg x NpgsqlLSeg y Returns Type Description bool | Edit this page View Source operator !=(NpgsqlLSeg, NpgsqlLSeg) Declaration public static bool operator !=(NpgsqlLSeg x, NpgsqlLSeg y) Parameters Type Name Description NpgsqlLSeg x NpgsqlLSeg y Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlLine.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlLine.html",
    "title": "Struct NpgsqlLine | Npgsql Documentation",
    "keywords": "Struct NpgsqlLine Represents a PostgreSQL line type. Implements IEquatable<NpgsqlLine> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public struct NpgsqlLine : IEquatable<NpgsqlLine> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Edit this page View Source NpgsqlLine(double, double, double) Declaration public NpgsqlLine(double a, double b, double c) Parameters Type Name Description double a double b double c Properties | Edit this page View Source A Declaration public double A { readonly get; set; } Property Value Type Description double | Edit this page View Source B Declaration public double B { readonly get; set; } Property Value Type Description double | Edit this page View Source C Declaration public double C { readonly get; set; } Property Value Type Description double Methods | Edit this page View Source Equals(NpgsqlLine) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlLine other) Parameters Type Name Description NpgsqlLine other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(NpgsqlLine, NpgsqlLine) Declaration public static bool operator ==(NpgsqlLine x, NpgsqlLine y) Parameters Type Name Description NpgsqlLine x NpgsqlLine y Returns Type Description bool | Edit this page View Source operator !=(NpgsqlLine, NpgsqlLine) Declaration public static bool operator !=(NpgsqlLine x, NpgsqlLine y) Parameters Type Name Description NpgsqlLine x NpgsqlLine y Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlLogSequenceNumber.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlLogSequenceNumber.html",
    "title": "Struct NpgsqlLogSequenceNumber | Npgsql Documentation",
    "keywords": "Struct NpgsqlLogSequenceNumber Wraps a PostgreSQL Write-Ahead Log Sequence Number (see: https://www.postgresql.org/docs/current/datatype-pg-lsn.html) Implements IEquatable<NpgsqlLogSequenceNumber> IComparable<NpgsqlLogSequenceNumber> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public readonly struct NpgsqlLogSequenceNumber : IEquatable<NpgsqlLogSequenceNumber>, IComparable<NpgsqlLogSequenceNumber> Remarks Log Sequence Numbers are a fundamental concept of the PostgreSQL Write-Ahead Log and by that of PostgreSQL replication. See https://www.postgresql.org/docs/current/wal-internals.html for what they represent. This struct provides conversions from/to string and ulong and beyond that tries to port the methods and operators in https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/utils/adt/pg_lsn.c but nothing more. Constructors | Edit this page View Source NpgsqlLogSequenceNumber(ulong) Initializes a new instance of NpgsqlLogSequenceNumber. Declaration public NpgsqlLogSequenceNumber(ulong value) Parameters Type Name Description ulong value The value to wrap. Fields | Edit this page View Source Invalid Zero is used indicate an invalid Log Sequence Number. No XLOG record can begin at zero. Declaration public static readonly NpgsqlLogSequenceNumber Invalid Field Value Type Description NpgsqlLogSequenceNumber Methods | Edit this page View Source CompareTo(NpgsqlLogSequenceNumber) Compares this instance to a specified NpgsqlLogSequenceNumber and returns an indication of their relative values. Declaration public int CompareTo(NpgsqlLogSequenceNumber value) Parameters Type Name Description NpgsqlLogSequenceNumber value A NpgsqlLogSequenceNumber instance to compare to this instance. Returns Type Description int A signed number indicating the relative values of this instance and value. | Edit this page View Source Equals(NpgsqlLogSequenceNumber) Returns a value indicating whether this instance is equal to a specified NpgsqlLogSequenceNumber instance. Declaration public bool Equals(NpgsqlLogSequenceNumber other) Parameters Type Name Description NpgsqlLogSequenceNumber other A NpgsqlLogSequenceNumber instance to compare to this instance. Returns Type Description bool true if the current instance is equal to the value parameter; otherwise, false. | Edit this page View Source Equals(object?) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj An object to compare to this instance Returns Type Description bool true if the current instance is equal to the value parameter; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Edit this page View Source Larger(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns the larger of two NpgsqlLogSequenceNumber values. Declaration public static NpgsqlLogSequenceNumber Larger(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description NpgsqlLogSequenceNumber The larger of the two NpgsqlLogSequenceNumber values. | Edit this page View Source Parse(ReadOnlySpan<char>) Converts the span representation of a Log Sequence Number to a NpgsqlLogSequenceNumber instance. Declaration public static NpgsqlLogSequenceNumber Parse(ReadOnlySpan<char> s) Parameters Type Name Description ReadOnlySpan<char> s A span containing the characters that represent the Log Sequence Number to convert. Returns Type Description NpgsqlLogSequenceNumber A NpgsqlLogSequenceNumber equivalent to the Log Sequence Number specified in s. Exceptions Type Condition OverflowException The s parameter represents a number less than MinValue or greater than MaxValue. FormatException The s parameter is not in the right format. | Edit this page View Source Parse(string) Converts the string representation of a Log Sequence Number to a NpgsqlLogSequenceNumber instance. Declaration public static NpgsqlLogSequenceNumber Parse(string s) Parameters Type Name Description string s A string that represents the Log Sequence Number to convert. Returns Type Description NpgsqlLogSequenceNumber A NpgsqlLogSequenceNumber equivalent to the Log Sequence Number specified in s. Exceptions Type Condition ArgumentNullException The s parameter is null. OverflowException The s parameter represents a number less than MinValue or greater than MaxValue. FormatException The s parameter is not in the right format. | Edit this page View Source Smaller(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns the smaller of two NpgsqlLogSequenceNumber values. Declaration public static NpgsqlLogSequenceNumber Smaller(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description NpgsqlLogSequenceNumber The smaller of the two NpgsqlLogSequenceNumber values. | Edit this page View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description string The string representation of the value of this instance, consisting of two hexadecimal numbers of up to 8 digits each, separated by a slash Overrides ValueType.ToString() | Edit this page View Source TryParse(ReadOnlySpan<char>, out NpgsqlLogSequenceNumber) Tries to convert the span representation of a Log Sequence Number to an NpgsqlLogSequenceNumber instance. A return value indicates whether the conversion succeeded or failed. Declaration public static bool TryParse(ReadOnlySpan<char> s, out NpgsqlLogSequenceNumber result) Parameters Type Name Description ReadOnlySpan<char> s A span containing the characters that represent the Log Sequence Number to convert. NpgsqlLogSequenceNumber result When this method returns, contains a NpgsqlLogSequenceNumber instance equivalent to the Log Sequence Number contained in s, if the conversion succeeded, or the default value for NpgsqlLogSequenceNumber (0) if the conversion failed. The conversion fails if the s parameter is empty, is not in the right format, or represents a number less than MinValue or greater than MaxValue. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description bool true if s was converted successfully; otherwise, false. | Edit this page View Source TryParse(string, out NpgsqlLogSequenceNumber) Tries to convert the string representation of a Log Sequence Number to an NpgsqlLogSequenceNumber instance. A return value indicates whether the conversion succeeded or failed. Declaration public static bool TryParse(string s, out NpgsqlLogSequenceNumber result) Parameters Type Name Description string s A string that represents the Log Sequence Number to convert. NpgsqlLogSequenceNumber result When this method returns, contains a NpgsqlLogSequenceNumber instance equivalent to the Log Sequence Number contained in s, if the conversion succeeded, or the default value for NpgsqlLogSequenceNumber (0) if the conversion failed. The conversion fails if the s parameter is null or Empty, is not in the right format, or represents a number less than MinValue or greater than MaxValue. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description bool true if sc> was converted successfully; otherwise, false. Operators | Edit this page View Source operator +(NpgsqlLogSequenceNumber, double) Add the number of bytes to a NpgsqlLogSequenceNumber instance, giving a new NpgsqlLogSequenceNumber instance. Handles both positive and negative numbers of bytes. Declaration public static NpgsqlLogSequenceNumber operator +(NpgsqlLogSequenceNumber lsn, double nbytes) Parameters Type Name Description NpgsqlLogSequenceNumber lsn The NpgsqlLogSequenceNumber instance representing a write-ahead log location. double nbytes The number of bytes to add. Returns Type Description NpgsqlLogSequenceNumber A new NpgsqlLogSequenceNumber instance. Exceptions Type Condition OverflowException The resulting NpgsqlLogSequenceNumber instance would represent a number greater than MaxValue. | Edit this page View Source operator ==(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value that indicates whether two specified instances of NpgsqlLogSequenceNumber are equal. Declaration public static bool operator ==(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first Log Sequence Number to compare. NpgsqlLogSequenceNumber value2 The second Log Sequence Number to compare. Returns Type Description bool true if value1 equals value2; otherwise, false. | Edit this page View Source explicit operator ulong(NpgsqlLogSequenceNumber) Converts the value of a NpgsqlLogSequenceNumber instance to a 64-bit unsigned integer value. Declaration public static explicit operator ulong(NpgsqlLogSequenceNumber value) Parameters Type Name Description NpgsqlLogSequenceNumber value A NpgsqlLogSequenceNumber instance Returns Type Description ulong The contents of value as 64-bit unsigned integer. | Edit this page View Source explicit operator NpgsqlLogSequenceNumber(ulong) Converts the value of a 64-bit unsigned integer to a NpgsqlLogSequenceNumber instance. Declaration public static explicit operator NpgsqlLogSequenceNumber(ulong value) Parameters Type Name Description ulong value A 64-bit unsigned integer. Returns Type Description NpgsqlLogSequenceNumber A new instance of NpgsqlLogSequenceNumber initialized to value. | Edit this page View Source operator >(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value indicating whether a specified NpgsqlLogSequenceNumber instance is greater than another specified NpgsqlLogSequenceNumber instance. Declaration public static bool operator >(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description bool true if value1 is greater than value2; otherwise, false. | Edit this page View Source operator >=(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value indicating whether a specified NpgsqlLogSequenceNumber instance is greater than or equal to another specified NpgsqlLogSequenceNumber instance. Declaration public static bool operator >=(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description bool true if value1 is greater than or equal to value2; otherwise, false. | Edit this page View Source operator !=(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value that indicates whether two specified instances of NpgsqlLogSequenceNumber are not equal. Declaration public static bool operator !=(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first Log Sequence Number to compare. NpgsqlLogSequenceNumber value2 The second Log Sequence Number to compare. Returns Type Description bool true if value1 does not equal value2; otherwise, false. | Edit this page View Source operator <(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value indicating whether a specified NpgsqlLogSequenceNumber instance is less than another specified NpgsqlLogSequenceNumber instance. Declaration public static bool operator <(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description bool true if value1 is less than value2; otherwise, false. | Edit this page View Source operator <=(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Returns a value indicating whether a specified NpgsqlLogSequenceNumber instance is less than or equal to another specified NpgsqlLogSequenceNumber instance. Declaration public static bool operator <=(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2) Parameters Type Name Description NpgsqlLogSequenceNumber value1 The first value to compare. NpgsqlLogSequenceNumber value2 The second value to compare. Returns Type Description bool true if value1 is less than or equal to value2; otherwise, false. | Edit this page View Source operator -(NpgsqlLogSequenceNumber, NpgsqlLogSequenceNumber) Subtracts two specified NpgsqlLogSequenceNumber values. Declaration public static ulong operator -(NpgsqlLogSequenceNumber first, NpgsqlLogSequenceNumber second) Parameters Type Name Description NpgsqlLogSequenceNumber first The first NpgsqlLogSequenceNumber value. NpgsqlLogSequenceNumber second The second NpgsqlLogSequenceNumber value. Returns Type Description ulong The number of bytes separating those write-ahead log locations. | Edit this page View Source operator -(NpgsqlLogSequenceNumber, double) Subtract the number of bytes from a NpgsqlLogSequenceNumber instance, giving a new NpgsqlLogSequenceNumber instance. Handles both positive and negative numbers of bytes. Declaration public static NpgsqlLogSequenceNumber operator -(NpgsqlLogSequenceNumber lsn, double nbytes) Parameters Type Name Description NpgsqlLogSequenceNumber lsn The NpgsqlLogSequenceNumber instance representing a write-ahead log location. double nbytes The number of bytes to subtract. Returns Type Description NpgsqlLogSequenceNumber A new NpgsqlLogSequenceNumber instance. Exceptions Type Condition OverflowException The resulting NpgsqlLogSequenceNumber instance would represent a number less than MinValue. Implements IEquatable<T> IComparable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlPath.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlPath.html",
    "title": "Struct NpgsqlPath | Npgsql Documentation",
    "keywords": "Struct NpgsqlPath Represents a PostgreSQL Path type. Implements IList<NpgsqlPoint> ICollection<NpgsqlPoint> IEnumerable<NpgsqlPoint> IEnumerable IEquatable<NpgsqlPath> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public struct NpgsqlPath : IList<NpgsqlPoint>, ICollection<NpgsqlPoint>, IEnumerable<NpgsqlPoint>, IEnumerable, IEquatable<NpgsqlPath> Constructors | Edit this page View Source NpgsqlPath() Declaration public NpgsqlPath() | Edit this page View Source NpgsqlPath(params NpgsqlPoint[]) Declaration public NpgsqlPath(params NpgsqlPoint[] points) Parameters Type Name Description NpgsqlPoint[] points | Edit this page View Source NpgsqlPath(bool) Declaration public NpgsqlPath(bool open) Parameters Type Name Description bool open | Edit this page View Source NpgsqlPath(IEnumerable<NpgsqlPoint>) Declaration public NpgsqlPath(IEnumerable<NpgsqlPoint> points) Parameters Type Name Description IEnumerable<NpgsqlPoint> points | Edit this page View Source NpgsqlPath(IEnumerable<NpgsqlPoint>, bool) Declaration public NpgsqlPath(IEnumerable<NpgsqlPoint> points, bool open) Parameters Type Name Description IEnumerable<NpgsqlPoint> points bool open | Edit this page View Source NpgsqlPath(int) Declaration public NpgsqlPath(int capacity) Parameters Type Name Description int capacity | Edit this page View Source NpgsqlPath(int, bool) Declaration public NpgsqlPath(int capacity, bool open) Parameters Type Name Description int capacity bool open Properties | Edit this page View Source Capacity Declaration public int Capacity { get; } Property Value Type Description int | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the ICollection<T>. | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the ICollection<T> is read-only; otherwise, false. | Edit this page View Source this[int] Gets or sets the element at the specified index. Declaration public NpgsqlPoint this[int index] { get; set; } Parameters Type Name Description int index The zero-based index of the element to get or set. Property Value Type Description NpgsqlPoint The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. | Edit this page View Source Open Declaration public bool Open { readonly get; set; } Property Value Type Description bool Methods | Edit this page View Source Add(NpgsqlPoint) Adds an item to the ICollection<T>. Declaration public void Add(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item The object to add to the ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration public void Clear() Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Contains(NpgsqlPoint) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source CopyTo(NpgsqlPoint[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(NpgsqlPoint[] array, int arrayIndex) Parameters Type Name Description NpgsqlPoint[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source Equals(NpgsqlPath) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlPath other) Parameters Type Name Description NpgsqlPath other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<NpgsqlPoint> GetEnumerator() Returns Type Description IEnumerator<NpgsqlPoint> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source IndexOf(NpgsqlPoint) Determines the index of a specific item in the IList<T>. Declaration public int IndexOf(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item The object to locate in the IList<T>. Returns Type Description int The index of item if found in the list; otherwise, -1. | Edit this page View Source Insert(int, NpgsqlPoint) Inserts an item to the IList<T> at the specified index. Declaration public void Insert(int index, NpgsqlPoint item) Parameters Type Name Description int index The zero-based index at which item should be inserted. NpgsqlPoint item The object to insert into the IList<T>. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. | Edit this page View Source Remove(NpgsqlPoint) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source RemoveAt(int) Removes the IList<T> item at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the item to remove. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(NpgsqlPath, NpgsqlPath) Declaration public static bool operator ==(NpgsqlPath x, NpgsqlPath y) Parameters Type Name Description NpgsqlPath x NpgsqlPath y Returns Type Description bool | Edit this page View Source operator !=(NpgsqlPath, NpgsqlPath) Declaration public static bool operator !=(NpgsqlPath x, NpgsqlPath y) Parameters Type Name Description NpgsqlPath x NpgsqlPath y Returns Type Description bool Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlPoint.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlPoint.html",
    "title": "Struct NpgsqlPoint | Npgsql Documentation",
    "keywords": "Struct NpgsqlPoint Represents a PostgreSQL point type. Implements IEquatable<NpgsqlPoint> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public struct NpgsqlPoint : IEquatable<NpgsqlPoint> Remarks See https://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Edit this page View Source NpgsqlPoint(double, double) Declaration public NpgsqlPoint(double x, double y) Parameters Type Name Description double x double y Properties | Edit this page View Source X Declaration public double X { readonly get; set; } Property Value Type Description double | Edit this page View Source Y Declaration public double Y { readonly get; set; } Property Value Type Description double Methods | Edit this page View Source Equals(NpgsqlPoint) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlPoint other) Parameters Type Name Description NpgsqlPoint other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(NpgsqlPoint, NpgsqlPoint) Declaration public static bool operator ==(NpgsqlPoint x, NpgsqlPoint y) Parameters Type Name Description NpgsqlPoint x NpgsqlPoint y Returns Type Description bool | Edit this page View Source operator !=(NpgsqlPoint, NpgsqlPoint) Declaration public static bool operator !=(NpgsqlPoint x, NpgsqlPoint y) Parameters Type Name Description NpgsqlPoint x NpgsqlPoint y Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlPolygon.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlPolygon.html",
    "title": "Struct NpgsqlPolygon | Npgsql Documentation",
    "keywords": "Struct NpgsqlPolygon Represents a PostgreSQL Polygon type. Implements IList<NpgsqlPoint> ICollection<NpgsqlPoint> IEnumerable<NpgsqlPoint> IEnumerable IEquatable<NpgsqlPolygon> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public readonly struct NpgsqlPolygon : IList<NpgsqlPoint>, ICollection<NpgsqlPoint>, IEnumerable<NpgsqlPoint>, IEnumerable, IEquatable<NpgsqlPolygon> Constructors | Edit this page View Source NpgsqlPolygon() Declaration public NpgsqlPolygon() | Edit this page View Source NpgsqlPolygon(params NpgsqlPoint[]) Declaration public NpgsqlPolygon(params NpgsqlPoint[] points) Parameters Type Name Description NpgsqlPoint[] points | Edit this page View Source NpgsqlPolygon(IEnumerable<NpgsqlPoint>) Declaration public NpgsqlPolygon(IEnumerable<NpgsqlPoint> points) Parameters Type Name Description IEnumerable<NpgsqlPoint> points | Edit this page View Source NpgsqlPolygon(int) Declaration public NpgsqlPolygon(int capacity) Parameters Type Name Description int capacity Properties | Edit this page View Source Capacity Declaration public int Capacity { get; } Property Value Type Description int | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the ICollection<T>. | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the ICollection<T> is read-only; otherwise, false. | Edit this page View Source this[int] Gets or sets the element at the specified index. Declaration public NpgsqlPoint this[int index] { get; set; } Parameters Type Name Description int index The zero-based index of the element to get or set. Property Value Type Description NpgsqlPoint The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Methods | Edit this page View Source Add(NpgsqlPoint) Adds an item to the ICollection<T>. Declaration public void Add(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item The object to add to the ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration public void Clear() Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Contains(NpgsqlPoint) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source CopyTo(NpgsqlPoint[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(NpgsqlPoint[] array, int arrayIndex) Parameters Type Name Description NpgsqlPoint[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source Equals(NpgsqlPolygon) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlPolygon other) Parameters Type Name Description NpgsqlPolygon other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<NpgsqlPoint> GetEnumerator() Returns Type Description IEnumerator<NpgsqlPoint> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source IndexOf(NpgsqlPoint) Determines the index of a specific item in the IList<T>. Declaration public int IndexOf(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item The object to locate in the IList<T>. Returns Type Description int The index of item if found in the list; otherwise, -1. | Edit this page View Source Insert(int, NpgsqlPoint) Inserts an item to the IList<T> at the specified index. Declaration public void Insert(int index, NpgsqlPoint item) Parameters Type Name Description int index The zero-based index at which item should be inserted. NpgsqlPoint item The object to insert into the IList<T>. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. | Edit this page View Source Remove(NpgsqlPoint) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source RemoveAt(int) Removes the IList<T> item at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the item to remove. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(NpgsqlPolygon, NpgsqlPolygon) Declaration public static bool operator ==(NpgsqlPolygon x, NpgsqlPolygon y) Parameters Type Name Description NpgsqlPolygon x NpgsqlPolygon y Returns Type Description bool | Edit this page View Source operator !=(NpgsqlPolygon, NpgsqlPolygon) Declaration public static bool operator !=(NpgsqlPolygon x, NpgsqlPolygon y) Parameters Type Name Description NpgsqlPolygon x NpgsqlPolygon y Returns Type Description bool Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlRange-1.RangeTypeConverter.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlRange-1.RangeTypeConverter.html",
    "title": "Class NpgsqlRange<T>.RangeTypeConverter | Npgsql Documentation",
    "keywords": "Class NpgsqlRange<T>.RangeTypeConverter Represents a type converter for NpgsqlRange<T>. Inheritance object TypeConverter NpgsqlRange<T>.RangeTypeConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.ConvertFrom(object) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, string) TypeConverter.ConvertFromInvariantString(string) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, string) TypeConverter.ConvertFromString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(string) TypeConverter.ConvertTo(object, Type) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, object) TypeConverter.ConvertToInvariantString(object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, object) TypeConverter.ConvertToString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(object) TypeConverter.GetConvertToException(object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(ITypeDescriptorContext, object) TypeConverter.GetProperties(ITypeDescriptorContext, object, Attribute[]) TypeConverter.GetProperties(object) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(ITypeDescriptorContext, object) TypeConverter.IsValid(object) TypeConverter.SortProperties(PropertyDescriptorCollection, string[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public class NpgsqlRange<T>.RangeTypeConverter : TypeConverter Methods | Edit this page View Source CanConvertFrom(ITypeDescriptorContext?, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. Declaration public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type sourceType A Type that represents the type you want to convert from. Returns Type Description bool true if this converter can perform the conversion; otherwise, false. Overrides TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) | Edit this page View Source CanConvertTo(ITypeDescriptorContext?, Type?) Returns whether this converter can convert the object to the specified type, using the specified context. Declaration public override bool CanConvertTo(ITypeDescriptorContext? context, Type? destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type destinationType A Type that represents the type you want to convert to. Returns Type Description bool true if this converter can perform the conversion; otherwise, false. Overrides TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) | Edit this page View Source ConvertFrom(ITypeDescriptorContext?, CultureInfo?, object) Converts the given object to the type of this converter, using the specified context and culture information. Declaration public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture The CultureInfo to use as the current culture. object value The object to convert. Returns Type Description object An object that represents the converted value. Overrides TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, object) Exceptions Type Condition NotSupportedException The conversion cannot be performed. | Edit this page View Source ConvertTo(ITypeDescriptorContext?, CultureInfo?, object?, Type) Converts the given value object to the specified type, using the specified context and culture information. Declaration public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture A CultureInfo. If null is passed, the current culture is assumed. object value The object to convert. Type destinationType The Type to convert the value parameter to. Returns Type Description object An object that represents the converted value. Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, object, Type) Exceptions Type Condition ArgumentNullException The destinationType parameter is null. NotSupportedException The conversion cannot be performed. | Edit this page View Source Register() Adds a TypeConverterAttribute to the closed form NpgsqlRange<T>. Declaration public static void Register()"
  },
  "doc/api/NpgsqlTypes.NpgsqlRange-1.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlRange-1.html",
    "title": "Struct NpgsqlRange<T> | Npgsql Documentation",
    "keywords": "Struct NpgsqlRange<T> Represents a PostgreSQL range type. Implements IEquatable<NpgsqlRange<T>> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public readonly struct NpgsqlRange<T> : IEquatable<NpgsqlRange<T>> Type Parameters Name Description T The element type of the values in the range. Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Constructors | Edit this page View Source NpgsqlRange(T, bool, bool, T, bool, bool) Constructs an NpgsqlRange<T>. Declaration public NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, bool lowerBoundInfinite, T upperBound, bool upperBoundIsInclusive, bool upperBoundInfinite) Parameters Type Name Description T lowerBound The lower bound of the range. bool lowerBoundIsInclusive True if the lower bound is is part of the range (i.e. inclusive); otherwise, false. bool lowerBoundInfinite True if the lower bound is indefinite (i.e. infinite or unbounded); otherwise, false. T upperBound The upper bound of the range. bool upperBoundIsInclusive True if the upper bound is part of the range (i.e. inclusive); otherwise, false. bool upperBoundInfinite True if the upper bound is indefinite (i.e. infinite or unbounded); otherwise, false. | Edit this page View Source NpgsqlRange(T, bool, T, bool) Constructs an NpgsqlRange<T> with definite bounds. Declaration public NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, T upperBound, bool upperBoundIsInclusive) Parameters Type Name Description T lowerBound The lower bound of the range. bool lowerBoundIsInclusive True if the lower bound is is part of the range (i.e. inclusive); otherwise, false. T upperBound The upper bound of the range. bool upperBoundIsInclusive True if the upper bound is part of the range (i.e. inclusive); otherwise, false. | Edit this page View Source NpgsqlRange(T, T) Constructs an NpgsqlRange<T> with inclusive and definite bounds. Declaration public NpgsqlRange(T lowerBound, T upperBound) Parameters Type Name Description T lowerBound The lower bound of the range. T upperBound The upper bound of the range. Fields | Edit this page View Source Empty Represents the empty range. This field is read-only. Declaration public static readonly NpgsqlRange<T> Empty Field Value Type Description NpgsqlRange<T> Properties | Edit this page View Source IsEmpty True if the range is empty; otherwise, false. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source LowerBound The lower bound of the range. Only valid when LowerBoundInfinite is false. Declaration public T LowerBound { get; } Property Value Type Description T | Edit this page View Source LowerBoundInfinite True if the lower bound is indefinite (i.e. infinite or unbounded); otherwise, false. Declaration public bool LowerBoundInfinite { get; } Property Value Type Description bool | Edit this page View Source LowerBoundIsInclusive True if the lower bound is part of the range (i.e. inclusive); otherwise, false. Declaration public bool LowerBoundIsInclusive { get; } Property Value Type Description bool | Edit this page View Source UpperBound The upper bound of the range. Only valid when UpperBoundInfinite is false. Declaration public T UpperBound { get; } Property Value Type Description T | Edit this page View Source UpperBoundInfinite True if the upper bound is indefinite (i.e. infinite or unbounded); otherwise, false. Declaration public bool UpperBoundInfinite { get; } Property Value Type Description bool | Edit this page View Source UpperBoundIsInclusive True if the upper bound is part of the range (i.e. inclusive); otherwise, false. Declaration public bool UpperBoundIsInclusive { get; } Property Value Type Description bool Methods | Edit this page View Source Equals(NpgsqlRange<T>) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlRange<T> other) Parameters Type Name Description NpgsqlRange<T> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? o) Parameters Type Name Description object o Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source Parse(string) Parses the well-known text representation of a PostgreSQL range type into a NpgsqlRange<T>. Declaration public static NpgsqlRange<T> Parse(string value) Parameters Type Name Description string value A PosgreSQL range type in a well-known text format. Returns Type Description NpgsqlRange<T> The NpgsqlRange<T> represented by the value. Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Exceptions Type Condition FormatException Malformed range literal. FormatException Malformed range literal. Missing left parenthesis or bracket. FormatException Malformed range literal. Missing right parenthesis or bracket. FormatException Malformed range literal. Missing comma after lower bound. | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(NpgsqlRange<T>, NpgsqlRange<T>) Indicates whether the NpgsqlRange<T> on the left is equal to the NpgsqlRange<T> on the right. Declaration public static bool operator ==(NpgsqlRange<T> x, NpgsqlRange<T> y) Parameters Type Name Description NpgsqlRange<T> x The NpgsqlRange<T> on the left. NpgsqlRange<T> y The NpgsqlRange<T> on the right. Returns Type Description bool True if the NpgsqlRange<T> on the left is equal to the NpgsqlRange<T> on the right; otherwise, false. | Edit this page View Source operator !=(NpgsqlRange<T>, NpgsqlRange<T>) Indicates whether the NpgsqlRange<T> on the left is not equal to the NpgsqlRange<T> on the right. Declaration public static bool operator !=(NpgsqlRange<T> x, NpgsqlRange<T> y) Parameters Type Name Description NpgsqlRange<T> x The NpgsqlRange<T> on the left. NpgsqlRange<T> y The NpgsqlRange<T> on the right. Returns Type Description bool True if the NpgsqlRange<T> on the left is not equal to the NpgsqlRange<T> on the right; otherwise, false. Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTid.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTid.html",
    "title": "Struct NpgsqlTid | Npgsql Documentation",
    "keywords": "Struct NpgsqlTid Represents a PostgreSQL tid value Implements IEquatable<NpgsqlTid> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public readonly struct NpgsqlTid : IEquatable<NpgsqlTid> Remarks https://www.postgresql.org/docs/current/static/datatype-oid.html Constructors | Edit this page View Source NpgsqlTid(uint, ushort) Declaration public NpgsqlTid(uint blockNumber, ushort offsetNumber) Parameters Type Name Description uint blockNumber ushort offsetNumber Properties | Edit this page View Source BlockNumber Block number Declaration public uint BlockNumber { get; } Property Value Type Description uint | Edit this page View Source OffsetNumber Tuple index within block Declaration public ushort OffsetNumber { get; } Property Value Type Description ushort Methods | Edit this page View Source Equals(NpgsqlTid) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlTid other) Parameters Type Name Description NpgsqlTid other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? o) Parameters Type Name Description object o Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(NpgsqlTid, NpgsqlTid) Declaration public static bool operator ==(NpgsqlTid left, NpgsqlTid right) Parameters Type Name Description NpgsqlTid left NpgsqlTid right Returns Type Description bool | Edit this page View Source operator !=(NpgsqlTid, NpgsqlTid) Declaration public static bool operator !=(NpgsqlTid left, NpgsqlTid right) Parameters Type Name Description NpgsqlTid left NpgsqlTid right Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQuery.NodeKind.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQuery.NodeKind.html",
    "title": "Enum NpgsqlTsQuery.NodeKind | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsQuery.NodeKind NodeKind Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public enum NpgsqlTsQuery.NodeKind Fields Name Description And And operator Empty Represents the empty tsquery. Should only be used at top level. Lexeme Lexeme Not Not operator Or Or operator Phrase \"Followed by\" operator"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQuery.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQuery.html",
    "title": "Class NpgsqlTsQuery | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQuery Represents a PostgreSQL tsquery. This is the base class for the lexeme, not, or, and, and \"followed by\" nodes. Inheritance object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryEmpty NpgsqlTsQueryLexeme NpgsqlTsQueryNot Implements IEquatable<NpgsqlTsQuery> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public abstract class NpgsqlTsQuery : IEquatable<NpgsqlTsQuery> Constructors | Edit this page View Source NpgsqlTsQuery(NodeKind) Constructs an NpgsqlTsQuery. Declaration protected NpgsqlTsQuery(NpgsqlTsQuery.NodeKind kind) Parameters Type Name Description NpgsqlTsQuery.NodeKind kind Properties | Edit this page View Source Kind Node kind Declaration public NpgsqlTsQuery.NodeKind Kind { get; } Property Value Type Description NpgsqlTsQuery.NodeKind Methods | Edit this page View Source Equals(NpgsqlTsQuery?) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public abstract bool Equals(NpgsqlTsQuery? other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description bool true if g is equal to this instance; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source Parse(string) Parses a tsquery in PostgreSQL's text format. Declaration [Obsolete(\"Client-side parsing of NpgsqlTsQuery is unreliable and cannot fully duplicate the PostgreSQL logic. Use PG functions instead (e.g. to_tsquery)\")] public static NpgsqlTsQuery Parse(string value) Parameters Type Name Description string value Returns Type Description NpgsqlTsQuery | Edit this page View Source ToString() Writes the tsquery in PostgreSQL's text format. Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source Write(StringBuilder) Writes the tsquery in PostgreSQL's text format. Declaration public void Write(StringBuilder stringBuilder) Parameters Type Name Description StringBuilder stringBuilder Operators | Edit this page View Source operator ==(NpgsqlTsQuery?, NpgsqlTsQuery?) Indicates whether the values of two specified NpgsqlTsQuery objects are equal. Declaration public static bool operator ==(NpgsqlTsQuery? left, NpgsqlTsQuery? right) Parameters Type Name Description NpgsqlTsQuery left The first object to compare. NpgsqlTsQuery right The second object to compare. Returns Type Description bool true if left and right are equal; otherwise, false. | Edit this page View Source operator !=(NpgsqlTsQuery?, NpgsqlTsQuery?) Indicates whether the values of two specified NpgsqlTsQuery objects are not equal. Declaration public static bool operator !=(NpgsqlTsQuery? left, NpgsqlTsQuery? right) Parameters Type Name Description NpgsqlTsQuery left The first object to compare. NpgsqlTsQuery right The second object to compare. Returns Type Description bool true if left and right are not equal; otherwise, false. Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryAnd.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryAnd.html",
    "title": "Class NpgsqlTsQueryAnd | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryAnd TsQuery And node. Inheritance object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryAnd Implements IEquatable<NpgsqlTsQuery> Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(string) NpgsqlTsQuery.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public sealed class NpgsqlTsQueryAnd : NpgsqlTsQueryBinOp, IEquatable<NpgsqlTsQuery> Constructors | Edit this page View Source NpgsqlTsQueryAnd(NpgsqlTsQuery, NpgsqlTsQuery) Creates an and operator, with two given child nodes. Declaration public NpgsqlTsQueryAnd(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left NpgsqlTsQuery right Methods | Edit this page View Source Equals(NpgsqlTsQuery?) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery? other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description bool true if g is equal to this instance; otherwise, false. Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery?) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides NpgsqlTsQuery.GetHashCode() Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryBinOp.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryBinOp.html",
    "title": "Class NpgsqlTsQueryBinOp | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryBinOp Base class for TsQuery binary operators (& and |). Inheritance object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryAnd NpgsqlTsQueryFollowedBy NpgsqlTsQueryOr Implements IEquatable<NpgsqlTsQuery> Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(string) NpgsqlTsQuery.GetHashCode() NpgsqlTsQuery.Equals(object) NpgsqlTsQuery.Equals(NpgsqlTsQuery) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public abstract class NpgsqlTsQueryBinOp : NpgsqlTsQuery, IEquatable<NpgsqlTsQuery> Constructors | Edit this page View Source NpgsqlTsQueryBinOp(NodeKind, NpgsqlTsQuery, NpgsqlTsQuery) Constructs a NpgsqlTsQueryBinOp. Declaration protected NpgsqlTsQueryBinOp(NpgsqlTsQuery.NodeKind kind, NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery.NodeKind kind NpgsqlTsQuery left NpgsqlTsQuery right Properties | Edit this page View Source Left Left child Declaration public NpgsqlTsQuery Left { get; set; } Property Value Type Description NpgsqlTsQuery | Edit this page View Source Right Right child Declaration public NpgsqlTsQuery Right { get; set; } Property Value Type Description NpgsqlTsQuery Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryEmpty.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryEmpty.html",
    "title": "Class NpgsqlTsQueryEmpty | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryEmpty Represents an empty tsquery. Shold only be used as top node. Inheritance object NpgsqlTsQuery NpgsqlTsQueryEmpty Implements IEquatable<NpgsqlTsQuery> Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(string) NpgsqlTsQuery.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public sealed class NpgsqlTsQueryEmpty : NpgsqlTsQuery, IEquatable<NpgsqlTsQuery> Constructors | Edit this page View Source NpgsqlTsQueryEmpty() Creates a tsquery that represents an empty query. Should not be used as child node. Declaration public NpgsqlTsQueryEmpty() Methods | Edit this page View Source Equals(NpgsqlTsQuery?) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery? other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description bool true if g is equal to this instance; otherwise, false. Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery?) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides NpgsqlTsQuery.GetHashCode() Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryFollowedBy.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryFollowedBy.html",
    "title": "Class NpgsqlTsQueryFollowedBy | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryFollowedBy TsQuery \"Followed by\" Node. Inheritance object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryFollowedBy Implements IEquatable<NpgsqlTsQuery> Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(string) NpgsqlTsQuery.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public sealed class NpgsqlTsQueryFollowedBy : NpgsqlTsQueryBinOp, IEquatable<NpgsqlTsQuery> Constructors | Edit this page View Source NpgsqlTsQueryFollowedBy(NpgsqlTsQuery, short, NpgsqlTsQuery) Creates a \"followed by\" operator, specifying 2 child nodes and the distance between them in lexemes. Declaration public NpgsqlTsQueryFollowedBy(NpgsqlTsQuery left, short distance, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left short distance NpgsqlTsQuery right Properties | Edit this page View Source Distance The distance between the 2 nodes, in lexemes. Declaration public short Distance { get; set; } Property Value Type Description short Methods | Edit this page View Source Equals(NpgsqlTsQuery?) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery? other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description bool true if g is equal to this instance; otherwise, false. Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery?) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides NpgsqlTsQuery.GetHashCode() Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.html",
    "title": "Enum NpgsqlTsQueryLexeme.Weight | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsQueryLexeme.Weight Weight enum, can be OR'ed together. Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax [Flags] public enum NpgsqlTsQueryLexeme.Weight Fields Name Description A A B B C C D D None None"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.html",
    "title": "Class NpgsqlTsQueryLexeme | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryLexeme TsQuery Lexeme node. Inheritance object NpgsqlTsQuery NpgsqlTsQueryLexeme Implements IEquatable<NpgsqlTsQuery> Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(string) NpgsqlTsQuery.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public sealed class NpgsqlTsQueryLexeme : NpgsqlTsQuery, IEquatable<NpgsqlTsQuery> Constructors | Edit this page View Source NpgsqlTsQueryLexeme(string) Creates a tsquery lexeme with only lexeme text. Declaration public NpgsqlTsQueryLexeme(string text) Parameters Type Name Description string text Lexeme text. | Edit this page View Source NpgsqlTsQueryLexeme(string, Weight) Creates a tsquery lexeme with lexeme text and weights. Declaration public NpgsqlTsQueryLexeme(string text, NpgsqlTsQueryLexeme.Weight weights) Parameters Type Name Description string text Lexeme text. NpgsqlTsQueryLexeme.Weight weights Bitmask of enum Weight. | Edit this page View Source NpgsqlTsQueryLexeme(string, Weight, bool) Creates a tsquery lexeme with lexeme text, weights and prefix search flag. Declaration public NpgsqlTsQueryLexeme(string text, NpgsqlTsQueryLexeme.Weight weights, bool isPrefixSearch) Parameters Type Name Description string text Lexeme text. NpgsqlTsQueryLexeme.Weight weights Bitmask of enum Weight. bool isPrefixSearch Is prefix search? Properties | Edit this page View Source IsPrefixSearch Prefix search. Declaration public bool IsPrefixSearch { get; set; } Property Value Type Description bool | Edit this page View Source Text Lexeme text. Declaration public string Text { get; set; } Property Value Type Description string | Edit this page View Source Weights Weights is a bitmask of the Weight enum. Declaration public NpgsqlTsQueryLexeme.Weight Weights { get; set; } Property Value Type Description NpgsqlTsQueryLexeme.Weight Methods | Edit this page View Source Equals(NpgsqlTsQuery?) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery? other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description bool true if g is equal to this instance; otherwise, false. Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery?) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides NpgsqlTsQuery.GetHashCode() Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryNot.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryNot.html",
    "title": "Class NpgsqlTsQueryNot | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryNot TsQuery Not node. Inheritance object NpgsqlTsQuery NpgsqlTsQueryNot Implements IEquatable<NpgsqlTsQuery> Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(string) NpgsqlTsQuery.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public sealed class NpgsqlTsQueryNot : NpgsqlTsQuery, IEquatable<NpgsqlTsQuery> Constructors | Edit this page View Source NpgsqlTsQueryNot(NpgsqlTsQuery) Creates a not operator, with a given child node. Declaration public NpgsqlTsQueryNot(NpgsqlTsQuery child) Parameters Type Name Description NpgsqlTsQuery child Properties | Edit this page View Source Child Child node Declaration public NpgsqlTsQuery Child { get; set; } Property Value Type Description NpgsqlTsQuery Methods | Edit this page View Source Equals(NpgsqlTsQuery?) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery? other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description bool true if g is equal to this instance; otherwise, false. Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery?) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides NpgsqlTsQuery.GetHashCode() Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryOr.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryOr.html",
    "title": "Class NpgsqlTsQueryOr | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryOr TsQuery Or Node. Inheritance object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryOr Implements IEquatable<NpgsqlTsQuery> Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.Write(StringBuilder) NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(string) NpgsqlTsQuery.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public sealed class NpgsqlTsQueryOr : NpgsqlTsQueryBinOp, IEquatable<NpgsqlTsQuery> Constructors | Edit this page View Source NpgsqlTsQueryOr(NpgsqlTsQuery, NpgsqlTsQuery) Creates an or operator, with two given child nodes. Declaration public NpgsqlTsQueryOr(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left NpgsqlTsQuery right Methods | Edit this page View Source Equals(NpgsqlTsQuery?) Returns a value indicating whether this instance and a specified NpgsqlTsQuery object represent the same value. Declaration public override bool Equals(NpgsqlTsQuery? other) Parameters Type Name Description NpgsqlTsQuery other An object to compare to this instance. Returns Type Description bool true if g is equal to this instance; otherwise, false. Overrides NpgsqlTsQuery.Equals(NpgsqlTsQuery?) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides NpgsqlTsQuery.GetHashCode() Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.html",
    "title": "Enum NpgsqlTsVector.Lexeme.Weight | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsVector.Lexeme.Weight The weight is labeled from A to D. D is the default, and not printed. Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public enum NpgsqlTsVector.Lexeme.Weight Fields Name Description A A B B C C D D, the default"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.html",
    "title": "Struct NpgsqlTsVector.Lexeme.WordEntryPos | Npgsql Documentation",
    "keywords": "Struct NpgsqlTsVector.Lexeme.WordEntryPos Represents a word entry position and an optional weight. Implements IEquatable<NpgsqlTsVector.Lexeme.WordEntryPos> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public struct NpgsqlTsVector.Lexeme.WordEntryPos : IEquatable<NpgsqlTsVector.Lexeme.WordEntryPos> Constructors | Edit this page View Source WordEntryPos(int, Weight) Creates a WordEntryPos with a given position and weight. Declaration public WordEntryPos(int pos, NpgsqlTsVector.Lexeme.Weight weight = Weight.D) Parameters Type Name Description int pos Position values can range from 1 to 16383; larger numbers are silently set to 16383. NpgsqlTsVector.Lexeme.Weight weight A weight labeled between A and D. Properties | Edit this page View Source Pos The position is a 14-bit unsigned integer indicating the position in the text this lexeme occurs. Cannot be 0. Declaration public int Pos { get; } Property Value Type Description int | Edit this page View Source Weight The weight is labeled from A to D. D is the default, and not printed. Declaration public NpgsqlTsVector.Lexeme.Weight Weight { get; } Property Value Type Description NpgsqlTsVector.Lexeme.Weight Methods | Edit this page View Source Equals(WordEntryPos) Determines whether the specified object is equal to the current object. Declaration public bool Equals(NpgsqlTsVector.Lexeme.WordEntryPos o) Parameters Type Name Description NpgsqlTsVector.Lexeme.WordEntryPos o Returns Type Description bool | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? o) Parameters Type Name Description object o Returns Type Description bool Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Gets a hash code for the current object. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Prints this lexeme in PostgreSQL's format, i.e. position is followed by weight (weight is only printed if A, B or C). Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(WordEntryPos, WordEntryPos) Determines whether the specified object is equal to the current object. Declaration public static bool operator ==(NpgsqlTsVector.Lexeme.WordEntryPos left, NpgsqlTsVector.Lexeme.WordEntryPos right) Parameters Type Name Description NpgsqlTsVector.Lexeme.WordEntryPos left NpgsqlTsVector.Lexeme.WordEntryPos right Returns Type Description bool | Edit this page View Source operator !=(WordEntryPos, WordEntryPos) Determines whether the specified object is unequal to the current object. Declaration public static bool operator !=(NpgsqlTsVector.Lexeme.WordEntryPos left, NpgsqlTsVector.Lexeme.WordEntryPos right) Parameters Type Name Description NpgsqlTsVector.Lexeme.WordEntryPos left NpgsqlTsVector.Lexeme.WordEntryPos right Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.html",
    "title": "Struct NpgsqlTsVector.Lexeme | Npgsql Documentation",
    "keywords": "Struct NpgsqlTsVector.Lexeme Represents a lexeme. A lexeme consists of a text string and optional word entry positions. Implements IEquatable<NpgsqlTsVector.Lexeme> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public struct NpgsqlTsVector.Lexeme : IEquatable<NpgsqlTsVector.Lexeme> Constructors | Edit this page View Source Lexeme(string) Creates a lexeme with no word entry positions. Declaration public Lexeme(string text) Parameters Type Name Description string text | Edit this page View Source Lexeme(string, List<WordEntryPos>?) Creates a lexeme with word entry positions. Declaration public Lexeme(string text, List<NpgsqlTsVector.Lexeme.WordEntryPos>? wordEntryPositions) Parameters Type Name Description string text List<NpgsqlTsVector.Lexeme.WordEntryPos> wordEntryPositions Properties | Edit this page View Source Count Gets the number of word entry positions. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Gets a word entry position. Declaration public NpgsqlTsVector.Lexeme.WordEntryPos this[int index] { get; } Parameters Type Name Description int index Property Value Type Description NpgsqlTsVector.Lexeme.WordEntryPos | Edit this page View Source Text Gets or sets the text. Declaration public string Text { readonly get; set; } Property Value Type Description string Methods | Edit this page View Source Equals(Lexeme) Determines whether the specified object is equal to the current object. Declaration public bool Equals(NpgsqlTsVector.Lexeme o) Parameters Type Name Description NpgsqlTsVector.Lexeme o Returns Type Description bool | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? o) Parameters Type Name Description object o Returns Type Description bool Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Gets a hash code for the current object. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Creates a string representation in PostgreSQL's format. Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(Lexeme, Lexeme) Determines whether the specified object is equal to the current object. Declaration public static bool operator ==(NpgsqlTsVector.Lexeme left, NpgsqlTsVector.Lexeme right) Parameters Type Name Description NpgsqlTsVector.Lexeme left NpgsqlTsVector.Lexeme right Returns Type Description bool | Edit this page View Source operator !=(Lexeme, Lexeme) Determines whether the specified object is unequal to the current object. Declaration public static bool operator !=(NpgsqlTsVector.Lexeme left, NpgsqlTsVector.Lexeme right) Parameters Type Name Description NpgsqlTsVector.Lexeme left NpgsqlTsVector.Lexeme right Returns Type Description bool Implements IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.html",
    "title": "Class NpgsqlTsVector | Npgsql Documentation",
    "keywords": "Class NpgsqlTsVector Represents a PostgreSQL tsvector. Inheritance object NpgsqlTsVector Implements IEnumerable<NpgsqlTsVector.Lexeme> IEnumerable IEquatable<NpgsqlTsVector> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax public sealed class NpgsqlTsVector : IEnumerable<NpgsqlTsVector.Lexeme>, IEnumerable, IEquatable<NpgsqlTsVector> Properties | Edit this page View Source Count Gets the number of lexemes. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Returns the lexeme at a specific index Declaration public NpgsqlTsVector.Lexeme this[int index] { get; } Parameters Type Name Description int index Property Value Type Description NpgsqlTsVector.Lexeme Methods | Edit this page View Source Equals(NpgsqlTsVector?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NpgsqlTsVector? other) Parameters Type Name Description NpgsqlTsVector other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator. Declaration public IEnumerator<NpgsqlTsVector.Lexeme> GetEnumerator() Returns Type Description IEnumerator<NpgsqlTsVector.Lexeme> | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source Parse(string) Parses a tsvector in PostgreSQL's text format. Declaration [Obsolete(\"Client-side parsing of NpgsqlTsVector is unreliable and cannot fully duplicate the PostgreSQL logic. Use PG functions instead (e.g. to_tsvector)\")] public static NpgsqlTsVector Parse(string value) Parameters Type Name Description string value Returns Type Description NpgsqlTsVector | Edit this page View Source ToString() Gets a string representation in PostgreSQL's format. Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements IEnumerable<T> IEnumerable IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.PgNameAttribute.html": {
    "href": "doc/api/NpgsqlTypes.PgNameAttribute.html",
    "title": "Class PgNameAttribute | Npgsql Documentation",
    "keywords": "Class PgNameAttribute Indicates that this property or field corresponds to a PostgreSQL field with the specified name Inheritance object Attribute PgNameAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NpgsqlTypes Assembly: Npgsql.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Enum|AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter)] public class PgNameAttribute : Attribute Constructors | Edit this page View Source PgNameAttribute(string) Indicates that this property or field corresponds to a PostgreSQL field with the specified name Declaration public PgNameAttribute(string pgName) Parameters Type Name Description string pgName The name of PostgreSQL field that corresponds to this CLR property or field Properties | Edit this page View Source PgName The name of PostgreSQL field that corresponds to this CLR property or field Declaration public string PgName { get; } Property Value Type Description string"
  },
  "doc/api/NpgsqlTypes.html": {
    "href": "doc/api/NpgsqlTypes.html",
    "title": "Namespace NpgsqlTypes | Npgsql Documentation",
    "keywords": "Namespace NpgsqlTypes Classes NpgsqlRange<T>.RangeTypeConverter Represents a type converter for NpgsqlRange<T>. NpgsqlTsQuery Represents a PostgreSQL tsquery. This is the base class for the lexeme, not, or, and, and \"followed by\" nodes. NpgsqlTsQueryAnd TsQuery And node. NpgsqlTsQueryBinOp Base class for TsQuery binary operators (& and |). NpgsqlTsQueryEmpty Represents an empty tsquery. Shold only be used as top node. NpgsqlTsQueryFollowedBy TsQuery \"Followed by\" Node. NpgsqlTsQueryLexeme TsQuery Lexeme node. NpgsqlTsQueryNot TsQuery Not node. NpgsqlTsQueryOr TsQuery Or Node. NpgsqlTsVector Represents a PostgreSQL tsvector. PgNameAttribute Indicates that this property or field corresponds to a PostgreSQL field with the specified name Structs NpgsqlBox Represents a PostgreSQL box type. NpgsqlCidr Represents a PostgreSQL cidr type. NpgsqlCircle Represents a PostgreSQL Circle type. NpgsqlInet Represents a PostgreSQL inet type, which is a combination of an IPAddress and a subnet mask. NpgsqlInterval A raw representation of the PostgreSQL interval datatype. Use only when TimeSpan or NodaTime Period do not have sufficient range to handle your values. NpgsqlLSeg Represents a PostgreSQL Line Segment type. NpgsqlLine Represents a PostgreSQL line type. NpgsqlLogSequenceNumber Wraps a PostgreSQL Write-Ahead Log Sequence Number (see: https://www.postgresql.org/docs/current/datatype-pg-lsn.html) NpgsqlPath Represents a PostgreSQL Path type. NpgsqlPoint Represents a PostgreSQL point type. NpgsqlPolygon Represents a PostgreSQL Polygon type. NpgsqlRange<T> Represents a PostgreSQL range type. NpgsqlTid Represents a PostgreSQL tid value NpgsqlTsVector.Lexeme Represents a lexeme. A lexeme consists of a text string and optional word entry positions. NpgsqlTsVector.Lexeme.WordEntryPos Represents a word entry position and an optional weight. Enums NpgsqlDbType Represents a PostgreSQL data type that can be written or read to the database. Used in places such as NpgsqlDbType to unambiguously specify how to encode or decode values. NpgsqlTsQuery.NodeKind NodeKind NpgsqlTsQueryLexeme.Weight Weight enum, can be OR'ed together. NpgsqlTsVector.Lexeme.Weight The weight is labeled from A to D. D is the default, and not printed."
  },
  "doc/basic-usage.html": {
    "href": "doc/basic-usage.html",
    "title": "Npgsql Basic Usage | Npgsql Documentation",
    "keywords": "Npgsql Basic Usage Data source Note The data source concept was introduced in Npgsql 7.0. If you're using an older version, see Connections without a data source below. Starting with Npgsql 7.0, the starting point for any database operation is NpgsqlDataSource. The data source represents your PostgreSQL database, and can hand out connections to it, or support direct execution of SQL against it. The data source encapsulates the various Npgsql configuration needed to connect to PostgreSQL, as well the connection pooling which makes Npgsql efficient. The simplest way to create a data source is the following: var connectionString = \"Host=myserver;Username=mylogin;Password=mypass;Database=mydatabase\"; await using var dataSource = NpgsqlDataSource.Create(connectionString); In this code, a data source is created given a connection string, which is used to define which database to connect to, the authentication information to use, and various other connection-related parameters. The connection string consists of key/value pairs, separated with semicolons; many options are supported in Npgsql, these are documented on the connection string page. Npgsql's data source supports additional configuration beyond the connection string, such as logging, advanced authentication options, type mapping management, and more. To further configure a data source, use NpgsqlDataSourceBuilder as follows: var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"Host=localhost;Username=test;Password=test\"); dataSourceBuilder .UseLoggerFactory(loggerFactory) // Configure logging .UsePeriodicPasswordProvider() // Automatically rotate the password periodically .UseNodaTime(); // Use NodaTime for date/time types await using var dataSource = dataSourceBuilder.Build(); You typically build a single data source, and then use that instance throughout your application; data sources are thread-safe, and (usually) correspond to a connection pool inside Npgsql. For more information on data source configuration, consult the relevant documentation pages. Note If you're using NativeAOT and trimming and are concerned with minimizing application size, consider using NpgsqlSlimDataSourceBuilder; this builder includes only the very minimum of functionality by default, and allows adding additional features via opt-ins. Basic SQL Execution Once you have a data source, an NpgsqlCommand can be used to execute SQL against it: await using var command = dataSource.CreateCommand(\"SELECT some_field FROM some_table\"); await using var reader = await command.ExecuteReaderAsync(); while (await reader.ReadAsync()) { Console.WriteLine(reader.GetString(0)); } More information on executing commands is provided below. Connections In the example above, we didn't deal with a database connection; we just executed a command directly against a data source representing the database. Npgsql internally arranges for a connection on which to execute your command, but you don't need to concern yourself with that. However, in some situations it's necessary to interact with a connection, typically when some sort of state needs to persist across multiple command executions. The common example for this is a database transaction, where multiple commands need to be executed within the same transaction, on the same transaction. A data source also acts as a factory for connections, so you can do the following: await using var connection = await dataSource.OpenConnectionAsync(); At this point you have an open connection, and can execute commands against it much like we did against the data source above: await using var command = new NpgsqlCommand(\"SELECT '8'\", connection); await using var reader = await command.ExecuteReaderAsync(); // Consume the results Connections must be disposed when they are no longer needed - not doing so will result in a connection leak, which can crash your program. In the above code sample, this is done via the await using C# construct, which ensures the connection is disposed even if an exception is later thrown. It's a good idea to keep connections open for as little time a possible: database connections are scarce resources, and keeping them open for unnecessarily long times can create unnecessary load in your application and in PostgreSQL. Pooling Opening and closing physical connections to PostgreSQL is an expensive and long process. Therefore, Npgsql connections are pooled by default: closing or disposing a connection doesn't close the underlying physical connection, but rather returns it to an internal pool managed by Npgsql. The next time a connection is needed, that pooled connection is returned again. This makes open and close extremely fast operations; do not hesitate to perform them a lot if needed, rather than holding a connection needlessly open for a long time. For information on tweaking the pooling behavior (or turning it off), see the pooling section in the connection string page. Connections without a data source The data source concept is new in Npgsql 7.0, and is the recommended way to use Npgsql. When using older versions, connections are instantiated directly, rather than obtaining them from a data source: await using var conn = new NpgsqlConnection(connectionString); await conn.OpenAsync(); Direct instantiation of connection is still supported, but is discouraged for various reasons when using Npgsql 7.0 or above. Other execution methods Above, we executed SQL via ExecuteReaderAsync. There are various ways to execute a command, based on what results you expect from it: ExecuteNonQueryAsync: executes SQL which doesn't return any results, typically INSERT, UPDATE or DELETE statements. Returns the number of rows affected. ExecuteScalarAsync: executes SQL which returns a single, scalar value. ExecuteReaderAsync: execute SQL which returns a full resultset. Returns an NpgsqlDataReader which can be used to access the resultset (as in the above example). For example, to execute a simple SQL INSERT which does not return anything, you can use ExecuteNonQueryAsync as follows: await using var command = dataSource.CreateCommand(\"INSERT INTO some_table (some_field) VALUES (8)\"); await command.ExecuteNonQueryAsync(); Note that each execute method involves a database roundtrip. To execute multiple SQL statements in a single roundtrip, see the batching section below. Parameters When sending data values to the database, always consider using parameters rather than including the values in the SQL as follows: await using var cmd = new NpgsqlCommand(\"INSERT INTO table (col1) VALUES ($1), ($2)\", conn) { Parameters = { new() { Value = \"some_value\" }, new() { Value = \"some_other_value\" } } }; await cmd.ExecuteNonQueryAsync(); The $1 and $2 in your SQL are parameter placeholders: they refer to the corresponding parameter in the command's parameter list, and are sent along with your query. This has the following advantages over embedding the value in your SQL: Parameters protect against SQL injection for user-provided inputs: the parameter data is sent to PostgreSQL separately from the SQL, and is never interpreted as SQL. Parameters are required to make use of prepared statements, which significantly improve performance if you execute the same SQL many times. Parameter data is sent in an efficient, binary format, rather than being represented as a string in your SQL. Note that PostgreSQL does not support parameters in arbitrary locations - you can only parameterize data values. For example, trying to parameterize a table or column name will fail - parameters aren't a simple way to stick an arbitrary string in your SQL. Positional and named placeholders Starting with Npgsql 6.0, the recommended placeholder style is positional ($1, $2); this is the native parameter style used by PostgreSQL, and your SQL can therefore be sent to the database as-is, without any manipulation. For legacy and compatibility reasons, Npgsql also supports named placeholders. This allows the above code to be written as follows: await using var cmd = new NpgsqlCommand(\"INSERT INTO table (col1) VALUES (@p1), (@p2)\", conn) { Parameters = { new(\"p1\", \"some_value\"), new(\"p2\", \"some_other_value\") } }; await cmd.ExecuteNonQueryAsync(); Rather than matching placeholders to parameters by their position, Npgsql matches these parameter by name. This can be useful when porting database code from other databases, where named placeholders are used. However, since this placeholder style isn't natively supported by PostgreSQL, Npgsql must parse your SQL and rewrite it to use positional placeholders under the hood; this rewriting has a performance price, and some forms of SQL may not be parsed correctly. It's recommended to use positional placeholders whenever possible. For more information, see this blog post. Parameter types PostgreSQL has a strongly-typed type system: columns and parameters have a type, and types are usually not implicitly converted to other types. This means you have to think about which type you will be sending: trying to insert a string into an integer column (or vice versa) will fail. In the example above, we let Npgsql infer the PostgreSQL data type from the .NET type: when Npgsql sees a .NET string, it automatically sends a parameter of PostgreSQL type text (note that this isn't the same as, say varchar). In many cases this will work just fine, and you don't need to worry. In some cases, however, you will need to explicitly set, or coerce, the parameter type. For example, although Npgsql sends .NET string as text by default, it also supports sending jsonb. For more information on supported types and their mappings, see this page. NpgsqlParameter exposes several properties that allow you to coerce the parameter's data type: DbType: a portable enum that can be used to specify database types. While this approach will allow you to write portable code across databases, it won't let you specify types that are specific to PostgreSQL. This is useful mainly if you're avoiding Npgsql-specific types, using DbConnection and DbCommand rather than NpgsqlConnection and NpgsqlCommand. NpgsqlDbType: an Npgsql-specific enum that contains (almost) all PostgreSQL types supported by Npgsql. DataTypeName: an Npgsql-specific string property which allows to directly set a PostgreSQL type name on the parameter. This is rarely needed - NpgsqlDbType should be suitable for the majority of cases. However, it may be useful if you're using unmapped user-defined types (enums or composites) or some PostgreSQL type which isn't included in NpgsqlDbType (because it's supported via an external plugin). Strongly-typed parameters The standard ADO.NET parameter API is unfortunately weakly-typed: parameter values are set on NpgsqlParameter.Value, which, being an object, boxes value types such as int. If you're sending lots of value types to the database, this creates large amounts of useless heap allocations and strain the garbage collector. As an alternative, you can use NpgsqlParameter<T>. This generic class has a TypedValue member, which is similar to NpgsqlParameter.Value but is strongly-typed, thus avoiding the boxing and heap allocation. Unfortunately, using nullable value types (in order to send nulls) isn't yet supported - you'll have to use the non-generic parameter API for that. Note also that this strongly-typed parameter API is entirely Npgsql-specific, and will make your code non-portable to other database. See #8955 for an issue discussing this at the ADO.NET level. Transactions Basic transactions Transactions can be started by calling the standard ADO.NET method NpgsqlConnection.BeginTransaction(): await using var connection = await dataSource.OpenConnectionAsync(); await using var transaction = await connection.BeginTransactionAsync(); await using var command1 = new NpgsqlCommand(\"...\", connection, transaction); await command1.ExecuteNonQueryAsync(); await using var command2 = new NpgsqlCommand(\"...\", connection, transaction); await command2.ExecuteNonQueryAsync(); await transaction.CommitAsync(); PostgreSQL doesn't support nested or concurrent transactions - only one transaction may be in progress at any given moment (starting a transaction while another transaction is already in progress throws an exception). Because of this, it isn't necessary to pass the NpgsqlTransaction object returned from BeginTransaction() to commands you execute - starting a transaction means that all subsequent commands will automatically participate in the transaction, until either a commit or rollback is performed. However, for maximum portability it's recommended to set the transaction on your commands. Although concurrent transactions aren't supported, PostgreSQL supports the concept of savepoints - you may set named savepoints in a transaction and roll back to them later without rolling back the entire transaction. Savepoints can be created, rolled back to, and released via NpgsqlTransaction.SaveAsync(), RollbackAsync() and Release(name) respectively. See the PostgreSQL documentation for more details.. When starting a transaction, you may optionally set the isolation level. See the docs for more details. System.Transactions and distributed transactions In addition to BeginTransactionAsync(), .NET includes System.Transactions, an alternative API for managing transactions - read the MSDN docs to understand the concepts involved. Npgsql fully supports this API, and automatically enlists if a connection is opened within an ambient TransactionScopes. When a transaction includes more than one database (or even more than one concurrent connections to the same database), the transaction is said to be distributed. .NET 7.0 brings the same distributed transaction support that .NET Framework supported, for Windows only. While Npgsql partially supports this mechanism, it does not implement the recovery parts of the distributed transaction, because of some design issues with .NET's support. While distributed transactions may work for you, it is discouraged to fully rely on them with Npgsql. Note that if you open and close connections to the same database inside an ambient transaction, without ever having two connections open at the same time, Npgsql internally reuses the same connection, avoiding the need for a distributed transaction. Batching Let's say you need to execute two SQL statements for some reason. This can naively be done as follows: await using var cmd = new NpgsqlCommand(\"INSERT INTO table (col1) VALUES ('foo')\", conn); await cmd.ExecuteNonQueryAsync(); cmd.CommandText = \"SELECT * FROM table\"; await using var reader = await cmd.ExecuteReaderAsync(); The above code needlessly performs two roundtrips to the database: your program will not send the SELECT until after the INSERT has completed and confirmation for that has been received. Network latency can make this very inefficient: as the distance between your .NET client and PostgreSQL increases, the time spent waiting for packets to cross the network can severely impact your application's performance. Instead, you can ask Npgsql to send the two SQL statements in a single roundtrip, by using batching: await using var batch = new NpgsqlBatch(conn) { BatchCommands = { new(\"INSERT INTO table (col1) VALUES ('foo')\"), new(\"SELECT * FROM table\") } }; await using var reader = await batch.ExecuteReaderAsync(); An NpgsqlBatch simply contains a list of NpgsqlBatchCommands, each of which has a CommandText and a list of parameters (much like an NpgsqlCommand). All statements and parameters are efficiently packed into a single packet - when possible - and sent to PostgreSQL. Note If you haven't started an explicit transaction with BeginTransaction(), a batch is automatically wrapped in an implicit transaction. That is, if a statement within the batch fails, all later statements are skipped and the entire batch is rolled back. Legacy batching Prior to Npgsql 6.0, NpgsqlBatch did not yet exist, and batching could be done as follows: await using var cmd = new NpgsqlCommand(\"INSERT INTO table (col1) VALUES ('foo'); SELECT * FROM table\", conn); await using var reader = await cmd.ExecuteReaderAsync(); This packs multiple SQL statements into the CommandText of a single NpgsqlCommand, delimiting them with semi-colons. This technique is still supported, and can be useful when porting database code from other database. However, legacy batching is generally discouraged since it isn't natively supported by PostgreSQL, forcing Npgsql to parse the SQL to find semicolons. This is similar to named parameter placeholders, see this section for more details. Stored functions and procedures PostgreSQL supports stored (or server-side) functions, and since PostgreSQL 11 also stored procedures. These can be written in SQL (similar to views), or in PL/pgSQL (PostgreSQL's procedural language), PL/Python or several other server-side languages. Once a function or procedure has been defined, calling it is a simple matter of executing a regular command: // For functions using var cmd = new NpgsqlCommand(\"SELECT my_func(1, 2)\", conn); using var reader = cmd.ExecuteReader(); // For procedures using var cmd = new NpgsqlCommand(\"CALL my_proc(1, 2)\", conn); using var reader = cmd.ExecuteReader(); You can replace the parameter values above with regular placeholders (e.g. $1), just like with a regular query. CommandType.StoredProcedure Warning Starting with Npgsql 7.0, CommandType.StoredProcedure now invokes stored procedures, and not function as before. See the release notes for more information and how to opt out of this change. In some other databases, calling a stored procedures involves setting the command's CommandType: using var command1 = new NpgsqlCommand(\"my_procedure\", connection) { CommandType = CommandType.StoredProcedure, Parameters = { new() { Value = 8 } } }; await using var reader = await command1.ExecuteReaderAsync(); Npgsql supports this mainly for portability, but this style of calling has no advantage over the regular command shown above. When CommandType.StoredProcedure is set, Npgsql will simply generate the appropriate CALL my_procedure($1) for you, nothing more. Unless you have specific portability requirements, it is recommended you simply avoid CommandType.StoredProcedure and construct the SQL yourself. Be aware that CommandType.StoredProcedure generates a CALL command, which is suitable for invoking stored procedures and not functions. Versions of Npgsql prior to 7.0 generated a SELECT command suitable for functions, and this legacy behavior can be enabled; see the 7.0 release notes Note that if CommandType.StoredProcedure is set and your parameter instances have names, Npgsql generates parameters with named notation: SELECT my_func(p1 => 'some_value'). This means that your NpgsqlParameter names must match your PostgreSQL procedure or function parameters, or the call will fail. If you omit the names on your NpgsqlParameters, positional notation will be used instead. Note that positional parameters must always come before named ones. See the PostgreSQL docs for more info. Function in/out parameters In SQL Server (and possibly other databases), functions can have output parameters, input/output parameters, and a return value, which can be either a scalar or a table (TVF). To call functions with special parameter types, the Direction property must be set on the appropriate DbParameter. PostgreSQL functions, on the hand, always return a single table - they can all be considered TVFs. Somewhat confusingly, PostgreSQL does allow your functions to be defined with input/and output parameters: CREATE FUNCTION dup(in int, out f1 int, out f2 text) AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE SQL; However, the above syntax is nothing more than a definition of the function's resultset, and is identical to the following (see the PostgreSQL docs): CREATE FUNCTION dup(int) RETURNS TABLE(f1 int, f2 text) AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE SQL; In other words, PostgreSQL functions don't have output parameters that are distinct from the resultset they return - output parameters are just a syntax for describing that resultset. Because of this, on the Npgsql side there's no need to think about output (or input/output) parameters: simply invoke the function and process its resultset just like you would any regular resultset. However, to help portability, Npgsql does provide support for output parameters as follows: using (var cmd = new NpgsqlCommand(\"SELECT my_func()\", conn)) { cmd.Parameters.Add(new NpgsqlParameter(\"p_out\", DbType.String) { Direction = ParameterDirection.Output }); cmd.ExecuteNonQuery(); Console.WriteLine(cmd.Parameters[0].Value); } When Npgsql sees a parameter with ParameterDirection.Output (or InputOutput), it will simply search the function's resultset for a column whose name matches the parameter, and copy the first row's value into the output parameter. This provides no value whatsoever over processing the resultset yourself, and is discouraged - you should only use output parameters in Npgsql if you need to maintain portability with other databases which require it."
  },
  "doc/compatibility.html": {
    "href": "doc/compatibility.html",
    "title": "Compatibility Notes | Npgsql Documentation",
    "keywords": "Compatibility Notes This page centralizes Npgsql's compatibility status with PostgreSQL and other components, and documents some important gotchas. PostgreSQL We aim to be compatible with all currently supported PostgreSQL versions, which means 5 years back. Earlier versions may still work but we don't perform continuous testing on them or commit to resolving issues on them. ADO.NET Npgsql is an ADO.NET-compatible provider, so it has the same APIs as other .NET database drivers and should behave the same. Please let us know if you notice any non-standard behavior. NativeAOT and trimming NativeAOT allows using ahead-of-time compilation to publish a fully self-contained application that has been compiled to native code. Native AOT apps have faster startup time and smaller memory footprints, and thanks to trimming can also have a much smaller size footprint on disk. Starting with version 8.0, Npgsql is fully compatible with NativeAOT and trimming. The majority of features are compatible with NativeAOT/trimming and can be used without issues, and most applications using Npgsql can be used as-is with NativeAOT/trimming without any changes. A few features which are incompatible require an explicit code opt-in, which generates a warning if used with NativeAOT/trimming enabled. .NET Framework/.NET Core/mono Npgsql 4.* targets .NET Framework 4.6.1, as well as .NET Standard 2.0 which allows it to run on .NET Core. It is also tested and runs well on mono. Npgsql 5.* targets .NET Standard 2.0 and .NET 5. Starting with this version, we no longer run regression tests on .NET Framework and mono. In addition, the Visual Studio extension (VSIX) and the MSI GAC installer have been discontinued. pgbouncer Npgsql works well with PgBouncer, but there are some quirks to be aware of. In many cases, you'll want to turn off Npgsql's internal connection pool by specifying Pooling=false on the connection string. If you decide to keep Npgsql pooling on along with PgBouncer, and are using PgBouncer's transaction or statement mode, then you need to specify No Reset On Close=true on the connection string. This disables Npgsql's connection reset logic (DISCARD ALL), which gets executed when a connection is returned to Npgsql's pool, and which makes no sense in these modes. Prior to version 3.1, Npgsql sends the statement_timeout startup parameter when it connects, but this parameter isn't supported by pgbouncer. You can get around this by specifying CommandTimeout=0 on the connection string, and then manually setting the CommandTimeout property on your NpgsqlCommand objects. Version 3.1 no longer sends statement_timeout. PgBouncer below 1.12 doesn't support SASL authentication. Amazon Redshift Amazon Redshift is a cloud-based data warehouse originally based on PostgreSQL 8.0.2. In addition, due to its nature some features have been removed and others changed in ways that make them incompatible with PostgreSQL. We try to support Redshift as much as we can, please let us know about issues you run across. First, check out Amazon's page about Redshift and PostgreSQL which contains lots of useful compatibility information. Additional known issues: If you want to connect over SSL, your connection string must contain Server Compatibility Mode=Redshift, otherwise you'll get a connection error about ssl_renegotiation_limit. Entity Framework with database-computed identity values don't work with Redshift, since it doesn't support sequences (see issue #544). DigitalOcean Managed Database DigitalOcean's Managed Database services requires you to connect to PostgreSQL over SSL. Unfortunately when you enable it in your connection string, you will get the same error regarding ssl_renegotiation_limit as Amazon Redshift. The Redshift compatibility mode setting resolves the issue on DigitalOcean."
  },
  "doc/connection-string-parameters.html": {
    "href": "doc/connection-string-parameters.html",
    "title": "Connection String Parameters | Npgsql Documentation",
    "keywords": "Connection String Parameters To connect to a database, the application provides a connection string which specifies parameters such as the host, the username, the password, etc. Connection strings have the form keyword1=value; keyword2=value; and are case-insensitive. Values containing special characters (e.g. semicolons) can be double-quoted. For more information, see the official doc page on connection strings. Below are the connection string parameters which Npgsql understands, as well as some standard PostgreSQL environment variables. Basic connection Parameter Description Default Host Specifies the host name - and optionally port - on which PostgreSQL is running. Multiple hosts may be specified, see the docs for more info. If the value begins with a slash, it is used as the directory for the Unix-domain socket (specifying a Port is still required). Required Port The TCP port of the PostgreSQL server. 5432 Database The PostgreSQL database to connect to. Same as Username Username The username to connect with. If not specified, the OS username will be used. PGUSER Password The password to connect with. Not required if using GSS/SSPI. PGPASSWORD Passfile Path to a PostgreSQL password file (PGPASSFILE), from which the password is taken. PGPASSFILE Security and encryption Parameter Description Default SSL Mode Controls whether SSL is used, depending on server support. See docs for possible values and more info. Prefer Trust Server Certificate Whether to trust the server certificate without validating it. See docs for more info. false SSL Certificate Location of a client certificate to be sent to the server. See docs. PGSSLCERT SSL Key Location of a client key for a client certificate to be sent to the server. PGSSLKEY SSL Password Password for a key for a client certificate. Root Certificate Location of a CA certificate used to validate the server certificate. PGSSLROOTCERT Check Certificate Revocation Whether to check the certificate revocation list during authentication. false Channel Binding Control whether channel binding is used when authenticating with SASL. Introduced in 8.0. Prefer Persist Security Info Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. false Kerberos Service Name The Kerberos service name to be used for authentication. See docs for more info. postgres Include Realm The Kerberos realm to be used for authentication. See docs for more info. Include Error Detail When enabled, PostgreSQL error and notice details are included on PostgresException.Detail and PostgresNotice.Detail. These can contain sensitive data. false Log Parameters When enabled, parameter values are logged when commands are executed. false Pooling Parameter Description Default Pooling Whether connection pooling should be used. true Minimum Pool Size The minimum connection pool size. 0 Maximum Pool Size The maximum connection pool size. 100 since 3.1, 20 previously Connection Idle Lifetime The time (in seconds) to wait before closing idle connections in the pool if the count of all connections exceeds Minimum Pool Size. Introduced in 3.1. 300 Connection Pruning Interval How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime (see Connection Idle Lifetime). Introduced in 3.1. 10 Connection Lifetime The total maximum lifetime of connections (in seconds). Connections which have exceeded this value will be destroyed instead of returned from the pool. This is useful in clustered configurations to force load balancing between a running server and a server just brought online. 0 (disabled) Timeouts and keepalive Parameter Description Default Timeout The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. 15 Command Timeout The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Set to zero for infinity. 30 Cancellation Timeout The time to wait (in milliseconds) while trying to read a response for a cancellation request for a timed out or cancelled query, before terminating the attempt and generating an error. -1 skips the wait, 0 means infinite wait. Introduced in 5.0. 2000 Keepalive The number of seconds of connection inactivity before Npgsql sends a keepalive query. 0 (disabled) Tcp Keepalive Whether to use TCP keepalive with system defaults if overrides isn't specified. false Tcp Keepalive Time The number of seconds of connection inactivity before a TCP keepalive query is sent. Use of this option is discouraged, use KeepAlive instead if possible. 0 (disabled) Tcp Keepalive Interval The interval, in seconds, between when successive keep-alive packets are sent if no acknowledgement is received. Tcp KeepAlive Time must be non-zero as well. value of Tcp Keepalive Time Performance Parameter Description Default Max Auto Prepare The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero disables automatic preparation. 0 Auto Prepare Min Usages The minimum number of usages an SQL statement is used before it's automatically prepared. 5 Read Buffer Size Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database. 8192 Write Buffer Size Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database. 8192 Socket Receive Buffer Size Determines the size of socket receive buffer. System-dependent Socket Send Buffer Size Determines the size of socket send buffer. System-dependent No Reset On Close Improves performance in some cases by not resetting the connection state when it is returned to the pool, at the cost of leaking state. Use only if benchmarking shows a performance improvement false Failover and load balancing For more information, see the dedicated docs page. Parameter Description Default Target Session Attributes Determines the preferred PostgreSQL target server type. PGTARGETSESSIONATTRS, Any Load Balance Hosts Enables balancing between multiple hosts by round-robin. false Host Recheck Seconds Controls for how long the host's cached state will be considered as valid. 10 Misc Parameter Description Default Options1 Specifies any valid PostgreSQL connection options (e.g. Options=-c synchronous_commit=local). Introduced in 5.0. PGOPTIONS Application Name The optional application name parameter to be sent to the backend during connection initiation. Enlist Whether to enlist in an ambient TransactionScope. true Search Path Sets the schema search path. Client Encoding Gets or sets the client_encoding parameter. PGCLIENTENCODING, UTF8 Encoding Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data. UTF8 Timezone Gets or sets the session timezone. PGTZ EF Template Database The database template to specify when creating a database in Entity Framework. template1 EF Admin Database The database admin to specify when creating and dropping a database in Entity Framework. template1 Load Table Composites Load table composite type definitions, and not just free-standing composite types. false Array Nullability Mode Configure the way arrays of value types are returned when requested as object instances. Possible values are: Never (arrays of value types are always returned as non-nullable arrays), Always (arrays of value types are always returned as nullable arrays) and PerInstance (the type of array that gets returned is determined at runtime). Never 1The Options connection string parameter is essentially the string of command line options that get passed to the postgres program when the process is started. It is most commonly used to set named run-time parameters via the -c option but other options can be used too (although not all of them make sense in that context). Setting multiple options is possible by separating them with a space character. Space and backslash characters in option values need to be escaped by prefixing a backslash character. Example: Options=-c default_transaction_isolation=serializable -c default_transaction_deferrable=on -c foo.bar=My\\\\ Famous\\\\\\\\Thing Compatibility Parameter Description Default Server Compatibility Mode A compatibility mode for special PostgreSQL server types. Currently \"Redshift\" is supported, as well as \"NoTypeLoading\", which will bypass the normal type loading mechanism from the PostgreSQL catalog tables and supports a hardcoded list of basic types. none Obsolete Parameter Description Default Internal Command Timeout The time to wait (in seconds) while trying to execute an internal command before terminating the attempt and generating an error. -1 uses CommandTimeout, 0 means no timeout. -1 Environment variables In addition to the connection string parameters above, Npgsql also recognizes the standard PostgreSQL environment variables below. This helps Npgsql-based applications behave similar to other, non-.NET PostgreSQL client applications. The PostgreSQL doc page on environment variables recognized by libpq can be found here. Environment variable Description PGUSER Behaves the same as the user connection parameter. PGPASSWORD Behaves the same as the password connection parameter. Use of this environment variable is not recommended for security reasons, as some operating systems allow non-root users to see process environment variables via ps; instead consider using a password file (see Section 33.15). PGPASSFILE Behaves the same as the passfile connection parameter. PGSSLCERT Behaves the same as the sslcert connection parameter. PGSSLKEY Behaves the same as the sslkey connection parameter. PGSSLROOTCERT Behaves the same as the sslrootcert connection parameter. PGCLIENTENCODING Behaves the same as the client_encoding connection parameter. PGTZ Sets the default time zone. (Equivalent to SET timezone TO ....) PGOPTIONS Behaves the same as the options connection parameter."
  },
  "doc/contributing.html": {
    "href": "doc/contributing.html",
    "title": "Contributing to Npgsql | Npgsql Documentation",
    "keywords": "Contributing to Npgsql As a general rule, Npgsql makes no attempt to validate what it sends to PostgreSQL. For all cases where PostgreSQL would simply return a reasonable error, we prefer that to happen rather than checking replicating validation checks client-side."
  },
  "doc/copy.html": {
    "href": "doc/copy.html",
    "title": "COPY | Npgsql Documentation",
    "keywords": "COPY PostgreSQL has a feature allowing efficient bulk import or export of data to and from a table. This is usually a much faster way of getting data in and out of a table than using INSERT and SELECT. See documentation for the COPY command for more details. Npgsql supports three COPY operation modes: binary, text and raw binary. Binary COPY This mode uses the efficient PostgreSQL binary format to transfer data in and out of the database. The user uses an API to read and write rows and fields, which Npgsql decodes and encodes. When you've finished, you must call Complete() to save the data; not doing so will cause the COPY operation to be rolled back when the writer is disposed (this behavior is important in case an exception is thrown). Warning It is the your responsibility to read and write the correct type! If you use COPY to write an int32 into a string field you may get an exception, or worse, silent data corruption. It is also highly recommended to use the overload of Write() which accepts an NpgsqlDbType, allowing you to unambiguously specify exactly what type you want to write. Test your code thoroughly. // Import two columns to table data using (var writer = conn.BeginBinaryImport(\"COPY data (field_text, field_int2) FROM STDIN (FORMAT BINARY)\")) { writer.StartRow(); writer.Write(\"Hello\"); writer.Write(8, NpgsqlDbType.Smallint); writer.StartRow(); writer.Write(\"Goodbye\"); writer.WriteNull(); writer.Complete(); } // Export two columns to table data using (var reader = Conn.BeginBinaryExport(\"COPY data (field_text, field_int2) TO STDOUT (FORMAT BINARY)\")) { reader.StartRow(); Console.WriteLine(reader.Read<string>()); Console.WriteLine(reader.Read<int>(NpgsqlDbType.Smallint)); reader.StartRow(); reader.Skip(); Console.WriteLine(reader.IsNull); // Null check doesn't consume the column Console.WriteLine(reader.Read<int>()); reader.StartRow(); // Last StartRow() returns -1 to indicate end of data } Text COPY This mode uses the PostgreSQL text or csv format to transfer data in and out of the database. It is the user's responsibility to format the text or CSV appropriately, Npgsql simply provides a TextReader or Writer. This mode is less efficient than binary copy, and is suitable mainly if you already have the data in a CSV or compatible text format and don't care about performance. using (var writer = conn.BeginTextImport(\"COPY data (field_text, field_int4) FROM STDIN\")) { writer.Write(\"HELLO\\t1\\n\"); writer.Write(\"GOODBYE\\t2\\n\"); } using (var reader = conn.BeginTextExport(\"COPY data (field_text, field_int4) TO STDOUT\")) { Console.WriteLine(reader.ReadLine()); Console.WriteLine(reader.ReadLine()); } Raw Binary COPY In this mode, data transfer is binary, but Npgsql does no encoding or decoding whatsoever - data is exposed as a raw .NET Stream. This mode makes sense only for bulk data and restore a table: the table is saved as a blob, which can later be restored. If you need to actually make sense of the data, you should be using regular binary mode instead (not raw). Example: int len; var data = new byte[10000]; // Export table1 to data array using (var inStream = conn.BeginRawBinaryCopy(\"COPY table1 TO STDOUT (FORMAT BINARY)\")) { // We assume the data will fit in 10000 bytes, in real usage you would read repeatedly, writine to a file. len = inStream.Read(data, 0, data.Length); } // Import data array into table2 using (var outStream = conn.BeginRawBinaryCopy(\"COPY table2 FROM STDIN (FORMAT BINARY)\")) { outStream.Write(data, 0, len); } Cancel Import operations can be cancelled at any time by disposing NpgsqlBinaryImporter without calling Complete() on it. Export operations can be cancelled as well, by calling Cancel(). Other See the CopyTests.cs test fixture for more usage samples."
  },
  "doc/dev/tests.html": {
    "href": "doc/dev/tests.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Overview Npgsql has an extensive test suite to guard against regressions. The test suite is run on the official build server for the .NET Framework and .NET Core with all supported PostgreSQL backends. Continuous integration results are publicly available via Github Actions. Getting Started Setup PostgreSQL The Npgsql test suite requires a PostgreSQL backend for tests to run. By default, the test suite expects PostgreSQL to be running on the local machine with the default port (5432). Install PostgreSQL: https://www.postgresql.org/download Start the PostgreSQL backend. Create the npgsql_tests account By default, the test suite expects an account named npgsql_tests with a password of npgsql_tests. This account is used by the test suite to create a database named npgsql_tests and run the tests. $ psql -h localhost -U postgres postgres=# CREATE USER npgsql_tests PASSWORD 'npgsql_tests' SUPERUSER; postgres=# CREATE DATABASE npgsql_tests OWNER npgsql_tests; Note: superuser access is required to create and drop test databases, load extensions (e.g. hstore, postgis), etc. Clone the repository cd ~ git clone git@github.com:npgsql/npgsql.git (use ssh) git clone https://github.com/npgsql/npgsql.git (use https) Run the test suite cd ~/npgsql dotnet test ./test/Npgsql.Tests dotnet test ./test/Npgsql.PluginTests dotnet test ./test/Npgsql.Benchmarks"
  },
  "doc/dev/type-representations.html": {
    "href": "doc/dev/type-representations.html",
    "title": "PostgreSQL Types | Npgsql Documentation",
    "keywords": "Overview The following are notes by Emil Lenngren on PostgreSQL wire representation of types: bool: text: t or f binary: a byte: 1 or 0 bytea: text: either \\x followed by hex-characters (lowercase by default), or plain characters, where non-printable characters (between 0x20 and 0x7e, inclusive) are written as \\nnn (octal) and \\ is written as \\\\ binary: the bytes as they are char: This type holds a single char/byte. (Not to be confused with bpchar (blank-padded char) which is PostgreSQL's alias to the SQL standard's char). The char may be the null-character text: the char as a byte, encoding seems to be ignored binary: the char as a byte name: A null-padded string of NAMEDATALEN (currently 64) bytes (the last byte must be a null-character). Used in pg catalog. text: the name as a string binary: the name as a string int2/int4/int8: text: text representation in base 10 binary: binary version of the integer int2vector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as int2[] oidvector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as oid[] regproc: internally just an OID (UInt32) text: -, name of procedure, or numeric if not found binary: only the OID in binary regprocedure/regoper/regoperator/regclass/regconfig/regdictionary: similar to regproc text: text: the string as it is binary: the string as it is oid: A 32-bit unsigned integer used for internal object identification. text: the text-representation of this integer in base 10 binary: the UInt32 tid: tuple id Internally a tuple of a BlockNumber (UInt32) and an OffsetNumber (UInt16) text: (blockNumber,offsetNumber) binary: the block number in binary followed by offset number in binary xid: transaction id Internally just a TransactionId (UInt32) text: the number binary: the number in binary cid: command id Internally just a CommandId (UInt32) text: the number binary: the number in binary json: json text: the json an text binary: the json as text jsonb: json internally stored in an efficient binary format text: the json as text binary: An Int32 (version number, currently 1), followed by data (currently just json as text) xml: Xml. It is probably most efficient to use the text format, especially when receiving from client. text: the xml as text (when sent from the server: encoding removed, when receiving: assuming database encoding) binary: the xml as text (when sent from the server: in the client's specified encoding, when receiving: figures out itself) pg_node_tree: used as type for the column typdefaultbin in pg_type does not accept input text: text binary: text smgr: storage manager can only have the value \"magnetic disk\" text: magnetic disk binary: not available point: A tuple of two float8 text: (x,y) The floats are interpreted with the C strtod function. The floats are written with the snprintf function, with %.*g format. NaN/-Inf/+Inf can be written, but not interpretability depends on platform. The extra_float_digits setting is honored. For linux, NaN, [+-]Infinity, [+-]Inf works, but not on Windows. Windows also have other output syntax for these special numbers. (1.#QNAN for example) binary: the two floats lseg: A tuple of two points text: [(x1,y1),(x2,y2)] see point for details binary: the four floats in the order x1, y1, x2, y2 path: A boolean whether the path is opened or closed + a vector of points. text: [(x1,y1),...] for open path and ((x1,y1),...) for closed paths. See point for details. binary: first a byte indicating open (0) or close (1), then the number of points (Int32), then a vector of points box: A tuple of two points. The coordinates will be reordered so that the first is the upper right and the second is the lower left. text: (x1,y1),(x2,y2) see point for details binary: the four floats in the order x1, y1, x2, y2 (doesn't really matter since they will be reordered) polygon: Same as path but with two differences: is always closed and internally stores the bounding box. text: same as closed path binary: the number of points (Int32), then a vector of points line (version 9.4): Ax + By + C = 0. Stored with three float8. Constraint: A and B must not both be zero (only checked on text input, not binary). text: {A,B,C} see point for details about the string representation of floats. Can also use the same input format as a path with two different points, representing the line between those. binary: the three floats circle: <(x,y),r> (center point and radius), stored with three float8. text: <(x,y),r> see point for details about the string representation of floats. binary: the three floats x, y, r in that order float4/float8: text: (leading/trailing whitespace is skipped) interpreted with the C strtod function, but since it has problems with NaN, [+-]Infinity, [+-]Inf, those strings are identified (case-insensitively) separately. when outputting: NaN, [+-]Infinity is treated separately, otherwise the string is printed with snprintf %.*g and the extra_float_digits setting is honored. binary: the float abstime: A unix timestamp stored as a 32-bit signed integer with seconds-precision (seconds since 1970-01-01 00:00:00), in UTC Has three special values: Invalid (2^31-1), infinity (2^31-3), -infinity (-2^31) text: same format as timestamptz, or \"invalid\", \"infinity\", \"-infinity\" binary: Int32 reltime: A time interval with seconds-precision (stored as an 32-bit signed integer) text: same as interval binary: Int32 tinterval: Consists of a status (Int32) and two abstimes. Status is valid (1) iff both abstimes are valid, else 0. Note that the docs incorrectly states that ' is used as quote instead of \" text: [\"<abstime>\" \"<abstime>\"] binary: Int32 (status), Int32 (abstime 1), Int32 (abstime 2) unknown: text: text binary: text money: A 64-bit signed integer. For example, $123.45 is stored as the integer 12345. Number of fraction digits is locale-dependent. text: a locale-depedent string binary: the raw 64-bit integer macaddr: 6 bytes text: the 6 bytes in hex (always two characters per byte) separated by : binary: the 6 bytes appearing in the same order as when written in text inet/cidr: Struct of Family (byte: ipv4=2, ipv6=3), Netmask (byte with number of bits in the netmask), Ipaddr bytes (16) Text: The IP-address in text format and /netmask. /netmask is omitted in inet if the netmask is the whole address. Binary: family byte, netmask byte, byte (cidr=1, inet=0), number of bytes in address, bytes of the address aclitem: Access list item used in pg_class Text: Something like postgres=arwdDxt/postgres Binary: not available bpchar: Blank-padded char. The type modifier is used to blank-pad the input. text: text binary: text varchar: Variable-length char. The type modifier is used to check the input's length. text: text binary: text date: A signed 32-bit integer of a date. 0 = 2000-01-01. Infinity: INT_MAX, -Infinity: INT_MIN Text: Date only using the specified date style Binary: Int32 time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer timetz: A struct of Time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. Zone: A signed 32-bit integer representing the zone (in seconds). Note that the sign is inverted. So GMT+1h is stored as -1h. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer followed by the 32-bit integer timestamp: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 Infinity is LONG_MAX and -Infinity is LONG_MIN (Infinity would be 294277-01-09 04:00:54.775807) Earliest possible timestamp is 4714-11-24 00:00:00 BC. Even earlier would be possible, but due to internal calculations those are forbidden. text: dependent on date style binary: the 64-bit integer timestamptz: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 UTC. (Time zone is not stored). Infinity is LONG_MAX and -Infinity is LONG_MIN text: first converted to the time zone in the db settings, then printed according to the date style binary: the 64-bit integer interval: A struct of Time (Int64): all time units other than days, months and years (microseconds) Day (Int32): days, after time for alignment Month (Int32): months and years, after time for alignment text: Style dependent, but for example: \"-11 mons +15435 days -11111111:53:00\" binary: all fields in the struct bit/varbit: First a signed 32-bit integer containing the number of bits (negative length not allowed). Then all the bits in big end first. So a varbit of length 1 has the first (and only) byte set to either 0x80 or 0x00. Last byte is assumed (and is automatically zero-padded in recv) to be zero-padded. text: when sending from backend: all the bits, written with 1s and 0s. when receiving from client: (optionally b or B followed by) all the bits as 1s and 0s, or a x or X followed by hexadecimal digits (upper- or lowercase), big endian first. binary: the 32-bit length followed by the bytes containing the bits numeric: A variable-length numeric value, can be negative. text: NaN or first - if it is negative, then the digits with . as decimal separator binary: first a header of 4 16-bit integers: number of digits in the digits array that follows (unsigned integer), weight of the first digit (10000^weight), can be both negative, positive or 0, sign: negative=0x4000, positive=0x0000, NaN=0xC000 dscale: number of digits (in base 10) to print after the decimal separator then the array of digits: The digits are stored in base 10000, where each digit is a 16-bit integer. Trailing zeros are not stored in this array, to save space. The digits are stored such that, if written as base 10000, the decimal separator can be inserted between two digits in base 10000, i.e. when this is to be printed in base 10, only the first digit in base 10000 can (possibly) be printed with less than 4 characters. Note that this does not apply for the digits after the decimal separator; the digits should be printed out in chunks of 4 characters and then truncated with the given dscale. refcursor: uses the same routines as text record: Describes a tuple. Is also the \"base class\" for composite types (i.e. it uses the same i/o functions). text: ( followed by a list of comma-separated text-encoded values followed by ). Empty element means null. Quoted with \" and \" if necessary. \" is escaped with \"\" and \\ is escaped with \\\\ (this differs from arrays where \" is escaped with \\\"). Must be quoted if it is an empty string or contains one of \"\\,() or a space. binary: First a 32-bit integer with the number of columns, then for each column: An OID indicating the type of the column The length of the column (32-bit integer), or -1 if null The column data encoded as binary cstring: text/binary: all characters are sent without the trailing null-character void: Used for example as return value in SELECT * FROM func_returning_void() text: an empty string binary: zero bytes uuid: A 16-byte uuid. text: group of 8, 4, 4, 4, 12 hexadecimal lower-case characters, separated by -. The first byte is written first. It is allowed to surround it with {}. binary: the 16 bytes txid_snapshot: (txid is a UInt64) A struct of UInt32 nxip (size of the xip array) txid xmin (no values in xip is smaller than this) txid xmax (no values in xip is larger than or equal this) txid[] xip (is ordered in ascending order) text: xmin:xmax:1,2,3,4 binary: all fields in the structure tsvector: Used for text searching. Example of tsvector: 'a':1,6,10 'on':5 'and':8 'ate':9A 'cat':3 'fat':2,11 'mat':7 'rat':12 'sat':4 Max length for each lexeme string is 2046 bytes (excluding the trailing null-char) The words are sorted when parsed, and only written once. Positions are also sorted and only written once. For some reason, the unique check does not seem to be made for binary input, only text input... text: As seen above. ' is escaped with '' and \\ is escaped with \\\\. binary: UInt32 number of lexemes for each lexeme: lexeme text in client encoding, null-terminated UInt16 number of positions for each position: UInt16 WordEntryPos, where the most significant 2 bits is weight, and the 14 least significant bits is pos (can't be 0). Weights 3,2,1,0 represent A,B,C,D tsquery: A tree with operands and operators (&, |, !). Operands are strings, with optional weight (bitmask of ABCD) and prefix search (yes/no, written with *). text: the tree written in infix notation. Example: ( 'abc':*B | 'def' ) & !'ghi' binary: the tree written in prefix notation: First the number of tokens (a token is an operand or an operator). For each token: UInt8 type (1 = val, 2 = oper) followed by For val: UInt8 weight + UInt8 prefix (1 = yes / 0 = no) + null-terminated string, For oper: UInt8 oper (1 = not, 2 = and, 3 = or, 4 = phrase). In case of phrase oper code, an additional UInt16 field is sent (distance value of operator). Default is 1 for <->, otherwise the n value in '<n>'. enum: Simple text gtsvector: GiST for tsvector. Probably internal type. int4range/numrange/tsrange/tstzrange/daterange/int8range and user-defined range types: /* A range's flags byte contains these bits: */ #define RANGE_EMPTY 0x01 /* range is empty */ #define RANGE_LB_INC 0x02 /* lower bound is inclusive */ #define RANGE_UB_INC 0x04 /* upper bound is inclusive */ #define RANGE_LB_INF 0x08 /* lower bound is -infinity */ #define RANGE_UB_INF 0x10 /* upper bound is +infinity */ #define RANGE_LB_NULL 0x20 /* lower bound is null (NOT USED) */ #define RANGE_UB_NULL 0x40 /* upper bound is null (NOT USED) */ #define RANGE_CONTAIN_EMPTY 0x80/* marks a GiST internal-page entry whose * subtree contains some empty ranges */ A range has no lower bound if any of RANGE_EMPTY, RANGE_LB_INF (or RANGE_LB_NULL, not used anymore) is set. The same applies for upper bounds. text: A range with RANGE_EMPTY is just written as the string \"empty\". Inclusive bounds are written with [ and ], else ( and ) is used. The two values are comma-separated. Missing bounds are written as an empty string (without quotes). Each value is quoted with \" if necessary. Quotes are necessary if the string is either the empty string or contains \"\\,()[] or spaces. \" is escaped with \"\" and \\ is escaped with \\\\. Example: [18,21] binary: First the flag byte. Then, if has lower bound: 32-bit length + binary-encoded data. Then, if has upper bound: 32-bit length + binary-encoded data. hstore: Key/value-store. Both keys and values are strings. text: Comma-space separated string, where each item is written as \"key\"=>\"value\" or \"key\"=>NULL. \" and \\ are escaped as \\\" and \\\\. Example: \"a\"=>\"b\", \"c\"=>NULL, \"d\"=>\"q\" binary: Int32 count for each item: Int32 keylen string of the key (not null-terminated) Int32 length of item (or -1 if null) the item as a string ghstore: internal type for indexing hstore domain types: mapped types used in information_schema: cardinal_number: int4 (must be nonnegative or null) character_data: varchar sql_identifier: varchar time_stamp: timestamptz yes_or_no: varchar(3) (must be \"YES\" or \"NO\" or null) intnotnull: when an int4 is cast to this type, it is checked that the int4 is not null, but it still returns an int4 and not intnotnull..."
  },
  "doc/diagnostics/exceptions_notices.html": {
    "href": "doc/diagnostics/exceptions_notices.html",
    "title": "Exceptions, errors and notices | Npgsql Documentation",
    "keywords": "Exceptions, errors and notices Exception types Most exceptions thrown by Npgsql are either of type NpgsqlException, or wrapped by one; this allows your application to catch NpgsqlException where appropriate, for all database-related errors. Note that NpgsqlException is a sub-class of the general System.Data.DbException, so if your application uses more than one database type, you can catch that as well. When Npgsql itself encounters an error, it typically raises that as an NpgsqlException directly, possibly wrapping an inner exception. For example, if a networking error occurs while communicating with PostgreSQL, Npgsql will raise an NpgsqlException wrapping an IOException; this allow you both to identify the root cause of the problem, while still identifying it as database-related. In other cases, PostgreSQL itself will report an error to Npgsql; Npgsql raises these by throwing a PostgresException, which is a sub-class of NpgsqlException adding important contextual information on the error. Most importantly, PostgresException exposes the SqlState property, which contains the PostgreSQL error code. This value can be consulted to identify which error type occurred. When executing multiple commands via NpgsqlBatch, the BatchCommand property references the command within the batch which triggered the exception. This allows you to understand exactly what happened, and access the specific SQL which triggered the error. PostgreSQL notices Finally, PostgreSQL also raises \"notices\", which contain non-critical information on command execution. Notices are not errors: they do not indicate failure and can be safely ignored, although they may contain valuable information on the execution of your commands. Npgsql logs notices in the debug logging level. To deal with notices programmatically, Npgsql also exposes the Notice event, which you can hook into for any further processing: conn.Notice += (_, args) => Console.WriteLine(args.Notice.MessageText);"
  },
  "doc/diagnostics/logging.html": {
    "href": "doc/diagnostics/logging.html",
    "title": "Logging | Npgsql Documentation",
    "keywords": "Logging Note Starting with version 7.0, Npgsql supports standard .NET logging via Microsoft.Extensions.Logging. If you're using an earlier version of Npgsql, skip down to this section. Npgsql fully supports logging various events via the standard .NET Microsoft.Extensions.Logging package. These can help debug issues and understand what's going on as your application interacts with PostgreSQL. Console programs To set up logging in Npgsql, create your ILoggerFactory as usual, and then configure an NpgsqlDataSource with it. Any use of connections handed out by the data source will log via your provided logger factory. The following shows a minimal console application logging to the console via Microsoft.Extensions.Logging.Console: // Create a Microsoft.Extensions.Logging LoggerFactory, configuring it with the providers, // log levels and other desired configuration. var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole()); // Create an NpgsqlDataSourceBuilder, configuring it with our LoggerFactory var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"Host=localhost;Username=test;Password=test\"); dataSourceBuilder.UseLoggerFactory(loggerFactory); await using var dataSource = dataSourceBuilder.Build(); // Any connections handed out by the data source will log via the LoggerFactory: await using var connection = await dataSource.OpenConnectionAsync(); await using var command = new NpgsqlCommand(\"SELECT 1\", connection); _ = await command.ExecuteScalarAsync(); Running this program outputs the following to the console: info: Npgsql.Command[2001] Command execution completed (duration=16ms): SELECT 1 By default, Npgsql logs command executions at the Information log level, as well as various warnings and errors. To see more detailed logging, increase the log level to Debug or Trace. ASP.NET and dependency injection If you're using ASP.NET, you can use the additional Npgsql.DependencyInjection package, which provides seamless integration with dependency injection and logging: var builder = WebApplication.CreateBuilder(args); builder.Logging.AddConsole(); builder.Services.AddNpgsqlDataSource(\"Host=localhost;Username=test;Password=test\"); The AddNpgsqlDataSource arranges for a data source to be configured in the DI container, which automatically uses the logger factory configured via the standard ASP.NET means. This allows your endpoints to get injected with Npgsql connections which log to the same logger factory when used. Configuration without NpgsqlDataSource If your application doesn't use NpgsqlDataSource, you can still configure Npgsql's logger factory globally, as follows: var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole()); NpgsqlLoggingConfiguration.InitializeLogging(loggerFactory); await using var conn = new NpgsqlConnection(\"Host=localhost;Username=test;Password=test\"); conn.Execute(\"SELECT 1\"); Note that you must call InitializeLogging at the start of your program, before any other Npgsql API is used. Parameter logging By default, when logging SQL statements, Npgsql does not log parameter values, since these may contain sensitive information. You can opt into parameter logging when debugging your application: Console Program ASP.NET Program Without DbDataSource dataSourceBuilder.EnableParameterLogging(); builder.Services.AddNpgsqlDataSource( \"Host=localhost;Username=test;Password=test\", builder => builder.EnableParameterLogging()); NpgsqlLoggingConfiguration.InitializeLogging(loggerFactory, parameterLoggingEnabled: true); Warning Do not leave parameter logging enabled in production, as sensitive user information may leak into your logs. Logging in older versions of Npgsql Prior to 7.0, Npgsql had its own, custom logging API. To use this, statically inject a logging provider implementing the INpgsqlLoggingProvider interface as follows: NpgsqlLogManager.Provider = new ??? Note: you must set the logging provider before invoking any other Npgsql method, at the very start of your program. It's trivial to create a logging provider that passes log messages to whatever logging framework you use, you can find such an adapter for NLog below. ConsoleLoggingProvider Npgsql comes with one built-in logging provider: ConsoleLoggingProvider. It simply dumps all log messages with a given level or above to standard output. You can set it up by including the following line at the beginning of your application: NpgsqlLogManager.Provider = new ConsoleLoggingProvider(<min level>, <print level?>, <print connector id?>); Level defaults to NpgsqlLogLevel.Info (which will only print warnings and errors). You can also have log levels and connector IDs logged. NLogLoggingProvider (or implementing your own) The following provider is used in the Npgsql unit tests to pass log messages to NLog. You're welcome to copy-paste it into your project, or to use it as a starting point for implementing your own custom provider. class NLogLoggingProvider : INpgsqlLoggingProvider { public NpgsqlLogger CreateLogger(string name) { return new NLogLogger(name); } } class NLogLogger : NpgsqlLogger { readonly Logger _log; internal NLogLogger(string name) { _log = LogManager.GetLogger(name); } public override bool IsEnabled(NpgsqlLogLevel level) { return _log.IsEnabled(ToNLogLogLevel(level)); } public override void Log(NpgsqlLogLevel level, int connectorId, string msg, Exception exception = null) { var ev = new LogEventInfo(ToNLogLogLevel(level), \"\", msg); if (exception != null) ev.Exception = exception; if (connectorId != 0) ev.Properties[\"ConnectorId\"] = connectorId; _log.Log(ev); } static LogLevel ToNLogLogLevel(NpgsqlLogLevel level) { switch (level) { case NpgsqlLogLevel.Trace: return LogLevel.Trace; case NpgsqlLogLevel.Debug: return LogLevel.Debug; case NpgsqlLogLevel.Info: return LogLevel.Info; case NpgsqlLogLevel.Warn: return LogLevel.Warn; case NpgsqlLogLevel.Error: return LogLevel.Error; case NpgsqlLogLevel.Fatal: return LogLevel.Fatal; default: throw new ArgumentOutOfRangeException(\"level\"); } } }"
  },
  "doc/diagnostics/metrics.html": {
    "href": "doc/diagnostics/metrics.html",
    "title": "OpenTelemetry Metrics | Npgsql Documentation",
    "keywords": "OpenTelemetry Metrics Npgsql supports reporting aggregated metrics which provide snapshots on its state and activities at a given point. These can be especially useful for diagnostics issues such as connection leaks, or doing general performance analysis Metrics are reported via the standard .NET System.Diagnostics.Metrics API; see these docs for more details. The Npgsql metrics implement the experimental OpenTelemetry semantic conventions for database metrics - adding some additional useful ones - and will evolve as that specification stabilizes. Note Npgsql versions before 8.0, as well as TFMs under net6.0, emit metrics via the older Event Counters API instead of the new OpenTelemetry ones. Metrics are usually collected and processed via tools such as Prometheus, and plotted on dashboards via tools such as Grafana. Configuring .NET to emit metrics to these tools is beyond the scope of this documentation, but you can use the command-line tool dotnet-counters to quickly test Npgsql's support. To collect metrics via dotnet-counters, install the dotnet-counters tool. Then, find out your process PID, and run it as follows: dotnet counters monitor Npgsql -p <PID> dotnet-counters will now attach to your running process and start reporting continuous counter data: [Npgsql] db.client.commands.bytes_read (By / 1 sec) pool.name=CustomersDB 1,020 db.client.commands.bytes_written (By / 1 sec) pool.name=CustomersDB 710 db.client.commands.duration (s) pool.name=CustomersDB,Percentile=50 0.001 pool.name=CustomersDB,Percentile=95 0.001 pool.name=CustomersDB,Percentile=99 0.001 db.client.commands.executing ({command}) pool.name=CustomersDB 2 db.client.commands.prepared_ratio pool.name=CustomersDB 0 db.client.connections.max ({connection}) pool.name=CustomersDB 100 db.client.connections.usage ({connection}) pool.name=CustomersDB,state=idle 3 pool.name=CustomersDB,state=used 2 Note that Npgsql emits multiple dimensions with the metrics, e.g. the connection states (idle or used). In addition, an identifier for the connection pool - or data source - is emitted with every metric, allowing you to separately track e.g. multiple databases accessed in the same applications. By default, the pool.name will be the connection string, but it can be useful to give your data sources a name for easier and more consistent tracking: var builder = new NpgsqlDataSourceBuilder(\"Host=localhost;Username=test;Password=test\") { Name = \"CustomersDB\" }; await using var dataSource = builder.Build();"
  },
  "doc/diagnostics/overview.html": {
    "href": "doc/diagnostics/overview.html",
    "title": "Diagnostics overview | Npgsql Documentation",
    "keywords": "Diagnostics overview Npgsql provides several ways to analyze what's going on inside Npgsql and to diagnose performance issues. Each has its own dedicated doc page: Tracing allows collecting information on which queries are executed, including precise timing information on start, end and duration. These events can be collected in a database, searched, graphically explored and otherwise analyzed. Logging generates textual information on various events within Npgsql; log levels can be adjusted to collect low-level information, helpful for diagnosing errors. Metrics generates aggregated quantitative data, useful for tracking the performance of your application in realtime and over time (e.g. how many queries are currently being executed in a particular moment). For information on the exceptions thrown by Npgsql, and on notices produced by PostgreSQL, see this page."
  },
  "doc/diagnostics/tracing.html": {
    "href": "doc/diagnostics/tracing.html",
    "title": "Tracing with OpenTelemetry (experimental) | Npgsql Documentation",
    "keywords": "Tracing with OpenTelemetry (experimental) Note Support for tracing via OpenTelemetry has been introduced in Npgsql 6.0. The OpenTelemetry specifications for database tracing are currently experimental, so Npgsql's support may change in upcoming releases. OpenTelemetry is a widely-adopted framework for distributed observability across many languages and components; its tracing standards allow applications and libraries to emit information on activities and events, which can be exported by the application, stored and analyzed. Activities typically have start and end times, and can encompass other activities recursively; this allows you to analyze e.g. exactly how much time was spent in the database when handling a certain HTTP call. To make Npgsql emit tracing data, reference the Npgsql.OpenTelemetry NuGet package from your application, and set up tracing as follows: using var tracerProvider = Sdk.CreateTracerProviderBuilder() .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(\"npgsql-tester\")) .SetSampler(new AlwaysOnSampler()) // This optional activates tracing for your application, if you trace your own activities: .AddSource(\"MyApp\") // This activates up Npgsql's tracing: .AddNpgsql() // This prints tracing data to the console: .AddConsoleExporter() .Build(); Once this is done, you should start seeing Npgsql trace data appearing in your application's console. At this point, you can look into exporting your trace data to a more useful destination: systems such as Zipkin or Jaeger can efficiently collect and store your data, and provide user interfaces for querying and exploring it. Setting these up in your application is quite easy - simply replace the console exporter with the appropriate exporter for the chosen system. For example, Zipkin visualizes traces in the following way: In this trace, the Npgsql query (to database testdb) took around 800ms, and was nested inside the application's work1 activity, which also had another unrelated subtask1. This allows understanding the relationships between the different activities, and where time is being spent."
  },
  "doc/failover-and-load-balancing.html": {
    "href": "doc/failover-and-load-balancing.html",
    "title": "Multiple Hosts, Failover and Load Balancing | Npgsql Documentation",
    "keywords": "Multiple Hosts, Failover and Load Balancing Note The functionality described in this page was introduced in Npgsql 6.0. Npgsql 6.0 allows specifying multiple hosts in your application's connection strings, allowing various failover and load balancing scenarios to be supported without the need for any additional component such as pgpool or pgbouncer. This typically requires setting up replication between your multiple PostgreSQL servers, to keep your standby servers in sync with your primary; this can be done with the help of PostgreSQL logical or physical replication, and some cloud providers provide this out of the box. Whatever the solution chosen, it's important to understand that this is out of Npgsql's scope - Npgsql is only responsible for connecting to your multiple servers as described below, and not for keeping your servers in sync. Multiple servers and failover Npgsql allows you to specify multiple servers in your connection string as follows: Npgsql 7.0+ Older versions var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"Host=server1,server2;Username=test;Password=test\"); await using var dataSource = dataSourceBuilder.BuildMultiHost(); await using var connection = await dataSource.OpenConnectionAsync(); await using var connection = new NpgsqlConnection(\"Host=server1,server2;Username=test;Password=test\"); Different ports may be specified per host with the standard colon syntax: Host=server1:5432,server2:5433. By default, Npgsql will try to connect to the servers in the order in which they were specified. In the above example, server2 is only used if a connection could not be established to server1 (or if the connection pool for server1 has been exhausted). This allows a simple failover setup, where Npgsql always connects to a single, primary server, but can connect to a standby in case the primary is down; this improves the reliability of your application. In this configuration, we sometimes refer to the standby as \"warm\" - it is always up and in sync with the primary, but is only used when the primary is down. Note Using failover as described above does not mean you don't have to worry about errors when your primary server is down. When opening a connection, you may get a broken connection from the pool: Npgsql has no way of knowing whether the connection is working without actually executing something on it, which would negate the perf advantages of pooling. Also, once you have an open connection, Npgsql will never implicitly retry a failed command on a failover server, since that command may be in a transaction (or otherwise depend on some state in the first connection). In other words, you must always be prepared to catch I/O-related exceptions when interacting with the database, and possibly implement a retrying strategy, opening a new connection and re-executing the series of commands. Specifying server types In the failover scenario above, if server1 goes down, server2 is typically promoted to being the new primary. However, server1 may be brought back up and assume the role of standby - the servers will have switched roles - and Npgsql will continue to connect to server1 whenever possible. If you need to connect to a specific server type - e.g. to the primary in order to perform writes - you can do so as follows: Npgsql 7.0+ Older versions await using var connection = await dataSource.OpenConnectionAsync(TargetSessionAttributes.Primary); This makes Npgsql return connections only to the primary server, regardless of where it's located in the host list you provide. You can also get a separate data source which will only return connections to a specific server type. For example, you can create a primary-only data sources in your application startup, and use that data source as usual: // At startup: _primaryDataSource = dataSource.WithTargetSession(TargetSessionAttributes.Primary); // ... and wherever you need a connection: await using var connection = await _primaryDataSource.OpenConnectionAsync(); await using var connection = new NpgsqlConnection(\"Host=server1,server2;Username=test;Password=test;Target Session Attributes=primary\"); This makes Npgsql return connections only to the primary server, regardless of where it's located in the host list you provide. Load distribution Going a step further, it's important to understand that applications don't always make use of the database in the same way; some parts of your application only need to read data from the database, while others need to write data. If you have one or more standby servers, Npgsql can dispatch read-only queries to those servers to reduce the load on your primary. While the failover setup described above improves reliability, this technique improves performance. You can tell Npgsql that you prefer a connection to a standby: Npgsql 7.0+ Older versions // At startup: _preferStandbyDatASource = dataSource.WithTargetSession(TargetSessionAttributes.PreferStandby); // ... and wherever you need a connection: await using var connection = await _preferStandbyDatASource.OpenConnectionAsync(); await using var connection = new NpgsqlConnection(\"Host=server1,server2;Username=test;Password=test;Target Session Attributes=prefer-standby\"); With \"prefer standby\", as long as at least one standby server is available, Npgsql returns connections to that server. However, if all standby servers are down (or have exhausted their Max Pool Size setting), a connection to the primary is returned instead. The following options are supported for the target session attributes: Npgsql 7.0+ Older versions Option Description Any Any successful connection is acceptable. Primary Server must not be in hot standby mode (pg_is_in_recovery() must return false). Standby Server must be in hot standby mode (pg_is_in_recovery() must return true). PreferPrimary First try to find a primary server, but if none of the listed hosts is a primary server, try again in Any mode. PreferStandby First try to find a standby server, but if none of the listed hosts is a standby server, try again in Any mode. ReadWrite Session must accept read-write transactions by default (that is, the server must not be in hot standby mode and the default_transaction_read_only parameter must be off). ReadOnly Session must not accept read-write transactions by default (the converse). Option Description any Any successful connection is acceptable. primary Server must not be in hot standby mode (pg_is_in_recovery() must return false). standby Server must be in hot standby mode (pg_is_in_recovery() must return true). prefer-primary First try to find a primary server, but if none of the listed hosts is a primary server, try again in Any mode. prefer-standby First try to find a standby server, but if none of the listed hosts is a standby server, try again in Any mode. read-write Session must accept read-write transactions by default (that is, the server must not be in hot standby mode and the default_transaction_read_only parameter must be off). read-only Session must not accept read-write transactions by default (the converse). Npgsql detects whether a server is a primary or a standby by occasionally querying pg_is_in_recovery(), and whether a server is read-write or read-only by querying default_transaction_read_only - this is consistent with how PostgreSQL's libpq implements target_session_attributes. Servers are queried just before a connection is returned from the pool; the query intervals can be controlled via the Host Recheck Seconds parameter (10 seconds by default). Note If you choose to distribute load across multiple servers, make sure you understand what consistency guarantees are provided by PostgreSQL in your particular setup. In some cases, hot standbys lag behind their primary servers, and will therefore return slightly out-of-date results. This is usually OK, but if you require up-to-date results at all times, synchronous commit may provide a good solution (albeit with a performance cost). Load balancing We have seen how to select servers based on the type of workload we want to execute. However, in the above examples, Npgsql still attempts to return connections based on the host order specified in the connection string; this concentrates load on a single primary and possibly a single secondary, and doesn't balance load across multiple servers of the same type. You can specify Load Balance Hosts=true in the connection string to instruct Npgsql to load balance across all servers, by returning connections in round-robin fashion: Host=server1,server2,server3,server4,server5;Username=test;Password=test;Load Balance Hosts=true;Target Session Attributes=prefer-standby With this connection string, every time a connection is opened, Npgsql starts at a different point in the list. For example, in the 3rd connection attempt, Npgsql first tries to return a connection to server3; if that server is reachable and is a standby, it is selected. This allows spreading your (typically read-only) application load across all available servers, and can greatly improve your scalability."
  },
  "doc/faq.html": {
    "href": "doc/faq.html",
    "title": "FAQ | Npgsql Documentation",
    "keywords": "FAQ How can I call a PostgreSQL 11 stored procedure? I tried doing so with CommandType.StoredProcedure and got an error... PostgreSQL 11 stored procedures can be called, but unfortunately not with CommandType.StoredProcedure. PostgreSQL has supported stored functions for a long while, and since these have acted as replacements for non-existing procedures, Npgsql's CommandType.StoredProcedure has been implemented to invoke them; this means that CommandType.StoredProcedure translates into SELECT * FROM my_stored_function(). The new stored procedures introduce a special invocation syntax - CALL my_stored_procedure() - which is incompatible with the existing stored function syntax. On the brighter side, it's very easy to invoke stored procedures (or functions) yourself - you don't really need CommandType.StoredProcedure. Simply create a regular command and set CommandText to CALL my_stored_procedure(@p1, @p2), handling parameters like you would any other statement. In fact, with Npgsql and PostgreSQL, CommandType.StoredProcedure doesn't really have any added value over constructing the command yourself. I opened a pooled connection, and it throws right away when I use it! What gives? We know it's frustrating and seems weird, but this behavior is by-design. While your connection is idle in the pool, any number of things could happen to it - a timeout could cause it to break, or some other similar network problem. Unfortunately, with the way networking works, there is no reliable way for us to know on the client if a connection is still alive; the only thing we can do is send something to PostgreSQL, and wait for the response to arrive. Doing this whenever a connection is handed out from the pool would kill the very reason pooling exists - it would dramatically slow down pooling, which is there precisely to avoid unneeded network roundtrips. But the reality is even more grim than that. Even if Npgsql checked whether a connection is live before handing it out of the pool, there's nothing guaranteeing that the connection won't break 1 millisecond after that check - it's a total race condition. So the check wouldn't just degrade performance, it would also be largely useless. The reality of network programming is that I/O errors can occur at any point, and your code must take that into account if it has high reliability requirements. Resilience/retrying systems can help you with this; take a look at Polly as an example. One thing which Npgsql can do to help a bit, is the keepalive feature; this does a roundtrip with PostgreSQL every e.g. 1 second - including when the connection is idle in the pool - and destroys it if an I/O error occurs. However, depending on timing, you may still get a broken connection out of the pool - unfortunately there's simply no way around that. I get an exception \"The field field1 has a type currently unknown to Npgsql (OID XXXXX). You can retrieve it as a string by marking it as unknown\". Npgsql has to implement support for each PostgreSQL type, and it seems you've stumbled upon an unsupported type. First, head over to our issues page and check if an issue already exists on your type, otherwise please open one to let us know. Then, as a workaround, you can have your type treated as text - it will be up to you to parse it in your program. One simple way to do this is to append ::TEXT in your query (e.g. SELECT 3::TEXT). If you don't want to modify your query, Npgsql also includes an API for requesting types as text. The following code returns all the columns in the resultset as text: await using (var cmd = new NpgsqlCommand(...)) { cmd.AllResultTypesAreUnknown = true; await using var reader = await cmd.ExecuteReaderAsync(); // Read everything as strings } You can also specify text only for some columns in your resultset: await using (var cmd = new NpgsqlCommand(...)) { // Only the second field will be fetched as text cmd.UnknownResultTypeList = new[] { false, true }; await using var reader = await cmd.ExecuteReaderAsync(); // Read everything as strings } I'm trying to write a JSONB type and am getting 'column \"XXX\" is of type jsonb but expression is of type text' When sending a JSONB parameter, you must explicitly specify its type to be JSONB with NpgsqlDbType: await using (var cmd = new NpgsqlCommand(\"INSERT INTO foo (col) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"p\", NpgsqlDbType.Jsonb, jsonText); } I'm trying to apply an Entity Framework 6 migration and I get Type is not resolved for member 'Npgsql.NpgsqlException,Npgsql' Unfortunately, a shortcoming of EF6 requires you to have Npgsql.dll in the Global Assembly Cache (GAC), otherwise you can't see migration-triggered exceptions. You can add Npgsql.dll to the GAC by opening a VS Developer Command Prompt as administator and running the command gacutil /i Npgsql.dll. You can remove it from the GAC with gacutil /u Npgsql."
  },
  "doc/index.html": {
    "href": "doc/index.html",
    "title": "Documentation | Npgsql Documentation",
    "keywords": "Getting Started The best way to use Npgsql is to install its nuget package. Npgsql aims to be fully ADO.NET-compatible, its API should feel almost identical to other .NET database drivers. Here's a basic code snippet to get you started: var connectionString = \"Host=myserver;Username=mylogin;Password=mypass;Database=mydatabase\"; await using var dataSource = NpgsqlDataSource.Create(connectionString); // Insert some data await using (var cmd = dataSource.CreateCommand(\"INSERT INTO data (some_field) VALUES ($1)\")) { cmd.Parameters.AddWithValue(\"Hello world\"); await cmd.ExecuteNonQueryAsync(); } // Retrieve all rows await using (var cmd = dataSource.CreateCommand(\"SELECT some_field FROM data\")) await using (var reader = await cmd.ExecuteReaderAsync()) { while (await reader.ReadAsync()) { Console.WriteLine(reader.GetString(0)); } } You can find more info about the ADO.NET API in the MSDN docs or in many tutorials on the Internet."
  },
  "doc/installation.html": {
    "href": "doc/installation.html",
    "title": "Installation | Npgsql Documentation",
    "keywords": "Offical Packages Official releases of Npgsql are always available on nuget.org. This is the recommended way to use Npgsql. We occasionally publish previews to nuget.org as well - these are generally quite safe for use, and can help us find issues before official packages are released. Daily Builds In addition to the official releases, we automatically publish CI packages for every build. You can use these to test new features or bug fixes that haven't been released yet. Two CI nuget feeds are available: The patch feed contains CI packages for the next hotfix/patch version. These packages are generally very stable and safe. To use it, add https://www.myget.org/F/npgsql/api/v3/index.json to your NuGet.Config. The vNext feed contains CI packages for the next minor or major versions. These are less stable and should be tested with care. To use it, add https://www.myget.org/F/npgsql-vnext/api/v3/index.json to your NuGet.Config. Older, unsupported installation methods Windows MSI Installer If you need to use Npgsql as a database provider for PowerBI, Excel or other similar systems, you need to install it into the Windows Global Assembly Cache (GAC), and do some special configuration. Npgsql versions prior to 5.0.0 provided a Windows installer (MSI) which does the installation for you, and which are still usable and maintained with critical bug fixes. Do not use the Windows MSI installer unless you're sure that your program requires GAC installation - this method is otherwise highly discouraged. The Npgsql Windows MSI installer for Npgsql 4.1.x can be found on our Github releases page: it will install Npgsql (and optionally the Entity Framework providers) into your GAC and add Npgsql's DbProviderFactory into your machine.config file. Some additional assemblies which are Npgsql dependencies will be installed into the GAC as well (e.g. System.Threading.Tasks.Extensions.dll). Visual Studio Integration Older versions of Npgsql came with a Visual Studio extension (VSIX) which integrated PostgreSQL access into Visual Studio. The extension allowed connecting to PostgreSQL from within Visual Studio's Server Explorer, creating an Entity Framework 6 model from an existing database, etc. The extension had various limitations and known issues, mainly because of problems with Visual Studio's extensibility around database. Use of the extension is no longer recommended. However, if you'd like to give it a try, it can be installed directly from the Visual Studio Marketplace page. DbProviderFactory in .NET Framework On .NET Framework, you can register Npgsql's DbProviderFactory in your applications App.Config (or Web.Config), allowing you to use general, provider-independent ADO.NET types in your application (e.g. DbConnection instead of NpgsqlConnection) - see this tutorial. To do this, add the following to your App.config: <system.data> <DbProviderFactories> <add name=\"Npgsql Data Provider\" invariant=\"Npgsql\" description=\".Net Data Provider for PostgreSQL\" type=\"Npgsql.NpgsqlFactory, Npgsql, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\"/> </DbProviderFactories> </system.data>"
  },
  "doc/keepalive.html": {
    "href": "doc/keepalive.html",
    "title": "Keepalive | Npgsql Documentation",
    "keywords": "Keepalive Some clients keep idle connections for long periods of time - this is especially frequent when waiting for PostgreSQL notifications. In this scenario, how can the client know the connection is still up, and hasn't been broken by a server or network outage? For this purpose, Npgsql has a keepalive feature, which makes it initiate periodic ping roundtrips. This feature is by default disabled, and must be enabled via the Keepalive connection string parameter, setting the number of seconds between each keepalive. When keepalive is enabled, Npgsql will emit an NpgsqlConnection.StateChange event if the keepalive fails. Note that you should only turn this feature on if you need it. Unless you know you'll have long-lived idle connections, and that your backend (or network equipment) will interfere with these connections, it's better to leave this off. TCP Keepalives The keepalive mechanism above is ideal for long-standing idle connections, but it cannot be used during query processing. With some PostgreSQL-like data warehouse products such as Amazon Redshift or Greenplum, it is not uncommon for a single SQL statement to take a long time to execute, and during that time it is not possible to send application-level pings. For these cases you may want to turn on TCP keepalive, which is quite different from the application-level keepalive described above. To better understand the different kinds of keepalives, see this blog post. As that article explains, TCP keepalive depends on networking stack support and might not always work, but it is your only option during query processing. On Linux, you turn keepalives simply by specifying Tcp Keepalive=true in your connection string. The default system-wide settings will be used (for interval, count...) - it is currently impossible to specify these at the application level. On Windows, you can also specify Tcp Keepalive Time and Tcp Keepalive Interval to tweak these settings."
  },
  "doc/large-objects.html": {
    "href": "doc/large-objects.html",
    "title": "Large Objects | Npgsql Documentation",
    "keywords": "Large Objects The Large Objects feature is a way of storing large files in a PostgreSQL database. Files can normally be stored in bytea columns but there are two downsides; a file can only be 1 GB and the backend buffers the whole file when reading or writing a column, which may use significant amounts of RAM on the backend. With the Large Objects feature, objects are instead stored in a separate system table in smaller chunks and provides a streaming API for the user. Each object is given an integral identifier that is used for accessing the object, that can, for example, be stored in a user's table containing information about this object. Example // Retrieve a Large Object Manager for this connection var manager = new NpgsqlLargeObjectManager(Conn); // Create a new empty file, returning the identifier to later access it uint oid = manager.Create(); // Reading and writing Large Objects requires the use of a transaction using (var transaction = Conn.BeginTransaction()) { // Open the file for reading and writing using (var stream = manager.OpenReadWrite(oid)) { var buf = new byte[] { 1, 2, 3 }; stream.Write(buf, 0, buf.Length); stream.Seek(0, System.IO.SeekOrigin.Begin); var buf2 = new byte[buf.Length]; stream.Read(buf2, 0, buf2.Length); // buf2 now contains 1, 2, 3 } // Save the changes to the object transaction.Commit(); } See also See the PostgreSQL documentation for more information. All functionality are implemented and wrapped in the classes NpgsqlLargeObjectManager and NpgsqlLargeObjectStream using standard .NET Stream as base class."
  },
  "doc/performance.html": {
    "href": "doc/performance.html",
    "title": "Performance | Npgsql Documentation",
    "keywords": "Performance Diagnostics To be able to improve performance, you first need to be able to see which queries are slow, and generally observe how your application is behaving. PostgreSQL provide some powerful features for knowing what's going on in the database; the statistics collector is a good place to start, and in particular the pg_stat_activity table, which shows which queries are being executed at any given point. Beyond PostgreSQL, Npgsql provides its own set of diagnostics features for tracing, logging and producing metrics. Tracing and metrics are particularly useful for performance analysis - consider collecting this data continuously on your production platform. These features are documented in the dedicated diagnostics page. Prepared Statements One of the most important (and easy) ways to improve your application's performance is to prepare your commands. Even if you're not coding against ADO.NET directly (e.g. using Dapper or an O/RM), Npgsql has an automatic preparation feature which allows you to benefit from the performance gains associated with prepared statements. See this blog post and/or the documentation for more details. Batching/Pipelining When you execute a command, Npgsql executes a roundtrip to the database. If you execute multiple commands (say, inserting 3 rows or performing multiple selects), you're executing multiple roundtrips; each command has to complete before the next command can start execution. Depending on your network latency, this can considerably degrade your application's performance. You can batch multiple SQL statements in a single roundtrip: var batch = new NpgsqlBatch(connection) { BatchCommands = { new(\"SELECT ...\"), new(\"SELECT ...\") } }; await using (var reader = await batch.ExecuteReaderAsync()) { while (await reader.ReadAsync()) { // Read first resultset } await reader.NextResultAsync(); while (await reader.ReadAsync()) { // Read second resultset } } Disable enlisting to TransactionScope By default, Npgsql will enlist to ambient transactions. This occurs when a connection is opened while inside a TransactionScope, and can provide a powerful programming model for working with transactions. However, this involves checking whether an ambient transaction is in progress each time a (pooled) connection is open, an operation that takes more time than you'd think. Scenarios where connections are very short-lived and open/close happens very frequently can benefit from removing this check - simply include Enlist=false in the connection string. Note that you can still enlist manually by calling NpgsqlConnection.Enlist(). Pooled Connection Reset When a pooled connection is closed, Npgsql will arrange for its state to be reset the next time it's used. This prevents leakage of state from one usage cycle of a physical connection to another one. For example, you may change certain PostgreSQL parameters (e.g. statement_timeout), and it's undesirable for this change to persist when the connection is closed. Connection reset happens via the PostgreSQL DISCARD ALL command, or, if there are any prepared statements at the time of closing, by a combination of the equivalent statements described in the docs (to prevent closing those statements). Note that these statements aren't actually sent when closing the connection - they're written into Npgsql's internal write buffer, and will be sent with the first user statement after the connection is reopened. This prevents a costly database roundtrip. If you really want to squeeze every last bit of performance from PostgreSQL, you may disable connect reset by specifying No Reset On Close on your connection string - this will slightly improve performance in scenarios where connection are very short-lived, and especially if prepared statements are in use. Reading Large Values When reading results from PostgreSQL, Npgsql first reads raw binary data from the network into an internal read buffer, and then parses that data as you call methods such as NpgsqlDataReader.GetString(). While this allows for efficient network reads, it's worth thinking about the size of this buffer, which is 8K by default. Under normal usage, Npgsql attempts to read each row into the buffer; if that entire row fits in 8K, you'll have optimal performance. However, if a row is bigger than 8K, Npgsql will allocate an \"oversize buffer\", which will be used until the connection is closed or returned to the pool. If you're not careful, this can create significant memory churn that will slow down your application. To avoid this, if you know you're going to be reading 16k rows, you can specify Read Buffer Size=18000 in your connection string (leaving some margin for protocol overhead), this will ensure that the read buffer is reused and no extra allocation occur. Another option is to pass CommandBehavior.SequentialAccess to NpgsqlCommand.ExecuteReader(). Sequential mode means that Npgsql will no longer read entire rows into its buffer, but will rather fill up the buffer as needed, reading more data only when it's empty. The same 8K read buffer will be used regardless of the row's total size, and Npgsql will take care of the details. In sequential mode, however, you must read the row's fields in the order in which you specified them; you cannot read the 2nd field and then go back to the 1st field, and trying to do so will generate an exception. Similarly, you cannot read the same field twice - once you've read a field, it has been consumed. For more information on CommandBehavior.SequentialAccess, see this page. If you decide to use this feature, be aware that it isn't used as often and may therefore contain bugs. You can also control the socket's receive buffer size (not to be confused with Npgsql's internal buffer) by setting the Socket Receive Buffer Size connection string parameter. Writing Large Values Writing is somewhat similar - Npgsql has an internal write buffer (also 8K by default). When writing your query's SQL and parameters to PostgreSQL, Npgsql always writes \"sequentially\", that is, filling up the 8K buffer and flushing it when full. You can use Write Buffer Size to control the buffer's size. You can also control the socket's send buffer size (not to be confused with Npgsql's internal buffer) by setting the Socket Send Buffer Size connection string parameter. Avoiding boxing when writing parameter values See this section. Unix Domain Socket If you're on Linux or macOS and are connecting to a PostgreSQL server on the same machine, you can boost performance a little by connecting via Unix domain socket rather than via a regular TCP/IP socket. To do this, simply specify the directory of your PostgreSQL sockets in the Host connection string parameter - if this parameter starts with a slash, it will be taken to mean a filesystem path."
  },
  "doc/prepare.html": {
    "href": "doc/prepare.html",
    "title": "Prepared Statements | Npgsql Documentation",
    "keywords": "Prepared Statements Introduction It's recommended that you start by reading this blog post. Most applications repeat the same SQL statements many times, passing different parameters. In such cases, it's very beneficial to prepare commands - this will send the command's statement(s) to PostgreSQL, which will parse and plan for them. The prepared statements can then be used on execution, saving valuable planning time. The more complex your queries, the more you'll notice the performance gain; but even very simple queries tend to benefit from preparation. Following is a benchmark Npgsql.Benchmarks.Prepare, which measures the execution time of the same query, executed prepared and unprepared. TablesToJoin is a parameter which increases the query complexity - it determines how many tables the query joins from. Method TablesToJoin Mean StdErr StdDev Op/s Scaled Scaled-StdDev Allocated Unprepared 0 67.1964 us 0.1586 us 0.6142 us 14881.75 1.00 0.00 1.9 kB Prepared 0 43.5007 us 0.2466 us 0.9227 us 22988.13 0.65 0.01 305 B Unprepared 1 98.8502 us 0.1278 us 0.4949 us 10116.32 1.00 0.00 1.93 kB Prepared 1 53.7518 us 0.0486 us 0.1818 us 18604.04 0.54 0.00 306 B Unprepared 2 180.0599 us 0.2990 us 1.1579 us 5553.71 1.00 0.00 2.06 kB Prepared 2 70.3609 us 0.1715 us 0.6417 us 14212.44 0.39 0.00 306 B Unprepared 5 1,084.6065 us 1.1822 us 4.2626 us 921.99 1.00 0.00 2.37 kB Prepared 5 110.0652 us 0.1098 us 0.3805 us 9085.52 0.10 0.00 308 B Unprepared 10 23,086.5956 us 37.2072 us 139.2167 us 43.32 1.00 0.00 3.11 kB Prepared 10 197.1392 us 0.3044 us 1.1790 us 5072.56 0.01 0.00 308 B As is immediately apparent, even an extremely simple scenario (TablesToJoin=0, SQL=SELECT 1), preparing the query with PostgreSQL provides a 36% speedup. As query complexity increases by adding join tables, the gap widens dramatically. The only potential disadvantage of prepared statements is that they hold server-side resources (e.g. cached plans). If you're dynamically generating SQL queries, make sure you don't overwhelm the server by preparing too much. Most reasonable applications shouldn't have to worry about this. Simple Preparation To prepare your commands, simply use the following standard ADO.NET code: var cmd = new NpgsqlCommand(...); cmd.Parameters.Add(\"param\", NpgsqlDbType.Integer); await cmd.PrepareAsync(); // Set parameters await cmd.ExecuteNonQueryAsync(); // And so on Note that all parameters must be set before calling Prepare() - they are part of the information transmitted to PostgreSQL and used to effectively plan the statement. You must also set the DbType or NpgsqlDbType on your parameters to unambiguously specify the data type (setting the value isn't support). Note that preparation happens on individual statements, and not on commands, which can contain multiple statements, batching them together. This can be important in cases such as the following: var cmd = new NpgsqlCommand(\"UPDATE foo SET bar=@bar WHERE baz=@baz; UPDATE foo SET bar=@bar WHERE baz=@baz\"); // set parameters. await cmd.PrepareAsync(); Although there are two statements in this command, the same prepared statement is used to execute since the SQL is identical. Persistency With many database drivers, prepared statements are closed when their owning command was disposed. This significantly reduces their usefulness, especially since closing a pooled connection automatically closes all prepared statements. For applications where connections are short-lived - most web applications - this effectively makes prepared statements useless. In Npgsql, all prepared statements are persistent - they don't get closed when a command or connection is closed. Npgsql keeps track of statements prepared on each physical connection; if you prepare the same SQL a second time on the same physical connection, Npgsql will simply reuse the prepared statement from the first preparation. This means that in an application with short-lived, pooled connections, prepared statements will gradually be created as the application warms up and the connections are first used. Then, opening a new pooled connection will return a physical connection that already has a prepared statement for your SQL, providing a very substantial performance boost. For example: await using (var conn = await dataSource.OpenConnectionAsync()) await using (var cmd = new NpgsqlCommand(\"<some_sql>\", conn)) { await cmd.PrepareAsync(); // First time on this physical connection, Npgsql prepares with PostgreSQL await cmd.ExecuteNonQueryAsync(); } await using (var conn = await dataSource.OpenConnectionAsync()) await using (var cmd = new NpgsqlCommand(\"<some_sql>\", conn)) { // We assume the internal connection pool returned the same physical connection used above await cmd.PrepareAsync(); // The connection already has a prepared statement for <some_sql>, this doesn't need to do anything await cmd.ExecuteNonQueryAsync(); } You can still choose to close a prepared statement by calling NpgsqlCommand.Unprepare(). You can also unprepare all statements on a given connection by calling NpgsqlConnection.UnprepareAll(). Automatic Preparation While the preparation examples shown above provide a very significant performance boost, they depend on you calling the Prepare() command. Unfortunately, if you're using some data layer above ADO.NET, such as Dapper or Entity Framework, chances are these layers don't prepare for you. While issues exist for both Dapper and Entity Framework Core, they don't take advantage of prepared statement at the moment. Npgsql supports automatic preparation. When turned on, this will make Npgsql track the statements you execute and automatically prepare them when you reach a certain threshold. When you reach that threshold, the statement is automatically prepared, and from that point on will be executed as prepared, yielding all the performance benefits discussed above. To turn on this feature, you simply need to set the Max Auto Prepare connection string parameter, which determines how many statements can be automatically prepared on the connection at any given time (this parameter defaults to 0, disabling the feature). A second parameter, Auto Prepare Min Usages, determines how many times a statement needs to be executed before it is auto-prepared (defaults to 5). Since no code changes are required, you can simply try setting Max Auto Prepare and running your application to see an immediate speed increase. Note also that, like explicitly-prepared statements, auto-prepared statements are persistent, allowing you to reap the performance benefits in short-lived connection applications. Note that if you're coding directly against Npgsql or ADO.NET, explicitly preparing your commands with Prepare() is still recommended over letting Npgsql prepare automatically. Automatic preparation does incur a slight performance cost compared to explicit preparation, because of the internal LRU cache and various book-keeping data structures. Explicitly preparing also allows you to better control exactly which statements are prepared and which aren't, and ensures your statements will always stay prepared, and never get ejected because of the LRU mechanism. Note that automatic preparation is a complex new feature which should be considered somewhat experimental; test carefully, and if you see any strange behavior or problem try turning it off."
  },
  "doc/release-notes/3.0.html": {
    "href": "doc/release-notes/3.0.html",
    "title": "Npgsql 3.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 3.0 Release Notes Migrating from 2.2 to 3.0 Version 3.0 represents a near-total rewrite of Npgsql. In addition to changing how Npgsql works internally and communicates with PostgreSQL, a conscious effort was made to better align Npgsql with the ADO.NET specs/standard and with SqlClient where that made sense. This means that you cannot expect to drop 3.0 as a replacement to 2.2 and expect things to work - upgrade cautiously and test extensively before deploying anything to production. The following is a non-exhaustive list of things that changed. If you run against a breaking change not documented here, please let us know and we'll add it. Major Support for .NET 2.0, .NET 3.5 and .NET 4.0 has been dropped - you will have to upgrade to .NET 4.5 to use Npgsql 3.0. We'll continue to do bugfixes on the 2.2 branch for a while on a best-effort basis. The Entity Framework provider packages have been renamed to align with Microsoft's new naming. The new packages are EntityFramework5.Npgsql and EntityFramework6.Npgsql. EntityFramework7.Npgsql is in alpha. A brand-new bulk copy API has been written, using binary encoding for much better performance. See the docs. Composite (custom) types aren't supported yet, but this is a high-priority feature for us. See #441. SSL Npgsql 2.2 didn't perform validation on the server's certificate by default, so self-signed certificate were accepted. The new default is to perform validation. Specify the Trust Server Certificate connection string parameter to get back previous behavior. The \"SSL\" connection string parameter has been removed, use \"SSL Mode\" instead. The \"SSL Mode\" parameter's Allow option has been removed, as it wasn't doing anything. Type Handling Previously, Npgsql allowed writing a NULL by setting NpgsqlParameter.Value to null. This is not allowed in ADO.NET and is no longer supported, set to DBNull.Value instead. In some cases, you will now be required to explicitly set a parameter's type although you didn't have to before (you'll get an error 42804 explaining this). This can happen especially in Dapper custom custom type handlers (#694). Simply set the NpgsqlDbType property on the parameter. Removed support for writing a parameter with an IEnumerable<T> value, since that would require Npgsql to enumerate it multiple times internally. IList<T> and IList are permitted. It is no longer possible to write a .NET enum to an integral PostgreSQL column (e.g. int4). Proper enum support has been added which allows writing to PostgreSQL enum columns (see the docs. To continue writing enums to integral columns as before, simply add an explicit cast to the integral type in your code. NpgsqlMacAddress has been removed and replaced by the standard .NET PhysicalAddress. Npgsql's BitString has been removed and replaced by the standard .NET BitArray. NpgsqlTime has been removed and replaced by the standard .NET TimeSpan. NpgsqlTimeZone has been removed. NpgsqlTimeTZ now holds 2 TimeSpans, rather than an NpgsqlTime and an NpgsqlTimeZone. NpgsqlTimeStamp no longer maps DateTime.{Max,Min}Value to {positive,negative} infinity. Use NpgsqlTimeStamp.Infinity and NpgsqlTimeStamp.MinusInfinity explicitly for that. You can also specify the \"Convert Infinity DateTime\" connection string parameter to retain the old behavior. Renamed NpgsqlInet's addr and mask to Address and Mask. NpgsqlPoint now holds Doubles instead of Singles (#437). NpgsqlDataReader.GetFieldType() and GetProviderSpecificFieldType() now return Array for arrays. Previously they returned int[], even for multidimensional arrays. NpgsqlDataReader.GetDataTypeName() now returns the name of the PostgreSQL type rather than its OID. Retired features Removed the \"Preload Reader\" feature, which loaded the entire resultset into memory. If you require this (inefficient) behavior, read the result into memory outside Npgsql. We plan on working on MARS support, see #462. The \"Use Extended Types\" parameter is no longer needed and isn't supported. To access PostgreSQL values that can't be represented by the standard CLR types, use the standard ADO.NET NpgsqlDataReader.GetProviderSpecificValue or even better, the generic NpgsqlDataReader.GetFieldValue<T>. Removed the feature where Npgsql automatically \"dereferenced\" a resultset of refcursors into multiple resultsets (this was used to emulate returning multiple resultsets from stored procedures). Note that if your function needs to return a single resultset, it should be simply returning a table rather than a cursor (see RETURNS TABLE). See #438. Removed the AlwaysPrepare connection string parameter Removed the Encoding connection string parameter, which was obsolete and unused anyway (UTF8 was always used regardless of what was specified) Removed the Protocol connection string parameter, which was obsolete and unused anyway (protocol 3 was always used) Removed NpgsqlDataReader.LastInsertedOID, it did not allow accessing individual OIDs in multi-statement commands. Replaced with NpgsqlDataReader.Statements, which provides OID and affected row information on a statement-by-statement basis. Removed NpgsqlDataReader.HasOrdinal, was a badly-named non-standard API without a serious use case. GetName() can be used as a workaround. Other It is no longer possible to create database entities (tables, functions) and then use them in the same multi-query command - you must first send a command creating the entity, and only then send commands using it. See #641 for more details. Previously, Npgsql set DateStyle=ISO, lc_monetary=C and extra_float_digits=3 on all connections it created. This is no longer case, if you rely on these parameters you must send them yourself. NpgsqlConnection.Clone() will now only return a new connection with the same connection string as the original. Previous versions returned an open connection if the original was open, and copied the Notice event listeners as well. Note: NpgsqlConnection.Clone() was accidentally missing from 3.0.0 and 3.0.1. Removed the obsolete NpgsqlParameterCollection.Add(name, value) method. Use AddWithValue() instead, which also exists in SqlClient. The savepoint manipulation methods on NpgsqlTransaction have been renamed from Save, and Rollback to CreateSavepoint and RollbackToSavepoint. This broke the naming conventions for these methods across other providers (SqlClient, Oracle...) and so in 3.0.2 the previous names were returned and the new names marked as obsolete. 3.1 will remove the the new names and leaves only Save and Rollback. See #738. The default CommandTimeout has changed from 20 seconds to 30 seconds, as in ADO.NET. CommandType.TableDirect now requires CommandText to contain the name of a table, as per the MSDN docs. Multiple tables (join) aren't supported. CommandType.StoredProcedure now requires CommandText contain only the name of a function, without parentheses or parameter information, as per the MSDN docs. Moved the LastInsertedOID property from NpgsqlCommand to NpgsqlReader, like the standard ADO.NET RecordsAffected. A single SQL statement may no longer have more than 65535 parameters. If you're bulk-importing a large number of rows, consider using the binary COPY API which is considerably more efficient, or an alternative method such as inserting from array parameters. Contributors Thank you very much to the following people who have contributed to the individual 3.0.x. releases. Milestone 3.0.8 Contributor Assigned issues @roji 11 Milestone 3.0.7 Contributor Assigned issues @roji 1 Milestone 3.0.6 Contributor Assigned issues @roji 10 @Emill 1 Milestone 3.0.5 Contributor Assigned issues @roji 4 @kenjiuno 1 Milestone 3.0.4 Contributor Assigned issues @roji 10 @damageboy 2 Milestone 3.0.3 Contributor Assigned issues @roji 14 Milestone 3.0.2 Contributor Assigned issues @roji 8 @Emill 4 Milestone 3.0.1 Contributor Assigned issues @roji 13 @Emill 1 Milestone 3.0.0 Contributor Assigned issues @roji 62 @Emill 3"
  },
  "doc/release-notes/3.1.html": {
    "href": "doc/release-notes/3.1.html",
    "title": "Npgsql 3.1 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 3.1 Release Notes Migrating from 3.0 to 3.1 CommandTimeout used to be implemented with PostgreSQL's statement_timeout parameter, but this wasn't a very reliable method and has been removed. CommandTimeout is now implemented via socket timeouts only, see #689 for more details. Note that if a socket timeout occurs, the connection is broken and must be reopened. The Persist Security Info parameter has been implemented and is false by default. This means that once a connection has been opened, you will not be able to get its password. Removed ContinuousProcessing mode, and replaced it with Wait, a simpler and less bug-prone mechanism for consuming asynchronous notifications (#1024). The Maximum Pool Size connection is parameter is now 100 default instead of 20 (this is default in SqlClient, pg_bouncer...). The Connection Lifetime parameter has been renamed to Connection Idle Lifetime, and its default has been changed from 15 to 300. Also, once the number of seconds has elapsed the connection is closed immediately; the previous behavior closed half of the connections. RegisterEnum and RegisterEnumGlobally have been renamed to MapEnum and MapEnumGlobally respectively. If you used enum mapping in 3.0, the strategy for translating between CLR and PostgreSQL type names has changed. In 3.0 Npgsql simply used the CLR name (e.g. SomeField) as the PostgreSQL name; Npgsql 3.1 uses a user-definable name translator, default to snake case (e.g. some_field). See #859. The EnumLabel attribute has been replaced by the PgName attribute (which is also used for the new composite type support). When PostgreSQL sends an error, it is no longer raised by an NpgsqlException but by a PostgresException. PostgresException is a subclass of NpgsqlException so code catching NpgsqlException should still work, but the PostgreSQL-specific exception properties will only be available on PostgresException. The Code property on NpgsqlException has been renamed to SqlState. It has also been moved to PostgresException. NpgsqlNotice has been renamed to PostgresNotice For multistatement commands, PostgreSQL parse errors will now be thrown only when the user calls NextResult() and gets to the problematic statement. It is no longer possible to dispose a prepared statement while a reader is still open. Since disposing a prepared statement includes database interaction, the connection must be idle. Removed NpgsqlConnection.SupportsHexByteFormat. Renamed NpgsqlConnection.Supports_E_StringPrefix to SupportsEStringPrefix. Contributors Thank you very much to the following people who have contributed to the individual 3.1.x. releases. Milestone 3.1.10 Contributor Assigned issues @roji 5 Milestone 3.1.9 Contributor Assigned issues @roji 10 @DaveVdE 1 @rwasef1830 1 Milestone 3.1.8 Contributor Assigned issues @roji 10 Milestone 3.1.7 Contributor Assigned issues @roji 7 Milestone 3.1.6 Contributor Assigned issues @roji 5 Milestone 3.1.5 Contributor Assigned issues @roji 4 Milestone 3.1.4 Contributor Assigned issues @roji 2 Milestone 3.1.3 Contributor Assigned issues @roji 10 Milestone 3.1.2 Contributor Assigned issues @roji 1 Milestone 3.1.10 Contributor Assigned issues @roji 5 Milestone 3.1.1 Contributor Assigned issues @roji 5 Milestone 3.1.0 Contributor Assigned issues @roji 24 @Emill 2"
  },
  "doc/release-notes/3.2.html": {
    "href": "doc/release-notes/3.2.html",
    "title": "Npgsql 3.2 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 3.2 Release Notes Npgsql 3.2 is out and available on nuget.org. This is a major release with substantial internal changes and should be deployed with care. For critical applications it may be advisable to wait until 3.2.1 is out. This release contains a large number of new features, but the main focus is performance - some usage scenarios may show dramatic improvements. See below for more details. Major Changes Prepared statements are now persistent (survive beyond pooled connection close/open), providing significant performance improvements for applications with short-lived connections, such as most webapps (#483). Also, statements can optionally be prepared automatically by Npgsql based on use, unlocking prepared statement performance for O/RMs and data layers which don't prepare themselves, such as Dapper or Entity Framework Core (#1237). See this blog post for more info. The internal I/O system has been overhauled to continue supporting sync and async I/O, but with a vastly better coding model. This should eliminate most protocol sync bugs, and make it much easier to maintain and write new type handlers (#1326). Kerberos login (\"integrated security\") is now support on Linux/Mac (#1079). Support for System.Transactions and distributed transactions has been rewritten, and should have fewer problems than before (#122). Performance counters have been implemented, similar to what SqlClient provides. (#619). The Visual Studio integration extension (DDEX) has been rewritten for a much better installation experience, and includes some new features as well (#1407). If your application attempts to make use of more than one connection at the same time, an \"operation already in progress\" was thrown. This exception now provides more information to help you track down the bug (#1248). Many other small changes have been made, especially with regards to performance. Here's the full list. Breaking Changes from 3.1 Connections can no longer be constructed with NpgsqlConnectionStringBuilder - only plain string connection strings are supported (#1415). The Buffer Size connection string parameter has been replaced by Read Buffer Size and Write Buffer Size. Contributors Thank you very much to the following people who have contributed to the individual 3.2.x. releases. Milestone 3.2.7 Contributor Assigned issues @roji 4 @erwaller 1 Milestone 3.2.6 Contributor Assigned issues @roji 8 Milestone 3.2.5 Contributor Assigned issues @roji 4 Milestone 3.2.4.1 Contributor Assigned issues @roji 1 Milestone 3.2.4 Contributor Assigned issues @roji 3 Milestone 3.2.3 Contributor Assigned issues @roji 9 @funny-falcon 1 @jlareo 1 @odiernod 1 Milestone 3.2.2 Contributor Assigned issues @roji 11 @kurtschelfthout 2 @Emill 1 Milestone 3.2.1 Contributor Assigned issues @roji 7 Milestone 3.2 Contributor Assigned issues @roji 33"
  },
  "doc/release-notes/4.0.html": {
    "href": "doc/release-notes/4.0.html",
    "title": "Npgsql 4.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 4.0 Release Notes Npgsql 4.0 is out and available at nuget.org. This is a major version with significant changes, upgrade with care, consult the breaking changes section below and test well before deploying to production. A special thanks goes out to @YohDeadfall for his many contributions and reviews. Thanks also (alphabetically) to @austindrenski, @Brar, @kspeakman, @rwasef1830, @shortspider, @StillLearnin, @uhayat for their valuable contributions. High performance A concentrated effort has substantially increased Npgsql performance, especially in highly concurrent, low-latency scenarios. Improvements include: Rewriting of the connection pool to be lock-free, since contention started to be an issue in highly concurrent, short-lived connection scenarios (#1839). Significant reduction of allocations through more recycling and other techniques. New API for generically providing parameters, avoiding boxing of value types (#1639). Avoiding numerous internal async calls where they weren't needed. ... many others In round 16 of the TechEmpower benchmark, .NET Core/ASP.NET Core came in 7th place running with Npgsql, making it one of the fastest mainstream web stacks available - see this blog post for more info. Please let us know how the new version works for you - both positive and negative comments are welcome. If you're interested in Npgsql performance and haven't yet seen the performance page, it's a good opportunity to check it out (it's valid also for 3.2 users). Improved spatial support (PostGIS) Previous versions have allowed basic usage of PostGIS's spatial types via built-in Npgsql types, which were limited in many ways. Thanks to a new plugin infrastructure, you can now use the Npgsql.NetTopologySuite plugin, which maps PostGIS types to the NetTopologySuite spatial library's types. NetTopologySuite's types are more complete, and support a variety of spatial operations and conversions you can perform after loading your spatial data from PostgreSQL. If you prefer to use JSON for your spatial types, the Npgsql.GeoJSON plugin maps PostGIS types to GeoJSON.NET types. GeoJSON is a standard JSON format for spatial data. Finally, if you prefer to use the previous Npgsql types (e.g. PostgisPoint), these are available via the Npgsql.LegacyPostgis plugin. Thanks to @YohDeadfall for implementing both the NetTopologySuite and GeoJSON plugins. NodaTime date/time support NodaTime is a powerful alternative to .NET's built-in date/time types, such as DateTime. The built-in types are flawed in many ways: they have problematic support for timezones, don't have a date-only or time-only types, and promote problematic programming but not making the right distinctions. If your application handles dates and times in anything but the most basic way, you should seriously consider using NodaTime. To learn more read this blog post by Jon Skeet. You can now use the new Npgsql.NodaTime to have Npgsql map PostgreSQL date/time types to NodaTime types. Json.NET Another plugin, Npgsql.Json.NET, works with Newtonsoft Json.NET to automatically serialize and deserialize PostgreSQL's jsonb and json types to your objects, providing a seamless database JSON programming experience. Instead of working with strings which you have to serialize and deserialize, Npgsql does it for you. Other improvements Fix the binary COPY API to make it interact better with exceptions (#1646). Npgsql better supports working with enums and composites, even without mapping them, and better supports new types introduced via plugins (#1792). Better \"reflection\" capabilities. Continuing work from 3.2, Npgsql now exposes more information about PostgreSQL types, allowing you to dynamically reflect on columns types returned by queries, or required as parameters (#1276, #1779). Derive parameters for queries. You can now also use NpgsqlCommandBuilder to dynamically understand which parameters and types are required for arbitrary queries (previously supported only for functions) (#1698, thanks @Brar!). Allow reading a single character from a PostgreSQL text column (#1188). Decimals read from PostgreSQL will now have the correct scale (#1925). Thanks @StillLearnin and @YohDeadfall. In addition to more documentation, several blog posts are planned to explain the above in more details (to be announced on @shayrojansky). Breaking changes from 3.2 Caution The date/time behavior has changed in the following ways: DateTime is always sent as timestamp by default, regardless of its kind. You can still specify NpgsqlDbType.TimestampTz, in which case local DateTime gets converted to UTC before sending. When reading timestamptz as a DateTimeOffset, the machine local offset will be used. Previously a DateTimeOffset in UTC was returned. It is no longer possible to read or write DateTimeOffset as timestamp, only as timestamptz. Caution The API for binary import (COPY IN) has changed substantially in a breaking way, and code from 3.2 will not work as-is on 4.0. You must now call NpgsqlBinaryImporter.Complete() to save your imported data; not doing so will roll the operation back. NpgsqlBinaryImporter.Cancel() has been removed - simply closing/disposing the importer will implicitly cancel the import. This is similar to how TransactionScope works and is necessary to prevent accidental commit of data on exception. See #1646. Caution If you're using decimal/numeric numbers (not floating-point), there's a chance your data needs to be fixed (previous versions incorrectly inserted a scale larger than 28, which is the maximum allowed by .NET decimal). If you're having trouble reading data previously inserted by Npgsql, consider running this fixup code. If your data really does contain more than 28/29 fractional digits and you need to keep that precision, see the workarounds proposed in this comment for loading these values. .NET Standard 1.3 is no longer supported. .NET Standard 2.0 is the lowest supported version. Npgsql used to use its own internal TLS/SSL due to issues with some server. As these issues have been resolved, the standard .NET SslStream is now used by default (#1482), but you can still set Use SSL Stream=false to keep using the internal implementation (please report why you need this, as it's likely the internal implementation will be removed in a future release). The reader instances returned by NpgsqlCommand.ExecuteReader() are now recycled, to reduce memory allocations (#1649). You should not keep a reference or interact with a reader after its command has been disposed (such interaction was limited in any case). The Min Pool Size parameter will no longer make the pool create new connections internally - it will only have an effect on how many connections are pruned. Previously, in various points the pool would check if the current number of connections was below Min Pool Size, and if so, automatically created new ones - this no longer happens. Parameter types have become more strict. Previous versions allowed to you pass arbitrary value types, such as writing CLR string to int columns, or anything that implemented IConvertible. Although some implicit conversions are still supported (e.g. long -> int, short -> int), some have been removed. Data type names returned from NpgsqlDataReader.GetDataTypeName() and other APIs are now more standards-conforming (e.g. integer[] instead of _int4), and properly include type modifiers (e.g. character varying(10)) (#1919). NpgsqlParameter.EnumType and NpgsqlParameter.SpecificType have been removed. See Composites and Enums for more details. Parameter names are no longer trimmed, set your names to the exact parameter name specified in your SQL. If a parameter's name isn't set, it will no longer default to Parameter1, Parameter2, etc. The following APIs \"connection capability\" APIs have been removed from NpgsqlConnection: UseConformantStrings, SupportsEStringPrefix, UseSslStream. The default name translator, NpgsqlSnakeCaseNameTranslator, has been changed to handle acronyms better. Given the property name IsJSON, the old translator algorithm would output is_j_s_o_n, while the new outputs is_json. To revert back to the old algorithm, create a NpgsqlSnakeCaseNameTranslator instance with legacyMode: true and pass it when calling the MapComposite and MapEnum methods. If you are reading tables as composites (#990), you will have to add the new Load Table Composites to your connection string. NpgsqlConnection.GetSchema() will no longer return system tables (i.e. tables in schemas pg_catalog and information_schema), #1831. You may no longer have multiple streams or text readers open on a reader (this was previously supported with non-sequential readers). Accessing a new column closes any open stream or text reader. The DateTimeOffset instances returned for PostgreSQL timetz now have their date set to 0001-01-02 instead of the previous 0001-01-01 (#1924). Contributors Thank you very much to the following people who have contributed to the individual 4.0.x. releases. Milestone 4.0.11 Contributor Assigned issues @manandre 1 @roji 1 @YohDeadfall 1 Milestone 4.0.10 Contributor Assigned issues @kYann 1 @roji 1 Milestone 4.0.9 Contributor Assigned issues @roji 2 @YohDeadfall 1 Milestone 4.0.8 Contributor Assigned issues @roji 2 @romanov-is-here 1 @thetranman 1 @YohDeadfall 1 Milestone 4.0.7 Contributor Assigned issues @roji 4 @aspaw 1 Milestone 4.0.6 Contributor Assigned issues @roji 2 @austindrenski 1 @zabulus 1 Milestone 4.0.5 Contributor Assigned issues @roji 6 @YohDeadfall 5 @austindrenski 1 Milestone 4.0.4 Contributor Assigned issues @roji 6 @YohDeadfall 3 @austindrenski 1 Milestone 4.0.3 Contributor Assigned issues @roji 6 @YohDeadfall 3 Milestone 4.0.2 Contributor Assigned issues @roji 2 @YohDeadfall 1 Milestone 4.0.11 Contributor Assigned issues @manandre 1 @roji 1 @YohDeadfall 1 Milestone 4.0.10 Contributor Assigned issues @kYann 1 @roji 1 Milestone 4.0.1 Contributor Assigned issues @roji 3 @austindrenski 2 @YohDeadfall 2 Milestone 4.0 Contributor Assigned issues @roji 34 @YohDeadfall 6 @Brar 1 @funny-falcon 1"
  },
  "doc/release-notes/4.1.html": {
    "href": "doc/release-notes/4.1.html",
    "title": "Npgsql 4.1 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 4.1 Release Notes Npgsql 4.1 is out and available at nuget.org. New Features The major new features of 4.1 are: Support for reading and writing your types as JSON via the new, high-perf System.Text.Json API (#2306). Support for the new async methods introduced in .NET Standard 2.1 (#2481). Expose performance statistics via the new .NET event counters (#1725). Async support for binary imports and exports (#1632). Easier and PostgreSQL standard ways to provide client certificates for authentication (#2129). Many other small improvements and performance optimizations have been introduced as well - you can track progress here. Breaking changes from 4.0 .NET Framework 4.5, 4.5.1 and 4.5.2 are no longer supported. .NET Framework 4.6.1 and .NET Standard 2.0 are the lowest supported versions. The spatial plugin, Npgsql.NetTopologySuite, has been updated to depend on NetTopologySuite 2.0.0, which is a major version introducing breaking changes. Specifically, EF Core 3.0 is the first version supporting NetTopologySuite 2.0.0; it is not possible to use EF Core 2.x with the new version of Npgsql.NetTopologySuite. The UseSslStream property of NpgsqlConnectionStringBuilder is now marked as Obselete. SslStream is always used. A fix was done to Npgsql's snake case naming converter (#2152); this could break code that relies on the previous conversion logic. Contributors Thank you very much to the following people who have contributed to the individual 4.1.x. releases. Milestone 4.1.12 Contributor Assigned issues @roji 1 Milestone 4.1.9 Contributor Assigned issues @YohDeadfall 1 Milestone 4.1.8 Contributor Assigned issues @YohDeadfall 1 Milestone 4.1.7 Contributor Assigned issues @YohDeadfall 3 @vonzshik 1 Milestone 4.1.6 Contributor Assigned issues @loop-evgeny 1 @mm3141 1 @roji 1 @vonzshik 1 @YohDeadfall 1 Milestone 4.1.5 Contributor Assigned issues @calexander3 1 @roji 1 @romanov-is-here 1 @vonzshik 1 @warcha 1 @YohDeadfall 1 Milestone 4.1.4 Contributor Assigned issues @roji 6 @YohDeadfall 6 @warcha 3 @dwat001 1 @elipatov 1 @manandre 1 @williamdenton 1 Milestone 4.1.3 Contributor Assigned issues @roji 5 @YohDeadfall 4 @NinoFloris 1 @nycdotnet 1 Milestone 4.1.2 Contributor Assigned issues @YohDeadfall 4 @NinoFloris 2 @austindrenski 1 Milestone 4.1.1 Contributor Assigned issues @roji 7 Milestone 4.1.0 Contributor Assigned issues @roji 27 @YohDeadfall 6 @austindrenski 2 @NinoFloris 2 @afkos 1 @baronfel 1 @shortspider 1 @williamdenton 1 @zabulus 1"
  },
  "doc/release-notes/5.0.html": {
    "href": "doc/release-notes/5.0.html",
    "title": "Npgsql 5.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 5.0 Release Notes Npgsql 5.0 is out and available at nuget.org. New features The full list of issues for this release is available here. PostgreSQL logical and physical replication PostgreSQL replication creating programs which receive a continuous, live stream of all updates happening in a PostgreSQL database or set of tables. It can be used for auditing purposes, continuously exporting certain (or all) changes to another database or format, or various other purposes. See the documentation for more details. This major feature was developed by @Brar, many thanks! Issue: #1520 Improved support for cancellation and timeout When the user requests cancellation (via a cancellation token or NpgsqlCommand.Cancel()), or when the Command Timeout expires, Npgsql now takes the following steps: Contact PostgreSQL and attempt to cancel the running command. If successful, PostgreSQL immediately stops processing the command and is free to do other work. In previous versions, queries were sometimes left running on the server. If PostgreSQL cancellation isn't successful within a short time window, the network is likely down. Npgsql forcibly closes the physical connection and raises an exception, making sure the application isn't blocked. Previous support was inconsistent across cancellation and timeout, and async I/O was only partially supported. Thanks to @vonzshik for all their valuable work on this! Issue: #3166 Connection multiplexing Multiplexing is an experimental new way for the driver to handle commands and connections: user code no longer receives an exclusive physical connection from Npgsql's internal pool, but rather submits commands to be executed on any available connection. This is a much more efficient use of connections, which can lead to: Significant reduction to the number of required PostgreSQL physical connection requirements, and removing load from the server. Continued uptime even when the maximum allowed connection count has been reached. A potentially substantial performance boost on the TechEmpower benchmark (next round to be published). Multiplexing is disabled by default, is considered experimental and must be explicitly opted into. Full documentation will be available soon. Issue: #1982 Nullable references All Npgsql APIs are now fully annotated for C# nullable references (#3120), in line with the new annotations in System.Data released in .NET 5.0. Support for arrays of nullable value types It is now possible to read PostgreSQL arrays as CLR arrays of nullable value types. For example, a PostgreSQL integer[] column can now be read as follows: var array = reader.GetFieldValue<int?>(0); Previously, only non-nullable value arrays were supported, and nulls were translated to the default value (e.g. 0). Thanks to @Brar for developing this feature. Issue: #443 Close connections past a certain age The Connection Lifetime connection string parameter can now be used to unconditionally close connections which have reached a certain age. Once such a connection is returned to the pool, it is destroyed and a new connection will be created if needed. This is useful in clustered configurations to force load balancing between a running server and a server just brought online, or to mitigate certain resource leaks. Thanks to @FlorianRainer for collaborating on this feature. Issue: #1810 Breaking changes Npgsql no longer targets .NET Framework 4.6.1. Since .NET Standard 2.0 is targeted, it is still possible to use Npgsql from .NET Framework applications; however, we no longer run regression tests on .NET Framework and will only fix bugs on a best-effort basis. In addition, the Visual Studio extension (VSIX) and the MSI GAC installer have been discontinued. #3269. Npgsql targets the netcoreapp3.1 TFM instead of netcoreapp3.0, which is out of support (#3160). When command timeout occurs, Npgsql now raises an NpgsqlException wrapping a TimeoutException (#3132). Previously, an NpgsqlException wrapping an IOException was raised. Similarly, when cancellation occurs, Npgsql now raises an OperationCanceledException when a command is cancelled (both via an async cancellation token, and via NpgsqlCommand.Cancel()). Previously, NpgsqlCommand.Cancel caused a PostgresException to be raised instead. When reading PostgreSQL arrays, if a null value is being read into a CLR arrays of a non-nullable value type, an exception is now thrown (#443). Previously, the default value was populated instead. It is now possible to read arrays of nullable value types instead. The NpgsqlTransaction.IsCompleted property has been removed. The application must itself track when a transaction is committed or rolled back. Support for unmapped PostgreSQL composite types has been removed (#2403). The ordering in which Npgsql checks alternative password sources has changed (#2695, #2657). This only affects applications which omit the password from the connection string. If the connection string specifies a PGPASS file, Npgsql now throws if that file doesn't exist (#2694). The TcpKeepAliveTime and TcpKeepAliveInterval connection string parameters are now expressed in seconds instead of milliseconds (#1936). The NpgsqlConnection.GetSchema() API now returns all indexes in the database (2958). Previously, only indexes in the search_path were returned. NpgsqlOperationInProgressException now inherits from NpgsqlException. NpgsqlBinaryImporter.Complete() has been changed to return a ulong reporting the number of imported rows (#2112). The Npgsql.RawPostgis plugin has been discontinued (#3201). Npgsql now allows any field to be read as raw binary data, so the plugin is no longer necessary. ~Support for non-standard-conforming strings has been dropped (#2931).~ Support for non-standard-confirming strings has been restored in 5.0.1 (except for multiplexing). Npgsql no longer supports SASL authentication with PgBouncer below 1.12. Contributors Thank you very much to the following people who have contributed to the individual 5.0.x. releases. Milestone 5.0.14 Contributor Assigned issues @vonzshik 1 Milestone 5.0.11 Contributor Assigned issues @vonzshik 4 @aromaa 1 @kislovs 1 @roji 1 Milestone 5.0.10 Contributor Assigned issues @vonzshik 11 @roji 5 @Brar 1 Milestone 5.0.7 Contributor Assigned issues @vonzshik 8 @roji 4 @Brar 1 @chrisdcmoore 1 Milestone 5.0.5 Contributor Assigned issues @vonzshik 6 @roji 3 Milestone 5.0.4 Contributor Assigned issues @vonzshik 5 @roji 2 @Brar 1 @neyromant 1 @YohDeadfall 1 Milestone 5.0.3 Contributor Assigned issues @baal2000 1 @roji 1 @vonzshik 1 Milestone 5.0.2 Contributor Assigned issues @vonzshik 4 @roji 2 @Brar 1 @cime 1 @YohDeadfall 1 Milestone 5.0.1.1 Contributor Assigned issues @vonzshik 3 @roji 2 @YohDeadfall 1 Milestone 5.0.0 Contributor Assigned issues @roji 34 @vonzshik 19 @YohDeadfall 16 @Brar 7 @warcha 5 @manandre 2 @ch-asimakopoulos 1 @chrisdcmoore 1 @FlorianRainer 1 @NinoFloris 1 @russellfoster 1 @TwentyFourMinutes 1"
  },
  "doc/release-notes/6.0.html": {
    "href": "doc/release-notes/6.0.html",
    "title": "Npgsql 6.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 6.0 Release Notes Npgsql version 6.0 has been released and is available on nuget. Npgsql 6.0 brings some major breaking changes and is not a simple in-place upgrade. Carefully read the breaking change notes below and upgrade with care. New features The full list of issues for this release is available here. Multiple hosts, load balancing and failover Npgsql now includes first-class support for managing connections to multiple PostgreSQL servers, unlocking both load balancing for better performance and failover for better reliability (#732). This long-awaited feature is an important part of using PostgreSQL in scalable and mission-critical environments. For example, consider the following connection string: Host=server1,server2,server3,server4,server5;Username=test;Password=test;Load Balance Hosts=true;Target Session Attributes=prefer-standby This will make Npgsql load balance connections across 5 different servers, in round-robbin fashion; connections to read-only standby servers is preferred in order to offload as much read-only load from the primary server, but if only the primary server is up it will still be used. The multiple hosts feature is highly configurable, see the full documentation for more details. Tracing with OpenTelemetry Npgsql can now report tracing data via OpenTelemetry; this can provide invaluable data on the queries your application is running, how long they're taking, and situate them in the larger context of your application. For example, you can visualize what percentage of your HTTP requests are spent waiting for your database query. The following is a sample timeline visualization of Npgsql-reported trace data, using Zipkin: See the full documentation in the diagnostics page. Timestamp rationalization and improvements Support for timestamp with time zone and timestamp without time zone has been rationalized and simplified, and aligned with PostgreSQL best practices. In particular, the \"UTC everywhere\" pattern is much better supported via the PostgreSQL timestamp with time zone type, which is the recommended way to handle timestamps. A detailed explanation is available in this blog post, below is a summary of the main improvements. UTC timestamps have been cleanly separated from non-UTC timestamps, aligning with the PostgreSQL types. The former are represented by timestamp with time zone and DateTime with Kind UTC, the latter by timestamp without time zone and DateTime with Kind Local or Unspecified. It is recommended to use UTC timestamps where possible. Npgsql no longer performs any implicit timezone conversions when reading or writing any timestamp value - the value in the database is what you get, and the machine timezone no longer plays any role when reading/writing values. Npgsql no longer supports date/time representations which cannot be fully round-tripped to the database. If it can't be fully stored as-is, you can't write it. A compatibility switch enables opting out of the new behavior, to maintain backwards compatibility. This change introduces significant breaking changes (see below), although a compatibility flag can be used to opt out and revert to the previous behavior. Other date/time improvements include: Support for the new .NET DateOnly and TimeOnly types (#3616). PostgreSQL tstzrange is now mapped to NodaTime Interval, and PostgreSQL daterange is now mapped to NodaTime DateInterval. Most methods on these types are translated (#3973, #4070). DateTime.MinValue and MaxValue are now mapped to PostgreSQL -infinity and infinity by default. Raw SQL mode and new batching API It is now possible to use PostgreSQL positional parameters, allowing Npgsql to skip rewriting your SQL and send it directly to PostgreSQL (#1042): SELECT * FROM blogs WHERE b.name = @p; -- Before Npgsql 6.0 SELECT * FROM blogs WHERE b.name = $1; -- Npgsql 6.0 This is more efficient, is safer (since Npgsql doesn't have to parse SQL), and aligns your SQL with the actual PostgreSQL SQL. Note that named parameters are still supported for backwards compatibility. In addition, Npgsql now supports the new ADO.NET batching API introduced in .NET 6.0 as an alternative to packing multiple statements into a single NpgsqlCommand, delimited by semicolons (#3860): // Before Npgsql 6.0 var command = new NpgsqlCommand(\"SELECT 1; SELECT 2\", connection); var reader = await command.ExecuteReaderAsync(); // Npgsql 6.0 var batch = new NpgsqlBatch(connection) { BatchCommands = { new(\"SELECT 1\"), new(\"SELECT 2\") } }; var reader = await batch.ExecuteReaderAsync(); As with positional parameters, this allow Npgsql to avoid parsing and splitting your SQL which is safer and more efficient. To learn more about positional parameters and batching, see this blog post. SSL/TLS improvements Npgsql 6.0 contains some considerable improvements to encryption support, here are some highlights (#4006): The Ssl Mode connection string parameter has been aligned with the standard PostgreSQL ssl_mode setting, and allows for more fine-grained choice in what to validate (see breaking change note below for SSL Mode=Require). Support has been added for PEM client certificates when running on .NET 5.0 and above. Support for specifying a root CA certificate that isn't installed in the machine store. See the updated security and encryption docs for more details. Improved logical replication support The recently-released PostgreSQL 14 made significant improvements to logical replication, and Npgsql 6.0 already supports them! Here's a summary of the main changes (#4050, thanks @Brar): PG14 binary logical replication - you can now read the standard .NET types from replication data; only text was possible previously (#4049). PG14 streaming replication - incremental updates for large in-progress transactions (#4047) The replication API now fully streams all data, including even columns; the previous API buffered rows, leading to lots of heap allocations for big rows (#4068). Unfortunately, some of the above required an API redesign, leading to some breaking changes. Other new features Support for the new .NET DateOnly and TimeOnly types (#3616). Full support for the PostgreSQL 14 multirange type, mapped to arrays or lists of NpgsqlRange<T> (#3868). PostgreSQL decimal can now be mapped to .NET BigInteger (#3665). Bulk import/export now includes a fully asynchronous API (#3309). Improved array nullability via a new connection string parameter (#3386). Composite types and records can now be read by getting a nested DbDataReader through NpgsqlDataReader.GetData() (#3558, thanks @Emill). This allows for efficient access without having to map composite types to .NET POCOs. Considerable work has gone in to make Npgsql more friendly to trimming/AOT, removing reflection (#3300). Npgsql still isn't fully trimming-friendly, but it's getting close. Breaking changes Changes to SSL configuration (SSL Mode=Require) To validate server certificates, use SSL Mode=VerifyFull (or alternatively SSL VerifyCA) instead of Require. To not validate server certificates (e.g. self-signed certificates), use SSL Mode=Require and Trust Server Certificate=true. In previous versions, specifying SSL Mode=Require made Npgsql validate the server certificate, but the standard PostgreSQL ssl_mode setting does not. As part of aligning Npgsql with other PostgreSQL drivers and tools, 6.0 now has SSL Mode=VerifyFull which corresponds to the previous Require behavior. Stopping validation for Require would align Npgsql with the PostgreSQL behavior, but would silently turn off validation for current users and expose them to potential security issues. As a result, we now require Trust Server Certificate=true to be specified with Require: this forces users to explicitly opt out of validation. In a future version, we'll remove the requirement to specify Trust Server Certificate for Require (and possibly the parameter itself). Major changes to timestamp mapping Note It is possible to opt out of these changes to maintain backwards compatibility, see below. Quick summary In many cases, is makes sense to store UTC timestamps in the database. To do this, migrate your timestamp without time zone columns to timestamp with time zone (see migration notes below), and always use either DateTime with Kind=Utc or DateTimeOffset with offset 0. If using NodaTime (recommended), use either Instant or ZonedDateTime with time zone UTC. To store non-UTC timestamps, use DateTime with Kind=Unspecified. If using NodaTime (recommended), use LocalDateTime (no explicit column configuration is required). If you're using Dapper, use version 2.0.123 or above. Earlier versions will fail when trying to send a UTC DateTime. Detailed notes The below notes will use the PostgreSQL aliases timestamptz to refer to timestamp with time zone, and timestamp to refer to timestamp without time zone. Note that timestamp with time zone represents a UTC timestamp and does not store a timezone in the database. UTC DateTime is now strictly mapped to timestamptz, while Local/Unspecified DateTime is now strictly mapped to timestamp. DateTime with Kind=UTC are now written as PostgreSQL timestamptz; previously, DateTime was always written as timestamp. It is no longer possible to write UTC DateTime as timestamp, or Local/Unspecified DateTime as timestamptz. This was previously allowed, with Npgsql performing implicit timezone conversions. Note that if you write a UTC DateTime to a PostgreSQL timestamp column, PostgreSQL will implicitly convert the timestamptz value sent by Npgsql, performing a timezone conversion based on the TimeZone parameter. timestamptz values are now read back as DateTime with Kind=UTC, without any conversions; these were previously returned as local DateTime, converted to the local machine's timezone. When reading timestamptz values as DateTimeOffset, UTC values (offset 0) are always returned. DbType.DateTime now maps to timestamptz, not timestamp. DbType.DateTime2 continues to map to timestamp, and DbType.DateTimeOffset continues to map to timestamptz, as before. Unless you're writing cross-database applications, consider using NpgsqlDbType instead of DbType to specify precise PostgreSQL types, or simply let Npgsql infer the types by not setting either. It is no longer possible to write DateTimeOffset with offsets other than 0 (UTC), since these cannot be represented in PostgreSQL. These were previously implicitly converted to UTC before sending. It is no longer possible to read or write timetz as DateTime or TimeSpan, as these don't have a timezone. This was previously allowed, with the offset being stripped. See the EF Core provider docs for additional changes at the EF level. NodaTime changes Instant is now sent as a timestamptz value, and not as a timestamp, since they represent a universally agreed-upon point in time. To send a timestamp, use LocalDateTime. When reading timestamptz as ZonedDateTime or OffsetDateTime, UTC values are always returned. Previously, local values based on the PostgreSQL TimeZone parameter were returned. Note In most cases, storing UTC timestamps is the recommended practice. If this is what you're doing, it's strongly recommended to migrate all relevant columns from timestamp columns to timestamptz. See below for how to do this. Migrating columns from timestamp to timestamptz Migrating timestamp columns to timestamptz is a simple procedure, but care must be taken, depending on the current contents of your column. As a starting point, let's assume your existing timestamp column has the timestamp 2020-01-01 12:00:00: SELECT \"created_on\", pg_typeof(\"created_on\") AS type FROM \"Blogs\"; Results in: created_on | type ---------------------+----------------------------- 2020-01-01 12:00:00 | timestamp without time zone The following SQL will change the column's type to timestamptz: ALTER TABLE blogs ALTER COLUMN created_on TYPE timestamp with time zone; When converting the timestamp without time zone column to timestamp with time zone, PostgreSQL will assume that existing values are local timestamps, and will convert them to UTC based on the TimeZone parameter. Performing the above query will result in something like: CreatedOn | type ------------------------+-------------------------- 2020-01-01 12:00:00+02 | timestamp with time zone This means that your new timestamptz column now contains 10:00 UTC, which is probably not what you want: if the original values were in fact UTC values, you need them to be preserved as-is, changing only the column type. To do this, set TimeZone to UTC before executing the ALTER TABLE: SET TimeZone='UTC'; ALTER TABLE blogs ALTER COLUMN created_on TYPE timestamp with time zone; This will ensure that no time zone conversions will be applied when converting the columns: CreatedOn | type ------------------------+-------------------------- 2020-01-01 14:00:00+02 | timestamp with time zone Opting out of the new timestamp mapping logic The changes described above are far-reaching, and may break applications in various ways. You can upgrade to version 6.0 but opt out of the new mapping by enabling the Npgsql.EnableLegacyTimestampBehavior AppContext switch. To do this and revert to the legacy timestamp behavior, add the following at the start of your application, before any Npgsql operations are invoked: AppContext.SetSwitch(\"Npgsql.EnableLegacyTimestampBehavior\", true); NodaTime: tstzrange and daterange are mapped to Interval and DateInterval by default When using NodaTime, reading a PostgreSQL tstzrange returns Interval instead of NpgsqlRange<Instant> (#4070), and reading a PostgreSQL daterange returns DateInterval instead of NpgsqlRange<LocalDate> (#3973). It is still possible to read NpgsqlRange by via reader.GetFieldValue<NpgsqlRange<Instant>> and reader.GetFieldValue<NpgsqlRange<LocalDate>>. Date/time min/max values are now converted to PostgreSQL infinity values by default PostgreSQL has special infinity and -infinity values for timestamps and dates, which are later and earlier than other value. Npgsql has supported mapping DateTime.MaxValue and MinValue to these infinity values via an Convert Infinity DateTime connection string parameter, which was disabled by default. This behavior is now on by default, since DateTime.MaxValue and MinValue are very rarely used as actual timestamps/dates, and the Convert Infinity DateTime parameter has been removed. To disable infinity conversions, add the following at the start of your application: AppContext.SetSwitch(\"Npgsql.DisableDateTimeInfinityConversions\", true); See the date/time documentation for more details. PG intervals with months/years can no longer be read as TimeSpan The PostgreSQL interval type can contain months and years, which are time units without a fixed, absolute duration (different months have different numbers of days). In contrast, .NET TimeSpan is always an absolute duration, and does not support months or years. Previously, when reading intervals as TimeSpan, Npgsql read months as 30-day units, which was incorrect and could yield wrong results. To read intervals with month/year components, consider using NodaTime's Period type, which is perfectly suited for representing intervals and is supported by Npgsql. Otherwise, you can read intervals as NpgsqlInterval, provides direct, raw access to the PostgreSQL data which Npgsql receives. Finally, if you want to continue treating months as 30-day units, consider changing your interval data in the database, so that e.g. '1 month 20 days' becomes '50 days'. NpgsqlStatement and PostgresException.Statement have been removed Npgsql versions before 6.0 exposed an NpgsqlStatement type, which contained information on individual statements within an NpgsqlCommand batch. Npgsql introduces support for the new standardized ADO.NET DbBatch type, which has numerous advantages compared to the previous support. While executing multiple statements in a single NpgsqlCommand is still supported for backwards compatibility, NpgsqlCommand no longer exposes per-statement information via NpgsqlStatement as before. Consider using the new NpgsqlBatch for all batched executions instead: it exposes the BatchCommands property which is similar to the previous Statements property. Accordingly, PostgresException.Statement has been removed, and replaced by BatchCommand which is only populated when executing via NpgsqlBatch. The default SSL Mode is now Prefer When SSL Mode isn't specified on the connection string, it used to default to Disable; it is now Prefer. This means that SSL will be used when the server supports it, and if a custom certificate validation callback is set, failure to validate would cause the connection to fail. See the Security and encryption page for more details. The logical replication API has been redone As part of the redesign around logical replication support, some major changes to the API had to be done. Applications will have to be changed to use the new API. Arrays/lists over ranges are mapped to PG14 multiranges PostgreSQL 14 introduced a new multirange type, which is very similar to an array of ranges but supports various range-related operations efficiently. The provider now maps arrays and lists of NpgsqlRange to these new types by default. You can still read old-style arrays over ranges by explicitly specifying the type: var arrayOverRange = reader.GetFieldValue<NpgsqlRange<int>[]>(0); You can also write arrays over ranges by explicitly specifying the NpgsqlDbType: var parameter = new NpgsqlParameter { Value = new NpgsqlRange<int>[] { ... }, NpgsqlDbType = NpgsqlDbType.IntegerRange | NpgsqlDbType.Array }; DBNull no longer permitted in arrays Previously, it was possible to write an object[] containing DBNull as a way of indicating null; this is no longer supported. Instead, use C# null. Parameter name matching changed around case-sensitivity When using named parameter placeholders, Npgsql now only does a single pass to match placeholders to parameters, taking the first parameter whose name passes a case-insensitive match. Npgsql previously did two passes - a case-insensitive pass, followed by a case-sensitive one if the first pass failed to match; this was detrimental to performance in some scenarios. This behavioral change is only visible when using two parameters with names that are identical except for case; this is generally discouraged. To revert to the legacy two-pass behavior, add the following at the start of your application, before any Npgsql operations are invoked: AppContext.SetSwitch(\"Npgsql.EnableLegacyCaseInsensitiveDbParameters\", true); Note: version 6.0.0 and 6.0.1 changed parameter matching to be case-sensitive. This change was rolled back in 6.0.2 since it could lead to data loss in some scenarios. The provider-specific date/time types have been obsoleted Npgsql contains provider-specific NpgsqlDateTime, NpgsqlDate and NpgsqlTimeSpan types, which were designed to provide the same APIs as the corresponding built-in BCL types, but to support the full range of the PostgreSQL types. These types were buggy and inefficient in many ways, and have been obsoleted; they will be removed in Npgsql 7.0. Instead of the obsoleted types, use the following techniques: NodaTime can be used to interact with values which are out-of-range for the BCL types. To support values which are out-of-range for NodaTime, PostgreSQL timestamps can now be read/written as long, and dates can be read/written as int. These are the raw PostgreSQL representations, with no operations - they simply provide an \"escape hatch\" in case users need to interact with out-of-range values. For interval, a new NpgsqlInterval type has been introduced, which again contains the raw PostgreSQL data (months, days, time). Npgsql.LegacyPostgis has been removed The Npgsql.LegacyPostgis plugin, which mapped legacy Npgsql types to PostGIS, has been removed and no longer ships (#3962). Use Npgsql.NetTopologySuite to work with PostGIS. Contributors Thank you very much to the following people who have contributed to the individual 6.0.x. releases. Milestone 6.0.8 Contributor Assigned issues @roji 1 @vonzshik 1 Milestone 6.0.7 Contributor Assigned issues @vonzshik 4 @roji 2 @Brar 1 Milestone 6.0.6 Contributor Assigned issues @vonzshik 3 Milestone 6.0.5 Contributor Assigned issues @roji 4 @alitas 1 @davidhunt135 1 @vonzshik 1 Milestone 6.0.4 Contributor Assigned issues @roji 13 @vonzshik 10 Milestone 6.0.3 Contributor Assigned issues @roji 8 @vonzshik 3 @Brar 2 @NinoFloris 2 Milestone 6.0.2 Contributor Assigned issues @roji 3 @NinoFloris 1 Milestone 6.0.1 Contributor Assigned issues @vonzshik 5 @roji 4 @NinoFloris 1 @zitmen 1 Milestone 6.0.0 Contributor Assigned issues @roji 42 @vonzshik 34 @Brar 7 @NinoFloris 3 @Emill 2 @manandre 2 @mdalepiane 1 @mintsoft 1 @Seltzer 1 @TwentyFourMinutes 1"
  },
  "doc/release-notes/7.0.html": {
    "href": "doc/release-notes/7.0.html",
    "title": "Npgsql 7.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 7.0 Release Notes Npgsql version 7.0 has been released and is available on nuget. New features The full list of issues for this release is available here. DbDataSource A major improvement in Npgsql 7.0 is NpgsqlDataSource, which implements the new DbDataSource abstraction in .NET System.Data. A data source represents your PostgreSQL database, and can hand out connections to it or support direct execution of SQL to it. Instead of directly instantiating an NpgsqlConnection and then executing commands against it, you now create a data source once, and then use that throughout your application: await using var dataSource = NpgsqlDataSource.Create(connectionString); // Execute a command directly against the data source, no NpgsqlConnection needed: await using var command = dataSource.CreateCommand(\"INSERT INTO some_table (some_field) VALUES (8)\"); await command.ExecuteNonQueryAsync(); // Open a connection in order to e.g. start a transaction on it: await using var connection = await dataSource.OpenConnectionAsync(); Since the data source encapsulates all the necessary configuration for connecting to a database (e.g. the connection string, authentication callbacks...), it can be registered in dependency injection or passed around as needed, without needing any additional information. The new NpgsqlDataSourceBuilder also provides the ideal API point for various configuration when building a data source: var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"Host=localhost;Username=test;Password=test\"); dataSourceBuilder .UseLoggerFactory(loggerFactory) // Configure logging .UsePeriodicPasswordProvider() // Automatically rotate the password periodically .UseNodaTime(); // Use NodaTime for date/time types await using var dataSource = dataSourceBuilder.Build(); If you're using dependency injection (e.g. in an ASP.NET application), see the Npgsql.DependencyInjection package for an easy way to set up your data source. Improved logging with Microsoft.Extensions.Logging Previous versions had a custom logging implementation which required special adapters and was hard to use. Npgsql 7.0 fully supports the standard .NET Microsoft.Extensions.Logging - just provide Npgsql with your ILoggerFactory and you're ready to go. If you using ASP.NET, things are even easier with the new Npgsql.DependencyInjection, which takes care of seamlessly picking up the ASP.NET logging configuration from DI: var builder = WebApplication.CreateBuilder(args); builder.Logging.AddConsole(); builder.Services.AddNpgsqlDataSource(\"Host=localhost;Username=test;Password=test\"); For more details, see the updated logging documentation page. Support for version 3 of the logical replication protocol PostgreSQL 15 introduced improvements to logical replication, in particular around streaming large, in-progress transactions. Npgsql 7.0 adds support for improvements - see #4216 for more information (thanks @Brar!). Breaking changes CommandType.StoredProcedure now invokes procedures instead of functions When NpgsqlCommand.CommandType is set to CommandType.StoredProcedure, Npgsql now generates SQL for invoking a PostgreSQL stored procedure, and not a function, as before. To opt out of this breaking change and continue to invoke functions as before, enable the Npgsql.EnableStoredProcedureCompatMode AppContext switch as follows: AppContext.SetSwitch(\"Npgsql.EnableStoredProcedureCompatMode\", true); For context, PostgreSQL originally only supported functions, and did not support the standard SQL concept of stored procedures; because of this, CommandType.StoredProcedure was implemented to invoke functions. PostgreSQL 11 then introduced stored procedures, which have various advantages over functions in some scenarios (e.g. the ability to use transactions). The 7.0 release changes CommandType.StoredProcedure to invoke procedures as its naming suggests, and aligns Npgsql with other database providers for better compatibility. Note that with Npgsql, there is no advantage in using CommandType.StoredProcedure over simply invoking your function or procedure via SQL. Doing so is in fact recommended: // Invoke a procedure using var command1 = new NpgsqlCommand(\"CALL some_procedure($1, $2)\", connection) { new() { Value = \"some_value\" }, new() { Value = \"some_other_value\" } }; // Invoke a function using var command2 = new NpgsqlCommand(\"SELECT * FROM some_function($1, $2)\", connection) { new() { Value = \"some_value\" }, new() { Value = \"some_other_value\" } }; For more information on calling procedures and functions, see this doc section. Managing type mappings at the connection level is no longer supported Previous versions of Npgsql allowed mapping custom types (enums/composites) and configuring plugins (NetTopologySuite, NodaTime) at the connection level; the type mapping change would persist only for the lifetime of the connection, and would be reverted when the connection closed. This mechanism was inefficient - connections get opened and closed a lot - and added significant maintenance burden internally. With the introduction of NpgsqlDataSource, Npgsql now has a natural API point for managing type mappings: var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"Host=localhost;Username=test;Password=test\"); dataSourceBuilder.MapEnum<MyEnum>(); dataSourceBuilder.UseNodaTime(); await using var dataSource = dataSourceBuilder.Build(); All connections handed out by the data source will use the configured type mappings. Note that managing type mappings globally via NpgsqlConnection.GlobalTypeMapper is supported as before, but has been marked as obsolete; although we do not plan on removing global type mappings any time soon, NpgsqlDataSourceBuilder is now the recommended way to manage type mappings. Global type mappings must now be done before any usage Previously, any type mapping configuration done via NpgsqlConnection.GlobalTypeMapper would take effect for any new connection opened after the change. Starting with 7.0, global type mappings must be done before the data source or pool is created. To ensure correct functioning, do any global type mappings at the very start of your program, before using any other Npgsql API. NpgsqlDataReader.Dispose no longer swallows exceptions Previously, when an unconsumed NpgsqlDataReader was disposed, any exceptions that occurred while consuming the remaining results were swallowed and Dispose completed successfully. These exceptions are no longer swallowed, and are thrown from Dispose. This also affects scenarios where NpgsqlDataReader is used in a C# using statement. In most cases in .NET, throwing from Dispose is discouraged. If the instance being disposed is used in a using statement and some exception is thrown, that exception triggers Dispose being called (as per using), and if Dispose throws an exception of its own, then that exception bubbles up. As a result, the original exception is hidden, making it difficult to understand exactly what happened. As a result, it is common for Dispose to catch any exceptions internally and swallow them, allowing the original exception to bubble up. However, in the Npgsql case, swallowing exceptions in Dispose can have very problematic consequences. A reader can be disposed before it's entirely consumed, after only part of the result set has been read; when this happens, Npgsql consumes the rest of the result set as part of the disposal. If any errors occur past this point, then those exceptions were previously swallowed; this meant that the application could be unaware that part of the command failed, since no exception was raised. Throwing these exceptions from dispose ensures that the application is aware of any failures that occurred. For more context on this change, see the discussion in #4377. The logging API has been replaced by Microsoft.Extensions.Logging Npgsql previously had its own logging API, requiring special adapters to the standard logging libraries. This API has been removed in 7.0, and replaced with support for the standard Microsoft.Extensions.Logging package. See Logging for more information. The obsoleted NpgsqlDateTime, NpgsqlDate and NpgsqlTimeSpan have been removed NpgsqlDateTime, NpgsqlDate and NpgsqlTimeSpan were \"provider-specific\" types, designed to expose the full range of the PostgreSQL date/time types, which can represent values beyond the built-in .NET types (e.g. DateTime). However, these types were problematic in many ways, and were seldom used. The types were obsoleted in Npgsql 6.0, and have been removed in 7.0. To deal with date/time values outside the range of the corresponding .NET types, see Date and Time Handling. NpgsqlConnection.Settings has been removed The connection's connection string is still exposed via NpgsqlConnection.ConnectionString; this can be parsed with NpgsqlConnectionStringBuilder. Replication APIs now return UTC DateTime Previously, replication APIs returned DateTime instances of Kind Unspecified; this has been changed to Utc to reflect the actual type of data sent by PostgreSQL. Contributors Thank you very much to the following people who have contributed to the individual 7.0.x. releases. Milestone 7.0.6 Contributor Assigned issues @vonzshik 10 @roji 1 Milestone 7.0.4 Contributor Assigned issues @vonzshik 3 @roji 2 Milestone 7.0.2 Contributor Assigned issues @vonzshik 5 @manandre 2 @roji 1 Milestone 7.0.1 Contributor Assigned issues @roji 3 @Brar 1 @vonzshik 1 Milestone 7.0.0 Contributor Assigned issues @roji 37 @Brar 9 @vonzshik 4 @0xced 1 @baal2000 1"
  },
  "doc/release-notes/8.0.html": {
    "href": "doc/release-notes/8.0.html",
    "title": "Npgsql 8.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 8.0 Release Notes Npgsql version 8.0 is out and available on nuget.org. Note Npgsql 8.0 will be the last version to support .NET Framework (via .NET Standard 2.0). Starting with 9.0, Npgsql will only target .NET TFMs supported at release time (i.e. net6.0). NativeAOT and trimming support Npgsql 8.0 now has 1st-class support for NativeAOT and trimming; the entire library has been properly annotated and is safe for use in applications. The majority of features have been made compatible with NativeAOT/trimming and can be used without issues, and most applications using Npgsql can be used as-is with NativeAOT/trimming without any changes. A few features which are incompatible require an explicit code opt-in, which generates a warning if used with NativeAOT/trimming enabled (see breaking change note). Considerable effort has gone into reducing Npgsql's size footprint; a minimal Npgsql application using NativeAOT and trimming now takes only around 5MB of disk space. To allow users to achieve a minimal size footprint, NpgsqlSlimDataSourceBuilder has been introduced; unlike the standard NpgsqlDataSourceBuilder, this builder includes only the very minimum of functionality by default, and allows adding additional features via opt-ins. This allows a pay-per-play approach to application size, where developers can choose only the features they actually need for optimal size. For more information, see NpgsqlSlimDataSourceBuilder. Making Npgsql NativeAOT/trimming-compatible was a far-reaching effort, affecting many parts of the driver and involving a rewrite of large parts of Npgsql's internals (leading to many other internal improvements). This huge task was done mainly by Nino Floris, with considerable contributions by Nikita Kazmin. OpenTelemetry metrics Npgsql has emitted metrics for several versions, which provided aggregated metrics on various Npgsql interals; for example, it was possible to follow the state of the connection pool, or to track how many commands are being executed per second. Npgsql 8.0 improves on that by switching from the older EventCounter API to the newer System.Diagnostics.Metrics API, implementing OpenTelemetry metrics. To understand more about the different kinds of metrics APIs in .NET, see these docs. The new metrics have several advantages over the old one; for one thing, they allow associating multiple dimensions to metrics, e.g. allowing Npgsql to cleanly emit pool-related metrics separately for each data source (or connection string) used in the application. The Npgsql metrics implement the experimental OpenTelemetry semantic conventions for database metrics - adding some additional useful ones - and will evolve as that specification stabilizes. For more information, see the doc page on metrics. Register NpgsqlDataSource as a keyed DI service .NET 8.0 introduced keyed services for dependency injection, allowing multiple services with the same CLR type to be registered in a single DI service provider. This is particularly useful when needing to contact multiple databases from your DI-enabled application: var builder = WebApplication.CreateBuilder(args); builder.Services .AddNpgsqlDataSource(\"Host=localhost;Database=CustomersDB;Username=test;Password=test\", serviceKey: DatabaseType.CustomerDb) .AddNpgsqlDataSource(\"Host=localhost;Database=OrdersDB;Username=test;Password=test\", serviceKey: DatabaseType.OrdersDb); var app = builder.Build(); app.MapGet(\"/\", async ([FromKeyedServices(DatabaseType.OrdersDb)] NpgsqlConnection connection) => connection.ConnectionString); app.Run(); enum DatabaseType { CustomerDb, OrdersDb } In this ASP.NET Minimal API application, two Npgsql data sources are registered in DI - one for a customers database, and another for an orders database. When a data source - or connections - needs to be injected somewhere, an enum is used as the service key, to distinguish which database is being requested (note that connections to both databases can be requested by the same function!). For more information on registering Npgsql services in DI, see the documentation for Npgsql.DependencyInjection. Other features Allow using nullable value types with the generic NpgsqlParameter<T>, e.g. NpgsqlParameter<int?>. Introduce a non-caching password provider callback via NpgsqlDataSourceBuilder.UsePasswordProvider. Allow customizing System.Text.Json JsonSerializationOptions via NpgsqlDataSourceBuilder.ConfigureJsonOptions. Improvements and cleanup for networking type mappings: In addition to .NET IPAddress, PostgreSQL inet can also mapped to be mapped to NpgsqlInet, which is an immutable struct containing both IP and netmask components. PostgreSQL cidr is now mapped to the newly-introduced NpgsqlCidr. The mapping to ValueTuple<IPAddress, int> has been removed. Allow providing the root certificate programmatically via the new NpgsqlDataSourceBuilder.UseRootCertificate Version 8.0 contains many other smaller features and bug fixes, see the 8.0.0 milestone for the full list of issues. Breaking changes JSON POCO and other dynamic features now require an explicit opt-in Npgsql 8.0 is fully compatible with NativeAOT and trimming (see above). While most driver capabilities have been made to work in those profiles, certain features involve dynamic coding practices and are incompatible with NativeAOT and/or trimming - at least for now. As a result, these features now require explicit opt-ins (annotated to be incompatible with NativeAOT/trimming), which you must add either on your NpgsqlDataSourceBuilder or on NpgsqlConnection.GlobalTypeMapper: PostgreSQL type Default .NET type JSON POCO mapping, JsonNode and subtypes EnableDynamicJson Unmapped enums, ranges, multiranges EnableUnmappedTypes Read PostgreSQL records as .NET tuples EnableRecordsAsTuples Existing code using the above features will start throwing exceptions after upgrading to Npgsql 8.0; the exceptions provide explicit guidance on how to add the opt-ins. SSL Mode=Require no longer validates certificates tl;dr use SSL Mode=VerifyCA or VerifyFull in order to validate certificates provided by PostgreSQL. In versions of Npgsql older than 6.0, specifying SSL Mode=Require made Npgsql validate the SSL/TLS certificate provided by PostgreSQL. This did not align with the meaning of \"require\" in PostgreSQL and other clients, where it simply means that SSL/TLS is required, but without certificate validation. To align with the standard PostgreSQL meaning, starting with Npgsql 6.0 VerifyCA or VerifyFull must be specified to validate the certificate. To prevent existing usage of Require to silently stop validating, Npgsql 6.0 and 7.0 forced Trust Server Certificate=true to be specified; this made users aware of the change, guiding them to either switch to VerifyCA/VerifyFull (if they want validation) or to add Trust Server Certificate=true (if they don't). After two major versions, we are now removing the requirement to specify Trust Server Certificate=true with SSL Mode=Require; the latter will behave in the standard PostgreSQL way and will not verify certificates. For more context, see #3988. IList<T> mapping now requires a generic NpgsqlParameter<T> Previous versions of Npgsql allowed writing arbitrary list types as PostgreSQL array, as long as they implemented the IList<T> interface: await using var command = new NpgsqlCommand(\"SELECT $1\", conn) { Parameters = { new NpgsqlParameter { Value = new ReadOnlyCollection<int>(new List<int> { 1, 2, 3 }) } } }; await using var reader = await command.ExecuteReaderAsync(); This capability has been removed; supporting it required a costly reflection check, which also would be difficult to implement with trimming enabled, potentially increasing binary size in an unacceptable way. As a mitigation, you can instead use the generic NpgsqlParameter<T> - typed with IList<T> - to do the same: await using var command = new NpgsqlCommand(\"SELECT $1\", conn) { Parameters = { new NpgsqlParameter<IList<int>> { Value = new ReadOnlyCollection<int>(new List<int> { 1, 2, 3 }) } } }; await using var reader = await command.ExecuteReaderAsync(); cidr now maps to NpgsqlCidr instead of ValueTuple<IPAddress, int> As part of improving Npgsql's support for the PostgreSQL network mappings (see above), the PostgreSQL cidr type now maps to the newly-introduced NpgsqlCidr, and can no longer be mapped to ValueTuple<IPAddress, int>. Obsoletions and obsolete API removals NpgsqlTsVector.Parse() and NpgsqlTsQuery.Parse() are now obsolete. These methods attempted to mimic the behavior of the PostgreSQL to_tsvector and to_tsquery functions, but could only do so partially and in problematic ways. Use the PostgreSQL functions instead. The parsing functions on the built-in geometry types (NpgsqlPoint, NpgsqlBox etc.) have been removed; similarly, they partially replicated PostgreSQL parsing functionality client-side and had issues. NpgsqlLargeObjectManager and NpsgqlLargeObjectStream are now obsolete. These types were very rarely-used, provided only a thin wrapper over easily-accessible PostgreSQL large-object functions, and limited usage in various ways (e.g. they didn't allow batching). Call the PostgreSQL large-object functions directly. The Internal Command Timeout connection string parameter has been obsoleted. NpgsqlDbType.TimestampTZ and NpgsqlDbType.TimeTZ were obsoleted many releases ago, and were finally removed. Use NpgsqlDbType.TimestampTz and NpgsqlDbType.TimeTz instead. Executing a void-returning function returns .NET null instead of DBNull Previously, executing a void-returning returned DBNull.Value: var command = new NpgsqlCommand(\"SELECT pg_sleep(10)\", connection); var result = await command.ExecuteScalarAsync(); Before 8.0, result had the value DBNull.Value; this has been changed in 8.0 to be .NET null. This is more correct (as there are no results, rather than a result containing NULL), aligns with ADO.NET standard practices and with other drivers. Plugin APIs have been changed for NativeAOT/trimming support As part of the effort to make Npgsql compatible with NativeAOT and trimming, the plugin API was changed in fundamental, breaking ways. Although this API never had the stability guarantees of a true public API (it was and still is in an Internal namespace), external plugins which were developed with it will require adjustments. Contributors Thank you very much to the following people who have contributed to the individual 8.0.x. releases. Milestone 8.0.0 Contributor Assigned issues @NinoFloris 43 @vonzshik 23 @roji 20 @manandre 4 @BogdanYarotsky 1 @Brar 1 @erikdesj 1 @SoftStoneDevelop 1 @sonquer 1 @yucelkivanc-hepsiburada 1"
  },
  "doc/replication.html": {
    "href": "doc/replication.html",
    "title": "Logical and Physical Replication | Npgsql Documentation",
    "keywords": "Logical and Physical Replication Replication allows a client to receive a continuous stream of updates from a PostgreSQL database, providing a near-realtime view of all changes as they occur. While this feature was originally developed to keep PostgreSQL standby replicas in sync with a primary, it can be used by arbitrary client applications. Replication can be used anywhere where a constant change feed of database changes is required; for example, an external application can be notified in near-realtime of any changes that occurred in a particular database table. This can be useful for external auditing purposes, for replicating certain data somewhere else, for implement the outbox pattern (see Additional resources below), and various other usages. Npgsql provides a 1st-class API for writing .NET replication clients, detailed below. While PostgreSQL supports both logical and physical replication, in the majority of cases .NET applications will want to use logical replication. Logical replication Logical replication is a means to stream messages generated by PostgreSQL logical decoding plugins to a client. The default implementation that is used by PostgreSQL itself to perform logical server to server replication is the Logical Streaming Replication Protocol which uses the pgoutput plugin, but PostgreSQL supports streaming messages generated by other plugins too and Npgsql supports receiving those. General setup To set up logical replication, follow the quick setup instructions in the PostgreSQL docs (note that a SUBSCRIPTION isn't required since the client isn't PostgreSQL): Enable logical replication in your postgresql.conf file: wal_level = logical Set up a replication user in your pg_hba.conf file: host replication repuser 0.0.0.0/0 md5 The user repuser must exist in your cluster and either be a superuser or have the replication attribute set. See CREATE ROLE docs. Logical Streaming Replication Protocol (pgoutput plugin) The modern, recommended way to perform logical replication was introduced in PostgreSQL 10 - see the PostgreSQL documentation. This method, using the built-in pgoutput replication plugin, streams efficient, binary messages to represent database updates such as INSERT, UPDATE and DELETE (see the full list); Npgsql exposes these messages as an IAsyncEnumerable which can easily be enumerated and consumed. Create a publication, which defines the group of tables in the database you wish to replicate: CREATE PUBLICATION blog_pub FOR TABLE blogs; Create a replication slot, which will hold the state of the replication stream: SELECT * FROM pg_create_logical_replication_slot('blog_slot', 'pgoutput'); If your application goes down, the slot persistently records the last data streamed to it, and allows resuming the application at the point where it left off. At this point, everything is ready to start replicating! Create this simple .NET program with Npgsql: await using var conn = new LogicalReplicationConnection(\"<connection_string>\"); await conn.Open(); var slot = new PgOutputReplicationSlot(\"blog_slot\"); // The following will loop until the cancellation token is triggered, and will print message types coming from PostgreSQL: var cancellationTokenSource = new CancellationTokenSource(); await foreach (var message in conn.StartReplication( slot, new PgOutputReplicationOptions(\"blog_pub\", 1), cancellationTokenSource.Token)) { Console.WriteLine($\"Received message type: {message.GetType().Name}\"); // Always call SetReplicationStatus() or assign LastAppliedLsn and LastFlushedLsn individually // so that Npgsql can inform the server which WAL files can be removed/recycled. conn.SetReplicationStatus(message.WalEnd); } For example, if you insert a new row into your blogs table, you should see the following output: Received message type: BeginMessage Received message type: RelationMessage Received message type: InsertMessage Received message type: CommitMessage Warning Npgsql internally recycles the message instances it hands out. It is an error to use a message received from StartReplication once the next message has been read. The above was just a minimal \"getting started\" guide for logical replication - many additional configuration options and modes exist as well. Consult the PostgreSQL documentation for more details. Test decoding (test_decoding plugin) An additional logical replication plugin which Npgsql supports is test_decoding. This plugin outputs textual representations of events, which are less efficient and need to be parsed; it is meant for testing that replication works rather than for building robust production apps. However, it can still be useful in some scenarios, especially in older PostgreSQL versions where pgoutput wasn't yet introduced. To use test_decoding, first create a logical replication slot with test_decoding as the plugin type. SELECT * FROM pg_create_logical_replication_slot('blog_slot', 'test_decoding'); After that use the following: await using var conn = new LogicalReplicationConnection(\"Host=localhost;Username=test;Password=test\"); await conn.Open(); var slot = new TestDecodingReplicationSlot(\"blog_slot\"); // The following will loop until the cancellation token is triggered, and will print message types coming from PostgreSQL: var cancellationTokenSource = new CancellationTokenSource(); await foreach (var message in conn.StartReplication(slot, cancellationTokenSource.Token)) { Console.WriteLine($\"Message: {message.Data}\"); // Always call SetReplicationStatus() or assign LastAppliedLsn and LastFlushedLsn individually // so that Npgsql can inform the server which WAL files can be removed/recycled. conn.SetReplicationStatus(message.WalEnd); } Inserting a row will produce the following string messages: Message: BEGIN 230413 Message: table public.blogs: INSERT: id[integer]:2 name[text]:'blog1' Message: COMMIT 230413 Warning Npgsql internally recycles the message instances it hands out. It is an error to use a message received from StartReplication once the next message has been read. Physical replication Finally, PostgreSQL also supports physical replication, which streams raw block data rather than logical events on changes. While useful for synchronizing PostgreSQL replicas and supported by Npgsql, this mode is unlikely to be useful for a typical .NET program client. Additional resources See here for a great post on implementing the outbox pattern via PostgreSQL logical replication. The outbox pattern guarantees delivery of an event from the database to e.g. a queue."
  },
  "doc/security.html": {
    "href": "doc/security.html",
    "title": "Security and Encryption | Npgsql Documentation",
    "keywords": "Security and Encryption Password management The simplest way to log into PostgreSQL is by specifying a Username and a Password in your connection string. Depending on how your PostgreSQL is configured (in the pg_hba.conf file), Npgsql will send the password in MD5 or in cleartext (not recommended). If a Password is not specified and your PostgreSQL is configured to request a password, Npgsql will look for a standard PostgreSQL password file. If you specify the Passfile connection string parameter, the file it specifies will be used. If that parameter isn't defined, Npgsql will look under the path taken from PGPASSFILE environment variable. If the environment variable isn't defined, Npgsql will fall back to the system-dependent default directory which is $HOME/.pgpass for Unix and %APPDATA%\\postgresql\\pgpass.conf for Windows. Auth token rotation and dynamic password In some cloud scenarios, logging into PostgreSQL is done with an auth token that is rotated every time interval (e.g. one hour). Npgsql has a built-in periodic password provider mechanism, which allows using an up-to-date access token with zero effort: var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UsePasswordProvider( passwordProvider: _ => throw new NotSupportedException(), passwordProviderAsync: (builder, token) => /* code to fetch the new access token */); await using var dataSource = dataSourceBuilder.Build(); Every time a new physical connection needs to be opened to PostgreSQL, either the synchronous passwordProvider or the asynchronous passwordProviderAsync will be called (depending whether you used Open() or OpenAsync()). Since modern .NET applications are encouraged to always use asynchronous I/O, it's good practice to simply throw in the synchronous password provider, as above. Note that since the password provider is invoked every time a physical connection is opened, it shouldn't take too long; typically, this would call into a cloud provider API (e.g. Azure Managed Identity), which itself implements a caching mechanism. However, if no such caching is done and the code could take a while, you can instead instruct Npgsql to cache the auth token for a given amount of time: dataSourceBuilder.UsePeriodicPasswordProvider( (settings, cancellationToken) => /* async code to fetch the new access token */, TimeSpan.FromMinutes(55), // Interval for refreshing the token TimeSpan.FromSeconds(5)); // Interval for retrying after a refresh failure Finally, if you already have code running when the auth token changes, you can simply inject it manually at any time into a working data source: dataSource.Password = <new password>; Any physical connection that's opened after this point will use the newly-injected password. Encryption (SSL/TLS) By default PostgreSQL connections are unencrypted, but you can turn on SSL/TLS encryption if you wish. First, you have to set up your PostgreSQL to receive SSL/TLS connections as described here. Once that's done, specify SSL Mode in your connection string as detailed below. Version 6.0+ Older versions Starting with 6.0, the following SSL Mode values are supported (see the PostgreSQL docs for more details): SSL Mode Eavesdropping protection Man-in-the-middle protection Statement Disable No No I don't care about security, and I don't want to pay the overhead of encryption. Allow Maybe No I don't care about security, but I will pay the overhead of encryption if the server insists on it. Prefer (default) Maybe No I don't care about encryption, but I wish to pay the overhead of encryption if the server supports it. Require1 Yes No I want my data to be encrypted, and I accept the overhead. I trust that the network will make sure I always connect to the server I want. VerifyCA Yes Depends on CA policy I want my data encrypted, and I accept the overhead. I want to be sure that I connect to a server that I trust. VerifyFull Yes Yes I want my data encrypted, and I accept the overhead. I want to be sure that I connect to a server I trust, and that it's the one I specify. 1 Prior to Npgsql 8.0, SSL Mode=Require required explicitly setting Trust Server Certificate=true as well, to make it explicit that the server certificate isn't validated. Starting with 8.0, Trust Server Certificate=true is no longer required and does nothing. The default mode in 6.0+ is Prefer, which allows SSL but does not require it, and does not validate certificates. Versions prior to 6.0 supported the following SSL Mode values: SSL Mode Eavesdropping protection Man-in-the-middle protection Statement Disable No No I don't care about security, and I don't want to pay the overhead of encryption. Prefer Maybe Maybe I don't care about encryption, but I wish to pay the overhead of encryption if the server supports it. Require Yes Yes I want my data encrypted, and I accept the overhead. I want to be sure that I connect to a server I trust, and that it's the one I specify. The default mode prior to 6.0 was Disable. To disable certificate validation when using Require, set Trust Server Certificate to true; this allows connecting to servers with e.g. self-signed certificates, while still requiring encryption. Advanced server certificate validation If the root CA of the server certificate isn't installed in your machine's CA store, validation will fail. Either install the certificate in your machine's CA store, or point to it via the Root Certificate connection string parameter or via the PGSSLROOTCERT environment variable. Note that Npgsql does not perform certificate revocation validation by default, since this is an optional extension not implemented by all providers and CAs. To turn on certificate revocation validation, specify Check Certificate Revocation=true on the connection string. Finally, if the above options aren't sufficient for your scenario, you can call NpgsqlDataSourceBuilder.UseUserCertificateValidationCallback to provide your custom server certificate validation logic (this gets set on the underlying .NET SslStream). Client certificates PostgreSQL may be configured to require valid certificates from connecting clients for authentication. Npgsql automatically sends client certificates specified in the following places: The SSL Certificate connection string parameter. The PGSSLCERT environment variable. The default locations of ~/.postgresql/postgresql.crt (on Unix) or %APPDATA%\\postgresql\\postgresql.crt (on Windows) To provide a password for a client certificate, set either the SSL Password (6.0 and higher) or Client Certificate Key (5.0 and lower) connection string parameter. Finally, you can call NpgsqlDataSourceBuilder.UseClientCertificate, NpgsqlDataSourceBuilder.UseClientCertificates or NpgsqlDataSourceBuilder.UseClientCertificatesCallback to programmatically provide a certificate, multiple certificates or a callback which returns certificates (this works like on the underlying .NET SslStream). Note Npgsql supports .PFX and .PEM certificates starting with 6.0. Previously, only .PFX certificates were supported. Password-less authentication (GSS/SSPI/Kerberos) Logging in with a username and password may not be ideal, since your application must have access to your password, and raise questions around secret management. An alternate way of authenticating is to use GSS or SSPI to negotiate Kerberos. The advantage of this method is that authentication is handed off to your operating system, using your already-open login session. Your application never needs to handle a password. You can use this method for a Kerberos login, Windows Active Directory or a local Windows session. Instructions on setting up Kerberos and SSPI are available in the PostgreSQL auth methods docs. Some more instructions for SSPI are available here. Once your PostgreSQL is configured correctly, it will require GSS/SSPI authentication from Npgsql at login, and you can simply drop the Password parameter from the connection string. However, Npgsql must still send a username to PostgreSQL. If you specify a Username connection string parameter, Npgsql will send that as usual. If you omit it, Npgsql will attempt to detect your system username, including the Kerberos realm. Note that by default, PostgreSQL expects your Kerberos realm to be sent in your username (e.g. username@REALM); you can have Npgsql detect the realm by setting Include Realm to true in your connection string. Alternatively, you can disable add include_realm=0 in your PostgreSQL's pg_hba.conf entry, which will make it strip the realm. You always have the possibility of explicitly specifying the username sent to PostgreSQL yourself. Note that in versions of Npgsql prior to 8.0, use of GSS/SSPI authentication requires that Integrated Security=true be specified on the connection string. This requirement has been removed in Npgsql 8.0."
  },
  "doc/types/basic.html": {
    "href": "doc/types/basic.html",
    "title": "Supported Types and their Mappings | Npgsql Documentation",
    "keywords": "Supported Types and their Mappings The following lists the built-in mappings when reading and writing CLR types to PostgreSQL types. Note that in addition to the below, enum and composite mappings are documented in a separate page. Note also that several plugins exist to add support for more mappings (e.g. spatial support for PostGIS), these are listed in the Types menu. Read mappings The following shows the mappings used when reading values. The default type is returned when using NpgsqlCommand.ExecuteScalar(), NpgsqlDataReader.GetValue() and similar methods. You can read as other types by calling NpgsqlDataReader.GetFieldValue<T>(). Provider-specific types are returned by NpgsqlDataReader.GetProviderSpecificValue(). PostgreSQL type Default .NET type Non-default .NET types boolean bool smallint short byte, sbyte, int, long, float, double, decimal integer int byte, short, long, float, double, decimal bigint long long, byte, short, int, float, double, decimal real float double double precision double numeric decimal byte, short, int, long, float, double, BigInteger (6.0+) money decimal text string char[] character varying string char[] character string char[] citext string char[] json string char[] jsonb string char[] xml string char[] uuid Guid bytea byte[] timestamp without time zone DateTime (Unspecified) timestamp with time zone DateTime (Utc1) DateTimeOffset (Offset=0)2 date DateTime DateOnly (6.0+) time without time zone TimeSpan TimeOnly (6.0+) time with time zone DateTimeOffset interval TimeSpan3 NpgsqlInterval cidr NpgsqlCidr4 inet IPAddress NpgsqlInet macaddr PhysicalAddress tsquery NpgsqlTsQuery tsvector NpgsqlTsVector bit(1) bool BitArray bit(n) BitArray bit varying BitArray point NpgsqlPoint lseg NpgsqlLSeg path NpgsqlPath polygon NpgsqlPolygon line NpgsqlLine circle NpgsqlCircle box NpgsqlBox hstore Dictionary<string, string> oid uint xid uint cid uint oidvector uint[] name string char[] (internal) char char byte, short, int, long geometry (PostGIS) PostgisGeometry record object[] composite types T range types NpgsqlRange<TElement> multirange types (PG14) NpgsqlRange<TElement>[] enum types TEnum array types Array (of element type) 1 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), reading a timestamp with time zone returns a Local DateTime instead of Utc. See the breaking change note for more info. 2 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), reading a timestamp with time zone as a DateTimeOffset returns a local offset based on the timezone of the server where Npgsql is running. 3 PostgreSQL intervals with month or year components cannot be read as TimeSpan. Consider using NodaTime's Period type, or NpgsqlInterval. 4 Prior to version 8.0, the default mapping for cidr was ValueTuple<IPAddress, int>. The Default .NET type column specifies the data type NpgsqlDataReader.GetValue() will return. NpgsqlDataReader.GetProviderSpecificValue will return a value of a data type specified in the Provider-specific type column, or the Default .NET type if there is no specialization. Finally, the third column specifies other CLR types which Npgsql supports for the PostgreSQL data type. These can be retrieved by calling NpgsqlDataReader.GetBoolean(), GetByte(), GetDouble() etc. or via GetFieldValue<T>(). Write mappings There are three rules that determine the PostgreSQL type sent for a parameter: If the parameter's NpgsqlDbType is set, it is used. If the parameter's DataType is set, it is used. If the parameter's DbType is set, it is used. If none of the above is set, the backend type will be inferred from the CLR value type. PostgreSQL type Default .NET types Non-default .NET types NpgsqlDbType DbType boolean bool Boolean Boolean smallint short, byte, sbyte Smallint Int16 integer int Integer Int32 bigint long Bigint Int64 real float Real Single double precision double Double Double numeric decimal, BigInteger (6.0+) Numeric Decimal, VarNumeric money decimal Money Currency text string, char[], char Text String, StringFixedLength, AnsiString, AnsiStringFixedLength character varying string, char[], char Varchar character string, char[], char Char citext string, char[], char Citext json string, char[], char Json jsonb string, char[], char Jsonb xml string, char[], char Xml uuid Guid Uuid bytea byte[] ArraySegment<byte>, Stream (7.0+) Bytea Binary timestamp with time zone DateTime (Utc)1, DateTimeOffset TimestampTz DateTime2, DateTimeOffset timestamp without time zone DateTime (Local/Unspecified)1 Timestamp DateTime2 date DateOnly (6.0+) DateTime Date Date time without time zone TimeOnly (6.0+) TimeSpan Time Time time with time zone DateTimeOffset TimeTz interval TimeSpan NpgsqlInterval Interval cidr ValueTuple<IPAddress, int>, IPAddress Cidr inet IPAddress ValueTuple<IPAddress, int> Inet macaddr PhysicalAddress MacAddr tsquery NpgsqlTsQuery TsQuery tsvector NpgsqlTsVector TsVector bit bool, BitArray, string Bit bit varying BitArray bool, BitArray, string Varbit point NpgsqlPoint Point lseg NpgsqlLSeg LSeg path NpgsqlPath Path polygon NpgsqlPolygon Polygon line NpgsqlLine Line circle NpgsqlCircle Circle box NpgsqlBox Box hstore IDictionary<string, string> Hstore oid uint Oid xid uint Xid cid uint Cid oidvector uint[] Oidvector name string, char[], char Name (internal) char byte InternalChar composite types Pre-mapped type Composite range types NpgsqlRange<TSubtype> Range | NpgsqlDbType enum types Pre-mapped type Enum array types T[], List<T> Array | NpgsqlDbType 1 UTC DateTime is written as timestamp with time zone, Local/Unspecified DateTimes are written as timestamp without time zone. In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), DateTime is always written as timestamp without time zone. 2In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), DbType.DateTime is mapped to timestamp without time zone. Notes when using Range and Array, bitwise-or NpgsqlDbType.Range or NpgsqlDbType.Array with the child type. For example, to construct the NpgsqlDbType for a int4range, write NpgsqlDbType.Range | NpgsqlDbType.Integer. To construct the NpgsqlDbType for an int[], write NpgsqlDbType.Array | NpgsqlDbType.Integer. For information about enums, see the Enums and Composites page."
  },
  "doc/types/datetime.html": {
    "href": "doc/types/datetime.html",
    "title": "Date and Time Handling | Npgsql Documentation",
    "keywords": "Date and Time Handling Warning Npgsql 6.0 introduced some important changes to how timestamps are mapped, see the release notes for more information. Note The recommended way of working with date/time types is the NodaTime plugin: the NodaTime types are much better-designed, avoid the flaws in the built-in BCL types, and are fully supported by Npgsql. Handling date and time values usually isn't hard, but you must pay careful attention to differences in how the .NET types and PostgreSQL represent dates. It's worth reading the PostgreSQL date/time type documentation to familiarize yourself with PostgreSQL's types. .NET types and PostgreSQL types The .NET and PostgreSQL types differ in the resolution and range they provide; the .NET type usually have a higher resolution but a lower range than the PostgreSQL types: PostgreSQL type Precision/Range .NET Native Type Precision/Range timestamp with time zone 1 microsecond, 4713BC-294276AD DateTime (UTC) 100 nanoseconds, 1AD-9999AD timestamp without time zone 1 microsecond, 4713BC-294276AD DateTime (Unspecified) 100 nanoseconds, 1AD-9999AD date 1 day, 4713BC-5874897AD DateOnly (6.0+), DateTime 100 nanoseconds, 1AD-9999AD time without time zone 1 microsecond, 0-24 hours TimeOnly (6.0+), TimeSpan 100 nanoseconds, -10,675,199 - 10,675,199 days time with time zone 1 microsecond, 0-24 hours DateTimeOffset (ignore date) 100 nanoseconds, 1AD-9999AD interval 1 microsecond, -178000000-178000000 years TimeSpan 100 nanoseconds, -10,675,199 - 10,675,199 days For almost all applications, the range of the .NET native types (or the NodaTime types) are more than sufficient. In the rare cases where you need to access values outside these ranges, timestamps can be accessed as long, dates as int, and intervals as NpgsqlInterval. These are the raw PostgreSQL binary representations of these type, so you'll have to deal with encoding/decoding yourself. Timestamps and timezones Warning A common mistake is for users to think that the PostgreSQL timestamp with time zone type stores the timezone in the database. This is not the case: only a UTC timestamp is stored. There is no single PostgreSQL type that stores both a date/time and a timezone, similar to .NET DateTimeOffset. To store a timezone in the database, add a separate text column containing the timezone ID. In PostgreSQL, timestamp with time zone represents a UTC timestamp, while timestamp without time zone represents a local or unspecified time zone. Starting with 6.0, Npgsql maps UTC DateTime to timestamp with time zone, and Local/Unspecified DateTime to timestamp without time zone; trying to send a non-UTC DateTime as timestamptz will throw an exception, etc. Npgsql also supports reading and writing DateTimeOffset to timestamp with time zone, but only with Offset=0. Prior to 6.0, timestamp with time zone would be converted to a local timestamp when read - see below for more details. The precise improvements and breaking changes are detailed in the 6.0 breaking changes; to revert to the pre-6.0 behavior, add the following at the start of your application, before any Npgsql operations are invoked: AppContext.SetSwitch(\"Npgsql.EnableLegacyTimestampBehavior\", true); Use of the time with time zone type is discouraged, see the PostgreSQL documentation. You can use a DateTimeOffset to read and write values - the date component will be ignored. Infinity values PostgreSQL supports the special values -infinity and infinity for the timestamp and date types (see docs); these can be useful to represent a value which is earlier or later than any other value. Starting with Npgsql 6.0, these special values are mapped to the MinValue and MaxValue value on the corresponding .NET types (DateTime and DateOnly, NodaTime Instant and LocalDate). To opt out of this behavior, set the following AppContext switch at the start of your application: AppContext.SetSwitch(\"Npgsql.DisableDateTimeInfinityConversions\", true); Note: in versions prior to 6.0, the connection string parameter Convert Infinity DateTime could be used to opt into these infinity conversions. That connection string parameter has been removed. Detailed Behavior: Reading values from the database PostgreSQL type Default .NET type Non-default .NET types timestamp with time zone DateTime (Utc1) DateTimeOffset (Offset=0)2 timestamp without time zone DateTime (Unspecified) date DateTime DateOnly (6.0+) time without time zone TimeSpan TimeOnly (6.0+) time with time zone DateTimeOffset interval TimeSpan (3) NpgsqlInterval 1 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), reading a timestamp with time zone returns a Local DateTime instead of Utc. See the breaking change note for more info. 2 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), reading a timestamp with time zone as a DateTimeOffset returns a local offset based on the timezone of the server where Npgsql is running. 3 PostgreSQL intervals with month or year components cannot be read as TimeSpan. Consider using NodaTime's Period type, or NpgsqlInterval. Detailed Behavior: Sending values to the database PostgreSQL type Default .NET types Non-default .NET types NpgsqlDbType DbType timestamp with time zone DateTime (Utc)1, DateTimeOffset TimestampTz DateTime2, DateTimeOffset timestamp without time zone DateTime (Local/Unspecified)1 Timestamp DateTime2 date DateOnly (6.0+) DateTime Date Date time without time zone TimeOnly (6.0+) TimeSpan Time Time time with time zone DateTimeOffset TimeTz interval TimeSpan Interval 1 UTC DateTime is written as timestamp with time zone, Local/Unspecified DateTimes are written as timestamp without time zone. In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), DateTime is always written as timestamp without time zone. 2In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), DbType.DateTime is mapped to timestamp without time zone."
  },
  "doc/types/enums_and_composites.html": {
    "href": "doc/types/enums_and_composites.html",
    "title": "PostgreSQL enums and composites | Npgsql Documentation",
    "keywords": "PostgreSQL enums and composites PostgreSQL supports enum types and composite types as database columns, and Npgsql supports reading and writing these. This allows you to seamlessly read and write enum and composite values to the database without worrying about conversions. Creating your types Let's assume you've created some enum and composite types in PostgreSQL: CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy'); CREATE TYPE inventory_item AS ( name text, supplier_id integer, price numeric ); To use these types with Npgsql, you must first define corresponding CLR types that will be mapped to the PostgreSQL types: public enum Mood { Sad, Ok, Happy } public class InventoryItem { public string Name { get; set; } = \"\"; public int SupplierId { get; set; } public decimal Price { get; set; } } Mapping your CLR types Once your types are defined both in PostgreSQL and in C#, you can now configure the mapping between them with Npgsql. NpgsqlDataSource Global mapping Connection mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.MapEnum<Mood>(); dataSourceBuilder.MapComposite<InventoryItem>(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource, you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.MapEnum<Mood>(); NpgsqlConnection.GlobalTypeMapper.MapComposite<InventoryItem>(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Note This mapping method has been removed in Npgsql 7.0. Older versions of Npgsql supported configuring a type mapping on an individual connection, as follows: var conn = new NpgsqlConnection(...); conn.TypeMapper.MapEnum<Mood>(); conn.TypeMapper.MapComposite<InventoryItem>(); Whatever the method used, your CLR types Mood and InventoryItem are now mapped to the PostgreSQL types mood and inventory_item. Using your mapped types Once your mapping is in place, you can read and write your CLR types as usual: // Writing await using (var cmd = new NpgsqlCommand(\"INSERT INTO some_table (my_enum, my_composite) VALUES ($1, $2)\", conn)) { cmd.Parameters.Add(new() { Value = Mood.Happy }); cmd.Parameters.Add(new() { Value = new InventoryItem { ... } }); cmd.ExecuteNonQuery(); } // Reading await using (var cmd = new NpgsqlCommand(\"SELECT my_enum, my_composite FROM some_table\", conn)) await using (var reader = cmd.ExecuteReader()) { reader.Read(); var enumValue = reader.GetFieldValue<Mood>(0); var compositeValue = reader.GetFieldValue<InventoryItem>(1); } Note that your PostgreSQL enum and composites types (mood and inventory_data in the sample above) must be defined in your database before the first connection is created (see CREATE TYPE). If you're creating PostgreSQL types within your program, call NpgsqlConnection.ReloadTypes() to make sure Npgsql becomes properly aware of them. Name translation CLR type and field names are usually Pascal case (e.g. InventoryData), whereas in PostgreSQL they are snake case (e.g. inventory_data). To help make the mapping for enums and composites seamless, pluggable name translators are used translate all names. The default translation scheme is NpgsqlSnakeCaseNameTranslator, which maps names like SomeType to some_type, but you can specify others. The default name translator can be set for all your connections via NpgsqlConnection.GlobalTypeMapper.DefaultNameTranslator, or for a specific connection for NpgsqlConnection.TypeMapper.DefaultNameTranslator. You also have the option of specifying a name translator when setting up a mapping: NpgsqlConnection.GlobalTypeMapper.MapComposite<InventoryData>(\"inventory_data\", new NpgsqlNullNameTranslator()); Finally, you may control mappings on a field-by-field basis via the [PgName] attribute. This overrides the name translator. public enum Mood { [PgName(\"depressed\")] Sad, Ok, [PgName(\"ebullient\")] Happy } Reading and writing unmapped enums In some cases, it may be desirable to interact with PostgreSQL enums without a pre-existing CLR enum type - this is useful mainly if your program doesn't know the database schema and types in advance, and needs to interact with any enum/composite type. Npgsql allows reading and writing enums as simple strings: // Writing enum as string await using (var cmd = new NpgsqlCommand(\"INSERT INTO some_table (my_enum) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = \"Happy\" DataTypeName = \"mood\" }); cmd.ExecuteNonQuery(); } // Reading enum as string await using (var cmd = new NpgsqlCommand(\"SELECT my_enum FROM some_table\", conn)) await using (var reader = cmd.ExecuteReader()) { reader.Read(); var enumValue = reader.GetFieldValue<string>(0); }"
  },
  "doc/types/geojson.html": {
    "href": "doc/types/geojson.html",
    "title": "PostGIS/GeoJSON Type Plugin | Npgsql Documentation",
    "keywords": "PostGIS/GeoJSON Type Plugin The Npgsql.GeoJSON plugin makes Npgsql read and write PostGIS spatial types as GeoJSON (RFC7946) types, via the GeoJSON.NET library. As an alternative, you can use Npgsql.NetTopologySuite, which is a full-fledged .NET spatial library with many features. Setup To avoid forcing a dependency on the GeoJSON library for users not using spatial, GeoJSON support is delivered as a separate plugin. To use the plugin, simply add a dependency on Npgsql.GeoJSON and set it up in one of the following ways: NpgsqlDataSource Global mapping Connection mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UseGeoJson(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource, you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.UseGeoJson(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Note This mapping method has been removed in Npgsql 7.0. Older versions of Npgsql supported configuring a type mapping on an individual connection, as follows: var conn = new NpgsqlConnection(...); conn.TypeMapper.UseGeoJson(); Reading and Writing Geometry Values When reading PostGIS values from the database, Npgsql will automatically return the appropriate GeoJSON types: Point, LineString, and so on. Npgsql will also automatically recognize GeoJSON's types in parameters, and will automatically send the corresponding PostGIS type to the database. The following code demonstrates a roundtrip of a GeoJSON Point to the database: conn.ExecuteNonQuery(\"CREATE TEMP TABLE data (geom GEOMETRY)\"); await using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geom) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = new Point(new Position(51.899523, -2.124156)) }); await cmd.ExecuteNonQueryAsync(); } await using (var cmd = new NpgsqlCommand(\"SELECT geom FROM data\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) { await reader.ReadAsync(); var point2 = reader.GetFieldValue<Point>(0); } You may also explicitly specify a parameter's type by setting NpgsqlDbType.Geometry. Geography (geodetic) Support PostGIS has two types: geometry (for Cartesian coordinates) and geography (for geodetic or spherical coordinates). You can read about the geometry/geography distinction in the PostGIS docs or in this blog post. In a nutshell, geography is much more accurate when doing calculations over long distances, but is more expensive computationally and supports only a small subset of the spatial operations supported by geometry. Npgsql uses the same GeoJSON types to represent both geometry and geography - the Point type represents a point in either Cartesian or geodetic space. You usually don't need to worry about this distinction because PostgreSQL will usually cast types back and forth as needed. However, it's worth noting that Npgsql sends Cartesian geometry by default, because that's the usual requirement. You have the option of telling Npgsql to send geography instead by specifying NpgsqlDbType.Geography: using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geog) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = point, NpgsqlDbType = NpgsqlDbType.Geography }); await cmd.ExecuteNonQueryAsync(); } If you prefer to use geography everywhere by default, you can also specify that when setting up the plugin: dataSourceBuilder.UseGeoJson(geographyAsDefault: true);"
  },
  "doc/types/json.html": {
    "href": "doc/types/json.html",
    "title": "Mapping JSON | Npgsql Documentation",
    "keywords": "Mapping JSON Note If you're using EF Core, please read the page on JSON support in the EF provider. EF has specialized support for JSON beyond what is supported at the lower-level Npgsql layer. PostgreSQL has rich, built-in support for storing JSON columns and efficiently performing complex queries operations on them. Newcomers can read more about the PostgreSQL support on the JSON types page, and on the functions and operators page. Note that the below mapping mechanisms support both the jsonb and json types, although the former is almost always preferred for efficiency and functionality reasons. Npgsql allows you to map PostgreSQL JSON columns in three different ways: As simple strings As strongly-typed user-defined types (POCOs) As System.Text.Json DOM types (JsonDocument or JsonElement, see docs) High-performance JSON parsing with Utf8JsonReader Newtonsoft Json.NET String mapping The simplest form of mapping to JSON is as a regular .NET string: // Write a string to a json column: await using var command1 = new NpgsqlCommand(\"INSERT INTO test (data) VALUES ($1)\", conn) { Parameters = { new() { Value = \"\"\"{ \"a\": 8, \"b\": 9 }\"\"\", NpgsqlDbType = NpgsqlDbType.Jsonb } } }; await command1.ExecuteNonQueryAsync(); // Read jsonb data as a string: await using var command2 = new NpgsqlCommand(\"SELECT data FROM test\", conn); await using var reader = await command2.ExecuteReaderAsync(); while (await reader.ReadAsync()) { Console.WriteLine(reader.GetString(0)); } Note Note that when writing a string parameter as jsonb, you must specify NpgsqlDbType.Jsonb, otherwise Npgsql sends a text parameter which is incompatible with JSON. With this mapping style, you're fully responsible for serializing/deserializing the JSON data yourself (e.g. with System.Text.Json) - Npgsql simply passes your strings to and from PostgreSQL. POCO mapping Warning As of Npgsql 8.0, POCO mapping is incompatible with NativeAOT. We plan to improve this, please upvote this issue if you're interested. If your column JSON contains documents with a stable schema, you can map them to your own .NET types (or POCOs). The provider will use System.Text.Json APIs under the hood to serialize instances of your types to JSON documents before sending them to the database, and to deserialize documents coming back from the database. This effectively allows mapping an arbitrary .NET type - or object graph - to a single column in the database. Starting with Npgsql 8.0, to use this feature, you must first enable it by calling EnableDynamicJson on your NpgsqlDataSourceBuilder, or, if you're not yet using data sources, on NpgsqlConnection.GlobalTypeMapper: NpgsqlDataSource Global mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.EnableDynamicJson(); await using var dataSource = dataSourceBuilder.Build(); If you're not yet using NpgsqlDataSource, you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.EnableDynamicJson(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Once you've enabled the feature, you can simply read and write instances of your POCOs directly; when writing, specify NpgsqlDbType.Jsonb to let Npgsql know you intend for it to get sent as JSON data: // Write a POCO to a jsonb column: var myPoco1 = new MyPoco { A = 8, B = 9 }; await using var command1 = new NpgsqlCommand(\"INSERT INTO test (data) VALUES ($1)\", conn) { Parameters = { new() { Value = myPoco1, NpgsqlDbType = NpgsqlDbType.Jsonb } } }; await command1.ExecuteNonQueryAsync(); // Read jsonb data as a POCO: await using var command2 = new NpgsqlCommand(\"SELECT data FROM test\", conn); await using var reader = await command2.ExecuteReaderAsync(); while (await reader.ReadAsync()) { var myPoco2 = reader.GetFieldValue<MyPoco>(0); Console.WriteLine(myPoco2.A); } class MyPoco { public int A { get; set; } public int B { get; set; } } This mapping method is quite powerful, allowing you to read and write nested graphs of objects and arrays to PostgreSQL without having to deal with serialization yourself. System.Text.Json DOM types There are cases in which mapping JSON data to POCOs isn't appropriate; for example, your JSON column may not contain a fixed schema and must be inspected to see what it contains; for these cases, Npgsql supports mapping JSON data to JsonDocument or JsonElement (see docs): var jsonDocument = JsonDocument.Parse(\"\"\"{ \"a\": 8, \"b\": 9 }\"\"\"); // Write a JsonDocument: await using var command1 = new NpgsqlCommand(\"INSERT INTO test (data) VALUES ($1)\", conn) { Parameters = { new() { Value = jsonDocument } } }; await command1.ExecuteNonQueryAsync(); // Read jsonb data as a JsonDocument: await using var command2 = new NpgsqlCommand(\"SELECT data FROM test\", conn); await using var reader = await command2.ExecuteReaderAsync(); while (await reader.ReadAsync()) { var document = reader.GetFieldValue<JsonDocument>(0); Console.WriteLine(document.RootElement.GetProperty(\"a\").GetInt32()); } High-performance JSON parsing with Utf8JsonReader If you're writing a very performance-sensitive application, using System.Text.Json to deserialize to POCOs or JsonDocument may incur too much overhead. If that's the case, you can use System.Text.Json's Utf8JsonReader to parse JSON data from the database. Utf8JsonReader provides a low-level, forward-only API to parse the JSON data, one token at a time. Utf8JsonReader requires JSON data as raw, UTF8-encoded binary data; fortunately, Npgsql allows reading jsonb as binary data, and if your PostgreSQL client_encoding is set to UTF8 (the default), you can feed data directly from PostgreSQL to Utf8JsonReader: await using var command2 = new NpgsqlCommand(\"SELECT data FROM test\", conn); await using var reader = await command2.ExecuteReaderAsync(); while (await reader.ReadAsync()) { ParseJson(reader.GetFieldValue<byte[]>(0)); } void ParseJson(byte[] utf8Data) { var jsonReader = new Utf8JsonReader(utf8Data); // ... parse the data with jsonReader } Note that the above works well for small JSON columns; if you have large columns (above ~8k), consider streaming the JSON data instead. This can be done by passing CommandBehavior.SequentialAccess to ExecuteReaderAsync, and then calling reader.GetStream() on NpgsqlDataReader instead of GetFieldValue<byte[]>. To process streaming data with Utf8JsonReader, see these docs. Newtonsoft.JSON System.Text.Json is the built-in, standard way to handle JSON in modern .NET. However, some users still prefer using Newtonoft Json.NET, and Npgsql includes support for that. To use Json.NET, add the Npgsql.Json.NET package to your project, and enable the plugin as follows: NpgsqlDataSource Global mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UseJsonNet(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource, you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.UseJsonNet(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Once you've enabled the feature, you can simply read and write instances of your POCOs directly; when writing, specify NpgsqlDbType.Jsonb to let Npgsql know you intend for it to get sent as JSON data: // Write a POCO to a jsonb column: var myPoco1 = new MyPoco { A = 8, B = 9 }; await using var command1 = new NpgsqlCommand(\"INSERT INTO test (data) VALUES ($1)\", conn) { Parameters = { new() { Value = myPoco1, NpgsqlDbType = NpgsqlDbType.Jsonb } } }; await command1.ExecuteNonQueryAsync(); // Read jsonb data as a POCO: await using var command2 = new NpgsqlCommand(\"SELECT data FROM test\", conn); await using var reader = await command2.ExecuteReaderAsync(); while (await reader.ReadAsync()) { var myPoco2 = reader.GetFieldValue<MyPoco>(0); Console.WriteLine(myPoco2.A); } class MyPoco { public int A { get; set; } public int B { get; set; } } The plugin also allows you to read JObject/JArray for weakly-typed DOM mapping."
  },
  "doc/types/nodatime.html": {
    "href": "doc/types/nodatime.html",
    "title": "NodaTime Type Plugin | Npgsql Documentation",
    "keywords": "NodaTime Type Plugin Npgsql provides a plugin that allows mapping the NodaTime date/time library; this is the recommended way to interact with PostgreSQL date/time types, rather than the built-in .NET types. What is NodaTime By default, the PostgreSQL date/time types are mapped to the built-in .NET types (DateTime, TimeSpan). Unfortunately, these built-in types are flawed in many ways. The NodaTime library was created to solve many of these problems, and if your application handles dates and times in anything but the most basic way, you should consider using it. To learn more read this blog post by Jon Skeet. Beyond NodaTime's general advantages, some specific advantages NodaTime for PostgreSQL date/time mapping include: NodaTime's types map very cleanly to the PostgreSQL types. For example Instant corresponds to timestamptz, and LocalDateTime corresponds to timestamp without time zone. The BCL's DateTime can correspond to both, depending on its type; this can create confusion and errors. Period is much more suitable for mapping PostgreSQL interval than TimeSpan. NodaTime types can fully represent PostgreSQL's microsecond precision, and can represent dates outside the BCL's date limit (1AD-9999AD). Setup To avoid forcing a dependency on the NetTopologySuite library for users not using spatial, NodaTime support is delivered as a separate plugin. To use the plugin, simply add a dependency on Npgsql.NodaTime and set it up in one of the following ways: NpgsqlDataSource Global mapping Connection mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UseNodaTime(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource, you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.UseNodaTime(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Note This mapping method has been removed in Npgsql 7.0. Older versions of Npgsql supported configuring a type mapping on an individual connection, as follows: var conn = new NpgsqlConnection(...); conn.TypeMapper.UseNodaTime(); Reading and Writing Values Once the plugin is set up, you can transparently read and write NodaTime objects: // Write NodaTime Instant to PostgreSQL \"timestamp with time zone\" (UTC) await using (var cmd = new NpgsqlCommand(@\"INSERT INTO mytable (my_timestamptz) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = Instant.FromUtc(2011, 1, 1, 10, 30) }); await cmd.ExecuteNonQueryAsync(); } // Read timestamp back from the database as an Instant await using (var cmd = new NpgsqlCommand(@\"SELECT my_timestamptz FROM mytable\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) { await reader.ReadAsync(); var instant = reader.GetFieldValue<Instant>(0); } Mapping Table Warning A common mistake is for users to think that the PostgreSQL timestamp with time zone type stores the timezone in the database. This is not the case: only a UTC timestamp is stored. There is no single PostgreSQL type that stores both a date/time and a timezone, similar to .NET DateTimeOffset. To store a timezone in the database, add a separate text column containing the timezone ID. PostgreSQL Type Default NodaTime Type Additional NodaTime Type Notes timestamp with time zone Instant ZonedDateTime1, OffsetDateTime1 A UTC timestamp in the database. Only UTC ZonedDateTime and OffsetDateTime are supported. timestamp without time zone LocalDateTime2 A timestamp in an unknown or implicit time zone. date LocalDate A simple date with no timezone or offset information. time without time zone LocalTime A simple time-of-day, with no timezone or offset information. time with time zone OffsetTime A type that stores a time and an offset. It's use is generally discouraged. interval Period Duration An interval of time, from sub-second units to years. NodaTime Duration is supported for intervals with days and smaller, but not with years or months (as these have no absolute duration). Period can be used with any interval unit. tstzrange Interval NpgsqlRange<Instant> etc. An interval between two instants in time (start and end). tsrange NpgsqlRange<LocalDateTime> An interval between two timestamps in an unknown or implicit time zone. daterange DateInterval NpgsqlRange<LocalDate> etc. An interval between two dates. 1 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), writing or reading ZonedDateTime or OffsetDateTime automatically converted to or from UTC. See the breaking change note for more info. 2 In versions prior to 6.0 (or when Npgsql.EnableLegacyTimestampBehavior is enabled), timestamp without time zone was mapped to Instant by default, instead of LocalDateTime. See the breaking change note for more info. Infinity values PostgreSQL supports the special values -infinity and infinity for the timestamp and date types (see docs); these can be useful to represent a value which is earlier or later than any other value. Starting with Npgsql 6.0, these special values are mapped to the MinValue and MaxValue value on the corresponding .NET types (Instant and LocalDate). To opt out of this behavior, set the following AppContext switch at the start of your application: AppContext.SetSwitch(\"Npgsql.DisableDateTimeInfinityConversions\", true); Note: in versions prior to 6.0, the connection string parameter Convert Infinity DateTime could be used to opt into these infinity conversions. That connection string parameter has been removed."
  },
  "doc/types/nts.html": {
    "href": "doc/types/nts.html",
    "title": "PostGIS/NetTopologySuite Type Plugin | Npgsql Documentation",
    "keywords": "PostGIS/NetTopologySuite Type Plugin PostgreSQL supports spatial data and operations via the PostGIS extension, which is a mature and feature-rich database spatial implementation. .NET doesn't provide a standard spatial library, but NetTopologySuite is a leading spatial library. Npgsql has a plugin which allows you to map the NTS types PostGIS columns, and even translate many useful spatial operations to SQL. This is the recommended way to interact with spatial types in Npgsql. PostgreSQL provides support for spatial types (geometry/geography) via the powerful PostGIS extension; this allows you to store points and other spatial constructs in the database, and efficiently perform operations and searches on them. Npgsql supports the PostGIS types via NetTopologySuite, which is the leading spatial library in the .NET world: the NTS types can be read and written directly to their corresponding PostGIS types. This is the recommended way to work with spatial types in Npgsql. Setup To avoid forcing a dependency on the NetTopologySuite library for users not using spatial, NTS support is delivered as a separate plugin. To use the plugin, simply add a dependency on Npgsql.NetTopologySuite and set it up in one of the following ways: NpgsqlDataSource Global mapping Connection mapping Note NpgsqlDataSource was introduced in Npgsql 7.0, and is the recommended way to manage type mapping. If you're using an older version, see the other methods. var dataSourceBuilder = new NpgsqlDataSourceBuilder(...); dataSourceBuilder.UseNetTopologySuite(); await using var dataSource = dataSourceBuilder.Build(); If you're using an older version of Npgsql which doesn't yet support NpgsqlDataSource, you can configure mappings globally for all connections in your application: NpgsqlConnection.GlobalTypeMapper.UseNetTopologySuite(); For this to work, you must place this code at the beginning of your application, before any other Npgsql API is called. Note that in Npgsql 7.0, global type mappings are obsolete (but still supported) - NpgsqlDataSource is the recommended way to manage type mappings. Note This mapping method has been removed in Npgsql 7.0. Older versions of Npgsql supported configuring a type mapping on an individual connection, as follows: var conn = new NpgsqlConnection(...); conn.TypeMapper.UseNetTopologySuite(); By default the plugin handles only ordinates provided by the DefaultCoordinateSequenceFactory of GeometryServiceProvider.Instance. If GeometryServiceProvider is initialized automatically the X and Y ordinates are handled. To change the behavior specify the handleOrdinates parameter like in the following example: dataSourceBuilder.UseNetTopologySuite(handleOrdinates: Ordinates.XYZ); To process the M ordinate, you must initialize GeometryServiceProvider.Instance to a new NtsGeometryServices instance with coordinateSequenceFactory set to a DotSpatialAffineCoordinateSequenceFactory. Or you can specify the factory when calling UseNetTopologySuite. // Place this at the beginning of your program to use the specified settings everywhere (recommended) GeometryServiceProvider.Instance = new NtsGeometryServices( new DotSpatialAffineCoordinateSequenceFactory(Ordinates.XYM), new PrecisionModel(PrecisionModels.Floating), -1); // Or specify settings for Npgsql only dataSourceBuilder.UseNetTopologySuite.UseNetTopologySuite( new DotSpatialAffineCoordinateSequenceFactory(Ordinates.XYM)); Reading and Writing Geometry Values When reading PostGIS values from the database, Npgsql will automatically return the appropriate NetTopologySuite types: Point, LineString, and so on. Npgsql will also automatically recognize NetTopologySuite's types in parameters, and will automatically send the corresponding PostGIS type to the database. The following code demonstrates a roundtrip of a NetTopologySuite Point to the database: await conn.ExecuteNonQueryAsync(\"CREATE TEMP TABLE data (geom GEOMETRY)\"); await using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geom) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = new Point(new Coordinate(1d, 1d)) }); await cmd.ExecuteNonQueryAsync(); } await using (var cmd = new NpgsqlCommand(\"SELECT geom FROM data\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) { await reader.ReadAsync(); var point = reader.GetFieldValue<Point>(0); } You may also explicitly specify a parameter's type by setting NpgsqlDbType.Geometry. Geography (geodetic) Support PostGIS has two types: geometry (for Cartesian coordinates) and geography (for geodetic or spherical coordinates). You can read about the geometry/geography distinction in the PostGIS docs or in this blog post. In a nutshell, geography is much more accurate when doing calculations over long distances, but is more expensive computationally and supports only a small subset of the spatial operations supported by geometry. Npgsql uses the same NetTopologySuite types to represent both geometry and geography - the Point type represents a point in either Cartesian or geodetic space. You usually don't need to worry about this distinction because PostgreSQL will usually cast types back and forth as needed. However, it's worth noting that Npgsql sends Cartesian geometry by default, because that's the usual requirement. You have the option of telling Npgsql to send geography instead by specifying NpgsqlDbType.Geography: await using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geog) VALUES ($1)\", conn)) { cmd.Parameters.Add(new() { Value = point, NpgsqlDbType = NpgsqlDbType.Geography }); await cmd.ExecuteNonQueryAsync(); } If you prefer to use geography everywhere by default, you can also specify that when setting up the plugin: dataSourceBuilder.UseNetTopologySuite(geographyAsDefault: true);"
  },
  "doc/wait.html": {
    "href": "doc/wait.html",
    "title": "Waiting for Notifications | Npgsql Documentation",
    "keywords": "Waiting for Notifications Note: This functionality replaces Npgsql 3.0's \"Continuous processing mode\". PostgreSQL Asynchronous messages PostgreSQL has a feature whereby arbitrary notification messages can be sent between clients. For example, one client may wait until it is notified by another client of a task that it is supposed to perform. Notifications are, by their nature, asynchronous - they can arrive at any point. For more detail about this feature, see the PostgreSQL NOTIFY command. Some other asynchronous message types are notices (e.g. database shutdown imminent) and parameter changes, see the PostgreSQL protocol docs for more details. Note that despite the word \"asynchronous\", this page has nothing to do with ADO.NET async operations (e.g. ExecuteReaderAsync). Processing of Notifications Npgsql exposes notification messages via the Notification event on NpgsqlConnection. Since asynchronous notifications are rarely used and processing can be complex, Npgsql only processes notification messages as part of regular (synchronous) query interaction. That is, if an asynchronous notification is sent, Npgsql will only process it and emit an event to the user the next time a command is sent and processed. To receive notifications outside a synchronous request-response cycle, call NpgsqlConnection.Wait(). This will make your thread block until a single notification is received (note that a version with a timeout as well as an async version exist). Note that the notification is still delivered via the Notification event as before. var conn = new NpgsqlConnection(ConnectionString); conn.Open(); conn.Notification += (o, e) => Console.WriteLine(\"Received notification\"); using (var cmd = new NpgsqlCommand(\"LISTEN channel_name\", conn)) { cmd.ExecuteNonQuery(); } while (true) { conn.Wait(); // Thread will block here } Keepalive You may want to turn on keepalives."
  },
  "ef6/index.html": {
    "href": "ef6/index.html",
    "title": "Entity Framework 6 | Npgsql Documentation",
    "keywords": "Npgsql has an Entity Framework 6 provider. You can use it by installing the EntityFramework6.Npgsql nuget. Basic Configuration Configuration for an Entity Framework application can be specified in a config file (app.config/web.config) or through code. The latter is known as code-based configuration. Code-based To use Entity Framework with Npgsql, define a class that inherits from DbConfiguration in the same assembly as your class inheriting DbContext. Ensure that you configure provider services, a provider factory, a default connection factory as shown below: using Npgsql; using System.Data.Entity; class NpgSqlConfiguration : DbConfiguration { public NpgSqlConfiguration() { var name = \"Npgsql\"; SetProviderFactory(providerInvariantName: name, providerFactory: NpgsqlFactory.Instance); SetProviderServices(providerInvariantName: name, provider: NpgsqlServices.Instance); SetDefaultConnectionFactory(connectionFactory: new NpgsqlConnectionFactory()); } } Config file When installing EntityFramework6.Npgsql nuget package, the relevant sections in App.config / Web.config are usually automatically updated. You typically only have to add your connectionString with the correct providerName. <configuration> <connectionStrings> <add name=\"BlogDbContext\" connectionString=\"Server=localhost;port=5432;Database=Blog;User Id=postgres;Password=postgres;\" providerName=\"Npgsql\" /> </connectionStrings> <entityFramework> <providers> <provider invariantName=\"Npgsql\" type=\"Npgsql.NpgsqlServices, EntityFramework6.Npgsql\" /> </providers> <!-- setting the default connection factory is optional --> <defaultConnectionFactory type=\"Npgsql.NpgsqlConnectionFactory, EntityFramework6.Npgsql\" /> </entityFramework> <system.data> <DbProviderFactories> <add name=\"Npgsql Provider\" invariant=\"Npgsql\" description=\".NET Framework Data Provider for PostgreSQL\" type=\"Npgsql.NpgsqlFactory, Npgsql, Version=4.1.3.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\" /> </DbProviderFactories> </system.data> </configuration> Guid Support Npgsql EF migrations support uses uuid_generate_v4() function to generate guids. In order to have access to this function, you have to install the extension uuid-ossp through the following command: create extension \"uuid-ossp\"; If you don't have this extension installed, when you run Npgsql migrations you will get the following error message: ERROR: function uuid_generate_v4() does not exist If the database is being created by Npgsql Migrations, you will need to run the create extension command in the template1 database. This way, when the new database is created, the extension will be installed already. Optimistic Concurrency EntityFramework supports optimistic concurrency, through the system column xmin. To use this column as the concurrency token, some customization is needed. The following code will setup Department.Version to map to xmin, while the SqlGenerator will generate CREATE/ALTER TABLE statements omitting system columns. public class Department { public string Version { get; private set; } } [DbConfigurationType(typeof(Configuration))] public class UniversityDbContext : DbContext { public DbSet<Department> Departments { get; set; } protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Entity<Department>() .Property(p => p.Version) .HasColumnName(\"xmin\") .HasColumnType(\"text\") .IsConcurrencyToken() .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed); base.OnModelCreating(modelBuilder); } } internal class Configuration : DbConfiguration { public Configuration() { SetMigrationSqlGenerator(\"Npgsql\", () => new SqlGenerator()); } } public class SqlGenerator : NpgsqlMigrationSqlGenerator { private readonly string[] systemColumnNames = { \"oid\", \"tableoid\", \"xmin\", \"cmin\", \"xmax\", \"cmax\", \"ctid\" }; protected override void Convert(CreateTableOperation createTableOperation) { var systemColumns = createTableOperation.Columns.Where(x => systemColumnNames.Contains(x.Name)).ToArray(); foreach (var systemColumn in systemColumns) createTableOperation.Columns.Remove(systemColumn); base.Convert(createTableOperation); } } Template Database When the Entity Framework 6 provider creates a database, it issues a simple CREATE DATABASE command. In PostgreSQL, this implicitly uses template1 as the template - anything existing in template1 will be copied to your new database. If you wish to change the database used as a template, you can specify the EF Template Database connection string parameter. For more info see the PostgreSQL docs. Customizing DataReader Behavior You can use an Entity Framework 6 IDbCommandInterceptor to wrap the DataReader instance returned by Npgsql when Entity Framework executes queries. This is possible using a DbConfiguration class. Example use cases: Forcing all returned DateTime and DateTimeOffset values to be in the UTC timezone. Preventing accidental insertion of DateTime values having DateTimeKind.Unspecified. Forcing all postgres date/time types to be returned to Entity Framework as DateTimeOffset. [DbConfigurationType(typeof(AppDbContextConfiguration))] public class AppDbContext : DbContext { // ... } public class AppDbContextConfiguration : DbConfiguration { public AppDbContextConfiguration() { this.AddInterceptor(new MyEntityFrameworkInterceptor()); } } class MyEntityFrameworkInterceptor : DbCommandInterceptor { public override void ReaderExecuted( DbCommand command, DbCommandInterceptionContext<DbDataReader> interceptionContext) { if (interceptionContext.Result == null) return; interceptionContext.Result = new WrappingDbDataReader(interceptionContext.Result); } public override void ScalarExecuted( DbCommand command, DbCommandInterceptionContext<object> interceptionContext) { interceptionContext.Result = ModifyReturnValues(interceptionContext.Result); } static object ModifyReturnValues(object result) { // Transform and then return result; } } class WrappingDbDataReader : DbDataReader, IDataReader { // Wrap an existing DbDataReader, proxy all calls to the underlying instance, // modify return values and/or parameters as needed... public WrappingDbDataReader(DbDataReader reader) { } }"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.NpgsqlEfEventId.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.NpgsqlEfEventId.html",
    "title": "Class NpgsqlEfEventId | Npgsql Documentation",
    "keywords": "Class NpgsqlEfEventId Event IDs for PostgreSQL/Npgsql events that correspond to messages logged to an ILogger and events sent to a DiagnosticSource. These IDs are also used with WarningsConfigurationBuilder to configure the behavior of warnings. Inheritance object NpgsqlEfEventId Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore.Diagnostics Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEfEventId Fields | Edit this page View Source CollationFound A collation was found. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId CollationFound Field Value Type Description EventId | Edit this page View Source ColumnFound A column was found. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId ColumnFound Field Value Type Description EventId | Edit this page View Source EnumColumnSkippedWarning Enum column cannot be scaffolded, define a CLR enum type and add the property manually. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId EnumColumnSkippedWarning Field Value Type Description EventId | Edit this page View Source ExpressionIndexSkippedWarning Expression index cannot be scaffolded, expression indices aren't supported and must be added via raw SQL in migrations. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId ExpressionIndexSkippedWarning Field Value Type Description EventId | Edit this page View Source ForeignKeyFound A foreign key was found. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId ForeignKeyFound Field Value Type Description EventId | Edit this page View Source ForeignKeyPrincipalColumnMissingWarning A principal column referenced by a foreign key was not found. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId ForeignKeyPrincipalColumnMissingWarning Field Value Type Description EventId | Edit this page View Source ForeignKeyReferencesMissingPrincipalTableWarning A foreign key references a missing table at the principal end. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId ForeignKeyReferencesMissingPrincipalTableWarning Field Value Type Description EventId | Edit this page View Source IndexFound An index was found. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId IndexFound Field Value Type Description EventId | Edit this page View Source MissingSchemaWarning The database is missing a schema. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId MissingSchemaWarning Field Value Type Description EventId | Edit this page View Source MissingTableWarning The database is missing a table. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId MissingTableWarning Field Value Type Description EventId | Edit this page View Source PrimaryKeyFound A primary key was found. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId PrimaryKeyFound Field Value Type Description EventId | Edit this page View Source SequenceFound A sequence was found. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId SequenceFound Field Value Type Description EventId | Edit this page View Source TableFound A table was found. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId TableFound Field Value Type Description EventId | Edit this page View Source UniqueConstraintFound A unique constraint was found. This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId UniqueConstraintFound Field Value Type Description EventId | Edit this page View Source UnsupportedColumnConstraintSkippedWarning Constraint '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId UnsupportedColumnConstraintSkippedWarning Field Value Type Description EventId | Edit this page View Source UnsupportedColumnIndexSkippedWarning Index '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). This event is in the DbLoggerCategory.Scaffolding category. Declaration public static readonly EventId UnsupportedColumnIndexSkippedWarning Field Value Type Description EventId"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.html",
    "title": "Namespace Microsoft.EntityFrameworkCore.Diagnostics | Npgsql Documentation",
    "keywords": "Namespace Microsoft.EntityFrameworkCore.Diagnostics Classes NpgsqlEfEventId Event IDs for PostgreSQL/Npgsql events that correspond to messages logged to an ILogger and events sent to a DiagnosticSource. These IDs are also used with WarningsConfigurationBuilder to configure the behavior of warnings."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.LTree.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.LTree.html",
    "title": "Struct LTree | Npgsql Documentation",
    "keywords": "Struct LTree Represents a PostgreSQL ltree type. This type is implicitly convertible to a .NET string. Implements IEquatable<LTree> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public readonly struct LTree : IEquatable<LTree> Remarks See https://www.postgresql.org/docs/current/ltree.html Constructors | Edit this page View Source LTree(string) Constructs a new instance of LTree. Declaration public LTree(string value) Parameters Type Name Description string value The string value for the ltree. Properties | Edit this page View Source NLevel Returns number of labels in path. Declaration public int NLevel { get; } Property Value Type Description int Remarks The property is translated to nlevel(ltree). See https://www.postgresql.org/docs/current/ltree.html Methods | Edit this page View Source Equals(LTree) Declaration public bool Equals(LTree other) Parameters Type Name Description LTree other Returns Type Description bool | Edit this page View Source Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() | Edit this page View Source Index(LTree) Returns position of first occurrence of other in this ltree, or -1 if not found. Declaration public int Index(LTree other) Parameters Type Name Description LTree other Returns Type Description int Remarks The method call is translated to index(ltree1, ltree2). See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source Index(LTree, int) Returns position of first occurrence of other in this ltree, or -1 if not found. The search starts at position offset; negative offset means start -offset labels from the end of the path. Declaration public int Index(LTree other, int offset) Parameters Type Name Description LTree other int offset Returns Type Description int Remarks The method call is translated to index(ltree1, ltree2, offset). See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source IsAncestorOf(LTree) Returns whether this ltree is an ancestor of other (or equal). Declaration public bool IsAncestorOf(LTree other) Parameters Type Name Description LTree other Returns Type Description bool Remarks The method call is translated to left @> right. See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source IsDescendantOf(LTree) Returns whether this ltree is a descendant of other (or equal). Declaration public bool IsDescendantOf(LTree other) Parameters Type Name Description LTree other Returns Type Description bool Remarks The method call is translated to left <@ right. See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source LongestCommonAncestor(params LTree[]) Computes longest common ancestor of paths. Declaration public static LTree LongestCommonAncestor(params LTree[] others) Parameters Type Name Description LTree[] others Returns Type Description LTree Remarks The method call is translated to lca(others). See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source MatchesLQuery(string) Returns whether this ltree matches lquery. Declaration public bool MatchesLQuery(string lquery) Parameters Type Name Description string lquery Returns Type Description bool Remarks The method call is translated to left ~ right. See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source MatchesLTxtQuery(string) Returns whether this ltree matches ltxtquery. Declaration public bool MatchesLTxtQuery(string ltxtquery) Parameters Type Name Description string ltxtquery Returns Type Description bool Remarks The method call is translated to left @ right. See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source Subpath(int) Returns subpath of ltree starting at position offset, extending to end of path. If offset is negative, subpath starts that far from the end of the path. Declaration public LTree Subpath(int offset) Parameters Type Name Description int offset Returns Type Description LTree Remarks The method call is translated to subpath(ltree, offset). See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source Subpath(int, int) Returns subpath of this ltree starting at position offset, with length len. If offset is negative, subpath starts that far from the end of the path. If len is negative, leaves that many labels off the end of the path. Declaration public LTree Subpath(int offset, int len) Parameters Type Name Description int offset int len Returns Type Description LTree Remarks The method call is translated to subpath(ltree, offset, len). See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source Subtree(int, int) Returns subpath of this ltree from position start to position end-1 (counting from 0). Declaration public LTree Subtree(int start, int end) Parameters Type Name Description int start int end Returns Type Description LTree Remarks The method call is translated to subltree(ltree, start, end). See https://www.postgresql.org/docs/current/ltree.html | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(LTree, LTree) Compares two LTree instances for equality. Declaration public static bool operator ==(LTree x, LTree y) Parameters Type Name Description LTree x LTree y Returns Type Description bool | Edit this page View Source implicit operator string(LTree) Converts a string to an LTree type. Declaration public static implicit operator string(LTree ltree) Parameters Type Name Description LTree ltree Returns Type Description string | Edit this page View Source implicit operator LTree(string) Converts an LTree type to a string. Declaration public static implicit operator LTree(string value) Parameters Type Name Description string value Returns Type Description LTree | Edit this page View Source operator !=(LTree, LTree) Compares two LTree instances for inequality. Declaration public static bool operator !=(LTree x, LTree y) Parameters Type Name Description LTree x LTree y Returns Type Description bool Implements IEquatable<T>"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Internal.NpgsqlIndexExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Internal.NpgsqlIndexExtensions.html",
    "title": "Class NpgsqlIndexExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlIndexExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlIndexExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore.Metadata.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlIndexExtensions Methods | Edit this page View Source AreCompatibleForNpgsql(IReadOnlyIndex, IReadOnlyIndex, in StoreObjectIdentifier, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static bool AreCompatibleForNpgsql(this IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, in StoreObjectIdentifier storeObject, bool shouldThrow) Parameters Type Name Description IReadOnlyIndex index IReadOnlyIndex duplicateIndex StoreObjectIdentifier storeObject bool shouldThrow Returns Type Description bool"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Internal.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Internal.html",
    "title": "Namespace Microsoft.EntityFrameworkCore.Metadata.Internal | Npgsql Documentation",
    "keywords": "Namespace Microsoft.EntityFrameworkCore.Metadata.Internal Classes NpgsqlIndexExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAggregateDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAggregateDbFunctionsExtensions.html",
    "title": "Class NpgsqlAggregateDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlAggregateDbFunctionsExtensions Provides extension methods supporting aggregate function translation for PostgreSQL. Inheritance object NpgsqlAggregateDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlAggregateDbFunctionsExtensions Methods | Edit this page View Source ArrayAgg<T>(DbFunctions, IEnumerable<T>) Collects all the input values, including nulls, into a PostgreSQL array. Corresponds to the PostgreSQL array_agg aggregate function. Declaration public static T[] ArrayAgg<T>(this DbFunctions _, IEnumerable<T> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<T> input The input values to be aggregated into an array. Returns Type Description T[] Type Parameters Name Description T See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source Average(DbFunctions, IEnumerable<TimeSpan>) Computes the average (arithmetic mean) of the non-null input intervals. Corresponds to the PostgreSQL avg aggregate function. Declaration public static TimeSpan? Average(this DbFunctions _, IEnumerable<TimeSpan> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<TimeSpan> input The input values to be computed into an average. Returns Type Description TimeSpan? See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source Correlation(DbFunctions, IEnumerable<(double, double)>) Computes the correlation coefficient. Corresponds to the PostgreSQL corr function. Declaration public static double? Correlation(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source CovariancePopulation(DbFunctions, IEnumerable<(double, double)>) Computes the population covariance. Corresponds to the PostgreSQL covar_pop function. Declaration public static double? CovariancePopulation(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source CovarianceSample(DbFunctions, IEnumerable<(double, double)>) Computes the sample covariance. Corresponds to the PostgreSQL covar_samp function. Declaration public static double? CovarianceSample(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source JsonAgg<T>(DbFunctions, IEnumerable<T>) Collects all the input values, including nulls, into a json array. Values are converted to JSON as per to_json or to_jsonb. Corresponds to the PostgreSQL json_agg aggregate function. Declaration public static T[] JsonAgg<T>(this DbFunctions _, IEnumerable<T> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<T> input The input values to be aggregated into a JSON array. Returns Type Description T[] Type Parameters Name Description T See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source JsonObjectAgg<T1, T2>(DbFunctions, IEnumerable<(T1, T2)>) Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json. Values can be null, but not keys. Corresponds to the PostgreSQL json_object_agg aggregate function. Declaration public static string JsonObjectAgg<T1, T2>(this DbFunctions _, IEnumerable<(T1, T2)> keyValuePairs) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(T1, T2)> keyValuePairs An enumerable of key-value pairs to be aggregated into a JSON object. Returns Type Description string Type Parameters Name Description T1 T2 See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source JsonObjectAgg<T1, T2, TReturn>(DbFunctions, IEnumerable<(T1, T2)>) Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json. Values can be null, but not keys. Corresponds to the PostgreSQL json_object_agg aggregate function. Declaration public static TReturn JsonObjectAgg<T1, T2, TReturn>(this DbFunctions _, IEnumerable<(T1, T2)> keyValuePairs) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(T1, T2)> keyValuePairs An enumerable of key-value pairs to be aggregated into a JSON object. Returns Type Description TReturn Type Parameters Name Description T1 T2 TReturn See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source JsonbAgg<T>(DbFunctions, IEnumerable<T>) Collects all the input values, including nulls, into a jsonb array. Values are converted to JSON as per to_json or to_jsonb. Corresponds to the PostgreSQL jsonb_agg aggregate function. Declaration public static T[] JsonbAgg<T>(this DbFunctions _, IEnumerable<T> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<T> input The input values to be aggregated into a JSON array. Returns Type Description T[] Type Parameters Name Description T See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source JsonbObjectAgg<T1, T2>(DbFunctions, IEnumerable<(T1, T2)>) Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_jsonb. Values can be null, but not keys. Corresponds to the PostgreSQL jsonb_object_agg aggregate function. Declaration public static string JsonbObjectAgg<T1, T2>(this DbFunctions _, IEnumerable<(T1, T2)> keyValuePairs) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(T1, T2)> keyValuePairs An enumerable of key-value pairs to be aggregated into a JSON object. Returns Type Description string Type Parameters Name Description T1 T2 See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source JsonbObjectAgg<T1, T2, TReturn>(DbFunctions, IEnumerable<(T1, T2)>) Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_jsonb. Values can be null, but not keys. Corresponds to the PostgreSQL jsonb_object_agg aggregate function. Declaration public static TReturn JsonbObjectAgg<T1, T2, TReturn>(this DbFunctions _, IEnumerable<(T1, T2)> keyValuePairs) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(T1, T2)> keyValuePairs An enumerable of key-value pairs to be aggregated into a JSON object. Returns Type Description TReturn Type Parameters Name Description T1 T2 TReturn See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source RegrAverageX(DbFunctions, IEnumerable<(double, double)>) Computes the average of the independent variable, sum(X)/N. Corresponds to the PostgreSQL regr_avgx function. Declaration public static double? RegrAverageX(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source RegrAverageY(DbFunctions, IEnumerable<(double, double)>) Computes the average of the dependent variable, sum(Y)/N. Corresponds to the PostgreSQL regr_avgy function. Declaration public static double? RegrAverageY(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source RegrCount(DbFunctions, IEnumerable<(double, double)>) Computes the number of rows in which both inputs are non-null. Corresponds to the PostgreSQL regr_count function. Declaration public static long? RegrCount(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description long? | Edit this page View Source RegrIntercept(DbFunctions, IEnumerable<(double, double)>) Computes the y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs. Corresponds to the PostgreSQL regr_intercept function. Declaration public static double? RegrIntercept(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source RegrR2(DbFunctions, IEnumerable<(double, double)>) Computes the square of the correlation coefficient. Corresponds to the PostgreSQL regr_r2 function. Declaration public static double? RegrR2(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source RegrSXX(DbFunctions, IEnumerable<(double, double)>) Computes the “sum of squares” of the independent variable, sum(X^2) - sum(X)^2/N. Corresponds to the PostgreSQL regr_sxx function. Declaration public static double? RegrSXX(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source RegrSXY(DbFunctions, IEnumerable<(double, double)>) Computes the “sum of products” of independent times dependent variables, sum(X*Y) - sum(X) * sum(Y)/N. Corresponds to the PostgreSQL regr_sxy function. Declaration public static double? RegrSXY(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source RegrSlope(DbFunctions, IEnumerable<(double, double)>) Computes the slope of the least-squares-fit linear equation determined by the (X, Y) pairs. Corresponds to the PostgreSQL regr_slope function. Declaration public static double? RegrSlope(this DbFunctions _, IEnumerable<(double, double)> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<(double, double)> values The values. Returns Type Description double? | Edit this page View Source StandardDeviationPopulation(DbFunctions, IEnumerable<byte>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<byte> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<byte> values The values. Returns Type Description double? The computed population standard deviation. | Edit this page View Source StandardDeviationPopulation(DbFunctions, IEnumerable<decimal>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<decimal> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<decimal> values The values. Returns Type Description double? The computed population standard deviation. | Edit this page View Source StandardDeviationPopulation(DbFunctions, IEnumerable<double>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<double> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<double> values The values. Returns Type Description double? The computed population standard deviation. | Edit this page View Source StandardDeviationPopulation(DbFunctions, IEnumerable<short>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<short> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<short> values The values. Returns Type Description double? The computed population standard deviation. | Edit this page View Source StandardDeviationPopulation(DbFunctions, IEnumerable<int>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<int> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<int> values The values. Returns Type Description double? The computed population standard deviation. | Edit this page View Source StandardDeviationPopulation(DbFunctions, IEnumerable<long>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<long> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<long> values The values. Returns Type Description double? The computed population standard deviation. | Edit this page View Source StandardDeviationPopulation(DbFunctions, IEnumerable<float>) Returns the population standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_pop function. Declaration public static double? StandardDeviationPopulation(this DbFunctions _, IEnumerable<float> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<float> values The values. Returns Type Description double? The computed population standard deviation. | Edit this page View Source StandardDeviationSample(DbFunctions, IEnumerable<byte>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<byte> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<byte> values The values. Returns Type Description double? The computed sample standard deviation. | Edit this page View Source StandardDeviationSample(DbFunctions, IEnumerable<decimal>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<decimal> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<decimal> values The values. Returns Type Description double? The computed sample standard deviation. | Edit this page View Source StandardDeviationSample(DbFunctions, IEnumerable<double>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<double> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<double> values The values. Returns Type Description double? The computed sample standard deviation. | Edit this page View Source StandardDeviationSample(DbFunctions, IEnumerable<short>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<short> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<short> values The values. Returns Type Description double? The computed sample standard deviation. | Edit this page View Source StandardDeviationSample(DbFunctions, IEnumerable<int>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<int> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<int> values The values. Returns Type Description double? The computed sample standard deviation. | Edit this page View Source StandardDeviationSample(DbFunctions, IEnumerable<long>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<long> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<long> values The values. Returns Type Description double? The computed sample standard deviation. | Edit this page View Source StandardDeviationSample(DbFunctions, IEnumerable<float>) Returns the sample standard deviation of all values in the specified expression. Corresponds to the PostgreSQL stddev_samp function. Declaration public static double? StandardDeviationSample(this DbFunctions _, IEnumerable<float> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<float> values The values. Returns Type Description double? The computed sample standard deviation. | Edit this page View Source Sum(DbFunctions, IEnumerable<TimeSpan>) Computes the sum of the non-null input intervals. Corresponds to the PostgreSQL sum aggregate function. Declaration public static TimeSpan? Sum(this DbFunctions _, IEnumerable<TimeSpan> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<TimeSpan> input The input values to be summed. Returns Type Description TimeSpan? See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source VariancePopulation(DbFunctions, IEnumerable<byte>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<byte> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<byte> values The values. Returns Type Description double? The computed population variance. | Edit this page View Source VariancePopulation(DbFunctions, IEnumerable<decimal>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<decimal> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<decimal> values The values. Returns Type Description double? The computed population variance. | Edit this page View Source VariancePopulation(DbFunctions, IEnumerable<double>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<double> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<double> values The values. Returns Type Description double? The computed population variance. | Edit this page View Source VariancePopulation(DbFunctions, IEnumerable<short>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<short> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<short> values The values. Returns Type Description double? The computed population variance. | Edit this page View Source VariancePopulation(DbFunctions, IEnumerable<int>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<int> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<int> values The values. Returns Type Description double? The computed population variance. | Edit this page View Source VariancePopulation(DbFunctions, IEnumerable<long>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<long> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<long> values The values. Returns Type Description double? The computed population variance. | Edit this page View Source VariancePopulation(DbFunctions, IEnumerable<float>) Returns the population variance of all values in the specified expression. Corresponds to the PostgreSQL var_pop function. Declaration public static double? VariancePopulation(this DbFunctions _, IEnumerable<float> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<float> values The values. Returns Type Description double? The computed population variance. | Edit this page View Source VarianceSample(DbFunctions, IEnumerable<byte>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<byte> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<byte> values The values. Returns Type Description double? The computed sample variance. | Edit this page View Source VarianceSample(DbFunctions, IEnumerable<decimal>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<decimal> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<decimal> values The values. Returns Type Description double? The computed sample variance. | Edit this page View Source VarianceSample(DbFunctions, IEnumerable<double>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<double> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<double> values The values. Returns Type Description double? The computed sample variance. | Edit this page View Source VarianceSample(DbFunctions, IEnumerable<short>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<short> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<short> values The values. Returns Type Description double? The computed sample variance. | Edit this page View Source VarianceSample(DbFunctions, IEnumerable<int>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<int> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<int> values The values. Returns Type Description double? The computed sample variance. | Edit this page View Source VarianceSample(DbFunctions, IEnumerable<long>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<long> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<long> values The values. Returns Type Description double? The computed sample variance. | Edit this page View Source VarianceSample(DbFunctions, IEnumerable<float>) Returns the sample variance of all values in the specified expression. Corresponds to the PostgreSQL var_samp function. Declaration public static double? VarianceSample(this DbFunctions _, IEnumerable<float> values) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<float> values The values. Returns Type Description double? The computed sample variance."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAlterDatabaseOperationExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAlterDatabaseOperationExtensions.html",
    "title": "Class NpgsqlAlterDatabaseOperationExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlAlterDatabaseOperationExtensions Extension methods for AlterDatabaseOperation for Npgsql-specific metadata. Inheritance object NpgsqlAlterDatabaseOperationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlAlterDatabaseOperationExtensions Methods | Edit this page View Source GetOldPostgresCollations(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresCollation> GetOldPostgresCollations(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList<PostgresCollation> | Edit this page View Source GetOldPostgresEnums(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresEnum> GetOldPostgresEnums(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList<PostgresEnum> | Edit this page View Source GetOldPostgresExtensions(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresExtension> GetOldPostgresExtensions(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList<PostgresExtension> | Edit this page View Source GetOldPostgresRanges(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresRange> GetOldPostgresRanges(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList<PostgresRange> | Edit this page View Source GetOrAddPostgresExtension(AlterDatabaseOperation, string?, string, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresExtension GetOrAddPostgresExtension(this AlterDatabaseOperation operation, string? schema, string name, string? version) Parameters Type Name Description AlterDatabaseOperation operation string schema string name string version Returns Type Description PostgresExtension | Edit this page View Source GetPostgresCollations(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresCollation> GetPostgresCollations(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList<PostgresCollation> | Edit this page View Source GetPostgresEnums(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresEnum> GetPostgresEnums(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList<PostgresEnum> | Edit this page View Source GetPostgresExtensions(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresExtension> GetPostgresExtensions(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList<PostgresExtension> | Edit this page View Source GetPostgresRanges(AlterDatabaseOperation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresRange> GetPostgresRanges(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description IReadOnlyList<PostgresRange>"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseFacadeExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseFacadeExtensions.html",
    "title": "Class NpgsqlDatabaseFacadeExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseFacadeExtensions Npgsql specific extension methods for Database. Inheritance object NpgsqlDatabaseFacadeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDatabaseFacadeExtensions Methods | Edit this page View Source IsNpgsql(DatabaseFacade) Returns true if the database provider currently in use is the Npgsql provider. This method can only be used after the DbContext has been configured because it is only then that the provider is known. This means that this method cannot be used in OnConfiguring(DbContextOptionsBuilder) because this is where application code sets the provider to use as part of configuring the context. Declaration public static bool IsNpgsql(this DatabaseFacade database) Parameters Type Name Description DatabaseFacade database The facade from Database. Returns Type Description bool True if Npgsql is being used; false otherwise. | Edit this page View Source SetDbDataSource(DatabaseFacade, DbDataSource) Sets the underlying DbDataSource configured for this DbContext. Declaration public static void SetDbDataSource(this DatabaseFacade databaseFacade, DbDataSource dataSource) Parameters Type Name Description DatabaseFacade databaseFacade The DatabaseFacade for the context. DbDataSource dataSource The connection string. Remarks It may not be possible to change the data source if existing connection, if any, is open. See Connections and connection strings for more information and examples."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseModelExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseModelExtensions.html",
    "title": "Class NpgsqlDatabaseModelExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseModelExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlDatabaseModelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDatabaseModelExtensions Methods | Edit this page View Source GetOrAddPostgresExtension(DatabaseModel, string?, string, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresExtension GetOrAddPostgresExtension(this DatabaseModel model, string? schema, string name, string? version) Parameters Type Name Description DatabaseModel model string schema string name string version Returns Type Description PostgresExtension | Edit this page View Source GetPostgresEnums(DatabaseModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresEnum> GetPostgresEnums(this DatabaseModel model) Parameters Type Name Description DatabaseModel model Returns Type Description IReadOnlyList<PostgresEnum> | Edit this page View Source GetPostgresExtensions(DatabaseModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresExtension> GetPostgresExtensions(this DatabaseModel model) Parameters Type Name Description DatabaseModel model Returns Type Description IReadOnlyList<PostgresExtension>"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsBuilderExtensions.html",
    "title": "Class NpgsqlDbContextOptionsBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDbContextOptionsBuilderExtensions Provides extension methods on DbContextOptionsBuilder and DbContextOptionsBuilder<TContext> used to configure a DbContext to context to a PostgreSQL database with Npgsql. Inheritance object NpgsqlDbContextOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDbContextOptionsBuilderExtensions Methods | Edit this page View Source UseNpgsql(DbContextOptionsBuilder, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL server with Npgsql, but without initially setting any DbConnection or connection string. The connection or connection string must be set before the DbContext is used to connect to a database. Set a connection using SetDbConnection(DatabaseFacade, DbConnection, bool). Set a connection string using SetConnectionString(DatabaseFacade, string). Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder The builder being used to configure the context. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Edit this page View Source UseNpgsql(DbContextOptionsBuilder, DbConnection, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, DbConnection connection, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder The builder being used to configure the context. DbConnection connection An existing DbConnection to be used to connect to the database. If the connection is in the open state then EF will not open or close the connection. If the connection is in the closed state then EF will open and close the connection as needed. The caller owns the connection and is responsible for its disposal. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Edit this page View Source UseNpgsql(DbContextOptionsBuilder, DbConnection, bool, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, DbConnection connection, bool contextOwnsConnection, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder A builder for setting options on the context. DbConnection connection An existing DbConnection to be used to connect to the database. If the connection is in the open state then EF will not open or close the connection. If the connection is in the closed state then EF will open and close the connection as needed. bool contextOwnsConnection If true, then EF will take ownership of the connection and will dispose it in the same way it would dispose a connection created by EF. If false, then the caller still owns the connection and is responsible for its disposal. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Edit this page View Source UseNpgsql(DbContextOptionsBuilder, DbDataSource, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, DbDataSource dataSource, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder A builder for setting options on the context. DbDataSource dataSource A DbDataSource which will be used to get database connections. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Edit this page View Source UseNpgsql(DbContextOptionsBuilder, string?, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, string? connectionString, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder A builder for setting options on the context. string connectionString The connection string of the database to connect to. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Edit this page View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL server with Npgsql, but without initially setting any DbConnection, DbDataSource or connection string. The connection, data source or connection string must be set explicitly or registered in the DI before the DbContext is used to connect to a database. Set a connection using SetDbConnection(DatabaseFacade, DbConnection, bool), a data source using SetDbDataSource(DatabaseFacade, DbDataSource), or a connection string using SetConnectionString(DatabaseFacade, string). Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder<TContext> optionsBuilder The builder being used to configure the context. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder<TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext | Edit this page View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, DbConnection, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, DbConnection connection, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder<TContext> optionsBuilder A builder for setting options on the context. DbConnection connection An existing DbConnection to be used to connect to the database. If the connection is in the open state then EF will not open or close the connection. If the connection is in the closed state then EF will open and close the connection as needed. The caller owns the connection and is responsible for its disposal. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder<TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext | Edit this page View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, DbConnection, bool, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, DbConnection connection, bool contextOwnsConnection, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder<TContext> optionsBuilder The builder being used to configure the context. DbConnection connection An existing DbConnection to be used to connect to the database. If the connection is in the open state then EF will not open or close the connection. If the connection is in the closed state then EF will open and close the connection as needed. bool contextOwnsConnection If true, then EF will take ownership of the connection and will dispose it in the same way it would dispose a connection created by EF. If false, then the caller still owns the connection and is responsible for its disposal. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder<TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext The type of context to be configured. | Edit this page View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, DbDataSource, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, DbDataSource dataSource, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder<TContext> optionsBuilder A builder for setting options on the context. DbDataSource dataSource A DbDataSource which will be used to get database connections. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder<TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext | Edit this page View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, string?, Action<NpgsqlDbContextOptionsBuilder>?) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, string? connectionString, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder<TContext> optionsBuilder A builder for setting options on the context. string connectionString The connection string of the database to connect to. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional Npgsql-configuration. Returns Type Description DbContextOptionsBuilder<TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbFunctionsExtensions.html",
    "title": "Class NpgsqlDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDbFunctionsExtensions Provides Npgsql-specific extension methods on DbFunctions. Inheritance object NpgsqlDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDbFunctionsExtensions Methods | Edit this page View Source Distance(DbFunctions, DateOnly, DateOnly) Returns the distance between two dates as a number of days, particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, DateOnly a, DateOnly b) Parameters Type Name Description DbFunctions _ DateOnly a DateOnly b Returns Type Description int Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html. | Edit this page View Source Distance(DbFunctions, DateTime, DateTime) Returns the distance between two timestamps as a PostgreSQL interval, particularly suitable for sorting where the appropriate index is defined. Declaration public static TimeSpan Distance(this DbFunctions _, DateTime a, DateTime b) Parameters Type Name Description DbFunctions _ DateTime a DateTime b Returns Type Description TimeSpan Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html. | Edit this page View Source GreaterThan(DbFunctions, ITuple, ITuple) Returns whether the row value represented by a is greater than the row value represented by b. Declaration public static bool GreaterThan(this DbFunctions _, ITuple a, ITuple b) Parameters Type Name Description DbFunctions _ ITuple a ITuple b Returns Type Description bool Remarks For more information on row value comparisons, see the PostgreSQL documentation. | Edit this page View Source GreaterThanOrEqual(DbFunctions, ITuple, ITuple) Returns whether the row value represented by a is greater than or equal to the row value represented by b. Declaration public static bool GreaterThanOrEqual(this DbFunctions _, ITuple a, ITuple b) Parameters Type Name Description DbFunctions _ ITuple a ITuple b Returns Type Description bool Remarks For more information on row value comparisons, see the PostgreSQL documentation. | Edit this page View Source ILike(DbFunctions, string, string) An implementation of the PostgreSQL ILIKE operation, which is an insensitive LIKE. Declaration public static bool ILike(this DbFunctions _, string matchExpression, string pattern) Parameters Type Name Description DbFunctions _ The DbFunctions instance. string matchExpression The string that is to be matched. string pattern The pattern which may involve wildcards %,_,[,],^. Returns Type Description bool true if there is a match. | Edit this page View Source ILike(DbFunctions, string, string, string) An implementation of the PostgreSQL ILIKE operation, which is an insensitive LIKE. Declaration public static bool ILike(this DbFunctions _, string matchExpression, string pattern, string escapeCharacter) Parameters Type Name Description DbFunctions _ The DbFunctions instance. string matchExpression The string that is to be matched. string pattern The pattern which may involve wildcards %,_,[,],^. string escapeCharacter The escape character (as a single character string) to use in front of %,_,[,],^ if they are not used as wildcards. Returns Type Description bool true if there is a match. | Edit this page View Source LessThan(DbFunctions, ITuple, ITuple) Returns whether the row value represented by a is less than the row value represented by b. Declaration public static bool LessThan(this DbFunctions _, ITuple a, ITuple b) Parameters Type Name Description DbFunctions _ ITuple a ITuple b Returns Type Description bool Remarks For more information on row value comparisons, see the PostgreSQL documentation. | Edit this page View Source LessThanOrEqual(DbFunctions, ITuple, ITuple) Returns whether the row value represented by a is less than or equal to the row value represented by b. Declaration public static bool LessThanOrEqual(this DbFunctions _, ITuple a, ITuple b) Parameters Type Name Description DbFunctions _ ITuple a ITuple b Returns Type Description bool Remarks For more information on row value comparisons, see the PostgreSQL documentation. | Edit this page View Source Reverse(DbFunctions, string) Reverses a string by calling PostgreSQL reverse(). Declaration public static string Reverse(this DbFunctions _, string value) Parameters Type Name Description DbFunctions _ The DbFunctions instance. string value The string that is to be reversed. Returns Type Description string The reversed string. | Edit this page View Source StringToArray(DbFunctions, string, string) Splits value at occurrences of delimiter and forms the resulting fields into a text array. Declaration public static string[] StringToArray(this DbFunctions _, string value, string delimiter) Parameters Type Name Description DbFunctions _ The DbFunctions instance. string value The string to be split. string delimiter If null, each character in the string will become a separate element in the array. If an empty string, the string is treated as a single field. Returns Type Description string[] Exceptions Type Condition InvalidOperationException | Edit this page View Source StringToArray(DbFunctions, string, string, string) Splits value at occurrences of delimiter and forms the resulting fields into a text array. Declaration public static string[] StringToArray(this DbFunctions _, string value, string delimiter, string nullString) Parameters Type Name Description DbFunctions _ The DbFunctions instance. string value The string to be split. string delimiter If null, each character in the string will become a separate element in the array. If an empty string, the string is treated as a single field. string nullString Fields matching this value string are replaced by null. Returns Type Description string[]"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeBuilderExtensions.html",
    "title": "Class NpgsqlEntityTypeBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlEntityTypeBuilderExtensions Npgsql-specific extension methods for EntityTypeBuilder. Inheritance object NpgsqlEntityTypeBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEntityTypeBuilderExtensions Remarks See Modeling entity types and relationships. Methods | Edit this page View Source CanSetIsUnlogged(IConventionEntityTypeBuilder, bool, bool) Returns a value indicating whether the mapped table can be configured to use an unlogged table when targeting Npgsql. Declaration public static bool CanSetIsUnlogged(this IConventionEntityTypeBuilder entityTypeBuilder, bool unlogged = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. bool unlogged True to configure the entity to use an unlogged table; otherwise, false. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Edit this page View Source CanSetStorageParameter(IConventionEntityTypeBuilder, string, object?, bool) Returns a value indicating whether the PostgreSQL storage parameter is set on the table created for this entity. Declaration public static bool CanSetStorageParameter(this IConventionEntityTypeBuilder entityTypeBuilder, string parameterName, object? parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. string parameterName The name of the storage parameter. object parameterValue The value of the storage parameter. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the mapped table can be configured as with the storage parameter. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Edit this page View Source HasGeneratedTsVectorColumn<TEntity>(EntityTypeBuilder<TEntity>, Expression<Func<TEntity, NpgsqlTsVector>>, string, Expression<Func<TEntity, object>>) Configures a property on this entity to be a full-text search tsvector column over other given properties. Declaration public static EntityTypeBuilder<TEntity> HasGeneratedTsVectorColumn<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, Expression<Func<TEntity, NpgsqlTsVector>> tsVectorPropertyExpression, string config, Expression<Func<TEntity, object>> includeExpression) where TEntity : class Parameters Type Name Description EntityTypeBuilder<TEntity> entityTypeBuilder The builder for the entity being configured. Expression<Func<TEntity, NpgsqlTsVector>> tsVectorPropertyExpression A lambda expression representing the property to be configured as a tsvector column (blog => blog.Url). string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Expression<Func<TEntity, object>> includeExpression A lambda expression representing the property(s) to be included in the tsvector column (blog => blog.Url). If multiple properties are to be included then specify an anonymous type including the properties (post => new { post.Title, post.BlogId }). Returns Type Description EntityTypeBuilder<TEntity> A builder to further configure the property. Type Parameters Name Description TEntity | Edit this page View Source HasStorageParameter(EntityTypeBuilder, string, object?) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration public static EntityTypeBuilder HasStorageParameter(this EntityTypeBuilder entityTypeBuilder, string parameterName, object? parameterValue) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. string parameterName The name of the storage parameter. object parameterValue The value of the storage parameter. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Edit this page View Source HasStorageParameter(IConventionEntityTypeBuilder, string, object?, bool) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration public static IConventionEntityTypeBuilder? HasStorageParameter(this IConventionEntityTypeBuilder entityTypeBuilder, string parameterName, object? parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. string parameterName The name of the storage parameter. object parameterValue The value of the storage parameter. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionEntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Edit this page View Source HasStorageParameter<TEntity>(EntityTypeBuilder<TEntity>, string, object?) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration public static EntityTypeBuilder<TEntity> HasStorageParameter<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, string parameterName, object? parameterValue) where TEntity : class Parameters Type Name Description EntityTypeBuilder<TEntity> entityTypeBuilder The builder for the entity type being configured. string parameterName The name of the storage parameter. object parameterValue The value of the storage parameter. Returns Type Description EntityTypeBuilder<TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Edit this page View Source IsUnlogged(EntityTypeBuilder, bool) Configures the entity to use an unlogged table when targeting Npgsql. Declaration public static EntityTypeBuilder IsUnlogged(this EntityTypeBuilder entityTypeBuilder, bool unlogged = true) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. bool unlogged True to configure the entity to use an unlogged table; otherwise, false. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Edit this page View Source IsUnlogged(IConventionEntityTypeBuilder, bool, bool) Configures the mapped table to use an unlogged table when targeting Npgsql. Declaration public static IConventionEntityTypeBuilder? IsUnlogged(this IConventionEntityTypeBuilder entityTypeBuilder, bool unlogged = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. bool unlogged True to configure the entity to use an unlogged table; otherwise, false. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionEntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Edit this page View Source IsUnlogged<TEntity>(EntityTypeBuilder<TEntity>, bool) Configures the mapped table to use an unlogged table when targeting Npgsql. Declaration public static EntityTypeBuilder<TEntity> IsUnlogged<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, bool unlogged = true) where TEntity : class Parameters Type Name Description EntityTypeBuilder<TEntity> entityTypeBuilder The builder for the entity type being configured. bool unlogged True to configure the entity to use an unlogged table; otherwise, false. Returns Type Description EntityTypeBuilder<TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Edit this page View Source UseCockroachDbInterleaveInParent(EntityTypeBuilder, Type, List<string>) Specifies that the CockroachDB-specific \"interleave in parent\" feature should be used. Declaration public static EntityTypeBuilder UseCockroachDbInterleaveInParent(this EntityTypeBuilder entityTypeBuilder, Type parentTableType, List<string> interleavePrefix) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder Type parentTableType List<string> interleavePrefix Returns Type Description EntityTypeBuilder | Edit this page View Source UseCockroachDbInterleaveInParent<TEntity>(EntityTypeBuilder<TEntity>, Type, List<string>) Specifies that the CockroachDB-specific \"interleave in parent\" feature should be used. Declaration public static EntityTypeBuilder<TEntity> UseCockroachDbInterleaveInParent<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, Type parentTableType, List<string> interleavePrefix) where TEntity : class Parameters Type Name Description EntityTypeBuilder<TEntity> entityTypeBuilder Type parentTableType List<string> interleavePrefix Returns Type Description EntityTypeBuilder<TEntity> Type Parameters Name Description TEntity | Edit this page View Source UseXminAsConcurrencyToken(EntityTypeBuilder) Configures using the auto-updating system column xmin as the optimistic concurrency token. Declaration [Obsolete(\"Use EF Core's standard IsRowVersion() or [Timestamp], see https://learn.microsoft.com/ef/core/saving/concurrency\")] public static EntityTypeBuilder UseXminAsConcurrencyToken(this EntityTypeBuilder entityTypeBuilder) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See Concurrency tokens for more information on using optimistic concurrency in PostgreSQL. | Edit this page View Source UseXminAsConcurrencyToken<TEntity>(EntityTypeBuilder<TEntity>) Configures using the auto-updating system column xmin as the optimistic concurrency token. Declaration [Obsolete(\"Use EF Core's standard IsRowVersion() or [Timestamp], see https://learn.microsoft.com/ef/core/saving/concurrency\")] public static EntityTypeBuilder<TEntity> UseXminAsConcurrencyToken<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder) where TEntity : class Parameters Type Name Description EntityTypeBuilder<TEntity> entityTypeBuilder The builder for the entity type being configured. Returns Type Description EntityTypeBuilder<TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See http://www.npgsql.org/efcore/miscellaneous.html#optimistic-concurrency-and-concurrency-tokens"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeExtensions.html",
    "title": "Class NpgsqlEntityTypeExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlEntityTypeExtensions Extension methods for IEntityType for Npgsql-specific metadata. Inheritance object NpgsqlEntityTypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEntityTypeExtensions Methods | Edit this page View Source GetCockroachDbInterleaveInParent(IReadOnlyEntityType) Gets the CockroachDB-specific interleave-in-parent setting for the table to which the entity is mapped. Declaration public static CockroachDbInterleaveInParent GetCockroachDbInterleaveInParent(this IReadOnlyEntityType entityType) Parameters Type Name Description IReadOnlyEntityType entityType Returns Type Description CockroachDbInterleaveInParent | Edit this page View Source GetIsUnlogged(IReadOnlyEntityType) Gets whether the table to which the entity is mapped is unlogged. Declaration public static bool GetIsUnlogged(this IReadOnlyEntityType entityType) Parameters Type Name Description IReadOnlyEntityType entityType Returns Type Description bool | Edit this page View Source GetIsUnloggedConfigurationSource(IConventionEntityType) Gets the configuration source for whether the table to which the entity is mapped is unlogged. Declaration public static ConfigurationSource? GetIsUnloggedConfigurationSource(this IConventionEntityType index) Parameters Type Name Description IConventionEntityType index Returns Type Description ConfigurationSource? | Edit this page View Source GetStorageParameter(IEntityType, string) Gets a storage parameter for the table mapped to the entity type. Declaration public static string? GetStorageParameter(this IEntityType entityType, string parameterName) Parameters Type Name Description IEntityType entityType string parameterName Returns Type Description string | Edit this page View Source GetStorageParameterConfigurationSource(IConventionEntityType, string) Gets the configuration source for a storage parameter for the table mapped to the entity type. Declaration public static ConfigurationSource? GetStorageParameterConfigurationSource(this IConventionEntityType index, string parameterName) Parameters Type Name Description IConventionEntityType index string parameterName Returns Type Description ConfigurationSource? | Edit this page View Source GetStorageParameters(IReadOnlyEntityType) Gets all storage parameters for the table mapped to the entity type. Declaration public static Dictionary<string, object?> GetStorageParameters(this IReadOnlyEntityType entityType) Parameters Type Name Description IReadOnlyEntityType entityType Returns Type Description Dictionary<string, object> | Edit this page View Source SetIsUnlogged(IConventionEntityType, bool, bool) Sets whether the table to which the entity is mapped is unlogged. Declaration public static bool SetIsUnlogged(this IConventionEntityType entityType, bool unlogged, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityType entityType bool unlogged bool fromDataAnnotation Returns Type Description bool | Edit this page View Source SetIsUnlogged(IMutableEntityType, bool) Sets whether the table to which the entity is mapped is unlogged. Declaration public static void SetIsUnlogged(this IMutableEntityType entityType, bool unlogged) Parameters Type Name Description IMutableEntityType entityType bool unlogged | Edit this page View Source SetStorageParameter(IConventionEntityType, string, object?, bool) Sets a storage parameter on the table mapped to the entity type. Declaration public static object SetStorageParameter(this IConventionEntityType entityType, string parameterName, object? parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityType entityType string parameterName object parameterValue bool fromDataAnnotation Returns Type Description object | Edit this page View Source SetStorageParameter(IMutableEntityType, string, object?) Sets a storage parameter on the table mapped to the entity type. Declaration public static void SetStorageParameter(this IMutableEntityType entityType, string parameterName, object? parameterValue) Parameters Type Name Description IMutableEntityType entityType string parameterName object parameterValue"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchDbFunctionsExtensions.html",
    "title": "Class NpgsqlFullTextSearchDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlFullTextSearchDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via Functions. Inheritance object NpgsqlFullTextSearchDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlFullTextSearchDbFunctionsExtensions Remarks See Database functions. Methods | Edit this page View Source ArrayToTsVector(DbFunctions, string[]) Convert lexemes to a tsvector. Declaration public static NpgsqlTsVector ArrayToTsVector(this DbFunctions _, string[] lexemes) Parameters Type Name Description DbFunctions _ string[] lexemes Returns Type Description NpgsqlTsVector Remarks https://www.postgresql.org/docs/current/static/functions-textsearch.html | Edit this page View Source PhraseToTsQuery(DbFunctions, string) Produce tsquery that searches for a phrase from query ignoring punctuation. Declaration public static NpgsqlTsQuery PhraseToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ string query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Edit this page View Source PhraseToTsQuery(DbFunctions, string, string) Produce tsquery that searches for a phrase from query ignoring punctuation and using the text search configuration specified by config. Declaration public static NpgsqlTsQuery PhraseToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ string config string query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Edit this page View Source PlainToTsQuery(DbFunctions, string) Produce tsquery from query ignoring punctuation. Declaration public static NpgsqlTsQuery PlainToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ string query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Edit this page View Source PlainToTsQuery(DbFunctions, string, string) Produce tsquery from query ignoring punctuation and using the text search configuration specified by config. Declaration public static NpgsqlTsQuery PlainToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ string config string query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Edit this page View Source ToTsQuery(DbFunctions, string) Normalize words in query and convert to tsquery. If your input contains punctuation that should not be treated as text search operators, use PlainToTsQuery(DbFunctions, string) instead. Declaration public static NpgsqlTsQuery ToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ string query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Edit this page View Source ToTsQuery(DbFunctions, string, string) Normalize words in query and convert to tsquery using the text search configuration specified by config. If your input contains punctuation that should not be treated as text search operators, use PlainToTsQuery(DbFunctions, string, string) instead. Declaration public static NpgsqlTsQuery ToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ string config string query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Edit this page View Source ToTsVector(DbFunctions, string) Reduce document to tsvector. Declaration public static NpgsqlTsVector ToTsVector(this DbFunctions _, string document) Parameters Type Name Description DbFunctions _ string document Returns Type Description NpgsqlTsVector Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-DOCUMENTS | Edit this page View Source ToTsVector(DbFunctions, string, string) Reduce document to tsvector using the text search configuration specified by config. Declaration public static NpgsqlTsVector ToTsVector(this DbFunctions _, string config, string document) Parameters Type Name Description DbFunctions _ string config string document Returns Type Description NpgsqlTsVector Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-DOCUMENTS | Edit this page View Source Unaccent(DbFunctions, string) Returns a new string that removes diacritics from characters in the given text. Declaration public static string Unaccent(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ The DbFunctions instance. string text The text to remove the diacritics. Returns Type Description string A string without diacritics. Remarks The method call is translated to unaccent(text). See https://www.postgresql.org/docs/current/unaccent.html. | Edit this page View Source Unaccent(DbFunctions, string, string) Returns a new string that removes diacritics from characters in the given text. Declaration public static string Unaccent(this DbFunctions _, string regDictionary, string text) Parameters Type Name Description DbFunctions _ The DbFunctions instance. string regDictionary A specific text search dictionary. string text The text to remove the diacritics. Returns Type Description string A string without diacritics. Remarks The method call is translated to unaccent(regdictionary, text). See https://www.postgresql.org/docs/current/unaccent.html. | Edit this page View Source WebSearchToTsQuery(DbFunctions, string) Convert query tsquery using the simplified websearch syntax. Declaration public static NpgsqlTsQuery WebSearchToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ string query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Edit this page View Source WebSearchToTsQuery(DbFunctions, string, string) Convert query tsquery using the simplified websearch syntax and the text search configuration specified by config. Declaration public static NpgsqlTsQuery WebSearchToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ string config string query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchLinqExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchLinqExtensions.html",
    "title": "Class NpgsqlFullTextSearchLinqExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlFullTextSearchLinqExtensions Provides EF Core extension methods for Npgsql full-text search types. Inheritance object NpgsqlFullTextSearchLinqExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlFullTextSearchLinqExtensions Methods | Edit this page View Source And(NpgsqlTsQuery, NpgsqlTsQuery) AND tsquerys together. Generates the \"&&\" operator. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery And(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description NpgsqlTsQuery | Edit this page View Source Concat(NpgsqlTsVector, NpgsqlTsVector) Returns a vector which combines the lexemes and positional information of vector1 and vector2 using the || tsvector operator. Positions and weight labels are retained during the concatenation. https://www.postgresql.org/docs/10/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector Concat(this NpgsqlTsVector vector1, NpgsqlTsVector vector2) Parameters Type Name Description NpgsqlTsVector vector1 NpgsqlTsVector vector2 Returns Type Description NpgsqlTsVector | Edit this page View Source Contains(NpgsqlTsQuery, NpgsqlTsQuery) Returns whether query1 contains query2. Generates the \"@>\" operator. http://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static bool Contains(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description bool | Edit this page View Source Delete(NpgsqlTsVector, string) Return a new vector with lexeme removed from vector https://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static NpgsqlTsVector Delete(this NpgsqlTsVector vector, string lexeme) Parameters Type Name Description NpgsqlTsVector vector string lexeme Returns Type Description NpgsqlTsVector | Edit this page View Source Delete(NpgsqlTsVector, string[]) Return a new vector with lexemes removed from vector https://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static NpgsqlTsVector Delete(this NpgsqlTsVector vector, string[] lexemes) Parameters Type Name Description NpgsqlTsVector vector string[] lexemes Returns Type Description NpgsqlTsVector | Edit this page View Source Filter(NpgsqlTsVector, char[]) Returns a new vector with only lexemes having weights specified in weights. https://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static NpgsqlTsVector Filter(this NpgsqlTsVector vector, char[] weights) Parameters Type Name Description NpgsqlTsVector vector char[] weights Returns Type Description NpgsqlTsVector | Edit this page View Source GetLength(NpgsqlTsVector) Returns the number of lexemes in vector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static int GetLength(this NpgsqlTsVector vector) Parameters Type Name Description NpgsqlTsVector vector Returns Type Description int | Edit this page View Source GetNodeCount(NpgsqlTsQuery) Returns the number of lexemes plus operators in query. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static int GetNodeCount(this NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsQuery query Returns Type Description int | Edit this page View Source GetQueryTree(NpgsqlTsQuery) Get the indexable part of query. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static string GetQueryTree(this NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsQuery query Returns Type Description string | Edit this page View Source GetResultHeadline(NpgsqlTsQuery, string) Returns a string suitable for display containing a query match. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-HEADLINE Declaration public static string GetResultHeadline(this NpgsqlTsQuery query, string document) Parameters Type Name Description NpgsqlTsQuery query string document Returns Type Description string | Edit this page View Source GetResultHeadline(NpgsqlTsQuery, string, string) Returns a string suitable for display containing a query match. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-HEADLINE Declaration public static string GetResultHeadline(this NpgsqlTsQuery query, string document, string options) Parameters Type Name Description NpgsqlTsQuery query string document string options Returns Type Description string | Edit this page View Source GetResultHeadline(NpgsqlTsQuery, string, string, string) Returns a string suitable for display containing a query match using the text search configuration specified by config. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-HEADLINE Declaration public static string GetResultHeadline(this NpgsqlTsQuery query, string config, string document, string options) Parameters Type Name Description NpgsqlTsQuery query string config string document string options Returns Type Description string | Edit this page View Source IsContainedIn(NpgsqlTsQuery, NpgsqlTsQuery) Returns whether query1 is contained within query2. Generates the \"<@\" operator. http://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static bool IsContainedIn(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description bool | Edit this page View Source Matches(NpgsqlTsVector, NpgsqlTsQuery) This method generates the \"@@\" match operator. http://www.postgresql.org/docs/current/static/textsearch-intro.html#TEXTSEARCH-MATCHING Declaration public static bool Matches(this NpgsqlTsVector vector, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query Returns Type Description bool | Edit this page View Source Matches(NpgsqlTsVector, string) This method generates the \"@@\" match operator. The <code class=\"paramref\">query parameter is assumed to be a plain search query and will be converted to a tsquery using plainto_tsquery. http://www.postgresql.org/docs/current/static/textsearch-intro.html#TEXTSEARCH-MATCHING Declaration public static bool Matches(this NpgsqlTsVector vector, string query) Parameters Type Name Description NpgsqlTsVector vector string query Returns Type Description bool | Edit this page View Source Or(NpgsqlTsQuery, NpgsqlTsQuery) OR tsquerys together. Generates the \"||\" operator. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery Or(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description NpgsqlTsQuery | Edit this page View Source Rank(NpgsqlTsVector, NpgsqlTsQuery) Calculates the rank of vector for query. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query Returns Type Description float | Edit this page View Source Rank(NpgsqlTsVector, NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query while normalizing the result according to the behaviors specified by normalization. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description float | Edit this page View Source Rank(NpgsqlTsVector, float[], NpgsqlTsQuery) Calculates the rank of vector for query with custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector float[] weights NpgsqlTsQuery query Returns Type Description float | Edit this page View Source Rank(NpgsqlTsVector, float[], NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query while normalizing the result according to the behaviors specified by normalization and using custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector float[] weights NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description float | Edit this page View Source RankCoverDensity(NpgsqlTsVector, NpgsqlTsQuery) Calculates the rank of vector for query using the cover density method. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query Returns Type Description float | Edit this page View Source RankCoverDensity(NpgsqlTsVector, NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query using the cover density method while normalizing the result according to the behaviors specified by normalization. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description float | Edit this page View Source RankCoverDensity(NpgsqlTsVector, float[], NpgsqlTsQuery) Calculates the rank of vector for query using the cover density method with custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector float[] weights NpgsqlTsQuery query Returns Type Description float | Edit this page View Source RankCoverDensity(NpgsqlTsVector, float[], NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query using the cover density method while normalizing the result according to the behaviors specified by normalization and using custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector float[] weights NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description float | Edit this page View Source Rewrite(NpgsqlTsQuery, NpgsqlTsQuery, NpgsqlTsQuery) Searches query for occurrences of target, and replaces each occurrence with a substitute. All parameters are of type tsquery. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery Rewrite(this NpgsqlTsQuery query, NpgsqlTsQuery target, NpgsqlTsQuery substitute) Parameters Type Name Description NpgsqlTsQuery query NpgsqlTsQuery target NpgsqlTsQuery substitute Returns Type Description NpgsqlTsQuery | Edit this page View Source Rewrite(NpgsqlTsQuery, string) For each row of the SQL select result, occurrences of the first column value (the target) are replaced by the second column value (the substitute) within the current query value. The select must yield two columns of tsquery type. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery Rewrite(this NpgsqlTsQuery query, string select) Parameters Type Name Description NpgsqlTsQuery query string select Returns Type Description NpgsqlTsQuery | Edit this page View Source SetWeight(NpgsqlTsVector, Weight) Assign weight to each element of vector and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, NpgsqlTsVector.Lexeme.Weight weight) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsVector.Lexeme.Weight weight Returns Type Description NpgsqlTsVector | Edit this page View Source SetWeight(NpgsqlTsVector, Weight, string[]) Assign weight to elements of vector that are in lexemes and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, NpgsqlTsVector.Lexeme.Weight weight, string[] lexemes) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsVector.Lexeme.Weight weight string[] lexemes Returns Type Description NpgsqlTsVector | Edit this page View Source SetWeight(NpgsqlTsVector, char) Assign weight to each element of vector and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, char weight) Parameters Type Name Description NpgsqlTsVector vector char weight Returns Type Description NpgsqlTsVector | Edit this page View Source SetWeight(NpgsqlTsVector, char, string[]) Assign weight to elements of vector that are in lexemes and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, char weight, string[] lexemes) Parameters Type Name Description NpgsqlTsVector vector char weight string[] lexemes Returns Type Description NpgsqlTsVector | Edit this page View Source ToNegative(NpgsqlTsQuery) Negate a tsquery. Generates the \"!!\" operator. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery ToNegative(this NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsQuery query Returns Type Description NpgsqlTsQuery | Edit this page View Source ToPhrase(NpgsqlTsQuery, NpgsqlTsQuery) Returns a tsquery that searches for a match to query1 followed by a match to query2. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery ToPhrase(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description NpgsqlTsQuery | Edit this page View Source ToPhrase(NpgsqlTsQuery, NpgsqlTsQuery, int) Returns a tsquery that searches for a match to query1 followed by a match to query2 at a distance of distance lexemes using the <N> tsquery operator http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery ToPhrase(this NpgsqlTsQuery query1, NpgsqlTsQuery query2, int distance) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 int distance Returns Type Description NpgsqlTsQuery | Edit this page View Source ToStripped(NpgsqlTsVector) Removes weights and positions from vector and returns a new stripped tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector ToStripped(this NpgsqlTsVector vector) Parameters Type Name Description NpgsqlTsVector vector Returns Type Description NpgsqlTsVector"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFuzzyStringMatchDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFuzzyStringMatchDbFunctionsExtensions.html",
    "title": "Class NpgsqlFuzzyStringMatchDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlFuzzyStringMatchDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via Functions. Inheritance object NpgsqlFuzzyStringMatchDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlFuzzyStringMatchDbFunctionsExtensions Remarks See Database functions. Methods | Edit this page View Source FuzzyStringMatchDifference(DbFunctions, string, string) The difference function converts two strings to their Soundex codes and then returns the number of matching code positions. Since Soundex codes have four characters, the result ranges from zero to four, with zero being no match and four being an exact match. Declaration public static int FuzzyStringMatchDifference(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description int Remarks The method call is translated to difference(source, target). See https://www.postgresql.org/docs/current/fuzzystrmatch.html. | Edit this page View Source FuzzyStringMatchDoubleMetaphone(DbFunctions, string) The dmetaphone function converts a string to its primary Double Metaphone code. Declaration public static string FuzzyStringMatchDoubleMetaphone(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ string text Returns Type Description string Remarks The method call is translated to dmetaphone(text). See https://www.postgresql.org/docs/current/fuzzystrmatch.html. | Edit this page View Source FuzzyStringMatchDoubleMetaphoneAlt(DbFunctions, string) The dmetaphone_alt function converts a string to its alternate Double Metaphone code. Declaration public static string FuzzyStringMatchDoubleMetaphoneAlt(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ string text Returns Type Description string Remarks The method call is translated to dmetaphone_alt(text). See https://www.postgresql.org/docs/current/fuzzystrmatch.html. | Edit this page View Source FuzzyStringMatchLevenshtein(DbFunctions, string, string) Returns the Levenshtein distance between two strings. Declaration public static int FuzzyStringMatchLevenshtein(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description int Remarks The method call is translated to levenshtein(source, target). See https://www.postgresql.org/docs/current/fuzzystrmatch.html. | Edit this page View Source FuzzyStringMatchLevenshtein(DbFunctions, string, string, int, int, int) Returns the Levenshtein distance between two strings. Declaration public static int FuzzyStringMatchLevenshtein(this DbFunctions _, string source, string target, int insertionCost, int deletionCost, int substitutionCost) Parameters Type Name Description DbFunctions _ string source string target int insertionCost int deletionCost int substitutionCost Returns Type Description int Remarks The method call is translated to levenshtein(source, target, insertionCost, deletionCost, substitutionCost). See https://www.postgresql.org/docs/current/fuzzystrmatch.html. | Edit this page View Source FuzzyStringMatchLevenshteinLessEqual(DbFunctions, string, string, int) levenshtein_less_equal is an accelerated version of the Levenshtein function for use when only small distances are of interest. If the actual distance is less than or equal to maximum distance, then levenshtein_less_equal returns the correct distance; otherwise it returns some value greater than maximum distance. If maximum distance is negative then the behavior is the same as levenshtein. Declaration public static int FuzzyStringMatchLevenshteinLessEqual(this DbFunctions _, string source, string target, int maximumDistance) Parameters Type Name Description DbFunctions _ string source string target int maximumDistance Returns Type Description int Remarks The method call is translated to levenshtein_less_equal(source, target, maximumDistance). See https://www.postgresql.org/docs/current/fuzzystrmatch.html. | Edit this page View Source FuzzyStringMatchLevenshteinLessEqual(DbFunctions, string, string, int, int, int, int) levenshtein_less_equal is an accelerated version of the Levenshtein function for use when only small distances are of interest. If the actual distance is less than or equal to maximum distance, then levenshtein_less_equal returns the correct distance; otherwise it returns some value greater than maximum distance. If maximum distance is negative then the behavior is the same as levenshtein. Declaration public static int FuzzyStringMatchLevenshteinLessEqual(this DbFunctions _, string source, string target, int insertionCost, int deletionCost, int substitutionCost, int maximumDistance) Parameters Type Name Description DbFunctions _ string source string target int insertionCost int deletionCost int substitutionCost int maximumDistance Returns Type Description int Remarks The method call is translated to levenshtein_less_equal(source, target, insertionCost, deletionCost, substitutionCost, maximumDistance). See https://www.postgresql.org/docs/current/fuzzystrmatch.html. | Edit this page View Source FuzzyStringMatchMetaphone(DbFunctions, string, int) The metaphone function converts a string to its Metaphone code. Declaration public static string FuzzyStringMatchMetaphone(this DbFunctions _, string text, int maximumOutputLength) Parameters Type Name Description DbFunctions _ string text int maximumOutputLength Returns Type Description string Remarks The method call is translated to metaphone(text, maximumOutputLength). See https://www.postgresql.org/docs/current/fuzzystrmatch.html. | Edit this page View Source FuzzyStringMatchSoundex(DbFunctions, string) The soundex function converts a string to its Soundex code. Declaration public static string FuzzyStringMatchSoundex(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ string text Returns Type Description string Remarks The method call is translated to soundex(text). See https://www.postgresql.org/docs/current/fuzzystrmatch.html."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexBuilderExtensions.html",
    "title": "Class NpgsqlIndexBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlIndexBuilderExtensions Npgsql specific extension methods for IndexBuilder. Inheritance object NpgsqlIndexBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlIndexBuilderExtensions Methods | Edit this page View Source AreNullsDistinct(IConventionIndexBuilder, bool, bool) Specifies whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static IConventionIndexBuilder? AreNullsDistinct(this IConventionIndexBuilder indexBuilder, bool nullsDistinct = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. bool nullsDistinct Whether nulls should be considered distinct. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Edit this page View Source AreNullsDistinct(IndexBuilder, bool) Specifies whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static IndexBuilder AreNullsDistinct(this IndexBuilder indexBuilder, bool nullsDistinct = true) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. bool nullsDistinct Whether nulls should be considered distinct. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Edit this page View Source AreNullsDistinct<TEntity>(IndexBuilder<TEntity>, bool) Specifies whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static IndexBuilder<TEntity> AreNullsDistinct<TEntity>(this IndexBuilder<TEntity> indexBuilder, bool nullsDistinct = true) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. bool nullsDistinct Whether nulls should be considered distinct. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Edit this page View Source CanSetAreNullsDistinct(IConventionIndexBuilder, bool, bool) Specifies whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static bool CanSetAreNullsDistinct(this IConventionIndexBuilder indexBuilder, bool nullsDistinct = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. bool nullsDistinct Whether nulls should be considered distinct. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the index can be configured with the method Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Edit this page View Source CanSetCollation(IConventionIndexBuilder, IReadOnlyList<string>?, bool) Returns a value indicating whether the PostgreSQL index collation can be set. Declaration public static bool CanSetCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> values The sort options to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source CanSetHasCollation(IConventionIndexBuilder, IReadOnlyList<string>?, bool) Returns a value indicating whether the PostgreSQL index collation can be set. Declaration [Obsolete(\"Use CanSetHasCollation\")] public static bool CanSetHasCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> values The sort options to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source CanSetHasMethod(IConventionIndexBuilder, string?, bool) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration [Obsolete(\"Use CanSetMethod\")] public static bool CanSetHasMethod(this IConventionIndexBuilder indexBuilder, string? method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. string method The name of the index. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the index can be configured with the method Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source CanSetHasNullSortOrder(IConventionIndexBuilder, IReadOnlyList<NullSortOrder>?, bool) Returns a value indicating whether the PostgreSQL index null sort ordering can be set. Declaration [Obsolete(\"Use CanSetNullSortOrder\")] public static bool CanSetHasNullSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<NullSortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<NullSortOrder> values The sort order to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source CanSetHasOperators(IConventionIndexBuilder, IReadOnlyList<string>?, bool) Returns a value indicating whether the PostgreSQL index operators can be set. Declaration [Obsolete(\"Use CanSetOperators\")] public static bool CanSetHasOperators(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? operators, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> operators The operators to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the index can be configured with the method. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Edit this page View Source CanSetHasSortOrder(IConventionIndexBuilder, IReadOnlyList<SortOrder>?, bool) Returns a value indicating whether the PostgreSQL index sort ordering can be set. Declaration [Obsolete(\"Use CanSetSortOrder\")] public static bool CanSetHasSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<SortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<SortOrder> values The sort order to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source CanSetInclude(IConventionIndexBuilder, IReadOnlyList<string>?, bool) Returns a value indicating whether the given include properties can be set. Declaration [Obsolete(\"Use CanSetIncludeProperties\")] public static bool CanSetInclude(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? propertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> propertyNames An array of property names to be used in 'include' clause. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the given include properties can be set. | Edit this page View Source CanSetIncludeProperties(IConventionIndexBuilder, IReadOnlyList<string>?, bool) Returns a value indicating whether the given include properties can be set. Declaration public static bool CanSetIncludeProperties(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? propertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> propertyNames An array of property names to be used in 'include' clause. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the given include properties can be set. | Edit this page View Source CanSetIsCreatedConcurrently(IConventionIndexBuilder, bool?, bool) Returns a value indicating whether concurrent creation for the index can be set. Declaration public static bool CanSetIsCreatedConcurrently(this IConventionIndexBuilder indexBuilder, bool? createdConcurrently, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. bool? createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Edit this page View Source CanSetIsTsVectorExpressionIndex(IConventionIndexBuilder, string?, bool) Returns a value indicating whether the index can be configured as a full-text tsvector expression index. Declaration public static bool CanSetIsTsVectorExpressionIndex(this IConventionIndexBuilder indexBuilder, string? config, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the index can be configured as a full-text tsvector expression index. | Edit this page View Source CanSetMethod(IConventionIndexBuilder, string?, bool) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static bool CanSetMethod(this IConventionIndexBuilder indexBuilder, string? method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. string method The name of the index. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the index can be configured with the method Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source CanSetNullSortOrder(IConventionIndexBuilder, IReadOnlyList<NullSortOrder>?, bool) Returns a value indicating whether the PostgreSQL index null sort ordering can be set. Declaration public static bool CanSetNullSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<NullSortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<NullSortOrder> values The sort order to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source CanSetOperators(IConventionIndexBuilder, IReadOnlyList<string>?, bool) Returns a value indicating whether the PostgreSQL index operators can be set. Declaration public static bool CanSetOperators(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? operators, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> operators The operators to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the index can be configured with the method. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Edit this page View Source CanSetSortOrder(IConventionIndexBuilder, IReadOnlyList<SortOrder>?, bool) Returns a value indicating whether the PostgreSQL index sort ordering can be set. Declaration [Obsolete(\"Use IsDescending instead\")] public static bool CanSetSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<SortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<SortOrder> values The sort order to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source CanSetStorageParameter(IConventionIndexBuilder, string, object?, bool) Returns a value indicating whether the PostgreSQL storage parameter is set on the table created for this entity. Declaration public static bool CanSetStorageParameter(this IConventionIndexBuilder indexBuilder, string parameterName, object? parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. string parameterName The name of the storage parameter. object parameterValue The value of the storage parameter. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the index can be configured as with the storage parameter. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Edit this page View Source CanSetToTsVector(IConventionIndexBuilder, string?, bool) Returns a value indicating whether the index can be configured as a full-text tsvector expression index. Declaration [Obsolete(\"Use CanSetIsTsVectorExpressionIndex\")] public static bool CanSetToTsVector(this IConventionIndexBuilder indexBuilder, string? config, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the index can be configured as a full-text tsvector expression index. | Edit this page View Source HasCollation(IConventionIndexBuilder, IReadOnlyList<string>?, bool) The PostgreSQL index collation to be used. Declaration [Obsolete(\"Use UseCollation\")] public static IConventionIndexBuilder? HasCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> values The sort options to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source HasCollation(IndexBuilder, params string[]?) The PostgreSQL index collation to be used. Declaration [Obsolete(\"Use UseCollation\")] public static IndexBuilder HasCollation(this IndexBuilder indexBuilder, params string[]? values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. string[] values The sort options to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source HasCollation<TEntity>(IndexBuilder<TEntity>, params string[]?) The PostgreSQL index collation to be used. Declaration [Obsolete(\"Use UseCollation\")] public static IndexBuilder<TEntity> HasCollation<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[]? values) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. string[] values The sort options to use for each column. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source HasMethod(IConventionIndexBuilder, string?, bool) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static IConventionIndexBuilder? HasMethod(this IConventionIndexBuilder indexBuilder, string? method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. string method The name of the index. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source HasMethod(IndexBuilder, string?) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static IndexBuilder HasMethod(this IndexBuilder indexBuilder, string? method) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. string method The name of the index. Returns Type Description IndexBuilder A builder to further configure the index. Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source HasMethod<TEntity>(IndexBuilder<TEntity>, string?) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static IndexBuilder<TEntity> HasMethod<TEntity>(this IndexBuilder<TEntity> indexBuilder, string? method) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. string method The name of the index. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source HasNullSortOrder(IConventionIndexBuilder, IReadOnlyList<NullSortOrder>?, bool) The PostgreSQL index NULL sort ordering to be used. Declaration public static IConventionIndexBuilder? HasNullSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<NullSortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<NullSortOrder> values The sort order to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source HasNullSortOrder(IndexBuilder, params NullSortOrder[]?) The PostgreSQL index NULL sort ordering to be used. Declaration public static IndexBuilder HasNullSortOrder(this IndexBuilder indexBuilder, params NullSortOrder[]? values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. NullSortOrder[] values The sort order to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source HasNullSortOrder<TEntity>(IndexBuilder<TEntity>, params NullSortOrder[]?) The PostgreSQL index NULL sort ordering to be used. Declaration public static IndexBuilder<TEntity> HasNullSortOrder<TEntity>(this IndexBuilder<TEntity> indexBuilder, params NullSortOrder[]? values) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. NullSortOrder[] values The sort order to use for each column. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source HasOperators(IConventionIndexBuilder, IReadOnlyList<string>?, bool) The PostgreSQL index operators to be used. Declaration public static IConventionIndexBuilder? HasOperators(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? operators, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> operators The operators to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Edit this page View Source HasOperators(IndexBuilder, params string[]?) The PostgreSQL index operators to be used. Declaration public static IndexBuilder HasOperators(this IndexBuilder indexBuilder, params string[]? operators) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. string[] operators The operators to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Edit this page View Source HasOperators<TEntity>(IndexBuilder<TEntity>, params string[]?) The PostgreSQL index operators to be used. Declaration public static IndexBuilder<TEntity> HasOperators<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[]? operators) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. string[] operators The operators to use for each column. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Edit this page View Source HasSortOrder(IConventionIndexBuilder, IReadOnlyList<SortOrder>?, bool) The PostgreSQL index sort ordering to be used. Declaration [Obsolete(\"Use IsDescending instead\")] public static IConventionIndexBuilder? HasSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<SortOrder>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<SortOrder> values The sort order to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source HasSortOrder(IndexBuilder, params SortOrder[]?) The PostgreSQL index sort ordering to be used. Declaration [Obsolete(\"Use IsDescending instead\")] public static IndexBuilder HasSortOrder(this IndexBuilder indexBuilder, params SortOrder[]? values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. SortOrder[] values The sort order to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source HasSortOrder<TEntity>(IndexBuilder<TEntity>, params SortOrder[]?) The PostgreSQL index sort ordering to be used. Declaration [Obsolete(\"Use IsDescending instead\")] public static IndexBuilder<TEntity> HasSortOrder<TEntity>(this IndexBuilder<TEntity> indexBuilder, params SortOrder[]? values) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. SortOrder[] values The sort order to use for each column. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source HasStorageParameter(IConventionIndexBuilder, string, object?, bool) Sets a PostgreSQL storage parameter on the index. Declaration public static IConventionIndexBuilder? HasStorageParameter(this IConventionIndexBuilder indexBuilder, string parameterName, object? parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. string parameterName The name of the storage parameter. object parameterValue The value of the storage parameter. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder true if the index can be configured with the method Remarks See https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-STORAGE-PARAMETERS | Edit this page View Source HasStorageParameter(IndexBuilder, string, object?) Sets a PostgreSQL storage parameter on the index. Declaration public static IndexBuilder HasStorageParameter(this IndexBuilder indexBuilder, string parameterName, object? parameterValue) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. string parameterName The name of the storage parameter. object parameterValue The value of the storage parameter. Returns Type Description IndexBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-STORAGE-PARAMETERS | Edit this page View Source HasStorageParameter<TEntity>(IndexBuilder<TEntity>, string, object?) Sets a PostgreSQL storage parameter on the index. Declaration public static IndexBuilder<TEntity> HasStorageParameter<TEntity>(this IndexBuilder<TEntity> indexBuilder, string parameterName, object? parameterValue) where TEntity : class Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. string parameterName The name of the storage parameter. object parameterValue The value of the storage parameter. Returns Type Description IndexBuilder<TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-STORAGE-PARAMETERS | Edit this page View Source IncludeProperties(IConventionIndexBuilder, IReadOnlyList<string>, bool) Adds an INCLUDE clause to the index definition with the specified property names. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IConventionIndexBuilder? IncludeProperties(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string> propertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> propertyNames An array of property names to be used in INCLUDE clause. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Edit this page View Source IncludeProperties(IndexBuilder, params string[]) Adds an INCLUDE clause to the index definition with the specified property names. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IndexBuilder IncludeProperties(this IndexBuilder indexBuilder, params string[] propertyNames) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. string[] propertyNames An array of property names to be used in INCLUDE clause. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Edit this page View Source IncludeProperties<TEntity>(IndexBuilder<TEntity>, Expression<Func<TEntity, object>>) Adds an INCLUDE clause to the index definition with property names from the specified expression. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IndexBuilder<TEntity> IncludeProperties<TEntity>(this IndexBuilder<TEntity> indexBuilder, Expression<Func<TEntity, object>> includeExpression) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. Expression<Func<TEntity, object>> includeExpression A lambda expression representing the property(s) to be included in the INCLUDE clause (blog => blog.Url). If multiple properties are to be included then specify an anonymous type including the properties (post => new { post.Title, post.BlogId }). Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Edit this page View Source IncludeProperties<TEntity>(IndexBuilder<TEntity>, params string[]) Adds an INCLUDE clause to the index definition with the specified property names. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IndexBuilder<TEntity> IncludeProperties<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[] propertyNames) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. string[] propertyNames An array of property names to be used in INCLUDE clause. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Edit this page View Source IsCreatedConcurrently(IConventionIndexBuilder, bool?, bool) When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. Declaration public static IConventionIndexBuilder? IsCreatedConcurrently(this IConventionIndexBuilder indexBuilder, bool? createdConcurrently, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. bool? createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Edit this page View Source IsCreatedConcurrently(IndexBuilder, bool) When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. Declaration public static IndexBuilder IsCreatedConcurrently(this IndexBuilder indexBuilder, bool createdConcurrently = true) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. bool createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Edit this page View Source IsCreatedConcurrently<TEntity>(IndexBuilder<TEntity>, bool) When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. Declaration public static IndexBuilder<TEntity> IsCreatedConcurrently<TEntity>(this IndexBuilder<TEntity> indexBuilder, bool createdConcurrently = true) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. bool createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Edit this page View Source IsTsVectorExpressionIndex(IConventionIndexBuilder, string?) Configures this index to be a full-text tsvector expression index. Declaration public static IConventionIndexBuilder? IsTsVectorExpressionIndex(this IConventionIndexBuilder indexBuilder, string? config) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Returns Type Description IConventionIndexBuilder The same builder instance if the configuration was applied, null otherwise. | Edit this page View Source IsTsVectorExpressionIndex(IndexBuilder, string) Configures this index to be a full-text tsvector expression index. Declaration public static IndexBuilder IsTsVectorExpressionIndex(this IndexBuilder indexBuilder, string config) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Returns Type Description IndexBuilder A builder to further configure the index. | Edit this page View Source IsTsVectorExpressionIndex<TEntity>(IndexBuilder<TEntity>, string) Configures this index to be a full-text tsvector expression index. Declaration public static IndexBuilder<TEntity> IsTsVectorExpressionIndex<TEntity>(this IndexBuilder<TEntity> indexBuilder, string config) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity | Edit this page View Source UseCollation(IConventionIndexBuilder, IReadOnlyList<string>?, bool) The PostgreSQL index collation to be used. Declaration public static IConventionIndexBuilder? UseCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string>? values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. IReadOnlyList<string> values The sort options to use for each column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source UseCollation(IndexBuilder, params string[]?) The PostgreSQL index collation to be used. Declaration public static IndexBuilder UseCollation(this IndexBuilder indexBuilder, params string[]? values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. string[] values The sort options to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source UseCollation<TEntity>(IndexBuilder<TEntity>, params string[]?) The PostgreSQL index collation to be used. Declaration public static IndexBuilder<TEntity> UseCollation<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[]? values) Parameters Type Name Description IndexBuilder<TEntity> indexBuilder The builder for the index being configured. string[] values The sort options to use for each column. Returns Type Description IndexBuilder<TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexExtensions.html",
    "title": "Class NpgsqlIndexExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlIndexExtensions Extension methods for IIndex for Npgsql-specific metadata. Inheritance object NpgsqlIndexExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlIndexExtensions Methods | Edit this page View Source GetAreNullsDistinct(IReadOnlyIndex) Returns whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static bool? GetAreNullsDistinct(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description bool? Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source GetAreNullsDistinctConfigurationSource(IConventionIndex) Returns the ConfigurationSource for whether nulls are considered distinct. Declaration public static ConfigurationSource? GetAreNullsDistinctConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description ConfigurationSource? The ConfigurationSource. | Edit this page View Source GetCollation(IReadOnlyIndex) Returns the column collations to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string>? GetCollation(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description IReadOnlyList<string> Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source GetCollationConfigurationSource(IConventionIndex) Returns the ConfigurationSource for the index collations. Declaration public static ConfigurationSource? GetCollationConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description ConfigurationSource? The ConfigurationSource for the index collations. | Edit this page View Source GetIncludeProperties(IReadOnlyIndex) Returns included property names, or null if they have not been specified. Declaration public static IReadOnlyList<string>? GetIncludeProperties(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index The index. Returns Type Description IReadOnlyList<string> The included property names, or null if they have not been specified. | Edit this page View Source GetIncludePropertiesConfigurationSource(IConventionIndex) Returns the ConfigurationSource for the included property names. Declaration public static ConfigurationSource? GetIncludePropertiesConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description ConfigurationSource? The ConfigurationSource for the included property names. | Edit this page View Source GetIsCreatedConcurrentlyConfigurationSource(IConventionIndex) Returns the ConfigurationSource for whether the index is created concurrently. Declaration public static ConfigurationSource? GetIsCreatedConcurrentlyConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description ConfigurationSource? The ConfigurationSource for whether the index is created concurrently. | Edit this page View Source GetMethod(IReadOnlyIndex) Returns the index method to be used, or null if it hasn't been specified. null selects the default (currently btree). Declaration public static string? GetMethod(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description string Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source GetMethodConfigurationSource(IConventionIndex) Returns the ConfigurationSource for the index method. Declaration public static ConfigurationSource? GetMethodConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description ConfigurationSource? The ConfigurationSource for the index method. | Edit this page View Source GetNullSortOrder(IReadOnlyIndex) Returns the column NULL sort orders to be used, or null if they have not been specified. Declaration public static IReadOnlyList<NullSortOrder>? GetNullSortOrder(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description IReadOnlyList<NullSortOrder> Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source GetNullSortOrderConfigurationSource(IConventionIndex) Returns the ConfigurationSource for the index null sort orders. Declaration public static ConfigurationSource? GetNullSortOrderConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description ConfigurationSource? The ConfigurationSource for the index null sort orders. | Edit this page View Source GetOperators(IReadOnlyIndex) Returns the column operators to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string>? GetOperators(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description IReadOnlyList<string> Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Edit this page View Source GetOperatorsConfigurationSource(IConventionIndex) Returns the ConfigurationSource for the index operators. Declaration public static ConfigurationSource? GetOperatorsConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description ConfigurationSource? The ConfigurationSource for the index operators. | Edit this page View Source GetSortOrder(IReadOnlyIndex) Returns the column sort orders to be used, or null if they have not been specified. Declaration [Obsolete(\"Use IsDescending instead\")] public static IReadOnlyList<SortOrder>? GetSortOrder(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description IReadOnlyList<SortOrder> Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source GetSortOrderConfigurationSource(IConventionIndex) Returns the ConfigurationSource for the index sort orders. Declaration [Obsolete(\"Use IsDescending instead\")] public static ConfigurationSource? GetSortOrderConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description ConfigurationSource? The ConfigurationSource for the index sort orders. | Edit this page View Source GetStorageParameter(IIndex, string) Gets a storage parameter for the index. Declaration public static string? GetStorageParameter(this IIndex index, string parameterName) Parameters Type Name Description IIndex index string parameterName Returns Type Description string | Edit this page View Source GetStorageParameterConfigurationSource(IConventionIndex, string) Gets the configuration source for a storage parameter for the table mapped to the entity type. Declaration public static ConfigurationSource? GetStorageParameterConfigurationSource(this IConventionIndex index, string parameterName) Parameters Type Name Description IConventionIndex index string parameterName Returns Type Description ConfigurationSource? | Edit this page View Source GetStorageParameters(IReadOnlyIndex) Gets all storage parameters for the index. Declaration public static Dictionary<string, object?> GetStorageParameters(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index Returns Type Description Dictionary<string, object> | Edit this page View Source GetTsVectorConfig(IReadOnlyIndex) Returns the text search configuration for this tsvector expression index, or null if this is not a tsvector expression index. Declaration public static string? GetTsVectorConfig(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index The index. Returns Type Description string Remarks https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX | Edit this page View Source GetTsVectorConfigConfigurationSource(IConventionIndex) Returns the ConfigurationSource for the tsvector config. Declaration public static ConfigurationSource? GetTsVectorConfigConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description ConfigurationSource? The ConfigurationSource for the tsvector config. | Edit this page View Source IsCreatedConcurrently(IReadOnlyIndex) Returns a value indicating whether the index is created concurrently. Declaration public static bool? IsCreatedConcurrently(this IReadOnlyIndex index) Parameters Type Name Description IReadOnlyIndex index The index. Returns Type Description bool? true if the index is created concurrently. | Edit this page View Source SetAreNullsDistinct(IConventionIndex, bool?, bool) Sets whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static bool? SetAreNullsDistinct(this IConventionIndex index, bool? nullsDistinct, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index bool? nullsDistinct bool fromDataAnnotation Returns Type Description bool? Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source SetAreNullsDistinct(IMutableIndex, bool?) Sets whether for a unique index, null values should be considered distinct (not equal). The default is that they are distinct, so that a unique index could contain multiple null values in a column. Declaration public static void SetAreNullsDistinct(this IMutableIndex index, bool? nullsDistinct) Parameters Type Name Description IMutableIndex index bool? nullsDistinct Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source SetCollation(IConventionIndex, IReadOnlyList<string>?, bool) Sets the column collations to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string>? SetCollation(this IConventionIndex index, IReadOnlyList<string>? collations, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index IReadOnlyList<string> collations bool fromDataAnnotation Returns Type Description IReadOnlyList<string> Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source SetCollation(IMutableIndex, IReadOnlyList<string>?) Sets the column collations to be used, or null if they have not been specified. Declaration public static void SetCollation(this IMutableIndex index, IReadOnlyList<string>? collations) Parameters Type Name Description IMutableIndex index IReadOnlyList<string> collations Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Edit this page View Source SetIncludeProperties(IConventionIndex, IReadOnlyList<string>?, bool) Sets included property names. Declaration public static IReadOnlyList<string>? SetIncludeProperties(this IConventionIndex index, IReadOnlyList<string>? properties, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index The index. IReadOnlyList<string> properties The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IReadOnlyList<string> | Edit this page View Source SetIncludeProperties(IMutableIndex, IReadOnlyList<string>?) Sets included property names. Declaration public static void SetIncludeProperties(this IMutableIndex index, IReadOnlyList<string>? properties) Parameters Type Name Description IMutableIndex index The index. IReadOnlyList<string> properties The value to set. | Edit this page View Source SetIsCreatedConcurrently(IConventionIndex, bool?, bool) Sets a value indicating whether the index is created concurrently. Declaration public static bool? SetIsCreatedConcurrently(this IConventionIndex index, bool? createdConcurrently, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index The index. bool? createdConcurrently The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool? | Edit this page View Source SetIsCreatedConcurrently(IMutableIndex, bool?) Sets a value indicating whether the index is created concurrently. Declaration public static void SetIsCreatedConcurrently(this IMutableIndex index, bool? createdConcurrently) Parameters Type Name Description IMutableIndex index The index. bool? createdConcurrently The value to set. | Edit this page View Source SetMethod(IConventionIndex, string?, bool) Sets the index method to be used, or null if it hasn't been specified. null selects the default (currently btree). Declaration public static string? SetMethod(this IConventionIndex index, string? method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index string method bool fromDataAnnotation Returns Type Description string Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source SetMethod(IMutableIndex, string?) Sets the index method to be used, or null if it hasn't been specified. null selects the default (currently btree). Declaration public static void SetMethod(this IMutableIndex index, string? method) Parameters Type Name Description IMutableIndex index string method Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Edit this page View Source SetNullSortOrder(IConventionIndex, IReadOnlyList<NullSortOrder>?, bool) Sets the column NULL sort orders to be used, or null if they have not been specified. Declaration public static IReadOnlyList<NullSortOrder>? SetNullSortOrder(this IConventionIndex index, IReadOnlyList<NullSortOrder>? nullSortOrder, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index IReadOnlyList<NullSortOrder> nullSortOrder bool fromDataAnnotation Returns Type Description IReadOnlyList<NullSortOrder> Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source SetNullSortOrder(IMutableIndex, IReadOnlyList<NullSortOrder>?) Sets the column NULL sort orders to be used, or null if they have not been specified. Declaration public static void SetNullSortOrder(this IMutableIndex index, IReadOnlyList<NullSortOrder>? nullSortOrder) Parameters Type Name Description IMutableIndex index IReadOnlyList<NullSortOrder> nullSortOrder Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source SetOperators(IConventionIndex, IReadOnlyList<string>?, bool) Sets the column operators to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string>? SetOperators(this IConventionIndex index, IReadOnlyList<string>? operators, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index IReadOnlyList<string> operators bool fromDataAnnotation Returns Type Description IReadOnlyList<string> Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Edit this page View Source SetOperators(IMutableIndex, IReadOnlyList<string>?) Sets the column operators to be used, or null if they have not been specified. Declaration public static void SetOperators(this IMutableIndex index, IReadOnlyList<string>? operators) Parameters Type Name Description IMutableIndex index IReadOnlyList<string> operators Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Edit this page View Source SetSortOrder(IConventionIndex, IReadOnlyList<SortOrder>?, bool) Sets the column sort orders to be used, or null if they have not been specified. Declaration [Obsolete(\"Use IsDescending instead\")] public static IReadOnlyList<SortOrder>? SetSortOrder(this IConventionIndex index, IReadOnlyList<SortOrder>? sortOrder, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index IReadOnlyList<SortOrder> sortOrder bool fromDataAnnotation Returns Type Description IReadOnlyList<SortOrder> Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source SetSortOrder(IMutableIndex, IReadOnlyList<SortOrder>?) Sets the column sort orders to be used, or null if they have not been specified. Declaration [Obsolete(\"Use IsDescending instead\")] public static void SetSortOrder(this IMutableIndex index, IReadOnlyList<SortOrder>? sortOrder) Parameters Type Name Description IMutableIndex index IReadOnlyList<SortOrder> sortOrder Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Edit this page View Source SetStorageParameter(IConventionIndex, string, object?, bool) Sets a storage parameter on the index. Declaration public static object SetStorageParameter(this IConventionIndex index, string parameterName, object? parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index string parameterName object parameterValue bool fromDataAnnotation Returns Type Description object | Edit this page View Source SetStorageParameter(IMutableIndex, string, object?) Sets a storage parameter on the index. Declaration public static void SetStorageParameter(this IMutableIndex index, string parameterName, object? parameterValue) Parameters Type Name Description IMutableIndex index string parameterName object parameterValue | Edit this page View Source SetTsVectorConfig(IConventionIndex, string?, bool) Sets the index to tsvector config name to be used. Declaration public static string? SetTsVectorConfig(this IConventionIndex index, string? config, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index The index. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string Remarks https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX | Edit this page View Source SetTsVectorConfig(IMutableIndex, string?) Sets the text search configuration for this tsvector expression index, or null if this is not a tsvector expression index. Declaration public static void SetTsVectorConfig(this IMutableIndex index, string? config) Parameters Type Name Description IMutableIndex index The index. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. Remarks https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlJsonDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlJsonDbFunctionsExtensions.html",
    "title": "Class NpgsqlJsonDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonDbFunctionsExtensions Provides methods for supporting translation to PostgreSQL JSON operators and functions. Inheritance object NpgsqlJsonDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlJsonDbFunctionsExtensions Methods | Edit this page View Source JsonContained(DbFunctions, object, object) Checks if contained is contained in json as top-level entries. Declaration public static bool JsonContained(this DbFunctions _, object contained, object json) Parameters Type Name Description DbFunctions _ DbFunctions instance object contained A JSON column or value. Can be a JsonDocument, a string, or a user POCO mapped to JSON. object json A JSON column or value. Can be a JsonDocument, a string, or a user POCO mapped to JSON. Returns Type Description bool Remarks This operation is only supported with PostgreSQL jsonb, not json. See https://www.postgresql.org/docs/current/functions-json.html. | Edit this page View Source JsonContains(DbFunctions, object, object) Checks if json contains contained as top-level entries. Declaration public static bool JsonContains(this DbFunctions _, object json, object contained) Parameters Type Name Description DbFunctions _ DbFunctions instance object json A JSON column or value. Can be a JsonDocument, a string property mapped to JSON, or a user POCO mapped to JSON. object contained A JSON column or value. Can be a JsonDocument, a string, or a user POCO mapped to JSON. Returns Type Description bool Remarks This operation is only supported with PostgreSQL jsonb, not json. See https://www.postgresql.org/docs/current/functions-json.html. | Edit this page View Source JsonExistAll(DbFunctions, object, params string[]) Checks if all of the given keys exist as top-level keys within json. Declaration public static bool JsonExistAll(this DbFunctions _, object json, params string[] keys) Parameters Type Name Description DbFunctions _ DbFunctions instance object json A JSON column or value. Can be a JsonDocument, a string, or a user POCO mapped to JSON. string[] keys A set of keys to be checked inside json. Returns Type Description bool Remarks This operation is only supported with PostgreSQL jsonb, not json. See https://www.postgresql.org/docs/current/functions-json.html. | Edit this page View Source JsonExistAny(DbFunctions, object, params string[]) Checks if any of the given keys exist as top-level keys within json. Declaration public static bool JsonExistAny(this DbFunctions _, object json, params string[] keys) Parameters Type Name Description DbFunctions _ DbFunctions instance object json A JSON column or value. Can be a JsonDocument, a string, or a user POCO mapped to JSON. string[] keys A set of keys to be checked inside json. Returns Type Description bool Remarks This operation is only supported with PostgreSQL jsonb, not json. See https://www.postgresql.org/docs/current/functions-json.html. | Edit this page View Source JsonExists(DbFunctions, object, string) Checks if key exists as a top-level key within json. Declaration public static bool JsonExists(this DbFunctions _, object json, string key) Parameters Type Name Description DbFunctions _ DbFunctions instance object json A JSON column or value. Can be a JsonDocument, a string, or a user POCO mapped to JSON. string key A key to be checked inside json. Returns Type Description bool Remarks This operation is only supported with PostgreSQL jsonb, not json. See https://www.postgresql.org/docs/current/functions-json.html. | Edit this page View Source JsonTypeof(DbFunctions, object) Returns the type of the outermost JSON value as a text string. Possible types are object, array, string, number, boolean, and null. Declaration public static string JsonTypeof(this DbFunctions _, object json) Parameters Type Name Description DbFunctions _ DbFunctions instance object json A JSON column or value. Can be a JsonDocument, a string, or a user POCO mapped to JSON. Returns Type Description string Remarks See https://www.postgresql.org/docs/current/functions-json.html."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMigrationBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMigrationBuilderExtensions.html",
    "title": "Class NpgsqlMigrationBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlMigrationBuilderExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlMigrationBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlMigrationBuilderExtensions Methods | Edit this page View Source CreatePostgresExtension(MigrationBuilder, string, string?, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration [Obsolete(\"Use EnsurePostgresExtension instead\")] public static MigrationBuilder CreatePostgresExtension(this MigrationBuilder builder, string name, string? schema = null, string? version = null) Parameters Type Name Description MigrationBuilder builder string name string schema string version Returns Type Description MigrationBuilder | Edit this page View Source DropPostgresExtension(MigrationBuilder, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration [Obsolete(\"This no longer does anything and should be removed.\")] public static MigrationBuilder DropPostgresExtension(this MigrationBuilder builder, string name) Parameters Type Name Description MigrationBuilder builder string name Returns Type Description MigrationBuilder | Edit this page View Source EnsurePostgresExtension(MigrationBuilder, string, string?, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static MigrationBuilder EnsurePostgresExtension(this MigrationBuilder builder, string name, string? schema = null, string? version = null) Parameters Type Name Description MigrationBuilder builder string name string schema string version Returns Type Description MigrationBuilder | Edit this page View Source IsNpgsql(MigrationBuilder) Returns true if the active provider in a migration is the Npgsql provider. Declaration public static bool IsNpgsql(this MigrationBuilder builder) Parameters Type Name Description MigrationBuilder builder Returns Type Description bool True if Npgsql is being used; false otherwise."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelBuilderExtensions.html",
    "title": "Class NpgsqlModelBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlModelBuilderExtensions Npgsql-specific extension methods for ModelBuilder. Inheritance object NpgsqlModelBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlModelBuilderExtensions Methods | Edit this page View Source CanSetDefaultColumnCollation(IConventionModelBuilder, string?, bool) Returns a value indicating whether the given value can be set as the default column collation. Declaration [Obsolete(\"Use EF Core's standard model bulk configuration API\")] public static bool CanSetDefaultColumnCollation(this IConventionModelBuilder modelBuilder, string? collation, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. string collation The collation. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the given value can be set as the collation. | Edit this page View Source CanSetHiLoSequence(IConventionModelBuilder, string?, string?, bool) Returns a value indicating whether the given name and schema can be set for the hi-lo sequence. Declaration public static bool CanSetHiLoSequence(this IConventionModelBuilder modelBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. string name The name of the sequence. string schema The schema of the sequence. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the given name and schema can be set for the hi-lo sequence. | Edit this page View Source CanSetPostgresExtension(IConventionModelBuilder, string?, string, string?, bool) Returns a value indicating whether the given PostgreSQL extension can be registered in the model. Declaration public static bool CanSetPostgresExtension(this IConventionModelBuilder modelBuilder, string? schema, string name, string? version = null, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. string schema The schema in which to create the extension. string name The name of the extension to create. string version The version of the extension. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the given value can be set as the default increment for SQL Server IDENTITY. Remarks See Modeling entity types and relationships, and Accessing SQL Server and SQL Azure databases with EF Core for more information and examples. | Edit this page View Source CanSetValueGenerationStrategy(IConventionModelBuilder, NpgsqlValueGenerationStrategy?, bool) Returns a value indicating whether the given value can be set as the default value generation strategy. Declaration public static bool CanSetValueGenerationStrategy(this IConventionModelBuilder modelBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. NpgsqlValueGenerationStrategy? valueGenerationStrategy The value generation strategy. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the given value can be set as the default value generation strategy. | Edit this page View Source HasCollation(ModelBuilder, string, string, string?, bool?) Creates a new collation in the database. Declaration public static ModelBuilder HasCollation(this ModelBuilder modelBuilder, string name, string locale, string? provider = null, bool? deterministic = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the collation. string name The name of the collation to create. string locale Sets LC_COLLATE and LC_CTYPE at once. string provider Specifies the provider to use for locale services associated with this collation. The available choices depend on the operating system and build options. bool? deterministic Specifies whether the collation should use deterministic comparisons. Defaults to true. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/sql-createcollation.html. | Edit this page View Source HasCollation(ModelBuilder, string?, string, string, string?, bool?) Creates a new collation in the database. Declaration public static ModelBuilder HasCollation(this ModelBuilder modelBuilder, string? schema, string name, string locale, string? provider = null, bool? deterministic = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the collation. string schema The schema in which to create the collation, or null for the default schema. string name The name of the collation to create. string locale Sets LC_COLLATE and LC_CTYPE at once. string provider Specifies the provider to use for locale services associated with this collation. The available choices depend on the operating system and build options. bool? deterministic Specifies whether the collation should use deterministic comparisons. Defaults to true. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/sql-createcollation.html. | Edit this page View Source HasCollation(ModelBuilder, string?, string, string, string, string?, bool?) Creates a new collation in the database. Declaration public static ModelBuilder HasCollation(this ModelBuilder modelBuilder, string? schema, string name, string lcCollate, string lcCtype, string? provider = null, bool? deterministic = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the collation. string schema The schema in which to create the collation, or null for the default schema. string name The name of the collation to create. string lcCollate Use the specified operating system locale for the LC_COLLATE locale category. string lcCtype Use the specified operating system locale for the LC_CTYPE locale category. string provider Specifies the provider to use for locale services associated with this collation. The available choices depend on the operating system and build options. bool? deterministic Specifies whether the collation should use deterministic comparisons. Defaults to true. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/sql-createcollation.html. | Edit this page View Source HasHiLoSequence(IConventionModelBuilder, string?, string?, bool) Configures the database sequence used for the hi-lo pattern to generate values for key properties marked as OnAdd, when targeting PostgreSQL. Declaration public static IConventionSequenceBuilder? HasHiLoSequence(this IConventionModelBuilder modelBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. string name The name of the sequence. string schema The schema of the sequence. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionSequenceBuilder A builder to further configure the sequence. | Edit this page View Source HasPostgresEnum(ModelBuilder, string?, string, string[]) Registers a user-defined enum type in the model. Declaration public static ModelBuilder HasPostgresEnum(this ModelBuilder modelBuilder, string? schema, string name, string[] labels) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. string schema The schema in which to create the enum type. string name The name of the enum type to create. string[] labels The enum label values. Returns Type Description ModelBuilder The updated ModelBuilder. Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html Exceptions Type Condition ArgumentNullException builder | Edit this page View Source HasPostgresEnum(ModelBuilder, string, string[]) Registers a user-defined enum type in the model. Declaration public static ModelBuilder HasPostgresEnum(this ModelBuilder modelBuilder, string name, string[] labels) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. string name The name of the enum type to create. string[] labels The enum label values. Returns Type Description ModelBuilder The updated ModelBuilder. Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html Exceptions Type Condition ArgumentNullException builder | Edit this page View Source HasPostgresEnum<TEnum>(ModelBuilder, string?, string?, INpgsqlNameTranslator?) Registers a user-defined enum type in the model. Declaration public static ModelBuilder HasPostgresEnum<TEnum>(this ModelBuilder modelBuilder, string? schema = null, string? name = null, INpgsqlNameTranslator? nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. string schema The schema in which to create the enum type. string name The name of the enum type to create. INpgsqlNameTranslator nameTranslator The translator for name and label inference. Defaults to NpgsqlSnakeCaseNameTranslator. Returns Type Description ModelBuilder The updated ModelBuilder. Type Parameters Name Description TEnum Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html Exceptions Type Condition ArgumentNullException builder | Edit this page View Source HasPostgresExtension(IConventionModelBuilder, string, bool) Registers a PostgreSQL extension in the model. Declaration public static IConventionModelBuilder? HasPostgresExtension(this IConventionModelBuilder modelBuilder, string name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder in which to define the extension. string name The name of the extension to create. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionModelBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/external-extensions.html Exceptions Type Condition ArgumentNullException modelBuilder | Edit this page View Source HasPostgresExtension(IConventionModelBuilder, string?, string, string?, bool) Registers a PostgreSQL extension in the model. Declaration public static IConventionModelBuilder? HasPostgresExtension(this IConventionModelBuilder modelBuilder, string? schema, string name, string? version = null, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder in which to define the extension. string schema The schema in which to create the extension. string name The name of the extension to create. string version The version of the extension. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionModelBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/external-extensions.html Exceptions Type Condition ArgumentNullException modelBuilder | Edit this page View Source HasPostgresExtension(ModelBuilder, string) Registers a PostgreSQL extension in the model. Declaration public static ModelBuilder HasPostgresExtension(this ModelBuilder modelBuilder, string name) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to define the extension. string name The name of the extension to create. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/external-extensions.html Exceptions Type Condition ArgumentNullException modelBuilder | Edit this page View Source HasPostgresExtension(ModelBuilder, string?, string, string?) Registers a PostgreSQL extension in the model. Declaration public static ModelBuilder HasPostgresExtension(this ModelBuilder modelBuilder, string? schema, string name, string? version = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to define the extension. string schema The schema in which to create the extension. string name The name of the extension to create. string version The version of the extension. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/external-extensions.html Exceptions Type Condition ArgumentNullException modelBuilder | Edit this page View Source HasPostgresRange(ModelBuilder, string, string) Registers a user-defined range type in the model. Declaration public static ModelBuilder HasPostgresRange(this ModelBuilder modelBuilder, string name, string subtype) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the range type. string name The name of the range type to be created. string subtype The subtype (or element type) of the range Returns Type Description ModelBuilder Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html, https://www.postgresql.org/docs/current/static/sql-createtype.html, | Edit this page View Source HasPostgresRange(ModelBuilder, string?, string, string, string?, string?, string?, string?) Registers a user-defined range type in the model. Declaration public static ModelBuilder HasPostgresRange(this ModelBuilder modelBuilder, string? schema, string name, string subtype, string? canonicalFunction = null, string? subtypeOpClass = null, string? collation = null, string? subtypeDiff = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the range type. string schema The schema in which to create the range type. string name The name of the range type to be created. string subtype The subtype (or element type) of the range string canonicalFunction An optional PostgreSQL function which converts range values to a canonical form. string subtypeOpClass Used to specify a non-default operator class. string collation Used to specify a non-default collation in the range's order. string subtypeDiff An optional PostgreSQL function taking two values of the subtype type as argument, and return a double precision value representing the difference between the two given values. Returns Type Description ModelBuilder Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html, https://www.postgresql.org/docs/current/static/sql-createtype.html, | Edit this page View Source HasValueGenerationStrategy(IConventionModelBuilder, NpgsqlValueGenerationStrategy?, bool) Configures the value generation strategy for the key property, when targeting PostgreSQL. Declaration public static IConventionModelBuilder? HasValueGenerationStrategy(this IConventionModelBuilder modelBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The builder for the property being configured. NpgsqlValueGenerationStrategy? valueGenerationStrategy The value generation strategy. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionModelBuilder The same builder instance if the configuration was applied, null otherwise. | Edit this page View Source UseDatabaseTemplate(ModelBuilder, string) Specifies the PostgreSQL database to use as a template when creating a new database for this model. Declaration public static ModelBuilder UseDatabaseTemplate(this ModelBuilder modelBuilder, string templateDatabaseName) Parameters Type Name Description ModelBuilder modelBuilder string templateDatabaseName Returns Type Description ModelBuilder | Edit this page View Source UseDefaultColumnCollation(IConventionModelBuilder, string?, bool) Configures the default collation for all columns in the database. This causes EF Core to specify an explicit collation when creating each column (unless overridden). Declaration [Obsolete(\"Use EF Core's standard model bulk configuration API\")] public static IConventionModelBuilder? UseDefaultColumnCollation(this IConventionModelBuilder modelBuilder, string? collation, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. string collation The collation. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionModelBuilder A builder to further configure the property. Remarks An alternative is to specify a database collation via UseCollation(ModelBuilder, string), which will specify the query on CREATE DATABASE instead of for each and every column. However, PostgreSQL support is limited for the collations that can be specific via this mechanism; ICU collations - which include all case-insensitive collations - are currently unsupported. For more information, see https://www.postgresql.org/docs/current/collation.html. | Edit this page View Source UseDefaultColumnCollation(ModelBuilder, string?) Configures the default collation for all columns in the database. This causes EF Core to specify an explicit collation when creating each column (unless overridden). Declaration [Obsolete(\"Use EF Core's standard model bulk configuration API\")] public static ModelBuilder UseDefaultColumnCollation(this ModelBuilder modelBuilder, string? collation) Parameters Type Name Description ModelBuilder modelBuilder The model builder. string collation The collation. Returns Type Description ModelBuilder A builder to further configure the property. Remarks An alternative is to specify a database collation via UseCollation(ModelBuilder, string), which will specify the query on CREATE DATABASE instead of for each and every column. However, PostgreSQL support is limited for the collations that can be specific via this mechanism; ICU collations - which include all case-insensitive collations - are currently unsupported. For more information, see https://www.postgresql.org/docs/current/collation.html. | Edit this page View Source UseHiLo(ModelBuilder, string?, string?) Configures the model to use a sequence-based hi-lo pattern to generate values for properties marked as OnAdd, when targeting PostgreSQL. Declaration public static ModelBuilder UseHiLo(this ModelBuilder modelBuilder, string? name = null, string? schema = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder. string name The name of the sequence. string schema The schema of the sequence. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseIdentityAlwaysColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as OnAdd, when targeting PostgreSQL. Values for these columns will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static ModelBuilder UseIdentityAlwaysColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseIdentityByDefaultColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as OnAdd, when targeting PostgreSQL. Values for these columns will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static ModelBuilder UseIdentityByDefaultColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseIdentityColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as OnAdd, when targeting PostgreSQL. Values for these columns will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static ModelBuilder UseIdentityColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseKeySequences(ModelBuilder, string?, string?) Configures the model to use a sequence per hierarchy to generate values for key properties marked as OnAdd, when targeting PostgreSQL. Declaration public static ModelBuilder UseKeySequences(this ModelBuilder modelBuilder, string? nameSuffix = null, string? schema = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder. string nameSuffix The name that will suffix the table name for each sequence created automatically. string schema The schema of the sequence. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseSerialColumns(ModelBuilder) Configures the model to use the PostgreSQL SERIAL feature to generate values for properties marked as OnAdd, when targeting PostgreSQL. This option should be considered deprecated starting with PostgreSQL 10, consider using UseIdentityColumns(ModelBuilder) instead. Declaration public static ModelBuilder UseSerialColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseTablespace(ModelBuilder, string) Specifies the PostgreSQL tablespace in which to place the new database created for this model. Declaration public static ModelBuilder UseTablespace(this ModelBuilder modelBuilder, string tablespace) Parameters Type Name Description ModelBuilder modelBuilder string tablespace Returns Type Description ModelBuilder"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelExtensions.html",
    "title": "Class NpgsqlModelExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlModelExtensions Model extension methods for Npgsql-specific metadata. Inheritance object NpgsqlModelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlModelExtensions Remarks See Modeling entity types and relationships. Fields | Edit this page View Source DefaultHiLoSequenceName The default name for the hi-lo sequence. Declaration public const string DefaultHiLoSequenceName = \"EntityFrameworkHiLoSequence\" Field Value Type Description string | Edit this page View Source DefaultSequenceNameSuffix The default prefix for sequences applied to properties. Declaration public const string DefaultSequenceNameSuffix = \"Sequence\" Field Value Type Description string Methods | Edit this page View Source GetCollations(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresCollation> GetCollations(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description IReadOnlyList<PostgresCollation> | Edit this page View Source GetDatabaseTemplate(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string? GetDatabaseTemplate(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description string | Edit this page View Source GetDatabaseTemplateConfigurationSource(IConventionModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static ConfigurationSource? GetDatabaseTemplateConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model Returns Type Description ConfigurationSource? | Edit this page View Source GetDefaultColumnCollation(IReadOnlyModel) Gets the default collation for all columns in the database, or null if none is defined. This causes EF Core to specify an explicit collation when creating all column, unless one is overridden on a column. Declaration [Obsolete(\"Use EF Core's standard model bulk configuration API\")] public static string? GetDefaultColumnCollation(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description string Remarks See GetCollation(IReadOnlyModel) for another approach to defining a database-wide collation. For more information, see https://www.postgresql.org/docs/current/collation.html. | Edit this page View Source GetDefaultColumnCollationConfigurationSource(IConventionModel) Returns the ConfigurationSource for the default column collation. Declaration [Obsolete(\"Use EF Core's standard model bulk configuration API\")] public static ConfigurationSource? GetDefaultColumnCollationConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description ConfigurationSource? The ConfigurationSource for the default column collation. | Edit this page View Source GetHiLoSequenceName(IReadOnlyModel) Returns the name to use for the default hi-lo sequence. Declaration public static string GetHiLoSequenceName(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description string The name to use for the default hi-lo sequence. | Edit this page View Source GetHiLoSequenceNameConfigurationSource(IConventionModel) Returns the ConfigurationSource for the default hi-lo sequence name. Declaration public static ConfigurationSource? GetHiLoSequenceNameConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description ConfigurationSource? The ConfigurationSource for the default hi-lo sequence name. | Edit this page View Source GetHiLoSequenceSchema(IReadOnlyModel) Returns the schema to use for the default hi-lo sequence. UseHiLo(PropertyBuilder, string?, string?) Declaration public static string? GetHiLoSequenceSchema(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description string The schema to use for the default hi-lo sequence. | Edit this page View Source GetHiLoSequenceSchemaConfigurationSource(IConventionModel) Returns the ConfigurationSource for the default hi-lo sequence schema. Declaration public static ConfigurationSource? GetHiLoSequenceSchemaConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description ConfigurationSource? The ConfigurationSource for the default hi-lo sequence schema. | Edit this page View Source GetOrAddCollation(IMutableModel, string?, string, string, string, string?, bool?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresCollation GetOrAddCollation(this IMutableModel model, string? schema, string name, string lcCollate, string lcCtype, string? provider = null, bool? deterministic = null) Parameters Type Name Description IMutableModel model string schema string name string lcCollate string lcCtype string provider bool? deterministic Returns Type Description PostgresCollation | Edit this page View Source GetOrAddPostgresEnum(IMutableModel, string?, string, string[]) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresEnum GetOrAddPostgresEnum(this IMutableModel model, string? schema, string name, string[] labels) Parameters Type Name Description IMutableModel model string schema string name string[] labels Returns Type Description PostgresEnum | Edit this page View Source GetOrAddPostgresExtension(IConventionModel, string?, string, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresExtension GetOrAddPostgresExtension(this IConventionModel model, string? schema, string name, string? version) Parameters Type Name Description IConventionModel model string schema string name string version Returns Type Description PostgresExtension | Edit this page View Source GetOrAddPostgresExtension(IMutableModel, string?, string, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresExtension GetOrAddPostgresExtension(this IMutableModel model, string? schema, string name, string? version) Parameters Type Name Description IMutableModel model string schema string name string version Returns Type Description PostgresExtension | Edit this page View Source GetOrAddPostgresRange(IMutableModel, string?, string, string, string?, string?, string?, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresRange GetOrAddPostgresRange(this IMutableModel model, string? schema, string name, string subtype, string? canonicalFunction = null, string? subtypeOpClass = null, string? collation = null, string? subtypeDiff = null) Parameters Type Name Description IMutableModel model string schema string name string subtype string canonicalFunction string subtypeOpClass string collation string subtypeDiff Returns Type Description PostgresRange | Edit this page View Source GetPostgresEnums(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresEnum> GetPostgresEnums(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description IReadOnlyList<PostgresEnum> | Edit this page View Source GetPostgresExtensions(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresExtension> GetPostgresExtensions(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description IReadOnlyList<PostgresExtension> | Edit this page View Source GetSequenceNameSuffix(IReadOnlyModel) Returns the suffix to append to the name of automatically created sequences. Declaration public static string GetSequenceNameSuffix(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description string The name to use for the default key value generation sequence. | Edit this page View Source GetSequenceNameSuffixConfigurationSource(IConventionModel) Returns the ConfigurationSource for the default value generation sequence name suffix. Declaration public static ConfigurationSource? GetSequenceNameSuffixConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description ConfigurationSource? The ConfigurationSource for the default key value generation sequence name. | Edit this page View Source GetSequenceSchema(IReadOnlyModel) Returns the schema to use for the default value generation sequence. UseSequence(PropertyBuilder, string?, string?) Declaration public static string? GetSequenceSchema(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description string The schema to use for the default key value generation sequence. | Edit this page View Source GetSequenceSchemaConfigurationSource(IConventionModel) Returns the ConfigurationSource for the default key value generation sequence schema. Declaration public static ConfigurationSource? GetSequenceSchemaConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description ConfigurationSource? The ConfigurationSource for the default key value generation sequence schema. | Edit this page View Source GetTablespace(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string? GetTablespace(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description string | Edit this page View Source GetTablespaceConfigurationSource(IConventionModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static ConfigurationSource? GetTablespaceConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model Returns Type Description ConfigurationSource? | Edit this page View Source GetValueGenerationStrategy(IReadOnlyModel) Returns the NpgsqlValueGenerationStrategy to use for properties of keys in the model, unless the property has a strategy explicitly set. Declaration public static NpgsqlValueGenerationStrategy? GetValueGenerationStrategy(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model The model. Returns Type Description NpgsqlValueGenerationStrategy? The default NpgsqlValueGenerationStrategy. | Edit this page View Source GetValueGenerationStrategyConfigurationSource(IConventionModel) Returns the ConfigurationSource for the default NpgsqlValueGenerationStrategy. Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description ConfigurationSource? The ConfigurationSource for the default NpgsqlValueGenerationStrategy. | Edit this page View Source PostgresRanges(IReadOnlyModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IReadOnlyList<PostgresRange> PostgresRanges(this IReadOnlyModel model) Parameters Type Name Description IReadOnlyModel model Returns Type Description IReadOnlyList<PostgresRange> | Edit this page View Source SetDatabaseTemplate(IConventionModel, string?, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string? SetDatabaseTemplate(this IConventionModel model, string? template, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model string template bool fromDataAnnotation Returns Type Description string | Edit this page View Source SetDatabaseTemplate(IMutableModel, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void SetDatabaseTemplate(this IMutableModel model, string? template) Parameters Type Name Description IMutableModel model string template | Edit this page View Source SetDefaultColumnCollation(IConventionModel, string?, bool) Sets the default collation for all columns in the database, or null if none is defined. This causes EF Core to specify an explicit collation when creating all column, unless one is overridden on a column. Declaration [Obsolete(\"Use EF Core's standard model bulk configuration API\")] public static string? SetDefaultColumnCollation(this IConventionModel model, string? collation, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model string collation bool fromDataAnnotation Returns Type Description string Remarks See SetCollation(IMutableModel, string) for another approach to defining a database-wide collation. For more information, see https://www.postgresql.org/docs/current/collation.html. | Edit this page View Source SetDefaultColumnCollation(IMutableModel, string?) Sets the default collation for all columns in the database, or null if none is defined. This causes EF Core to specify an explicit collation when creating all column, unless one is overridden on a column. Declaration [Obsolete(\"Use EF Core's standard model bulk configuration API\")] public static void SetDefaultColumnCollation(this IMutableModel model, string? collation) Parameters Type Name Description IMutableModel model string collation Remarks See GetCollation(IReadOnlyModel) for another approach to defining a database-wide collation. For more information, see https://www.postgresql.org/docs/current/collation.html. | Edit this page View Source SetHiLoSequenceName(IConventionModel, string?, bool) Sets the name to use for the default hi-lo sequence. Declaration public static string? SetHiLoSequenceName(this IConventionModel model, string? name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. string name The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string | Edit this page View Source SetHiLoSequenceName(IMutableModel, string?) Sets the name to use for the default hi-lo sequence. Declaration public static void SetHiLoSequenceName(this IMutableModel model, string? name) Parameters Type Name Description IMutableModel model The model. string name The value to set. | Edit this page View Source SetHiLoSequenceSchema(IConventionModel, string?, bool) Sets the schema to use for the default hi-lo sequence. Declaration public static string? SetHiLoSequenceSchema(this IConventionModel model, string? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. string value The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string | Edit this page View Source SetHiLoSequenceSchema(IMutableModel, string?) Sets the schema to use for the default hi-lo sequence. Declaration public static void SetHiLoSequenceSchema(this IMutableModel model, string? value) Parameters Type Name Description IMutableModel model The model. string value The value to set. | Edit this page View Source SetSequenceNameSuffix(IConventionModel, string?, bool) Sets the suffix to append to the name of automatically created sequences. Declaration public static string? SetSequenceNameSuffix(this IConventionModel model, string? name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. string name The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string The configured value. | Edit this page View Source SetSequenceNameSuffix(IMutableModel, string?) Sets the suffix to append to the name of automatically created sequences. Declaration public static void SetSequenceNameSuffix(this IMutableModel model, string? name) Parameters Type Name Description IMutableModel model The model. string name The value to set. | Edit this page View Source SetSequenceSchema(IConventionModel, string?, bool) Sets the schema to use for the default key value generation sequence. Declaration public static string? SetSequenceSchema(this IConventionModel model, string? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. string value The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string The configured value. | Edit this page View Source SetSequenceSchema(IMutableModel, string?) Sets the schema to use for the default key value generation sequence. Declaration public static void SetSequenceSchema(this IMutableModel model, string? value) Parameters Type Name Description IMutableModel model The model. string value The value to set. | Edit this page View Source SetTablespace(IConventionModel, string?, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string? SetTablespace(this IConventionModel model, string? tablespace, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model string tablespace bool fromDataAnnotation Returns Type Description string | Edit this page View Source SetTablespace(IMutableModel, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void SetTablespace(this IMutableModel model, string? tablespace) Parameters Type Name Description IMutableModel model string tablespace | Edit this page View Source SetValueGenerationStrategy(IConventionModel, NpgsqlValueGenerationStrategy?, bool) Attempts to set the NpgsqlValueGenerationStrategy to use for properties of keys in the model that don't have a strategy explicitly set. Declaration public static NpgsqlValueGenerationStrategy? SetValueGenerationStrategy(this IConventionModel model, NpgsqlValueGenerationStrategy? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. NpgsqlValueGenerationStrategy? value The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description NpgsqlValueGenerationStrategy? | Edit this page View Source SetValueGenerationStrategy(IMutableModel, NpgsqlValueGenerationStrategy?) Attempts to set the NpgsqlValueGenerationStrategy to use for properties of keys in the model that don't have a strategy explicitly set. Declaration public static void SetValueGenerationStrategy(this IMutableModel model, NpgsqlValueGenerationStrategy? value) Parameters Type Name Description IMutableModel model The model. NpgsqlValueGenerationStrategy? value The value to set."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMultirangeDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMultirangeDbFunctionsExtensions.html",
    "title": "Class NpgsqlMultirangeDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlMultirangeDbFunctionsExtensions Provides extension methods for multiranges supporting PostgreSQL translation. Inheritance object NpgsqlMultirangeDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlMultirangeDbFunctionsExtensions Methods | Edit this page View Source ContainedBy<T>(NpgsqlRange<T>, NpgsqlRange<T>[]) Determines whether a range is contained by a specified multirange. Declaration public static bool ContainedBy<T>(this NpgsqlRange<T> range, NpgsqlRange<T>[] multirange) Parameters Type Name Description NpgsqlRange<T> range The specified range to locate in the multirange. NpgsqlRange<T>[] multirange The multirange in which to locate the specified range. Returns Type Description bool true if the multirange contains the specified range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException ContainedBy<T>(NpgsqlRange<T>, NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainedBy<T>(NpgsqlRange<T>, List<NpgsqlRange<T>>) Determines whether a range is contained by a specified multirange. Declaration public static bool ContainedBy<T>(this NpgsqlRange<T> range, List<NpgsqlRange<T>> multirange) Parameters Type Name Description NpgsqlRange<T> range The specified range to locate in the multirange. List<NpgsqlRange<T>> multirange The multirange in which to locate the specified range. Returns Type Description bool true if the multirange contains the specified range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException ContainedBy<T>(NpgsqlRange<T>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainedBy<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange is contained by a specified multirange. Declaration public static bool ContainedBy<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The specified multirange to locate in the multirange. NpgsqlRange<T>[] multirange2 The multirange in which to locate the specified multirange. Returns Type Description bool true if the multirange contains the specified multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException ContainedBy<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainedBy<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange is contained by a specified multirange. Declaration public static bool ContainedBy<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The specified multirange to locate in the multirange. List<NpgsqlRange<T>> multirange2 The multirange in which to locate the specified multirange. Returns Type Description bool true if the multirange contains the specified multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException ContainedBy<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange contains a specified range. Declaration public static bool Contains<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T> multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The multirange in which to locate the specified range. NpgsqlRange<T> multirange2 The specified range to locate in the multirange. Returns Type Description bool true if the multirange contains the specified range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Contains<T>(NpgsqlRange<T>[], NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange contains a specified multirange. Declaration public static bool Contains<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The multirange in which to locate the specified multirange. NpgsqlRange<T>[] multirange2 The specified multirange to locate in the multirange. Returns Type Description bool true if the multirange contains the specified multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Contains<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains<T>(NpgsqlRange<T>[], T) Determines whether a multirange contains a specified value. Declaration public static bool Contains<T>(this NpgsqlRange<T>[] multirange, T value) Parameters Type Name Description NpgsqlRange<T>[] multirange The multirange in which to locate the value. T value The value to locate in the range. Returns Type Description bool true if the multirange contains the specified value; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Contains<T>(NpgsqlRange<T>[], T) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange contains a specified range. Declaration public static bool Contains<T>(this List<NpgsqlRange<T>> multirange1, NpgsqlRange<T> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The multirange in which to locate the specified range. NpgsqlRange<T> multirange2 The specified range to locate in the multirange. Returns Type Description bool true if the multirange contains the specified range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Contains<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange contains a specified multirange. Declaration public static bool Contains<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The multirange in which to locate the specified multirange. List<NpgsqlRange<T>> multirange2 The specified multirange to locate in the multirange. Returns Type Description bool true if the multirange contains the specified multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Contains<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains<T>(List<NpgsqlRange<T>>, T) Determines whether a multirange contains a specified value. Declaration public static bool Contains<T>(this List<NpgsqlRange<T>> multirange, T value) Parameters Type Name Description List<NpgsqlRange<T>> multirange The multirange in which to locate the value. T value The value to locate in the range. Returns Type Description bool true if the multirange contains the specified value; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Contains<T>(List<NpgsqlRange<T>>, T) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange does not extend to the left of a range. Declaration public static bool DoesNotExtendLeftOf<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange<T>[] multirange The multirange. NpgsqlRange<T> range The multirange. Returns Type Description bool true if the multirange does not extend to the left of the range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException DoesNotExtendLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange does not extend to the left of another multirange. Declaration public static bool DoesNotExtendLeftOf<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The first multirange. NpgsqlRange<T>[] multirange2 The second multirange. Returns Type Description bool true if the first multirange does not extend to the left of the multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException DoesNotExtendLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendLeftOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange does not extend to the left of a range. Declaration public static bool DoesNotExtendLeftOf<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List<NpgsqlRange<T>> multirange The multirange. NpgsqlRange<T> range The multirange. Returns Type Description bool true if the multirange does not extend to the left of the range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException DoesNotExtendLeftOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendLeftOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange does not extend to the left of another multirange. Declaration public static bool DoesNotExtendLeftOf<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The first multirange. List<NpgsqlRange<T>> multirange2 The second multirange. Returns Type Description bool true if the first multirange does not extend to the left of the multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException DoesNotExtendLeftOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange does not extend to the right of a range. Declaration public static bool DoesNotExtendRightOf<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange<T>[] multirange The multirange. NpgsqlRange<T> range The multirange. Returns Type Description bool true if the multirange does not extend to the right of the range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException DoesNotExtendRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange does not extend to the right of another multirange. Declaration public static bool DoesNotExtendRightOf<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The first multirange. NpgsqlRange<T>[] multirange2 The second multirange. Returns Type Description bool true if the first multirange does not extend to the right of the multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException DoesNotExtendRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendRightOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange does not extend to the right of a range. Declaration public static bool DoesNotExtendRightOf<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List<NpgsqlRange<T>> multirange The multirange. NpgsqlRange<T> range The multirange. Returns Type Description bool true if the multirange does not extend to the right of the range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException DoesNotExtendRightOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendRightOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange does not extend to the right of another multirange. Declaration public static bool DoesNotExtendRightOf<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The first multirange. List<NpgsqlRange<T>> multirange2 The second multirange. Returns Type Description bool true if the first multirange does not extend to the right of the multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException DoesNotExtendRightOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Except<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Returns the set difference, which means the elements of one multirange that do not appear in a second multirange. Declaration public static NpgsqlRange<T>[] Except<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The first multirange. NpgsqlRange<T>[] multirange2 The second multirange. Returns Type Description NpgsqlRange<T>[] A multirange containing the elements that appear in the first range, but not the second range. Type Parameters Name Description T Exceptions Type Condition NotSupportedException Except<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Except<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Returns the set difference, which means the elements of one multirange that do not appear in a second multirange. Declaration public static List<NpgsqlRange<T>> Except<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The first multirange. List<NpgsqlRange<T>> multirange2 The second multirange. Returns Type Description List<NpgsqlRange<T>> A multirange containing the elements that appear in the first range, but not the second range. Type Parameters Name Description T Exceptions Type Condition NotSupportedException Except<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Intersect<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Returns the set intersection, which means elements that appear in each of two multiranges. Declaration public static NpgsqlRange<T>[] Intersect<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The first multirange. NpgsqlRange<T>[] multirange2 The second multirange. Returns Type Description NpgsqlRange<T>[] A multirange containing the elements that appear in both ranges. Type Parameters Name Description T Exceptions Type Condition NotSupportedException Intersect<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Intersect<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Returns the set intersection, which means elements that appear in each of two multiranges. Declaration public static List<NpgsqlRange<T>> Intersect<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The first multirange. List<NpgsqlRange<T>> multirange2 The second multirange. Returns Type Description List<NpgsqlRange<T>> A multirange containing the elements that appear in both ranges. Type Parameters Name Description T Exceptions Type Condition NotSupportedException Intersect<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsAdjacentTo<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange is adjacent to a range. Declaration public static bool IsAdjacentTo<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange<T>[] multirange The multirange. NpgsqlRange<T> range The range. Returns Type Description bool true if the multirange and range are adjacent; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsAdjacentTo<T>(NpgsqlRange<T>[], NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsAdjacentTo<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange is adjacent to another multirange. Declaration public static bool IsAdjacentTo<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The first multirange. NpgsqlRange<T>[] multirange2 The second multirange. Returns Type Description bool true if the multiranges are adjacent; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsAdjacentTo<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsAdjacentTo<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange is adjacent to a range. Declaration public static bool IsAdjacentTo<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List<NpgsqlRange<T>> multirange The multirange. NpgsqlRange<T> range The range. Returns Type Description bool true if the multirange and range are adjacent; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsAdjacentTo<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsAdjacentTo<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange is adjacent to another multirange. Declaration public static bool IsAdjacentTo<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The first multirange. List<NpgsqlRange<T>> multirange2 The second multirange. Returns Type Description bool true if the multiranges are adjacent; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsAdjacentTo<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange is strictly to the left of a range. Declaration public static bool IsStrictlyLeftOf<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange<T>[] multirange The multirange. NpgsqlRange<T> range The range. Returns Type Description bool true if the multirange is strictly to the left of the range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsStrictlyLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange is strictly to the left of another multirange. Declaration public static bool IsStrictlyLeftOf<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The first multirange. NpgsqlRange<T>[] multirange2 The second multirange. Returns Type Description bool true if the first multirange is strictly to the left of the second multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsStrictlyLeftOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyLeftOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange is strictly to the left of a range. Declaration public static bool IsStrictlyLeftOf<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List<NpgsqlRange<T>> multirange The multirange. NpgsqlRange<T> range The range. Returns Type Description bool true if the multirange is strictly to the left of the range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsStrictlyLeftOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyLeftOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange is strictly to the left of another multirange. Declaration public static bool IsStrictlyLeftOf<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The first multirange. List<NpgsqlRange<T>> multirange2 The second multirange. Returns Type Description bool true if the first multirange is strictly to the left of the second multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsStrictlyLeftOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange is strictly to the right of a range. Declaration public static bool IsStrictlyRightOf<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange<T>[] multirange The multirange. NpgsqlRange<T> range The range. Returns Type Description bool true if the multirange is strictly to the right of the range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsStrictlyRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange is strictly to the right of another multirange. Declaration public static bool IsStrictlyRightOf<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The first multirange. NpgsqlRange<T>[] multirange2 The second multirange. Returns Type Description bool true if the first multirange is strictly to the right of the second multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsStrictlyRightOf<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyRightOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange is strictly to the right of a range. Declaration public static bool IsStrictlyRightOf<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List<NpgsqlRange<T>> multirange The multirange. NpgsqlRange<T> range The range. Returns Type Description bool true if the multirange is strictly to the right of the range; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsStrictlyRightOf<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyRightOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange is strictly to the right of another multirange. Declaration public static bool IsStrictlyRightOf<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The first multirange. List<NpgsqlRange<T>> multirange2 The second multirange. Returns Type Description bool true if the first multirange is strictly to the right of the second multirange; otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException IsStrictlyRightOf<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Merge<T>(NpgsqlRange<T>[]) Computes the smallest range that includes the entire multirange. Declaration public static NpgsqlRange<T> Merge<T>(this NpgsqlRange<T>[] multirange) Parameters Type Name Description NpgsqlRange<T>[] multirange The multirange. Returns Type Description NpgsqlRange<T> The smallest range that includes the entire multirange. Type Parameters Name Description T Exceptions Type Condition NotSupportedException Merge<T>(NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Merge<T>(List<NpgsqlRange<T>>) Computes the smallest range that includes the entire multirange. Declaration public static NpgsqlRange<T> Merge<T>(this List<NpgsqlRange<T>> multirange) Parameters Type Name Description List<NpgsqlRange<T>> multirange The multirange. Returns Type Description NpgsqlRange<T> The smallest range that includes the entire multirange. Type Parameters Name Description T Exceptions Type Condition NotSupportedException Merge<T>(List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Overlaps<T>(NpgsqlRange<T>[], NpgsqlRange<T>) Determines whether a multirange overlaps another range. Declaration public static bool Overlaps<T>(this NpgsqlRange<T>[] multirange, NpgsqlRange<T> range) Parameters Type Name Description NpgsqlRange<T>[] multirange The multirange. NpgsqlRange<T> range The range. Returns Type Description bool true if the multirange and range overlap (share points in common); otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Overlaps<T>(NpgsqlRange<T>[], NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Overlaps<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Determines whether a multirange overlaps another multirange. Declaration public static bool Overlaps<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The first multirange. NpgsqlRange<T>[] multirange2 The second multirange. Returns Type Description bool true if the multiranges overlap (share points in common); otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Overlaps<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Overlaps<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) Determines whether a multirange overlaps another range. Declaration public static bool Overlaps<T>(this List<NpgsqlRange<T>> multirange, NpgsqlRange<T> range) Parameters Type Name Description List<NpgsqlRange<T>> multirange The multirange. NpgsqlRange<T> range The range. Returns Type Description bool true if the multirange and range overlap (share points in common); otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Overlaps<T>(List<NpgsqlRange<T>>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Overlaps<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Determines whether a multirange overlaps another multirange. Declaration public static bool Overlaps<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The first multirange. List<NpgsqlRange<T>> multirange2 The second multirange. Returns Type Description bool true if the multiranges overlap (share points in common); otherwise, false . Type Parameters Name Description T Exceptions Type Condition NotSupportedException Overlaps<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Union<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) Returns the set union, which means unique elements that appear in either of two multiranges. Declaration public static NpgsqlRange<T>[] Union<T>(this NpgsqlRange<T>[] multirange1, NpgsqlRange<T>[] multirange2) Parameters Type Name Description NpgsqlRange<T>[] multirange1 The first multirange. NpgsqlRange<T>[] multirange2 The second multirange. Returns Type Description NpgsqlRange<T>[] A multirange containing the unique elements that appear in either multirange. Type Parameters Name Description T Exceptions Type Condition NotSupportedException Union<T>(NpgsqlRange<T>[], NpgsqlRange<T>[]) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Union<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) Returns the set union, which means unique elements that appear in either of two multiranges. Declaration public static List<NpgsqlRange<T>> Union<T>(this List<NpgsqlRange<T>> multirange1, List<NpgsqlRange<T>> multirange2) Parameters Type Name Description List<NpgsqlRange<T>> multirange1 The first multirange. List<NpgsqlRange<T>> multirange2 The second multirange. Returns Type Description List<NpgsqlRange<T>> A multirange containing the unique elements that appear in either multirange. Type Parameters Name Description T Exceptions Type Condition NotSupportedException Union<T>(List<NpgsqlRange<T>>, List<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions NetTopologySuite specific extension methods for NpgsqlDbContextOptionsBuilder. Inheritance object NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions Methods | Edit this page View Source UseNetTopologySuite(NpgsqlDbContextOptionsBuilder, CoordinateSequenceFactory?, PrecisionModel?, Ordinates, bool) Use NetTopologySuite to access SQL Server spatial data. Declaration public static NpgsqlDbContextOptionsBuilder UseNetTopologySuite(this NpgsqlDbContextOptionsBuilder optionsBuilder, CoordinateSequenceFactory? coordinateSequenceFactory = null, PrecisionModel? precisionModel = null, Ordinates handleOrdinates = Ordinates.None, bool geographyAsDefault = false) Parameters Type Name Description NpgsqlDbContextOptionsBuilder optionsBuilder CoordinateSequenceFactory coordinateSequenceFactory PrecisionModel precisionModel Ordinates handleOrdinates bool geographyAsDefault Returns Type Description NpgsqlDbContextOptionsBuilder The options builder so that further configuration can be chained."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbFunctionsExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteDbFunctionsExtensions Provides Npgsql-specific spatial extension methods on DbFunctions. Inheritance object NpgsqlNetTopologySuiteDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteDbFunctionsExtensions Methods | Edit this page View Source Distance(DbFunctions, Geometry, Geometry, bool) Returns the minimum distance between the origin geometry and another geometry g. Translates to ST_Distance. Declaration public static double Distance(this DbFunctions _, Geometry geometry, Geometry anotherGeometry, bool useSpheroid) Parameters Type Name Description DbFunctions _ The DbFunctions instance. Geometry geometry The origin geometry. Geometry anotherGeometry The geometry from which to compute the distance. bool useSpheroid Whether to use sphere or spheroid distance measurement. Returns Type Description double The distance between the geometries. Remarks See https://postgis.net/docs/ST_Distance.html. | Edit this page View Source DistanceKnn(DbFunctions, Geometry, Geometry) Returns the 2D distance between two geometries. Used in the \"ORDER BY\" clause, provides index-assisted nearest-neighbor result sets. Translates to <->. Declaration public static double DistanceKnn(this DbFunctions _, Geometry geometry, Geometry anotherGeometry) Parameters Type Name Description DbFunctions _ The DbFunctions instance. Geometry geometry The origin geometry. Geometry anotherGeometry The geometry from which to compute the distance. Returns Type Description double The 2D distance between the geometries. Remarks See https://postgis.net/docs/ST_Distance.html. | Edit this page View Source Force2D<TGeometry>(DbFunctions, TGeometry) Forces the geometries into a \"2-dimensional mode\" so that all output representations will only have the X and Y coordinates. Translates to ST_Force2D(geometry) Declaration public static TGeometry Force2D<TGeometry>(this DbFunctions _, TGeometry geometry) where TGeometry : Geometry Parameters Type Name Description DbFunctions _ TGeometry geometry Returns Type Description TGeometry Type Parameters Name Description TGeometry Remarks See https://postgis.net/docs/ST_Force2D.html. | Edit this page View Source IsWithinDistance(DbFunctions, Geometry, Geometry, double, bool) Tests whether the distance from the origin geometry to another is less than or equal to a specified value. Translates to ST_DWithin. Declaration public static bool IsWithinDistance(this DbFunctions _, Geometry geometry, Geometry anotherGeometry, double distance, bool useSpheroid) Parameters Type Name Description DbFunctions _ The DbFunctions instance. Geometry geometry The origin geometry. Geometry anotherGeometry The geometry to check the distance to. double distance The distance value to compare. bool useSpheroid Whether to use sphere or spheroid distance measurement. Returns Type Description bool true if the geometries are less than distance apart. Remarks See https://postgis.net/docs/ST_DWithin.html. | Edit this page View Source Transform<TGeometry>(DbFunctions, TGeometry, int) Returns a new geometry with its coordinates transformed to a different spatial reference system. Translates to ST_Transform(geometry, srid). Declaration public static TGeometry Transform<TGeometry>(this DbFunctions _, TGeometry geometry, int srid) where TGeometry : Geometry Parameters Type Name Description DbFunctions _ TGeometry geometry int srid Returns Type Description TGeometry Type Parameters Name Description TGeometry Remarks See https://postgis.net/docs/ST_Transform.html."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetworkDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetworkDbFunctionsExtensions.html",
    "title": "Class NpgsqlNetworkDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetworkDbFunctionsExtensions Provides extension methods supporting operator translation for PostgreSQL network types. Inheritance object NpgsqlNetworkDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlNetworkDbFunctionsExtensions Remarks See: https://www.postgresql.org/docs/current/static/functions-net.html Methods | Edit this page View Source Abbreviate(DbFunctions, NpgsqlCidr) Returns the abbreviated display format as text. Declaration public static string Abbreviate(this DbFunctions _, NpgsqlCidr cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlCidr cidr The cidr to abbreviate. Returns Type Description string The abbreviated display format as text. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Abbreviate(DbFunctions, NpgsqlInet) Returns the abbreviated display format as text. Declaration public static string Abbreviate(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet to abbreviate. Returns Type Description string The abbreviated display format as text. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Abbreviate(DbFunctions, (IPAddress Address, int Subnet)) Returns the abbreviated display format as text. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static string Abbreviate(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr to abbreviate. Returns Type Description string The abbreviated display format as text. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Add(DbFunctions, NpgsqlInet, int) Adds the value to the NpgsqlInet. Declaration public static NpgsqlInet Add(this DbFunctions _, NpgsqlInet inet, int value) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet. int value The value to add. Returns Type Description NpgsqlInet The NpgsqlInet augmented by the value. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Add(DbFunctions, (IPAddress Address, int Subnet), int) Adds the value to the (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static (IPAddress Address, int Subnet) Add(this DbFunctions _, (IPAddress Address, int Subnet) cidr, int value) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr. int value The value to add. Returns Type Description (IPAddress Address, int Subnet) The (IPAddress Address, int Subnet) augmented by the value. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source BitwiseAnd(DbFunctions, NpgsqlInet, NpgsqlInet) Computes the bitwise AND of two NpgsqlInet instances. Declaration public static NpgsqlInet BitwiseAnd(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The left-hand inet. NpgsqlInet other The right-hand inet. Returns Type Description NpgsqlInet The result of the bitwise AND operation. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source BitwiseAnd(DbFunctions, PhysicalAddress, PhysicalAddress) Computes the bitwise AND of two PhysicalAddress instances. Declaration public static PhysicalAddress BitwiseAnd(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description PhysicalAddress The result of the bitwise AND operation. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source BitwiseAnd(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Computes the bitwise AND of two (IPAddress Address, int Subnet) instances. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static (IPAddress Address, int Subnet) BitwiseAnd(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The left-hand cidr. (IPAddress Address, int Subnet) other The right-hand cidr. Returns Type Description (IPAddress Address, int Subnet) The result of the bitwise AND operation. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source BitwiseNot(DbFunctions, NpgsqlInet) Computes the bitwise NOT operation on an NpgsqlInet. Declaration public static NpgsqlInet BitwiseNot(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet to negate. Returns Type Description NpgsqlInet The result of the bitwise NOT operation. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source BitwiseNot(DbFunctions, PhysicalAddress) Computes the bitwise NOT operation on an PhysicalAddress. Declaration public static PhysicalAddress BitwiseNot(this DbFunctions _, PhysicalAddress macaddr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. PhysicalAddress macaddr The macaddr to negate. Returns Type Description PhysicalAddress The result of the bitwise NOT operation. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source BitwiseNot(DbFunctions, (IPAddress Address, int Subnet)) Computes the bitwise NOT operation on an (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static (IPAddress Address, int Subnet) BitwiseNot(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr to negate. Returns Type Description (IPAddress Address, int Subnet) The result of the bitwise NOT operation. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source BitwiseOr(DbFunctions, NpgsqlInet, NpgsqlInet) Computes the bitwise OR of two NpgsqlInet instances. Declaration public static NpgsqlInet BitwiseOr(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The left-hand inet. NpgsqlInet other The right-hand inet. Returns Type Description NpgsqlInet The result of the bitwise OR operation. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source BitwiseOr(DbFunctions, PhysicalAddress, PhysicalAddress) Computes the bitwise OR of two PhysicalAddress instances. Declaration public static PhysicalAddress BitwiseOr(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description PhysicalAddress The result of the bitwise OR operation. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source BitwiseOr(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Computes the bitwise OR of two (IPAddress Address, int Subnet) instances. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static (IPAddress Address, int Subnet) BitwiseOr(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The left-hand cidr. (IPAddress Address, int Subnet) other The right-hand cidr. Returns Type Description (IPAddress Address, int Subnet) The result of the bitwise OR operation. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Broadcast(DbFunctions, NpgsqlInet) Returns the broadcast address for a network. Declaration public static NpgsqlInet Broadcast(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet used to derive the broadcast address. Returns Type Description NpgsqlInet The broadcast address for a network. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Broadcast(DbFunctions, (IPAddress Address, int Subnet)) Returns the broadcast address for a network. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static IPAddress Broadcast(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr used to derive the broadcast address. Returns Type Description IPAddress The broadcast address for a network. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainedBy(DbFunctions, NpgsqlInet, NpgsqlInet) Determines whether an NpgsqlInet is contained within another NpgsqlInet. Declaration public static bool ContainedBy(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet to locate. NpgsqlInet other The inet to search. Returns Type Description bool True if the NpgsqlInet is contained within the other NpgsqlInet; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainedBy(DbFunctions, IPAddress, (IPAddress Address, int Subnet)) Determines whether an IPAddress is contained within a network. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool ContainedBy(this DbFunctions _, IPAddress inet, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IPAddress inet The inet to locate. (IPAddress Address, int Subnet) other The cidr to search. Returns Type Description bool True if the IPAddress is contained within the network; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainedBy(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Determines whether an (IPAddress Address, int Subnet) is contained within another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool ContainedBy(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr to locate. (IPAddress Address, int Subnet) other The cidr to search. Returns Type Description bool True if the (IPAddress Address, int Subnet) is contained within the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainedByOrEqual(DbFunctions, NpgsqlInet, NpgsqlInet) Determines whether an NpgsqlInet is contained within or equal to another NpgsqlInet. Declaration public static bool ContainedByOrEqual(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet to locate. NpgsqlInet other The inet to search. Returns Type Description bool True if the NpgsqlInet is contained within or equal to the other NpgsqlInet; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainedByOrEqual(DbFunctions, IPAddress, (IPAddress Address, int Subnet)) Determines whether an IPAddress is contained within or equal to a network. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool ContainedByOrEqual(this DbFunctions _, IPAddress inet, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IPAddress inet The inet to locate. (IPAddress Address, int Subnet) other The cidr to search. Returns Type Description bool True if the IPAddress is contained within or equal to the network; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainedByOrEqual(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Determines whether an (IPAddress Address, int Subnet) is contained within or equal to another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool ContainedByOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr to locate. (IPAddress Address, int Subnet) other The cidr to search. Returns Type Description bool True if the (IPAddress Address, int Subnet) is contained within or equal to the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains(DbFunctions, NpgsqlInet, NpgsqlInet) Determines whether an NpgsqlInet contains another NpgsqlInet. Declaration public static bool Contains(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The IP address to search. NpgsqlInet other The IP address to locate. Returns Type Description bool True if the NpgsqlInet contains the other NpgsqlInet; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains(DbFunctions, (IPAddress Address, int Subnet), IPAddress) Determines whether a network contains another IPAddress. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool Contains(this DbFunctions _, (IPAddress Address, int Subnet) cidr, IPAddress other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The network to search. IPAddress other The IP address to locate. Returns Type Description bool True if the network contains the other IPAddress; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Determines whether an (IPAddress Address, int Subnet) contains another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool Contains(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr to search. (IPAddress Address, int Subnet) other The cidr to locate. Returns Type Description bool True if the (IPAddress Address, int Subnet) contains the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainsOrContainedBy(DbFunctions, NpgsqlInet, NpgsqlInet) Determines whether an NpgsqlInet contains or is contained by another NpgsqlInet. Declaration public static bool ContainsOrContainedBy(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The IP address to search. NpgsqlInet other The IP address to locate. Returns Type Description bool True if the NpgsqlInet contains or is contained by the other NpgsqlInet; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainsOrContainedBy(DbFunctions, IPAddress, (IPAddress Address, int Subnet)) Determines whether an IPAddress contains or is contained by a network. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool ContainsOrContainedBy(this DbFunctions _, IPAddress inet, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IPAddress inet The IP address to search. (IPAddress Address, int Subnet) other The network to locate. Returns Type Description bool True if the IPAddress contains or is contained by the network; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainsOrContainedBy(DbFunctions, (IPAddress Address, int Subnet), IPAddress) Determines whether a network contains or is contained by an IPAddress. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool ContainsOrContainedBy(this DbFunctions _, (IPAddress Address, int Subnet) cidr, IPAddress other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The network to search. IPAddress other The IP address to locate. Returns Type Description bool True if the network contains or is contained by the IPAddress; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainsOrContainedBy(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Determines whether an (IPAddress Address, int Subnet) contains or is contained by another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool ContainsOrContainedBy(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr to search. (IPAddress Address, int Subnet) other The cidr to locate. Returns Type Description bool True if the (IPAddress Address, int Subnet) contains or is contained by the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainsOrEqual(DbFunctions, NpgsqlInet, NpgsqlInet) Determines whether an NpgsqlInet contains or is equal to another NpgsqlInet. Declaration public static bool ContainsOrEqual(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The IP address to search. NpgsqlInet other The IP address to locate. Returns Type Description bool True if the NpgsqlInet contains or is equal to the other NpgsqlInet; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainsOrEqual(DbFunctions, (IPAddress Address, int Subnet), IPAddress) Determines whether a network contains or is equal to another IPAddress. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool ContainsOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, IPAddress other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The network to search. IPAddress other The IP address to locate. Returns Type Description bool True if the network contains or is equal to the other IPAddress; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source ContainsOrEqual(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Determines whether an (IPAddress Address, int Subnet) contains or is equal to another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool ContainsOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr to search. (IPAddress Address, int Subnet) other The cidr to locate. Returns Type Description bool True if the (IPAddress Address, int Subnet) contains or is equal to the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Family(DbFunctions, NpgsqlInet) Extracts the family of an address; 4 for IPv4, 6 for IPv6. Declaration public static int Family(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet used to derive the family. Returns Type Description int The family of an address; 4 for IPv4, 6 for IPv6. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Family(DbFunctions, (IPAddress Address, int Subnet)) Extracts the family of an address; 4 for IPv4, 6 for IPv6. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static int Family(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr used to derive the family. Returns Type Description int The family of an address; 4 for IPv4, 6 for IPv6. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source GreaterThan(DbFunctions, NpgsqlInet, NpgsqlInet) Determines whether an NpgsqlInet is greater than another NpgsqlInet. Declaration public static bool GreaterThan(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The left-hand inet. NpgsqlInet other The right-hand inet. Returns Type Description bool True if the NpgsqlInet is greater than the other NpgsqlInet; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source GreaterThan(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an PhysicalAddress is greater than another PhysicalAddress. Declaration public static bool GreaterThan(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description bool True if the PhysicalAddress is greater than the other PhysicalAddress; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source GreaterThan(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Determines whether an (IPAddress Address, int Subnet) is greater than another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool GreaterThan(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The left-hand cidr. (IPAddress Address, int Subnet) other The right-hand cidr. Returns Type Description bool True if the (IPAddress Address, int Subnet) is greater than the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source GreaterThanOrEqual(DbFunctions, NpgsqlInet, NpgsqlInet) Determines whether an NpgsqlInet is greater than or equal to another NpgsqlInet. Declaration public static bool GreaterThanOrEqual(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The left-hand inet. NpgsqlInet other The right-hand inet. Returns Type Description bool True if the NpgsqlInet is greater than or equal to the other NpgsqlInet; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source GreaterThanOrEqual(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an PhysicalAddress is greater than or equal to another PhysicalAddress. Declaration public static bool GreaterThanOrEqual(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description bool True if the PhysicalAddress is greater than or equal to the other PhysicalAddress; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source GreaterThanOrEqual(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Determines whether an (IPAddress Address, int Subnet) is greater than or equal to another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool GreaterThanOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The left-hand cidr. (IPAddress Address, int Subnet) other The right-hand cidr. Returns Type Description bool True if the (IPAddress Address, int Subnet) is greater than or equal to the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Host(DbFunctions, NpgsqlInet) Extracts the host (i.e. the IP address) as text. Declaration public static string Host(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet from which to extract the host. Returns Type Description string The host (i.e. the IP address) as text. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Host(DbFunctions, (IPAddress Address, int Subnet)) Extracts the host (i.e. the IP address) as text. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static string Host(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr from which to extract the host. Returns Type Description string The host (i.e. the IP address) as text. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source HostMask(DbFunctions, NpgsqlInet) Constructs the host mask for the network. Declaration public static NpgsqlInet HostMask(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet used to construct the host mask. Returns Type Description NpgsqlInet The constructed host mask. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source HostMask(DbFunctions, (IPAddress Address, int Subnet)) Constructs the host mask for the network. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static IPAddress HostMask(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr used to construct the host mask. Returns Type Description IPAddress The constructed host mask. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source LessThan(DbFunctions, NpgsqlInet, NpgsqlInet) Determines whether an NpgsqlInet is less than another NpgsqlInet. Declaration public static bool LessThan(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The left-hand inet. NpgsqlInet other The right-hand inet. Returns Type Description bool True if the NpgsqlInet is less than the other NpgsqlInet; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source LessThan(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an PhysicalAddress is less than another PhysicalAddress. Declaration public static bool LessThan(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description bool True if the PhysicalAddress is less than the other PhysicalAddress; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source LessThan(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Determines whether an (IPAddress Address, int Subnet) is less than another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool LessThan(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The left-hand cidr. (IPAddress Address, int Subnet) other The right-hand cidr. Returns Type Description bool True if the (IPAddress Address, int Subnet) is less than the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source LessThanOrEqual(DbFunctions, NpgsqlInet, NpgsqlInet) Determines whether an NpgsqlInet is less than or equal to another NpgsqlInet. Declaration public static bool LessThanOrEqual(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The left-hand inet. NpgsqlInet other The right-hand inet. Returns Type Description bool True if the NpgsqlInet is less than or equal to the other NpgsqlInet; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source LessThanOrEqual(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an PhysicalAddress is less than or equal to another PhysicalAddress. Declaration public static bool LessThanOrEqual(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. PhysicalAddress macaddr The left-hand macaddr. PhysicalAddress other The right-hand macaddr. Returns Type Description bool True if the PhysicalAddress is less than or equal to the other PhysicalAddress; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source LessThanOrEqual(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Determines whether an (IPAddress Address, int Subnet) is less than or equal to another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool LessThanOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The left-hand cidr. (IPAddress Address, int Subnet) other The right-hand cidr. Returns Type Description bool True if the (IPAddress Address, int Subnet) is less than or equal to the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source MaskLength(DbFunctions, NpgsqlInet) Extracts the length of the subnet mask. Declaration public static int MaskLength(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet used to extract the subnet length. Returns Type Description int The length of the subnet mask. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source MaskLength(DbFunctions, (IPAddress Address, int Subnet)) Extracts the length of the subnet mask. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static int MaskLength(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr used to extract the subnet length. Returns Type Description int The length of the subnet mask. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Merge(DbFunctions, NpgsqlInet, NpgsqlInet) Constructs the smallest network which includes both of the given networks. Declaration public static NpgsqlCidr Merge(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The first inet. NpgsqlInet other The second inet. Returns Type Description NpgsqlCidr The smallest network which includes both of the given networks. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Merge(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Constructs the smallest network which includes both of the given networks. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static (IPAddress Address, int Subnet) Merge(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The first cidr. (IPAddress Address, int Subnet) other The second cidr. Returns Type Description (IPAddress Address, int Subnet) The smallest network which includes both of the given networks. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Netmask(DbFunctions, NpgsqlInet) Constructs the subnet mask for the network. Declaration public static NpgsqlInet Netmask(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet used to construct the subnet mask. Returns Type Description NpgsqlInet The subnet mask for the network. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Netmask(DbFunctions, (IPAddress Address, int Subnet)) Constructs the subnet mask for the network. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static IPAddress Netmask(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr used to construct the subnet mask. Returns Type Description IPAddress The subnet mask for the network. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Network(DbFunctions, NpgsqlInet) Extracts the network part of the address. Declaration public static NpgsqlCidr Network(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet used to extract the network. Returns Type Description NpgsqlCidr The network part of the address. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Network(DbFunctions, (IPAddress Address, int Subnet)) Extracts the network part of the address. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static (IPAddress Address, int Subnet) Network(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr used to extract the network. Returns Type Description (IPAddress Address, int Subnet) The network part of the address. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source SameFamily(DbFunctions, NpgsqlInet, NpgsqlInet) Tests if the addresses are in the same family. Declaration public static bool SameFamily(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The primary inet. NpgsqlInet other The other inet. Returns Type Description bool True if the addresses are in the same family; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source SameFamily(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Tests if the addresses are in the same family. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static bool SameFamily(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The primary cidr. (IPAddress Address, int Subnet) other The other cidr. Returns Type Description bool True if the addresses are in the same family; otherwise, false. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Set7BitMac8(DbFunctions, PhysicalAddress) Sets the 7th bit to one, also known as modified EUI-64, for inclusion in an IPv6 address. Declaration public static PhysicalAddress Set7BitMac8(this DbFunctions _, PhysicalAddress macAddress) Parameters Type Name Description DbFunctions _ The DbFunctions instance. PhysicalAddress macAddress The MAC address to modify. Returns Type Description PhysicalAddress The MAC address with the 7th bit set to one. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source SetMaskLength(DbFunctions, NpgsqlCidr, int) Sets the length of the subnet mask. Declaration public static NpgsqlCidr SetMaskLength(this DbFunctions _, NpgsqlCidr cidr, int length) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlCidr cidr The cidr to modify. int length The subnet mask length to set. Returns Type Description NpgsqlCidr The network with a subnet mask of the specified length. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source SetMaskLength(DbFunctions, NpgsqlInet, int) Sets the length of the subnet mask. Declaration public static NpgsqlInet SetMaskLength(this DbFunctions _, NpgsqlInet inet, int length) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet to modify. int length The subnet mask length to set. Returns Type Description NpgsqlInet The network with a subnet mask of the specified length. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source SetMaskLength(DbFunctions, (IPAddress Address, int Subnet), int) Sets the length of the subnet mask. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static (IPAddress Address, int Subnet) SetMaskLength(this DbFunctions _, (IPAddress Address, int Subnet) cidr, int length) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr to modify. int length The subnet mask length to set. Returns Type Description (IPAddress Address, int Subnet) The network with a subnet mask of the specified length. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Subtract(DbFunctions, NpgsqlInet, NpgsqlInet) Subtracts one NpgsqlInet from another NpgsqlInet. Declaration public static int Subtract(this DbFunctions _, NpgsqlInet inet, NpgsqlInet other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet from which to subtract. NpgsqlInet other The inet to subtract. Returns Type Description int The numeric difference between the two given addresses. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Subtract(DbFunctions, NpgsqlInet, long) Subtracts the value from the NpgsqlInet. Declaration public static NpgsqlInet Subtract(this DbFunctions _, NpgsqlInet inet, long value) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet. long value The value to subtract. Returns Type Description NpgsqlInet The NpgsqlInet augmented by the value. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Subtract(DbFunctions, (IPAddress Address, int Subnet), int) Subtracts the value from the (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static (IPAddress Address, int Subnet) Subtract(this DbFunctions _, (IPAddress Address, int Subnet) cidr, int value) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The inet. int value The value to subtract. Returns Type Description (IPAddress Address, int Subnet) The (IPAddress Address, int Subnet) augmented by the value. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Subtract(DbFunctions, (IPAddress Address, int Subnet), (IPAddress Address, int Subnet)) Subtracts one (IPAddress Address, int Subnet) from another (IPAddress Address, int Subnet). Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static int Subtract(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr from which to subtract. (IPAddress Address, int Subnet) other The cidr to subtract. Returns Type Description int The difference between the two addresses. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Text(DbFunctions, NpgsqlInet) Extracts the IP address and subnet mask as text. Declaration public static string Text(this DbFunctions _, NpgsqlInet inet) Parameters Type Name Description DbFunctions _ The DbFunctions instance. NpgsqlInet inet The inet to extract as text. Returns Type Description string The IP address and subnet mask as text. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Text(DbFunctions, (IPAddress Address, int Subnet)) Extracts the IP address and subnet mask as text. Declaration [Obsolete(\"Use the overload which accepts NpgsqlCidr\", true)] public static string Text(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The DbFunctions instance. (IPAddress Address, int Subnet) cidr The cidr to extract as text. Returns Type Description string The IP address and subnet mask as text. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Truncate(DbFunctions, PhysicalAddress) Sets the last 3 bytes of the MAC address to zero. For macaddr8, the last 5 bytes are set to zero. Declaration public static PhysicalAddress Truncate(this DbFunctions _, PhysicalAddress macAddress) Parameters Type Name Description DbFunctions _ The DbFunctions instance. PhysicalAddress macAddress The MAC address to truncate. Returns Type Description PhysicalAddress The MAC address with the last 3 bytes set to zero. For macaddr8, the last 5 bytes are set to zero. Exceptions Type Condition NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbContextOptionsBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbContextOptionsBuilderExtensions.html",
    "title": "Class NpgsqlNodaTimeDbContextOptionsBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeDbContextOptionsBuilderExtensions NodaTime specific extension methods for NpgsqlDbContextOptionsBuilder. Inheritance object NpgsqlNodaTimeDbContextOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public static class NpgsqlNodaTimeDbContextOptionsBuilderExtensions Methods | Edit this page View Source UseNodaTime(NpgsqlDbContextOptionsBuilder) Configure NodaTime type mappings for Entity Framework. Declaration public static NpgsqlDbContextOptionsBuilder UseNodaTime(this NpgsqlDbContextOptionsBuilder optionsBuilder) Parameters Type Name Description NpgsqlDbContextOptionsBuilder optionsBuilder Returns Type Description NpgsqlDbContextOptionsBuilder The options builder so that further configuration can be chained."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbFunctionsExtensions.html",
    "title": "Class NpgsqlNodaTimeDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeDbFunctionsExtensions Provides extension methods supporting NodaTime function translation for PostgreSQL. Inheritance object NpgsqlNodaTimeDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public static class NpgsqlNodaTimeDbFunctionsExtensions Methods | Edit this page View Source Average(DbFunctions, IEnumerable<Duration>) Computes the average (arithmetic mean) of the non-null input intervals. Corresponds to the PostgreSQL avg aggregate function. Declaration public static Duration? Average(this DbFunctions _, IEnumerable<Duration> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<Duration> input The input values to be computed into an average. Returns Type Description Duration? Exceptions Type Condition NotSupportedException Average(DbFunctions, IEnumerable<Duration>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source Average(DbFunctions, IEnumerable<Period>) Computes the average (arithmetic mean) of the non-null input intervals. Corresponds to the PostgreSQL avg aggregate function. Declaration public static Period? Average(this DbFunctions _, IEnumerable<Period> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<Period> input The input values to be computed into an average. Returns Type Description Period Exceptions Type Condition NotSupportedException Average(DbFunctions, IEnumerable<Period>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source Distance(DbFunctions, Instant, Instant) Returns the distance between two instants as a Period, particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, Instant a, Instant b) Parameters Type Name Description DbFunctions _ Instant a Instant b Returns Type Description int Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html. | Edit this page View Source Distance(DbFunctions, LocalDate, LocalDate) Returns the distance between two dates as a number of days, particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, LocalDate a, LocalDate b) Parameters Type Name Description DbFunctions _ LocalDate a LocalDate b Returns Type Description int Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html. | Edit this page View Source Distance(DbFunctions, LocalDateTime, LocalDateTime) Returns the distance between two local timestamps as a Period, particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, LocalDateTime a, LocalDateTime b) Parameters Type Name Description DbFunctions _ LocalDateTime a LocalDateTime b Returns Type Description int Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html. | Edit this page View Source Distance(DbFunctions, ZonedDateTime, ZonedDateTime) Returns the distance between two zoned timestamps as a Period, particularly suitable for sorting where the appropriate index is defined. Declaration public static int Distance(this DbFunctions _, ZonedDateTime a, ZonedDateTime b) Parameters Type Name Description DbFunctions _ ZonedDateTime a ZonedDateTime b Returns Type Description int Remarks This requires the btree_gist built-in PostgreSQL extension, see https://www.postgresql.org/docs/current/btree-gist.html. | Edit this page View Source RangeAgg(DbFunctions, IEnumerable<DateInterval>) Computes the union of the non-null input date intervals. Corresponds to the PostgreSQL range_agg aggregate function. Declaration public static DateInterval[] RangeAgg(this DbFunctions _, IEnumerable<DateInterval> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<DateInterval> input The date intervals to be aggregated via union into a multirange. Returns Type Description DateInterval[] Exceptions Type Condition NotSupportedException RangeAgg(DbFunctions, IEnumerable<DateInterval>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source RangeAgg(DbFunctions, IEnumerable<Interval>) Computes the union of the non-null input intervals. Corresponds to the PostgreSQL range_agg aggregate function. Declaration public static Interval[] RangeAgg(this DbFunctions _, IEnumerable<Interval> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<Interval> input The intervals to be aggregated via union into a multirange. Returns Type Description Interval[] Exceptions Type Condition NotSupportedException RangeAgg(DbFunctions, IEnumerable<Interval>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source RangeIntersectAgg(DbFunctions, IEnumerable<DateInterval[]>) Computes the intersection of the non-null input date interval multiranges. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static DateInterval[] RangeIntersectAgg(this DbFunctions _, IEnumerable<DateInterval[]> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<DateInterval[]> input The date intervals on which to perform the intersection operation. Returns Type Description DateInterval[] Exceptions Type Condition NotSupportedException RangeIntersectAgg(DbFunctions, IEnumerable<DateInterval[]>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source RangeIntersectAgg(DbFunctions, IEnumerable<DateInterval>) Computes the intersection of the non-null input date intervals. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static DateInterval RangeIntersectAgg(this DbFunctions _, IEnumerable<DateInterval> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<DateInterval> input The date intervals on which to perform the intersection operation. Returns Type Description DateInterval Exceptions Type Condition NotSupportedException RangeIntersectAgg(DbFunctions, IEnumerable<DateInterval>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source RangeIntersectAgg(DbFunctions, IEnumerable<Interval[]>) Computes the intersection of the non-null input interval multiranges. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static Interval[] RangeIntersectAgg(this DbFunctions _, IEnumerable<Interval[]> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<Interval[]> input The intervals on which to perform the intersection operation. Returns Type Description Interval[] Exceptions Type Condition NotSupportedException RangeIntersectAgg(DbFunctions, IEnumerable<Interval[]>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source RangeIntersectAgg(DbFunctions, IEnumerable<Interval>) Computes the intersection of the non-null input intervals. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static Interval RangeIntersectAgg(this DbFunctions _, IEnumerable<Interval> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<Interval> input The intervals on which to perform the intersection operation. Returns Type Description Interval Exceptions Type Condition NotSupportedException RangeIntersectAgg(DbFunctions, IEnumerable<Interval>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source Sum(DbFunctions, IEnumerable<Duration>) Computes the sum of the non-null input intervals. Corresponds to the PostgreSQL sum aggregate function. Declaration public static Duration? Sum(this DbFunctions _, IEnumerable<Duration> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<Duration> input The input values to be summed. Returns Type Description Duration? Exceptions Type Condition NotSupportedException Sum(DbFunctions, IEnumerable<Duration>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source Sum(DbFunctions, IEnumerable<Period>) Computes the sum of the non-null input intervals. Corresponds to the PostgreSQL sum aggregate function. Declaration public static Period? Sum(this DbFunctions _, IEnumerable<Period> input) Parameters Type Name Description DbFunctions _ The DbFunctions instance. IEnumerable<Period> input The input values to be summed. Returns Type Description Period Exceptions Type Condition NotSupportedException Sum(DbFunctions, IEnumerable<Period>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyBuilderExtensions.html",
    "title": "Class NpgsqlPropertyBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlPropertyBuilderExtensions Npgsql specific extension methods for PropertyBuilder. Inheritance object NpgsqlPropertyBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlPropertyBuilderExtensions Methods | Edit this page View Source CanSetCompressionMethod(IConventionPropertyBuilder, string?, bool) Whether the compression method for the column can be set. Declaration public static bool CanSetCompressionMethod(this IConventionPropertyBuilder propertyBuilder, string? compressionMethod, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. string compressionMethod The compression method. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the index can be configured with the method Remarks This feature was introduced in PostgreSQL 14. | Edit this page View Source CanSetHiLoSequence(IConventionPropertyBuilder, string?, string?, bool) Returns a value indicating whether the given name and schema can be set for the hi-lo sequence. Declaration public static bool CanSetHiLoSequence(this IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. string name The name of the sequence. string schema The schema of the sequence. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the given name and schema can be set for the hi-lo sequence. | Edit this page View Source CanSetIdentityOptions(IConventionPropertyBuilder, long?, long?, long?, long?, bool?, long?) Returns a value indicating whether the sequence options can be set on the identity column. Declaration public static bool CanSetIdentityOptions(this IConventionPropertyBuilder propertyBuilder, long? startValue = null, long? incrementBy = null, long? minValue = null, long? maxValue = null, bool? cyclic = null, long? numbersToCache = null) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. long? startValue The starting value for the sequence. The default starting value is minValue for ascending sequences and maxValue for descending ones. long? incrementBy The amount to increment between values. Defaults to 1. long? minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. long? maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. bool? cyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. long? numbersToCache Specifies how many sequence numbers are to be pre-allocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description bool The same builder instance so that multiple calls can be chained. | Edit this page View Source CanSetIsGeneratedTsVectorColumn(IConventionPropertyBuilder, string?, IReadOnlyList<string>?, bool) Returns a value indicating whether the property can be configured as a full-text search tsvector column. Declaration public static bool CanSetIsGeneratedTsVectorColumn(this IConventionPropertyBuilder propertyBuilder, string? config, IReadOnlyList<string>? includedPropertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. IReadOnlyList<string> includedPropertyNames An array of property names to be included in the tsvector. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the property can be configured as a full-text search tsvector column. | Edit this page View Source CanSetSequence(IConventionPropertyBuilder, string?, string?, bool) Returns a value indicating whether the given name and schema can be set for the key value generation sequence. Declaration public static bool CanSetSequence(this IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. string name The name of the sequence. string schema The schema of the sequence. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the given name and schema can be set for the key value generation sequence. | Edit this page View Source CanSetValueGenerationStrategy(IConventionPropertyBuilder, NpgsqlValueGenerationStrategy?, bool) Returns a value indicating whether the given value can be set as the value generation strategy. Declaration public static bool CanSetValueGenerationStrategy(this IConventionPropertyBuilder propertyBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. NpgsqlValueGenerationStrategy? valueGenerationStrategy The value generation strategy. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool true if the given value can be set as the default value generation strategy. | Edit this page View Source HasHiLoSequence(IConventionPropertyBuilder, string?, string?, bool) Configures the database sequence used for the hi-lo pattern to generate values for the key property, when targeting SQL Server. Declaration public static IConventionSequenceBuilder? HasHiLoSequence(this IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. string name The name of the sequence. string schema The schema of the sequence. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionSequenceBuilder A builder to further configure the sequence. | Edit this page View Source HasIdentityOptions(IConventionPropertyBuilder, long?, long?, long?, long?, bool?, long?) Sets the sequence options on an identity column. The column must be set as identity via UseIdentityColumn(PropertyBuilder) or UseIdentityAlwaysColumn(PropertyBuilder). Declaration public static IConventionPropertyBuilder? HasIdentityOptions(this IConventionPropertyBuilder propertyBuilder, long? startValue = null, long? incrementBy = null, long? minValue = null, long? maxValue = null, bool? cyclic = null, long? numbersToCache = null) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. long? startValue The starting value for the sequence. The default starting value is minValue for ascending sequences and maxValue for descending ones. long? incrementBy The amount to increment between values. Defaults to 1. long? minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. long? maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. bool? cyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. long? numbersToCache Specifies how many sequence numbers are to be pre-allocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description IConventionPropertyBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source HasIdentityOptions(PropertyBuilder, long?, long?, long?, long?, bool?, long?) Sets the sequence options on an identity column. The column must be set as identity via UseIdentityColumn(PropertyBuilder) or UseIdentityAlwaysColumn(PropertyBuilder). Declaration public static PropertyBuilder HasIdentityOptions(this PropertyBuilder propertyBuilder, long? startValue = null, long? incrementBy = null, long? minValue = null, long? maxValue = null, bool? cyclic = null, long? numbersToCache = null) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. long? startValue The starting value for the sequence. The default starting value is minValue for ascending sequences and maxValue for descending ones. long? incrementBy The amount to increment between values. Defaults to 1. long? minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. long? maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. bool? cyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. long? numbersToCache Specifies how many sequence numbers are to be pre0allocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source HasIdentityOptions<TProperty>(PropertyBuilder<TProperty>, long?, long?, long?, long?, bool?, long?) Sets the sequence options on an identity column. The column must be set as identity via UseIdentityColumn(PropertyBuilder) or UseIdentityAlwaysColumn(PropertyBuilder). Declaration public static PropertyBuilder<TProperty> HasIdentityOptions<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, long? startValue = null, long? incrementBy = null, long? minValue = null, long? maxValue = null, bool? cyclic = null, long? numbersToCache = null) Parameters Type Name Description PropertyBuilder<TProperty> propertyBuilder The builder for the property being configured. long? startValue The starting value for the sequence. The default starting value is minValue for ascending sequences and maxValue for descending ones. long? incrementBy The amount to increment between values. Defaults to 1. long? minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. long? maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. bool? cyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. long? numbersToCache Specifies how many sequence numbers are to be pre-allocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description PropertyBuilder<TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Edit this page View Source HasPostgresArrayConversion<TElementProperty, TElementProvider>(PropertyBuilder<List<TElementProperty>>, ValueConverter) Configures a PostgreSQL array conversion. Declaration [Obsolete(\"HasPostgresArrayConversion has been replaced with the standard EF 8 primitive collection API, see https://www.npgsql.org/efcore/release-notes/8.0.html\", true)] public static PropertyBuilder<List<TElementProperty>> HasPostgresArrayConversion<TElementProperty, TElementProvider>(this PropertyBuilder<List<TElementProperty>> propertyBuilder, ValueConverter elementValueConverter) Parameters Type Name Description PropertyBuilder<List<TElementProperty>> propertyBuilder ValueConverter elementValueConverter Returns Type Description PropertyBuilder<List<TElementProperty>> Type Parameters Name Description TElementProperty TElementProvider | Edit this page View Source HasPostgresArrayConversion<TElementProperty, TElementProvider>(PropertyBuilder<List<TElementProperty>>, Expression<Func<TElementProperty, TElementProvider>>, Expression<Func<TElementProvider, TElementProperty>>) Configures a PostgreSQL array conversion. Declaration [Obsolete(\"HasPostgresArrayConversion has been replaced with the standard EF 8 primitive collection API, see https://www.npgsql.org/efcore/release-notes/8.0.html\", true)] public static PropertyBuilder<List<TElementProperty>> HasPostgresArrayConversion<TElementProperty, TElementProvider>(this PropertyBuilder<List<TElementProperty>> propertyBuilder, Expression<Func<TElementProperty, TElementProvider>> convertToProviderExpression, Expression<Func<TElementProvider, TElementProperty>> convertFromProviderExpression) Parameters Type Name Description PropertyBuilder<List<TElementProperty>> propertyBuilder Expression<Func<TElementProperty, TElementProvider>> convertToProviderExpression Expression<Func<TElementProvider, TElementProperty>> convertFromProviderExpression Returns Type Description PropertyBuilder<List<TElementProperty>> Type Parameters Name Description TElementProperty TElementProvider | Edit this page View Source HasPostgresArrayConversion<TElementProperty, TElementProvider>(PropertyBuilder<TElementProperty[]>, ValueConverter) Configures a PostgreSQL array conversion. Declaration [Obsolete(\"HasPostgresArrayConversion has been replaced with the standard EF 8 primitive collection API, see https://www.npgsql.org/efcore/release-notes/8.0.html\", true)] public static PropertyBuilder<TElementProperty[]> HasPostgresArrayConversion<TElementProperty, TElementProvider>(this PropertyBuilder<TElementProperty[]> propertyBuilder, ValueConverter elementValueConverter) Parameters Type Name Description PropertyBuilder<TElementProperty[]> propertyBuilder ValueConverter elementValueConverter Returns Type Description PropertyBuilder<TElementProperty[]> Type Parameters Name Description TElementProperty TElementProvider | Edit this page View Source HasPostgresArrayConversion<TElementProperty, TElementProvider>(PropertyBuilder<TElementProperty[]>, Expression<Func<TElementProperty, TElementProvider>>, Expression<Func<TElementProvider, TElementProperty>>) Configures a PostgreSQL array conversion. Declaration [Obsolete(\"HasPostgresArrayConversion has been replaced with the standard EF 8 primitive collection API, see https://www.npgsql.org/efcore/release-notes/8.0.html\", true)] public static PropertyBuilder<TElementProperty[]> HasPostgresArrayConversion<TElementProperty, TElementProvider>(this PropertyBuilder<TElementProperty[]> propertyBuilder, Expression<Func<TElementProperty, TElementProvider>> convertToProviderExpression, Expression<Func<TElementProvider, TElementProperty>> convertFromProviderExpression) Parameters Type Name Description PropertyBuilder<TElementProperty[]> propertyBuilder Expression<Func<TElementProperty, TElementProvider>> convertToProviderExpression Expression<Func<TElementProvider, TElementProperty>> convertFromProviderExpression Returns Type Description PropertyBuilder<TElementProperty[]> Type Parameters Name Description TElementProperty TElementProvider | Edit this page View Source HasSequence(IConventionPropertyBuilder, string?, string?, bool) Configures the database sequence used for the key value generation pattern to generate values for the key property, when targeting PostgreSQL. Declaration public static IConventionSequenceBuilder? HasSequence(this IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. string name The name of the sequence. string schema The schema of the sequence. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionSequenceBuilder A builder to further configure the sequence. | Edit this page View Source HasValueGenerationStrategy(IConventionPropertyBuilder, NpgsqlValueGenerationStrategy?, bool) Configures the value generation strategy for the key property, when targeting PostgreSQL. Declaration public static IConventionPropertyBuilder? HasValueGenerationStrategy(this IConventionPropertyBuilder propertyBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. NpgsqlValueGenerationStrategy? valueGenerationStrategy The value generation strategy. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionPropertyBuilder The same builder instance if the configuration was applied, null otherwise. | Edit this page View Source IsGeneratedTsVectorColumn(IConventionPropertyBuilder, string, IReadOnlyList<string>, bool) Configures the property to be a full-text search tsvector column over the given properties. Declaration public static IConventionPropertyBuilder? IsGeneratedTsVectorColumn(this IConventionPropertyBuilder propertyBuilder, string config, IReadOnlyList<string> includedPropertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. string config The text search configuration for this generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. IReadOnlyList<string> includedPropertyNames An array of property names to be included in the tsvector. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionPropertyBuilder The same builder instance if the configuration was applied, null otherwise. | Edit this page View Source IsGeneratedTsVectorColumn(PropertyBuilder, string, params string[]) Configures the property to be a full-text search tsvector column over the given properties. Declaration public static PropertyBuilder IsGeneratedTsVectorColumn(this PropertyBuilder propertyBuilder, string config, params string[] includedPropertyNames) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. string[] includedPropertyNames An array of property names to be included in the tsvector. Returns Type Description PropertyBuilder A builder to further configure the property. | Edit this page View Source IsGeneratedTsVectorColumn(PropertyBuilder<NpgsqlTsVector>, string, params string[]) Configures the property to be a full-text search tsvector column over the given properties. Declaration public static PropertyBuilder<NpgsqlTsVector> IsGeneratedTsVectorColumn(this PropertyBuilder<NpgsqlTsVector> propertyBuilder, string config, params string[] includedPropertyNames) Parameters Type Name Description PropertyBuilder<NpgsqlTsVector> propertyBuilder The builder for the property being configured. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. string[] includedPropertyNames An array of property names to be included in the tsvector. Returns Type Description PropertyBuilder<NpgsqlTsVector> A builder to further configure the property. | Edit this page View Source UseCompressionMethod(IConventionPropertyBuilder, string?, bool) Sets the compression method for the column. Declaration public static IConventionPropertyBuilder? UseCompressionMethod(this IConventionPropertyBuilder propertyBuilder, string? compressionMethod, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. string compressionMethod The compression method. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionPropertyBuilder A builder to further configure the property. Remarks This feature was introduced in PostgreSQL 14. | Edit this page View Source UseCompressionMethod(PropertyBuilder, string?) Sets the compression method for the column. Declaration public static PropertyBuilder UseCompressionMethod(this PropertyBuilder propertyBuilder, string? compressionMethod) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. string compressionMethod The compression method. Returns Type Description PropertyBuilder A builder to further configure the property. Remarks This feature was introduced in PostgreSQL 14. | Edit this page View Source UseCompressionMethod<TEntity>(PropertyBuilder<TEntity>, string?) Sets the compression method for the column. Declaration public static PropertyBuilder<TEntity> UseCompressionMethod<TEntity>(this PropertyBuilder<TEntity> propertyBuilder, string? compressionMethod) Parameters Type Name Description PropertyBuilder<TEntity> propertyBuilder The builder for the property being configured. string compressionMethod The compression method. Returns Type Description PropertyBuilder<TEntity> A builder to further configure the property. Type Parameters Name Description TEntity Remarks This feature was introduced in PostgreSQL 14. | Edit this page View Source UseHiLo(PropertyBuilder, string?, string?) Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Declaration public static PropertyBuilder UseHiLo(this PropertyBuilder propertyBuilder, string? name = null, string? schema = null) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. string name The comment of the sequence. string schema The schema of the sequence. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseHiLo<TProperty>(PropertyBuilder<TProperty>, string?, string?) Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Declaration public static PropertyBuilder<TProperty> UseHiLo<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, string? name = null, string? schema = null) Parameters Type Name Description PropertyBuilder<TProperty> propertyBuilder The builder for the property being configured. string name The comment of the sequence. string schema The schema of the sequence. Returns Type Description PropertyBuilder<TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Edit this page View Source UseIdentityAlwaysColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Values for this property will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder UseIdentityAlwaysColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseIdentityAlwaysColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Values for this property will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder<TProperty> UseIdentityAlwaysColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder<TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder<TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Edit this page View Source UseIdentityByDefaultColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder UseIdentityByDefaultColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseIdentityByDefaultColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder<TProperty> UseIdentityByDefaultColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder<TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder<TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. | Edit this page View Source UseIdentityColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This internally calls UseIdentityByDefaultColumn(PropertyBuilder). This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder UseIdentityColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseIdentityColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This internally calls UseIdentityByDefaultColumn(PropertyBuilder). This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder<TProperty> UseIdentityColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder<TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder<TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. | Edit this page View Source UseSequence(PropertyBuilder, string?, string?) Configures the key property to use a sequence-based key value generation pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Declaration public static PropertyBuilder UseSequence(this PropertyBuilder propertyBuilder, string? name = null, string? schema = null) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. string name The name of the sequence. string schema The schema of the sequence. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseSequence<TProperty>(PropertyBuilder<TProperty>, string?, string?) Configures the key property to use a sequence-based key value generation pattern to generate values for new entities, when targeting SQL Server. This method sets the property to be OnAdd. Declaration public static PropertyBuilder<TProperty> UseSequence<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, string? name = null, string? schema = null) Parameters Type Name Description PropertyBuilder<TProperty> propertyBuilder The builder for the property being configured. string name The name of the sequence. string schema The schema of the sequence. Returns Type Description PropertyBuilder<TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. Remarks See Modeling entity types and relationships, and Accessing SQL Server and SQL Azure databases with EF Core for more information and examples. | Edit this page View Source UseSerialColumn(PropertyBuilder) Configures the property to use the PostgreSQL SERIAL feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Declaration public static PropertyBuilder UseSerialColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Edit this page View Source UseSerialColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL SERIAL feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be OnAdd. Declaration public static PropertyBuilder<TProperty> UseSerialColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder<TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder<TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyExtensions.html",
    "title": "Class NpgsqlPropertyExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlPropertyExtensions Property extension methods for Npgsql-specific metadata. Inheritance object NpgsqlPropertyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlPropertyExtensions Remarks See Modeling entity types and relationships. Methods | Edit this page View Source FindHiLoSequence(IProperty) Finds the ISequence in the model to use for the hi-lo pattern. Declaration public static ISequence? FindHiLoSequence(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description ISequence The sequence to use, or null if no sequence exists in the model. | Edit this page View Source FindHiLoSequence(IProperty, in StoreObjectIdentifier) Finds the ISequence in the model to use for the hi-lo pattern. Declaration public static ISequence? FindHiLoSequence(this IProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description ISequence The sequence to use, or null if no sequence exists in the model. | Edit this page View Source FindHiLoSequence(IReadOnlyProperty) Finds the ISequence in the model to use for the hi-lo pattern. Declaration public static IReadOnlySequence? FindHiLoSequence(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description IReadOnlySequence The sequence to use, or null if no sequence exists in the model. | Edit this page View Source FindHiLoSequence(IReadOnlyProperty, in StoreObjectIdentifier) Finds the ISequence in the model to use for the hi-lo pattern. Declaration public static IReadOnlySequence? FindHiLoSequence(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description IReadOnlySequence The sequence to use, or null if no sequence exists in the model. | Edit this page View Source FindSequence(IProperty) Finds the ISequence in the model to use for the key value generation pattern. Declaration public static ISequence? FindSequence(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description ISequence The sequence to use, or null if no sequence exists in the model. | Edit this page View Source FindSequence(IProperty, in StoreObjectIdentifier) Finds the ISequence in the model to use for the key value generation pattern. Declaration public static ISequence? FindSequence(this IProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description ISequence The sequence to use, or null if no sequence exists in the model. | Edit this page View Source FindSequence(IReadOnlyProperty) Finds the ISequence in the model to use for the key value generation pattern. Declaration public static IReadOnlySequence? FindSequence(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description IReadOnlySequence The sequence to use, or null if no sequence exists in the model. | Edit this page View Source FindSequence(IReadOnlyProperty, in StoreObjectIdentifier) Finds the ISequence in the model to use for the key value generation pattern. Declaration public static IReadOnlySequence? FindSequence(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description IReadOnlySequence The sequence to use, or null if no sequence exists in the model. | Edit this page View Source GetCompressionMethod(IReadOnlyProperty) Returns the compression method to be used, or null if it hasn't been specified. Declaration public static string? GetCompressionMethod(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property Returns Type Description string Remarks This feature was introduced in PostgreSQL 14. | Edit this page View Source GetCompressionMethod(IReadOnlyProperty, in StoreObjectIdentifier) Returns the compression method to be used, or null if it hasn't been specified. Declaration public static string? GetCompressionMethod(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property StoreObjectIdentifier storeObject Returns Type Description string Remarks This feature was introduced in PostgreSQL 14. | Edit this page View Source GetCompressionMethodConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the compression method. Declaration public static ConfigurationSource? GetCompressionMethodConfigurationSource(this IConventionProperty index) Parameters Type Name Description IConventionProperty index The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the compression method. | Edit this page View Source GetDefaultCollation(IReadOnlyProperty) Returns the collation to be used for the column - including the PostgreSQL-specific default column collation defined at the model level (see SetDefaultColumnCollation(IMutableModel, string?)). Declaration [Obsolete(\"Use EF Core's standard model bulk configuration API\")] public static string? GetDefaultCollation(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description string The collation for the column this property is mapped to. | Edit this page View Source GetHiLoSequenceName(IReadOnlyProperty) Returns the name to use for the hi-lo sequence. Declaration public static string? GetHiLoSequenceName(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description string The name to use for the hi-lo sequence. | Edit this page View Source GetHiLoSequenceName(IReadOnlyProperty, in StoreObjectIdentifier) Returns the name to use for the hi-lo sequence. Declaration public static string? GetHiLoSequenceName(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description string The name to use for the hi-lo sequence. | Edit this page View Source GetHiLoSequenceNameConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the hi-lo sequence name. Declaration public static ConfigurationSource? GetHiLoSequenceNameConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the hi-lo sequence name. | Edit this page View Source GetHiLoSequenceSchema(IReadOnlyProperty) Returns the schema to use for the hi-lo sequence. Declaration public static string? GetHiLoSequenceSchema(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description string The schema to use for the hi-lo sequence. | Edit this page View Source GetHiLoSequenceSchema(IReadOnlyProperty, in StoreObjectIdentifier) Returns the schema to use for the hi-lo sequence. Declaration public static string? GetHiLoSequenceSchema(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description string The schema to use for the hi-lo sequence. | Edit this page View Source GetHiLoSequenceSchemaConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the hi-lo sequence schema. Declaration public static ConfigurationSource? GetHiLoSequenceSchemaConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the hi-lo sequence schema. | Edit this page View Source GetIdentityIncrementBy(IReadOnlyProperty) Returns the identity increment value. Declaration public static long? GetIdentityIncrementBy(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description long? The identity increment value. | Edit this page View Source GetIdentityIncrementByConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the identity increment value. Declaration public static ConfigurationSource? GetIdentityIncrementByConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the identity increment value. | Edit this page View Source GetIdentityIsCyclic(IReadOnlyProperty) Returns whether the identity's sequence is cyclic. Declaration public static bool? GetIdentityIsCyclic(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description bool? Whether the identity's sequence is cyclic. | Edit this page View Source GetIdentityIsCyclicConfigurationSource(IConventionProperty) Returns the ConfigurationSource for whether the identity's sequence is cyclic. Declaration public static ConfigurationSource? GetIdentityIsCyclicConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for whether the identity's sequence is cyclic. | Edit this page View Source GetIdentityMaxValue(IReadOnlyProperty) Returns the identity maximum value. Declaration public static long? GetIdentityMaxValue(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description long? The identity maximum value. | Edit this page View Source GetIdentityMaxValueConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the identity maximum value. Declaration public static ConfigurationSource? GetIdentityMaxValueConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the identity maximum value. | Edit this page View Source GetIdentityMinValue(IReadOnlyProperty) Returns the identity minimum value. Declaration public static long? GetIdentityMinValue(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description long? The identity minimum value. | Edit this page View Source GetIdentityMinValueConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the identity minimum value. Declaration public static ConfigurationSource? GetIdentityMinValueConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the identity minimum value. | Edit this page View Source GetIdentityNumbersToCache(IReadOnlyProperty) Returns the number of sequence numbers to be preallocated and stored in memory for faster access. Defaults to 1 (no cache). Declaration public static long? GetIdentityNumbersToCache(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description long? The number of sequence numbers to be cached. | Edit this page View Source GetIdentityNumbersToCacheConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the number of sequence numbers to be preallocated and stored in memory for faster access. Declaration public static ConfigurationSource? GetIdentityNumbersToCacheConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the number of sequence numbers to be preallocated and stored in memory for faster access. | Edit this page View Source GetIdentityStartValue(IReadOnlyProperty) Returns the identity start value. Declaration public static long? GetIdentityStartValue(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description long? The identity start value. | Edit this page View Source GetIdentityStartValueConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the identity start value. Declaration public static ConfigurationSource? GetIdentityStartValueConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the identity start value. | Edit this page View Source GetSequenceName(IReadOnlyProperty) Returns the name to use for the key value generation sequence. Declaration public static string? GetSequenceName(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description string The name to use for the key value generation sequence. | Edit this page View Source GetSequenceName(IReadOnlyProperty, in StoreObjectIdentifier) Returns the name to use for the key value generation sequence. Declaration public static string? GetSequenceName(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description string The name to use for the key value generation sequence. | Edit this page View Source GetSequenceNameConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the key value generation sequence name. Declaration public static ConfigurationSource? GetSequenceNameConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the key value generation sequence name. | Edit this page View Source GetSequenceSchema(IReadOnlyProperty) Returns the schema to use for the key value generation sequence. Declaration public static string? GetSequenceSchema(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description string The schema to use for the key value generation sequence. | Edit this page View Source GetSequenceSchema(IReadOnlyProperty, in StoreObjectIdentifier) Returns the schema to use for the key value generation sequence. Declaration public static string? GetSequenceSchema(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description string The schema to use for the key value generation sequence. | Edit this page View Source GetSequenceSchemaConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the key value generation sequence schema. Declaration public static ConfigurationSource? GetSequenceSchemaConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the key value generation sequence schema. | Edit this page View Source GetTsVectorConfig(IReadOnlyProperty) Returns the text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. Declaration public static string? GetTsVectorConfig(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description string The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. | Edit this page View Source GetTsVectorConfigConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the text search configuration for the generated tsvector property. Declaration public static ConfigurationSource? GetTsVectorConfigConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The configuration source for the text search configuration for the generated tsvector property. | Edit this page View Source GetTsVectorProperties(IReadOnlyProperty) Returns the properties included in this generated tsvector property, or null if this is not a generated tsvector property. Declaration public static IReadOnlyList<string>? GetTsVectorProperties(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description IReadOnlyList<string> The included property names, or null if this is not a Generated tsvector column. | Edit this page View Source GetTsVectorPropertiesConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the properties included in the generated tsvector property. Declaration public static ConfigurationSource? GetTsVectorPropertiesConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The configuration source for the properties included in the generated tsvector property. | Edit this page View Source GetValueGenerationStrategy(IReadOnlyProperty) Returns the NpgsqlValueGenerationStrategy to use for the property. If no strategy is set for the property, then the strategy to use will be taken from the IModel. Declaration public static NpgsqlValueGenerationStrategy GetValueGenerationStrategy(this IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property Returns Type Description NpgsqlValueGenerationStrategy The strategy, or None if none was set. | Edit this page View Source GetValueGenerationStrategy(IReadOnlyProperty, in StoreObjectIdentifier) Returns the NpgsqlValueGenerationStrategy to use for the property. If no strategy is set for the property, then the strategy to use will be taken from the IModel. Declaration public static NpgsqlValueGenerationStrategy GetValueGenerationStrategy(this IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description NpgsqlValueGenerationStrategy The strategy, or None if none was set. | Edit this page View Source GetValueGenerationStrategy(IReadOnlyRelationalPropertyOverrides) Returns the NpgsqlValueGenerationStrategy to use for the property. Declaration public static NpgsqlValueGenerationStrategy? GetValueGenerationStrategy(this IReadOnlyRelationalPropertyOverrides overrides) Parameters Type Name Description IReadOnlyRelationalPropertyOverrides overrides The property overrides. Returns Type Description NpgsqlValueGenerationStrategy? The strategy, or None if none was set. Remarks If no strategy is set for the property, then the strategy to use will be taken from the IModel. | Edit this page View Source GetValueGenerationStrategyConfigurationSource(IConventionProperty) Returns the ConfigurationSource for the NpgsqlValueGenerationStrategy. Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ConfigurationSource? The ConfigurationSource for the NpgsqlValueGenerationStrategy. | Edit this page View Source GetValueGenerationStrategyConfigurationSource(IConventionProperty, in StoreObjectIdentifier) Returns the ConfigurationSource for the NpgsqlValueGenerationStrategy for a particular table. Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IConventionProperty property The property. StoreObjectIdentifier storeObject The identifier of the table containing the column. Returns Type Description ConfigurationSource? The ConfigurationSource for the NpgsqlValueGenerationStrategy. | Edit this page View Source GetValueGenerationStrategyConfigurationSource(IConventionRelationalPropertyOverrides) Returns the ConfigurationSource for the NpgsqlValueGenerationStrategy for a particular table. Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionRelationalPropertyOverrides overrides) Parameters Type Name Description IConventionRelationalPropertyOverrides overrides The property overrides. Returns Type Description ConfigurationSource? The ConfigurationSource for the NpgsqlValueGenerationStrategy. | Edit this page View Source IsCompatibleWithValueGeneration(IReadOnlyProperty) Returns a value indicating whether the property is compatible with any NpgsqlValueGenerationStrategy. Declaration public static bool IsCompatibleWithValueGeneration(IReadOnlyProperty property) Parameters Type Name Description IReadOnlyProperty property The property. Returns Type Description bool true if compatible. | Edit this page View Source RemoveHiLoOptions(IConventionProperty) Removes all identity sequence annotations from the property. Declaration public static void RemoveHiLoOptions(this IConventionProperty property) Parameters Type Name Description IConventionProperty property | Edit this page View Source RemoveHiLoOptions(IMutableProperty) Removes all identity sequence annotations from the property. Declaration public static void RemoveHiLoOptions(this IMutableProperty property) Parameters Type Name Description IMutableProperty property | Edit this page View Source RemoveIdentityOptions(IConventionProperty) Removes identity sequence options from the property. Declaration public static void RemoveIdentityOptions(this IConventionProperty property) Parameters Type Name Description IConventionProperty property | Edit this page View Source RemoveIdentityOptions(IMutableProperty) Removes identity sequence options from the property. Declaration public static void RemoveIdentityOptions(this IMutableProperty property) Parameters Type Name Description IMutableProperty property | Edit this page View Source SetCompressionMethod(IConventionProperty, string?, bool) Sets the compression method to be used, or null if it hasn't been specified. Declaration public static string? SetCompressionMethod(this IConventionProperty property, string? compressionMethod, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property string compressionMethod bool fromDataAnnotation Returns Type Description string Remarks This feature was introduced in PostgreSQL 14. | Edit this page View Source SetCompressionMethod(IMutableProperty, string?) Sets the compression method to be used, or null if it hasn't been specified. Declaration public static void SetCompressionMethod(this IMutableProperty property, string? compressionMethod) Parameters Type Name Description IMutableProperty property string compressionMethod Remarks This feature was introduced in PostgreSQL 14. | Edit this page View Source SetHiLoSequenceName(IConventionProperty, string?, bool) Sets the name to use for the hi-lo sequence. Declaration public static string? SetHiLoSequenceName(this IConventionProperty property, string? name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. string name The sequence name to use. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string | Edit this page View Source SetHiLoSequenceName(IMutableProperty, string?) Sets the name to use for the hi-lo sequence. Declaration public static void SetHiLoSequenceName(this IMutableProperty property, string? name) Parameters Type Name Description IMutableProperty property The property. string name The sequence name to use. | Edit this page View Source SetHiLoSequenceSchema(IConventionProperty, string?, bool) Sets the schema to use for the hi-lo sequence. Declaration public static string? SetHiLoSequenceSchema(this IConventionProperty property, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. string schema The schema to use. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string | Edit this page View Source SetHiLoSequenceSchema(IMutableProperty, string?) Sets the schema to use for the hi-lo sequence. Declaration public static void SetHiLoSequenceSchema(this IMutableProperty property, string? schema) Parameters Type Name Description IMutableProperty property The property. string schema The schema to use. | Edit this page View Source SetIdentityIncrementBy(IConventionProperty, long?, bool) Sets the identity increment value. Declaration public static long? SetIdentityIncrementBy(this IConventionProperty property, long? incrementBy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. long? incrementBy The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description long? | Edit this page View Source SetIdentityIncrementBy(IMutableProperty, long?) Sets the identity increment value. Declaration public static void SetIdentityIncrementBy(this IMutableProperty property, long? incrementBy) Parameters Type Name Description IMutableProperty property The property. long? incrementBy The value to set. | Edit this page View Source SetIdentityIsCyclic(IConventionProperty, bool?, bool) Sets whether the identity's sequence is cyclic. Declaration public static bool? SetIdentityIsCyclic(this IConventionProperty property, bool? cyclic, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. bool? cyclic The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description bool? | Edit this page View Source SetIdentityIsCyclic(IMutableProperty, bool?) Sets whether the identity's sequence is cyclic. Declaration public static void SetIdentityIsCyclic(this IMutableProperty property, bool? cyclic) Parameters Type Name Description IMutableProperty property The property. bool? cyclic The value to set. | Edit this page View Source SetIdentityMaxValue(IConventionProperty, long?, bool) Sets the identity maximum value. Declaration public static long? SetIdentityMaxValue(this IConventionProperty property, long? maxValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. long? maxValue The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description long? | Edit this page View Source SetIdentityMaxValue(IMutableProperty, long?) Sets the identity maximum value. Declaration public static void SetIdentityMaxValue(this IMutableProperty property, long? maxValue) Parameters Type Name Description IMutableProperty property The property. long? maxValue The value to set. | Edit this page View Source SetIdentityMinValue(IConventionProperty, long?, bool) Sets the identity minimum value. Declaration public static long? SetIdentityMinValue(this IConventionProperty property, long? minValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. long? minValue The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description long? | Edit this page View Source SetIdentityMinValue(IMutableProperty, long?) Sets the identity minimum value. Declaration public static void SetIdentityMinValue(this IMutableProperty property, long? minValue) Parameters Type Name Description IMutableProperty property The property. long? minValue The value to set. | Edit this page View Source SetIdentityNumbersToCache(IConventionProperty, long?, bool) Sets the number of sequence numbers to be preallocated and stored in memory for faster access. Declaration public static long? SetIdentityNumbersToCache(this IConventionProperty property, long? numbersToCache, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. long? numbersToCache The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description long? | Edit this page View Source SetIdentityNumbersToCache(IMutableProperty, long?) Sets the number of sequence numbers to be preallocated and stored in memory for faster access. Declaration public static void SetIdentityNumbersToCache(this IMutableProperty property, long? numbersToCache) Parameters Type Name Description IMutableProperty property The property. long? numbersToCache The value to set. | Edit this page View Source SetIdentityStartValue(IConventionProperty, long?, bool) Sets the identity start value. Declaration public static long? SetIdentityStartValue(this IConventionProperty property, long? startValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. long? startValue The value to set. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description long? | Edit this page View Source SetIdentityStartValue(IMutableProperty, long?) Sets the identity start value. Declaration public static void SetIdentityStartValue(this IMutableProperty property, long? startValue) Parameters Type Name Description IMutableProperty property The property. long? startValue The value to set. | Edit this page View Source SetSequenceName(IConventionProperty, string?, bool) Sets the name to use for the key value generation sequence. Declaration public static string? SetSequenceName(this IConventionProperty property, string? name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. string name The sequence name to use. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string The configured value. | Edit this page View Source SetSequenceName(IMutableProperty, string?) Sets the name to use for the key value generation sequence. Declaration public static void SetSequenceName(this IMutableProperty property, string? name) Parameters Type Name Description IMutableProperty property The property. string name The sequence name to use. | Edit this page View Source SetSequenceSchema(IConventionProperty, string?, bool) Sets the schema to use for the key value generation sequence. Declaration public static string? SetSequenceSchema(this IConventionProperty property, string? schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. string schema The schema to use. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string The configured value. | Edit this page View Source SetSequenceSchema(IMutableProperty, string?) Sets the schema to use for the key value generation sequence. Declaration public static void SetSequenceSchema(this IMutableProperty property, string? schema) Parameters Type Name Description IMutableProperty property The property. string schema The schema to use. | Edit this page View Source SetTsVectorConfig(IConventionProperty, string, bool) Returns the text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. Declaration public static string SetTsVectorConfig(this IConventionProperty property, string config, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description string | Edit this page View Source SetTsVectorConfig(IMutableProperty, string?) Sets the text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. Declaration public static void SetTsVectorConfig(this IMutableProperty property, string? config) Parameters Type Name Description IMutableProperty property The property. string config The text search configuration for this generated tsvector property, or null if this is not a generated tsvector property. See https://www.postgresql.org/docs/current/textsearch-controls.html for more information. | Edit this page View Source SetTsVectorProperties(IConventionProperty, IReadOnlyList<string>?, bool) Sets properties included in this generated tsvector property, or null to make this a regular, non-generated property. Declaration public static IReadOnlyList<string>? SetTsVectorProperties(this IConventionProperty property, IReadOnlyList<string>? properties, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. IReadOnlyList<string> properties The included property names. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IReadOnlyList<string> | Edit this page View Source SetTsVectorProperties(IMutableProperty, IReadOnlyList<string>?) Sets the properties included in this generated tsvector property, or null to make this a regular, non-generated property. Declaration public static void SetTsVectorProperties(this IMutableProperty property, IReadOnlyList<string>? properties) Parameters Type Name Description IMutableProperty property The property. IReadOnlyList<string> properties The included property names. | Edit this page View Source SetValueGenerationStrategy(IConventionProperty, NpgsqlValueGenerationStrategy?, in StoreObjectIdentifier, bool) Sets the NpgsqlValueGenerationStrategy to use for the property for a particular table. Declaration public static NpgsqlValueGenerationStrategy? SetValueGenerationStrategy(this IConventionProperty property, NpgsqlValueGenerationStrategy? value, in StoreObjectIdentifier storeObject, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. NpgsqlValueGenerationStrategy? value The strategy to use. StoreObjectIdentifier storeObject The identifier of the table containing the column. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description NpgsqlValueGenerationStrategy? The configured value. | Edit this page View Source SetValueGenerationStrategy(IConventionProperty, NpgsqlValueGenerationStrategy?, bool) Sets the NpgsqlValueGenerationStrategy to use for the property. Declaration public static NpgsqlValueGenerationStrategy? SetValueGenerationStrategy(this IConventionProperty property, NpgsqlValueGenerationStrategy? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. NpgsqlValueGenerationStrategy? value The strategy to use. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description NpgsqlValueGenerationStrategy? | Edit this page View Source SetValueGenerationStrategy(IConventionRelationalPropertyOverrides, NpgsqlValueGenerationStrategy?, bool) Sets the NpgsqlValueGenerationStrategy to use for the property for a particular table. Declaration public static NpgsqlValueGenerationStrategy? SetValueGenerationStrategy(this IConventionRelationalPropertyOverrides overrides, NpgsqlValueGenerationStrategy? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionRelationalPropertyOverrides overrides The property overrides. NpgsqlValueGenerationStrategy? value The strategy to use. bool fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description NpgsqlValueGenerationStrategy? The configured value. | Edit this page View Source SetValueGenerationStrategy(IMutableProperty, NpgsqlValueGenerationStrategy?) Sets the NpgsqlValueGenerationStrategy to use for the property. Declaration public static void SetValueGenerationStrategy(this IMutableProperty property, NpgsqlValueGenerationStrategy? value) Parameters Type Name Description IMutableProperty property The property. NpgsqlValueGenerationStrategy? value The strategy to use. | Edit this page View Source SetValueGenerationStrategy(IMutableProperty, NpgsqlValueGenerationStrategy?, in StoreObjectIdentifier) Sets the NpgsqlValueGenerationStrategy to use for the property for a particular table. Declaration public static void SetValueGenerationStrategy(this IMutableProperty property, NpgsqlValueGenerationStrategy? value, in StoreObjectIdentifier storeObject) Parameters Type Name Description IMutableProperty property The property. NpgsqlValueGenerationStrategy? value The strategy to use. StoreObjectIdentifier storeObject The identifier of the table containing the column. | Edit this page View Source SetValueGenerationStrategy(IMutableRelationalPropertyOverrides, NpgsqlValueGenerationStrategy?) Sets the NpgsqlValueGenerationStrategy to use for the property for a particular table. Declaration public static void SetValueGenerationStrategy(this IMutableRelationalPropertyOverrides overrides, NpgsqlValueGenerationStrategy? value) Parameters Type Name Description IMutableRelationalPropertyOverrides overrides The property overrides. NpgsqlValueGenerationStrategy? value The strategy to use."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlRangeDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlRangeDbFunctionsExtensions.html",
    "title": "Class NpgsqlRangeDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlRangeDbFunctionsExtensions Provides extension methods for NpgsqlRange<T> supporting PostgreSQL translation. Inheritance object NpgsqlRangeDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlRangeDbFunctionsExtensions Methods | Edit this page View Source ContainedBy<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is contained by a specified range. Declaration public static bool ContainedBy<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The specified range to locate in the range. NpgsqlRange<T> b The range in which to locate the specified range. Returns Type Description bool true if the range contains the specified range; otherwise, false . Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException ContainedBy<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range contains a specified range. Declaration public static bool Contains<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The range in which to locate the specified range. NpgsqlRange<T> b The specified range to locate in the range. Returns Type Description bool true if the range contains the specified range; otherwise, false . Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException Contains<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Contains<T>(NpgsqlRange<T>, T) Determines whether a range contains a specified value. Declaration public static bool Contains<T>(this NpgsqlRange<T> range, T value) Parameters Type Name Description NpgsqlRange<T> range The range in which to locate the value. T value The value to locate in the range. Returns Type Description bool true if the range contains the specified value; otherwise, false . Type Parameters Name Description T The type of the elements of range. Exceptions Type Condition NotSupportedException Contains<T>(NpgsqlRange<T>, T) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendLeftOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range does not extend to the left of another range. Declaration public static bool DoesNotExtendLeftOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description bool true if the first range does not extend to the left of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException DoesNotExtendLeftOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source DoesNotExtendRightOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range does not extend to the right of another range. Declaration public static bool DoesNotExtendRightOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description bool true if the first range does not extend to the right of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException DoesNotExtendRightOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Except<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the set difference, which means the elements of one range that do not appear in a second range. Declaration public static NpgsqlRange<T> Except<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description NpgsqlRange<T> The elements that appear in the first range, but not the second range. Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException Except<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Intersect<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the set intersection, which means elements that appear in each of two ranges. Declaration public static NpgsqlRange<T> Intersect<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description NpgsqlRange<T> A range containing the elements that appear in both ranges. Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException Intersect<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsAdjacentTo<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is adjacent to another range. Declaration public static bool IsAdjacentTo<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description bool true if the ranges are adjacent; otherwise, false . Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException IsAdjacentTo<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyLeftOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is strictly to the left of another range. Declaration public static bool IsStrictlyLeftOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description bool true if the first range is strictly to the left of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException IsStrictlyLeftOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source IsStrictlyRightOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is strictly to the right of another range. Declaration public static bool IsStrictlyRightOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description bool true if the first range is strictly to the right of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException IsStrictlyRightOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Merge<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the smallest range which includes both of the given ranges. Declaration public static NpgsqlRange<T> Merge<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description NpgsqlRange<T> The smallest range which includes both of the given ranges. Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException Merge<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source Overlaps<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range overlaps another range. Declaration public static bool Overlaps<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description bool true if the ranges overlap (share points in common); otherwise, false . Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException Overlaps<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query. | Edit this page View Source RangeAgg<T>(IEnumerable<NpgsqlRange<T>>) Computes the union of the non-null input ranges. Corresponds to the PostgreSQL range_agg aggregate function. Declaration public static NpgsqlRange<T>[] RangeAgg<T>(this IEnumerable<NpgsqlRange<T>> input) Parameters Type Name Description IEnumerable<NpgsqlRange<T>> input The ranges to be aggregated via union into a multirange. Returns Type Description NpgsqlRange<T>[] Type Parameters Name Description T Exceptions Type Condition NotSupportedException RangeAgg<T>(IEnumerable<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source RangeIntersectAgg<T>(IEnumerable<NpgsqlRange<T>[]>) Computes the intersection of the non-null input multiranges. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static NpgsqlRange<T>[] RangeIntersectAgg<T>(this IEnumerable<NpgsqlRange<T>[]> input) Parameters Type Name Description IEnumerable<NpgsqlRange<T>[]> input The multiranges on which to perform the intersection operation. Returns Type Description NpgsqlRange<T>[] Type Parameters Name Description T Exceptions Type Condition NotSupportedException RangeIntersectAgg<T>(IEnumerable<NpgsqlRange<T>[]>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source RangeIntersectAgg<T>(IEnumerable<NpgsqlRange<T>>) Computes the intersection of the non-null input ranges. Corresponds to the PostgreSQL range_intersect_agg aggregate function. Declaration public static NpgsqlRange<T> RangeIntersectAgg<T>(this IEnumerable<NpgsqlRange<T>> input) Parameters Type Name Description IEnumerable<NpgsqlRange<T>> input The ranges on which to perform the intersection operation. Returns Type Description NpgsqlRange<T> Type Parameters Name Description T Exceptions Type Condition NotSupportedException RangeIntersectAgg<T>(IEnumerable<NpgsqlRange<T>>) is only intended for use via SQL translation as part of an EF Core LINQ query. See Also PostgreSQL documentation for aggregate functions. | Edit this page View Source Union<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the set union, which means unique elements that appear in either of two ranges. Declaration public static NpgsqlRange<T> Union<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange<T> a The first range. NpgsqlRange<T> b The second range. Returns Type Description NpgsqlRange<T> A range containing the unique elements that appear in either range. Type Parameters Name Description T The type of the elements of a. Exceptions Type Condition NotSupportedException Union<T>(NpgsqlRange<T>, NpgsqlRange<T>) is only intended for use via SQL translation as part of an EF Core LINQ query."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTrigramsDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTrigramsDbFunctionsExtensions.html",
    "title": "Class NpgsqlTrigramsDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlTrigramsDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via Functions. Inheritance object NpgsqlTrigramsDbFunctionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlTrigramsDbFunctionsExtensions Remarks See Database functions. Methods | Edit this page View Source TrigramsAreNotStrictWordSimilar(DbFunctions, string, string) Commutator of the <<% operator. Declaration public static bool TrigramsAreNotStrictWordSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description bool Remarks The method call is translated to source %>> target. See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsAreNotWordSimilar(DbFunctions, string, string) Commutator of the <% operator. Declaration public static bool TrigramsAreNotWordSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description bool Remarks The method call is translated to source %> target. See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsAreSimilar(DbFunctions, string, string) Returns true if its arguments have a similarity that is greater than the current similarity threshold set by pg_trgm.similarity_threshold. Declaration public static bool TrigramsAreSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description bool Remarks The method call is translated to source % target. See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsAreStrictWordSimilar(DbFunctions, string, string) Returns true if its second argument has a continuous extent of an ordered trigram set that matches word boundaries, and its similarity to the trigram set of the first argument is greater than the current strict word similarity threshold set by the pg_trgm.strict_word_similarity_threshold parameter. Declaration public static bool TrigramsAreStrictWordSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description bool Remarks The method call is translated to source <<% target. See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsAreWordSimilar(DbFunctions, string, string) Returns true if the similarity between the trigram set in the first argument and a continuous extent of an ordered trigram set in the second argument is greater than the current word similarity threshold set by pg_trgm.word_similarity_threshold parameter. Declaration public static bool TrigramsAreWordSimilar(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description bool Remarks The method call is translated to source <% target. See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsShow(DbFunctions, string) Returns an array of all the trigrams in the given text. (In practice this is seldom useful except for debugging.) Declaration public static string[] TrigramsShow(this DbFunctions _, string text) Parameters Type Name Description DbFunctions _ string text Returns Type Description string[] Remarks The method call is translated to show_trgm(text). See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsSimilarity(DbFunctions, string, string) Returns a number that indicates how similar the two arguments are. The range of the result is zero (indicating that the two strings are completely dissimilar) to one (indicating that the two strings are identical). Declaration public static double TrigramsSimilarity(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description double Remarks The method call is translated to similarity(source, target). See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsSimilarityDistance(DbFunctions, string, string) Returns the \"distance\" between the arguments, that is one minus the similarity() value. Declaration public static double TrigramsSimilarityDistance(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description double Remarks The method call is translated to source <-> target. See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsStrictWordSimilarity(DbFunctions, string, string) Same as word_similarity(text, text), but forces extent boundaries to match word boundaries. Since we don't have cross-word trigrams, this function actually returns greatest similarity between first string and any continuous extent of words of the second string. Declaration public static double TrigramsStrictWordSimilarity(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description double Remarks The method call is translated to strict_word_similarity(source, target). See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsStrictWordSimilarityDistance(DbFunctions, string, string) Returns the \"distance\" between the arguments, that is one minus the strict_word_similarity() value. Declaration public static double TrigramsStrictWordSimilarityDistance(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description double Remarks The method call is translated to source <<<-> target. See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsStrictWordSimilarityDistanceInverted(DbFunctions, string, string) Commutator of the <<<-> operator. Declaration public static double TrigramsStrictWordSimilarityDistanceInverted(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description double Remarks The method call is translated to source <->>> target. See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsWordSimilarity(DbFunctions, string, string) Returns a number that indicates the greatest similarity between the set of trigrams in the first string and any continuous extent of an ordered set of trigrams in the second string. Declaration public static double TrigramsWordSimilarity(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description double Remarks The method call is translated to word_similarity(source, target). See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsWordSimilarityDistance(DbFunctions, string, string) Returns the \"distance\" between the arguments, that is one minus the word_similarity() value. Declaration public static double TrigramsWordSimilarityDistance(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description double Remarks The method call is translated to source <<-> target. See https://www.postgresql.org/docs/current/pgtrgm.html. | Edit this page View Source TrigramsWordSimilarityDistanceInverted(DbFunctions, string, string) Commutator of the <<-> operator. Declaration public static double TrigramsWordSimilarityDistanceInverted(this DbFunctions _, string source, string target) Parameters Type Name Description DbFunctions _ string source string target Returns Type Description double Remarks The method call is translated to source <->> target. See https://www.postgresql.org/docs/current/pgtrgm.html."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTsRankingNormalization.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTsRankingNormalization.html",
    "title": "Enum NpgsqlTsRankingNormalization | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsRankingNormalization Specifies whether and how a document's length should impact its rank. This is used with the ranking functions in NpgsqlFullTextSearchLinqExtensions. See http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING for more information about the behaviors that are controlled by this value. Namespace: Microsoft.EntityFrameworkCore Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax [Flags] public enum NpgsqlTsRankingNormalization Fields Name Description Default Ignores the document length. DivideBy1PlusLogLength Divides the rank by 1 + the logarithm of the document length. DivideByItselfPlusOne Divides the rank by itself + 1. DivideByLength Divides the rank by the document length. DivideByMeanHarmonicDistanceBetweenExtents Divides the rank by the mean harmonic distance between extents (this is implemented only by ts_rank_cd). DivideByUniqueWordCount Divides the rank by the number of unique words in document. DividesBy1PlusLogUniqueWordCount Divides the rank by 1 + the logarithm of the number of unique words in document."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.html",
    "title": "Namespace Microsoft.EntityFrameworkCore | Npgsql Documentation",
    "keywords": "Namespace Microsoft.EntityFrameworkCore Classes NpgsqlAggregateDbFunctionsExtensions Provides extension methods supporting aggregate function translation for PostgreSQL. NpgsqlAlterDatabaseOperationExtensions Extension methods for AlterDatabaseOperation for Npgsql-specific metadata. NpgsqlDatabaseFacadeExtensions Npgsql specific extension methods for Database. NpgsqlDatabaseModelExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDbContextOptionsBuilderExtensions Provides extension methods on DbContextOptionsBuilder and DbContextOptionsBuilder<TContext> used to configure a DbContext to context to a PostgreSQL database with Npgsql. NpgsqlDbFunctionsExtensions Provides Npgsql-specific extension methods on DbFunctions. NpgsqlEntityTypeBuilderExtensions Npgsql-specific extension methods for EntityTypeBuilder. NpgsqlEntityTypeExtensions Extension methods for IEntityType for Npgsql-specific metadata. NpgsqlFullTextSearchDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via Functions. NpgsqlFullTextSearchLinqExtensions Provides EF Core extension methods for Npgsql full-text search types. NpgsqlFuzzyStringMatchDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via Functions. NpgsqlIndexBuilderExtensions Npgsql specific extension methods for IndexBuilder. NpgsqlIndexExtensions Extension methods for IIndex for Npgsql-specific metadata. NpgsqlJsonDbFunctionsExtensions Provides methods for supporting translation to PostgreSQL JSON operators and functions. NpgsqlMigrationBuilderExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlModelBuilderExtensions Npgsql-specific extension methods for ModelBuilder. NpgsqlModelExtensions Model extension methods for Npgsql-specific metadata. NpgsqlMultirangeDbFunctionsExtensions Provides extension methods for multiranges supporting PostgreSQL translation. NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions NetTopologySuite specific extension methods for NpgsqlDbContextOptionsBuilder. NpgsqlNetTopologySuiteDbFunctionsExtensions Provides Npgsql-specific spatial extension methods on DbFunctions. NpgsqlNetworkDbFunctionsExtensions Provides extension methods supporting operator translation for PostgreSQL network types. NpgsqlNodaTimeDbContextOptionsBuilderExtensions NodaTime specific extension methods for NpgsqlDbContextOptionsBuilder. NpgsqlNodaTimeDbFunctionsExtensions Provides extension methods supporting NodaTime function translation for PostgreSQL. NpgsqlPropertyBuilderExtensions Npgsql specific extension methods for PropertyBuilder. NpgsqlPropertyExtensions Property extension methods for Npgsql-specific metadata. NpgsqlRangeDbFunctionsExtensions Provides extension methods for NpgsqlRange<T> supporting PostgreSQL translation. NpgsqlTrigramsDbFunctionsExtensions Provides CLR methods that get translated to database functions when used in LINQ to Entities queries. The methods on this class are accessed via Functions. Structs LTree Represents a PostgreSQL ltree type. This type is implicitly convertible to a .NET string. Enums NpgsqlTsRankingNormalization Specifies whether and how a document's length should impact its rank. This is used with the ranking functions in NpgsqlFullTextSearchLinqExtensions. See http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING for more information about the behaviors that are controlled by this value."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNetTopologySuiteServiceCollectionExtensions.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNetTopologySuiteServiceCollectionExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteServiceCollectionExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite extension methods for IServiceCollection. Inheritance object NpgsqlNetTopologySuiteServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteServiceCollectionExtensions Methods | Edit this page View Source AddEntityFrameworkNpgsqlNetTopologySuite(IServiceCollection) Adds the services required for NetTopologySuite support in the Npgsql provider for Entity Framework. Declaration public static IServiceCollection AddEntityFrameworkNpgsqlNetTopologySuite(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The IServiceCollection to add services to. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNodaTimeServiceCollectionExtensions.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNodaTimeServiceCollectionExtensions.html",
    "title": "Class NpgsqlNodaTimeServiceCollectionExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime extension methods for IServiceCollection. Inheritance object NpgsqlNodaTimeServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public static class NpgsqlNodaTimeServiceCollectionExtensions Methods | Edit this page View Source AddEntityFrameworkNpgsqlNodaTime(IServiceCollection) Adds the services required for NodaTime support in the Npgsql provider for Entity Framework. Declaration public static IServiceCollection AddEntityFrameworkNpgsqlNodaTime(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The IServiceCollection to add services to. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlServiceCollectionExtensions.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlServiceCollectionExtensions.html",
    "title": "Class NpgsqlServiceCollectionExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlServiceCollectionExtensions Provides extension methods to configure Entity Framework Core for Npgsql. Inheritance object NpgsqlServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlServiceCollectionExtensions Methods | Edit this page View Source AddEntityFrameworkNpgsql(IServiceCollection) Adds the services required by the Npgsql database provider for Entity Framework to an IServiceCollection. Calling this method is no longer necessary when building most applications, including those that use dependency injection in ASP.NET or elsewhere. It is only needed when building the internal service provider for use with the UseInternalServiceProvider(IServiceProvider) method. This is not recommend other than for some advanced scenarios. Declaration public static IServiceCollection AddEntityFrameworkNpgsql(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The IServiceCollection to add services to. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained. | Edit this page View Source AddNpgsql<TContext>(IServiceCollection, string?, Action<NpgsqlDbContextOptionsBuilder>?, Action<DbContextOptionsBuilder>?) Registers the given Entity Framework context as a service in the IServiceCollection and configures it to connect to a PostgreSQL database. Use this method when using dependency injection in your application, such as with ASP.NET Core. For applications that don't use dependency injection, consider creating DbContext instances directly with its constructor. The OnConfiguring(DbContextOptionsBuilder) method can then be overridden to configure the SQL Server provider and connection string. To configure the DbContextOptions<TContext> for the context, either override the OnConfiguring(DbContextOptionsBuilder) method in your derived context, or supply an optional action to configure the DbContextOptions for the context. For more information on how to use this method, see the Entity Framework Core documentation at https://aka.ms/efdocs. For more information on using dependency injection, see https://go.microsoft.com/fwlink/?LinkId=526890. Declaration public static IServiceCollection AddNpgsql<TContext>(this IServiceCollection serviceCollection, string? connectionString, Action<NpgsqlDbContextOptionsBuilder>? npgsqlOptionsAction = null, Action<DbContextOptionsBuilder>? optionsAction = null) where TContext : DbContext Parameters Type Name Description IServiceCollection serviceCollection The IServiceCollection to add services to. string connectionString The connection string of the database to connect to. Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction An optional action to allow additional SQL Server specific configuration. Action<DbContextOptionsBuilder> optionsAction An optional action to configure the DbContextOptions for the context. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained. Type Parameters Name Description TContext The type of context to be registered."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Npgsql Documentation",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes NpgsqlNetTopologySuiteServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite extension methods for IServiceCollection. NpgsqlNodaTimeServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime extension methods for IServiceCollection. NpgsqlServiceCollectionExtensions Provides extension methods to configure Entity Framework Core for Npgsql."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlAnnotationCodeGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlAnnotationCodeGenerator.html",
    "title": "Class NpgsqlAnnotationCodeGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlAnnotationCodeGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object AnnotationCodeGenerator NpgsqlAnnotationCodeGenerator Implements IAnnotationCodeGenerator Inherited Members AnnotationCodeGenerator.FilterIgnoredAnnotations(IEnumerable<IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IModel, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IEntityType, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IComplexType, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IEntityTypeMappingFragment, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IProperty, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IComplexProperty, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IKey, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IForeignKey, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(INavigation, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(ISkipNavigation, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IIndex, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(ICheckConstraint, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(ITrigger, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IRelationalPropertyOverrides, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(ISequence, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(IAnnotatable, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(IEntityType, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(IComplexType, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(IEntityTypeMappingFragment, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(IComplexProperty, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(IKey, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(IForeignKey, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(INavigation, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(ISkipNavigation, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(IIndex, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(ICheckConstraint, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(ITrigger, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(IRelationalPropertyOverrides, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(ISequence, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateFluentApiCalls(IAnnotatable, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateDataAnnotationAttributes(IEntityType, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateDataAnnotationAttributes(IProperty, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.GenerateDataAnnotationAttributes(IAnnotatable, IDictionary<string, IAnnotation>) AnnotationCodeGenerator.IsHandledByConvention(IEntityType, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(IComplexType, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(IEntityTypeMappingFragment, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(IKey, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(IComplexProperty, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(IForeignKey, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(INavigation, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(ISkipNavigation, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(ICheckConstraint, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(ITrigger, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(IRelationalPropertyOverrides, IAnnotation) AnnotationCodeGenerator.IsHandledByConvention(ISequence, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(IComplexType, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(IEntityTypeMappingFragment, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(IKey, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(IProperty, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(IComplexProperty, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(IForeignKey, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(INavigation, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(ISkipNavigation, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(ICheckConstraint, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(ITrigger, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(IRelationalPropertyOverrides, IAnnotation) AnnotationCodeGenerator.GenerateFluentApi(ISequence, IAnnotation) AnnotationCodeGenerator.GenerateDataAnnotation(IEntityType, IAnnotation) AnnotationCodeGenerator.GenerateDataAnnotation(IProperty, IAnnotation) AnnotationCodeGenerator.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlAnnotationCodeGenerator : AnnotationCodeGenerator, IAnnotationCodeGenerator Constructors | Edit this page View Source NpgsqlAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies) Parameters Type Name Description AnnotationCodeGeneratorDependencies dependencies Methods | Edit this page View Source GenerateFluentApi(IEntityType, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override MethodCallCodeFragment? GenerateFluentApi(IEntityType entityType, IAnnotation annotation) Parameters Type Name Description IEntityType entityType IAnnotation annotation Returns Type Description MethodCallCodeFragment Overrides AnnotationCodeGenerator.GenerateFluentApi(IEntityType, IAnnotation) | Edit this page View Source GenerateFluentApi(IIndex, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override MethodCallCodeFragment? GenerateFluentApi(IIndex index, IAnnotation annotation) Parameters Type Name Description IIndex index IAnnotation annotation Returns Type Description MethodCallCodeFragment Overrides AnnotationCodeGenerator.GenerateFluentApi(IIndex, IAnnotation) | Edit this page View Source GenerateFluentApi(IModel, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override MethodCallCodeFragment? GenerateFluentApi(IModel model, IAnnotation annotation) Parameters Type Name Description IModel model IAnnotation annotation Returns Type Description MethodCallCodeFragment Overrides AnnotationCodeGenerator.GenerateFluentApi(IModel, IAnnotation) | Edit this page View Source GenerateFluentApiCalls(IModel, IDictionary<string, IAnnotation>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(IModel model, IDictionary<string, IAnnotation> annotations) Parameters Type Name Description IModel model IDictionary<string, IAnnotation> annotations Returns Type Description IReadOnlyList<MethodCallCodeFragment> Overrides AnnotationCodeGenerator.GenerateFluentApiCalls(IModel, IDictionary<string, IAnnotation>) | Edit this page View Source GenerateFluentApiCalls(IProperty, IDictionary<string, IAnnotation>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(IProperty property, IDictionary<string, IAnnotation> annotations) Parameters Type Name Description IProperty property IDictionary<string, IAnnotation> annotations Returns Type Description IReadOnlyList<MethodCallCodeFragment> Overrides AnnotationCodeGenerator.GenerateFluentApiCalls(IProperty, IDictionary<string, IAnnotation>) | Edit this page View Source IsHandledByConvention(IIndex, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsHandledByConvention(IIndex index, IAnnotation annotation) Parameters Type Name Description IIndex index IAnnotation annotation Returns Type Description bool Overrides AnnotationCodeGenerator.IsHandledByConvention(IIndex, IAnnotation) | Edit this page View Source IsHandledByConvention(IModel, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsHandledByConvention(IModel model, IAnnotation annotation) Parameters Type Name Description IModel model IAnnotation annotation Returns Type Description bool Overrides AnnotationCodeGenerator.IsHandledByConvention(IModel, IAnnotation) | Edit this page View Source IsHandledByConvention(IProperty, IAnnotation) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsHandledByConvention(IProperty property, IAnnotation annotation) Parameters Type Name Description IProperty property IAnnotation annotation Returns Type Description bool Overrides AnnotationCodeGenerator.IsHandledByConvention(IProperty, IAnnotation) Implements IAnnotationCodeGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlCSharpRuntimeAnnotationCodeGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlCSharpRuntimeAnnotationCodeGenerator.html",
    "title": "Class NpgsqlCSharpRuntimeAnnotationCodeGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlCSharpRuntimeAnnotationCodeGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CSharpRuntimeAnnotationCodeGenerator RelationalCSharpRuntimeAnnotationCodeGenerator NpgsqlCSharpRuntimeAnnotationCodeGenerator Implements ICSharpRuntimeAnnotationCodeGenerator Inherited Members RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ITableBase, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IView, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ISqlQuery, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IStoreFunction, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IStoreStoredProcedure, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IColumnBase, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IViewColumn, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ISqlQueryColumn, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IFunctionColumn, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IStoreFunctionParameter, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IStoreStoredProcedureResultColumn, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IStoreStoredProcedureParameter, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IUniqueConstraint, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IForeignKeyConstraint, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ITableMappingBase, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ITableMapping, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IViewMapping, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ISqlQueryMapping, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IFunctionMapping, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IStoredProcedureMapping, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IDbFunction, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IDbFunctionParameter, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ISequence, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IComplexType, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IEntityTypeMappingFragment, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IStoredProcedure, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IStoredProcedureParameter, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IStoredProcedureResultColumn, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ICheckConstraint, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IRelationalPropertyOverrides, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IKey, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IForeignKey, CSharpRuntimeAnnotationCodeGeneratorParameters) RelationalCSharpRuntimeAnnotationCodeGenerator.RelationalDependencies CSharpRuntimeAnnotationCodeGenerator.Generate(IComplexProperty, CSharpRuntimeAnnotationCodeGeneratorParameters) CSharpRuntimeAnnotationCodeGenerator.Generate(IServiceProperty, CSharpRuntimeAnnotationCodeGeneratorParameters) CSharpRuntimeAnnotationCodeGenerator.Generate(INavigation, CSharpRuntimeAnnotationCodeGeneratorParameters) CSharpRuntimeAnnotationCodeGenerator.Generate(ISkipNavigation, CSharpRuntimeAnnotationCodeGeneratorParameters) CSharpRuntimeAnnotationCodeGenerator.Generate(ITrigger, CSharpRuntimeAnnotationCodeGeneratorParameters) CSharpRuntimeAnnotationCodeGenerator.Generate(ITypeMappingConfiguration, CSharpRuntimeAnnotationCodeGeneratorParameters) CSharpRuntimeAnnotationCodeGenerator.GenerateSimpleAnnotations(CSharpRuntimeAnnotationCodeGeneratorParameters) CSharpRuntimeAnnotationCodeGenerator.GenerateSimpleAnnotation(string, string, CSharpRuntimeAnnotationCodeGeneratorParameters) CSharpRuntimeAnnotationCodeGenerator.AddNamespace(Type, ISet<string>) CSharpRuntimeAnnotationCodeGenerator.Create(ValueConverter, CSharpRuntimeAnnotationCodeGeneratorParameters, ICSharpHelper) CSharpRuntimeAnnotationCodeGenerator.Create(ValueComparer, CSharpRuntimeAnnotationCodeGeneratorParameters, ICSharpHelper) CSharpRuntimeAnnotationCodeGenerator.CreateJsonValueReaderWriter(JsonValueReaderWriter, CSharpRuntimeAnnotationCodeGeneratorParameters, ICSharpHelper) CSharpRuntimeAnnotationCodeGenerator.CreateJsonValueReaderWriter(Type, CSharpRuntimeAnnotationCodeGeneratorParameters, ICSharpHelper) CSharpRuntimeAnnotationCodeGenerator.CreateDefaultTypeMapping(CoreTypeMapping, CSharpRuntimeAnnotationCodeGeneratorParameters) CSharpRuntimeAnnotationCodeGenerator.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCSharpRuntimeAnnotationCodeGenerator : RelationalCSharpRuntimeAnnotationCodeGenerator, ICSharpRuntimeAnnotationCodeGenerator Constructors | Edit this page View Source NpgsqlCSharpRuntimeAnnotationCodeGenerator(CSharpRuntimeAnnotationCodeGeneratorDependencies, RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCSharpRuntimeAnnotationCodeGenerator(CSharpRuntimeAnnotationCodeGeneratorDependencies dependencies, RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies relationalDependencies) Parameters Type Name Description CSharpRuntimeAnnotationCodeGeneratorDependencies dependencies RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies relationalDependencies Methods | Edit this page View Source Create(CoreTypeMapping, CSharpRuntimeAnnotationCodeGeneratorParameters, ValueComparer?, ValueComparer?, ValueComparer?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool Create(CoreTypeMapping typeMapping, CSharpRuntimeAnnotationCodeGeneratorParameters parameters, ValueComparer? valueComparer = null, ValueComparer? keyValueComparer = null, ValueComparer? providerValueComparer = null) Parameters Type Name Description CoreTypeMapping typeMapping CSharpRuntimeAnnotationCodeGeneratorParameters parameters ValueComparer valueComparer ValueComparer keyValueComparer ValueComparer providerValueComparer Returns Type Description bool Overrides RelationalCSharpRuntimeAnnotationCodeGenerator.Create(CoreTypeMapping, CSharpRuntimeAnnotationCodeGeneratorParameters, ValueComparer, ValueComparer, ValueComparer) | Edit this page View Source Generate(IColumn, CSharpRuntimeAnnotationCodeGeneratorParameters) Generates code to create the given annotations. Declaration public override void Generate(IColumn column, CSharpRuntimeAnnotationCodeGeneratorParameters parameters) Parameters Type Name Description IColumn column The column to which the annotations are applied. CSharpRuntimeAnnotationCodeGeneratorParameters parameters Additional parameters used during code generation. Overrides RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IColumn, CSharpRuntimeAnnotationCodeGeneratorParameters) | Edit this page View Source Generate(IEntityType, CSharpRuntimeAnnotationCodeGeneratorParameters) Generates code to create the given annotations. Declaration public override void Generate(IEntityType entityType, CSharpRuntimeAnnotationCodeGeneratorParameters parameters) Parameters Type Name Description IEntityType entityType The entity type to which the annotations are applied. CSharpRuntimeAnnotationCodeGeneratorParameters parameters Additional parameters used during code generation. Overrides RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IEntityType, CSharpRuntimeAnnotationCodeGeneratorParameters) | Edit this page View Source Generate(IIndex, CSharpRuntimeAnnotationCodeGeneratorParameters) Generates code to create the given annotations. Declaration public override void Generate(IIndex index, CSharpRuntimeAnnotationCodeGeneratorParameters parameters) Parameters Type Name Description IIndex index The index to which the annotations are applied. CSharpRuntimeAnnotationCodeGeneratorParameters parameters Additional parameters used during code generation. Overrides RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IIndex, CSharpRuntimeAnnotationCodeGeneratorParameters) | Edit this page View Source Generate(IModel, CSharpRuntimeAnnotationCodeGeneratorParameters) Generates code to create the given annotations. Declaration public override void Generate(IModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters) Parameters Type Name Description IModel model The model to which the annotations are applied. CSharpRuntimeAnnotationCodeGeneratorParameters parameters Additional parameters used during code generation. Overrides RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IModel, CSharpRuntimeAnnotationCodeGeneratorParameters) | Edit this page View Source Generate(IProperty, CSharpRuntimeAnnotationCodeGeneratorParameters) Generates code to create the given annotations. Declaration public override void Generate(IProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters) Parameters Type Name Description IProperty property The property to which the annotations are applied. CSharpRuntimeAnnotationCodeGeneratorParameters parameters Additional parameters used during code generation. Overrides RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IProperty, CSharpRuntimeAnnotationCodeGeneratorParameters) | Edit this page View Source Generate(IRelationalModel, CSharpRuntimeAnnotationCodeGeneratorParameters) Generates code to create the given annotations. Declaration public override void Generate(IRelationalModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters) Parameters Type Name Description IRelationalModel model The relational model to which the annotations are applied. CSharpRuntimeAnnotationCodeGeneratorParameters parameters Additional parameters used during code generation. Overrides RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(IRelationalModel, CSharpRuntimeAnnotationCodeGeneratorParameters) | Edit this page View Source Generate(ITable, CSharpRuntimeAnnotationCodeGeneratorParameters) Generates code to create the given annotations. Declaration public override void Generate(ITable table, CSharpRuntimeAnnotationCodeGeneratorParameters parameters) Parameters Type Name Description ITable table The table to which the annotations are applied. CSharpRuntimeAnnotationCodeGeneratorParameters parameters Additional parameters used during code generation. Overrides RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ITable, CSharpRuntimeAnnotationCodeGeneratorParameters) | Edit this page View Source Generate(ITableIndex, CSharpRuntimeAnnotationCodeGeneratorParameters) Generates code to create the given annotations. Declaration public override void Generate(ITableIndex index, CSharpRuntimeAnnotationCodeGeneratorParameters parameters) Parameters Type Name Description ITableIndex index The unique constraint to which the annotations are applied. CSharpRuntimeAnnotationCodeGeneratorParameters parameters Additional parameters used during code generation. Overrides RelationalCSharpRuntimeAnnotationCodeGenerator.Generate(ITableIndex, CSharpRuntimeAnnotationCodeGeneratorParameters) Implements ICSharpRuntimeAnnotationCodeGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlDesignTimeServices.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlDesignTimeServices.html",
    "title": "Class NpgsqlDesignTimeServices | Npgsql Documentation",
    "keywords": "Class NpgsqlDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlDesignTimeServices Implements IDesignTimeServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDesignTimeServices : IDesignTimeServices Methods | Edit this page View Source ConfigureDesignTimeServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection Implements IDesignTimeServices"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesignTimeServices.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesignTimeServices.html",
    "title": "Class NpgsqlNetTopologySuiteDesignTimeServices | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNetTopologySuiteDesignTimeServices Implements IDesignTimeServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteDesignTimeServices : IDesignTimeServices Methods | Edit this page View Source ConfigureDesignTimeServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection Implements IDesignTimeServices"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNodaTimeDesignTimeServices.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNodaTimeDesignTimeServices.html",
    "title": "Class NpgsqlNodaTimeDesignTimeServices | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNodaTimeDesignTimeServices Implements IDesignTimeServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeDesignTimeServices : IDesignTimeServices Methods | Edit this page View Source ConfigureDesignTimeServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection Implements IDesignTimeServices"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Classes NpgsqlAnnotationCodeGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlCSharpRuntimeAnnotationCodeGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeDesignTimeServices This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.NpgsqlLoggingDefinitions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.NpgsqlLoggingDefinitions.html",
    "title": "Class NpgsqlLoggingDefinitions | Npgsql Documentation",
    "keywords": "Class NpgsqlLoggingDefinitions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object LoggingDefinitions RelationalLoggingDefinitions NpgsqlLoggingDefinitions Inherited Members RelationalLoggingDefinitions.LogTransactionError RelationalLoggingDefinitions.LogBoolWithDefaultWarning RelationalLoggingDefinitions.LogConnectionCreating RelationalLoggingDefinitions.LogConnectionCreated RelationalLoggingDefinitions.LogConnectionDisposing RelationalLoggingDefinitions.LogConnectionDisposed RelationalLoggingDefinitions.LogOpeningConnection RelationalLoggingDefinitions.LogOpenedConnection RelationalLoggingDefinitions.LogClosingConnection RelationalLoggingDefinitions.LogClosingDataReader RelationalLoggingDefinitions.LogClosedConnection RelationalLoggingDefinitions.LogConnectionError RelationalLoggingDefinitions.LogBeginningTransaction RelationalLoggingDefinitions.LogBeganTransaction RelationalLoggingDefinitions.LogUsingTransaction RelationalLoggingDefinitions.LogCommittingTransaction RelationalLoggingDefinitions.LogRollingBackTransaction RelationalLoggingDefinitions.LogCommittedTransaction RelationalLoggingDefinitions.LogRolledBackTransaction RelationalLoggingDefinitions.LogCreatingTransactionSavepoint RelationalLoggingDefinitions.LogRollingBackToTransactionSavepoint RelationalLoggingDefinitions.LogCreatedTransactionSavepoint RelationalLoggingDefinitions.LogRolledBackToTransactionSavepoint RelationalLoggingDefinitions.LogReleasingTransactionSavepoint RelationalLoggingDefinitions.LogReleasedTransactionSavepoint RelationalLoggingDefinitions.LogDisposingTransaction RelationalLoggingDefinitions.LogDisposingDataReader RelationalLoggingDefinitions.LogAmbientTransaction RelationalLoggingDefinitions.LogPossibleUnintendedUseOfEquals RelationalLoggingDefinitions.LogStoredProcedureConcurrencyTokenNotMapped RelationalLoggingDefinitions.LogGeneratingDown RelationalLoggingDefinitions.LogGeneratingUp RelationalLoggingDefinitions.LogApplyingMigration RelationalLoggingDefinitions.LogRevertingMigration RelationalLoggingDefinitions.LogMigrating RelationalLoggingDefinitions.LogNoMigrationsApplied RelationalLoggingDefinitions.LogNoMigrationsFound RelationalLoggingDefinitions.LogKeyHasDefaultValue RelationalLoggingDefinitions.LogCommandCanceled RelationalLoggingDefinitions.LogCommandCreating RelationalLoggingDefinitions.LogCommandCreated RelationalLoggingDefinitions.LogCommandInitialized RelationalLoggingDefinitions.LogExecutingCommand RelationalLoggingDefinitions.LogExecutedCommand RelationalLoggingDefinitions.LogCommandFailed RelationalLoggingDefinitions.LogConnectionErrorAsDebug RelationalLoggingDefinitions.LogAmbientTransactionEnlisted RelationalLoggingDefinitions.LogExplicitTransactionEnlisted RelationalLoggingDefinitions.LogBatchSmallerThanMinBatchSize RelationalLoggingDefinitions.LogBatchReadyForExecution RelationalLoggingDefinitions.LogMigrationAttributeMissingWarning RelationalLoggingDefinitions.LogNamedIndexAllPropertiesNotToMappedToAnyTable RelationalLoggingDefinitions.LogUnnamedIndexAllPropertiesNotToMappedToAnyTable RelationalLoggingDefinitions.LogNamedIndexPropertiesBothMappedAndNotMappedToTable RelationalLoggingDefinitions.LogUnnamedIndexPropertiesBothMappedAndNotMappedToTable RelationalLoggingDefinitions.LogNamedIndexPropertiesMappedToNonOverlappingTables RelationalLoggingDefinitions.LogUnnamedIndexPropertiesMappedToNonOverlappingTables RelationalLoggingDefinitions.LogKeyPropertiesNotMappedToTable RelationalLoggingDefinitions.LogForeignKeyPropertiesMappedToUnrelatedTables RelationalLoggingDefinitions.LogForeignKeyTpcPrincipal RelationalLoggingDefinitions.LogTpcStoreGeneratedIdentity RelationalLoggingDefinitions.LogMultipleCollectionIncludeWarning RelationalLoggingDefinitions.LogBatchExecutorFailedToRollbackToSavepoint RelationalLoggingDefinitions.LogBatchExecutorFailedToReleaseSavepoint RelationalLoggingDefinitions.LogOptionalDependentWithoutIdentifyingProperty RelationalLoggingDefinitions.LogOptionalDependentWithAllNullProperties RelationalLoggingDefinitions.LogOptionalDependentWithAllNullPropertiesSensitive RelationalLoggingDefinitions.LogDuplicateColumnOrders RelationalLoggingDefinitions.LogColumnOrderIgnoredWarning RelationalLoggingDefinitions.LogExceptionDuringNonQueryOperation RelationalLoggingDefinitions.LogExceptionDuringExecuteDelete RelationalLoggingDefinitions.LogExceptionDuringExecuteUpdate RelationalLoggingDefinitions.LogUnexpectedTrailingResultSetWhenSaving RelationalLoggingDefinitions.LogTriggerOnNonRootTphEntity LoggingDefinitions.LogServiceProviderCreated LoggingDefinitions.LogManyServiceProvidersCreated LoggingDefinitions.LogMappedEntityTypeIgnored LoggingDefinitions.LogMappedNavigationIgnored LoggingDefinitions.LogMappedPropertyIgnored LoggingDefinitions.LogMappedComplexPropertyIgnored LoggingDefinitions.LogServiceProviderDebugInfo LoggingDefinitions.LogContextInitialized LoggingDefinitions.LogOldModelVersion LoggingDefinitions.LogExceptionDuringQueryIteration LoggingDefinitions.LogExceptionDuringSaveChanges LoggingDefinitions.LogDetectChangesStarting LoggingDefinitions.LogDetectChangesCompleted LoggingDefinitions.LogPropertyChangeDetected LoggingDefinitions.LogPropertyChangeDetectedSensitive LoggingDefinitions.LogForeignKeyChangeDetected LoggingDefinitions.LogForeignKeyChangeDetectedSensitive LoggingDefinitions.LogCollectionChangeDetected LoggingDefinitions.LogCollectionChangeDetectedSensitive LoggingDefinitions.LogSaveChangesCanceled LoggingDefinitions.LogSkipCollectionChangeDetected LoggingDefinitions.LogSkipCollectionChangeDetectedSensitive LoggingDefinitions.LogStringEnumValueInJson LoggingDefinitions.LogReferenceChangeDetected LoggingDefinitions.LogReferenceChangeDetectedSensitive LoggingDefinitions.LogCascadeDelete LoggingDefinitions.LogCascadeDeleteSensitive LoggingDefinitions.LogCascadeDeleteOrphan LoggingDefinitions.LogCascadeDeleteOrphanSensitive LoggingDefinitions.LogStartedTracking LoggingDefinitions.LogStartedTrackingSensitive LoggingDefinitions.LogStateChanged LoggingDefinitions.LogStateChangedSensitive LoggingDefinitions.LogValueGenerated LoggingDefinitions.LogValueGeneratedSensitive LoggingDefinitions.LogTempValueGenerated LoggingDefinitions.LogTempValueGeneratedSensitive LoggingDefinitions.LogSaveChangesStarting LoggingDefinitions.LogSaveChangesCompleted LoggingDefinitions.LogContextDisposed LoggingDefinitions.LogIncludingNavigation LoggingDefinitions.LogQueryCanceled LoggingDefinitions.LogQueryExecutionPlanned LoggingDefinitions.LogSensitiveDataLoggingEnabled LoggingDefinitions.LogRowLimitingOperationWithoutOrderBy LoggingDefinitions.LogPossibleUnintendedCollectionNavigationNullComparison LoggingDefinitions.LogPossibleUnintendedReferenceComparison LoggingDefinitions.LogInvalidIncludePath LoggingDefinitions.LogDuplicateDependentEntityTypeInstance LoggingDefinitions.LogShadowPropertyCreated LoggingDefinitions.LogShadowForeignKeyPropertyCreated LoggingDefinitions.LogCollectionWithoutComparer LoggingDefinitions.LogExecutionStrategyRetrying LoggingDefinitions.LogNavigationLazyLoading LoggingDefinitions.LogLazyLoadOnDisposedContext LoggingDefinitions.LogDetachedLazyLoading LoggingDefinitions.LogRedundantAddServicesCall LoggingDefinitions.LogRedundantIndexRemoved LoggingDefinitions.LogIncompatibleMatchingForeignKeyProperties LoggingDefinitions.LogAmbiguousEndRequired LoggingDefinitions.LogForeignKeyAttributesOnBothNavigations LoggingDefinitions.LogRequiredAttributeOnCollection LoggingDefinitions.LogRequiredAttributeOnSkipNavigation LoggingDefinitions.LogForeignKeyAttributesOnBothProperties LoggingDefinitions.LogConflictingForeignKeyAttributesOnNavigationAndProperty LoggingDefinitions.LogMultipleInversePropertiesSameTarget LoggingDefinitions.LogConflictingShadowForeignKeys LoggingDefinitions.LogMultipleNavigationProperties LoggingDefinitions.LogMultiplePrimaryKeyCandidates LoggingDefinitions.LogNonOwnershipInverseNavigation LoggingDefinitions.LogFirstWithoutOrderByAndFilter LoggingDefinitions.LogDistinctAfterOrderByWithoutRowLimitingOperatorWarning LoggingDefinitions.LogNonDefiningInverseNavigation LoggingDefinitions.LogOptimisticConcurrencyException LoggingDefinitions.LogRedundantForeignKey LoggingDefinitions.LogConflictingKeylessAndKeyAttributes LoggingDefinitions.LogPossibleIncorrectRequiredNavigationWithQueryFilterInteraction LoggingDefinitions.LogNavigationBaseIncluded LoggingDefinitions.LogNavigationBaseIncludeIgnored LoggingDefinitions.LogQueryCompilationStarting object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLoggingDefinitions : RelationalLoggingDefinitions Fields | Edit this page View Source LogEnumColumnSkipped This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogEnumColumnSkipped Field Value Type Description EventDefinitionBase | Edit this page View Source LogExpressionIndexSkipped This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogExpressionIndexSkipped Field Value Type Description EventDefinitionBase | Edit this page View Source LogFoundCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundCollation Field Value Type Description EventDefinitionBase | Edit this page View Source LogFoundColumn This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundColumn Field Value Type Description EventDefinitionBase | Edit this page View Source LogFoundDefaultSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundDefaultSchema Field Value Type Description EventDefinitionBase | Edit this page View Source LogFoundForeignKey This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundForeignKey Field Value Type Description EventDefinitionBase | Edit this page View Source LogFoundIndex This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundIndex Field Value Type Description EventDefinitionBase | Edit this page View Source LogFoundPrimaryKey This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundPrimaryKey Field Value Type Description EventDefinitionBase | Edit this page View Source LogFoundSequence This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundSequence Field Value Type Description EventDefinitionBase | Edit this page View Source LogFoundTable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundTable Field Value Type Description EventDefinitionBase | Edit this page View Source LogFoundUniqueConstraint This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogFoundUniqueConstraint Field Value Type Description EventDefinitionBase | Edit this page View Source LogMissingSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogMissingSchema Field Value Type Description EventDefinitionBase | Edit this page View Source LogMissingTable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogMissingTable Field Value Type Description EventDefinitionBase | Edit this page View Source LogPrincipalColumnNotFound This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogPrincipalColumnNotFound Field Value Type Description EventDefinitionBase | Edit this page View Source LogPrincipalTableNotInSelectionSet This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogPrincipalTableNotInSelectionSet Field Value Type Description EventDefinitionBase | Edit this page View Source LogUnsupportedColumnConstraintSkipped This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogUnsupportedColumnConstraintSkipped Field Value Type Description EventDefinitionBase | Edit this page View Source LogUnsupportedColumnIndexSkipped This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public EventDefinitionBase? LogUnsupportedColumnIndexSkipped Field Value Type Description EventDefinitionBase"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal Classes NpgsqlLoggingDefinitions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlNetTopologySuiteOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlNetTopologySuiteOptions.html",
    "title": "Interface INpgsqlNetTopologySuiteOptions | Npgsql Documentation",
    "keywords": "Interface INpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the IServiceProvider singleton level. Inherited Members ISingletonOptions.Initialize(IDbContextOptions) ISingletonOptions.Validate(IDbContextOptions) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public interface INpgsqlNetTopologySuiteOptions : ISingletonOptions Properties | Edit this page View Source IsGeographyDefault True if geography is to be used by default instead of geometry Declaration bool IsGeographyDefault { get; } Property Value Type Description bool"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlSingletonOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlSingletonOptions.html",
    "title": "Interface INpgsqlSingletonOptions | Npgsql Documentation",
    "keywords": "Interface INpgsqlSingletonOptions Represents options for Npgsql that can only be set at the IServiceProvider singleton level. Inherited Members ISingletonOptions.Initialize(IDbContextOptions) ISingletonOptions.Validate(IDbContextOptions) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlSingletonOptions : ISingletonOptions Properties | Edit this page View Source ApplicationServiceProvider The root service provider for the application, if available. />. Declaration IServiceProvider? ApplicationServiceProvider { get; } Property Value Type Description IServiceProvider | Edit this page View Source DataSource The data source being used, or null if a connection string or connection was provided directly. Declaration DbDataSource? DataSource { get; } Property Value Type Description DbDataSource | Edit this page View Source IsPostgresVersionSet Whether the user has explicitly set the backend version to target. Declaration bool IsPostgresVersionSet { get; } Property Value Type Description bool | Edit this page View Source PostgresVersion The backend version to target. Declaration Version PostgresVersion { get; } Property Value Type Description Version | Edit this page View Source ReverseNullOrderingEnabled Whether reverse null ordering is enabled. Declaration bool ReverseNullOrderingEnabled { get; } Property Value Type Description bool | Edit this page View Source UseRedshift Whether to target Redshift. Declaration bool UseRedshift { get; } Property Value Type Description bool | Edit this page View Source UserRangeDefinitions The collection of range mappings. Declaration IReadOnlyList<UserRangeDefinition> UserRangeDefinitions { get; } Property Value Type Description IReadOnlyList<UserRangeDefinition>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlModelValidator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlModelValidator.html",
    "title": "Class NpgsqlModelValidator | Npgsql Documentation",
    "keywords": "Class NpgsqlModelValidator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ModelValidator RelationalModelValidator NpgsqlModelValidator Implements IModelValidator Inherited Members RelationalModelValidator.ValidateSqlQueries(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateDbFunctions(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateBoolsWithDefaults(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateDefaultValuesOnKeys(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateNoMutableKeys(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateSharedTableCompatibility(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateSharedTableCompatibility(IReadOnlyList<IEntityType>, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateSharedViewCompatibility(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateSharedViewCompatibility(IReadOnlyList<IEntityType>, string, string, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateSharedColumnsCompatibility(IReadOnlyList<IEntityType>, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.GetDefaultColumnValue(IProperty, in StoreObjectIdentifier) RelationalModelValidator.ValidateSharedForeignKeysCompatibility(IReadOnlyList<IEntityType>, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateCompatible(IForeignKey, IForeignKey, string, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateSharedIndexesCompatibility(IReadOnlyList<IEntityType>, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateCompatible(IIndex, IIndex, string, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateSharedKeysCompatibility(IReadOnlyList<IEntityType>, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateCompatible(IKey, IKey, string, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateSharedCheckConstraintCompatibility(IReadOnlyList<IEntityType>, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateCompatible(ICheckConstraint, ICheckConstraint, string, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateSharedTriggerCompatibility(IReadOnlyList<IEntityType>, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateCompatible(ITrigger, ITrigger, string, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateInheritanceMapping(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateMappingStrategy(IEntityType, string) RelationalModelValidator.IsRedundant(IForeignKey) RelationalModelValidator.ValidateMappingFragments(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidatePropertyOverrides(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateIndexProperties(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateData(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateTriggers(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateJsonEntities(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) RelationalModelValidator.ValidateJsonEntityRoot(in StoreObjectIdentifier, IEntityType) RelationalModelValidator.ValidateJsonEntityNavigations(in StoreObjectIdentifier, IEntityType) RelationalModelValidator.ValidateJsonEntityKey(in StoreObjectIdentifier, IEntityType) RelationalModelValidator.ValidateJsonEntityProperties(in StoreObjectIdentifier, IEntityType) RelationalModelValidator.ThrowPropertyNotMappedException(string, IConventionTypeBase, IConventionProperty) RelationalModelValidator.RelationalDependencies ModelValidator.ValidateRelationships(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidatePropertyMapping(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.IsOwned(Type, IConventionModel) ModelValidator.ValidateIgnoredMembers(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateNoShadowKeys(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateNoCycles(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateNonNullPrimaryKeys(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateClrInheritance(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateDiscriminatorValues(IEntityType) ModelValidator.ValidateChangeTrackingStrategy(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateOwnership(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateForeignKeys(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateFieldMapping(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateTypeMappings(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidatePrimitiveCollections(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.ValidateQueryFilters(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.LogShadowProperties(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) ModelValidator.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModelValidator : RelationalModelValidator, IModelValidator Constructors | Edit this page View Source NpgsqlModelValidator(ModelValidatorDependencies, RelationalModelValidatorDependencies, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description ModelValidatorDependencies dependencies RelationalModelValidatorDependencies relationalDependencies INpgsqlSingletonOptions npgsqlSingletonOptions Methods | Edit this page View Source Validate(IModel, IDiagnosticsLogger<Validation>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void Validate(IModel model, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IModel model IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger Overrides RelationalModelValidator.Validate(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) | Edit this page View Source ValidateCompatible(IProperty, IProperty, string, in StoreObjectIdentifier, IDiagnosticsLogger<Validation>) Validates the compatibility of two properties mapped to the same column. Declaration protected override void ValidateCompatible(IProperty property, IProperty duplicateProperty, string columnName, in StoreObjectIdentifier storeObject, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IProperty property A property. IProperty duplicateProperty Another property. string columnName The column name. StoreObjectIdentifier storeObject The identifier of the store object. IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger The logger to use. Overrides RelationalModelValidator.ValidateCompatible(IProperty, IProperty, string, in StoreObjectIdentifier, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) | Edit this page View Source ValidateIdentityVersionCompatibility(IModel) Validates that identity columns are used only with PostgreSQL 10.0 or later. Declaration protected virtual void ValidateIdentityVersionCompatibility(IModel model) Parameters Type Name Description IModel model The model to validate. | Edit this page View Source ValidateIndexIncludeProperties(IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual void ValidateIndexIncludeProperties(IModel model) Parameters Type Name Description IModel model | Edit this page View Source ValidateStoredProcedures(IModel, IDiagnosticsLogger<Validation>) Validates the mapping/configuration of stored procedures in the model. Declaration protected override void ValidateStoredProcedures(IModel model, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IModel model The model to validate. IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger The logger to use. Overrides RelationalModelValidator.ValidateStoredProcedures(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) | Edit this page View Source ValidateValueGeneration(IEntityType, IKey, IDiagnosticsLogger<Validation>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ValidateValueGeneration(IEntityType entityType, IKey key, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IEntityType entityType IKey key IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger Overrides RelationalModelValidator.ValidateValueGeneration(IEntityType, IKey, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) Implements IModelValidator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNetTopologySuiteOptionsExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNetTopologySuiteOptionsExtension.html",
    "title": "Class NpgsqlNetTopologySuiteOptionsExtension | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteOptionsExtension This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNetTopologySuiteOptionsExtension Implements IDbContextOptionsExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteOptionsExtension : IDbContextOptionsExtension Constructors | Edit this page View Source NpgsqlNetTopologySuiteOptionsExtension() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteOptionsExtension() | Edit this page View Source NpgsqlNetTopologySuiteOptionsExtension(NpgsqlNetTopologySuiteOptionsExtension) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlNetTopologySuiteOptionsExtension(NpgsqlNetTopologySuiteOptionsExtension copyFrom) Parameters Type Name Description NpgsqlNetTopologySuiteOptionsExtension copyFrom Properties | Edit this page View Source Info This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual DbContextOptionsExtensionInfo Info { get; } Property Value Type Description DbContextOptionsExtensionInfo | Edit this page View Source IsGeographyDefault This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool IsGeographyDefault { get; } Property Value Type Description bool Methods | Edit this page View Source ApplyServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ApplyServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services | Edit this page View Source Clone() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual NpgsqlNetTopologySuiteOptionsExtension Clone() Returns Type Description NpgsqlNetTopologySuiteOptionsExtension | Edit this page View Source Validate(IDbContextOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Edit this page View Source WithGeographyDefault(bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlNetTopologySuiteOptionsExtension WithGeographyDefault(bool isGeographyDefault = true) Parameters Type Name Description bool isGeographyDefault Returns Type Description NpgsqlNetTopologySuiteOptionsExtension Implements IDbContextOptionsExtension"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNodaTimeOptionsExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNodaTimeOptionsExtension.html",
    "title": "Class NpgsqlNodaTimeOptionsExtension | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeOptionsExtension This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNodaTimeOptionsExtension Implements IDbContextOptionsExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeOptionsExtension : IDbContextOptionsExtension Properties | Edit this page View Source Info This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual DbContextOptionsExtensionInfo Info { get; } Property Value Type Description DbContextOptionsExtensionInfo Methods | Edit this page View Source ApplyServices(IServiceCollection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ApplyServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services | Edit this page View Source Validate(IDbContextOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options Implements IDbContextOptionsExtension"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlOptionsExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlOptionsExtension.html",
    "title": "Class NpgsqlOptionsExtension | Npgsql Documentation",
    "keywords": "Class NpgsqlOptionsExtension Represents options managed by the Npgsql. Inheritance object RelationalOptionsExtension NpgsqlOptionsExtension Implements IDbContextOptionsExtension Inherited Members RelationalOptionsExtension.WithConnection(DbConnection, bool) RelationalOptionsExtension.WithCommandTimeout(int?) RelationalOptionsExtension.WithMaxBatchSize(int?) RelationalOptionsExtension.WithMinBatchSize(int?) RelationalOptionsExtension.WithUseRelationalNulls(bool) RelationalOptionsExtension.WithUseQuerySplittingBehavior(QuerySplittingBehavior) RelationalOptionsExtension.WithMigrationsAssembly(string) RelationalOptionsExtension.WithMigrationsHistoryTableName(string) RelationalOptionsExtension.WithMigrationsHistoryTableSchema(string) RelationalOptionsExtension.WithExecutionStrategyFactory(Func<ExecutionStrategyDependencies, IExecutionStrategy>) RelationalOptionsExtension.Extract(IDbContextOptions) RelationalOptionsExtension.WithDefaultWarningConfiguration(CoreOptionsExtension) RelationalOptionsExtension.ConnectionString RelationalOptionsExtension.Connection RelationalOptionsExtension.IsConnectionOwned RelationalOptionsExtension.CommandTimeout RelationalOptionsExtension.MaxBatchSize RelationalOptionsExtension.UseRelationalNulls RelationalOptionsExtension.QuerySplittingBehavior RelationalOptionsExtension.MigrationsAssembly RelationalOptionsExtension.MigrationsHistoryTableName RelationalOptionsExtension.MigrationsHistoryTableSchema RelationalOptionsExtension.ExecutionStrategyFactory object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlOptionsExtension : RelationalOptionsExtension, IDbContextOptionsExtension Constructors | Edit this page View Source NpgsqlOptionsExtension() Initializes an instance of NpgsqlOptionsExtension with the default settings. Declaration public NpgsqlOptionsExtension() | Edit this page View Source NpgsqlOptionsExtension(NpgsqlOptionsExtension) Initializes an instance of NpgsqlOptionsExtension by copying the specified instance. Declaration public NpgsqlOptionsExtension(NpgsqlOptionsExtension copyFrom) Parameters Type Name Description NpgsqlOptionsExtension copyFrom The instance to copy. Fields | Edit this page View Source DefaultPostgresVersion This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static readonly Version DefaultPostgresVersion Field Value Type Description Version Properties | Edit this page View Source AdminDatabase The name of the database for administrative operations. Declaration public virtual string? AdminDatabase { get; } Property Value Type Description string | Edit this page View Source DataSource The DbDataSource, or null if a connection string or DbConnection was used instead of a DbDataSource. Declaration public virtual DbDataSource? DataSource { get; } Property Value Type Description DbDataSource | Edit this page View Source Info Information/metadata about the extension. Declaration public override DbContextOptionsExtensionInfo Info { get; } Property Value Type Description DbContextOptionsExtensionInfo Overrides RelationalOptionsExtension.Info | Edit this page View Source IsPostgresVersionSet The backend version to target, but returns null unless the user explicitly specified a version. Declaration public virtual bool IsPostgresVersionSet { get; } Property Value Type Description bool | Edit this page View Source MinBatchSize This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override int? MinBatchSize { get; } Property Value Type Description int? Overrides RelationalOptionsExtension.MinBatchSize | Edit this page View Source PostgresVersion The backend version to target. Declaration public virtual Version PostgresVersion { get; } Property Value Type Description Version | Edit this page View Source ProvideClientCertificatesCallback The specified ProvideClientCertificatesCallback. Declaration public virtual ProvideClientCertificatesCallback? ProvideClientCertificatesCallback { get; } Property Value Type Description ProvideClientCertificatesCallback | Edit this page View Source ProvidePasswordCallback The specified ProvidePasswordCallback. Declaration public virtual ProvidePasswordCallback? ProvidePasswordCallback { get; } Property Value Type Description ProvidePasswordCallback | Edit this page View Source RemoteCertificateValidationCallback The specified RemoteCertificateValidationCallback. Declaration public virtual RemoteCertificateValidationCallback? RemoteCertificateValidationCallback { get; } Property Value Type Description RemoteCertificateValidationCallback | Edit this page View Source ReverseNullOrdering True if reverse null ordering is enabled; otherwise, false. Declaration public virtual bool ReverseNullOrdering { get; } Property Value Type Description bool | Edit this page View Source UseRedshift Whether to target Redshift. Declaration public virtual bool UseRedshift { get; } Property Value Type Description bool | Edit this page View Source UserRangeDefinitions The list of range mappings specified by the user. Declaration public virtual IReadOnlyList<UserRangeDefinition> UserRangeDefinitions { get; } Property Value Type Description IReadOnlyList<UserRangeDefinition> Methods | Edit this page View Source ApplyServices(IServiceCollection) Adds the services required to make the selected options work. This is used when there is no external IServiceProvider and EF is maintaining its own service provider internally. This allows database providers (and other extensions) to register their required services when EF is creating an service provider. Declaration public override void ApplyServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services The collection to add services to. Overrides RelationalOptionsExtension.ApplyServices(IServiceCollection) | Edit this page View Source Clone() Override this method in a derived class to ensure that any clone created is also of that class. Declaration protected override RelationalOptionsExtension Clone() Returns Type Description RelationalOptionsExtension A clone of this instance, which can be modified before being returned as immutable. Overrides RelationalOptionsExtension.Clone() | Edit this page View Source Validate(IDbContextOptions) Gives the extension a chance to validate that all options in the extension are valid. Most extensions do not have invalid combinations and so this will be a no-op. If options are invalid, then an exception should be thrown. Declaration public override void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options The options being validated. Overrides RelationalOptionsExtension.Validate(IDbContextOptions) | Edit this page View Source WithAdminDatabase(string?) Returns a copy of the current instance configured to use the specified administrative database. Declaration public virtual NpgsqlOptionsExtension WithAdminDatabase(string? adminDatabase) Parameters Type Name Description string adminDatabase The name of the database for administrative operations. Returns Type Description NpgsqlOptionsExtension | Edit this page View Source WithConnection(DbConnection?) Creates a new instance with all options the same as for this instance, but with the given option changed. It is unusual to call this method directly. Instead use DbContextOptionsBuilder. Declaration public override RelationalOptionsExtension WithConnection(DbConnection? connection) Parameters Type Name Description DbConnection connection The option to change. Returns Type Description RelationalOptionsExtension A new instance with the option changed. Overrides RelationalOptionsExtension.WithConnection(DbConnection) | Edit this page View Source WithConnectionString(string?) Creates a new instance with all options the same as for this instance, but with the given option changed. It is unusual to call this method directly. Instead use DbContextOptionsBuilder. Declaration public override RelationalOptionsExtension WithConnectionString(string? connectionString) Parameters Type Name Description string connectionString The option to change. Returns Type Description RelationalOptionsExtension A new instance with the option changed. Overrides RelationalOptionsExtension.WithConnectionString(string) | Edit this page View Source WithDataSource(DbDataSource?) Creates a new instance with all options the same as for this instance, but with the given option changed. It is unusual to call this method directly. Instead use DbContextOptionsBuilder. Declaration public virtual RelationalOptionsExtension WithDataSource(DbDataSource? dataSource) Parameters Type Name Description DbDataSource dataSource The option to change. Returns Type Description RelationalOptionsExtension A new instance with the option changed. | Edit this page View Source WithPostgresVersion(Version?) Returns a copy of the current instance with the specified PostgreSQL version. Declaration public virtual NpgsqlOptionsExtension WithPostgresVersion(Version? postgresVersion) Parameters Type Name Description Version postgresVersion The backend version to target. Returns Type Description NpgsqlOptionsExtension A copy of the current instance with the specified PostgreSQL version. | Edit this page View Source WithProvideClientCertificatesCallback(ProvideClientCertificatesCallback?) Returns a copy of the current instance with the specified ProvideClientCertificatesCallback. Declaration public virtual NpgsqlOptionsExtension WithProvideClientCertificatesCallback(ProvideClientCertificatesCallback? callback) Parameters Type Name Description ProvideClientCertificatesCallback callback The specified callback. Returns Type Description NpgsqlOptionsExtension | Edit this page View Source WithProvidePasswordCallback(ProvidePasswordCallback?) Returns a copy of the current instance with the specified ProvidePasswordCallback. Declaration public virtual NpgsqlOptionsExtension WithProvidePasswordCallback(ProvidePasswordCallback? callback) Parameters Type Name Description ProvidePasswordCallback callback The specified callback. Returns Type Description NpgsqlOptionsExtension | Edit this page View Source WithRedshift(bool) Returns a copy of the current instance with the specified Redshift settings. Declaration public virtual NpgsqlOptionsExtension WithRedshift(bool useRedshift) Parameters Type Name Description bool useRedshift Whether to target Redshift. Returns Type Description NpgsqlOptionsExtension A copy of the current instance with the specified Redshift setting. | Edit this page View Source WithRemoteCertificateValidationCallback(RemoteCertificateValidationCallback?) Returns a copy of the current instance with the specified RemoteCertificateValidationCallback. Declaration public virtual NpgsqlOptionsExtension WithRemoteCertificateValidationCallback(RemoteCertificateValidationCallback? callback) Parameters Type Name Description RemoteCertificateValidationCallback callback The specified callback. Returns Type Description NpgsqlOptionsExtension | Edit this page View Source WithUserRangeDefinition(string, string?, Type, string?) Returns a copy of the current instance configured with the specified range mapping. Declaration public virtual NpgsqlOptionsExtension WithUserRangeDefinition(string rangeName, string? schemaName, Type subtypeClrType, string? subtypeName) Parameters Type Name Description string rangeName string schemaName Type subtypeClrType string subtypeName Returns Type Description NpgsqlOptionsExtension | Edit this page View Source WithUserRangeDefinition<TSubtype>(string, string?, string?) Returns a copy of the current instance configured with the specified range mapping. Declaration public virtual NpgsqlOptionsExtension WithUserRangeDefinition<TSubtype>(string rangeName, string? schemaName = null, string? subtypeName = null) Parameters Type Name Description string rangeName string schemaName string subtypeName Returns Type Description NpgsqlOptionsExtension Type Parameters Name Description TSubtype Implements IDbContextOptionsExtension"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.UserRangeDefinition.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.UserRangeDefinition.html",
    "title": "Class UserRangeDefinition | Npgsql Documentation",
    "keywords": "Class UserRangeDefinition A definition for a user-defined PostgreSQL range to be mapped. Inheritance object UserRangeDefinition Implements IEquatable<UserRangeDefinition> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public record UserRangeDefinition : IEquatable<UserRangeDefinition> Constructors | Edit this page View Source UserRangeDefinition(string, string?, Type, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public UserRangeDefinition(string rangeName, string? schemaName, Type subtypeClrType, string? subtypeName) Parameters Type Name Description string rangeName string schemaName Type subtypeClrType string subtypeName Properties | Edit this page View Source RangeName The name of the PostgreSQL range type to be mapped. Declaration public virtual string RangeName { get; } Property Value Type Description string | Edit this page View Source SchemaName The PostgreSQL schema in which the range is defined. If null, the default schema is used (which is public unless changed on the model). Declaration public virtual string? SchemaName { get; } Property Value Type Description string | Edit this page View Source SubtypeClrType The CLR type of the range's subtype (or element). The actual mapped type will be an NpgsqlRange<T> over this type. Declaration public virtual Type SubtypeClrType { get; } Property Value Type Description Type | Edit this page View Source SubtypeName Optionally, the name of the range's PostgreSQL subtype (or element). This is usually not needed - the subtype will be inferred based on SubtypeClrType. Declaration public virtual string? SubtypeName { get; } Property Value Type Description string Implements IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Classes NpgsqlModelValidator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteOptionsExtension This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeOptionsExtension This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlOptionsExtension Represents options managed by the Npgsql. UserRangeDefinition A definition for a user-defined PostgreSQL range to be mapped. Interfaces INpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the IServiceProvider singleton level. INpgsqlSingletonOptions Represents options for Npgsql that can only be set at the IServiceProvider singleton level."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlDbContextOptionsBuilder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlDbContextOptionsBuilder.html",
    "title": "Class NpgsqlDbContextOptionsBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlDbContextOptionsBuilder Allows for options specific to PostgreSQL to be configured for a DbContext. Inheritance object RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension> NpgsqlDbContextOptionsBuilder Implements IRelationalDbContextOptionsBuilderInfrastructure Inherited Members RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.MaxBatchSize(int) RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.MinBatchSize(int) RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.CommandTimeout(int?) RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.MigrationsAssembly(string) RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.MigrationsHistoryTable(string, string) RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.UseRelationalNulls(bool) RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.UseQuerySplittingBehavior(QuerySplittingBehavior) RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.ExecutionStrategy(Func<ExecutionStrategyDependencies, IExecutionStrategy>) RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.WithOption(Func<NpgsqlOptionsExtension, NpgsqlOptionsExtension>) RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDbContextOptionsBuilder : RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension>, IRelationalDbContextOptionsBuilderInfrastructure Constructors | Edit this page View Source NpgsqlDbContextOptionsBuilder(DbContextOptionsBuilder) Initializes a new instance of the NpgsqlDbContextOptionsBuilder class. Declaration public NpgsqlDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder The core options builder. Methods | Edit this page View Source EnableRetryOnFailure() Configures the context to use the default retrying IExecutionStrategy. Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure() Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder configured to use the default retrying IExecutionStrategy. | Edit this page View Source EnableRetryOnFailure(ICollection<string>?) Configures the context to use the default retrying IExecutionStrategy. Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(ICollection<string>? errorCodesToAdd) Parameters Type Name Description ICollection<string> errorCodesToAdd Additional error codes that should be considered transient. Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder with the specified parameters. | Edit this page View Source EnableRetryOnFailure(int) Configures the context to use the default retrying IExecutionStrategy. Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount) Parameters Type Name Description int maxRetryCount Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder with the specified parameters. | Edit this page View Source EnableRetryOnFailure(int, TimeSpan, ICollection<string>?) Configures the context to use the default retrying IExecutionStrategy. Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount, TimeSpan maxRetryDelay, ICollection<string>? errorCodesToAdd) Parameters Type Name Description int maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay between retries. ICollection<string> errorCodesToAdd Additional error codes that should be considered transient. Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder with the specified parameters. | Edit this page View Source MapRange(string, Type, string?, string?) Maps a user-defined PostgreSQL range type for use. Declaration public virtual NpgsqlDbContextOptionsBuilder MapRange(string rangeName, Type subtypeClrType, string? schemaName = null, string? subtypeName = null) Parameters Type Name Description string rangeName The name of the PostgreSQL range type to be mapped. Type subtypeClrType The CLR type of the range's subtype (or element). The actual mapped type will be an NpgsqlRange<T> over this type. string schemaName The name of the PostgreSQL schema in which the range is defined. string subtypeName Optionally, the name of the range's PostgreSQL subtype (or element). This is usually not needed - the subtype will be inferred based on subtypeClrType. Returns Type Description NpgsqlDbContextOptionsBuilder Examples To map a range of PostgreSQL real, use the following: NpgsqlTypeMappingSource.MapRange(\"floatrange\", typeof(float)); | Edit this page View Source MapRange<TSubtype>(string, string?, string?) Maps a user-defined PostgreSQL range type for use. Declaration public virtual NpgsqlDbContextOptionsBuilder MapRange<TSubtype>(string rangeName, string? schemaName = null, string? subtypeName = null) Parameters Type Name Description string rangeName The name of the PostgreSQL range type to be mapped. string schemaName The name of the PostgreSQL schema in which the range is defined. string subtypeName Optionally, the name of the range's PostgreSQL subtype (or element). This is usually not needed - the subtype will be inferred based on TSubtype. Returns Type Description NpgsqlDbContextOptionsBuilder Type Parameters Name Description TSubtype The CLR type of the range's subtype (or element). The actual mapped type will be an NpgsqlRange<T> over this type. Examples To map a range of PostgreSQL real, use the following: NpgsqlTypeMappingSource.MapRange{float}(\"floatrange\"); | Edit this page View Source ProvideClientCertificatesCallback(ProvideClientCertificatesCallback?) Configures the DbContext to use the specified ProvideClientCertificatesCallback(ProvideClientCertificatesCallback?). Declaration public virtual NpgsqlDbContextOptionsBuilder ProvideClientCertificatesCallback(ProvideClientCertificatesCallback? callback) Parameters Type Name Description ProvideClientCertificatesCallback callback The callback to use. Returns Type Description NpgsqlDbContextOptionsBuilder | Edit this page View Source ProvidePasswordCallback(ProvidePasswordCallback?) Configures the DbContext to use the specified ProvidePasswordCallback(ProvidePasswordCallback?). Declaration public virtual NpgsqlDbContextOptionsBuilder ProvidePasswordCallback(ProvidePasswordCallback? callback) Parameters Type Name Description ProvidePasswordCallback callback The callback to use. Returns Type Description NpgsqlDbContextOptionsBuilder | Edit this page View Source RemoteCertificateValidationCallback(RemoteCertificateValidationCallback?) Configures the DbContext to use the specified RemoteCertificateValidationCallback(RemoteCertificateValidationCallback?). Declaration public virtual NpgsqlDbContextOptionsBuilder RemoteCertificateValidationCallback(RemoteCertificateValidationCallback? callback) Parameters Type Name Description RemoteCertificateValidationCallback callback The callback to use. Returns Type Description NpgsqlDbContextOptionsBuilder | Edit this page View Source SetPostgresVersion(int, int) Configures the backend version to target. Declaration public virtual NpgsqlDbContextOptionsBuilder SetPostgresVersion(int major, int minor) Parameters Type Name Description int major The PostgreSQL major version to target. int minor The PostgreSQL minor version to target. Returns Type Description NpgsqlDbContextOptionsBuilder | Edit this page View Source SetPostgresVersion(Version?) Configures the backend version to target. Declaration public virtual NpgsqlDbContextOptionsBuilder SetPostgresVersion(Version? postgresVersion) Parameters Type Name Description Version postgresVersion The backend version to target. Returns Type Description NpgsqlDbContextOptionsBuilder | Edit this page View Source UseAdminDatabase(string?) Connect to this database for administrative operations (creating/dropping databases). Declaration public virtual NpgsqlDbContextOptionsBuilder UseAdminDatabase(string? dbName) Parameters Type Name Description string dbName The name of the database for administrative operations. Returns Type Description NpgsqlDbContextOptionsBuilder | Edit this page View Source UseRedshift(bool) Configures the provider to work in Redshift compatibility mode, which avoids certain unsupported features from modern PostgreSQL versions. Declaration public virtual NpgsqlDbContextOptionsBuilder UseRedshift(bool useRedshift = true) Parameters Type Name Description bool useRedshift Whether to target Redshift. Returns Type Description NpgsqlDbContextOptionsBuilder Implements IRelationalDbContextOptionsBuilderInfrastructure Extension Methods NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions.UseNetTopologySuite(NpgsqlDbContextOptionsBuilder, CoordinateSequenceFactory?, PrecisionModel?, Ordinates, bool) NpgsqlNodaTimeDbContextOptionsBuilderExtensions.UseNodaTime(NpgsqlDbContextOptionsBuilder)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure Classes NpgsqlDbContextOptionsBuilder Allows for options specific to PostgreSQL to be configured for a DbContext."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlLoggerExtensions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlLoggerExtensions.html",
    "title": "Class NpgsqlLoggerExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlLoggerExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlLoggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlLoggerExtensions Methods | Edit this page View Source CollationFound(IDiagnosticsLogger<Scaffolding>, string, string, string, string, string?, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void CollationFound(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string schema, string collationName, string lcCollate, string lcCtype, string? provider, bool deterministic) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string schema string collationName string lcCollate string lcCtype string provider bool deterministic | Edit this page View Source ColumnFound(IDiagnosticsLogger<Scaffolding>, string, string, string, bool, bool, string?, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void ColumnFound(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string tableName, string columnName, string dataTypeName, bool nullable, bool identity, string? defaultValue, string? computedValue) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string tableName string columnName string dataTypeName bool nullable bool identity string defaultValue string computedValue | Edit this page View Source EnumColumnSkippedWarning(IDiagnosticsLogger<Scaffolding>, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void EnumColumnSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string columnName) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string columnName | Edit this page View Source ExpressionIndexSkippedWarning(IDiagnosticsLogger<Scaffolding>, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void ExpressionIndexSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string indexName, string tableName) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string indexName string tableName | Edit this page View Source ForeignKeyReferencesMissingPrincipalTableWarning(IDiagnosticsLogger<Scaffolding>, string?, string?, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void ForeignKeyReferencesMissingPrincipalTableWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? foreignKeyName, string? tableName, string? principalTableName) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string foreignKeyName string tableName string principalTableName | Edit this page View Source MissingSchemaWarning(IDiagnosticsLogger<Scaffolding>, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void MissingSchemaWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? schemaName) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string schemaName | Edit this page View Source MissingTableWarning(IDiagnosticsLogger<Scaffolding>, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void MissingTableWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? tableName) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string tableName | Edit this page View Source UniqueConstraintFound(IDiagnosticsLogger<Scaffolding>, string?, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void UniqueConstraintFound(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? uniqueConstraintName, string tableName) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string uniqueConstraintName string tableName | Edit this page View Source UnsupportedColumnConstraintSkippedWarning(IDiagnosticsLogger<Scaffolding>, string?, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void UnsupportedColumnConstraintSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string? indexName, string tableName) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string indexName string tableName | Edit this page View Source UnsupportedColumnIndexSkippedWarning(IDiagnosticsLogger<Scaffolding>, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static void UnsupportedColumnIndexSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string indexName, string tableName) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics string indexName string tableName"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteConventionSetPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteConventionSetPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteConventionSetPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteConventionSetPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNetTopologySuiteConventionSetPlugin Implements IConventionSetPlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteConventionSetPlugin : IConventionSetPlugin Methods | Edit this page View Source ModifyConventions(ConventionSet) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ConventionSet ModifyConventions(ConventionSet conventionSet) Parameters Type Name Description ConventionSet conventionSet Returns Type Description ConventionSet Implements IConventionSetPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteExtensionAddingConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteExtensionAddingConvention.html",
    "title": "Class NpgsqlNetTopologySuiteExtensionAddingConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteExtensionAddingConvention This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNetTopologySuiteExtensionAddingConvention Implements IModelFinalizingConvention IConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteExtensionAddingConvention : IModelFinalizingConvention, IConvention Methods | Edit this page View Source ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder IConventionContext<IConventionModelBuilder> context Implements IModelFinalizingConvention IConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteOptions.html",
    "title": "Class NpgsqlNetTopologySuiteOptions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteOptions Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Inheritance object NpgsqlNetTopologySuiteOptions Implements INpgsqlNetTopologySuiteOptions ISingletonOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteOptions : INpgsqlNetTopologySuiteOptions, ISingletonOptions Properties | Edit this page View Source IsGeographyDefault True if geography is to be used by default instead of geometry Declaration public virtual bool IsGeographyDefault { get; set; } Property Value Type Description bool Methods | Edit this page View Source Initialize(IDbContextOptions) Initializes the singleton options from the given IDbContextOptions. Declaration public virtual void Initialize(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Edit this page View Source Validate(IDbContextOptions) Validates that the options in given IDbContextOptions have not changed when compared to the options already set here, and throws if they have. Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options Implements INpgsqlNetTopologySuiteOptions ISingletonOptions"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlResources.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlResources.html",
    "title": "Class NpgsqlResources | Npgsql Documentation",
    "keywords": "Class NpgsqlResources This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlResources Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlResources Methods | Edit this page View Source LogEnumColumnSkipped(IDiagnosticsLogger) Enum column '{name}' cannot be scaffolded, define a CLR enum type and add the property manually. Declaration public static EventDefinition<string> LogEnumColumnSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string> | Edit this page View Source LogExpressionIndexSkipped(IDiagnosticsLogger) Expression index '{name}' on table {tableName} cannot be scaffolded, expression indices aren't supported and must be added via raw SQL in migrations. Declaration public static EventDefinition<string, string> LogExpressionIndexSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string> | Edit this page View Source LogFoundCollation(IDiagnosticsLogger) Found collation with name: {collationName}, schema: {schema}, LC_COLLATE: {lcCollate}, LC_CTYPE: {lcCtype}, provider: {provider}, deterministic: {isDeterministic} Declaration public static EventDefinition<string, string, string, string, string?, bool> LogFoundCollation(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string, string, string, string, bool> | Edit this page View Source LogFoundColumn(IDiagnosticsLogger) Found column with table: {tableName}, column name: {columnName}, data type: {dataType}, nullable: {isNullable}, identity: {isIdentity}, default value: {defaultValue}, computed value: {computedValue} Declaration public static FallbackEventDefinition LogFoundColumn(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description FallbackEventDefinition | Edit this page View Source LogFoundForeignKey(IDiagnosticsLogger) Found foreign key on table: {tableName}, name: {foreignKeyName}, principal table: {principalTableName}, delete action: {deleteAction}. Declaration public static EventDefinition<string, string, string, string> LogFoundForeignKey(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string, string, string> | Edit this page View Source LogFoundIndex(IDiagnosticsLogger) Found index with name: {indexName}, table: {tableName}, is unique: {isUnique}. Declaration public static EventDefinition<string, string, bool> LogFoundIndex(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string, bool> | Edit this page View Source LogFoundPrimaryKey(IDiagnosticsLogger) Found primary key with name: {primaryKeyName}, table: {tableName}. Declaration public static EventDefinition<string, string> LogFoundPrimaryKey(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string> | Edit this page View Source LogFoundSequence(IDiagnosticsLogger) Found sequence name: {name}, data type: {dataType}, cyclic: {isCyclic}, increment: {increment}, start: {start}, minimum: {min}, maximum: {max}. Declaration public static FallbackEventDefinition LogFoundSequence(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description FallbackEventDefinition | Edit this page View Source LogFoundTable(IDiagnosticsLogger) Found table with name: {name}. Declaration public static EventDefinition<string> LogFoundTable(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string> | Edit this page View Source LogFoundUniqueConstraint(IDiagnosticsLogger) Found unique constraint with name: {uniqueConstraintName}, table: {tableName}. Declaration public static EventDefinition<string?, string> LogFoundUniqueConstraint(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string> | Edit this page View Source LogMissingSchema(IDiagnosticsLogger) Unable to find a schema in the database matching the selected schema {schema}. Declaration public static EventDefinition<string?> LogMissingSchema(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string> | Edit this page View Source LogMissingTable(IDiagnosticsLogger) Unable to find a table in the database matching the selected table {table}. Declaration public static EventDefinition<string?> LogMissingTable(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string> | Edit this page View Source LogPrincipalColumnNotFound(IDiagnosticsLogger) For foreign key {foreignKeyName} on table {tableName}, unable to find the column called {principalColumnName} on the foreign key's principal table, {principaltableName}. Skipping foreign key. Declaration public static EventDefinition<string, string, string, string> LogPrincipalColumnNotFound(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string, string, string> | Edit this page View Source LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger) For foreign key {fkName} on table {tableName}, unable to model the end of the foreign key on principal table {principaltableName}. This is usually because the principal table was not included in the selection set. Declaration public static EventDefinition<string?, string?, string?> LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string, string> | Edit this page View Source LogUnsupportedColumnConstraintSkipped(IDiagnosticsLogger) Constraint '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). Declaration public static EventDefinition<string?, string> LogUnsupportedColumnConstraintSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string> | Edit this page View Source LogUnsupportedColumnIndexSkipped(IDiagnosticsLogger) Index '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). Declaration public static EventDefinition<string, string> LogUnsupportedColumnIndexSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition<string, string>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlSingletonOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlSingletonOptions.html",
    "title": "Class NpgsqlSingletonOptions | Npgsql Documentation",
    "keywords": "Class NpgsqlSingletonOptions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlSingletonOptions Implements INpgsqlSingletonOptions ISingletonOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSingletonOptions : INpgsqlSingletonOptions, ISingletonOptions Constructors | Edit this page View Source NpgsqlSingletonOptions() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlSingletonOptions() Properties | Edit this page View Source ApplicationServiceProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IServiceProvider? ApplicationServiceProvider { get; } Property Value Type Description IServiceProvider | Edit this page View Source DataSource This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual DbDataSource? DataSource { get; } Property Value Type Description DbDataSource | Edit this page View Source IsPostgresVersionSet This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool IsPostgresVersionSet { get; } Property Value Type Description bool | Edit this page View Source PostgresVersion The backend version to target. Declaration public virtual Version PostgresVersion { get; } Property Value Type Description Version | Edit this page View Source ReverseNullOrderingEnabled This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool ReverseNullOrderingEnabled { get; } Property Value Type Description bool | Edit this page View Source UseRedshift This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool UseRedshift { get; } Property Value Type Description bool | Edit this page View Source UserRangeDefinitions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IReadOnlyList<UserRangeDefinition> UserRangeDefinitions { get; } Property Value Type Description IReadOnlyList<UserRangeDefinition> Methods | Edit this page View Source Initialize(IDbContextOptions) Initializes the singleton options from the given IDbContextOptions. Declaration public virtual void Initialize(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Edit this page View Source Validate(IDbContextOptions) Validates that the options in given IDbContextOptions have not changed when compared to the options already set here, and throws if they have. Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options Implements INpgsqlSingletonOptions ISingletonOptions"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlStrings.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlStrings.html",
    "title": "Class NpgsqlStrings | Npgsql Documentation",
    "keywords": "Class NpgsqlStrings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlStrings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlStrings Properties | Edit this page View Source CannotUseDataSourceWithAuthCallbacks Cannot set ProvideClientCertificatesCallback, RemoteCertificateValidationCallback or ProvidePasswordCallback when a data source is provided. Declaration public static string CannotUseDataSourceWithAuthCallbacks { get; } Property Value Type Description string | Edit this page View Source Ef7JsonMappingNotSupported The EF Core 7.0 JSON support isn't currently supported by the Npgsql provider. To map to JSON, see https://www.npgsql.org/efcore/mapping/json.html. Declaration public static string Ef7JsonMappingNotSupported { get; } Property Value Type Description string | Edit this page View Source FreeTextFunctionOnClient The 'FreeText' method is not supported because the query has switched to client-evaluation. Inspect the log to determine which query expressions are triggering client-evaluation. Declaration public static string FreeTextFunctionOnClient { get; } Property Value Type Description string | Edit this page View Source RowValueComparisonRequiresTuplesOfSameLength Row values comparisons require two tuple arguments of the same length. Declaration public static string RowValueComparisonRequiresTuplesOfSameLength { get; } Property Value Type Description string | Edit this page View Source TransientExceptionDetected An exception has been raised that is likely due to a transient failure. Consider enabling transient error resiliency by adding 'EnableRetryOnFailure()' to the 'UseSqlServer' call. Declaration public static string TransientExceptionDetected { get; } Property Value Type Description string Methods | Edit this page View Source DuplicateColumnCompressionMethodMismatch(object?, object?, object?, object?, object?, object?) '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}', but are configured with different compression methods. Declaration public static string DuplicateColumnCompressionMethodMismatch(object? entityType1, object? property1, object? entityType2, object? property2, object? columnName, object? table) Parameters Type Name Description object entityType1 object property1 object entityType2 object property2 object columnName object table Returns Type Description string | Edit this page View Source DuplicateColumnNameValueGenerationStrategyMismatch(object?, object?, object?, object?, object?, object?) '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different value generation strategies. Declaration public static string DuplicateColumnNameValueGenerationStrategyMismatch(object? entityType1, object? property1, object? entityType2, object? property2, object? columnName, object? table) Parameters Type Name Description object entityType1 object property1 object entityType2 object property2 object columnName object table Returns Type Description string | Edit this page View Source DuplicateIndexCollationMismatch(object?, object?, object?, object?, object?, object?) The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different collation configurations. Declaration public static string DuplicateIndexCollationMismatch(object? index1, object? entityType1, object? index2, object? entityType2, object? table, object? indexName) Parameters Type Name Description object index1 object entityType1 object index2 object entityType2 object table object indexName Returns Type Description string | Edit this page View Source DuplicateIndexConcurrentCreationMismatch(object?, object?, object?, object?, object?, object?) The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different concurrent creation configurations. Declaration public static string DuplicateIndexConcurrentCreationMismatch(object? index1, object? entityType1, object? index2, object? entityType2, object? table, object? indexName) Parameters Type Name Description object index1 object entityType1 object index2 object entityType2 object table object indexName Returns Type Description string | Edit this page View Source DuplicateIndexIncludedMismatch(object?, object?, object?, object?, object?, object?, object?, object?) The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different included columns: {includedColumns1} and {includedColumns2}. Declaration public static string DuplicateIndexIncludedMismatch(object? index1, object? entityType1, object? index2, object? entityType2, object? table, object? indexName, object? includedColumns1, object? includedColumns2) Parameters Type Name Description object index1 object entityType1 object index2 object entityType2 object table object indexName object includedColumns1 object includedColumns2 Returns Type Description string | Edit this page View Source HeterogeneousTypesInNewArray(object?, object?) Heterogeneous store types detected when making new array ({type1}, {type2}). Declaration public static string HeterogeneousTypesInNewArray(object? type1, object? type2) Parameters Type Name Description object type1 object type2 Returns Type Description string | Edit this page View Source IdentityBadType(object?, object?, object?) Identity value generation cannot be used for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Identity value generation can only be used with signed integer properties. Declaration public static string IdentityBadType(object? property, object? entityType, object? propertyType) Parameters Type Name Description object property object entityType object propertyType Returns Type Description string | Edit this page View Source IncludePropertyDuplicated(object?, object?) Include property '{entityType}.{property}' cannot be defined multiple times Declaration public static string IncludePropertyDuplicated(object? entityType, object? property) Parameters Type Name Description object entityType object property Returns Type Description string | Edit this page View Source IncludePropertyInIndex(object?, object?) Include property '{entityType}.{property}' is already included in the index Declaration public static string IncludePropertyInIndex(object? entityType, object? property) Parameters Type Name Description object entityType object property Returns Type Description string | Edit this page View Source IncludePropertyNotFound(object?, object?) Include property '{entityType}.{property}' not found Declaration public static string IncludePropertyNotFound(object? entityType, object? property) Parameters Type Name Description object entityType object property Returns Type Description string | Edit this page View Source InvalidTableToIncludeInScaffolding(object?) The specified table '{table}' is not valid. Specify tables using the format '[schema].[table]'. Declaration public static string InvalidTableToIncludeInScaffolding(object? table) Parameters Type Name Description object table Returns Type Description string | Edit this page View Source NonKeyValueGeneration(object?, object?) The property '{property}' on entity type '{entityType}' is configured to use 'SequenceHiLo' value generator, which is only intended for keys. If this was intentional configure an alternate key on the property, otherwise call 'ValueGeneratedNever' or configure store generation for this property. Declaration public static string NonKeyValueGeneration(object? property, object? entityType) Parameters Type Name Description object property object entityType Returns Type Description string | Edit this page View Source SequenceBadType(object?, object?, object?) PostgreSQL sequences cannot be used to generate values for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Sequences can only be used with integer properties. Declaration public static string SequenceBadType(object? property, object? entityType, object? propertyType) Parameters Type Name Description object property object entityType object propertyType Returns Type Description string | Edit this page View Source StoredProcedureResultColumnsNotSupported(object?, object?) The entity type '{entityType}' is mapped to the stored procedure '{sproc}', which is configured with result columns. PostgreSQL stored procedures do not support result columns; use output parameters instead. Declaration public static string StoredProcedureResultColumnsNotSupported(object? entityType, object? sproc) Parameters Type Name Description object entityType object sproc Returns Type Description string | Edit this page View Source StoredProcedureReturnValueNotSupported(object?, object?) The entity type '{entityType}' is mapped to the stored procedure '{sproc}', which is configured with result columns. PostgreSQL stored procedures do not support return values; use output parameters instead. Declaration public static string StoredProcedureReturnValueNotSupported(object? entityType, object? sproc) Parameters Type Name Description object entityType object sproc Returns Type Description string | Edit this page View Source TwoDataSourcesInSameServiceProvider(object?) Using two distinct data sources within a service provider is not supported, and Entity Framework is not building its own internal service provider. Either allow Entity Framework to build the service provider by removing the call to '{useInternalServiceProvider}', or ensure that the same data source is used for all uses of a given service provider passed to '{useInternalServiceProvider}'. Declaration public static string TwoDataSourcesInSameServiceProvider(object? useInternalServiceProvider) Parameters Type Name Description object useInternalServiceProvider Returns Type Description string"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Internal Classes NpgsqlLoggerExtensions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteConventionSetPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteExtensionAddingConvention This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteOptions Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. NpgsqlResources This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSingletonOptions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlStrings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.CockroachDbInterleaveInParent.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.CockroachDbInterleaveInParent.html",
    "title": "Class CockroachDbInterleaveInParent | Npgsql Documentation",
    "keywords": "Class CockroachDbInterleaveInParent This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CockroachDbInterleaveInParent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class CockroachDbInterleaveInParent Constructors | Edit this page View Source CockroachDbInterleaveInParent(IReadOnlyAnnotatable) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public CockroachDbInterleaveInParent(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable Properties | Edit this page View Source Annotatable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Edit this page View Source InterleavePrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual List<string> InterleavePrefix { get; set; } Property Value Type Description List<string> | Edit this page View Source ParentTableName This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string ParentTableName { get; set; } Property Value Type Description string | Edit this page View Source ParentTableSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string? ParentTableSchema { get; set; } Property Value Type Description string"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlConventionSetBuilder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlConventionSetBuilder.html",
    "title": "Class NpgsqlConventionSetBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlConventionSetBuilder A builder for building conventions for Npgsql. Inheritance object ProviderConventionSetBuilder RelationalConventionSetBuilder NpgsqlConventionSetBuilder Implements IProviderConventionSetBuilder Inherited Members RelationalConventionSetBuilder.RelationalDependencies ProviderConventionSetBuilder.ReplaceConvention<TConvention, TImplementation>(List<TConvention>, TImplementation) ProviderConventionSetBuilder.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlConventionSetBuilder : RelationalConventionSetBuilder, IProviderConventionSetBuilder Remarks The service lifetime is Scoped and multiple registrations are allowed. This means that each DbContext instance will use its own set of instances of this service. The implementations may depend on other services registered with any lifetime. The implementations do not need to be thread-safe. See Model building conventions, and Constructors | Edit this page View Source NpgsqlConventionSetBuilder(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies, IRelationalTypeMappingSource, INpgsqlSingletonOptions) Creates a new NpgsqlConventionSetBuilder instance. Declaration public NpgsqlConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, IRelationalTypeMappingSource typeMappingSource, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies The core dependencies for this service. RelationalConventionSetBuilderDependencies relationalDependencies The relational dependencies for this service. IRelationalTypeMappingSource typeMappingSource The type mapping source to use. INpgsqlSingletonOptions npgsqlSingletonOptions The singleton options to use. Methods | Edit this page View Source Build() Call this method to build a ConventionSet for Npgsql when using the ModelBuilder outside of OnModelCreating(ModelBuilder). Note that it is unusual to use this method. Consider using DbContext in the normal way instead. Declaration public static ConventionSet Build() Returns Type Description ConventionSet The convention set. | Edit this page View Source CreateConventionSet() Builds and returns the convention set for the current database provider. Declaration public override ConventionSet CreateConventionSet() Returns Type Description ConventionSet The convention set for the current database provider. Overrides RelationalConventionSetBuilder.CreateConventionSet() | Edit this page View Source CreateModelBuilder() Call this method to build a ModelBuilder for Npgsql outside of OnModelCreating(ModelBuilder). Note that it is unusual to use this method. Consider using DbContext in the normal way instead. Declaration public static ModelBuilder CreateModelBuilder() Returns Type Description ModelBuilder The convention set. Implements IProviderConventionSetBuilder"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlJsonElementHackConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlJsonElementHackConvention.html",
    "title": "Class NpgsqlJsonElementHackConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonElementHackConvention This convention is a hack around https://github.com/dotnet/efcore/issues/32192. To support the EF owned entity JSON support, EF requires that a lookup of the CLR type JsonElement return the provider's special JsonTypeMapping. But Npgsql has its own JSON DOM support, where actually mapping JsonElement is allowed as a weakly-typed mapping strategy. The two JSON type mappings are incompatible notably because EF's JsonTypeMapping is expected to return UTF8 byte data which is then parsed via Utf8JsonWriter (and not a string). So for properties actually typed as JsonElement, we hack here and set the type mapping rather than going through the regular type mapping process. Inheritance object NpgsqlJsonElementHackConvention Implements IPropertyAddedConvention IConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonElementHackConvention : IPropertyAddedConvention, IConvention Methods | Edit this page View Source ProcessPropertyAdded(IConventionPropertyBuilder, IConventionContext<IConventionPropertyBuilder>) Called after a property is added to the entity type. Declaration public void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext<IConventionPropertyBuilder> context) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property. IConventionContext<IConventionPropertyBuilder> context Additional information associated with convention execution. Implements IPropertyAddedConvention IConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlPostgresModelFinalizingConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlPostgresModelFinalizingConvention.html",
    "title": "Class NpgsqlPostgresModelFinalizingConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlPostgresModelFinalizingConvention A convention that discovers certain common PostgreSQL extensions based on store types used in the model (e.g. hstore). Inheritance object NpgsqlPostgresModelFinalizingConvention Implements IModelFinalizingConvention IConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPostgresModelFinalizingConvention : IModelFinalizingConvention, IConvention Remarks See Model building conventions. Constructors | Edit this page View Source NpgsqlPostgresModelFinalizingConvention(IRelationalTypeMappingSource) Creates a new instance of NpgsqlPostgresModelFinalizingConvention. Declaration public NpgsqlPostgresModelFinalizingConvention(IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource The type mapping source to use. Methods | Edit this page View Source DiscoverPostgresExtensions(IConventionProperty, RelationalTypeMapping, IConventionModelBuilder) Discovers certain common PostgreSQL extensions based on property store types (e.g. hstore). Declaration protected virtual void DiscoverPostgresExtensions(IConventionProperty property, RelationalTypeMapping typeMapping, IConventionModelBuilder modelBuilder) Parameters Type Name Description IConventionProperty property RelationalTypeMapping typeMapping IConventionModelBuilder modelBuilder | Edit this page View Source ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Called when a model is being finalized. Declaration public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder The builder for the model. IConventionContext<IConventionModelBuilder> context Additional information associated with convention execution. | Edit this page View Source ProcessRowVersionProperty(IConventionProperty, RelationalTypeMapping) Detects properties which are uint, OnAddOrUpdate and configured as concurrency tokens, and maps these to the PostgreSQL internal \"xmin\" column, which changes every time the row is modified. Declaration protected virtual void ProcessRowVersionProperty(IConventionProperty property, RelationalTypeMapping typeMapping) Parameters Type Name Description IConventionProperty property RelationalTypeMapping typeMapping Implements IModelFinalizingConvention IConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlRuntimeModelConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlRuntimeModelConvention.html",
    "title": "Class NpgsqlRuntimeModelConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlRuntimeModelConvention A convention that creates an optimized copy of the mutable model. Inheritance object RuntimeModelConvention RelationalRuntimeModelConvention NpgsqlRuntimeModelConvention Implements IModelFinalizedConvention IConvention Inherited Members RelationalRuntimeModelConvention.ProcessEntityTypeMappingFragmentAnnotations(Dictionary<string, object>, IEntityTypeMappingFragment, RuntimeEntityTypeMappingFragment, bool) RelationalRuntimeModelConvention.ProcessFunctionAnnotations(Dictionary<string, object>, IDbFunction, RuntimeDbFunction, bool) RelationalRuntimeModelConvention.ProcessFunctionParameterAnnotations(Dictionary<string, object>, IDbFunctionParameter, RuntimeDbFunctionParameter, bool) RelationalRuntimeModelConvention.ProcessSequenceAnnotations(Dictionary<string, object>, ISequence, RuntimeSequence, bool) RelationalRuntimeModelConvention.ProcessPropertyOverridesAnnotations(Dictionary<string, object>, IRelationalPropertyOverrides, RuntimeRelationalPropertyOverrides, bool) RelationalRuntimeModelConvention.ProcessKeyAnnotations(Dictionary<string, object>, IKey, RuntimeKey, bool) RelationalRuntimeModelConvention.ProcessForeignKeyAnnotations(Dictionary<string, object>, IForeignKey, RuntimeForeignKey, bool) RelationalRuntimeModelConvention.ProcessStoredProcedureAnnotations(Dictionary<string, object>, IStoredProcedure, RuntimeStoredProcedure, bool) RelationalRuntimeModelConvention.ProcessStoredProcedureParameterAnnotations(Dictionary<string, object>, IStoredProcedureParameter, RuntimeStoredProcedureParameter, bool) RelationalRuntimeModelConvention.ProcessStoredProcedureResultColumnAnnotations(Dictionary<string, object>, IStoredProcedureResultColumn, RuntimeStoredProcedureResultColumn, bool) RelationalRuntimeModelConvention.RelationalDependencies RuntimeModelConvention.ProcessModelFinalized(IModel) RuntimeModelConvention.Create(IModel) RuntimeModelConvention.ProcessTypeMappingConfigurationAnnotations(Dictionary<string, object>, ITypeMappingConfiguration, RuntimeTypeMappingConfiguration, bool) RuntimeModelConvention.ProcessElementTypeAnnotations(Dictionary<string, object>, IElementType, RuntimeElementType, bool) RuntimeModelConvention.ProcessServicePropertyAnnotations(Dictionary<string, object>, IServiceProperty, RuntimeServiceProperty, bool) RuntimeModelConvention.ProcessComplexPropertyAnnotations(Dictionary<string, object>, IComplexProperty, RuntimeComplexProperty, bool) RuntimeModelConvention.ProcessTriggerAnnotations(Dictionary<string, object>, ITrigger, RuntimeTrigger, bool) RuntimeModelConvention.ProcessNavigationAnnotations(Dictionary<string, object>, INavigation, RuntimeNavigation, bool) RuntimeModelConvention.GetForeignKey(IForeignKey, RuntimeEntityType) RuntimeModelConvention.GetKey(IKey, RuntimeEntityType) RuntimeModelConvention.GetIndex(IIndex, RuntimeEntityType) RuntimeModelConvention.ProcessSkipNavigationAnnotations(Dictionary<string, object>, ISkipNavigation, RuntimeSkipNavigation, bool) RuntimeModelConvention.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRuntimeModelConvention : RelationalRuntimeModelConvention, IModelFinalizedConvention, IConvention Constructors | Edit this page View Source NpgsqlRuntimeModelConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlRuntimeModelConvention. Declaration public NpgsqlRuntimeModelConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Methods | Edit this page View Source ProcessEntityTypeAnnotations(Dictionary<string, object?>, IEntityType, RuntimeEntityType, bool) Updates the entity type annotations that will be set on the read-only object. Declaration protected override void ProcessEntityTypeAnnotations(Dictionary<string, object?> annotations, IEntityType entityType, RuntimeEntityType runtimeEntityType, bool runtime) Parameters Type Name Description Dictionary<string, object> annotations The annotations to be processed. IEntityType entityType The source entity type. RuntimeEntityType runtimeEntityType The target entity type that will contain the annotations. bool runtime Indicates whether the given annotations are runtime annotations. Overrides RelationalRuntimeModelConvention.ProcessEntityTypeAnnotations(Dictionary<string, object>, IEntityType, RuntimeEntityType, bool) | Edit this page View Source ProcessIndexAnnotations(Dictionary<string, object?>, IIndex, RuntimeIndex, bool) Updates the index annotations that will be set on the read-only object. Declaration protected override void ProcessIndexAnnotations(Dictionary<string, object?> annotations, IIndex index, RuntimeIndex runtimeIndex, bool runtime) Parameters Type Name Description Dictionary<string, object> annotations The annotations to be processed. IIndex index The source index. RuntimeIndex runtimeIndex The target index that will contain the annotations. bool runtime Indicates whether the given annotations are runtime annotations. Overrides RelationalRuntimeModelConvention.ProcessIndexAnnotations(Dictionary<string, object>, IIndex, RuntimeIndex, bool) | Edit this page View Source ProcessModelAnnotations(Dictionary<string, object?>, IModel, RuntimeModel, bool) Updates the model annotations that will be set on the read-only object. Declaration protected override void ProcessModelAnnotations(Dictionary<string, object?> annotations, IModel model, RuntimeModel runtimeModel, bool runtime) Parameters Type Name Description Dictionary<string, object> annotations The annotations to be processed. IModel model The source model. RuntimeModel runtimeModel The target model that will contain the annotations. bool runtime Indicates whether the given annotations are runtime annotations. Overrides RelationalRuntimeModelConvention.ProcessModelAnnotations(Dictionary<string, object>, IModel, RuntimeModel, bool) | Edit this page View Source ProcessPropertyAnnotations(Dictionary<string, object?>, IProperty, RuntimeProperty, bool) Updates the property annotations that will be set on the read-only object. Declaration protected override void ProcessPropertyAnnotations(Dictionary<string, object?> annotations, IProperty property, RuntimeProperty runtimeProperty, bool runtime) Parameters Type Name Description Dictionary<string, object> annotations The annotations to be processed. IProperty property The source property. RuntimeProperty runtimeProperty The target property that will contain the annotations. bool runtime Indicates whether the given annotations are runtime annotations. Overrides RelationalRuntimeModelConvention.ProcessPropertyAnnotations(Dictionary<string, object>, IProperty, RuntimeProperty, bool) Implements IModelFinalizedConvention IConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlSharedTableConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlSharedTableConvention.html",
    "title": "Class NpgsqlSharedTableConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlSharedTableConvention A convention that manipulates names of database objects for entity types that share a table to avoid clashes. Inheritance object SharedTableConvention NpgsqlSharedTableConvention Implements IModelFinalizingConvention IConvention Inherited Members SharedTableConvention.ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) SharedTableConvention.AreCompatible(IReadOnlyKey, IReadOnlyKey, in StoreObjectIdentifier) SharedTableConvention.AreCompatible(IReadOnlyForeignKey, IReadOnlyForeignKey, in StoreObjectIdentifier) SharedTableConvention.AreCompatible(IReadOnlyCheckConstraint, IReadOnlyCheckConstraint, in StoreObjectIdentifier) SharedTableConvention.AreCompatible(IReadOnlyTrigger, IReadOnlyTrigger, in StoreObjectIdentifier) SharedTableConvention.Dependencies SharedTableConvention.RelationalDependencies SharedTableConvention.KeysUniqueAcrossTables SharedTableConvention.ForeignKeysUniqueAcrossTables SharedTableConvention.IndexesUniqueAcrossTables SharedTableConvention.TriggersUniqueAcrossTables object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSharedTableConvention : SharedTableConvention, IModelFinalizingConvention, IConvention Constructors | Edit this page View Source NpgsqlSharedTableConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlSharedTableConvention. Declaration public NpgsqlSharedTableConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Properties | Edit this page View Source CheckConstraintsUniqueAcrossTables Gets a value indicating whether check constraint names should be unique across tables. Declaration protected override bool CheckConstraintsUniqueAcrossTables { get; } Property Value Type Description bool Overrides SharedTableConvention.CheckConstraintsUniqueAcrossTables Methods | Edit this page View Source AreCompatible(IReadOnlyIndex, IReadOnlyIndex, in StoreObjectIdentifier) Gets a value indicating whether two indexes mapped to the same table index are compatible. Declaration protected override bool AreCompatible(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyIndex index An index. IReadOnlyIndex duplicateIndex Another index. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description bool true if compatible Overrides SharedTableConvention.AreCompatible(IReadOnlyIndex, IReadOnlyIndex, in StoreObjectIdentifier) Implements IModelFinalizingConvention IConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlStoreGenerationConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlStoreGenerationConvention.html",
    "title": "Class NpgsqlStoreGenerationConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlStoreGenerationConvention A convention that ensures that properties aren't configured to have a default value, as computed column or using a NpgsqlValueGenerationStrategy at the same time. Inheritance object StoreGenerationConvention NpgsqlStoreGenerationConvention Implements IPropertyAnnotationChangedConvention IModelFinalizingConvention IConvention Inherited Members StoreGenerationConvention.ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) StoreGenerationConvention.Dependencies StoreGenerationConvention.RelationalDependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStoreGenerationConvention : StoreGenerationConvention, IPropertyAnnotationChangedConvention, IModelFinalizingConvention, IConvention Constructors | Edit this page View Source NpgsqlStoreGenerationConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlStoreGenerationConvention. Declaration public NpgsqlStoreGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Methods | Edit this page View Source ProcessPropertyAnnotationChanged(IConventionPropertyBuilder, string, IConventionAnnotation?, IConventionAnnotation?, IConventionContext<IConventionAnnotation>) Called after an annotation is changed on a property. Declaration public override void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation? annotation, IConventionAnnotation? oldAnnotation, IConventionContext<IConventionAnnotation> context) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property. string name The annotation name. IConventionAnnotation annotation The new annotation. IConventionAnnotation oldAnnotation The old annotation. IConventionContext<IConventionAnnotation> context Additional information associated with convention execution. Overrides StoreGenerationConvention.ProcessPropertyAnnotationChanged(IConventionPropertyBuilder, string, IConventionAnnotation, IConventionAnnotation, IConventionContext<IConventionAnnotation>) | Edit this page View Source Validate(IConventionProperty, in StoreObjectIdentifier) Throws if there is conflicting store generation configuration for this property. Declaration protected override void Validate(IConventionProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IConventionProperty property The property to check. StoreObjectIdentifier storeObject The identifier of the store object. Overrides StoreGenerationConvention.Validate(IConventionProperty, in StoreObjectIdentifier) Implements IPropertyAnnotationChangedConvention IModelFinalizingConvention IConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationConvention.html",
    "title": "Class NpgsqlValueGenerationConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGenerationConvention A convention that configures store value generation as OnAdd on properties that are part of the primary key and not part of any foreign keys, were configured to have a database default value or were configured to use a NpgsqlValueGenerationStrategy. It also configures properties as OnAddOrUpdate if they were configured as computed columns. Inheritance object ValueGenerationConvention RelationalValueGenerationConvention NpgsqlValueGenerationConvention Implements IEntityTypePrimaryKeyChangedConvention IForeignKeyAddedConvention IForeignKeyRemovedConvention IForeignKeyPropertiesChangedConvention IEntityTypeBaseTypeChangedConvention IForeignKeyOwnershipChangedConvention IPropertyAnnotationChangedConvention IEntityTypeAnnotationChangedConvention IConvention Inherited Members RelationalValueGenerationConvention.ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder, string, IConventionAnnotation, IConventionAnnotation, IConventionContext<IConventionAnnotation>) RelationalValueGenerationConvention.MappingStrategyAllowsValueGeneration(IConventionProperty, string) RelationalValueGenerationConvention.RelationalDependencies ValueGenerationConvention.ProcessForeignKeyAdded(IConventionForeignKeyBuilder, IConventionContext<IConventionForeignKeyBuilder>) ValueGenerationConvention.ProcessForeignKeyRemoved(IConventionEntityTypeBuilder, IConventionForeignKey, IConventionContext<IConventionForeignKey>) ValueGenerationConvention.ProcessForeignKeyPropertiesChanged(IConventionForeignKeyBuilder, IReadOnlyList<IConventionProperty>, IConventionKey, IConventionContext<IReadOnlyList<IConventionProperty>>) ValueGenerationConvention.ProcessEntityTypePrimaryKeyChanged(IConventionEntityTypeBuilder, IConventionKey, IConventionKey, IConventionContext<IConventionKey>) ValueGenerationConvention.ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder, IConventionEntityType, IConventionEntityType, IConventionContext<IConventionEntityType>) ValueGenerationConvention.GetValueGenerated(IReadOnlyProperty) ValueGenerationConvention.ProcessForeignKeyOwnershipChanged(IConventionForeignKeyBuilder, IConventionContext<bool?>) ValueGenerationConvention.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGenerationConvention : RelationalValueGenerationConvention, IEntityTypePrimaryKeyChangedConvention, IForeignKeyAddedConvention, IForeignKeyRemovedConvention, IForeignKeyPropertiesChangedConvention, IEntityTypeBaseTypeChangedConvention, IForeignKeyOwnershipChangedConvention, IPropertyAnnotationChangedConvention, IEntityTypeAnnotationChangedConvention, IConvention Constructors | Edit this page View Source NpgsqlValueGenerationConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlValueGenerationConvention. Declaration public NpgsqlValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Methods | Edit this page View Source GetValueGenerated(IConventionProperty) Returns the store value generation strategy to set for the given property. Declaration protected override ValueGenerated? GetValueGenerated(IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description ValueGenerated? The store value generation strategy to set for the given property. Overrides RelationalValueGenerationConvention.GetValueGenerated(IConventionProperty) | Edit this page View Source GetValueGenerated(IReadOnlyProperty, in StoreObjectIdentifier) Returns the store value generation strategy to set for the given property. Declaration public static ValueGenerated? GetValueGenerated(IReadOnlyProperty property, in StoreObjectIdentifier storeObject) Parameters Type Name Description IReadOnlyProperty property The property. StoreObjectIdentifier storeObject The identifier of the store object. Returns Type Description ValueGenerated? The store value generation strategy to set for the given property. | Edit this page View Source ProcessPropertyAnnotationChanged(IConventionPropertyBuilder, string, IConventionAnnotation?, IConventionAnnotation?, IConventionContext<IConventionAnnotation>) Called after an annotation is changed on a property. Declaration public override void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation? annotation, IConventionAnnotation? oldAnnotation, IConventionContext<IConventionAnnotation> context) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property. string name The annotation name. IConventionAnnotation annotation The new annotation. IConventionAnnotation oldAnnotation The old annotation. IConventionContext<IConventionAnnotation> context Additional information associated with convention execution. Overrides RelationalValueGenerationConvention.ProcessPropertyAnnotationChanged(IConventionPropertyBuilder, string, IConventionAnnotation, IConventionAnnotation, IConventionContext<IConventionAnnotation>) Implements IEntityTypePrimaryKeyChangedConvention IForeignKeyAddedConvention IForeignKeyRemovedConvention IForeignKeyPropertiesChangedConvention IEntityTypeBaseTypeChangedConvention IForeignKeyOwnershipChangedConvention IPropertyAnnotationChangedConvention IEntityTypeAnnotationChangedConvention IConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationStrategyConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationStrategyConvention.html",
    "title": "Class NpgsqlValueGenerationStrategyConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGenerationStrategyConvention A convention that configures the default model NpgsqlValueGenerationStrategy as IdentityByDefaultColumn for newer PostgreSQL versions, and SerialColumn for pre-10.0 versions. Inheritance object NpgsqlValueGenerationStrategyConvention Implements IModelInitializedConvention IModelFinalizingConvention IConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGenerationStrategyConvention : IModelInitializedConvention, IModelFinalizingConvention, IConvention Constructors | Edit this page View Source NpgsqlValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies, Version?) Creates a new instance of NpgsqlValueGenerationStrategyConvention. Declaration public NpgsqlValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, Version? postgresVersion) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Version postgresVersion The PostgreSQL version being targeted. This affects the default value generation strategy. Properties | Edit this page View Source Dependencies Parameter object containing service dependencies. Declaration protected virtual ProviderConventionSetBuilderDependencies Dependencies { get; } Property Value Type Description ProviderConventionSetBuilderDependencies | Edit this page View Source RelationalDependencies Relational provider-specific dependencies for this service. Declaration protected virtual RelationalConventionSetBuilderDependencies RelationalDependencies { get; } Property Value Type Description RelationalConventionSetBuilderDependencies Methods | Edit this page View Source ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Called when a model is being finalized. Declaration public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder The builder for the model. IConventionContext<IConventionModelBuilder> context Additional information associated with convention execution. | Edit this page View Source ProcessModelInitialized(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Called after a model is initialized. Declaration public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder The builder for the model. IConventionContext<IConventionModelBuilder> context Additional information associated with convention execution. Implements IModelInitializedConvention IModelFinalizingConvention IConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Classes NpgsqlConventionSetBuilder A builder for building conventions for Npgsql. NpgsqlJsonElementHackConvention This convention is a hack around https://github.com/dotnet/efcore/issues/32192. To support the EF owned entity JSON support, EF requires that a lookup of the CLR type JsonElement return the provider's special JsonTypeMapping. But Npgsql has its own JSON DOM support, where actually mapping JsonElement is allowed as a weakly-typed mapping strategy. The two JSON type mappings are incompatible notably because EF's JsonTypeMapping is expected to return UTF8 byte data which is then parsed via Utf8JsonWriter (and not a string). So for properties actually typed as JsonElement, we hack here and set the type mapping rather than going through the regular type mapping process. NpgsqlPostgresModelFinalizingConvention A convention that discovers certain common PostgreSQL extensions based on store types used in the model (e.g. hstore). NpgsqlRuntimeModelConvention A convention that creates an optimized copy of the mutable model. NpgsqlSharedTableConvention A convention that manipulates names of database objects for entity types that share a table to avoid clashes. NpgsqlStoreGenerationConvention A convention that ensures that properties aren't configured to have a default value, as computed column or using a NpgsqlValueGenerationStrategy at the same time. NpgsqlValueGenerationConvention A convention that configures store value generation as OnAdd on properties that are part of the primary key and not part of any foreign keys, were configured to have a database default value or were configured to use a NpgsqlValueGenerationStrategy. It also configures properties as OnAddOrUpdate if they were configured as computed columns. NpgsqlValueGenerationStrategyConvention A convention that configures the default model NpgsqlValueGenerationStrategy as IdentityByDefaultColumn for newer PostgreSQL versions, and SerialColumn for pre-10.0 versions."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.CockroachDbAnnotationNames.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.CockroachDbAnnotationNames.html",
    "title": "Class CockroachDbAnnotationNames | Npgsql Documentation",
    "keywords": "Class CockroachDbAnnotationNames This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CockroachDbAnnotationNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class CockroachDbAnnotationNames Fields | Edit this page View Source InterleaveInParent This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string InterleaveInParent = \"Npgsql:CockroachDB:InterleaveInParent\" Field Value Type Description string | Edit this page View Source Prefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string Prefix = \"Npgsql:CockroachDB:\" Field Value Type Description string"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.IdentitySequenceOptionsData.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.IdentitySequenceOptionsData.html",
    "title": "Class IdentitySequenceOptionsData | Npgsql Documentation",
    "keywords": "Class IdentitySequenceOptionsData This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object IdentitySequenceOptionsData Implements IEquatable<IdentitySequenceOptionsData> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class IdentitySequenceOptionsData : IEquatable<IdentitySequenceOptionsData> Fields | Edit this page View Source Empty This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static readonly IdentitySequenceOptionsData Empty Field Value Type Description IdentitySequenceOptionsData Properties | Edit this page View Source IncrementBy This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long IncrementBy { get; set; } Property Value Type Description long | Edit this page View Source IsCyclic This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool IsCyclic { get; set; } Property Value Type Description bool | Edit this page View Source MaxValue This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long? MaxValue { get; set; } Property Value Type Description long? | Edit this page View Source MinValue This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long? MinValue { get; set; } Property Value Type Description long? | Edit this page View Source NumbersToCache This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long NumbersToCache { get; set; } Property Value Type Description long | Edit this page View Source StartValue This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual long? StartValue { get; set; } Property Value Type Description long? Methods | Edit this page View Source Deserialize(string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IdentitySequenceOptionsData Deserialize(string? value) Parameters Type Name Description string value Returns Type Description IdentitySequenceOptionsData | Edit this page View Source Equals(IdentitySequenceOptionsData?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool Equals(IdentitySequenceOptionsData? other) Parameters Type Name Description IdentitySequenceOptionsData other Returns Type Description bool | Edit this page View Source Equals(object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) | Edit this page View Source Get(IReadOnlyAnnotatable) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IdentitySequenceOptionsData Get(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable Returns Type Description IdentitySequenceOptionsData | Edit this page View Source GetHashCode() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source Serialize() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string Serialize() Returns Type Description string Implements IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationNames.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationNames.html",
    "title": "Class NpgsqlAnnotationNames | Npgsql Documentation",
    "keywords": "Class NpgsqlAnnotationNames This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlAnnotationNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlAnnotationNames Fields | Edit this page View Source CollationDefinitionPrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string CollationDefinitionPrefix = \"Npgsql:CollationDefinition:\" Field Value Type Description string | Edit this page View Source Comment This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration [Obsolete(\"Replaced by built-in EF Core support, use HasComment on entities or properties.\")] public const string Comment = \"Npgsql:Comment\" Field Value Type Description string | Edit this page View Source CompressionMethod This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string CompressionMethod = \"Npgsql:Compression:\" Field Value Type Description string | Edit this page View Source CreatedConcurrently This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string CreatedConcurrently = \"Npgsql:CreatedConcurrently\" Field Value Type Description string | Edit this page View Source DatabaseTemplate This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string DatabaseTemplate = \"Npgsql:DatabaseTemplate\" Field Value Type Description string | Edit this page View Source DefaultColumnCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration [Obsolete(\"Use EF Core's standard model bulk configuration API\")] public const string DefaultColumnCollation = \"Npgsql:DefaultColumnCollation\" Field Value Type Description string | Edit this page View Source ElementDataType If this column's data type is an array, contains the data type of its elements. Otherwise null. Declaration public const string ElementDataType = \"Npgsql:ElementDataType\" Field Value Type Description string | Edit this page View Source EnumPrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string EnumPrefix = \"Npgsql:Enum:\" Field Value Type Description string | Edit this page View Source HiLoSequenceName This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string HiLoSequenceName = \"Npgsql:HiLoSequenceName\" Field Value Type Description string | Edit this page View Source HiLoSequenceSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string HiLoSequenceSchema = \"Npgsql:HiLoSequenceSchema\" Field Value Type Description string | Edit this page View Source IdentityOptions This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IdentityOptions = \"Npgsql:IdentitySequenceOptions\" Field Value Type Description string | Edit this page View Source IndexCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration [Obsolete(\"Replaced by RelationalAnnotationNames.Collation\")] public const string IndexCollation = \"Npgsql:IndexCollation\" Field Value Type Description string | Edit this page View Source IndexExpression If the index contains an expression (rather than simple column references), the expression is contained here. This is currently unsupported and will be ignored. Declaration public const string IndexExpression = \"Npgsql:IndexExpression\" Field Value Type Description string | Edit this page View Source IndexInclude This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexInclude = \"Npgsql:IndexInclude\" Field Value Type Description string | Edit this page View Source IndexMethod This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexMethod = \"Npgsql:IndexMethod\" Field Value Type Description string | Edit this page View Source IndexNullSortOrder This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexNullSortOrder = \"Npgsql:IndexNullSortOrder\" Field Value Type Description string | Edit this page View Source IndexOperators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexOperators = \"Npgsql:IndexOperators\" Field Value Type Description string | Edit this page View Source IndexSortOrder This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string IndexSortOrder = \"Npgsql:IndexSortOrder\" Field Value Type Description string | Edit this page View Source NullsDistinct This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string NullsDistinct = \"Npgsql:NullsDistinct\" Field Value Type Description string | Edit this page View Source PostgresExtensionPrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string PostgresExtensionPrefix = \"Npgsql:PostgresExtension:\" Field Value Type Description string | Edit this page View Source PostgresTypeType Identifies the type of the PostgreSQL type of this column (e.g. array, range, base). Declaration public const string PostgresTypeType = \"Npgsql:PostgresTypeType\" Field Value Type Description string | Edit this page View Source Prefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string Prefix = \"Npgsql:\" Field Value Type Description string | Edit this page View Source RangePrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string RangePrefix = \"Npgsql:Range:\" Field Value Type Description string | Edit this page View Source SequenceName This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string SequenceName = \"Npgsql:SequenceName\" Field Value Type Description string | Edit this page View Source SequenceNameSuffix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string SequenceNameSuffix = \"Npgsql:SequenceNameSuffix\" Field Value Type Description string | Edit this page View Source SequenceSchema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string SequenceSchema = \"Npgsql:SequenceSchema\" Field Value Type Description string | Edit this page View Source StorageParameterPrefix This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string StorageParameterPrefix = \"Npgsql:StorageParameter:\" Field Value Type Description string | Edit this page View Source Tablespace This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string Tablespace = \"Npgsql:Tablespace\" Field Value Type Description string | Edit this page View Source TsVectorConfig This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string TsVectorConfig = \"Npgsql:TsVectorConfig\" Field Value Type Description string | Edit this page View Source TsVectorProperties This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string TsVectorProperties = \"Npgsql:TsVectorProperties\" Field Value Type Description string | Edit this page View Source UnloggedTable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string UnloggedTable = \"Npgsql:UnloggedTable\" Field Value Type Description string | Edit this page View Source ValueGeneratedOnAdd This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration [Obsolete(\"Replaced by ValueGenerationStrategy.SerialColumn\")] public const string ValueGeneratedOnAdd = \"Npgsql:ValueGeneratedOnAdd\" Field Value Type Description string | Edit this page View Source ValueGenerationStrategy This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public const string ValueGenerationStrategy = \"Npgsql:ValueGenerationStrategy\" Field Value Type Description string"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationProvider.html",
    "title": "Class NpgsqlAnnotationProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlAnnotationProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object RelationalAnnotationProvider NpgsqlAnnotationProvider Implements IRelationalAnnotationProvider Inherited Members RelationalAnnotationProvider.For(IView, bool) RelationalAnnotationProvider.For(IViewColumn, bool) RelationalAnnotationProvider.For(ISqlQuery, bool) RelationalAnnotationProvider.For(ISqlQueryColumn, bool) RelationalAnnotationProvider.For(IStoreFunction, bool) RelationalAnnotationProvider.For(IStoreFunctionParameter, bool) RelationalAnnotationProvider.For(IFunctionColumn, bool) RelationalAnnotationProvider.For(IStoreStoredProcedure, bool) RelationalAnnotationProvider.For(IStoreStoredProcedureParameter, bool) RelationalAnnotationProvider.For(IStoreStoredProcedureResultColumn, bool) RelationalAnnotationProvider.For(IForeignKeyConstraint, bool) RelationalAnnotationProvider.For(IUniqueConstraint, bool) RelationalAnnotationProvider.For(ISequence, bool) RelationalAnnotationProvider.For(ICheckConstraint, bool) RelationalAnnotationProvider.For(ITrigger, bool) RelationalAnnotationProvider.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlAnnotationProvider : RelationalAnnotationProvider, IRelationalAnnotationProvider Constructors | Edit this page View Source NpgsqlAnnotationProvider(RelationalAnnotationProviderDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlAnnotationProvider(RelationalAnnotationProviderDependencies dependencies) Parameters Type Name Description RelationalAnnotationProviderDependencies dependencies Methods | Edit this page View Source For(IColumn, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IEnumerable<IAnnotation> For(IColumn column, bool designTime) Parameters Type Name Description IColumn column bool designTime Returns Type Description IEnumerable<IAnnotation> Overrides RelationalAnnotationProvider.For(IColumn, bool) | Edit this page View Source For(IRelationalModel, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IEnumerable<IAnnotation> For(IRelationalModel model, bool designTime) Parameters Type Name Description IRelationalModel model bool designTime Returns Type Description IEnumerable<IAnnotation> Overrides RelationalAnnotationProvider.For(IRelationalModel, bool) | Edit this page View Source For(ITable, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IEnumerable<IAnnotation> For(ITable table, bool designTime) Parameters Type Name Description ITable table bool designTime Returns Type Description IEnumerable<IAnnotation> Overrides RelationalAnnotationProvider.For(ITable, bool) | Edit this page View Source For(ITableIndex, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IEnumerable<IAnnotation> For(ITableIndex index, bool designTime) Parameters Type Name Description ITableIndex index bool designTime Returns Type Description IEnumerable<IAnnotation> Overrides RelationalAnnotationProvider.For(ITableIndex, bool) Implements IRelationalAnnotationProvider"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Classes CockroachDbAnnotationNames This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. IdentitySequenceOptionsData This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlAnnotationNames This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlAnnotationProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategy.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategy.html",
    "title": "Enum NpgsqlValueGenerationStrategy | Npgsql Documentation",
    "keywords": "Enum NpgsqlValueGenerationStrategy Defines strategies to use when generating values for database columns. Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum NpgsqlValueGenerationStrategy Remarks See Model building conventions. Fields Name Description IdentityAlwaysColumn Selects the always-identity column strategy (a value cannot be provided). Available only starting PostgreSQL 10. IdentityByDefaultColumn Selects the by-default-identity column strategy (a value can be provided to override the identity mechanism). Available only starting PostgreSQL 10. None No Npgsql-specific strategy. Sequence A pattern that uses a database sequence to generate values for the column. SequenceHiLo A sequence-based hi-lo pattern where blocks of IDs are allocated from the server and used client-side for generating keys. This is an advanced pattern--only use this strategy if you are certain it is what you need. SerialColumn Selects the serial column strategy, which is a regular column backed by an auto-created index. If you are creating a new project on PostgreSQL 10 or above, consider using IdentityByDefaultColumn instead. Extension Methods NpgsqlValueGenerationStrategyExtensions.IsIdentity(NpgsqlValueGenerationStrategy)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategyExtensions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategyExtensions.html",
    "title": "Class NpgsqlValueGenerationStrategyExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGenerationStrategyExtensions Extension methods over NpgsqlValueGenerationStrategy. Inheritance object NpgsqlValueGenerationStrategyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlValueGenerationStrategyExtensions Methods | Edit this page View Source IsIdentity(NpgsqlValueGenerationStrategy) Whether the given strategy is either IdentityByDefaultColumn or IdentityAlwaysColumn. Declaration public static bool IsIdentity(this NpgsqlValueGenerationStrategy strategy) Parameters Type Name Description NpgsqlValueGenerationStrategy strategy Returns Type Description bool | Edit this page View Source IsIdentity(NpgsqlValueGenerationStrategy?) Whether the given strategy is either IdentityByDefaultColumn or IdentityAlwaysColumn. Declaration public static bool IsIdentity(this NpgsqlValueGenerationStrategy? strategy) Parameters Type Name Description NpgsqlValueGenerationStrategy? strategy Returns Type Description bool"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NullSortOrder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NullSortOrder.html",
    "title": "Enum NullSortOrder | Npgsql Documentation",
    "keywords": "Enum NullSortOrder Options for modifying sort ordering of NULL-values in indexes. Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum NullSortOrder Fields Name Description NullsFirst Specifies that nulls sort before non-nulls. NullsLast Specifies that nulls sort after non-nulls. Unspecified Represents an unspecified sort order. The database default will be used."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresCollation.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresCollation.html",
    "title": "Class PostgresCollation | Npgsql Documentation",
    "keywords": "Class PostgresCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object PostgresCollation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresCollation Properties | Edit this page View Source Annotatable This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Edit this page View Source IsDeterministic This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool? IsDeterministic { get; set; } Property Value Type Description bool? | Edit this page View Source LcCollate This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string LcCollate { get; set; } Property Value Type Description string | Edit this page View Source LcCtype This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string LcCtype { get; set; } Property Value Type Description string | Edit this page View Source Name This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string Name { get; } Property Value Type Description string | Edit this page View Source Provider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string? Provider { get; set; } Property Value Type Description string | Edit this page View Source Schema This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual string? Schema { get; } Property Value Type Description string Methods | Edit this page View Source FindCollation(IReadOnlyAnnotatable, string?, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresCollation? FindCollation(IReadOnlyAnnotatable annotatable, string? schema, string name) Parameters Type Name Description IReadOnlyAnnotatable annotatable string schema string name Returns Type Description PostgresCollation | Edit this page View Source GetCollations(IReadOnlyAnnotatable) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IEnumerable<PostgresCollation> GetCollations(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable Returns Type Description IEnumerable<PostgresCollation> | Edit this page View Source GetOrAddCollation(IMutableAnnotatable, string?, string, string, string, string?, bool?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PostgresCollation GetOrAddCollation(IMutableAnnotatable annotatable, string? schema, string name, string lcCollate, string lcCtype, string? provider = null, bool? deterministic = null) Parameters Type Name Description IMutableAnnotatable annotatable string schema string name string lcCollate string lcCtype string provider bool? deterministic Returns Type Description PostgresCollation"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresEnum.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresEnum.html",
    "title": "Class PostgresEnum | Npgsql Documentation",
    "keywords": "Class PostgresEnum Represents the metadata for a PostgreSQL enum. Inheritance object PostgresEnum Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresEnum Properties | Edit this page View Source Annotatable The Annotatable that stores the enum. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Edit this page View Source Labels The enum labels. Declaration public virtual IReadOnlyList<string> Labels { get; set; } Property Value Type Description IReadOnlyList<string> | Edit this page View Source Name The enum name. Declaration public virtual string Name { get; } Property Value Type Description string | Edit this page View Source Schema The enum schema or null to represent the default schema. Declaration public virtual string? Schema { get; } Property Value Type Description string Methods | Edit this page View Source FindPostgresEnum(IReadOnlyAnnotatable, string?, string) Finds a PostgresEnum in the IAnnotatable, or returns null if not found. Declaration public static PostgresEnum? FindPostgresEnum(IReadOnlyAnnotatable annotatable, string? schema, string name) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for the enum. string schema The enum schema or null to use the model's default schema. string name The enum name. Returns Type Description PostgresEnum The PostgresEnum from the IAnnotatable. Exceptions Type Condition ArgumentException schema ArgumentNullException annotatable ArgumentNullException name | Edit this page View Source GetOrAddPostgresEnum(IMutableAnnotatable, string?, string, string[]) Gets or adds a PostgresEnum from or to the IMutableAnnotatable. Declaration public static PostgresEnum GetOrAddPostgresEnum(IMutableAnnotatable annotatable, string? schema, string name, string[] labels) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the enum. string schema The enum schema or null to use the model's default schema. string name The enum name. string[] labels The enum labels. Returns Type Description PostgresEnum The PostgresEnum from the IMutableAnnotatable. Exceptions Type Condition ArgumentException schema ArgumentNullException annotatable ArgumentNullException name ArgumentNullException labels | Edit this page View Source GetOrAddPostgresEnum(IMutableAnnotatable, string, string[]) Gets or adds a PostgresEnum from or to the IMutableAnnotatable. Declaration public static PostgresEnum GetOrAddPostgresEnum(IMutableAnnotatable annotatable, string name, string[] labels) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the enum. string name The enum name. string[] labels The enum labels. Returns Type Description PostgresEnum The PostgresEnum from the IMutableAnnotatable. Exceptions Type Condition ArgumentNullException annotatable ArgumentNullException name ArgumentNullException labels | Edit this page View Source GetPostgresEnums(IReadOnlyAnnotatable) Gets the collection of PostgresEnum stored in the IAnnotatable. Declaration public static IEnumerable<PostgresEnum> GetPostgresEnums(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for PostgresEnum annotations. Returns Type Description IEnumerable<PostgresEnum> The collection of PostgresEnum stored in the IAnnotatable. Exceptions Type Condition ArgumentNullException annotatable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresExtension.html",
    "title": "Class PostgresExtension | Npgsql Documentation",
    "keywords": "Class PostgresExtension Represents the metadata for a PostgreSQL extension. Inheritance object PostgresExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresExtension Properties | Edit this page View Source Annotatable The Annotatable that stores the extension. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Edit this page View Source Name The extension name. Declaration public virtual string Name { get; } Property Value Type Description string | Edit this page View Source Schema The extension schema or null to represent the default schema. Declaration public virtual string? Schema { get; } Property Value Type Description string | Edit this page View Source Version The extension version. Declaration public virtual string? Version { get; set; } Property Value Type Description string Methods | Edit this page View Source FindPostgresExtension(IReadOnlyAnnotatable, string?, string) Finds a PostgresExtension in the IAnnotatable, or returns null if not found. Declaration public static PostgresExtension? FindPostgresExtension(IReadOnlyAnnotatable annotatable, string? schema, string name) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for the extension. string schema The extension schema. The default schema is never used. string name The extension name. Returns Type Description PostgresExtension The PostgresExtension from the IAnnotatable. Exceptions Type Condition ArgumentException schema ArgumentNullException annotatable ArgumentNullException name | Edit this page View Source GetOrAddPostgresExtension(IConventionAnnotatable, string?, string, string?) Gets or adds a PostgresExtension from or to the IMutableAnnotatable. Declaration public static PostgresExtension GetOrAddPostgresExtension(IConventionAnnotatable annotatable, string? schema, string name, string? version) Parameters Type Name Description IConventionAnnotatable annotatable The annotatable from which to get or add the extension. string schema The extension schema or null to use the model's default schema. string name The extension name. string version The extension version. Returns Type Description PostgresExtension The PostgresExtension from the IMutableAnnotatable. Exceptions Type Condition ArgumentException schema ArgumentNullException annotatable ArgumentNullException name | Edit this page View Source GetOrAddPostgresExtension(IMutableAnnotatable, string, string?) Gets or adds a PostgresExtension from or to the IMutableAnnotatable. Declaration public static PostgresExtension GetOrAddPostgresExtension(IMutableAnnotatable annotatable, string name, string? version) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the extension. string name The extension name. string version The extension version. Returns Type Description PostgresExtension The PostgresExtension from the IMutableAnnotatable. Exceptions Type Condition ArgumentNullException annotatable ArgumentNullException name | Edit this page View Source GetOrAddPostgresExtension(IMutableAnnotatable, string?, string, string?) Gets or adds a PostgresExtension from or to the IMutableAnnotatable. Declaration public static PostgresExtension GetOrAddPostgresExtension(IMutableAnnotatable annotatable, string? schema, string name, string? version) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the extension. string schema The extension schema or null to use the model's default schema. string name The extension name. string version The extension version. Returns Type Description PostgresExtension The PostgresExtension from the IMutableAnnotatable. Exceptions Type Condition ArgumentException schema ArgumentNullException annotatable ArgumentNullException name | Edit this page View Source GetPostgresExtensions(IReadOnlyAnnotatable) Gets the collection of PostgresExtension stored in the IAnnotatable. Declaration public static IEnumerable<PostgresExtension> GetPostgresExtensions(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for PostgresExtension annotations. Returns Type Description IEnumerable<PostgresExtension> The collection of PostgresExtension stored in the IAnnotatable. Exceptions Type Condition ArgumentNullException annotatable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresRange.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresRange.html",
    "title": "Class PostgresRange | Npgsql Documentation",
    "keywords": "Class PostgresRange Represents the metadata for a PostgreSQL range. Inheritance object PostgresRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresRange Properties | Edit this page View Source Annotatable The Annotatable that stores the range. Declaration public virtual Annotatable Annotatable { get; } Property Value Type Description Annotatable | Edit this page View Source CanonicalFunction The function defining a \"step\" in a discrete range. Declaration public virtual string? CanonicalFunction { get; set; } Property Value Type Description string | Edit this page View Source Collation The collation to use. Declaration public virtual string? Collation { get; set; } Property Value Type Description string | Edit this page View Source Name The range name. Declaration public virtual string Name { get; } Property Value Type Description string | Edit this page View Source Schema The range schema or null to represent the default schema. Declaration public virtual string? Schema { get; } Property Value Type Description string | Edit this page View Source Subtype The subtype of the range. Declaration public virtual string Subtype { get; set; } Property Value Type Description string | Edit this page View Source SubtypeDiff The function defining a difference in subtype values. Declaration public virtual string? SubtypeDiff { get; set; } Property Value Type Description string | Edit this page View Source SubtypeOpClass The operator class to use. Declaration public virtual string? SubtypeOpClass { get; set; } Property Value Type Description string Methods | Edit this page View Source FindPostgresRange(IReadOnlyAnnotatable, string?, string) Finds a PostgresRange in the IAnnotatable, or returns null if not found. Declaration public static PostgresRange? FindPostgresRange(IReadOnlyAnnotatable annotatable, string? schema, string name) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for the range. string schema The range schema or null to use the model's default schema. string name The range name. Returns Type Description PostgresRange The PostgresRange from the IAnnotatable. Exceptions Type Condition ArgumentException schema ArgumentNullException annotatable ArgumentNullException name | Edit this page View Source GetOrAddPostgresRange(IMutableAnnotatable, string?, string, string, string?, string?, string?, string?) Gets or adds a PostgresRange from or to the IMutableAnnotatable. Declaration public static PostgresRange GetOrAddPostgresRange(IMutableAnnotatable annotatable, string? schema, string name, string subtype, string? canonicalFunction = null, string? subtypeOpClass = null, string? collation = null, string? subtypeDiff = null) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the range. string schema The range schema or null to use the model's default schema. string name The range name. string subtype The range subtype. string canonicalFunction string subtypeOpClass string collation string subtypeDiff Returns Type Description PostgresRange The PostgresRange from the IMutableAnnotatable. Exceptions Type Condition ArgumentException schema ArgumentNullException annotatable ArgumentNullException name ArgumentNullException subtype | Edit this page View Source GetPostgresRanges(IReadOnlyAnnotatable) Gets the collection of PostgresRange stored in the IAnnotatable. Declaration public static IEnumerable<PostgresRange> GetPostgresRanges(IReadOnlyAnnotatable annotatable) Parameters Type Name Description IReadOnlyAnnotatable annotatable The annotatable to search for PostgresRange annotations. Returns Type Description IEnumerable<PostgresRange> The collection of PostgresRange stored in the IAnnotatable. Exceptions Type Condition ArgumentNullException annotatable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.SortOrder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.SortOrder.html",
    "title": "Enum SortOrder | Npgsql Documentation",
    "keywords": "Enum SortOrder Options for modifying sort ordering of index values. Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum SortOrder Fields Name Description Ascending Specifies ascending sort order, which is the default. Descending Specifies descending sort order."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Classes CockroachDbInterleaveInParent This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlValueGenerationStrategyExtensions Extension methods over NpgsqlValueGenerationStrategy. PostgresCollation This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. PostgresEnum Represents the metadata for a PostgreSQL enum. PostgresExtension Represents the metadata for a PostgreSQL extension. PostgresRange Represents the metadata for a PostgreSQL range. Enums NpgsqlValueGenerationStrategy Defines strategies to use when generating values for database columns. NullSortOrder Options for modifying sort ordering of NULL-values in indexes. SortOrder Options for modifying sort ordering of index values."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlHistoryRepository.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlHistoryRepository.html",
    "title": "Class NpgsqlHistoryRepository | Npgsql Documentation",
    "keywords": "Class NpgsqlHistoryRepository This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object HistoryRepository NpgsqlHistoryRepository Implements IHistoryRepository Inherited Members HistoryRepository.DefaultTableName HistoryRepository.Exists() HistoryRepository.ExistsAsync(CancellationToken) HistoryRepository.GetCreateScript() HistoryRepository.ConfigureTable(EntityTypeBuilder<HistoryRow>) HistoryRepository.GetAppliedMigrations() HistoryRepository.GetAppliedMigrationsAsync(CancellationToken) HistoryRepository.GetInsertScript(HistoryRow) HistoryRepository.GetDeleteScript(string) HistoryRepository.Dependencies HistoryRepository.SqlGenerationHelper HistoryRepository.TableName HistoryRepository.TableSchema HistoryRepository.MigrationIdColumnName HistoryRepository.ProductVersionColumnName HistoryRepository.GetAppliedMigrationsSql object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlHistoryRepository : HistoryRepository, IHistoryRepository Constructors | Edit this page View Source NpgsqlHistoryRepository(HistoryRepositoryDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlHistoryRepository(HistoryRepositoryDependencies dependencies) Parameters Type Name Description HistoryRepositoryDependencies dependencies Properties | Edit this page View Source ExistsSql This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ExistsSql { get; } Property Value Type Description string Overrides HistoryRepository.ExistsSql Methods | Edit this page View Source GetBeginIfExistsScript(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string GetBeginIfExistsScript(string migrationId) Parameters Type Name Description string migrationId Returns Type Description string Overrides HistoryRepository.GetBeginIfExistsScript(string) | Edit this page View Source GetBeginIfNotExistsScript(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string GetBeginIfNotExistsScript(string migrationId) Parameters Type Name Description string migrationId Returns Type Description string Overrides HistoryRepository.GetBeginIfNotExistsScript(string) | Edit this page View Source GetCreateIfNotExistsScript() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string GetCreateIfNotExistsScript() Returns Type Description string Overrides HistoryRepository.GetCreateIfNotExistsScript() | Edit this page View Source GetEndIfScript() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string GetEndIfScript() Returns Type Description string Overrides HistoryRepository.GetEndIfScript() | Edit this page View Source InterpretExistsResult(object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool InterpretExistsResult(object? value) Parameters Type Name Description object value Returns Type Description bool Overrides HistoryRepository.InterpretExistsResult(object) Implements IHistoryRepository"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlMigrator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlMigrator.html",
    "title": "Class NpgsqlMigrator | Npgsql Documentation",
    "keywords": "Class NpgsqlMigrator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object Migrator NpgsqlMigrator Implements IMigrator Inherited Members Migrator.PopulateMigrations(IEnumerable<string>, string, out IReadOnlyList<Migration>, out IReadOnlyList<Migration>, out Migration) Migrator.GenerateScript(string, string, MigrationsSqlGenerationOptions) Migrator.GenerateUpSql(Migration, MigrationsSqlGenerationOptions) Migrator.GenerateDownSql(Migration, Migration, MigrationsSqlGenerationOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMigrator : Migrator, IMigrator Constructors | Edit this page View Source NpgsqlMigrator(IMigrationsAssembly, IHistoryRepository, IDatabaseCreator, IMigrationsSqlGenerator, IRawSqlCommandBuilder, IMigrationCommandExecutor, IRelationalConnection, ISqlGenerationHelper, ICurrentDbContext, IModelRuntimeInitializer, IDiagnosticsLogger<Migrations>, IRelationalCommandDiagnosticsLogger, IDatabaseProvider) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMigrator(IMigrationsAssembly migrationsAssembly, IHistoryRepository historyRepository, IDatabaseCreator databaseCreator, IMigrationsSqlGenerator migrationsSqlGenerator, IRawSqlCommandBuilder rawSqlCommandBuilder, IMigrationCommandExecutor migrationCommandExecutor, IRelationalConnection connection, ISqlGenerationHelper sqlGenerationHelper, ICurrentDbContext currentContext, IModelRuntimeInitializer modelRuntimeInitializer, IDiagnosticsLogger<DbLoggerCategory.Migrations> logger, IRelationalCommandDiagnosticsLogger commandLogger, IDatabaseProvider databaseProvider) Parameters Type Name Description IMigrationsAssembly migrationsAssembly IHistoryRepository historyRepository IDatabaseCreator databaseCreator IMigrationsSqlGenerator migrationsSqlGenerator IRawSqlCommandBuilder rawSqlCommandBuilder IMigrationCommandExecutor migrationCommandExecutor IRelationalConnection connection ISqlGenerationHelper sqlGenerationHelper ICurrentDbContext currentContext IModelRuntimeInitializer modelRuntimeInitializer IDiagnosticsLogger<DbLoggerCategory.Migrations> logger IRelationalCommandDiagnosticsLogger commandLogger IDatabaseProvider databaseProvider Methods | Edit this page View Source Migrate(string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void Migrate(string? targetMigration = null) Parameters Type Name Description string targetMigration Overrides Migrator.Migrate(string) | Edit this page View Source MigrateAsync(string?, CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Task MigrateAsync(string? targetMigration = null, CancellationToken cancellationToken = default) Parameters Type Name Description string targetMigration CancellationToken cancellationToken Returns Type Description Task Overrides Migrator.MigrateAsync(string, CancellationToken) Implements IMigrator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal Classes NpgsqlHistoryRepository This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlMigrator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.NpgsqlMigrationsSqlGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.NpgsqlMigrationsSqlGenerator.html",
    "title": "Class NpgsqlMigrationsSqlGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlMigrationsSqlGenerator PostgreSQL-specific implementation of MigrationsSqlGenerator. Inheritance object MigrationsSqlGenerator NpgsqlMigrationsSqlGenerator Implements IMigrationsSqlGenerator Inherited Members MigrationsSqlGenerator.Generate(AddForeignKeyOperation, IModel, MigrationCommandListBuilder, bool) MigrationsSqlGenerator.Generate(AddPrimaryKeyOperation, IModel, MigrationCommandListBuilder, bool) MigrationsSqlGenerator.Generate(AddUniqueConstraintOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.Generate(AddCheckConstraintOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.Generate(AlterSequenceOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.Generate(DropForeignKeyOperation, IModel, MigrationCommandListBuilder, bool) MigrationsSqlGenerator.Generate(DropPrimaryKeyOperation, IModel, MigrationCommandListBuilder, bool) MigrationsSqlGenerator.Generate(DropSchemaOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.Generate(DropSequenceOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.Generate(DropTableOperation, IModel, MigrationCommandListBuilder, bool) MigrationsSqlGenerator.Generate(DropUniqueConstraintOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.Generate(DropCheckConstraintOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.Generate(SqlOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.GenerateModificationCommands(InsertDataOperation, IModel) MigrationsSqlGenerator.Generate(DeleteDataOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.GenerateModificationCommands(DeleteDataOperation, IModel) MigrationsSqlGenerator.Generate(UpdateDataOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.GenerateModificationCommands(UpdateDataOperation, IModel) MigrationsSqlGenerator.SequenceOptions(AlterSequenceOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.SequenceOptions(CreateSequenceOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.SequenceOptions(string, string, SequenceOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.CreateTableColumns(CreateTableOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.ColumnDefinition(AddColumnOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.GetColumnType(string, string, string, ColumnOperation, IModel) MigrationsSqlGenerator.CreateTableConstraints(CreateTableOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.CreateTableForeignKeys(CreateTableOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.ForeignKeyConstraint(AddForeignKeyOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.CreateTablePrimaryKeyConstraint(CreateTableOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.PrimaryKeyConstraint(AddPrimaryKeyOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.CreateTableUniqueConstraints(CreateTableOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.UniqueConstraint(AddUniqueConstraintOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.CreateTableCheckConstraints(CreateTableOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.CheckConstraint(AddCheckConstraintOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.IndexTraits(MigrationOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.GenerateIndexColumnList(CreateIndexOperation, IModel, MigrationCommandListBuilder) MigrationsSqlGenerator.ForeignKeyAction(ReferentialAction, MigrationCommandListBuilder) MigrationsSqlGenerator.EndStatement(MigrationCommandListBuilder, bool) MigrationsSqlGenerator.ColumnList(string[]) MigrationsSqlGenerator.IsOldColumnSupported(IModel) MigrationsSqlGenerator.HasLegacyRenameOperations(IModel) MigrationsSqlGenerator.TryGetVersion(IModel, out string) MigrationsSqlGenerator.Dependencies MigrationsSqlGenerator.SqlGenerator MigrationsSqlGenerator.VersionComparer MigrationsSqlGenerator.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Migrations Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMigrationsSqlGenerator : MigrationsSqlGenerator, IMigrationsSqlGenerator Remarks The service lifetime is Scoped. This means that each DbContext instance will use its own instance of this service. The implementation may depend on other services registered with any lifetime. The implementation does not need to be thread-safe. See Database migrations. Constructors | Edit this page View Source NpgsqlMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies, INpgsqlSingletonOptions) Creates a new NpgsqlMigrationsSqlGenerator instance. Declaration public NpgsqlMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description MigrationsSqlGeneratorDependencies dependencies Parameter object containing dependencies for this service. INpgsqlSingletonOptions npgsqlSingletonOptions The singleton options to use. Methods | Edit this page View Source ApplyTsVectorColumnSql(ColumnOperation, IModel?, string, string?, string) Checks for a TsVectorConfig annotation on the given column, and if found, assigns the appropriate SQL to ComputedColumnSql. Declaration protected virtual void ApplyTsVectorColumnSql(ColumnOperation column, IModel? model, string name, string? schema, string table) Parameters Type Name Description ColumnOperation column IModel model string name string schema string table | Edit this page View Source ColumnDefinition(string?, string, string, ColumnOperation, IModel?, MigrationCommandListBuilder) Generates a SQL fragment for a column definition for the given column metadata. Declaration protected override void ColumnDefinition(string? schema, string table, string name, ColumnOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description string schema The schema that contains the table, or null to use the default schema. string table The table that contains the column. string name The column name. ColumnOperation operation The column metadata. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to add the SQL fragment. Overrides MigrationsSqlGenerator.ColumnDefinition(string, string, string, ColumnOperation, IModel, MigrationCommandListBuilder) | Edit this page View Source ComputedColumnDefinition(string?, string, string, ColumnOperation, IModel?, MigrationCommandListBuilder) Generates a SQL fragment for a computed column definition for the given column metadata. Declaration protected override void ComputedColumnDefinition(string? schema, string table, string name, ColumnOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description string schema The schema that contains the table, or null to use the default schema. string table The table that contains the column. string name The column name. ColumnOperation operation The column metadata. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to add the SQL fragment. Overrides MigrationsSqlGenerator.ComputedColumnDefinition(string, string, string, ColumnOperation, IModel, MigrationCommandListBuilder) | Edit this page View Source DefaultValue(object?, string?, string?, MigrationCommandListBuilder) Generates a SQL fragment for the default constraint of a column. Declaration protected override void DefaultValue(object? defaultValue, string? defaultValueSql, string? columnType, MigrationCommandListBuilder builder) Parameters Type Name Description object defaultValue The default value for the column. string defaultValueSql The SQL expression to use for the column's default constraint. string columnType Store/database type of the column. MigrationCommandListBuilder builder The command builder to use to add the SQL fragment. Overrides MigrationsSqlGenerator.DefaultValue(object, string, string, MigrationCommandListBuilder) | Edit this page View Source Generate(AddColumnOperation, IModel?, MigrationCommandListBuilder, bool) Builds commands for the given AddColumnOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(AddColumnOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description AddColumnOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. bool terminate Indicates whether or not to terminate the command after generating SQL for the operation. Overrides MigrationsSqlGenerator.Generate(AddColumnOperation, IModel, MigrationCommandListBuilder, bool) | Edit this page View Source Generate(AlterColumnOperation, IModel?, MigrationCommandListBuilder) Can be overridden by database providers to build commands for the given AlterColumnOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(AlterColumnOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterColumnOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(AlterColumnOperation, IModel, MigrationCommandListBuilder) Remarks Note that the default implementation of this method throws NotSupportedException. Providers must override if they are to support this kind of operation. | Edit this page View Source Generate(AlterDatabaseOperation, IModel?, MigrationCommandListBuilder) Can be overridden by database providers to build commands for the given AlterDatabaseOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(AlterDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(AlterDatabaseOperation, IModel, MigrationCommandListBuilder) Remarks Note that there is no default implementation of this method. Providers must override if they are to support this kind of operation. | Edit this page View Source Generate(AlterTableOperation, IModel?, MigrationCommandListBuilder) Can be overridden by database providers to build commands for the given AlterTableOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(AlterTableOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterTableOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(AlterTableOperation, IModel, MigrationCommandListBuilder) Remarks Note that the default implementation of this method does nothing because there is no common metadata relating to this operation. Providers only need to override this method if they have some provider-specific annotations that must be handled. | Edit this page View Source Generate(CreateIndexOperation, IModel?, MigrationCommandListBuilder, bool) Builds commands for the given CreateIndexOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(CreateIndexOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description CreateIndexOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. bool terminate Indicates whether or not to terminate the command after generating SQL for the operation. Overrides MigrationsSqlGenerator.Generate(CreateIndexOperation, IModel, MigrationCommandListBuilder, bool) | Edit this page View Source Generate(CreateSequenceOperation, IModel?, MigrationCommandListBuilder) Builds commands for the given CreateSequenceOperation by making calls on the given MigrationCommandListBuilder, and then terminates the final command. Declaration protected override void Generate(CreateSequenceOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description CreateSequenceOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(CreateSequenceOperation, IModel, MigrationCommandListBuilder) | Edit this page View Source Generate(CreateTableOperation, IModel?, MigrationCommandListBuilder, bool) Builds commands for the given CreateTableOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(CreateTableOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description CreateTableOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. bool terminate Indicates whether or not to terminate the command after generating SQL for the operation. Overrides MigrationsSqlGenerator.Generate(CreateTableOperation, IModel, MigrationCommandListBuilder, bool) | Edit this page View Source Generate(DropColumnOperation, IModel?, MigrationCommandListBuilder, bool) Builds commands for the given DropColumnOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(DropColumnOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description DropColumnOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. bool terminate Indicates whether or not to terminate the command after generating SQL for the operation. Overrides MigrationsSqlGenerator.Generate(DropColumnOperation, IModel, MigrationCommandListBuilder, bool) | Edit this page View Source Generate(DropIndexOperation, IModel?, MigrationCommandListBuilder, bool) Can be overridden by database providers to build commands for the given DropIndexOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(DropIndexOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description DropIndexOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. bool terminate Indicates whether or not to terminate the command after generating SQL for the operation. Overrides MigrationsSqlGenerator.Generate(DropIndexOperation, IModel, MigrationCommandListBuilder, bool) Remarks Note that the default implementation of this method throws NotSupportedException. Providers must override if they are to support this kind of operation. | Edit this page View Source Generate(EnsureSchemaOperation, IModel?, MigrationCommandListBuilder) Can be overridden by database providers to build commands for the given EnsureSchemaOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(EnsureSchemaOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description EnsureSchemaOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(EnsureSchemaOperation, IModel, MigrationCommandListBuilder) Remarks Note that the default implementation of this method throws NotSupportedException. Providers must override if they are to support this kind of operation. | Edit this page View Source Generate(InsertDataOperation, IModel?, MigrationCommandListBuilder, bool) Builds commands for the given InsertDataOperation by making calls on the given MigrationCommandListBuilder, and then terminates the final command. Declaration protected override void Generate(InsertDataOperation operation, IModel? model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description InsertDataOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. bool terminate Indicates whether or not to terminate the command after generating SQL for the operation. Overrides MigrationsSqlGenerator.Generate(InsertDataOperation, IModel, MigrationCommandListBuilder, bool) | Edit this page View Source Generate(MigrationOperation, IModel?, MigrationCommandListBuilder) Builds commands for the given MigrationOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(MigrationOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description MigrationOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(MigrationOperation, IModel, MigrationCommandListBuilder) Remarks This method uses a double-dispatch mechanism to call one of the 'Generate' methods that are specific to a certain subtype of MigrationOperation. Typically database providers will override these specific methods rather than this method. However, providers can override this methods to handle provider-specific operations. | Edit this page View Source Generate(RenameColumnOperation, IModel?, MigrationCommandListBuilder) Can be overridden by database providers to build commands for the given RenameColumnOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(RenameColumnOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameColumnOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(RenameColumnOperation, IModel, MigrationCommandListBuilder) Remarks Note that the default implementation of this method throws NotSupportedException. Providers must override if they are to support this kind of operation. | Edit this page View Source Generate(RenameIndexOperation, IModel?, MigrationCommandListBuilder) Can be overridden by database providers to build commands for the given RenameIndexOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(RenameIndexOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameIndexOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(RenameIndexOperation, IModel, MigrationCommandListBuilder) Remarks Note that the default implementation of this method throws NotSupportedException. Providers must override if they are to support this kind of operation. | Edit this page View Source Generate(RenameSequenceOperation, IModel?, MigrationCommandListBuilder) Can be overridden by database providers to build commands for the given RenameSequenceOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(RenameSequenceOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameSequenceOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(RenameSequenceOperation, IModel, MigrationCommandListBuilder) Remarks Note that the default implementation of this method throws NotSupportedException. Providers must override if they are to support this kind of operation. | Edit this page View Source Generate(RenameTableOperation, IModel?, MigrationCommandListBuilder) Can be overridden by database providers to build commands for the given RenameTableOperation by making calls on the given MigrationCommandListBuilder. Declaration protected override void Generate(RenameTableOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameTableOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(RenameTableOperation, IModel, MigrationCommandListBuilder) Remarks Note that the default implementation of this method throws NotSupportedException. Providers must override if they are to support this kind of operation. | Edit this page View Source Generate(RestartSequenceOperation, IModel?, MigrationCommandListBuilder) Builds commands for the given RestartSequenceOperation by making calls on the given MigrationCommandListBuilder, and then terminates the final command. Declaration protected override void Generate(RestartSequenceOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description RestartSequenceOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. Overrides MigrationsSqlGenerator.Generate(RestartSequenceOperation, IModel, MigrationCommandListBuilder) | Edit this page View Source Generate(NpgsqlCreateDatabaseOperation, IModel?, MigrationCommandListBuilder) Declaration protected virtual void Generate(NpgsqlCreateDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description NpgsqlCreateDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Edit this page View Source Generate(NpgsqlDropDatabaseOperation, IModel?, MigrationCommandListBuilder) Declaration public virtual void Generate(NpgsqlDropDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description NpgsqlDropDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Edit this page View Source Generate(IReadOnlyList<MigrationOperation>, IModel?, MigrationsSqlGenerationOptions) Generates commands from a list of operations. Declaration public override IReadOnlyList<MigrationCommand> Generate(IReadOnlyList<MigrationOperation> operations, IModel? model = null, MigrationsSqlGenerationOptions options = MigrationsSqlGenerationOptions.Default) Parameters Type Name Description IReadOnlyList<MigrationOperation> operations The operations. IModel model The target model which may be null if the operations exist without a model. MigrationsSqlGenerationOptions options The options to use when generating commands. Returns Type Description IReadOnlyList<MigrationCommand> The list of commands to be executed or scripted. Overrides MigrationsSqlGenerator.Generate(IReadOnlyList<MigrationOperation>, IModel, MigrationsSqlGenerationOptions) | Edit this page View Source GenerateAddEnumLabel(PostgresEnum, string, string?, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateAddEnumLabel(PostgresEnum enumType, string addedLabel, string? beforeLabel, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresEnum enumType string addedLabel string beforeLabel IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateCollationStatements(AlterDatabaseOperation, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateCollationStatements(AlterDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateCreateCollation(PostgresCollation, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateCollation(PostgresCollation collation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresCollation collation IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateCreateEnum(PostgresEnum, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateEnum(PostgresEnum enumType, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresEnum enumType IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateCreateExtension(PostgresExtension, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateExtension(PostgresExtension extension, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresExtension extension IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateCreateRange(PostgresRange, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateRange(PostgresRange rangeType, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresRange rangeType IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateDropCollation(PostgresCollation, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateDropCollation(PostgresCollation collation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresCollation collation IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateDropEnum(PostgresEnum, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateDropEnum(PostgresEnum enumType, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresEnum enumType IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateDropRange(PostgresRange, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateDropRange(PostgresRange rangeType, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresRange rangeType IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateEnumStatements(AlterDatabaseOperation, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateEnumStatements(AlterDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Edit this page View Source GenerateRangeStatements(AlterDatabaseOperation, IModel?, MigrationCommandListBuilder) Declaration protected virtual void GenerateRangeStatements(AlterDatabaseOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Edit this page View Source IdentityDefinition(ColumnOperation, MigrationCommandListBuilder) Declaration protected virtual void IdentityDefinition(ColumnOperation operation, MigrationCommandListBuilder builder) Parameters Type Name Description ColumnOperation operation MigrationCommandListBuilder builder | Edit this page View Source IndexOptions(CreateIndexOperation, IModel?, MigrationCommandListBuilder) Generates a SQL fragment for extras (filter, included columns, options) of an index from a CreateIndexOperation. Declaration protected override void IndexOptions(CreateIndexOperation operation, IModel? model, MigrationCommandListBuilder builder) Parameters Type Name Description CreateIndexOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to add the SQL fragment. Overrides MigrationsSqlGenerator.IndexOptions(CreateIndexOperation, IModel, MigrationCommandListBuilder) | Edit this page View Source RecreateIndexes(IColumn?, MigrationOperation, MigrationCommandListBuilder) Declaration protected virtual void RecreateIndexes(IColumn? column, MigrationOperation currentOperation, MigrationCommandListBuilder builder) Parameters Type Name Description IColumn column MigrationOperation currentOperation MigrationCommandListBuilder builder | Edit this page View Source Rename(string?, string, string, string, MigrationCommandListBuilder) Renames a database object such as a table, index, or sequence. Declaration public virtual void Rename(string? schema, string name, string newName, string type, MigrationCommandListBuilder builder) Parameters Type Name Description string schema The current schema of the object to rename. string name The current name of the object to rename. string newName The new name. string type The type of the object (e.g. TABLE, INDEX, SEQUENCE). MigrationCommandListBuilder builder The builder to which operations are appended. | Edit this page View Source Transfer(string, string?, string, string, MigrationCommandListBuilder) Transfers a database object such as a table, index, or sequence between schemas. Declaration public virtual void Transfer(string newSchema, string? schema, string name, string type, MigrationCommandListBuilder builder) Parameters Type Name Description string newSchema The new schema. string schema The current schema. string name The name of the object to transfer. string type The type of the object (e.g. TABLE, INDEX, SEQUENCE). MigrationCommandListBuilder builder The builder to which operations are appended. Implements IMigrationsSqlGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlCreateDatabaseOperation.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlCreateDatabaseOperation.html",
    "title": "Class NpgsqlCreateDatabaseOperation | Npgsql Documentation",
    "keywords": "Class NpgsqlCreateDatabaseOperation A PostgreSQL-specific MigrationOperation to create a database. Inheritance object AnnotatableBase Annotatable MigrationOperation DatabaseOperation NpgsqlCreateDatabaseOperation Implements IAnnotatable IMutableAnnotatable IReadOnlyAnnotatable Inherited Members DatabaseOperation.Collation MigrationOperation.IsDestructiveChange Annotatable.EnsureReadOnly() Annotatable.EnsureMutable() AnnotatableBase.GetAnnotations() AnnotatableBase.AddAnnotation(string, object) AnnotatableBase.AddAnnotation(string, Annotation) AnnotatableBase.AddAnnotations(IEnumerable<IAnnotation>) AnnotatableBase.AddAnnotations(IReadOnlyDictionary<string, object>) AnnotatableBase.SetAnnotation(string, object) AnnotatableBase.SetAnnotation(string, Annotation, Annotation) AnnotatableBase.OnAnnotationSet(string, Annotation, Annotation) AnnotatableBase.FindAnnotation(string) AnnotatableBase.GetAnnotation(string) AnnotatableBase.RemoveAnnotation(string) AnnotatableBase.CreateAnnotation(string, object) AnnotatableBase.GetRuntimeAnnotations() AnnotatableBase.AddRuntimeAnnotation(string, object) AnnotatableBase.AddRuntimeAnnotation(string, Annotation) AnnotatableBase.AddRuntimeAnnotations(IEnumerable<Annotation>) AnnotatableBase.AddRuntimeAnnotations(IReadOnlyDictionary<string, object>) AnnotatableBase.SetRuntimeAnnotation(string, object) AnnotatableBase.SetRuntimeAnnotation(string, Annotation, Annotation) AnnotatableBase.GetOrAddRuntimeAnnotationValue<TValue, TArg>(string, Func<TArg, TValue>, TArg) AnnotatableBase.FindRuntimeAnnotation(string) AnnotatableBase.RemoveRuntimeAnnotation(string) AnnotatableBase.CreateRuntimeAnnotation(string, object) AnnotatableBase.IsReadOnly AnnotatableBase.this[string] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCreateDatabaseOperation : DatabaseOperation, IAnnotatable, IMutableAnnotatable, IReadOnlyAnnotatable Remarks See Database migrations. Properties | Edit this page View Source Name The name of the database. Declaration public virtual string Name { get; set; } Property Value Type Description string | Edit this page View Source Tablespace The PostgreSQL tablespace in which to create the database. Declaration public virtual string? Tablespace { get; set; } Property Value Type Description string | Edit this page View Source Template The PostgreSQL database to use as a template for the new database to be created. Declaration public virtual string? Template { get; set; } Property Value Type Description string Implements IAnnotatable IMutableAnnotatable IReadOnlyAnnotatable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlDropDatabaseOperation.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlDropDatabaseOperation.html",
    "title": "Class NpgsqlDropDatabaseOperation | Npgsql Documentation",
    "keywords": "Class NpgsqlDropDatabaseOperation A PostgreSQL-specific MigrationOperation to drop a database. Inheritance object AnnotatableBase Annotatable MigrationOperation NpgsqlDropDatabaseOperation Implements IAnnotatable IMutableAnnotatable IReadOnlyAnnotatable Inherited Members MigrationOperation.IsDestructiveChange Annotatable.EnsureReadOnly() Annotatable.EnsureMutable() AnnotatableBase.GetAnnotations() AnnotatableBase.AddAnnotation(string, object) AnnotatableBase.AddAnnotation(string, Annotation) AnnotatableBase.AddAnnotations(IEnumerable<IAnnotation>) AnnotatableBase.AddAnnotations(IReadOnlyDictionary<string, object>) AnnotatableBase.SetAnnotation(string, object) AnnotatableBase.SetAnnotation(string, Annotation, Annotation) AnnotatableBase.OnAnnotationSet(string, Annotation, Annotation) AnnotatableBase.FindAnnotation(string) AnnotatableBase.GetAnnotation(string) AnnotatableBase.RemoveAnnotation(string) AnnotatableBase.CreateAnnotation(string, object) AnnotatableBase.GetRuntimeAnnotations() AnnotatableBase.AddRuntimeAnnotation(string, object) AnnotatableBase.AddRuntimeAnnotation(string, Annotation) AnnotatableBase.AddRuntimeAnnotations(IEnumerable<Annotation>) AnnotatableBase.AddRuntimeAnnotations(IReadOnlyDictionary<string, object>) AnnotatableBase.SetRuntimeAnnotation(string, object) AnnotatableBase.SetRuntimeAnnotation(string, Annotation, Annotation) AnnotatableBase.GetOrAddRuntimeAnnotationValue<TValue, TArg>(string, Func<TArg, TValue>, TArg) AnnotatableBase.FindRuntimeAnnotation(string) AnnotatableBase.RemoveRuntimeAnnotation(string) AnnotatableBase.CreateRuntimeAnnotation(string, object) AnnotatableBase.IsReadOnly AnnotatableBase.this[string] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDropDatabaseOperation : MigrationOperation, IAnnotatable, IMutableAnnotatable, IReadOnlyAnnotatable Remarks See Database migrations. Properties | Edit this page View Source Name The name of the database. Declaration public virtual string Name { get; set; } Property Value Type Description string Implements IAnnotatable IMutableAnnotatable IReadOnlyAnnotatable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations Classes NpgsqlCreateDatabaseOperation A PostgreSQL-specific MigrationOperation to create a database. NpgsqlDropDatabaseOperation A PostgreSQL-specific MigrationOperation to drop a database."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations Classes NpgsqlMigrationsSqlGenerator PostgreSQL-specific implementation of MigrationsSqlGenerator."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.NpgsqlNetTopologySuiteCodeGeneratorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.NpgsqlNetTopologySuiteCodeGeneratorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteCodeGeneratorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteCodeGeneratorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ProviderCodeGeneratorPlugin NpgsqlNetTopologySuiteCodeGeneratorPlugin Implements IProviderCodeGeneratorPlugin Inherited Members ProviderCodeGeneratorPlugin.GenerateContextOptions() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteCodeGeneratorPlugin : ProviderCodeGeneratorPlugin, IProviderCodeGeneratorPlugin Methods | Edit this page View Source GenerateProviderOptions() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override MethodCallCodeFragment GenerateProviderOptions() Returns Type Description MethodCallCodeFragment Overrides ProviderCodeGeneratorPlugin.GenerateProviderOptions() Implements IProviderCodeGeneratorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal Classes NpgsqlNetTopologySuiteCodeGeneratorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin Implements IAggregateMethodCallTranslatorPlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin : IAggregateMethodCallTranslatorPlugin Constructors | Edit this page View Source NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin(ISqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Properties | Edit this page View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IAggregateMethodCallTranslator> Translators { get; } Property Value Type Description IEnumerable<IAggregateMethodCallTranslator> Implements IAggregateMethodCallTranslatorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeAggregateMethodTranslator.html",
    "title": "Class NpgsqlNodaTimeAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNodaTimeAggregateMethodTranslator Implements IAggregateMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Edit this page View Source NpgsqlNodaTimeAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Edit this page View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IAggregateMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeEvaluatableExpressionFilterPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeEvaluatableExpressionFilterPlugin.html",
    "title": "Class NpgsqlNodaTimeEvaluatableExpressionFilterPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeEvaluatableExpressionFilterPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNodaTimeEvaluatableExpressionFilterPlugin Implements IEvaluatableExpressionFilterPlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeEvaluatableExpressionFilterPlugin : IEvaluatableExpressionFilterPlugin Methods | Edit this page View Source IsEvaluatableExpression(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool IsEvaluatableExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description bool Implements IEvaluatableExpressionFilterPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMemberTranslator.html",
    "title": "Class NpgsqlNodaTimeMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNodaTimeMemberTranslator Implements IMemberTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMemberTranslator : IMemberTranslator Constructors | Edit this page View Source NpgsqlNodaTimeMemberTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeMemberTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) Translates a LINQ MemberExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Expression. MemberInfo member The member info from Member. Type returnType The return type from Type. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MemberExpression. Implements IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMemberTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMemberTranslatorPlugin.html",
    "title": "Class NpgsqlNodaTimeMemberTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMemberTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. Inheritance object NpgsqlNodaTimeMemberTranslatorPlugin Implements IMemberTranslatorPlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMemberTranslatorPlugin : IMemberTranslatorPlugin Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Edit this page View Source NpgsqlNodaTimeMemberTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeMemberTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Edit this page View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IMemberTranslator> Translators { get; } Property Value Type Description IEnumerable<IMemberTranslator> Implements IMemberTranslatorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMethodCallTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMethodCallTranslator.html",
    "title": "Class NpgsqlNodaTimeMethodCallTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMethodCallTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNodaTimeMethodCallTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMethodCallTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlNodaTimeMethodCallTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeMethodCallTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.NpgsqlNodaTimeMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNodaTimeMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMethodCallTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. Inheritance object NpgsqlNodaTimeMethodCallTranslatorPlugin Implements IMethodCallTranslatorPlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMethodCallTranslatorPlugin : IMethodCallTranslatorPlugin Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Edit this page View Source NpgsqlNodaTimeMethodCallTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNodaTimeMethodCallTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Edit this page View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IMethodCallTranslator> Translators { get; } Property Value Type Description IEnumerable<IMethodCallTranslator> Implements IMethodCallTranslatorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Query.Internal Classes NpgsqlNodaTimeAggregateMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeEvaluatableExpressionFilterPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeMemberTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. NpgsqlNodaTimeMethodCallTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeMethodCallTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.NpgsqlNodaTimeCodeGeneratorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.NpgsqlNodaTimeCodeGeneratorPlugin.html",
    "title": "Class NpgsqlNodaTimeCodeGeneratorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeCodeGeneratorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ProviderCodeGeneratorPlugin NpgsqlNodaTimeCodeGeneratorPlugin Implements IProviderCodeGeneratorPlugin Inherited Members ProviderCodeGeneratorPlugin.GenerateContextOptions() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeCodeGeneratorPlugin : ProviderCodeGeneratorPlugin, IProviderCodeGeneratorPlugin Methods | Edit this page View Source GenerateProviderOptions() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override MethodCallCodeFragment GenerateProviderOptions() Returns Type Description MethodCallCodeFragment Overrides ProviderCodeGeneratorPlugin.GenerateProviderOptions() Implements IProviderCodeGeneratorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal Classes NpgsqlNodaTimeCodeGeneratorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NpgsqlRetryingExecutionStrategy.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NpgsqlRetryingExecutionStrategy.html",
    "title": "Class NpgsqlRetryingExecutionStrategy | Npgsql Documentation",
    "keywords": "Class NpgsqlRetryingExecutionStrategy An IExecutionStrategy implementation for retrying failed executions on PostgreSQL. Inheritance object ExecutionStrategy NpgsqlRetryingExecutionStrategy Implements IExecutionStrategy Inherited Members ExecutionStrategy.DefaultMaxRetryCount ExecutionStrategy.DefaultMaxDelay ExecutionStrategy.Execute<TState, TResult>(TState, Func<DbContext, TState, TResult>, Func<DbContext, TState, ExecutionResult<TResult>>) ExecutionStrategy.ExecuteAsync<TState, TResult>(TState, Func<DbContext, TState, CancellationToken, Task<TResult>>, Func<DbContext, TState, CancellationToken, Task<ExecutionResult<TResult>>>, CancellationToken) ExecutionStrategy.OnFirstExecution() ExecutionStrategy.OnRetry() ExecutionStrategy.GetNextDelay(Exception) ExecutionStrategy.ShouldVerifySuccessOn(Exception) ExecutionStrategy.CallOnWrappedException<TResult>(Exception, Func<Exception, TResult>) ExecutionStrategy.ExceptionsEncountered ExecutionStrategy.Random ExecutionStrategy.MaxRetryCount ExecutionStrategy.MaxRetryDelay ExecutionStrategy.Dependencies ExecutionStrategy.Current ExecutionStrategy.RetriesOnFailure object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRetryingExecutionStrategy : ExecutionStrategy, IExecutionStrategy Remarks The service lifetime is Scoped. This means that each DbContext instance will use its own instance of this service. The implementation may depend on other services registered with any lifetime. The implementation does not need to be thread-safe. See Connection resiliency and database retries for more information and examples. Constructors | Edit this page View Source NpgsqlRetryingExecutionStrategy(DbContext) Creates a new instance of NpgsqlRetryingExecutionStrategy. Declaration public NpgsqlRetryingExecutionStrategy(DbContext context) Parameters Type Name Description DbContext context The context on which the operations will be invoked. Remarks The default retry limit is 6, which means that the total amount of time spent before failing is about a minute. | Edit this page View Source NpgsqlRetryingExecutionStrategy(DbContext, int) Creates a new instance of NpgsqlRetryingExecutionStrategy. Declaration public NpgsqlRetryingExecutionStrategy(DbContext context, int maxRetryCount) Parameters Type Name Description DbContext context The context on which the operations will be invoked. int maxRetryCount The maximum number of retry attempts. | Edit this page View Source NpgsqlRetryingExecutionStrategy(DbContext, int, TimeSpan, ICollection<string>?) Creates a new instance of NpgsqlRetryingExecutionStrategy. Declaration public NpgsqlRetryingExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay, ICollection<string>? errorCodesToAdd) Parameters Type Name Description DbContext context The context on which the operations will be invoked. int maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay between retries. ICollection<string> errorCodesToAdd Additional error codes that should be considered transient. | Edit this page View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies) Creates a new instance of NpgsqlRetryingExecutionStrategy. Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. | Edit this page View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies, ICollection<string>?) Creates a new instance of NpgsqlRetryingExecutionStrategy. Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, ICollection<string>? errorCodesToAdd) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. ICollection<string> errorCodesToAdd Additional error codes that should be considered transient. | Edit this page View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies, int) Creates a new instance of NpgsqlRetryingExecutionStrategy. Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. int maxRetryCount The maximum number of retry attempts. | Edit this page View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies, int, TimeSpan, ICollection<string>?) Creates a new instance of NpgsqlRetryingExecutionStrategy. Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay, ICollection<string>? errorCodesToAdd) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. int maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay between retries. ICollection<string> errorCodesToAdd Additional SQL error numbers that should be considered transient. Methods | Edit this page View Source ShouldRetryOn(Exception?) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration protected override bool ShouldRetryOn(Exception? exception) Parameters Type Name Description Exception exception The exception object to be verified. Returns Type Description bool true if the specified exception is considered as transient, otherwise false. Overrides ExecutionStrategy.ShouldRetryOn(Exception) Remarks See Connection resiliency and database retries for more information and examples. Implements IExecutionStrategy"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlAggregateMethodCallTranslatorProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlAggregateMethodCallTranslatorProvider.html",
    "title": "Class NpgsqlAggregateMethodCallTranslatorProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlAggregateMethodCallTranslatorProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object RelationalAggregateMethodCallTranslatorProvider NpgsqlAggregateMethodCallTranslatorProvider Implements IAggregateMethodCallTranslatorProvider Inherited Members RelationalAggregateMethodCallTranslatorProvider.Translate(IModel, MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) RelationalAggregateMethodCallTranslatorProvider.AddTranslators(IEnumerable<IAggregateMethodCallTranslator>) RelationalAggregateMethodCallTranslatorProvider.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlAggregateMethodCallTranslatorProvider : RelationalAggregateMethodCallTranslatorProvider, IAggregateMethodCallTranslatorProvider Constructors | Edit this page View Source NpgsqlAggregateMethodCallTranslatorProvider(RelationalAggregateMethodCallTranslatorProviderDependencies, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlAggregateMethodCallTranslatorProvider(RelationalAggregateMethodCallTranslatorProviderDependencies dependencies, IModel model) Parameters Type Name Description RelationalAggregateMethodCallTranslatorProviderDependencies dependencies IModel model Implements IAggregateMethodCallTranslatorProvider"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlArrayMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlArrayMethodTranslator.html",
    "title": "Class NpgsqlArrayMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayMethodTranslator Translates method and property calls on arrays/lists into their corresponding PostgreSQL operations. Inheritance object NpgsqlArrayMethodTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayMethodTranslator : IMethodCallTranslator Remarks https://www.postgresql.org/docs/current/static/functions-array.html Constructors | Edit this page View Source NpgsqlArrayMethodTranslator(NpgsqlSqlExpressionFactory, NpgsqlJsonPocoTranslator) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlArrayMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, NpgsqlJsonPocoTranslator jsonPocoTranslator) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory NpgsqlJsonPocoTranslator jsonPocoTranslator Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlBigIntegerMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlBigIntegerMemberTranslator.html",
    "title": "Class NpgsqlBigIntegerMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlBigIntegerMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlBigIntegerMemberTranslator Implements IMemberTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBigIntegerMemberTranslator : IMemberTranslator Constructors | Edit this page View Source NpgsqlBigIntegerMemberTranslator(NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlBigIntegerMemberTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) Translates a LINQ MemberExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Expression. MemberInfo member The member info from Member. Type returnType The return type from Type. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MemberExpression. Implements IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlByteArrayMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlByteArrayMethodTranslator.html",
    "title": "Class NpgsqlByteArrayMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlByteArrayMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlByteArrayMethodTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlByteArrayMethodTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlByteArrayMethodTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlByteArrayMethodTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlConvertTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlConvertTranslator.html",
    "title": "Class NpgsqlConvertTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlConvertTranslator Translates methods defined on Convert into PostgreSQL CAST expressions. Inheritance object NpgsqlConvertTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlConvertTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlConvertTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlConvertTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMemberTranslator.html",
    "title": "Class NpgsqlDateTimeMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTimeMemberTranslator Provides translation services for DateTime members. Inheritance object NpgsqlDateTimeMemberTranslator Implements IMemberTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateTimeMemberTranslator : IMemberTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Edit this page View Source NpgsqlDateTimeMemberTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDateTimeMemberTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) Translates a LINQ MemberExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Expression. MemberInfo member The member info from Member. Type returnType The return type from Type. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MemberExpression. | Edit this page View Source TranslateDateTimeOffset(SqlExpression, MemberInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? TranslateDateTimeOffset(SqlExpression instance, MemberInfo member) Parameters Type Name Description SqlExpression instance MemberInfo member Returns Type Description SqlExpression Implements IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMethodTranslator.html",
    "title": "Class NpgsqlDateTimeMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTimeMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlDateTimeMethodTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateTimeMethodTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlDateTimeMethodTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDateTimeMethodTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFullTextSearchMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFullTextSearchMethodTranslator.html",
    "title": "Class NpgsqlFullTextSearchMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlFullTextSearchMethodTranslator Provides translations for PostgreSQL full-text search methods. Inheritance object NpgsqlFullTextSearchMethodTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlFullTextSearchMethodTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlFullTextSearchMethodTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlFullTextSearchMethodTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFuzzyStringMatchMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFuzzyStringMatchMethodTranslator.html",
    "title": "Class NpgsqlFuzzyStringMatchMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlFuzzyStringMatchMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlFuzzyStringMatchMethodTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlFuzzyStringMatchMethodTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlFuzzyStringMatchMethodTranslator(NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlFuzzyStringMatchMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMemberTranslator.html",
    "title": "Class NpgsqlGeometryMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlGeometryMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlGeometryMemberTranslator Implements IMemberTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlGeometryMemberTranslator : IMemberTranslator Constructors | Edit this page View Source NpgsqlGeometryMemberTranslator(ISqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlGeometryMemberTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MemberInfo member Type returnType IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMethodTranslator.html",
    "title": "Class NpgsqlGeometryMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlGeometryMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlGeometryMethodTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlGeometryMethodTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlGeometryMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlGeometryMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDbFunctionsTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDbFunctionsTranslator.html",
    "title": "Class NpgsqlJsonDbFunctionsTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonDbFunctionsTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlJsonDbFunctionsTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonDbFunctionsTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlJsonDbFunctionsTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlJsonDbFunctionsTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDomTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDomTranslator.html",
    "title": "Class NpgsqlJsonDomTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonDomTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlJsonDomTranslator Implements IMemberTranslator IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonDomTranslator : IMemberTranslator, IMethodCallTranslator Constructors | Edit this page View Source NpgsqlJsonDomTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlJsonDomTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MemberInfo member Type returnType IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMemberTranslator IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonPocoTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonPocoTranslator.html",
    "title": "Class NpgsqlJsonPocoTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonPocoTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlJsonPocoTranslator Implements IMemberTranslator IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonPocoTranslator : IMemberTranslator, IMethodCallTranslator Constructors | Edit this page View Source NpgsqlJsonPocoTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlJsonPocoTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MemberInfo member Type returnType IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression | Edit this page View Source TranslateArrayLength(SqlExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? TranslateArrayLength(SqlExpression expression) Parameters Type Name Description SqlExpression expression Returns Type Description SqlExpression | Edit this page View Source TranslateMemberAccess(SqlExpression, SqlExpression, Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? TranslateMemberAccess(SqlExpression instance, SqlExpression member, Type returnType) Parameters Type Name Description SqlExpression instance SqlExpression member Type returnType Returns Type Description SqlExpression Implements IMemberTranslator IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLTreeTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLTreeTranslator.html",
    "title": "Class NpgsqlLTreeTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlLTreeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlLTreeTranslator Implements IMethodCallTranslator IMemberTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLTreeTranslator : IMethodCallTranslator, IMemberTranslator Constructors | Edit this page View Source NpgsqlLTreeTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlLTreeTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MemberInfo member Type returnType IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLikeTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLikeTranslator.html",
    "title": "Class NpgsqlLikeTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlLikeTranslator Translates DbFunctionsExtensions.Like methods into PostgreSQL LIKE expressions. Inheritance object NpgsqlLikeTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLikeTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlLikeTranslator(NpgsqlSqlExpressionFactory) Initializes a new instance of the NpgsqlMathTranslator class. Declaration public NpgsqlLikeTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory The SQL expression factory to use when generating expressions.. Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMathTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMathTranslator.html",
    "title": "Class NpgsqlMathTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlMathTranslator Provides translation services for static Math methods.. Inheritance object NpgsqlMathTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMathTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-math.html https://www.postgresql.org/docs/current/static/functions-conditional.html#FUNCTIONS-GREATEST-LEAST Constructors | Edit this page View Source NpgsqlMathTranslator(IRelationalTypeMappingSource, ISqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMathTranslator(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory IModel model Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMemberTranslatorProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMemberTranslatorProvider.html",
    "title": "Class NpgsqlMemberTranslatorProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlMemberTranslatorProvider A composite member translator that dispatches to multiple specialized member translators specific to Npgsql. Inheritance object RelationalMemberTranslatorProvider NpgsqlMemberTranslatorProvider Implements IMemberTranslatorProvider Inherited Members RelationalMemberTranslatorProvider.Translate(SqlExpression, MemberInfo, Type, IDiagnosticsLogger<DbLoggerCategory.Query>) RelationalMemberTranslatorProvider.AddTranslators(IEnumerable<IMemberTranslator>) RelationalMemberTranslatorProvider.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMemberTranslatorProvider : RelationalMemberTranslatorProvider, IMemberTranslatorProvider Constructors | Edit this page View Source NpgsqlMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies, IModel, IRelationalTypeMappingSource, IDbContextOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies, IModel model, IRelationalTypeMappingSource typeMappingSource, IDbContextOptions contextOptions) Parameters Type Name Description RelationalMemberTranslatorProviderDependencies dependencies IModel model IRelationalTypeMappingSource typeMappingSource IDbContextOptions contextOptions Properties | Edit this page View Source JsonPocoTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlJsonPocoTranslator JsonPocoTranslator { get; } Property Value Type Description NpgsqlJsonPocoTranslator Implements IMemberTranslatorProvider"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMethodCallTranslatorProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMethodCallTranslatorProvider.html",
    "title": "Class NpgsqlMethodCallTranslatorProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlMethodCallTranslatorProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object RelationalMethodCallTranslatorProvider NpgsqlMethodCallTranslatorProvider Implements IMethodCallTranslatorProvider Inherited Members RelationalMethodCallTranslatorProvider.Translate(IModel, SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<DbLoggerCategory.Query>) RelationalMethodCallTranslatorProvider.AddTranslators(IEnumerable<IMethodCallTranslator>) RelationalMethodCallTranslatorProvider.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMethodCallTranslatorProvider : RelationalMethodCallTranslatorProvider, IMethodCallTranslatorProvider Constructors | Edit this page View Source NpgsqlMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies, IModel, IDbContextOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies, IModel model, IDbContextOptions contextOptions) Parameters Type Name Description RelationalMethodCallTranslatorProviderDependencies dependencies IModel model IDbContextOptions contextOptions Properties | Edit this page View Source LTreeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlLTreeTranslator LTreeTranslator { get; } Property Value Type Description NpgsqlLTreeTranslator Implements IMethodCallTranslatorProvider"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMiscAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMiscAggregateMethodTranslator.html",
    "title": "Class NpgsqlMiscAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlMiscAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlMiscAggregateMethodTranslator Implements IAggregateMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMiscAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Edit this page View Source NpgsqlMiscAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMiscAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource, IModel model) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource IModel model Methods | Edit this page View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IAggregateMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin Implements IAggregateMethodCallTranslatorPlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin : IAggregateMethodCallTranslatorPlugin Constructors | Edit this page View Source NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Edit this page View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IAggregateMethodCallTranslator> Translators { get; } Property Value Type Description IEnumerable<IAggregateMethodCallTranslator> Implements IAggregateMethodCallTranslatorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteAggregateMethodTranslator.html",
    "title": "Class NpgsqlNetTopologySuiteAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNetTopologySuiteAggregateMethodTranslator Implements IAggregateMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Edit this page View Source NpgsqlNetTopologySuiteAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Edit this page View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IAggregateMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMemberTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMemberTranslatorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteMemberTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteMemberTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNetTopologySuiteMemberTranslatorPlugin Implements IMemberTranslatorPlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteMemberTranslatorPlugin : IMemberTranslatorPlugin Constructors | Edit this page View Source NpgsqlNetTopologySuiteMemberTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteMemberTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Edit this page View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IMemberTranslator> Translators { get; } Property Value Type Description IEnumerable<IMemberTranslator> Implements IMemberTranslatorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNetTopologySuiteMethodCallTranslatorPlugin Implements IMethodCallTranslatorPlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteMethodCallTranslatorPlugin : IMethodCallTranslatorPlugin Constructors | Edit this page View Source NpgsqlNetTopologySuiteMethodCallTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteMethodCallTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Edit this page View Source Translators This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IEnumerable<IMethodCallTranslator> Translators { get; } Property Value Type Description IEnumerable<IMethodCallTranslator> Implements IMethodCallTranslatorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetworkTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetworkTranslator.html",
    "title": "Class NpgsqlNetworkTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNetworkTranslator Provides translation services for operators and functions of PostgreSQL network typess (cidr, inet, macaddr, macaddr8). Inheritance object NpgsqlNetworkTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlNetworkTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-net.html Constructors | Edit this page View Source NpgsqlNetworkTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetworkTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNewGuidTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNewGuidTranslator.html",
    "title": "Class NpgsqlNewGuidTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNewGuidTranslator Provides translation services for PostgreSQL UUID functions. Inheritance object NpgsqlNewGuidTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlNewGuidTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/datatype-uuid.html Constructors | Edit this page View Source NpgsqlNewGuidTranslator(ISqlExpressionFactory, Version?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNewGuidTranslator(ISqlExpressionFactory sqlExpressionFactory, Version? postgresVersion) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Version postgresVersion Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlObjectToStringTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlObjectToStringTranslator.html",
    "title": "Class NpgsqlObjectToStringTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlObjectToStringTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlObjectToStringTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlObjectToStringTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlObjectToStringTranslator(IRelationalTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlObjectToStringTranslator(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlQueryableAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlQueryableAggregateMethodTranslator.html",
    "title": "Class NpgsqlQueryableAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryableAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlQueryableAggregateMethodTranslator Implements IAggregateMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryableAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Edit this page View Source NpgsqlQueryableAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryableAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Edit this page View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IAggregateMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRandomTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRandomTranslator.html",
    "title": "Class NpgsqlRandomTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRandomTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlRandomTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRandomTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlRandomTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRandomTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRangeTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRangeTranslator.html",
    "title": "Class NpgsqlRangeTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRangeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlRangeTranslator Implements IMethodCallTranslator IMemberTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRangeTranslator : IMethodCallTranslator, IMemberTranslator Constructors | Edit this page View Source NpgsqlRangeTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRangeTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory npgsqlSqlExpressionFactory, IModel model, bool supportsMultiranges) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory npgsqlSqlExpressionFactory IModel model bool supportsMultiranges Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) Translates a LINQ MemberExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Expression. MemberInfo member The member info from Member. Type returnType The return type from Type. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MemberExpression. | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRegexIsMatchTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRegexIsMatchTranslator.html",
    "title": "Class NpgsqlRegexIsMatchTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRegexIsMatchTranslator Translates Regex.IsMatch calls into PostgreSQL regex expressions for database-side processing. Inheritance object NpgsqlRegexIsMatchTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRegexIsMatchTranslator : IMethodCallTranslator Remarks http://www.postgresql.org/docs/current/static/functions-matching.html Constructors | Edit this page View Source NpgsqlRegexIsMatchTranslator(NpgsqlSqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRegexIsMatchTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRowValueTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRowValueTranslator.html",
    "title": "Class NpgsqlRowValueTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRowValueTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlRowValueTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRowValueTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlRowValueTranslator(NpgsqlSqlExpressionFactory) Initializes a new instance of the NpgsqlRowValueTranslator class. Declaration public NpgsqlRowValueTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStatisticsAggregateMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStatisticsAggregateMethodTranslator.html",
    "title": "Class NpgsqlStatisticsAggregateMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlStatisticsAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlStatisticsAggregateMethodTranslator Implements IAggregateMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStatisticsAggregateMethodTranslator : IAggregateMethodCallTranslator Constructors | Edit this page View Source NpgsqlStatisticsAggregateMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlStatisticsAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Edit this page View Source Translate(MethodInfo, EnumerableExpression, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description MethodInfo method EnumerableExpression source IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IAggregateMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMemberTranslator.html",
    "title": "Class NpgsqlStringMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlStringMemberTranslator Translates string.Length to 'length(text)'. Inheritance object NpgsqlStringMemberTranslator Implements IMemberTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStringMemberTranslator : IMemberTranslator Constructors | Edit this page View Source NpgsqlStringMemberTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlStringMemberTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MemberInfo member Type returnType IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMethodTranslator.html",
    "title": "Class NpgsqlStringMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlStringMethodTranslator Provides translation services for PostgreSQL string functions. Inheritance object NpgsqlStringMethodTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStringMethodTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-string.html Constructors | Edit this page View Source NpgsqlStringMethodTranslator(NpgsqlTypeMappingSource, ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlStringMethodTranslator(NpgsqlTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MethodInfo method IReadOnlyList<SqlExpression> arguments IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTimeSpanMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTimeSpanMemberTranslator.html",
    "title": "Class NpgsqlTimeSpanMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlTimeSpanMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlTimeSpanMemberTranslator Implements IMemberTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimeSpanMemberTranslator : IMemberTranslator Constructors | Edit this page View Source NpgsqlTimeSpanMemberTranslator(ISqlExpressionFactory) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimeSpanMemberTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Edit this page View Source Translate(SqlExpression?, MemberInfo, Type, IDiagnosticsLogger<Query>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MemberInfo member, Type returnType, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance MemberInfo member Type returnType IDiagnosticsLogger<DbLoggerCategory.Query> logger Returns Type Description SqlExpression Implements IMemberTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTrigramsMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTrigramsMethodTranslator.html",
    "title": "Class NpgsqlTrigramsMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlTrigramsMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlTrigramsMethodTranslator Implements IMethodCallTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTrigramsMethodTranslator : IMethodCallTranslator Constructors | Edit this page View Source NpgsqlTrigramsMethodTranslator(IRelationalTypeMappingSource, NpgsqlSqlExpressionFactory, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTrigramsMethodTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IModel model Methods | Edit this page View Source Translate(SqlExpression?, MethodInfo, IReadOnlyList<SqlExpression>, IDiagnosticsLogger<Query>) Translates a LINQ MethodCallExpression to a SQL equivalent. Declaration public virtual SqlExpression? Translate(SqlExpression? instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments, IDiagnosticsLogger<DbLoggerCategory.Query> logger) Parameters Type Name Description SqlExpression instance A SQL representation of Object. MethodInfo method The method info from Method. IReadOnlyList<SqlExpression> arguments SQL representations of Arguments. IDiagnosticsLogger<DbLoggerCategory.Query> logger The query logger to use. Returns Type Description SqlExpression A SQL translation of the MethodCallExpression. Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Classes NpgsqlAggregateMethodCallTranslatorProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlArrayMethodTranslator Translates method and property calls on arrays/lists into their corresponding PostgreSQL operations. NpgsqlBigIntegerMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlByteArrayMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlConvertTranslator Translates methods defined on Convert into PostgreSQL CAST expressions. NpgsqlDateTimeMemberTranslator Provides translation services for DateTime members. NpgsqlDateTimeMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlFullTextSearchMethodTranslator Provides translations for PostgreSQL full-text search methods. NpgsqlFuzzyStringMatchMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlGeometryMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlGeometryMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlJsonDbFunctionsTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlJsonDomTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlJsonPocoTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlLTreeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlLikeTranslator Translates DbFunctionsExtensions.Like methods into PostgreSQL LIKE expressions. NpgsqlMathTranslator Provides translation services for static Math methods.. NpgsqlMemberTranslatorProvider A composite member translator that dispatches to multiple specialized member translators specific to Npgsql. NpgsqlMethodCallTranslatorProvider This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlMiscAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteAggregateMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteMemberTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetTopologySuiteMethodCallTranslatorPlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNetworkTranslator Provides translation services for operators and functions of PostgreSQL network typess (cidr, inet, macaddr, macaddr8). NpgsqlNewGuidTranslator Provides translation services for PostgreSQL UUID functions. NpgsqlObjectToStringTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryableAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRandomTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRangeTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRegexIsMatchTranslator Translates Regex.IsMatch calls into PostgreSQL regex expressions for database-side processing. NpgsqlRowValueTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlStatisticsAggregateMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlStringMemberTranslator Translates string.Length to 'length(text)'. NpgsqlStringMethodTranslator Provides translation services for PostgreSQL string functions. NpgsqlTimeSpanMemberTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTrigramsMethodTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgAllExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgAllExpression.html",
    "title": "Class PgAllExpression | Npgsql Documentation",
    "keywords": "Class PgAllExpression Represents a PostgreSQL array ALL expression. Inheritance object Expression SqlExpression PgAllExpression Implements IPrintableExpression IEquatable<PgAllExpression> Inherited Members SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgAllExpression : SqlExpression, IPrintableExpression, IEquatable<PgAllExpression> Remarks See https://www.postgresql.org/docs/current/static/functions-comparisons.html Constructors | Edit this page View Source PgAllExpression(SqlExpression, SqlExpression, PgAllOperatorType, RelationalTypeMapping?) Constructs a PgAllExpression. Declaration public PgAllExpression(SqlExpression item, SqlExpression array, PgAllOperatorType operatorType, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression item The value to find. SqlExpression array The array to search. PgAllOperatorType operatorType The operator symbol to the array expression. RelationalTypeMapping typeMapping The type mapping for the expression. Properties | Edit this page View Source Array The array of values or patterns to test for the Item. Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression | Edit this page View Source Item The value to test against the Array. Declaration public virtual SqlExpression Item { get; } Property Value Type Description SqlExpression | Edit this page View Source OperatorType The operator. Declaration public virtual PgAllOperatorType OperatorType { get; } Property Value Type Description PgAllOperatorType | Edit this page View Source Type Gets the static type of the expression that this Expression represents. Declaration public override Type Type { get; } Property Value Type Description Type The Type that represents the static type of the expression. Overrides SqlExpression.Type Methods | Edit this page View Source Equals(PgAllExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgAllExpression? other) Parameters Type Name Description PgAllExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source ToString() Returns a textual representation of the Expression. Declaration public override string ToString() Returns Type Description string A textual representation of the Expression. Overrides Expression.ToString() | Edit this page View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgAllExpression Update(SqlExpression item, SqlExpression array) Parameters Type Name Description SqlExpression item The Item property of the result. SqlExpression array The Array property of the result. Returns Type Description PgAllExpression This expression if no children changed, or an expression with the updated children. | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgAllOperatorType.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgAllOperatorType.html",
    "title": "Enum PgAllOperatorType | Npgsql Documentation",
    "keywords": "Enum PgAllOperatorType Determines the operator type for a PgAllExpression. Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum PgAllOperatorType Fields Name Description ILike Represents a PostgreSQL ILIKE ALL operator. Like Represents a PostgreSQL LIKE ALL operator."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgAnyExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgAnyExpression.html",
    "title": "Class PgAnyExpression | Npgsql Documentation",
    "keywords": "Class PgAnyExpression Represents a PostgreSQL array ANY expression. Inheritance object Expression SqlExpression PgAnyExpression Implements IPrintableExpression IEquatable<PgAnyExpression> Inherited Members SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgAnyExpression : SqlExpression, IPrintableExpression, IEquatable<PgAnyExpression> Remarks See https://www.postgresql.org/docs/current/static/functions-comparisons.html Examples 1 = ANY ('{0,1,2}'), 'cat' LIKE ANY ('{a%,b%,c%}') Constructors | Edit this page View Source PgAnyExpression(SqlExpression, SqlExpression, PgAnyOperatorType, RelationalTypeMapping?) Constructs a PgAnyExpression. Declaration public PgAnyExpression(SqlExpression item, SqlExpression array, PgAnyOperatorType operatorType, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression item The value to find. SqlExpression array The array to search. PgAnyOperatorType operatorType The operator symbol to the array expression. RelationalTypeMapping typeMapping The type mapping for the expression. Properties | Edit this page View Source Array The array of values or patterns to test for the Item. Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression | Edit this page View Source Item The value to test against the Array. Declaration public virtual SqlExpression Item { get; } Property Value Type Description SqlExpression | Edit this page View Source OperatorType The operator. Declaration public virtual PgAnyOperatorType OperatorType { get; } Property Value Type Description PgAnyOperatorType | Edit this page View Source Type Gets the static type of the expression that this Expression represents. Declaration public override Type Type { get; } Property Value Type Description Type The Type that represents the static type of the expression. Overrides SqlExpression.Type Methods | Edit this page View Source Equals(PgAnyExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgAnyExpression? other) Parameters Type Name Description PgAnyExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source ToString() Returns a textual representation of the Expression. Declaration public override string ToString() Returns Type Description string A textual representation of the Expression. Overrides Expression.ToString() | Edit this page View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgAnyExpression Update(SqlExpression item, SqlExpression array) Parameters Type Name Description SqlExpression item The Item property of the result. SqlExpression array The Array property of the result. Returns Type Description PgAnyExpression This expression if no children changed, or an expression with the updated children. | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgAnyOperatorType.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgAnyOperatorType.html",
    "title": "Enum PgAnyOperatorType | Npgsql Documentation",
    "keywords": "Enum PgAnyOperatorType Determines the operator type for a PgAnyExpression. Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum PgAnyOperatorType Fields Name Description Equal Represents a PostgreSQL = ANY operator. ILike Represents a PostgreSQL ILIKE ANY operator. Like Represents a PostgreSQL LIKE ANY operator."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgArrayIndexExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgArrayIndexExpression.html",
    "title": "Class PgArrayIndexExpression | Npgsql Documentation",
    "keywords": "Class PgArrayIndexExpression An SQL expression that represents an indexing into a PostgreSQL array. Inheritance object Expression SqlExpression PgArrayIndexExpression Implements IPrintableExpression IEquatable<PgArrayIndexExpression> Inherited Members SqlExpression.Type SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgArrayIndexExpression : SqlExpression, IPrintableExpression, IEquatable<PgArrayIndexExpression> Remarks SqlBinaryExpression specifically disallows having an OperatorType of value ArrayIndex as arrays are a PostgreSQL-only feature. Constructors | Edit this page View Source PgArrayIndexExpression(SqlExpression, SqlExpression, bool, Type, RelationalTypeMapping?) Creates a new instance of the PgArrayIndexExpression class. Declaration public PgArrayIndexExpression(SqlExpression array, SqlExpression index, bool nullable, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression array The array tp index into. SqlExpression index An position in the array to index into. bool nullable Whether the expression is nullable. Type type The Type of the expression. RelationalTypeMapping typeMapping The RelationalTypeMapping associated with the expression. Properties | Edit this page View Source Array The array being indexed. Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression | Edit this page View Source Index The index in the array. Declaration public virtual SqlExpression Index { get; } Property Value Type Description SqlExpression | Edit this page View Source IsNullable Whether the expression is nullable. Declaration public virtual bool IsNullable { get; } Property Value Type Description bool Methods | Edit this page View Source Equals(PgArrayIndexExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgArrayIndexExpression? other) Parameters Type Name Description PgArrayIndexExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source ToString() Returns a textual representation of the Expression. Declaration public override string ToString() Returns Type Description string A textual representation of the Expression. Overrides Expression.ToString() | Edit this page View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgArrayIndexExpression Update(SqlExpression array, SqlExpression index) Parameters Type Name Description SqlExpression array The Array property of the result. SqlExpression index The Index property of the result. Returns Type Description PgArrayIndexExpression This expression if no children changed, or an expression with the updated children. | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgArraySliceExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgArraySliceExpression.html",
    "title": "Class PgArraySliceExpression | Npgsql Documentation",
    "keywords": "Class PgArraySliceExpression A SQL expression that represents a slicing into a PostgreSQL array (e.g. array[2:3]). Inheritance object Expression SqlExpression PgArraySliceExpression Implements IPrintableExpression IEquatable<PgArraySliceExpression> Inherited Members SqlExpression.Type SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgArraySliceExpression : SqlExpression, IPrintableExpression, IEquatable<PgArraySliceExpression> Remarks https://www.postgresql.org/docs/current/arrays.html#ARRAYS-ACCESSING. Constructors | Edit this page View Source PgArraySliceExpression(SqlExpression, SqlExpression?, SqlExpression?, bool, Type, RelationalTypeMapping?) Creates a new instance of the PgArraySliceExpression class. Declaration public PgArraySliceExpression(SqlExpression array, SqlExpression? lowerBound, SqlExpression? upperBound, bool nullable, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression array The array tp slice into. SqlExpression lowerBound The lower bound of the slice. SqlExpression upperBound The upper bound of the slice. bool nullable Whether the expression is nullable. Type type The Type of the expression. RelationalTypeMapping typeMapping The RelationalTypeMapping associated with the expression. Properties | Edit this page View Source Array The array being sliced. Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression | Edit this page View Source IsNullable Whether the expression is nullable. Declaration public virtual bool IsNullable { get; } Property Value Type Description bool | Edit this page View Source LowerBound The lower bound of the slice. Declaration public virtual SqlExpression? LowerBound { get; } Property Value Type Description SqlExpression | Edit this page View Source UpperBound The upper bound of the slice. Declaration public virtual SqlExpression? UpperBound { get; } Property Value Type Description SqlExpression Methods | Edit this page View Source Equals(PgArraySliceExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgArraySliceExpression? other) Parameters Type Name Description PgArraySliceExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source ToString() Returns a textual representation of the Expression. Declaration public override string ToString() Returns Type Description string A textual representation of the Expression. Overrides Expression.ToString() | Edit this page View Source Update(SqlExpression, SqlExpression?, SqlExpression?) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgArraySliceExpression Update(SqlExpression array, SqlExpression? lowerBound, SqlExpression? upperBound) Parameters Type Name Description SqlExpression array The Array property of the result. SqlExpression lowerBound The lower bound of the slice. SqlExpression upperBound The upper bound of the slice. Returns Type Description PgArraySliceExpression This expression if no children changed, or an expression with the updated children. | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgBinaryExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgBinaryExpression.html",
    "title": "Class PgBinaryExpression | Npgsql Documentation",
    "keywords": "Class PgBinaryExpression An expression that represents a PostgreSQL-specific binary operation in a SQL tree. Inheritance object Expression SqlExpression PgBinaryExpression Implements IPrintableExpression Inherited Members SqlExpression.Type SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.ToString() Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgBinaryExpression : SqlExpression, IPrintableExpression Constructors | Edit this page View Source PgBinaryExpression(PgExpressionType, SqlExpression, SqlExpression, Type, RelationalTypeMapping?) Creates a new instance of the PgBinaryExpression class. Declaration public PgBinaryExpression(PgExpressionType operatorType, SqlExpression left, SqlExpression right, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description PgExpressionType operatorType The operator to apply. SqlExpression left An expression which is left operand. SqlExpression right An expression which is right operand. Type type The Type of the expression. RelationalTypeMapping typeMapping The RelationalTypeMapping associated with the expression. Properties | Edit this page View Source Left The left operand. Declaration public virtual SqlExpression Left { get; } Property Value Type Description SqlExpression | Edit this page View Source OperatorType The operator of this PostgreSQL binary operation. Declaration public virtual PgExpressionType OperatorType { get; } Property Value Type Description PgExpressionType | Edit this page View Source Right The right operand. Declaration public virtual SqlExpression Right { get; } Property Value Type Description SqlExpression Methods | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgBinaryExpression Update(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left The Left property of the result. SqlExpression right The Right property of the result. Returns Type Description PgBinaryExpression This expression if no children changed, or an expression with the updated children. | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgDeleteExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgDeleteExpression.html",
    "title": "Class PgDeleteExpression | Npgsql Documentation",
    "keywords": "Class PgDeleteExpression An SQL expression that represents a PostgreSQL DELETE operation. Inheritance object Expression PgDeleteExpression Implements IPrintableExpression Inherited Members Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.ToString() Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class PgDeleteExpression : Expression, IPrintableExpression Constructors | Edit this page View Source PgDeleteExpression(TableExpression, IReadOnlyList<TableExpressionBase>, SqlExpression?, ISet<string>) Creates a new instance of the PgDeleteExpression class. Declaration public PgDeleteExpression(TableExpression table, IReadOnlyList<TableExpressionBase> fromItems, SqlExpression? predicate, ISet<string> tags) Parameters Type Name Description TableExpression table IReadOnlyList<TableExpressionBase> fromItems SqlExpression predicate ISet<string> tags Properties | Edit this page View Source FromItems Additional tables which can be referenced in the predicate. Declaration public IReadOnlyList<TableExpressionBase> FromItems { get; } Property Value Type Description IReadOnlyList<TableExpressionBase> | Edit this page View Source NodeType Gets the node type of this Expression. Declaration public override ExpressionType NodeType { get; } Property Value Type Description ExpressionType One of the ExpressionType values. Overrides Expression.NodeType | Edit this page View Source Predicate The WHERE predicate for the DELETE. Declaration public SqlExpression? Predicate { get; } Property Value Type Description SqlExpression | Edit this page View Source Table The tables that rows are to be deleted from. Declaration public TableExpression Table { get; } Property Value Type Description TableExpression | Edit this page View Source Tags The list of tags applied to this DeleteExpression. Declaration public ISet<string> Tags { get; } Property Value Type Description ISet<string> | Edit this page View Source Type Gets the static type of the expression that this Expression represents. Declaration public override Type Type { get; } Property Value Type Description Type The Type that represents the static type of the expression. Overrides Expression.Type Methods | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration public void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. | Edit this page View Source Update(SqlExpression?) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public PgDeleteExpression Update(SqlExpression? predicate) Parameters Type Name Description SqlExpression predicate The Predicate property of the result. Returns Type Description PgDeleteExpression | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides Expression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgFunctionExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgFunctionExpression.html",
    "title": "Class PgFunctionExpression | Npgsql Documentation",
    "keywords": "Class PgFunctionExpression Represents a SQL function call expression, supporting PostgreSQL's named parameter notation (e.g. make_interval(weeks => 2) and non-comma parameter separators (e.g. position(substring in string)). Inheritance object Expression SqlExpression SqlFunctionExpression PgFunctionExpression Implements IPrintableExpression IEquatable<PgFunctionExpression> Inherited Members SqlFunctionExpression.Name SqlFunctionExpression.Schema SqlFunctionExpression.IsNiladic SqlFunctionExpression.IsBuiltIn SqlFunctionExpression.Instance SqlFunctionExpression.IsNullable SqlFunctionExpression.InstancePropagatesNullability SqlExpression.Type SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.ToString() Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgFunctionExpression : SqlFunctionExpression, IPrintableExpression, IEquatable<PgFunctionExpression> Constructors | Edit this page View Source PgFunctionExpression(string, IEnumerable<SqlExpression>, IEnumerable<string?>?, IEnumerable<string?>?, bool, SqlExpression?, IReadOnlyList<OrderingExpression>, bool, IEnumerable<bool>, Type, RelationalTypeMapping?) Creates a new instance of PgFunctionExpression. Declaration public PgFunctionExpression(string name, IEnumerable<SqlExpression> arguments, IEnumerable<string?>? argumentNames, IEnumerable<string?>? argumentSeparators, bool aggregateDistinct, SqlExpression? aggregatePredicate, IReadOnlyList<OrderingExpression> aggregateOrderings, bool nullable, IEnumerable<bool> argumentsPropagateNullability, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description string name IEnumerable<SqlExpression> arguments IEnumerable<string> argumentNames IEnumerable<string> argumentSeparators bool aggregateDistinct SqlExpression aggregatePredicate IReadOnlyList<OrderingExpression> aggregateOrderings bool nullable IEnumerable<bool> argumentsPropagateNullability Type type RelationalTypeMapping typeMapping Properties | Edit this page View Source AggregateOrderings For aggregate methods, contains the orderings to be applied. Declaration public virtual IReadOnlyList<OrderingExpression> AggregateOrderings { get; } Property Value Type Description IReadOnlyList<OrderingExpression> | Edit this page View Source AggregatePredicate For aggregate methods, contains the predicate to be applied (generated as the SQL FILTER clause). Declaration public virtual SqlExpression? AggregatePredicate { get; } Property Value Type Description SqlExpression | Edit this page View Source ArgumentNames List of argument names, corresponding position-wise to arguments in Arguments. Unnamed (positional) arguments must come first, so this list must contain possible nulls, followed by non-nulls. Declaration public virtual IReadOnlyList<string?> ArgumentNames { get; } Property Value Type Description IReadOnlyList<string> | Edit this page View Source ArgumentSeparators List of non-comma separators between argument separators, in the order in which they appear between the arguments. null as well as positions beyond the end of the list mean regular commas. Declaration public virtual IReadOnlyList<string?> ArgumentSeparators { get; } Property Value Type Description IReadOnlyList<string> | Edit this page View Source Arguments Declaration public virtual IReadOnlyList<SqlExpression> Arguments { get; } Property Value Type Description IReadOnlyList<SqlExpression> | Edit this page View Source ArgumentsPropagateNullability Declaration public virtual IReadOnlyList<bool> ArgumentsPropagateNullability { get; } Property Value Type Description IReadOnlyList<bool> | Edit this page View Source IsAggregateDistinct For aggregate methods, contains whether to apply distinct. Declaration public virtual bool IsAggregateDistinct { get; } Property Value Type Description bool Methods | Edit this page View Source ApplyTypeMapping(RelationalTypeMapping?) Applies supplied type mapping to this expression. Declaration public override SqlFunctionExpression ApplyTypeMapping(RelationalTypeMapping? typeMapping) Parameters Type Name Description RelationalTypeMapping typeMapping A relational type mapping to apply. Returns Type Description SqlFunctionExpression A new expression which has supplied type mapping. Overrides SqlFunctionExpression.ApplyTypeMapping(RelationalTypeMapping) | Edit this page View Source CreateWithArgumentSeparators(string, IEnumerable<SqlExpression>, IEnumerable<string?>, bool, IEnumerable<bool>, bool, Type, RelationalTypeMapping?) Creates an instance of PgFunctionExpression with argument separators. Declaration public static PgFunctionExpression CreateWithArgumentSeparators(string name, IEnumerable<SqlExpression> arguments, IEnumerable<string?> argumentSeparators, bool nullable, IEnumerable<bool> argumentsPropagateNullability, bool builtIn, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description string name IEnumerable<SqlExpression> arguments IEnumerable<string> argumentSeparators bool nullable IEnumerable<bool> argumentsPropagateNullability bool builtIn Type type RelationalTypeMapping typeMapping Returns Type Description PgFunctionExpression | Edit this page View Source CreateWithNamedArguments(string, IEnumerable<SqlExpression>, IEnumerable<string?>, bool, IEnumerable<bool>, bool, Type, RelationalTypeMapping?) Creates an instance of PgFunctionExpression with named arguments. Declaration public static PgFunctionExpression CreateWithNamedArguments(string name, IEnumerable<SqlExpression> arguments, IEnumerable<string?> argumentNames, bool nullable, IEnumerable<bool> argumentsPropagateNullability, bool builtIn, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description string name IEnumerable<SqlExpression> arguments IEnumerable<string> argumentNames bool nullable IEnumerable<bool> argumentsPropagateNullability bool builtIn Type type RelationalTypeMapping typeMapping Returns Type Description PgFunctionExpression | Edit this page View Source Equals(PgFunctionExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgFunctionExpression? other) Parameters Type Name Description PgFunctionExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlFunctionExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlFunctionExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlFunctionExpression.Print(ExpressionPrinter) | Edit this page View Source Update(SqlExpression?, IReadOnlyList<SqlExpression>?) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public override SqlFunctionExpression Update(SqlExpression? instance, IReadOnlyList<SqlExpression>? arguments) Parameters Type Name Description SqlExpression instance The Instance property of the result. IReadOnlyList<SqlExpression> arguments The Arguments property of the result. Returns Type Description SqlFunctionExpression This expression if no children changed, or an expression with the updated children. Overrides SqlFunctionExpression.Update(SqlExpression, IReadOnlyList<SqlExpression>) | Edit this page View Source UpdateAggregateComponents(SqlExpression?, IReadOnlyList<OrderingExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgFunctionExpression UpdateAggregateComponents(SqlExpression? predicate, IReadOnlyList<OrderingExpression> orderings) Parameters Type Name Description SqlExpression predicate IReadOnlyList<OrderingExpression> orderings Returns Type Description PgFunctionExpression | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlFunctionExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgILikeExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgILikeExpression.html",
    "title": "Class PgILikeExpression | Npgsql Documentation",
    "keywords": "Class PgILikeExpression Represents a PostgreSQL ILIKE expression. Inheritance object Expression SqlExpression PgILikeExpression Implements IPrintableExpression IEquatable<PgILikeExpression> Inherited Members SqlExpression.Type SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgILikeExpression : SqlExpression, IPrintableExpression, IEquatable<PgILikeExpression> Constructors | Edit this page View Source PgILikeExpression(SqlExpression, SqlExpression, SqlExpression?, RelationalTypeMapping?) Constructs a PgILikeExpression. Declaration public PgILikeExpression(SqlExpression match, SqlExpression pattern, SqlExpression? escapeChar, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression match The expression to match. SqlExpression pattern The pattern to match. SqlExpression escapeChar The escape character to use in pattern. RelationalTypeMapping typeMapping The RelationalTypeMapping associated with the expression. Exceptions Type Condition ArgumentNullException Properties | Edit this page View Source EscapeChar The escape character to use in Pattern. Declaration public virtual SqlExpression? EscapeChar { get; } Property Value Type Description SqlExpression | Edit this page View Source Match The match expression. Declaration public virtual SqlExpression Match { get; } Property Value Type Description SqlExpression | Edit this page View Source Pattern The pattern to match. Declaration public virtual SqlExpression Pattern { get; } Property Value Type Description SqlExpression Methods | Edit this page View Source Equals(PgILikeExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgILikeExpression? other) Parameters Type Name Description PgILikeExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source ToString() Returns a textual representation of the Expression. Declaration public override string ToString() Returns Type Description string A textual representation of the Expression. Overrides Expression.ToString() | Edit this page View Source Update(SqlExpression, SqlExpression, SqlExpression?) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgILikeExpression Update(SqlExpression match, SqlExpression pattern, SqlExpression? escapeChar) Parameters Type Name Description SqlExpression match SqlExpression pattern SqlExpression escapeChar Returns Type Description PgILikeExpression | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgJsonTraversalExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgJsonTraversalExpression.html",
    "title": "Class PgJsonTraversalExpression | Npgsql Documentation",
    "keywords": "Class PgJsonTraversalExpression Represents a PostgreSQL JSON operator traversing a JSON document with a path (i.e. x#>y or x#>>y) Inheritance object Expression SqlExpression PgJsonTraversalExpression Implements IPrintableExpression IEquatable<PgJsonTraversalExpression> Inherited Members SqlExpression.Type SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgJsonTraversalExpression : SqlExpression, IPrintableExpression, IEquatable<PgJsonTraversalExpression> Constructors | Edit this page View Source PgJsonTraversalExpression(SqlExpression, IReadOnlyList<SqlExpression>, bool, Type, RelationalTypeMapping?) Constructs a PgJsonTraversalExpression. Declaration public PgJsonTraversalExpression(SqlExpression expression, IReadOnlyList<SqlExpression> path, bool returnsText, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression expression IReadOnlyList<SqlExpression> path bool returnsText Type type RelationalTypeMapping typeMapping Properties | Edit this page View Source Expression The match expression. Declaration public virtual SqlExpression Expression { get; } Property Value Type Description SqlExpression | Edit this page View Source Path The pattern to match. Declaration public virtual IReadOnlyList<SqlExpression> Path { get; } Property Value Type Description IReadOnlyList<SqlExpression> | Edit this page View Source ReturnsText Whether the text-returning operator (x#>>y) or the object-returning operator (x#>y) is used. Declaration public virtual bool ReturnsText { get; } Property Value Type Description bool Methods | Edit this page View Source Append(SqlExpression) Appends an additional path component to this PgJsonTraversalExpression and returns the result. Declaration public virtual PgJsonTraversalExpression Append(SqlExpression pathComponent) Parameters Type Name Description SqlExpression pathComponent Returns Type Description PgJsonTraversalExpression | Edit this page View Source Equals(PgJsonTraversalExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgJsonTraversalExpression? other) Parameters Type Name Description PgJsonTraversalExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source ToString() Returns a textual representation of the Expression. Declaration public override string ToString() Returns Type Description string A textual representation of the Expression. Overrides Expression.ToString() | Edit this page View Source Update(SqlExpression, IReadOnlyList<SqlExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgJsonTraversalExpression Update(SqlExpression expression, IReadOnlyList<SqlExpression> path) Parameters Type Name Description SqlExpression expression IReadOnlyList<SqlExpression> path Returns Type Description PgJsonTraversalExpression | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgNewArrayExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgNewArrayExpression.html",
    "title": "Class PgNewArrayExpression | Npgsql Documentation",
    "keywords": "Class PgNewArrayExpression Represents creating a new PostgreSQL array. Inheritance object Expression SqlExpression PgNewArrayExpression Implements IPrintableExpression Inherited Members SqlExpression.Type SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.ToString() Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgNewArrayExpression : SqlExpression, IPrintableExpression Constructors | Edit this page View Source PgNewArrayExpression(IReadOnlyList<SqlExpression>, Type, RelationalTypeMapping?) Creates a new instance of the PgNewArrayExpression class. Declaration public PgNewArrayExpression(IReadOnlyList<SqlExpression> expressions, Type type, RelationalTypeMapping? typeMapping) Parameters Type Name Description IReadOnlyList<SqlExpression> expressions The values to initialize the elements of the new array. Type type The Type of the expression. RelationalTypeMapping typeMapping The RelationalTypeMapping associated with the expression. Properties | Edit this page View Source Expressions The operator of this PostgreSQL binary operation. Declaration public virtual IReadOnlyList<SqlExpression> Expressions { get; } Property Value Type Description IReadOnlyList<SqlExpression> Methods | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source Update(IReadOnlyList<SqlExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgNewArrayExpression Update(IReadOnlyList<SqlExpression> expressions) Parameters Type Name Description IReadOnlyList<SqlExpression> expressions The values to initialize the elements of the new array. Returns Type Description PgNewArrayExpression This expression if no children changed, or an expression with the updated children. | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgRegexMatchExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgRegexMatchExpression.html",
    "title": "Class PgRegexMatchExpression | Npgsql Documentation",
    "keywords": "Class PgRegexMatchExpression Represents a PostgreSQL regular expression match expression. Inheritance object Expression SqlExpression PgRegexMatchExpression Implements IPrintableExpression IEquatable<PgRegexMatchExpression> Inherited Members SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgRegexMatchExpression : SqlExpression, IPrintableExpression, IEquatable<PgRegexMatchExpression> Constructors | Edit this page View Source PgRegexMatchExpression(SqlExpression, SqlExpression, RegexOptions, RelationalTypeMapping?) Constructs a PgRegexMatchExpression. Declaration public PgRegexMatchExpression(SqlExpression match, SqlExpression pattern, RegexOptions options, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression match The expression to match. SqlExpression pattern The pattern to match. RegexOptions options The options for regular expression evaluation. RelationalTypeMapping typeMapping The type mapping for the expression. Properties | Edit this page View Source Match The match expression. Declaration public virtual SqlExpression Match { get; } Property Value Type Description SqlExpression | Edit this page View Source Options The options for regular expression evaluation. Declaration public virtual RegexOptions Options { get; } Property Value Type Description RegexOptions | Edit this page View Source Pattern The pattern to match. Declaration public virtual SqlExpression Pattern { get; } Property Value Type Description SqlExpression | Edit this page View Source Type Gets the static type of the expression that this Expression represents. Declaration public override Type Type { get; } Property Value Type Description Type The Type that represents the static type of the expression. Overrides SqlExpression.Type Methods | Edit this page View Source Equals(PgRegexMatchExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgRegexMatchExpression? other) Parameters Type Name Description PgRegexMatchExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? other) Parameters Type Name Description object other Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source ToString() Returns a textual representation of the Expression. Declaration public override string ToString() Returns Type Description string A textual representation of the Expression. Overrides Expression.ToString() | Edit this page View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgRegexMatchExpression Update(SqlExpression match, SqlExpression pattern) Parameters Type Name Description SqlExpression match SqlExpression pattern Returns Type Description PgRegexMatchExpression | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgRowValueExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgRowValueExpression.html",
    "title": "Class PgRowValueExpression | Npgsql Documentation",
    "keywords": "Class PgRowValueExpression An expression that represents a PostgreSQL-specific row value expression in a SQL tree. Inheritance object Expression SqlExpression PgRowValueExpression Implements IPrintableExpression IEquatable<PgRowValueExpression> Inherited Members SqlExpression.Type SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.ToString() Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgRowValueExpression : SqlExpression, IPrintableExpression, IEquatable<PgRowValueExpression> Remarks See the PostgreSQL docs for more information. Constructors | Edit this page View Source PgRowValueExpression(IReadOnlyList<SqlExpression>, Type, RelationalTypeMapping?) Declaration public PgRowValueExpression(IReadOnlyList<SqlExpression> values, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description IReadOnlyList<SqlExpression> values Type type RelationalTypeMapping typeMapping Properties | Edit this page View Source Values The values of this PostgreSQL row value expression. Declaration public virtual IReadOnlyList<SqlExpression> Values { get; } Property Value Type Description IReadOnlyList<SqlExpression> Methods | Edit this page View Source Equals(PgRowValueExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgRowValueExpression? other) Parameters Type Name Description PgRowValueExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source Update(IReadOnlyList<SqlExpression>) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgRowValueExpression Update(IReadOnlyList<SqlExpression> values) Parameters Type Name Description IReadOnlyList<SqlExpression> values Returns Type Description PgRowValueExpression | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgTableValuedFunctionExpression.ColumnInfo.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgTableValuedFunctionExpression.ColumnInfo.html",
    "title": "Struct PgTableValuedFunctionExpression.ColumnInfo | Npgsql Documentation",
    "keywords": "Struct PgTableValuedFunctionExpression.ColumnInfo Defines the name of a column coming out of a PgTableValuedFunctionExpression and optionally its type. Implements IEquatable<PgTableValuedFunctionExpression.ColumnInfo> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public readonly record struct PgTableValuedFunctionExpression.ColumnInfo : IEquatable<PgTableValuedFunctionExpression.ColumnInfo> Constructors | Edit this page View Source ColumnInfo(string, RelationalTypeMapping?) Defines the name of a column coming out of a PgTableValuedFunctionExpression and optionally its type. Declaration public ColumnInfo(string Name, RelationalTypeMapping? TypeMapping = null) Parameters Type Name Description string Name RelationalTypeMapping TypeMapping Properties | Edit this page View Source Name Declaration public string Name { get; init; } Property Value Type Description string | Edit this page View Source TypeMapping Declaration public RelationalTypeMapping? TypeMapping { get; init; } Property Value Type Description RelationalTypeMapping Implements IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgTableValuedFunctionExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgTableValuedFunctionExpression.html",
    "title": "Class PgTableValuedFunctionExpression | Npgsql Documentation",
    "keywords": "Class PgTableValuedFunctionExpression An expression that represents a PostgreSQL unnest function call in a SQL tree. Inheritance object Expression TableExpressionBase TableValuedFunctionExpression PgTableValuedFunctionExpression PgUnnestExpression Implements IPrintableExpression ITableBasedExpression IEquatable<PgTableValuedFunctionExpression> IClonableTableExpressionBase Inherited Members TableValuedFunctionExpression.CreateWithAnnotations(IEnumerable<IAnnotation>) TableValuedFunctionExpression.Alias TableValuedFunctionExpression.StoreFunction TableValuedFunctionExpression.Name TableValuedFunctionExpression.Schema TableValuedFunctionExpression.IsBuiltIn TableValuedFunctionExpression.Arguments TableExpressionBase.PrintAnnotations(ExpressionPrinter) TableExpressionBase.AddAnnotation(string, object) TableExpressionBase.FindAnnotation(string) TableExpressionBase.GetAnnotations() TableExpressionBase.Type TableExpressionBase.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.ToString() Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgTableValuedFunctionExpression : TableValuedFunctionExpression, IPrintableExpression, ITableBasedExpression, IEquatable<PgTableValuedFunctionExpression>, IClonableTableExpressionBase Remarks This expression is just a TableValuedFunctionExpression, adding the ability to provide an explicit column name for its output (SELECT * FROM unnest(array) AS f(foo)). This is necessary since when the column name isn't explicitly specified, it is automatically identical to the table alias (f above); since the table alias may get uniquified by EF, this would break queries. See unnest for more information and examples. This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Constructors | Edit this page View Source PgTableValuedFunctionExpression(string, string, IReadOnlyList<SqlExpression>, IReadOnlyList<ColumnInfo>?, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public PgTableValuedFunctionExpression(string alias, string name, IReadOnlyList<SqlExpression> arguments, IReadOnlyList<PgTableValuedFunctionExpression.ColumnInfo>? columnInfos, bool withOrdinality = true) Parameters Type Name Description string alias string name IReadOnlyList<SqlExpression> arguments IReadOnlyList<PgTableValuedFunctionExpression.ColumnInfo> columnInfos bool withOrdinality Properties | Edit this page View Source ColumnInfos The name of the column to be projected out from the unnest call. Declaration public virtual IReadOnlyList<PgTableValuedFunctionExpression.ColumnInfo>? ColumnInfos { get; } Property Value Type Description IReadOnlyList<PgTableValuedFunctionExpression.ColumnInfo> Remarks This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. | Edit this page View Source WithOrdinality Whether to project an additional ordinality column containing the index of each element in the array. Declaration public virtual bool WithOrdinality { get; } Property Value Type Description bool Remarks This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Methods | Edit this page View Source Clone() Creates a new object that is a copy of the current instance. Declaration public TableExpressionBase Clone() Returns Type Description TableExpressionBase A new object that is a copy of this instance. | Edit this page View Source Equals(PgTableValuedFunctionExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PgTableValuedFunctionExpression? expression) Parameters Type Name Description PgTableValuedFunctionExpression expression Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides TableValuedFunctionExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides TableValuedFunctionExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides TableValuedFunctionExpression.Print(ExpressionPrinter) | Edit this page View Source Update(IReadOnlyList<SqlExpression>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override PgTableValuedFunctionExpression Update(IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description IReadOnlyList<SqlExpression> arguments Returns Type Description PgTableValuedFunctionExpression Overrides TableValuedFunctionExpression.Update(IReadOnlyList<SqlExpression>) | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides TableValuedFunctionExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression ITableBasedExpression IEquatable<T> IClonableTableExpressionBase"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgUnknownBinaryExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgUnknownBinaryExpression.html",
    "title": "Class PgUnknownBinaryExpression | Npgsql Documentation",
    "keywords": "Class PgUnknownBinaryExpression A binary expression only to be used by plugins, since new expressions can only be added (and handled) within the provider itself. Allows defining the operator as a string within the expression, and has default (i.e. propagating) nullability semantics. All type mappings must be applied to the operands before the expression is constructed, since there's no inference logic for it in NpgsqlSqlExpressionFactory. Inheritance object Expression SqlExpression PgUnknownBinaryExpression Implements IPrintableExpression IEquatable<PgUnknownBinaryExpression> Inherited Members SqlExpression.Type SqlExpression.TypeMapping SqlExpression.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgUnknownBinaryExpression : SqlExpression, IPrintableExpression, IEquatable<PgUnknownBinaryExpression> Constructors | Edit this page View Source PgUnknownBinaryExpression(SqlExpression, SqlExpression, string, Type, RelationalTypeMapping?) Constructs a PgUnknownBinaryExpression. Declaration public PgUnknownBinaryExpression(SqlExpression left, SqlExpression right, string binaryOperator, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression left The left-hand expression. SqlExpression right The right-hand expression. string binaryOperator The operator symbol acting on the expression. Type type The result type. RelationalTypeMapping typeMapping The type mapping for the expression. Exceptions Type Condition ArgumentNullException Properties | Edit this page View Source Left The left-hand expression. Declaration public virtual SqlExpression Left { get; } Property Value Type Description SqlExpression | Edit this page View Source Operator The operator. Declaration public virtual string Operator { get; } Property Value Type Description string | Edit this page View Source Right The right-hand expression. Declaration public virtual SqlExpression Right { get; } Property Value Type Description SqlExpression Methods | Edit this page View Source Equals(PgUnknownBinaryExpression?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(PgUnknownBinaryExpression? other) Parameters Type Name Description PgUnknownBinaryExpression other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides SqlExpression.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides SqlExpression.GetHashCode() | Edit this page View Source Print(ExpressionPrinter) Creates a printable string representation of the given expression using ExpressionPrinter. Declaration protected override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter The expression printer to use. Overrides SqlExpression.Print(ExpressionPrinter) | Edit this page View Source ToString() Returns a textual representation of the Expression. Declaration public override string ToString() Returns Type Description string A textual representation of the Expression. Overrides Expression.ToString() | Edit this page View Source Update(SqlExpression, SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgUnknownBinaryExpression Update(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left SqlExpression right Returns Type Description PgUnknownBinaryExpression | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides SqlExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgUnnestExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgUnnestExpression.html",
    "title": "Class PgUnnestExpression | Npgsql Documentation",
    "keywords": "Class PgUnnestExpression An expression that represents a PostgreSQL unnest function call in a SQL tree. Inheritance object Expression TableExpressionBase TableValuedFunctionExpression PgTableValuedFunctionExpression PgUnnestExpression Implements IPrintableExpression ITableBasedExpression IEquatable<PgTableValuedFunctionExpression> IClonableTableExpressionBase Inherited Members PgTableValuedFunctionExpression.ColumnInfos PgTableValuedFunctionExpression.WithOrdinality PgTableValuedFunctionExpression.Clone() PgTableValuedFunctionExpression.Print(ExpressionPrinter) PgTableValuedFunctionExpression.Equals(object) PgTableValuedFunctionExpression.Equals(PgTableValuedFunctionExpression) PgTableValuedFunctionExpression.GetHashCode() TableValuedFunctionExpression.CreateWithAnnotations(IEnumerable<IAnnotation>) TableValuedFunctionExpression.Alias TableValuedFunctionExpression.StoreFunction TableValuedFunctionExpression.Name TableValuedFunctionExpression.Schema TableValuedFunctionExpression.IsBuiltIn TableValuedFunctionExpression.Arguments TableExpressionBase.PrintAnnotations(ExpressionPrinter) TableExpressionBase.AddAnnotation(string, object) TableExpressionBase.FindAnnotation(string) TableExpressionBase.GetAnnotations() TableExpressionBase.Type TableExpressionBase.NodeType Expression.Accept(ExpressionVisitor) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.ArrayAccess(Expression, params Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression) Expression.ArrayIndex(Expression, params Expression[]) Expression.ArrayLength(Expression) Expression.Assign(Expression, Expression) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Block(IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(params Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, params Expression[]) Expression.Block(Type, params Expression[]) Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Expression, Type) Expression.Break(LabelTarget, Type) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, MethodInfo, params Expression[]) Expression.Call(Expression, string, Type[], params Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, params Expression[]) Expression.Call(Type, string, Type[], params Expression[]) Expression.Catch(ParameterExpression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.Catch(Type, Expression) Expression.Catch(Type, Expression, Expression) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.Constant(object) Expression.Constant(object, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.DebugInfo(SymbolDocumentInfo, int, int, int, int) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.Default(Type) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, params Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, params Expression[]) Expression.Empty() Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, bool, MethodInfo) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, string) Expression.Field(Expression, Type, string) Expression.GetActionType(params Type[]) Expression.GetDelegateType(params Type[]) Expression.GetFuncType(params Type[]) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.Goto(LabelTarget, Type) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, bool, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Invoke(Expression, params Expression[]) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.Label() Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label(string) Expression.Label(Type) Expression.Label(Type, string) Expression.Lambda(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, bool, params ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, params ParameterExpression[]) Expression.Lambda(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, bool, params ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, params ParameterExpression[]) Expression.Lambda(Type, Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, string, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, bool, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, params ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, string, bool, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, string, IEnumerable<ParameterExpression>) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, bool, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, bool, MethodInfo) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MemberInfo, params ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, params ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, params ElementInit[]) Expression.ListInit(NewExpression, params Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, params Expression[]) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, bool, MethodInfo, LambdaExpression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, params Expression[]) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MemberInfo, params MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, params MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.MemberInit(NewExpression, params MemberBinding[]) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, params MemberInfo[]) Expression.New(ConstructorInfo, params Expression[]) Expression.New(Type) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, params Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayInit(Type, params Expression[]) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, bool, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Parameter(Type) Expression.Parameter(Type, string) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.Property(Expression, MethodInfo) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Property(Expression, PropertyInfo, params Expression[]) Expression.Property(Expression, string) Expression.Property(Expression, string, params Expression[]) Expression.Property(Expression, Type, string) Expression.PropertyOrField(Expression, string) Expression.Quote(Expression) Expression.Reduce() Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ReferenceEqual(Expression, Expression) Expression.ReferenceNotEqual(Expression, Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Return(LabelTarget, Type) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.RuntimeVariables(params ParameterExpression[]) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Switch(Expression, Expression, params SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Expression, Expression, MethodInfo, params SwitchCase[]) Expression.Switch(Expression, params SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, params SwitchCase[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.SwitchCase(Expression, params Expression[]) Expression.SymbolDocument(string) Expression.SymbolDocument(string, Guid) Expression.SymbolDocument(string, Guid, Guid) Expression.SymbolDocument(string, Guid, Guid, Guid) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.ToString() Expression.TryCatch(Expression, params CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, params CatchBlock[]) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryGetActionType(Type[], out Type) Expression.TryGetFuncType(Type[], out Type) Expression.TypeAs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.TypeIs(Expression, Type) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.Unbox(Expression, Type) Expression.Variable(Type) Expression.Variable(Type, string) Expression.CanReduce object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgUnnestExpression : PgTableValuedFunctionExpression, IPrintableExpression, ITableBasedExpression, IEquatable<PgTableValuedFunctionExpression>, IClonableTableExpressionBase Remarks This expression is just a PgTableValuedFunctionExpression, adding the ability to provide an explicit column name for its output (SELECT * FROM unnest(array) AS f(foo)). This is necessary since when the column name isn't explicitly specified, it is automatically identical to the table alias (f above); since the table alias may get uniquified by EF, this would break queries. See unnest for more information and examples. This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Constructors | Edit this page View Source PgUnnestExpression(string, SqlExpression, string, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public PgUnnestExpression(string alias, SqlExpression array, string columnName, bool withOrdinality = true) Parameters Type Name Description string alias SqlExpression array string columnName bool withOrdinality Properties | Edit this page View Source Array The array to be un-nested into a table. Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression Remarks This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. | Edit this page View Source ColumnName The name of the column to be projected out from the unnest call. Declaration public virtual string ColumnName { get; } Property Value Type Description string Remarks This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Methods | Edit this page View Source Update(SqlExpression) Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression. Declaration public virtual PgUnnestExpression Update(SqlExpression array) Parameters Type Name Description SqlExpression array The Array property of the result. Returns Type Description PgUnnestExpression This expression if no children changed, or an expression with the updated children. | Edit this page View Source Update(IReadOnlyList<SqlExpression>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override PgUnnestExpression Update(IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description IReadOnlyList<SqlExpression> arguments Returns Type Description PgUnnestExpression Overrides PgTableValuedFunctionExpression.Update(IReadOnlyList<SqlExpression>) | Edit this page View Source VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description ExpressionVisitor visitor An instance of Func<T, TResult>. Returns Type Description Expression The expression being visited, or an expression which should replace it in the tree. Overrides PgTableValuedFunctionExpression.VisitChildren(ExpressionVisitor) Implements IPrintableExpression ITableBasedExpression IEquatable<T> IClonableTableExpressionBase"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Classes PgAllExpression Represents a PostgreSQL array ALL expression. PgAnyExpression Represents a PostgreSQL array ANY expression. PgArrayIndexExpression An SQL expression that represents an indexing into a PostgreSQL array. PgArraySliceExpression A SQL expression that represents a slicing into a PostgreSQL array (e.g. array[2:3]). PgBinaryExpression An expression that represents a PostgreSQL-specific binary operation in a SQL tree. PgDeleteExpression An SQL expression that represents a PostgreSQL DELETE operation. PgFunctionExpression Represents a SQL function call expression, supporting PostgreSQL's named parameter notation (e.g. make_interval(weeks => 2) and non-comma parameter separators (e.g. position(substring in string)). PgILikeExpression Represents a PostgreSQL ILIKE expression. PgJsonTraversalExpression Represents a PostgreSQL JSON operator traversing a JSON document with a path (i.e. x#>y or x#>>y) PgNewArrayExpression Represents creating a new PostgreSQL array. PgRegexMatchExpression Represents a PostgreSQL regular expression match expression. PgRowValueExpression An expression that represents a PostgreSQL-specific row value expression in a SQL tree. PgTableValuedFunctionExpression An expression that represents a PostgreSQL unnest function call in a SQL tree. PgUnknownBinaryExpression A binary expression only to be used by plugins, since new expressions can only be added (and handled) within the provider itself. Allows defining the operator as a string within the expression, and has default (i.e. propagating) nullability semantics. All type mappings must be applied to the operands before the expression is constructed, since there's no inference logic for it in NpgsqlSqlExpressionFactory. PgUnnestExpression An expression that represents a PostgreSQL unnest function call in a SQL tree. Structs PgTableValuedFunctionExpression.ColumnInfo Defines the name of a column coming out of a PgTableValuedFunctionExpression and optionally its type. Enums PgAllOperatorType Determines the operator type for a PgAllExpression. PgAnyOperatorType Determines the operator type for a PgAnyExpression."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.PgExpressionType.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.PgExpressionType.html",
    "title": "Enum PgExpressionType | Npgsql Documentation",
    "keywords": "Enum PgExpressionType PostgreSQL-specific expression node types. Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum PgExpressionType Fields Name Description ContainedBy Represents a PostgreSQL contained-by operator. Contains Represents a PostgreSQL contains operator. Distance Represents a PostgreSQL operator for finding the distance between two things (e.g. 2D distance between two geometries, between timestamps...) JsonExists Represents a PostgreSQL operator for checking whether a key exists in a JSON document. JsonExistsAll Represents a PostgreSQL operator for checking whether all the given keys exist in a JSON document. JsonExistsAny Represents a PostgreSQL operator for checking whether any of multiple keys exists in a JSON document. LTreeFirstAncestor Represents a PostgreSQL operator for finding the first ancestor in an ltree type. LTreeFirstDescendent Represents a PostgreSQL operator for finding the first descendent in an ltree type. LTreeFirstMatches Represents a PostgreSQL operator for finding the first match in an ltree type. LTreeMatches Represents a PostgreSQL operator for matching in an ltree type. LTreeMatchesAny Represents a PostgreSQL operator for matching in an ltree type. NetworkContainedByOrEqual Represents a PostgreSQL network contained-by-or-equal operator. NetworkContainsOrContainedBy Represents a PostgreSQL network contains-or-contained-by operator. NetworkContainsOrEqual Represents a PostgreSQL network contains-or-equal operator. Overlaps Represents a PostgreSQL overlap operator. RangeDoesNotExtendLeftOf Represents a PostgreSQL operator for checking if a range does not extend to the left of another range. RangeDoesNotExtendRightOf Represents a PostgreSQL operator for checking if a range does not extend to the right of another range. RangeExcept Represents a PostgreSQL operator for performing an except operation between two ranges. RangeIntersect Represents a PostgreSQL operator for performing an intersection between two ranges. RangeIsAdjacentTo Represents a PostgreSQL operator for checking if a range is adjacent to another range. RangeIsStrictlyLeftOf Represents a PostgreSQL operator for checking if a range is strictly to the left of another range. RangeIsStrictlyRightOf Represents a PostgreSQL operator for checking if a range is strictly to the right of another range. RangeUnion Represents a PostgreSQL operator for performing a union between two ranges. TextSearchAnd Represents a PostgreSQL operator for logical AND within a full-text search match. TextSearchMatch Represents a PostgreSQL operator for performing a full-text search match. TextSearchOr Represents a PostgreSQL operator for logical OR within a full-text search match."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions Enums PgExpressionType PostgreSQL-specific expression node types."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlCompiledQueryCacheKeyGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlCompiledQueryCacheKeyGenerator.html",
    "title": "Class NpgsqlCompiledQueryCacheKeyGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlCompiledQueryCacheKeyGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CompiledQueryCacheKeyGenerator RelationalCompiledQueryCacheKeyGenerator NpgsqlCompiledQueryCacheKeyGenerator Implements ICompiledQueryCacheKeyGenerator Inherited Members RelationalCompiledQueryCacheKeyGenerator.GenerateCacheKeyCore(Expression, bool) RelationalCompiledQueryCacheKeyGenerator.RelationalDependencies CompiledQueryCacheKeyGenerator.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCompiledQueryCacheKeyGenerator : RelationalCompiledQueryCacheKeyGenerator, ICompiledQueryCacheKeyGenerator Constructors | Edit this page View Source NpgsqlCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies) Parameters Type Name Description CompiledQueryCacheKeyGeneratorDependencies dependencies RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies Methods | Edit this page View Source GenerateCacheKey(Expression, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override object GenerateCacheKey(Expression query, bool async) Parameters Type Name Description Expression query bool async Returns Type Description object Overrides RelationalCompiledQueryCacheKeyGenerator.GenerateCacheKey(Expression, bool) Implements ICompiledQueryCacheKeyGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlDeleteConvertingExpressionVisitor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlDeleteConvertingExpressionVisitor.html",
    "title": "Class NpgsqlDeleteConvertingExpressionVisitor | Npgsql Documentation",
    "keywords": "Class NpgsqlDeleteConvertingExpressionVisitor Converts the relational NonQueryExpression into a PG-specific PgDeleteExpression, which precisely models a DELETE statement in PostgreSQL. This is done to handle the PG-specific USING syntax for table joining. Inheritance object ExpressionVisitor NpgsqlDeleteConvertingExpressionVisitor Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDeleteConvertingExpressionVisitor : ExpressionVisitor Methods | Edit this page View Source Process(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Expression Process(Expression node) Parameters Type Name Description Expression node Returns Type Description Expression | Edit this page View Source VisitDelete(DeleteExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitDelete(DeleteExpression deleteExpression) Parameters Type Name Description DeleteExpression deleteExpression Returns Type Description Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlEvaluatableExpressionFilter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlEvaluatableExpressionFilter.html",
    "title": "Class NpgsqlEvaluatableExpressionFilter | Npgsql Documentation",
    "keywords": "Class NpgsqlEvaluatableExpressionFilter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object EvaluatableExpressionFilter RelationalEvaluatableExpressionFilter NpgsqlEvaluatableExpressionFilter Implements IEvaluatableExpressionFilter Inherited Members RelationalEvaluatableExpressionFilter.RelationalDependencies EvaluatableExpressionFilter.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlEvaluatableExpressionFilter : RelationalEvaluatableExpressionFilter, IEvaluatableExpressionFilter Constructors | Edit this page View Source NpgsqlEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies, RelationalEvaluatableExpressionFilterDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies, RelationalEvaluatableExpressionFilterDependencies relationalDependencies) Parameters Type Name Description EvaluatableExpressionFilterDependencies dependencies RelationalEvaluatableExpressionFilterDependencies relationalDependencies Methods | Edit this page View Source IsEvaluatableExpression(Expression, IModel) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool IsEvaluatableExpression(Expression expression, IModel model) Parameters Type Name Description Expression expression IModel model Returns Type Description bool Overrides RelationalEvaluatableExpressionFilter.IsEvaluatableExpression(Expression, IModel) Implements IEvaluatableExpressionFilter"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessor.html",
    "title": "Class NpgsqlParameterBasedSqlProcessor | Npgsql Documentation",
    "keywords": "Class NpgsqlParameterBasedSqlProcessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object RelationalParameterBasedSqlProcessor NpgsqlParameterBasedSqlProcessor Inherited Members RelationalParameterBasedSqlProcessor.ExpandFromSqlParameter(Expression, IReadOnlyDictionary<string, object>, out bool) RelationalParameterBasedSqlProcessor.Dependencies RelationalParameterBasedSqlProcessor.UseRelationalNulls object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlParameterBasedSqlProcessor : RelationalParameterBasedSqlProcessor Constructors | Edit this page View Source NpgsqlParameterBasedSqlProcessor(RelationalParameterBasedSqlProcessorDependencies, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlParameterBasedSqlProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls) Parameters Type Name Description RelationalParameterBasedSqlProcessorDependencies dependencies bool useRelationalNulls Methods | Edit this page View Source Optimize(Expression, IReadOnlyDictionary<string, object?>, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression Optimize(Expression queryExpression, IReadOnlyDictionary<string, object?> parametersValues, out bool canCache) Parameters Type Name Description Expression queryExpression IReadOnlyDictionary<string, object> parametersValues bool canCache Returns Type Description Expression Overrides RelationalParameterBasedSqlProcessor.Optimize(Expression, IReadOnlyDictionary<string, object>, out bool) | Edit this page View Source ProcessSqlNullability(Expression, IReadOnlyDictionary<string, object?>, out bool) Processes the query expression based on nullability of nodes to apply null semantics in use and optimize it for given parameter values. Declaration protected override Expression ProcessSqlNullability(Expression selectExpression, IReadOnlyDictionary<string, object?> parametersValues, out bool canCache) Parameters Type Name Description Expression selectExpression IReadOnlyDictionary<string, object> parametersValues A dictionary of parameter values to use. bool canCache A bool value indicating if the query expression can be cached. Returns Type Description Expression A processed query expression. Overrides RelationalParameterBasedSqlProcessor.ProcessSqlNullability(Expression, IReadOnlyDictionary<string, object>, out bool)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessorFactory.html",
    "title": "Class NpgsqlParameterBasedSqlProcessorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlParameterBasedSqlProcessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlParameterBasedSqlProcessorFactory Implements IRelationalParameterBasedSqlProcessorFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlParameterBasedSqlProcessorFactory : IRelationalParameterBasedSqlProcessorFactory Constructors | Edit this page View Source NpgsqlParameterBasedSqlProcessorFactory(RelationalParameterBasedSqlProcessorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlParameterBasedSqlProcessorFactory(RelationalParameterBasedSqlProcessorDependencies dependencies) Parameters Type Name Description RelationalParameterBasedSqlProcessorDependencies dependencies Methods | Edit this page View Source Create(bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual RelationalParameterBasedSqlProcessor Create(bool useRelationalNulls) Parameters Type Name Description bool useRelationalNulls Returns Type Description RelationalParameterBasedSqlProcessor Implements IRelationalParameterBasedSqlProcessorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContext.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContext.html",
    "title": "Class NpgsqlQueryCompilationContext | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryCompilationContext This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object QueryCompilationContext RelationalQueryCompilationContext NpgsqlQueryCompilationContext Inherited Members RelationalQueryCompilationContext.RelationalDependencies RelationalQueryCompilationContext.QuerySplittingBehavior QueryCompilationContext.QueryParameterPrefix QueryCompilationContext.QueryContextParameter QueryCompilationContext.NotTranslatedExpression QueryCompilationContext.AddTag(string) QueryCompilationContext.CreateQueryExecutor<TResult>(Expression) QueryCompilationContext.RegisterRuntimeParameter(string, LambdaExpression) QueryCompilationContext.Dependencies QueryCompilationContext.IsAsync QueryCompilationContext.Model QueryCompilationContext.ContextOptions QueryCompilationContext.QueryTrackingBehavior QueryCompilationContext.IgnoreQueryFilters QueryCompilationContext.IgnoreAutoIncludes QueryCompilationContext.Tags QueryCompilationContext.Logger QueryCompilationContext.ContextType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryCompilationContext : RelationalQueryCompilationContext Constructors | Edit this page View Source NpgsqlQueryCompilationContext(QueryCompilationContextDependencies, RelationalQueryCompilationContextDependencies, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryCompilationContext(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies, bool async) Parameters Type Name Description QueryCompilationContextDependencies dependencies RelationalQueryCompilationContextDependencies relationalDependencies bool async Properties | Edit this page View Source IsBuffering This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool IsBuffering { get; } Property Value Type Description bool Overrides QueryCompilationContext.IsBuffering"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContextFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContextFactory.html",
    "title": "Class NpgsqlQueryCompilationContextFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryCompilationContextFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlQueryCompilationContextFactory Implements IQueryCompilationContextFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryCompilationContextFactory : IQueryCompilationContextFactory Constructors | Edit this page View Source NpgsqlQueryCompilationContextFactory(QueryCompilationContextDependencies, RelationalQueryCompilationContextDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryCompilationContextFactory(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies) Parameters Type Name Description QueryCompilationContextDependencies dependencies RelationalQueryCompilationContextDependencies relationalDependencies Methods | Edit this page View Source Create(bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual QueryCompilationContext Create(bool async) Parameters Type Name Description bool async Returns Type Description QueryCompilationContext Implements IQueryCompilationContextFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryRootProcessor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryRootProcessor.html",
    "title": "Class NpgsqlQueryRootProcessor | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryRootProcessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ExpressionVisitor QueryRootProcessor RelationalQueryRootProcessor NpgsqlQueryRootProcessor Inherited Members RelationalQueryRootProcessor.ShouldConvertToInlineQueryRoot(NewArrayExpression) RelationalQueryRootProcessor.VisitMethodCall(MethodCallExpression) RelationalQueryRootProcessor.VisitExtension(Expression) ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryRootProcessor : RelationalQueryRootProcessor Constructors | Edit this page View Source NpgsqlQueryRootProcessor(QueryTranslationPreprocessorDependencies, RelationalQueryTranslationPreprocessorDependencies, QueryCompilationContext, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryRootProcessor(QueryTranslationPreprocessorDependencies dependencies, RelationalQueryTranslationPreprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description QueryTranslationPreprocessorDependencies dependencies RelationalQueryTranslationPreprocessorDependencies relationalDependencies QueryCompilationContext queryCompilationContext INpgsqlSingletonOptions npgsqlSingletonOptions Methods | Edit this page View Source ShouldConvertToParameterQueryRoot(ParameterExpression) Converts a ParameterExpression to a ParameterQueryRootExpression, to be later translated to PostgreSQL unnest over an array parameter. Declaration protected override bool ShouldConvertToParameterQueryRoot(ParameterExpression parameterExpression) Parameters Type Name Description ParameterExpression parameterExpression Returns Type Description bool Overrides RelationalQueryRootProcessor.ShouldConvertToParameterQueryRoot(ParameterExpression) Remarks This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGenerator.html",
    "title": "Class NpgsqlQuerySqlGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlQuerySqlGenerator The default query SQL generator for Npgsql. Inheritance object ExpressionVisitor SqlExpressionVisitor QuerySqlGenerator NpgsqlQuerySqlGenerator Inherited Members QuerySqlGenerator.GetCommand(Expression) QuerySqlGenerator.GenerateTagsHeaderComment(SelectExpression) QuerySqlGenerator.GenerateTagsHeaderComment(ISet<string>) QuerySqlGenerator.VisitSqlFragment(SqlFragmentExpression) QuerySqlGenerator.VisitSelect(SelectExpression) QuerySqlGenerator.GeneratePseudoFromClause() QuerySqlGenerator.GenerateEmptyProjection(SelectExpression) QuerySqlGenerator.VisitProjection(ProjectionExpression) QuerySqlGenerator.VisitSqlFunction(SqlFunctionExpression) QuerySqlGenerator.VisitTableValuedFunction(TableValuedFunctionExpression) QuerySqlGenerator.VisitColumn(ColumnExpression) QuerySqlGenerator.VisitTable(TableExpression) QuerySqlGenerator.VisitFromSql(FromSqlExpression) QuerySqlGenerator.CheckComposableSql(string) QuerySqlGenerator.CheckComposableSqlTrimmed(ReadOnlySpan<char>) QuerySqlGenerator.VisitSqlConstant(SqlConstantExpression) QuerySqlGenerator.VisitSqlParameter(SqlParameterExpression) QuerySqlGenerator.VisitLike(LikeExpression) QuerySqlGenerator.GenerateLike(LikeExpression, bool) QuerySqlGenerator.VisitDistinct(DistinctExpression) QuerySqlGenerator.VisitCase(CaseExpression) QuerySqlGenerator.VisitExists(ExistsExpression) QuerySqlGenerator.GenerateExists(ExistsExpression, bool) QuerySqlGenerator.VisitIn(InExpression) QuerySqlGenerator.GenerateIn(InExpression, bool) QuerySqlGenerator.VisitAtTimeZone(AtTimeZoneExpression) QuerySqlGenerator.GenerateOrderings(SelectExpression) QuerySqlGenerator.VisitCrossJoin(CrossJoinExpression) QuerySqlGenerator.VisitInnerJoin(InnerJoinExpression) QuerySqlGenerator.VisitLeftJoin(LeftJoinExpression) QuerySqlGenerator.VisitScalarSubquery(ScalarSubqueryExpression) QuerySqlGenerator.VisitRowNumber(RowNumberExpression) QuerySqlGenerator.VisitRowValue(RowValueExpression) QuerySqlGenerator.VisitExcept(ExceptExpression) QuerySqlGenerator.VisitIntersect(IntersectExpression) QuerySqlGenerator.VisitUnion(UnionExpression) QuerySqlGenerator.Dependencies QuerySqlGenerator.AliasSeparator QuerySqlGenerator.Sql ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQuerySqlGenerator : QuerySqlGenerator Constructors | Edit this page View Source NpgsqlQuerySqlGenerator(QuerySqlGeneratorDependencies, IRelationalTypeMappingSource, bool, Version) Declaration public NpgsqlQuerySqlGenerator(QuerySqlGeneratorDependencies dependencies, IRelationalTypeMappingSource typeMappingSource, bool reverseNullOrderingEnabled, Version postgresVersion) Parameters Type Name Description QuerySqlGeneratorDependencies dependencies IRelationalTypeMappingSource typeMappingSource bool reverseNullOrderingEnabled Version postgresVersion Methods | Edit this page View Source GenerateLimitOffset(SelectExpression) Generates a LIMIT...OFFSET... construct in the relational command Declaration protected override void GenerateLimitOffset(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression A select expression to use. Overrides QuerySqlGenerator.GenerateLimitOffset(SelectExpression) | Edit this page View Source GenerateRootCommand(Expression) Generates the command for the given top-level query expression. This allows providers to intercept if an expression requires different processing when it is at top-level. Declaration protected override void GenerateRootCommand(Expression queryExpression) Parameters Type Name Description Expression queryExpression A query expression to print in command. Overrides QuerySqlGenerator.GenerateRootCommand(Expression) | Edit this page View Source GenerateSetOperation(SetOperationBase) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void GenerateSetOperation(SetOperationBase setOperation) Parameters Type Name Description SetOperationBase setOperation Overrides QuerySqlGenerator.GenerateSetOperation(SetOperationBase) | Edit this page View Source GenerateSetOperationOperand(SetOperationBase, SelectExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void GenerateSetOperationOperand(SetOperationBase setOperation, SelectExpression operand) Parameters Type Name Description SetOperationBase setOperation SelectExpression operand Overrides QuerySqlGenerator.GenerateSetOperationOperand(SetOperationBase, SelectExpression) | Edit this page View Source GenerateTop(SelectExpression) Generates a TOP construct in the relational command Declaration protected override void GenerateTop(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression A select expression to use. Overrides QuerySqlGenerator.GenerateTop(SelectExpression) | Edit this page View Source GenerateValues(ValuesExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void GenerateValues(ValuesExpression valuesExpression) Parameters Type Name Description ValuesExpression valuesExpression Overrides QuerySqlGenerator.GenerateValues(ValuesExpression) | Edit this page View Source GetOperator(SqlBinaryExpression) Gets a SQL operator for a SQL binary operation. Declaration protected override string GetOperator(SqlBinaryExpression e) Parameters Type Name Description SqlBinaryExpression e Returns Type Description string A string representation of the binary operator. Overrides QuerySqlGenerator.GetOperator(SqlBinaryExpression) | Edit this page View Source RequiresParentheses(SqlExpression, SqlExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool RequiresParentheses(SqlExpression outerExpression, SqlExpression innerExpression) Parameters Type Name Description SqlExpression outerExpression SqlExpression innerExpression Returns Type Description bool Overrides QuerySqlGenerator.RequiresParentheses(SqlExpression, SqlExpression) | Edit this page View Source TryGenerateWithoutWrappingSelect(SelectExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool TryGenerateWithoutWrappingSelect(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression Returns Type Description bool Overrides QuerySqlGenerator.TryGenerateWithoutWrappingSelect(SelectExpression) | Edit this page View Source TryGetOperatorInfo(SqlExpression, out int, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool TryGetOperatorInfo(SqlExpression expression, out int precedence, out bool isAssociative) Parameters Type Name Description SqlExpression expression int precedence bool isAssociative Returns Type Description bool Overrides QuerySqlGenerator.TryGetOperatorInfo(SqlExpression, out int, out bool) | Edit this page View Source VisitArrayAll(PgAllExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitArrayAll(PgAllExpression expression) Parameters Type Name Description PgAllExpression expression Returns Type Description Expression | Edit this page View Source VisitArrayAny(PgAnyExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitArrayAny(PgAnyExpression expression) Parameters Type Name Description PgAnyExpression expression Returns Type Description Expression | Edit this page View Source VisitArrayIndex(SqlBinaryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitArrayIndex(SqlBinaryExpression expression) Parameters Type Name Description SqlBinaryExpression expression Returns Type Description Expression | Edit this page View Source VisitArrayIndex(PgArrayIndexExpression) Produces SQL array index expression (e.g. arr[1]). Declaration protected virtual Expression VisitArrayIndex(PgArrayIndexExpression expression) Parameters Type Name Description PgArrayIndexExpression expression Returns Type Description Expression | Edit this page View Source VisitArraySlice(PgArraySliceExpression) Produces SQL array slice expression (e.g. arr[1:2]). Declaration protected virtual Expression VisitArraySlice(PgArraySliceExpression expression) Parameters Type Name Description PgArraySliceExpression expression Returns Type Description Expression | Edit this page View Source VisitCollate(CollateExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitCollate(CollateExpression collateExpression) Parameters Type Name Description CollateExpression collateExpression Returns Type Description Expression Overrides QuerySqlGenerator.VisitCollate(CollateExpression) | Edit this page View Source VisitCrossApply(CrossApplyExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitCrossApply(CrossApplyExpression crossApplyExpression) Parameters Type Name Description CrossApplyExpression crossApplyExpression Returns Type Description Expression Overrides QuerySqlGenerator.VisitCrossApply(CrossApplyExpression) | Edit this page View Source VisitDelete(DeleteExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitDelete(DeleteExpression deleteExpression) Parameters Type Name Description DeleteExpression deleteExpression Returns Type Description Expression Overrides QuerySqlGenerator.VisitDelete(DeleteExpression) | Edit this page View Source VisitExtension(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitExtension(Expression extensionExpression) Parameters Type Name Description Expression extensionExpression Returns Type Description Expression Overrides SqlExpressionVisitor.VisitExtension(Expression) | Edit this page View Source VisitILike(PgILikeExpression) Visits the children of an PgILikeExpression. Declaration protected virtual Expression VisitILike(PgILikeExpression likeExpression) Parameters Type Name Description PgILikeExpression likeExpression The expression. Returns Type Description Expression An Expression. | Edit this page View Source VisitJsonPathTraversal(PgJsonTraversalExpression) Visits the children of an PgJsonTraversalExpression. Declaration protected virtual Expression VisitJsonPathTraversal(PgJsonTraversalExpression expression) Parameters Type Name Description PgJsonTraversalExpression expression The expression. Returns Type Description Expression An Expression. | Edit this page View Source VisitJsonScalar(JsonScalarExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression) Parameters Type Name Description JsonScalarExpression jsonScalarExpression Returns Type Description Expression Overrides QuerySqlGenerator.VisitJsonScalar(JsonScalarExpression) | Edit this page View Source VisitNewArray(PgNewArrayExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitNewArray(PgNewArrayExpression pgNewArrayExpression) Parameters Type Name Description PgNewArrayExpression pgNewArrayExpression Returns Type Description Expression | Edit this page View Source VisitOrdering(OrderingExpression) Visits the children of the ordering expression. Declaration protected override Expression VisitOrdering(OrderingExpression ordering) Parameters Type Name Description OrderingExpression ordering Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides QuerySqlGenerator.VisitOrdering(OrderingExpression) | Edit this page View Source VisitOuterApply(OuterApplyExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitOuterApply(OuterApplyExpression outerApplyExpression) Parameters Type Name Description OuterApplyExpression outerApplyExpression Returns Type Description Expression Overrides QuerySqlGenerator.VisitOuterApply(OuterApplyExpression) | Edit this page View Source VisitPgBinary(PgBinaryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitPgBinary(PgBinaryExpression binaryExpression) Parameters Type Name Description PgBinaryExpression binaryExpression Returns Type Description Expression | Edit this page View Source VisitPgDelete(PgDeleteExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitPgDelete(PgDeleteExpression pgDeleteExpression) Parameters Type Name Description PgDeleteExpression pgDeleteExpression Returns Type Description Expression | Edit this page View Source VisitPgFunction(PgFunctionExpression) Visits the children of a PgFunctionExpression. Declaration protected virtual Expression VisitPgFunction(PgFunctionExpression e) Parameters Type Name Description PgFunctionExpression e The expression. Returns Type Description Expression An Expression. | Edit this page View Source VisitPgTableValuedFunctionExpression(PgTableValuedFunctionExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitPgTableValuedFunctionExpression(PgTableValuedFunctionExpression tableValuedFunctionExpression) Parameters Type Name Description PgTableValuedFunctionExpression tableValuedFunctionExpression Returns Type Description Expression | Edit this page View Source VisitRegexMatch(PgRegexMatchExpression) Visits the children of a PgRegexMatchExpression. Declaration protected virtual Expression VisitRegexMatch(PgRegexMatchExpression expression) Parameters Type Name Description PgRegexMatchExpression expression The expression. Returns Type Description Expression An Expression. Remarks See: http://www.postgresql.org/docs/current/static/functions-matching.html | Edit this page View Source VisitRowValue(PgRowValueExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual Expression VisitRowValue(PgRowValueExpression rowValueExpression) Parameters Type Name Description PgRowValueExpression rowValueExpression Returns Type Description Expression | Edit this page View Source VisitSqlBinary(SqlBinaryExpression) Visits the children of the sql binary expression. Declaration protected override Expression VisitSqlBinary(SqlBinaryExpression binary) Parameters Type Name Description SqlBinaryExpression binary Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides QuerySqlGenerator.VisitSqlBinary(SqlBinaryExpression) | Edit this page View Source VisitSqlUnary(SqlUnaryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression) Parameters Type Name Description SqlUnaryExpression sqlUnaryExpression Returns Type Description Expression Overrides QuerySqlGenerator.VisitSqlUnary(SqlUnaryExpression) | Edit this page View Source VisitUnknownBinary(PgUnknownBinaryExpression) Visits the children of a PgUnknownBinaryExpression. Declaration protected virtual Expression VisitUnknownBinary(PgUnknownBinaryExpression unknownBinaryExpression) Parameters Type Name Description PgUnknownBinaryExpression unknownBinaryExpression The expression. Returns Type Description Expression An Expression. | Edit this page View Source VisitUpdate(UpdateExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitUpdate(UpdateExpression updateExpression) Parameters Type Name Description UpdateExpression updateExpression Returns Type Description Expression Overrides QuerySqlGenerator.VisitUpdate(UpdateExpression) | Edit this page View Source VisitValues(ValuesExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitValues(ValuesExpression valuesExpression) Parameters Type Name Description ValuesExpression valuesExpression Returns Type Description Expression Overrides QuerySqlGenerator.VisitValues(ValuesExpression)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGeneratorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGeneratorFactory.html",
    "title": "Class NpgsqlQuerySqlGeneratorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQuerySqlGeneratorFactory The default factory for Npgsql-specific query SQL generators. Inheritance object NpgsqlQuerySqlGeneratorFactory Implements IQuerySqlGeneratorFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQuerySqlGeneratorFactory : IQuerySqlGeneratorFactory Constructors | Edit this page View Source NpgsqlQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies, IRelationalTypeMappingSource, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies, IRelationalTypeMappingSource typeMappingSource, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description QuerySqlGeneratorDependencies dependencies IRelationalTypeMappingSource typeMappingSource INpgsqlSingletonOptions npgsqlSingletonOptions Methods | Edit this page View Source Create() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual QuerySqlGenerator Create() Returns Type Description QuerySqlGenerator Implements IQuerySqlGeneratorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessor.html",
    "title": "Class NpgsqlQueryTranslationPostprocessor | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryTranslationPostprocessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object QueryTranslationPostprocessor RelationalQueryTranslationPostprocessor NpgsqlQueryTranslationPostprocessor Inherited Members RelationalQueryTranslationPostprocessor.RelationalDependencies QueryTranslationPostprocessor.Dependencies QueryTranslationPostprocessor.QueryCompilationContext object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryTranslationPostprocessor : RelationalQueryTranslationPostprocessor Constructors | Edit this page View Source NpgsqlQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies, RelationalQueryTranslationPostprocessorDependencies, QueryCompilationContext) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryTranslationPostprocessorDependencies dependencies RelationalQueryTranslationPostprocessorDependencies relationalDependencies QueryCompilationContext queryCompilationContext Methods | Edit this page View Source Process(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression Process(Expression query) Parameters Type Name Description Expression query Returns Type Description Expression Overrides RelationalQueryTranslationPostprocessor.Process(Expression)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessorFactory.html",
    "title": "Class NpgsqlQueryTranslationPostprocessorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryTranslationPostprocessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlQueryTranslationPostprocessorFactory Implements IQueryTranslationPostprocessorFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryTranslationPostprocessorFactory : IQueryTranslationPostprocessorFactory Constructors | Edit this page View Source NpgsqlQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies, RelationalQueryTranslationPostprocessorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies) Parameters Type Name Description QueryTranslationPostprocessorDependencies dependencies RelationalQueryTranslationPostprocessorDependencies relationalDependencies Properties | Edit this page View Source Dependencies Dependencies for this service. Declaration protected virtual QueryTranslationPostprocessorDependencies Dependencies { get; } Property Value Type Description QueryTranslationPostprocessorDependencies | Edit this page View Source RelationalDependencies Relational provider-specific dependencies for this service. Declaration protected virtual RelationalQueryTranslationPostprocessorDependencies RelationalDependencies { get; } Property Value Type Description RelationalQueryTranslationPostprocessorDependencies Methods | Edit this page View Source Create(QueryCompilationContext) Creates a new QueryTranslationPostprocessor for given QueryCompilationContext. Declaration public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryCompilationContext queryCompilationContext The query compilation context to use. Returns Type Description QueryTranslationPostprocessor The created visitor. Implements IQueryTranslationPostprocessorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPreprocessor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPreprocessor.html",
    "title": "Class NpgsqlQueryTranslationPreprocessor | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryTranslationPreprocessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object QueryTranslationPreprocessor RelationalQueryTranslationPreprocessor NpgsqlQueryTranslationPreprocessor Inherited Members RelationalQueryTranslationPreprocessor.NormalizeQueryableMethod(Expression) RelationalQueryTranslationPreprocessor.RelationalDependencies QueryTranslationPreprocessor.Process(Expression) QueryTranslationPreprocessor.Dependencies QueryTranslationPreprocessor.QueryCompilationContext object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryTranslationPreprocessor : RelationalQueryTranslationPreprocessor Constructors | Edit this page View Source NpgsqlQueryTranslationPreprocessor(QueryTranslationPreprocessorDependencies, RelationalQueryTranslationPreprocessorDependencies, INpgsqlSingletonOptions, QueryCompilationContext) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryTranslationPreprocessor(QueryTranslationPreprocessorDependencies dependencies, RelationalQueryTranslationPreprocessorDependencies relationalDependencies, INpgsqlSingletonOptions npgsqlSingletonOptions, QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryTranslationPreprocessorDependencies dependencies RelationalQueryTranslationPreprocessorDependencies relationalDependencies INpgsqlSingletonOptions npgsqlSingletonOptions QueryCompilationContext queryCompilationContext Methods | Edit this page View Source ProcessQueryRoots(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression ProcessQueryRoots(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression Overrides RelationalQueryTranslationPreprocessor.ProcessQueryRoots(Expression)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPreprocessorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPreprocessorFactory.html",
    "title": "Class NpgsqlQueryTranslationPreprocessorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryTranslationPreprocessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlQueryTranslationPreprocessorFactory Implements IQueryTranslationPreprocessorFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryTranslationPreprocessorFactory : IQueryTranslationPreprocessorFactory Constructors | Edit this page View Source NpgsqlQueryTranslationPreprocessorFactory(QueryTranslationPreprocessorDependencies, RelationalQueryTranslationPreprocessorDependencies, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryTranslationPreprocessorFactory(QueryTranslationPreprocessorDependencies dependencies, RelationalQueryTranslationPreprocessorDependencies relationalDependencies, INpgsqlSingletonOptions npgsqlSingletonOptions) Parameters Type Name Description QueryTranslationPreprocessorDependencies dependencies RelationalQueryTranslationPreprocessorDependencies relationalDependencies INpgsqlSingletonOptions npgsqlSingletonOptions Properties | Edit this page View Source Dependencies Dependencies for this service. Declaration protected virtual QueryTranslationPreprocessorDependencies Dependencies { get; } Property Value Type Description QueryTranslationPreprocessorDependencies | Edit this page View Source RelationalDependencies Relational provider-specific dependencies for this service. Declaration protected virtual RelationalQueryTranslationPreprocessorDependencies RelationalDependencies { get; } Property Value Type Description RelationalQueryTranslationPreprocessorDependencies Methods | Edit this page View Source Create(QueryCompilationContext) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual QueryTranslationPreprocessor Create(QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryCompilationContext queryCompilationContext Returns Type Description QueryTranslationPreprocessor Implements IQueryTranslationPreprocessorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitor.NpgsqlInferredTypeMappingApplier.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitor.NpgsqlInferredTypeMappingApplier.html",
    "title": "Class NpgsqlQueryableMethodTranslatingExpressionVisitor.NpgsqlInferredTypeMappingApplier | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryableMethodTranslatingExpressionVisitor.NpgsqlInferredTypeMappingApplier This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ExpressionVisitor RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier NpgsqlQueryableMethodTranslatingExpressionVisitor.NpgsqlInferredTypeMappingApplier Inherited Members RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.TryGetInferredTypeMapping(TableExpressionBase, string, out RelationalTypeMapping) RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.ApplyTypeMappingsOnValuesExpression(ValuesExpression, bool) RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.Model ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax protected class NpgsqlQueryableMethodTranslatingExpressionVisitor.NpgsqlInferredTypeMappingApplier : RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier Constructors | Edit this page View Source NpgsqlInferredTypeMappingApplier(IModel, NpgsqlTypeMappingSource, NpgsqlSqlExpressionFactory, IReadOnlyDictionary<(TableExpressionBase, string), RelationalTypeMapping?>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlInferredTypeMappingApplier(IModel model, NpgsqlTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IReadOnlyDictionary<(TableExpressionBase, string), RelationalTypeMapping?> inferredTypeMappings) Parameters Type Name Description IModel model NpgsqlTypeMappingSource typeMappingSource NpgsqlSqlExpressionFactory sqlExpressionFactory IReadOnlyDictionary<(TableExpressionBase, string), RelationalTypeMapping> inferredTypeMappings Methods | Edit this page View Source VisitExtension(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitExtension(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.VisitExtension(Expression)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitor.html",
    "title": "Class NpgsqlQueryableMethodTranslatingExpressionVisitor | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryableMethodTranslatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ExpressionVisitor QueryableMethodTranslatingExpressionVisitor RelationalQueryableMethodTranslatingExpressionVisitor NpgsqlQueryableMethodTranslatingExpressionVisitor Inherited Members RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression) RelationalQueryableMethodTranslatingExpressionVisitor.VisitExtension(Expression) RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression) RelationalQueryableMethodTranslatingExpressionVisitor.VisitInlineQueryRoot(InlineQueryRootExpression) RelationalQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression(IEntityType) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAverage(ShapedQueryExpression, LambdaExpression, Type) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateCast(ShapedQueryExpression, Type) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateDefaultIfEmpty(ShapedQueryExpression, Expression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateDistinct(ShapedQueryExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExcept(ShapedQueryExpression, ShapedQueryExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateGroupBy(ShapedQueryExpression, LambdaExpression, LambdaExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateGroupJoin(ShapedQueryExpression, ShapedQueryExpression, LambdaExpression, LambdaExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateIntersect(ShapedQueryExpression, ShapedQueryExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateJoin(ShapedQueryExpression, ShapedQueryExpression, LambdaExpression, LambdaExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLeftJoin(ShapedQueryExpression, ShapedQueryExpression, LambdaExpression, LambdaExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLastOrDefault(ShapedQueryExpression, LambdaExpression, Type, bool) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLongCount(ShapedQueryExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateMax(ShapedQueryExpression, LambdaExpression, Type) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateMin(ShapedQueryExpression, LambdaExpression, Type) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateOfType(ShapedQueryExpression, Type) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy(ShapedQueryExpression, LambdaExpression, bool) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateReverse(ShapedQueryExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelect(ShapedQueryExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(ShapedQueryExpression, LambdaExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(ShapedQueryExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSingleOrDefault(ShapedQueryExpression, LambdaExpression, Type, bool) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSkipWhile(ShapedQueryExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSum(ShapedQueryExpression, LambdaExpression, Type) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateTakeWhile(ShapedQueryExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateThenBy(ShapedQueryExpression, LambdaExpression, bool) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateUnion(ShapedQueryExpression, ShapedQueryExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateWhere(ShapedQueryExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExecuteDelete(ShapedQueryExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExecuteUpdate(ShapedQueryExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExpression(Expression, bool) RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLambdaExpression(ShapedQueryExpression, LambdaExpression) RelationalQueryableMethodTranslatingExpressionVisitor.IsNaturallyOrdered(SelectExpression) RelationalQueryableMethodTranslatingExpressionVisitor.RelationalDependencies QueryableMethodTranslatingExpressionVisitor.AddTranslationErrorDetails(string) QueryableMethodTranslatingExpressionVisitor.MarkShaperNullable(Expression) QueryableMethodTranslatingExpressionVisitor.TranslateSubquery(Expression) QueryableMethodTranslatingExpressionVisitor.Dependencies QueryableMethodTranslatingExpressionVisitor.TranslationErrorDetails QueryableMethodTranslatingExpressionVisitor.QueryCompilationContext ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryableMethodTranslatingExpressionVisitor : RelationalQueryableMethodTranslatingExpressionVisitor Constructors | Edit this page View Source NpgsqlQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies, QueryCompilationContext) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryableMethodTranslatingExpressionVisitorDependencies dependencies RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies QueryCompilationContext queryCompilationContext | Edit this page View Source NpgsqlQueryableMethodTranslatingExpressionVisitor(NpgsqlQueryableMethodTranslatingExpressionVisitor) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlQueryableMethodTranslatingExpressionVisitor(NpgsqlQueryableMethodTranslatingExpressionVisitor parentVisitor) Parameters Type Name Description NpgsqlQueryableMethodTranslatingExpressionVisitor parentVisitor Methods | Edit this page View Source ApplyInferredTypeMappings(Expression, IReadOnlyDictionary<(TableExpressionBase, string), RelationalTypeMapping?>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression ApplyInferredTypeMappings(Expression expression, IReadOnlyDictionary<(TableExpressionBase, string), RelationalTypeMapping?> inferredTypeMappings) Parameters Type Name Description Expression expression IReadOnlyDictionary<(TableExpressionBase, string), RelationalTypeMapping> inferredTypeMappings Returns Type Description Expression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.ApplyInferredTypeMappings(Expression, IReadOnlyDictionary<(TableExpressionBase, string), RelationalTypeMapping>) | Edit this page View Source CreateSubqueryVisitor() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor() Returns Type Description QueryableMethodTranslatingExpressionVisitor Overrides RelationalQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor() | Edit this page View Source IsOrdered(SelectExpression) Determines whether the given SelectExpression is ordered, typically because orderings have been added to it. Declaration protected override bool IsOrdered(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression The SelectExpression to check for ordering. Returns Type Description bool Whether selectExpression is ordered. Overrides RelationalQueryableMethodTranslatingExpressionVisitor.IsOrdered(SelectExpression) | Edit this page View Source IsValidSelectExpressionForExecuteDelete(SelectExpression, StructuralTypeShaperExpression, out TableExpression?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsValidSelectExpressionForExecuteDelete(SelectExpression selectExpression, StructuralTypeShaperExpression shaper, out TableExpression? tableExpression) Parameters Type Name Description SelectExpression selectExpression StructuralTypeShaperExpression shaper TableExpression tableExpression Returns Type Description bool Overrides RelationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete(SelectExpression, StructuralTypeShaperExpression, out TableExpression) | Edit this page View Source IsValidSelectExpressionForExecuteUpdate(SelectExpression, TableExpressionBase, out TableExpression?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override bool IsValidSelectExpressionForExecuteUpdate(SelectExpression selectExpression, TableExpressionBase targetTable, out TableExpression? tableExpression) Parameters Type Name Description SelectExpression selectExpression TableExpressionBase targetTable TableExpression tableExpression Returns Type Description bool Overrides RelationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate(SelectExpression, TableExpressionBase, out TableExpression) | Edit this page View Source TransformJsonQueryToTable(JsonQueryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression TransformJsonQueryToTable(JsonQueryExpression jsonQueryExpression) Parameters Type Name Description JsonQueryExpression jsonQueryExpression Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TransformJsonQueryToTable(JsonQueryExpression) | Edit this page View Source TranslateAll(ShapedQueryExpression, LambdaExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression? TranslateAll(ShapedQueryExpression source, LambdaExpression predicate) Parameters Type Name Description ShapedQueryExpression source LambdaExpression predicate Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAll(ShapedQueryExpression, LambdaExpression) | Edit this page View Source TranslateAny(ShapedQueryExpression, LambdaExpression?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression? TranslateAny(ShapedQueryExpression source, LambdaExpression? predicate) Parameters Type Name Description ShapedQueryExpression source LambdaExpression predicate Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAny(ShapedQueryExpression, LambdaExpression) | Edit this page View Source TranslateConcat(ShapedQueryExpression, ShapedQueryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression TranslateConcat(ShapedQueryExpression source1, ShapedQueryExpression source2) Parameters Type Name Description ShapedQueryExpression source1 ShapedQueryExpression source2 Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslateConcat(ShapedQueryExpression, ShapedQueryExpression) | Edit this page View Source TranslateContains(ShapedQueryExpression, Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression? TranslateContains(ShapedQueryExpression source, Expression item) Parameters Type Name Description ShapedQueryExpression source Expression item Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslateContains(ShapedQueryExpression, Expression) | Edit this page View Source TranslateCount(ShapedQueryExpression, LambdaExpression?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression? TranslateCount(ShapedQueryExpression source, LambdaExpression? predicate) Parameters Type Name Description ShapedQueryExpression source LambdaExpression predicate Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslateCount(ShapedQueryExpression, LambdaExpression) | Edit this page View Source TranslateElementAtOrDefault(ShapedQueryExpression, Expression, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression? TranslateElementAtOrDefault(ShapedQueryExpression source, Expression index, bool returnDefault) Parameters Type Name Description ShapedQueryExpression source Expression index bool returnDefault Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault(ShapedQueryExpression, Expression, bool) | Edit this page View Source TranslateFirstOrDefault(ShapedQueryExpression, LambdaExpression?, Type, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression? TranslateFirstOrDefault(ShapedQueryExpression source, LambdaExpression? predicate, Type returnType, bool returnDefault) Parameters Type Name Description ShapedQueryExpression source LambdaExpression predicate Type returnType bool returnDefault Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslateFirstOrDefault(ShapedQueryExpression, LambdaExpression, Type, bool) | Edit this page View Source TranslatePrimitiveCollection(SqlExpression, IProperty?, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression TranslatePrimitiveCollection(SqlExpression sqlExpression, IProperty? property, string tableAlias) Parameters Type Name Description SqlExpression sqlExpression IProperty property string tableAlias Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslatePrimitiveCollection(SqlExpression, IProperty, string) | Edit this page View Source TranslateSkip(ShapedQueryExpression, Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression? TranslateSkip(ShapedQueryExpression source, Expression count) Parameters Type Name Description ShapedQueryExpression source Expression count Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSkip(ShapedQueryExpression, Expression) | Edit this page View Source TranslateTake(ShapedQueryExpression, Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ShapedQueryExpression? TranslateTake(ShapedQueryExpression source, Expression count) Parameters Type Name Description ShapedQueryExpression source Expression count Returns Type Description ShapedQueryExpression Overrides RelationalQueryableMethodTranslatingExpressionVisitor.TranslateTake(ShapedQueryExpression, Expression)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitorFactory.html",
    "title": "Class NpgsqlQueryableMethodTranslatingExpressionVisitorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQueryableMethodTranslatingExpressionVisitorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlQueryableMethodTranslatingExpressionVisitorFactory Implements IQueryableMethodTranslatingExpressionVisitorFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQueryableMethodTranslatingExpressionVisitorFactory : IQueryableMethodTranslatingExpressionVisitorFactory Constructors | Edit this page View Source NpgsqlQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies) Parameters Type Name Description QueryableMethodTranslatingExpressionVisitorDependencies dependencies RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies Properties | Edit this page View Source Dependencies This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; } Property Value Type Description QueryableMethodTranslatingExpressionVisitorDependencies | Edit this page View Source RelationalDependencies This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; } Property Value Type Description RelationalQueryableMethodTranslatingExpressionVisitorDependencies Methods | Edit this page View Source Create(QueryCompilationContext) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual QueryableMethodTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext) Parameters Type Name Description QueryCompilationContext queryCompilationContext Returns Type Description QueryableMethodTranslatingExpressionVisitor Implements IQueryableMethodTranslatingExpressionVisitorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor.html",
    "title": "Class NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor | Npgsql Documentation",
    "keywords": "Class NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ExpressionVisitor NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor : ExpressionVisitor Methods | Edit this page View Source VisitExtension(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitExtension(Expression extensionExpression) Parameters Type Name Description Expression extensionExpression Returns Type Description Expression Overrides ExpressionVisitor.VisitExtension(Expression)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlNullabilityProcessor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlNullabilityProcessor.html",
    "title": "Class NpgsqlSqlNullabilityProcessor | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlNullabilityProcessor A class that processes a SQL tree based on nullability of nodes to apply null semantics in use and optimize it based on parameter values. This type is typically used by database providers (and other extensions). It is generally not used in application code. Inheritance object SqlNullabilityProcessor NpgsqlSqlNullabilityProcessor Inherited Members SqlNullabilityProcessor.Process(Expression, IReadOnlyDictionary<string, object>, out bool) SqlNullabilityProcessor.DoNotCache() SqlNullabilityProcessor.AddNonNullableColumn(ColumnExpression) SqlNullabilityProcessor.Visit(TableExpressionBase) SqlNullabilityProcessor.Visit(SelectExpression) SqlNullabilityProcessor.Visit(SqlExpression, out bool) SqlNullabilityProcessor.Visit(SqlExpression, bool, out bool) SqlNullabilityProcessor.VisitAtTimeZone(AtTimeZoneExpression, bool, out bool) SqlNullabilityProcessor.VisitCase(CaseExpression, bool, out bool) SqlNullabilityProcessor.VisitCollate(CollateExpression, bool, out bool) SqlNullabilityProcessor.VisitColumn(ColumnExpression, bool, out bool) SqlNullabilityProcessor.VisitDistinct(DistinctExpression, bool, out bool) SqlNullabilityProcessor.VisitExists(ExistsExpression, bool, out bool) SqlNullabilityProcessor.VisitIn(InExpression, bool, out bool) SqlNullabilityProcessor.VisitLike(LikeExpression, bool, out bool) SqlNullabilityProcessor.VisitRowNumber(RowNumberExpression, bool, out bool) SqlNullabilityProcessor.VisitRowValue(RowValueExpression, bool, out bool) SqlNullabilityProcessor.VisitScalarSubquery(ScalarSubqueryExpression, bool, out bool) SqlNullabilityProcessor.VisitSqlConstant(SqlConstantExpression, bool, out bool) SqlNullabilityProcessor.VisitSqlFragment(SqlFragmentExpression, bool, out bool) SqlNullabilityProcessor.VisitSqlParameter(SqlParameterExpression, bool, out bool) SqlNullabilityProcessor.VisitSqlUnary(SqlUnaryExpression, bool, out bool) SqlNullabilityProcessor.VisitJsonScalar(JsonScalarExpression, bool, out bool) SqlNullabilityProcessor.OptimizeNonNullableNotExpression(SqlUnaryExpression) SqlNullabilityProcessor.TryMakeNonNullable(SelectExpression, out SelectExpression, out bool?) SqlNullabilityProcessor.IsCollectionTable(TableExpressionBase, out Expression) SqlNullabilityProcessor.UpdateParameterCollection(TableExpressionBase, SqlParameterExpression) SqlNullabilityProcessor.Dependencies SqlNullabilityProcessor.UseRelationalNulls SqlNullabilityProcessor.ParameterValues SqlNullabilityProcessor.PreferExistsToInWithCoalesce object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlNullabilityProcessor : SqlNullabilityProcessor Constructors | Edit this page View Source NpgsqlSqlNullabilityProcessor(RelationalParameterBasedSqlProcessorDependencies, bool) Creates a new instance of the NpgsqlSqlNullabilityProcessor class. Declaration public NpgsqlSqlNullabilityProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls) Parameters Type Name Description RelationalParameterBasedSqlProcessorDependencies dependencies Parameter object containing dependencies for this class. bool useRelationalNulls A bool value indicating whether relational null semantics are in use. Methods | Edit this page View Source VisitAll(PgAllExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitAll(PgAllExpression allExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgAllExpression allExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitAny(PgAnyExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitAny(PgAnyExpression anyExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgAnyExpression anyExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitArrayIndex(PgArrayIndexExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitArrayIndex(PgArrayIndexExpression arrayIndexExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgArrayIndexExpression arrayIndexExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitArraySlice(PgArraySliceExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitArraySlice(PgArraySliceExpression arraySliceExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgArraySliceExpression arraySliceExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitCustomSqlExpression(SqlExpression, bool, out bool) Visits a custom SqlExpression added by providers and computes its nullability. Declaration protected override SqlExpression VisitCustomSqlExpression(SqlExpression sqlExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description SqlExpression sqlExpression A sql expression to visit. bool allowOptimizedExpansion A bool value indicating if optimized expansion which considers null value as false value is allowed. bool nullable A bool value indicating whether the sql expression is nullable. Returns Type Description SqlExpression An optimized sql expression. Overrides SqlNullabilityProcessor.VisitCustomSqlExpression(SqlExpression, bool, out bool) | Edit this page View Source VisitILike(PgILikeExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitILike(PgILikeExpression iLikeExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgILikeExpression iLikeExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitJsonTraversal(PgJsonTraversalExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitJsonTraversal(PgJsonTraversalExpression jsonTraversalExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgJsonTraversalExpression jsonTraversalExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitNewArray(PgNewArrayExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitNewArray(PgNewArrayExpression newArrayExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgNewArrayExpression newArrayExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitPostgresBinary(PgBinaryExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitPostgresBinary(PgBinaryExpression binaryExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgBinaryExpression binaryExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitRegexMatch(PgRegexMatchExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitRegexMatch(PgRegexMatchExpression regexMatchExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgRegexMatchExpression regexMatchExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitRowValueExpression(PgRowValueExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual SqlExpression VisitRowValueExpression(PgRowValueExpression rowValueExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgRowValueExpression rowValueExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression | Edit this page View Source VisitSqlBinary(SqlBinaryExpression, bool, out bool) Visits a SqlBinaryExpression and computes its nullability. Declaration protected override SqlExpression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description SqlBinaryExpression sqlBinaryExpression A sql binary expression to visit. bool allowOptimizedExpansion A bool value indicating if optimized expansion which considers null value as false value is allowed. bool nullable A bool value indicating whether the sql expression is nullable. Returns Type Description SqlExpression An optimized sql expression. Overrides SqlNullabilityProcessor.VisitSqlBinary(SqlBinaryExpression, bool, out bool) | Edit this page View Source VisitSqlFunction(SqlFunctionExpression, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override SqlExpression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description SqlFunctionExpression sqlFunctionExpression bool allowOptimizedExpansion bool nullable Returns Type Description SqlExpression Overrides SqlNullabilityProcessor.VisitSqlFunction(SqlFunctionExpression, bool, out bool) | Edit this page View Source VisitUnknownBinary(PgUnknownBinaryExpression, bool, out bool) Visits a PgUnknownBinaryExpression and computes its nullability. Declaration protected virtual SqlExpression VisitUnknownBinary(PgUnknownBinaryExpression unknownBinaryExpression, bool allowOptimizedExpansion, out bool nullable) Parameters Type Name Description PgUnknownBinaryExpression unknownBinaryExpression A PgUnknownBinaryExpression expression to visit. bool allowOptimizedExpansion A bool value indicating if optimized expansion which considers null value as false value is allowed. bool nullable A bool value indicating whether the sql expression is nullable. Returns Type Description SqlExpression An optimized sql expression."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitor.html",
    "title": "Class NpgsqlSqlTranslatingExpressionVisitor | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlTranslatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ExpressionVisitor RelationalSqlTranslatingExpressionVisitor NpgsqlSqlTranslatingExpressionVisitor Inherited Members RelationalSqlTranslatingExpressionVisitor.AddTranslationErrorDetails(string) RelationalSqlTranslatingExpressionVisitor.Translate(Expression, bool) RelationalSqlTranslatingExpressionVisitor.TranslateProjection(Expression, bool) RelationalSqlTranslatingExpressionVisitor.TranslateAverage(SqlExpression) RelationalSqlTranslatingExpressionVisitor.TranslateCount(SqlExpression) RelationalSqlTranslatingExpressionVisitor.TranslateLongCount(SqlExpression) RelationalSqlTranslatingExpressionVisitor.TranslateMax(SqlExpression) RelationalSqlTranslatingExpressionVisitor.TranslateMin(SqlExpression) RelationalSqlTranslatingExpressionVisitor.TranslateSum(SqlExpression) RelationalSqlTranslatingExpressionVisitor.VisitConditional(ConditionalExpression) RelationalSqlTranslatingExpressionVisitor.VisitConstant(ConstantExpression) RelationalSqlTranslatingExpressionVisitor.VisitExtension(Expression) RelationalSqlTranslatingExpressionVisitor.VisitInvocation(InvocationExpression) RelationalSqlTranslatingExpressionVisitor.VisitLambda<T>(Expression<T>) RelationalSqlTranslatingExpressionVisitor.VisitListInit(ListInitExpression) RelationalSqlTranslatingExpressionVisitor.VisitMember(MemberExpression) RelationalSqlTranslatingExpressionVisitor.VisitMemberInit(MemberInitExpression) RelationalSqlTranslatingExpressionVisitor.TryTranslatePropertyAccess(Expression, out Expression, out IPropertyBase) RelationalSqlTranslatingExpressionVisitor.VisitParameter(ParameterExpression) RelationalSqlTranslatingExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) RelationalSqlTranslatingExpressionVisitor.TryTranslateAggregateMethodCall(MethodCallExpression, out SqlExpression) RelationalSqlTranslatingExpressionVisitor.TranslationErrorDetails RelationalSqlTranslatingExpressionVisitor.Dependencies ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlTranslatingExpressionVisitor : RelationalSqlTranslatingExpressionVisitor Constructors | Edit this page View Source NpgsqlSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies, QueryCompilationContext, QueryableMethodTranslatingExpressionVisitor) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor) Parameters Type Name Description RelationalSqlTranslatingExpressionVisitorDependencies dependencies QueryCompilationContext queryCompilationContext QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor Methods | Edit this page View Source VisitBinary(BinaryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitBinary(BinaryExpression binaryExpression) Parameters Type Name Description BinaryExpression binaryExpression Returns Type Description Expression Overrides RelationalSqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression) | Edit this page View Source VisitMethodCall(MethodCallExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitMethodCall(MethodCallExpression methodCallExpression) Parameters Type Name Description MethodCallExpression methodCallExpression Returns Type Description Expression Overrides RelationalSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression) | Edit this page View Source VisitNew(NewExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitNew(NewExpression newExpression) Parameters Type Name Description NewExpression newExpression Returns Type Description Expression Overrides RelationalSqlTranslatingExpressionVisitor.VisitNew(NewExpression) | Edit this page View Source VisitNewArray(NewArrayExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitNewArray(NewArrayExpression newArrayExpression) Parameters Type Name Description NewArrayExpression newArrayExpression Returns Type Description Expression Overrides RelationalSqlTranslatingExpressionVisitor.VisitNewArray(NewArrayExpression) | Edit this page View Source VisitUnary(UnaryExpression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Expression VisitUnary(UnaryExpression unaryExpression) Parameters Type Name Description UnaryExpression unaryExpression Returns Type Description Expression Overrides RelationalSqlTranslatingExpressionVisitor.VisitUnary(UnaryExpression)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitorFactory.html",
    "title": "Class NpgsqlSqlTranslatingExpressionVisitorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlTranslatingExpressionVisitorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlSqlTranslatingExpressionVisitorFactory Implements IRelationalSqlTranslatingExpressionVisitorFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlTranslatingExpressionVisitorFactory : IRelationalSqlTranslatingExpressionVisitorFactory Constructors | Edit this page View Source NpgsqlSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies) Parameters Type Name Description RelationalSqlTranslatingExpressionVisitorDependencies dependencies Methods | Edit this page View Source Create(QueryCompilationContext, QueryableMethodTranslatingExpressionVisitor) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual RelationalSqlTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor) Parameters Type Name Description QueryCompilationContext queryCompilationContext QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor Returns Type Description RelationalSqlTranslatingExpressionVisitor Implements IRelationalSqlTranslatingExpressionVisitorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlUnnestPostprocessor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlUnnestPostprocessor.html",
    "title": "Class NpgsqlUnnestPostprocessor | Npgsql Documentation",
    "keywords": "Class NpgsqlUnnestPostprocessor Locates instances of PgUnnestExpression in the tree and prunes the WITH ORDINALITY clause from them if the ordinality column isn't referenced anywhere. Inheritance object ExpressionVisitor NpgsqlUnnestPostprocessor Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlUnnestPostprocessor : ExpressionVisitor Remarks This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Methods | Edit this page View Source Visit(Expression?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression? Visit(Expression? expression) Parameters Type Name Description Expression expression Returns Type Description Expression Overrides ExpressionVisitor.Visit(Expression)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Classes NpgsqlCompiledQueryCacheKeyGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDeleteConvertingExpressionVisitor Converts the relational NonQueryExpression into a PG-specific PgDeleteExpression, which precisely models a DELETE statement in PostgreSQL. This is done to handle the PG-specific USING syntax for table joining. NpgsqlEvaluatableExpressionFilter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlParameterBasedSqlProcessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlParameterBasedSqlProcessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryCompilationContext This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryCompilationContextFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryRootProcessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQuerySqlGenerator The default query SQL generator for Npgsql. NpgsqlQuerySqlGeneratorFactory The default factory for Npgsql-specific query SQL generators. NpgsqlQueryTranslationPostprocessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryTranslationPostprocessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryTranslationPreprocessor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryTranslationPreprocessorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryableMethodTranslatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryableMethodTranslatingExpressionVisitor.NpgsqlInferredTypeMappingApplier This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlQueryableMethodTranslatingExpressionVisitorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSqlNullabilityProcessor A class that processes a SQL tree based on nullability of nodes to apply null semantics in use and optimize it based on parameter values. This type is typically used by database providers (and other extensions). It is generally not used in application code. NpgsqlSqlTranslatingExpressionVisitor This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSqlTranslatingExpressionVisitorFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlUnnestPostprocessor Locates instances of PgUnnestExpression in the tree and prunes the WITH ORDINALITY clause from them if the ordinality column isn't referenced anywhere."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory.html",
    "title": "Class NpgsqlSqlExpressionFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlExpressionFactory Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Inheritance object SqlExpressionFactory NpgsqlSqlExpressionFactory Implements ISqlExpressionFactory Inherited Members SqlExpressionFactory.ApplyDefaultTypeMapping(SqlExpression) SqlExpressionFactory.Equal(SqlExpression, SqlExpression) SqlExpressionFactory.NotEqual(SqlExpression, SqlExpression) SqlExpressionFactory.GreaterThan(SqlExpression, SqlExpression) SqlExpressionFactory.GreaterThanOrEqual(SqlExpression, SqlExpression) SqlExpressionFactory.LessThan(SqlExpression, SqlExpression) SqlExpressionFactory.LessThanOrEqual(SqlExpression, SqlExpression) SqlExpressionFactory.AndAlso(SqlExpression, SqlExpression) SqlExpressionFactory.OrElse(SqlExpression, SqlExpression) SqlExpressionFactory.Add(SqlExpression, SqlExpression, RelationalTypeMapping) SqlExpressionFactory.Subtract(SqlExpression, SqlExpression, RelationalTypeMapping) SqlExpressionFactory.Multiply(SqlExpression, SqlExpression, RelationalTypeMapping) SqlExpressionFactory.Divide(SqlExpression, SqlExpression, RelationalTypeMapping) SqlExpressionFactory.Modulo(SqlExpression, SqlExpression, RelationalTypeMapping) SqlExpressionFactory.And(SqlExpression, SqlExpression, RelationalTypeMapping) SqlExpressionFactory.Or(SqlExpression, SqlExpression, RelationalTypeMapping) SqlExpressionFactory.Coalesce(SqlExpression, SqlExpression, RelationalTypeMapping) SqlExpressionFactory.MakeUnary(ExpressionType, SqlExpression, Type, RelationalTypeMapping) SqlExpressionFactory.IsNull(SqlExpression) SqlExpressionFactory.IsNotNull(SqlExpression) SqlExpressionFactory.Convert(SqlExpression, Type, RelationalTypeMapping) SqlExpressionFactory.Not(SqlExpression) SqlExpressionFactory.Negate(SqlExpression) SqlExpressionFactory.Case(SqlExpression, IReadOnlyList<CaseWhenClause>, SqlExpression) SqlExpressionFactory.Case(IReadOnlyList<CaseWhenClause>, SqlExpression) SqlExpressionFactory.Function(string, IEnumerable<SqlExpression>, bool, IEnumerable<bool>, Type, RelationalTypeMapping) SqlExpressionFactory.Function(string, string, IEnumerable<SqlExpression>, bool, IEnumerable<bool>, Type, RelationalTypeMapping) SqlExpressionFactory.Function(SqlExpression, string, IEnumerable<SqlExpression>, bool, bool, IEnumerable<bool>, Type, RelationalTypeMapping) SqlExpressionFactory.NiladicFunction(string, bool, Type, RelationalTypeMapping) SqlExpressionFactory.NiladicFunction(string, string, bool, Type, RelationalTypeMapping) SqlExpressionFactory.NiladicFunction(SqlExpression, string, bool, bool, Type, RelationalTypeMapping) SqlExpressionFactory.Exists(SelectExpression) SqlExpressionFactory.In(SqlExpression, SelectExpression) SqlExpressionFactory.In(SqlExpression, IReadOnlyList<SqlExpression>) SqlExpressionFactory.In(SqlExpression, SqlParameterExpression) SqlExpressionFactory.Like(SqlExpression, SqlExpression, SqlExpression) SqlExpressionFactory.Fragment(string) SqlExpressionFactory.Constant(object, RelationalTypeMapping) SqlExpressionFactory.Constant(object, Type, RelationalTypeMapping) SqlExpressionFactory.Select(SqlExpression) SqlExpressionFactory.Select(IEntityType) SqlExpressionFactory.Select(IEntityType, TableExpressionBase) SqlExpressionFactory.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Query Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlExpressionFactory : SqlExpressionFactory, ISqlExpressionFactory Constructors | Edit this page View Source NpgsqlSqlExpressionFactory(SqlExpressionFactoryDependencies) Creates a new instance of the NpgsqlSqlExpressionFactory class. Declaration public NpgsqlSqlExpressionFactory(SqlExpressionFactoryDependencies dependencies) Parameters Type Name Description SqlExpressionFactoryDependencies dependencies Parameter object containing dependencies for this class. Methods | Edit this page View Source AggregateFunction(string, IEnumerable<SqlExpression>, EnumerableExpression, bool, IEnumerable<bool>, Type, RelationalTypeMapping?) Creates a new PgFunctionExpression for a PostgreSQL aggregate function call.. Declaration public virtual PgFunctionExpression AggregateFunction(string name, IEnumerable<SqlExpression> arguments, EnumerableExpression aggregateEnumerableExpression, bool nullable, IEnumerable<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description string name IEnumerable<SqlExpression> arguments EnumerableExpression aggregateEnumerableExpression bool nullable IEnumerable<bool> argumentsPropagateNullability Type returnType RelationalTypeMapping typeMapping Returns Type Description PgFunctionExpression | Edit this page View Source All(SqlExpression, SqlExpression, PgAllOperatorType) Creates a new PgAllExpression, corresponding to the PostgreSQL-specific LIKE ALL operator. Declaration public virtual PgAllExpression All(SqlExpression item, SqlExpression array, PgAllOperatorType operatorType) Parameters Type Name Description SqlExpression item SqlExpression array PgAllOperatorType operatorType Returns Type Description PgAllExpression | Edit this page View Source Any(SqlExpression, SqlExpression, PgAnyOperatorType) Creates a new PgAnyExpression, corresponding to the PostgreSQL-specific = ANY operator. Declaration public virtual PgAnyExpression Any(SqlExpression item, SqlExpression array, PgAnyOperatorType operatorType) Parameters Type Name Description SqlExpression item SqlExpression array PgAnyOperatorType operatorType Returns Type Description PgAnyExpression | Edit this page View Source ApplyTypeMapping(SqlExpression?, RelationalTypeMapping?) Applies type mapping to the given SqlExpression. Declaration public override SqlExpression? ApplyTypeMapping(SqlExpression? sqlExpression, RelationalTypeMapping? typeMapping) Parameters Type Name Description SqlExpression sqlExpression A SQL expression to apply type mapping. RelationalTypeMapping typeMapping A type mapping to apply. Returns Type Description SqlExpression A SQL expression with given type mapping applied. Overrides SqlExpressionFactory.ApplyTypeMapping(SqlExpression, RelationalTypeMapping) | Edit this page View Source ArrayIndex(SqlExpression, SqlExpression, bool, RelationalTypeMapping?) Creates a new PgArrayIndexExpression, corresponding to the PostgreSQL-specific array subscripting operator. Declaration public virtual PgArrayIndexExpression ArrayIndex(SqlExpression array, SqlExpression index, bool nullable, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression array SqlExpression index bool nullable RelationalTypeMapping typeMapping Returns Type Description PgArrayIndexExpression | Edit this page View Source ArraySlice(SqlExpression, SqlExpression?, SqlExpression?, bool, RelationalTypeMapping?) Creates a new PgArrayIndexExpression, corresponding to the PostgreSQL-specific array subscripting operator. Declaration public virtual PgArraySliceExpression ArraySlice(SqlExpression array, SqlExpression? lowerBound, SqlExpression? upperBound, bool nullable, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression array SqlExpression lowerBound SqlExpression upperBound bool nullable RelationalTypeMapping typeMapping Returns Type Description PgArraySliceExpression | Edit this page View Source AtTimeZone(SqlExpression, SqlExpression, Type, RelationalTypeMapping?) Creates a new AtTimeZoneExpression, for converting a timestamp to another time zone. Declaration public virtual AtTimeZoneExpression AtTimeZone(SqlExpression timestamp, SqlExpression timeZone, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression timestamp SqlExpression timeZone Type type RelationalTypeMapping typeMapping Returns Type Description AtTimeZoneExpression | Edit this page View Source AtUtc(SqlExpression, RelationalTypeMapping?) Creates a new AtTimeZoneExpression, for converting a timestamp to UTC. Declaration public virtual AtTimeZoneExpression AtUtc(SqlExpression timestamp, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression timestamp RelationalTypeMapping typeMapping Returns Type Description AtTimeZoneExpression | Edit this page View Source ContainedBy(SqlExpression, SqlExpression) Creates a new PgBinaryExpression, for checking whether one value is contained by another. Declaration public virtual PgBinaryExpression ContainedBy(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left SqlExpression right Returns Type Description PgBinaryExpression | Edit this page View Source Contains(SqlExpression, SqlExpression) Creates a new PgBinaryExpression, for checking whether one value contains another. Declaration public virtual PgBinaryExpression Contains(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left SqlExpression right Returns Type Description PgBinaryExpression | Edit this page View Source GenerateOneBasedIndexExpression(SqlExpression) PostgreSQL array indexing is 1-based. If the index happens to be a constant, just increment it. Otherwise, append a +1 in the SQL. Declaration public virtual SqlExpression GenerateOneBasedIndexExpression(SqlExpression expression) Parameters Type Name Description SqlExpression expression Returns Type Description SqlExpression | Edit this page View Source ILike(SqlExpression, SqlExpression, SqlExpression?) Creates a new AtTimeZoneExpression, for performing a PostgreSQL-specific case-insensitive string match (ILIKE). Declaration public virtual PgILikeExpression ILike(SqlExpression match, SqlExpression pattern, SqlExpression? escapeChar = null) Parameters Type Name Description SqlExpression match SqlExpression pattern SqlExpression escapeChar Returns Type Description PgILikeExpression | Edit this page View Source JsonTraversal(SqlExpression, bool, Type, RelationalTypeMapping?) Creates a new PgJsonTraversalExpression, for traversing inside a JSON document. Declaration public virtual PgJsonTraversalExpression JsonTraversal(SqlExpression expression, bool returnsText, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression expression bool returnsText Type type RelationalTypeMapping typeMapping Returns Type Description PgJsonTraversalExpression | Edit this page View Source JsonTraversal(SqlExpression, IEnumerable<SqlExpression>, bool, Type, RelationalTypeMapping?) Creates a new PgJsonTraversalExpression, for traversing inside a JSON document. Declaration public virtual PgJsonTraversalExpression JsonTraversal(SqlExpression expression, IEnumerable<SqlExpression> path, bool returnsText, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description SqlExpression expression IEnumerable<SqlExpression> path bool returnsText Type type RelationalTypeMapping typeMapping Returns Type Description PgJsonTraversalExpression | Edit this page View Source MakeBinary(ExpressionType, SqlExpression, SqlExpression, RelationalTypeMapping?) Creates a new SqlBinaryExpression with the given arguments. Declaration public override SqlBinaryExpression? MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping? typeMapping) Parameters Type Name Description ExpressionType operatorType An ExpressionType representing SQL unary operator. SqlExpression left The left operand of binary operation. SqlExpression right The right operand of binary operation. RelationalTypeMapping typeMapping A type mapping to be assigned to the created expression. Returns Type Description SqlBinaryExpression A SqlBinaryExpression with the given arguments. Overrides SqlExpressionFactory.MakeBinary(ExpressionType, SqlExpression, SqlExpression, RelationalTypeMapping) | Edit this page View Source MakePostgresBinary(PgExpressionType, SqlExpression, SqlExpression, RelationalTypeMapping?) Creates a new PgBinaryExpression with the given arguments. Declaration public virtual PgBinaryExpression MakePostgresBinary(PgExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description PgExpressionType operatorType An ExpressionType representing SQL unary operator. SqlExpression left The left operand of binary operation. SqlExpression right The right operand of binary operation. RelationalTypeMapping typeMapping A type mapping to be assigned to the created expression. Returns Type Description PgBinaryExpression A PgBinaryExpression with the given arguments. | Edit this page View Source NewArray(IReadOnlyList<SqlExpression>, Type, RelationalTypeMapping?) Creates a new PgNewArrayExpression, for creating a new PostgreSQL array. Declaration public virtual PgNewArrayExpression NewArray(IReadOnlyList<SqlExpression> expressions, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description IReadOnlyList<SqlExpression> expressions Type type RelationalTypeMapping typeMapping Returns Type Description PgNewArrayExpression | Edit this page View Source NewArrayOrConstant(IReadOnlyList<SqlExpression>, Type, RelationalTypeMapping?) Constructs either a PgNewArrayExpression, or, if all provided expressions are constants, a single SqlConstantExpression for the entire array. Declaration public virtual SqlExpression NewArrayOrConstant(IReadOnlyList<SqlExpression> elements, Type type, RelationalTypeMapping? typeMapping = null) Parameters Type Name Description IReadOnlyList<SqlExpression> elements Type type RelationalTypeMapping typeMapping Returns Type Description SqlExpression | Edit this page View Source Overlaps(SqlExpression, SqlExpression) Creates a new PgBinaryExpression, for checking whether one value overlaps with another. Declaration public virtual PgBinaryExpression Overlaps(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left SqlExpression right Returns Type Description PgBinaryExpression | Edit this page View Source RegexMatch(SqlExpression, SqlExpression, RegexOptions) Creates a new PgRegexMatchExpression, corresponding to the PostgreSQL-specific ~ operator. Declaration public virtual PgRegexMatchExpression RegexMatch(SqlExpression match, SqlExpression pattern, RegexOptions options) Parameters Type Name Description SqlExpression match SqlExpression pattern RegexOptions options Returns Type Description PgRegexMatchExpression Implements ISqlExpressionFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query Classes NpgsqlSqlExpressionFactory Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlCodeGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlCodeGenerator.html",
    "title": "Class NpgsqlCodeGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlCodeGenerator The default code generator for Npgsql. Inheritance object ProviderCodeGenerator NpgsqlCodeGenerator Implements IProviderConfigurationCodeGenerator Inherited Members ProviderCodeGenerator.GenerateProviderOptions() ProviderCodeGenerator.GenerateContextOptions() ProviderCodeGenerator.GenerateUseProvider(string) ProviderCodeGenerator.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCodeGenerator : ProviderCodeGenerator, IProviderConfigurationCodeGenerator Constructors | Edit this page View Source NpgsqlCodeGenerator(ProviderCodeGeneratorDependencies) Constructs an instance of the NpgsqlCodeGenerator class. Declaration public NpgsqlCodeGenerator(ProviderCodeGeneratorDependencies dependencies) Parameters Type Name Description ProviderCodeGeneratorDependencies dependencies The dependencies. Methods | Edit this page View Source GenerateUseProvider(string, MethodCallCodeFragment?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment? providerOptions) Parameters Type Name Description string connectionString MethodCallCodeFragment providerOptions Returns Type Description MethodCallCodeFragment Overrides ProviderCodeGenerator.GenerateUseProvider(string, MethodCallCodeFragment) Implements IProviderConfigurationCodeGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlDatabaseModelFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlDatabaseModelFactory.html",
    "title": "Class NpgsqlDatabaseModelFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseModelFactory The default database model factory for Npgsql. Inheritance object DatabaseModelFactory NpgsqlDatabaseModelFactory Implements IDatabaseModelFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDatabaseModelFactory : DatabaseModelFactory, IDatabaseModelFactory Constructors | Edit this page View Source NpgsqlDatabaseModelFactory(IDiagnosticsLogger<Scaffolding>) Constructs an instance of the NpgsqlDatabaseModelFactory class. Declaration public NpgsqlDatabaseModelFactory(IDiagnosticsLogger<DbLoggerCategory.Scaffolding> logger) Parameters Type Name Description IDiagnosticsLogger<DbLoggerCategory.Scaffolding> logger Methods | Edit this page View Source Create(DbConnection, DatabaseModelFactoryOptions) Connects to the database using the given connection and creates a DatabaseModel for the database. Declaration public override DatabaseModel Create(DbConnection dbConnection, DatabaseModelFactoryOptions options) Parameters Type Name Description DbConnection dbConnection DatabaseModelFactoryOptions options The options specifying which metadata to read. Returns Type Description DatabaseModel The database model. Overrides DatabaseModelFactory.Create(DbConnection, DatabaseModelFactoryOptions) | Edit this page View Source Create(string, DatabaseModelFactoryOptions) Connects to the database using the given connection string and creates a DatabaseModel for the database. Declaration public override DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options) Parameters Type Name Description string connectionString The connection string for the database to reverse engineer. DatabaseModelFactoryOptions options The options specifying which metadata to read. Returns Type Description DatabaseModel The database model. Overrides DatabaseModelFactory.Create(string, DatabaseModelFactoryOptions) Implements IDatabaseModelFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Classes NpgsqlCodeGenerator The default code generator for Npgsql. NpgsqlDatabaseModelFactory The default database model factory for Npgsql."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateIntervalMultirangeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateIntervalMultirangeMapping.html",
    "title": "Class DateIntervalMultirangeMapping | Npgsql Documentation",
    "keywords": "Class DateIntervalMultirangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping DateIntervalMultirangeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DateIntervalMultirangeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source DateIntervalMultirangeMapping(RelationalTypeMappingParameters, DateIntervalRangeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected DateIntervalMultirangeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, DateIntervalRangeMapping dateIntervalRangeMapping) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters DateIntervalRangeMapping dateIntervalRangeMapping | Edit this page View Source DateIntervalMultirangeMapping(Type, DateIntervalRangeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public DateIntervalMultirangeMapping(Type clrType, DateIntervalRangeMapping dateIntervalRangeMapping) Parameters Type Name Description Type clrType DateIntervalRangeMapping dateIntervalRangeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateIntervalRangeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateIntervalRangeMapping.html",
    "title": "Class DateIntervalRangeMapping | Npgsql Documentation",
    "keywords": "Class DateIntervalRangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping DateIntervalRangeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DateIntervalRangeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source DateIntervalRangeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public DateIntervalRangeMapping() | Edit this page View Source DateIntervalRangeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected DateIntervalRangeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static DateIntervalRangeMapping Default { get; } Property Value Type Description DateIntervalRangeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateMapping.html",
    "title": "Class DateMapping | Npgsql Documentation",
    "keywords": "Class DateMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping DateMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DateMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source DateMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public DateMapping() | Edit this page View Source DateMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected DateMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static DateMapping Default { get; } Property Value Type Description DateMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateTimeZoneMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateTimeZoneMapping.html",
    "title": "Class DateTimeZoneMapping | Npgsql Documentation",
    "keywords": "Class DateTimeZoneMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping DateTimeZoneMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DateTimeZoneMapping : RelationalTypeMapping Constructors | Edit this page View Source DateTimeZoneMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected DateTimeZoneMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source DateTimeZoneMapping(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public DateTimeZoneMapping(string storeType) Parameters Type Name Description string storeType Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DurationIntervalMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DurationIntervalMapping.html",
    "title": "Class DurationIntervalMapping | Npgsql Documentation",
    "keywords": "Class DurationIntervalMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping DurationIntervalMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DurationIntervalMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source DurationIntervalMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public DurationIntervalMapping() | Edit this page View Source DurationIntervalMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected DurationIntervalMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static DurationIntervalMapping Default { get; } Property Value Type Description DurationIntervalMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.INpgsqlRelationalConnection.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.INpgsqlRelationalConnection.html",
    "title": "Interface INpgsqlRelationalConnection | Npgsql Documentation",
    "keywords": "Interface INpgsqlRelationalConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inherited Members IRelationalConnection.SetDbConnection(DbConnection, bool) IRelationalConnection.Open(bool) IRelationalConnection.OpenAsync(CancellationToken, bool) IRelationalConnection.Close() IRelationalConnection.CloseAsync() IRelationalConnection.RentCommand() IRelationalConnection.ReturnCommand(IRelationalCommand) IRelationalConnection.ConnectionString IRelationalConnection.DbConnection IRelationalConnection.Context IRelationalConnection.ConnectionId IRelationalConnection.CommandTimeout IRelationalConnection.CurrentTransaction IRelationalTransactionManager.BeginTransaction(IsolationLevel) IRelationalTransactionManager.BeginTransactionAsync(IsolationLevel, CancellationToken) IRelationalTransactionManager.UseTransaction(DbTransaction) IRelationalTransactionManager.UseTransaction(DbTransaction, Guid) IRelationalTransactionManager.UseTransactionAsync(DbTransaction, CancellationToken) IRelationalTransactionManager.UseTransactionAsync(DbTransaction, Guid, CancellationToken) IDbContextTransactionManager.BeginTransaction() IDbContextTransactionManager.BeginTransactionAsync(CancellationToken) IDbContextTransactionManager.CommitTransaction() IDbContextTransactionManager.CommitTransactionAsync(CancellationToken) IDbContextTransactionManager.RollbackTransaction() IDbContextTransactionManager.RollbackTransactionAsync(CancellationToken) IResettableService.ResetState() IResettableService.ResetStateAsync(CancellationToken) IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlRelationalConnection : IRelationalConnection, IRelationalTransactionManager, IDbContextTransactionManager, IResettableService, IDisposable, IAsyncDisposable Methods | Edit this page View Source CloneWith(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration NpgsqlRelationalConnection CloneWith(string connectionString) Parameters Type Name Description string connectionString Returns Type Description NpgsqlRelationalConnection | Edit this page View Source CreateAdminConnection() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration INpgsqlRelationalConnection CreateAdminConnection() Returns Type Description INpgsqlRelationalConnection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalMultirangeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalMultirangeMapping.html",
    "title": "Class IntervalMultirangeMapping | Npgsql Documentation",
    "keywords": "Class IntervalMultirangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping IntervalMultirangeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class IntervalMultirangeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source IntervalMultirangeMapping(RelationalTypeMappingParameters, IntervalRangeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected IntervalMultirangeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, IntervalRangeMapping intervalRangeMapping) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters IntervalRangeMapping intervalRangeMapping | Edit this page View Source IntervalMultirangeMapping(Type, IntervalRangeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public IntervalMultirangeMapping(Type clrType, IntervalRangeMapping intervalRangeMapping) Parameters Type Name Description Type clrType IntervalRangeMapping intervalRangeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalRangeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalRangeMapping.html",
    "title": "Class IntervalRangeMapping | Npgsql Documentation",
    "keywords": "Class IntervalRangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping IntervalRangeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class IntervalRangeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source IntervalRangeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public IntervalRangeMapping() | Edit this page View Source IntervalRangeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected IntervalRangeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static IntervalRangeMapping Default { get; } Property Value Type Description IntervalRangeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json.JsonBitArrayReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json.JsonBitArrayReaderWriter.html",
    "title": "Class JsonBitArrayReaderWriter | Npgsql Documentation",
    "keywords": "Class JsonBitArrayReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<BitArray> JsonBitArrayReaderWriter Inherited Members JsonValueReaderWriter<BitArray>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<BitArray>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<BitArray>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class JsonBitArrayReaderWriter : JsonValueReaderWriter<BitArray> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static JsonBitArrayReaderWriter Instance { get; } Property Value Type Description JsonBitArrayReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) Reads the value from JSON. Declaration public override BitArray FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager The Utf8JsonReaderManager for the JSON being read. object existingObject Can be used to update an existing object, rather than create a new one. Returns Type Description BitArray The read value. Overrides JsonValueReaderWriter<BitArray>.FromJsonTyped(ref Utf8JsonReaderManager, object) Remarks The CurrentReader is at the node that contains the value to be read. The value should be read as appropriate from the JSON, and then further converted as necessary. Nulls are handled externally to this reader. That is, this method will never be called if the JSON value is \"null\". In most cases, the value is represented in the JSON document as a simple property value--e.g. a number, boolean, or string. However, it could be an array or sub-document. In this case, the Utf8JsonReaderManager should be used to parse the JSON as appropriate. | Edit this page View Source ToJsonTyped(Utf8JsonWriter, BitArray) Writes the value to JSON. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, BitArray value) Parameters Type Name Description Utf8JsonWriter writer The Utf8JsonWriter into which the value should be written. BitArray value The value to write. Overrides JsonValueReaderWriter<BitArray>.ToJsonTyped(Utf8JsonWriter, BitArray)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json.JsonMacaddrReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json.JsonMacaddrReaderWriter.html",
    "title": "Class JsonMacaddrReaderWriter | Npgsql Documentation",
    "keywords": "Class JsonMacaddrReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<PhysicalAddress> JsonMacaddrReaderWriter Inherited Members JsonValueReaderWriter<PhysicalAddress>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<PhysicalAddress>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<PhysicalAddress>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class JsonMacaddrReaderWriter : JsonValueReaderWriter<PhysicalAddress> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static JsonMacaddrReaderWriter Instance { get; } Property Value Type Description JsonMacaddrReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) Reads the value from JSON. Declaration public override PhysicalAddress FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager The Utf8JsonReaderManager for the JSON being read. object existingObject Can be used to update an existing object, rather than create a new one. Returns Type Description PhysicalAddress The read value. Overrides JsonValueReaderWriter<PhysicalAddress>.FromJsonTyped(ref Utf8JsonReaderManager, object) Remarks The CurrentReader is at the node that contains the value to be read. The value should be read as appropriate from the JSON, and then further converted as necessary. Nulls are handled externally to this reader. That is, this method will never be called if the JSON value is \"null\". In most cases, the value is represented in the JSON document as a simple property value--e.g. a number, boolean, or string. However, it could be an array or sub-document. In this case, the Utf8JsonReaderManager should be used to parse the JSON as appropriate. | Edit this page View Source ToJsonTyped(Utf8JsonWriter, PhysicalAddress) Writes the value to JSON. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, PhysicalAddress value) Parameters Type Name Description Utf8JsonWriter writer The Utf8JsonWriter into which the value should be written. PhysicalAddress value The value to write. Overrides JsonValueReaderWriter<PhysicalAddress>.ToJsonTyped(Utf8JsonWriter, PhysicalAddress)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Json Classes JsonBitArrayReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. JsonMacaddrReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.LegacyTimestampInstantMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.LegacyTimestampInstantMapping.html",
    "title": "Class LegacyTimestampInstantMapping | Npgsql Documentation",
    "keywords": "Class LegacyTimestampInstantMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping LegacyTimestampInstantMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class LegacyTimestampInstantMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source LegacyTimestampInstantMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public LegacyTimestampInstantMapping() | Edit this page View Source LegacyTimestampInstantMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected LegacyTimestampInstantMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static LegacyTimestampInstantMapping Default { get; } Property Value Type Description LegacyTimestampInstantMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.INpgsqlTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.INpgsqlTypeMapping.html",
    "title": "Interface INpgsqlTypeMapping | Npgsql Documentation",
    "keywords": "Interface INpgsqlTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlTypeMapping Properties | Edit this page View Source NpgsqlDbType The database type used by Npgsql. Declaration NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping-3.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping-3.html",
    "title": "Class NpgsqlArrayTypeMapping<TCollection, TConcreteCollection, TElement> | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayTypeMapping<TCollection, TConcreteCollection, TElement> Type mapping for PostgreSQL arrays. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlArrayTypeMapping NpgsqlArrayTypeMapping<TCollection, TConcreteCollection, TElement> Inherited Members NpgsqlArrayTypeMapping.ElementTypeMapping RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayTypeMapping<TCollection, TConcreteCollection, TElement> : NpgsqlArrayTypeMapping Type Parameters Name Description TCollection TConcreteCollection TElement Remarks See: https://www.postgresql.org/docs/current/static/arrays.html Constructors | Edit this page View Source NpgsqlArrayTypeMapping(RelationalTypeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlArrayTypeMapping(RelationalTypeMapping elementTypeMapping) Parameters Type Name Description RelationalTypeMapping elementTypeMapping | Edit this page View Source NpgsqlArrayTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlArrayTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlArrayTypeMapping(string, RelationalTypeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlArrayTypeMapping(string storeType, RelationalTypeMapping elementTypeMapping) Parameters Type Name Description string storeType RelationalTypeMapping elementTypeMapping Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlArrayTypeMapping<TCollection, TConcreteCollection, TElement> Default { get; } Property Value Type Description NpgsqlArrayTypeMapping<TCollection, TConcreteCollection, TElement> | Edit this page View Source NpgsqlDbType The database type used by Npgsql. Declaration public virtual NpgsqlDbType? NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType? Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides RelationalTypeMapping.ConfigureParameter(DbParameter) | Edit this page View Source CreateParameter(DbCommand, string, object?, bool?, ParameterDirection) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override DbParameter CreateParameter(DbCommand command, string name, object? value, bool? nullable = null, ParameterDirection direction = ParameterDirection.Input) Parameters Type Name Description DbCommand command string name object value bool? nullable ParameterDirection direction Returns Type Description DbParameter Overrides RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping.html",
    "title": "Class NpgsqlArrayTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayTypeMapping Type mapping for PostgreSQL arrays. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlArrayTypeMapping NpgsqlArrayTypeMapping<TCollection, TConcreteCollection, TElement> Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public abstract class NpgsqlArrayTypeMapping : RelationalTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/arrays.html Constructors | Edit this page View Source NpgsqlArrayTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlArrayTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source ElementTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping ElementTypeMapping { get; } Property Value Type Description RelationalTypeMapping Overrides CoreTypeMapping.ElementTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBigIntegerTypeMapping.JsonBigIntegerReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBigIntegerTypeMapping.JsonBigIntegerReaderWriter.html",
    "title": "Class NpgsqlBigIntegerTypeMapping.JsonBigIntegerReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlBigIntegerTypeMapping.JsonBigIntegerReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<BigInteger> NpgsqlBigIntegerTypeMapping.JsonBigIntegerReaderWriter Inherited Members JsonValueReaderWriter<BigInteger>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<BigInteger>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<BigInteger>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlBigIntegerTypeMapping.JsonBigIntegerReaderWriter : JsonValueReaderWriter<BigInteger> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlBigIntegerTypeMapping.JsonBigIntegerReaderWriter Instance { get; } Property Value Type Description NpgsqlBigIntegerTypeMapping.JsonBigIntegerReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override BigInteger FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description BigInteger Overrides JsonValueReaderWriter<BigInteger>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, BigInteger) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, BigInteger value) Parameters Type Name Description Utf8JsonWriter writer BigInteger value Overrides JsonValueReaderWriter<BigInteger>.ToJsonTyped(Utf8JsonWriter, BigInteger)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBigIntegerTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBigIntegerTypeMapping.html",
    "title": "Class NpgsqlBigIntegerTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBigIntegerTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlBigIntegerTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBigIntegerTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlBigIntegerTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlBigIntegerTypeMapping() | Edit this page View Source NpgsqlBigIntegerTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlBigIntegerTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlBigIntegerTypeMapping Default { get; } Property Value Type Description NpgsqlBigIntegerTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBitTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBitTypeMapping.html",
    "title": "Class NpgsqlBitTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBitTypeMapping The type mapping for the PostgreSQL bit string type. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlBitTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBitTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-bit.html Constructors | Edit this page View Source NpgsqlBitTypeMapping() Constructs an instance of the NpgsqlBitTypeMapping class. Declaration public NpgsqlBitTypeMapping() | Edit this page View Source NpgsqlBitTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlBitTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlBitTypeMapping Default { get; } Property Value Type Description NpgsqlBitTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoolTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoolTypeMapping.html",
    "title": "Class NpgsqlBoolTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBoolTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping BoolTypeMapping NpgsqlBoolTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBoolTypeMapping : BoolTypeMapping Constructors | Edit this page View Source NpgsqlBoolTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlBoolTypeMapping() | Edit this page View Source NpgsqlBoolTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlBoolTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlBoolTypeMapping Default { get; } Property Value Type Description NpgsqlBoolTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides BoolTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides BoolTypeMapping.GenerateNonNullSqlLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoxTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoxTypeMapping.html",
    "title": "Class NpgsqlBoxTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBoxTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlBoxTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBoxTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlBoxTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlBoxTypeMapping() | Edit this page View Source NpgsqlBoxTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlBoxTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlBoxTypeMapping Default { get; } Property Value Type Description NpgsqlBoxTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlByteArrayTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlByteArrayTypeMapping.html",
    "title": "Class NpgsqlByteArrayTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlByteArrayTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlByteArrayTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlByteArrayTypeMapping : RelationalTypeMapping Constructors | Edit this page View Source NpgsqlByteArrayTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlByteArrayTypeMapping() | Edit this page View Source NpgsqlByteArrayTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlByteArrayTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlByteArrayTypeMapping Default { get; } Property Value Type Description NpgsqlByteArrayTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterCharTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterCharTypeMapping.html",
    "title": "Class NpgsqlCharacterCharTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCharacterCharTypeMapping Type mapping for the PostgreSQL 'character' data type. Handles both CLR strings and chars. Inheritance object CoreTypeMapping RelationalTypeMapping CharTypeMapping NpgsqlCharacterCharTypeMapping Implements INpgsqlTypeMapping Inherited Members CharTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCharacterCharTypeMapping : CharTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-character.html Constructors | Edit this page View Source NpgsqlCharacterCharTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlCharacterCharTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlCharacterCharTypeMapping(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCharacterCharTypeMapping(string storeType) Parameters Type Name Description string storeType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlCharacterCharTypeMapping Default { get; } Property Value Type Description NpgsqlCharacterCharTypeMapping | Edit this page View Source NpgsqlDbType The database type used by Npgsql. Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides CharTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides RelationalTypeMapping.ConfigureParameter(DbParameter) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterStringTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterStringTypeMapping.html",
    "title": "Class NpgsqlCharacterStringTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCharacterStringTypeMapping Type mapping for the PostgreSQL 'character' data type. Handles both CLR strings and chars. Inheritance object CoreTypeMapping RelationalTypeMapping StringTypeMapping NpgsqlStringTypeMapping NpgsqlCharacterStringTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlStringTypeMapping.NpgsqlDbType NpgsqlStringTypeMapping.Clone(NpgsqlDbType) StringTypeMapping.EscapeSqlLiteral(string) StringTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCharacterStringTypeMapping : NpgsqlStringTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-character.html Constructors | Edit this page View Source NpgsqlCharacterStringTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlCharacterStringTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlCharacterStringTypeMapping(string, int) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCharacterStringTypeMapping(string storeType, int size = 1) Parameters Type Name Description string storeType int size Properties | Edit this page View Source Comparer This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ValueComparer Comparer { get; } Property Value Type Description ValueComparer Overrides CoreTypeMapping.Comparer | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlCharacterStringTypeMapping Default { get; } Property Value Type Description NpgsqlCharacterStringTypeMapping | Edit this page View Source KeyComparer This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ValueComparer KeyComparer { get; } Property Value Type Description ValueComparer Overrides CoreTypeMapping.KeyComparer Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides NpgsqlStringTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides NpgsqlStringTypeMapping.ConfigureParameter(DbParameter) | Edit this page View Source EqualsWithoutTrailingWhitespace(string?, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static bool EqualsWithoutTrailingWhitespace(string? a, string? b) Parameters Type Name Description string a string b Returns Type Description bool | Edit this page View Source GetHashCodeWithoutTrailingWhitespace(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static int GetHashCodeWithoutTrailingWhitespace(string a) Parameters Type Name Description string a Returns Type Description int Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCidrTypeMapping.JsonCidrReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCidrTypeMapping.JsonCidrReaderWriter.html",
    "title": "Class NpgsqlCidrTypeMapping.JsonCidrReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlCidrTypeMapping.JsonCidrReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<NpgsqlCidr> NpgsqlCidrTypeMapping.JsonCidrReaderWriter Inherited Members JsonValueReaderWriter<NpgsqlCidr>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<NpgsqlCidr>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<NpgsqlCidr>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlCidrTypeMapping.JsonCidrReaderWriter : JsonValueReaderWriter<NpgsqlCidr> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlCidrTypeMapping.JsonCidrReaderWriter Instance { get; } Property Value Type Description NpgsqlCidrTypeMapping.JsonCidrReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override NpgsqlCidr FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description NpgsqlCidr Overrides JsonValueReaderWriter<NpgsqlCidr>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, NpgsqlCidr) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, NpgsqlCidr value) Parameters Type Name Description Utf8JsonWriter writer NpgsqlCidr value Overrides JsonValueReaderWriter<NpgsqlCidr>.ToJsonTyped(Utf8JsonWriter, NpgsqlCidr)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCidrTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCidrTypeMapping.html",
    "title": "Class NpgsqlCidrTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCidrTypeMapping The type mapping for the PostgreSQL cidr type. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlCidrTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCidrTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-CIDR Constructors | Edit this page View Source NpgsqlCidrTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCidrTypeMapping() | Edit this page View Source NpgsqlCidrTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlCidrTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlCidrTypeMapping Default { get; } Property Value Type Description NpgsqlCidrTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCircleTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCircleTypeMapping.html",
    "title": "Class NpgsqlCircleTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCircleTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlCircleTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCircleTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlCircleTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlCircleTypeMapping() | Edit this page View Source NpgsqlCircleTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlCircleTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlCircleTypeMapping Default { get; } Property Value Type Description NpgsqlCircleTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateOnlyTypeMapping.NpgsqlJsonDateOnlyReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateOnlyTypeMapping.NpgsqlJsonDateOnlyReaderWriter.html",
    "title": "Class NpgsqlDateOnlyTypeMapping.NpgsqlJsonDateOnlyReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlDateOnlyTypeMapping.NpgsqlJsonDateOnlyReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<DateOnly> NpgsqlDateOnlyTypeMapping.NpgsqlJsonDateOnlyReaderWriter Inherited Members JsonValueReaderWriter<DateOnly>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<DateOnly>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<DateOnly>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlDateOnlyTypeMapping.NpgsqlJsonDateOnlyReaderWriter : JsonValueReaderWriter<DateOnly> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlDateOnlyTypeMapping.NpgsqlJsonDateOnlyReaderWriter Instance { get; } Property Value Type Description NpgsqlDateOnlyTypeMapping.NpgsqlJsonDateOnlyReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override DateOnly FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description DateOnly Overrides JsonValueReaderWriter<DateOnly>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, DateOnly) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, DateOnly value) Parameters Type Name Description Utf8JsonWriter writer DateOnly value Overrides JsonValueReaderWriter<DateOnly>.ToJsonTyped(Utf8JsonWriter, DateOnly)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateOnlyTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateOnlyTypeMapping.html",
    "title": "Class NpgsqlDateOnlyTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlDateOnlyTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlDateOnlyTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateOnlyTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlDateOnlyTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDateOnlyTypeMapping() | Edit this page View Source NpgsqlDateOnlyTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlDateOnlyTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlDateOnlyTypeMapping Default { get; } Property Value Type Description NpgsqlDateOnlyTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateTimeDateTypeMapping.NpgsqlJsonDateTimeReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateTimeDateTypeMapping.NpgsqlJsonDateTimeReaderWriter.html",
    "title": "Class NpgsqlDateTimeDateTypeMapping.NpgsqlJsonDateTimeReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTimeDateTypeMapping.NpgsqlJsonDateTimeReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<DateTime> NpgsqlDateTimeDateTypeMapping.NpgsqlJsonDateTimeReaderWriter Inherited Members JsonValueReaderWriter<DateTime>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<DateTime>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<DateTime>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlDateTimeDateTypeMapping.NpgsqlJsonDateTimeReaderWriter : JsonValueReaderWriter<DateTime> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlDateTimeDateTypeMapping.NpgsqlJsonDateTimeReaderWriter Instance { get; } Property Value Type Description NpgsqlDateTimeDateTypeMapping.NpgsqlJsonDateTimeReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override DateTime FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description DateTime Overrides JsonValueReaderWriter<DateTime>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, DateTime) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, DateTime value) Parameters Type Name Description Utf8JsonWriter writer DateTime value Overrides JsonValueReaderWriter<DateTime>.ToJsonTyped(Utf8JsonWriter, DateTime)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateTimeDateTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateTimeDateTypeMapping.html",
    "title": "Class NpgsqlDateTimeDateTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTimeDateTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlDateTimeDateTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateTimeDateTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlDateTimeDateTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDateTimeDateTypeMapping() | Edit this page View Source NpgsqlDateTimeDateTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlDateTimeDateTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlDateTimeDateTypeMapping Default { get; } Property Value Type Description NpgsqlDateTimeDateTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDecimalTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDecimalTypeMapping.html",
    "title": "Class NpgsqlDecimalTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlDecimalTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlDecimalTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDecimalTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlDecimalTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlDecimalTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlDecimalTypeMapping(Type?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDecimalTypeMapping(Type? clrType = null) Parameters Type Name Description Type clrType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlDecimalTypeMapping Default { get; } Property Value Type Description NpgsqlDecimalTypeMapping | Edit this page View Source SqlLiteralFormatString This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string SqlLiteralFormatString { get; } Property Value Type Description string Overrides RelationalTypeMapping.SqlLiteralFormatString Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDoubleTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDoubleTypeMapping.html",
    "title": "Class NpgsqlDoubleTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlDoubleTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping DoubleTypeMapping NpgsqlDoubleTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDoubleTypeMapping : DoubleTypeMapping Constructors | Edit this page View Source NpgsqlDoubleTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDoubleTypeMapping() | Edit this page View Source NpgsqlDoubleTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlDoubleTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlDoubleTypeMapping Default { get; } Property Value Type Description NpgsqlDoubleTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides DoubleTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides DoubleTypeMapping.GenerateNonNullSqlLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEStringTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEStringTypeMapping.html",
    "title": "Class NpgsqlEStringTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlEStringTypeMapping Represents a so-called PostgreSQL E-string literal string, which allows C-style escape sequences. This is a \"virtual\" type mapping which is never returned by NpgsqlTypeMappingSource. It is only used internally by some method translators to produce literal strings. Inheritance object CoreTypeMapping RelationalTypeMapping StringTypeMapping NpgsqlEStringTypeMapping Inherited Members StringTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) StringTypeMapping.EscapeSqlLiteral(string) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlEStringTypeMapping : StringTypeMapping Remarks See https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS Constructors | Edit this page View Source NpgsqlEStringTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlEStringTypeMapping() Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlEStringTypeMapping Default { get; } Property Value Type Description NpgsqlEStringTypeMapping Methods | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides StringTypeMapping.GenerateNonNullSqlLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEnumTypeMapping.JsonPgEnumReaderWriter-1.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEnumTypeMapping.JsonPgEnumReaderWriter-1.html",
    "title": "Class NpgsqlEnumTypeMapping.JsonPgEnumReaderWriter<T> | Npgsql Documentation",
    "keywords": "Class NpgsqlEnumTypeMapping.JsonPgEnumReaderWriter<T> This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<T> NpgsqlEnumTypeMapping.JsonPgEnumReaderWriter<T> Inherited Members JsonValueReaderWriter<T>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<T>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<T>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlEnumTypeMapping.JsonPgEnumReaderWriter<T> : JsonValueReaderWriter<T> where T : struct, Enum Type Parameters Name Description T Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override T FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description T Overrides JsonValueReaderWriter<T>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, T) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, T value) Parameters Type Name Description Utf8JsonWriter writer T value Overrides JsonValueReaderWriter<T>.ToJsonTyped(Utf8JsonWriter, T)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEnumTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEnumTypeMapping.html",
    "title": "Class NpgsqlEnumTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlEnumTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlEnumTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlEnumTypeMapping : RelationalTypeMapping Constructors | Edit this page View Source NpgsqlEnumTypeMapping(RelationalTypeMappingParameters, INpgsqlNameTranslator) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlEnumTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, INpgsqlNameTranslator nameTranslator) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters INpgsqlNameTranslator nameTranslator | Edit this page View Source NpgsqlEnumTypeMapping(string, Type, INpgsqlNameTranslator?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlEnumTypeMapping(string storeType, Type enumType, INpgsqlNameTranslator? nameTranslator = null) Parameters Type Name Description string storeType Type enumType INpgsqlNameTranslator nameTranslator Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlEnumTypeMapping Default { get; } Property Value Type Description NpgsqlEnumTypeMapping | Edit this page View Source NameTranslator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual INpgsqlNameTranslator NameTranslator { get; } Property Value Type Description INpgsqlNameTranslator Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlFloatTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlFloatTypeMapping.html",
    "title": "Class NpgsqlFloatTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlFloatTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping FloatTypeMapping NpgsqlFloatTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlFloatTypeMapping : FloatTypeMapping Constructors | Edit this page View Source NpgsqlFloatTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlFloatTypeMapping() | Edit this page View Source NpgsqlFloatTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlFloatTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlFloatTypeMapping Default { get; } Property Value Type Description NpgsqlFloatTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides FloatTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides FloatTypeMapping.GenerateNonNullSqlLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlHstoreTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlHstoreTypeMapping.html",
    "title": "Class NpgsqlHstoreTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlHstoreTypeMapping The type mapping for the PostgreSQL hstore type. Supports both Dictionary<TKey, TValue> and ImmutableDictionary<TKey, TValue> over strings. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlHstoreTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlHstoreTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/hstore.html Constructors | Edit this page View Source NpgsqlHstoreTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlHstoreTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlHstoreTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlHstoreTypeMapping(Type clrType) Parameters Type Name Description Type clrType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlHstoreTypeMapping Default { get; } Property Value Type Description NpgsqlHstoreTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.JsonIPAddressReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.JsonIPAddressReaderWriter.html",
    "title": "Class NpgsqlInetTypeMapping.JsonIPAddressReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlInetTypeMapping.JsonIPAddressReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<IPAddress> NpgsqlInetTypeMapping.JsonIPAddressReaderWriter Inherited Members JsonValueReaderWriter<IPAddress>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<IPAddress>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<IPAddress>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlInetTypeMapping.JsonIPAddressReaderWriter : JsonValueReaderWriter<IPAddress> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlInetTypeMapping.JsonIPAddressReaderWriter Instance { get; } Property Value Type Description NpgsqlInetTypeMapping.JsonIPAddressReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override IPAddress FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description IPAddress Overrides JsonValueReaderWriter<IPAddress>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, IPAddress) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, IPAddress value) Parameters Type Name Description Utf8JsonWriter writer IPAddress value Overrides JsonValueReaderWriter<IPAddress>.ToJsonTyped(Utf8JsonWriter, IPAddress)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.JsonNpgsqlInetReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.JsonNpgsqlInetReaderWriter.html",
    "title": "Class NpgsqlInetTypeMapping.JsonNpgsqlInetReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlInetTypeMapping.JsonNpgsqlInetReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<NpgsqlInet> NpgsqlInetTypeMapping.JsonNpgsqlInetReaderWriter Inherited Members JsonValueReaderWriter<NpgsqlInet>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<NpgsqlInet>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<NpgsqlInet>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlInetTypeMapping.JsonNpgsqlInetReaderWriter : JsonValueReaderWriter<NpgsqlInet> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlInetTypeMapping.JsonNpgsqlInetReaderWriter Instance { get; } Property Value Type Description NpgsqlInetTypeMapping.JsonNpgsqlInetReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override NpgsqlInet FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description NpgsqlInet Overrides JsonValueReaderWriter<NpgsqlInet>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, NpgsqlInet) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, NpgsqlInet value) Parameters Type Name Description Utf8JsonWriter writer NpgsqlInet value Overrides JsonValueReaderWriter<NpgsqlInet>.ToJsonTyped(Utf8JsonWriter, NpgsqlInet)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.html",
    "title": "Class NpgsqlInetTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlInetTypeMapping The type mapping for the PostgreSQL inet type. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlInetTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlInetTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-INET Constructors | Edit this page View Source NpgsqlInetTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlInetTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlInetTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlInetTypeMapping(Type clrType) Parameters Type Name Description Type clrType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlInetTypeMapping Default { get; } Property Value Type Description NpgsqlInetTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlIntervalTypeMapping.NpgsqlJsonTimeSpanReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlIntervalTypeMapping.NpgsqlJsonTimeSpanReaderWriter.html",
    "title": "Class NpgsqlIntervalTypeMapping.NpgsqlJsonTimeSpanReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlIntervalTypeMapping.NpgsqlJsonTimeSpanReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<TimeSpan> NpgsqlIntervalTypeMapping.NpgsqlJsonTimeSpanReaderWriter Inherited Members JsonValueReaderWriter<TimeSpan>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<TimeSpan>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<TimeSpan>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlIntervalTypeMapping.NpgsqlJsonTimeSpanReaderWriter : JsonValueReaderWriter<TimeSpan> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlIntervalTypeMapping.NpgsqlJsonTimeSpanReaderWriter Instance { get; } Property Value Type Description NpgsqlIntervalTypeMapping.NpgsqlJsonTimeSpanReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override TimeSpan FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description TimeSpan Overrides JsonValueReaderWriter<TimeSpan>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, TimeSpan) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, TimeSpan value) Parameters Type Name Description Utf8JsonWriter writer TimeSpan value Overrides JsonValueReaderWriter<TimeSpan>.ToJsonTyped(Utf8JsonWriter, TimeSpan)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlIntervalTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlIntervalTypeMapping.html",
    "title": "Class NpgsqlIntervalTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlIntervalTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlIntervalTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlIntervalTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlIntervalTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlIntervalTypeMapping() | Edit this page View Source NpgsqlIntervalTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlIntervalTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlIntervalTypeMapping Default { get; } Property Value Type Description NpgsqlIntervalTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source FormatTimeSpanAsInterval(TimeSpan) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string FormatTimeSpanAsInterval(TimeSpan ts) Parameters Type Name Description TimeSpan ts Returns Type Description string | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ParseIntervalAsTimeSpan(ReadOnlySpan<char>) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static TimeSpan ParseIntervalAsTimeSpan(ReadOnlySpan<char> s) Parameters Type Name Description ReadOnlySpan<char> s Returns Type Description TimeSpan | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlJsonTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlJsonTypeMapping.html",
    "title": "Class NpgsqlJsonTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonTypeMapping Supports the older Npgsql-specific JSON mapping, allowing mapping json/jsonb to text, to e.g. JsonElement (weakly-typed mapping) or to arbitrary POCOs (but without them being modeled). For the standard EF JSON support, which relies on owned entity modeling, see NpgsqlOwnedJsonTypeMapping. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlJsonTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlJsonTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlJsonTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Edit this page View Source NpgsqlJsonTypeMapping(string, Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlJsonTypeMapping(string storeType, Type clrType) Parameters Type Name Description string storeType Type clrType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlJsonTypeMapping Default { get; } Property Value Type Description NpgsqlJsonTypeMapping | Edit this page View Source IsJsonb This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool IsJsonb { get; } Property Value Type Description bool Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source EscapeSqlLiteral(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual string EscapeSqlLiteral(string literal) Parameters Type Name Description string literal Returns Type Description string | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLTreeTypeMapping.JsonLTreeReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLTreeTypeMapping.JsonLTreeReaderWriter.html",
    "title": "Class NpgsqlLTreeTypeMapping.JsonLTreeReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlLTreeTypeMapping.JsonLTreeReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<LTree> NpgsqlLTreeTypeMapping.JsonLTreeReaderWriter Inherited Members JsonValueReaderWriter<LTree>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<LTree>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<LTree>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlLTreeTypeMapping.JsonLTreeReaderWriter : JsonValueReaderWriter<LTree> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlLTreeTypeMapping.JsonLTreeReaderWriter Instance { get; } Property Value Type Description NpgsqlLTreeTypeMapping.JsonLTreeReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override LTree FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description LTree Overrides JsonValueReaderWriter<LTree>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, LTree) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, LTree value) Parameters Type Name Description Utf8JsonWriter writer LTree value Overrides JsonValueReaderWriter<LTree>.ToJsonTyped(Utf8JsonWriter, LTree)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLTreeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLTreeTypeMapping.html",
    "title": "Class NpgsqlLTreeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlLTreeTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping StringTypeMapping NpgsqlStringTypeMapping NpgsqlLTreeTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlStringTypeMapping.NpgsqlDbType NpgsqlStringTypeMapping.Clone(NpgsqlDbType) NpgsqlStringTypeMapping.ConfigureParameter(DbParameter) StringTypeMapping.EscapeSqlLiteral(string) StringTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLTreeTypeMapping : NpgsqlStringTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlLTreeTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlLTreeTypeMapping() | Edit this page View Source NpgsqlLTreeTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlLTreeTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlLTreeTypeMapping Default { get; } Property Value Type Description NpgsqlLTreeTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides NpgsqlStringTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineSegmentTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineSegmentTypeMapping.html",
    "title": "Class NpgsqlLineSegmentTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlLineSegmentTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlLineSegmentTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLineSegmentTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlLineSegmentTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlLineSegmentTypeMapping() | Edit this page View Source NpgsqlLineSegmentTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlLineSegmentTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlLineSegmentTypeMapping Default { get; } Property Value Type Description NpgsqlLineSegmentTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineTypeMapping.html",
    "title": "Class NpgsqlLineTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlLineTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlLineTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLineTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlLineTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlLineTypeMapping() | Edit this page View Source NpgsqlLineTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlLineTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlLineTypeMapping Default { get; } Property Value Type Description NpgsqlLineTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddr8TypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddr8TypeMapping.html",
    "title": "Class NpgsqlMacaddr8TypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMacaddr8TypeMapping The type mapping for the PostgreSQL macaddr8 type. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlMacaddr8TypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMacaddr8TypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-MACADDR8 Constructors | Edit this page View Source NpgsqlMacaddr8TypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMacaddr8TypeMapping() | Edit this page View Source NpgsqlMacaddr8TypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlMacaddr8TypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlMacaddr8TypeMapping Default { get; } Property Value Type Description NpgsqlMacaddr8TypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddrTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddrTypeMapping.html",
    "title": "Class NpgsqlMacaddrTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMacaddrTypeMapping The type mapping for the PostgreSQL macaddr type. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlMacaddrTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMacaddrTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-MACADDR Constructors | Edit this page View Source NpgsqlMacaddrTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMacaddrTypeMapping() | Edit this page View Source NpgsqlMacaddrTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlMacaddrTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlMacaddrTypeMapping Default { get; } Property Value Type Description NpgsqlMacaddrTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMoneyTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMoneyTypeMapping.html",
    "title": "Class NpgsqlMoneyTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMoneyTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping DecimalTypeMapping NpgsqlMoneyTypeMapping Inherited Members DecimalTypeMapping.SqlLiteralFormatString RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMoneyTypeMapping : DecimalTypeMapping Constructors | Edit this page View Source NpgsqlMoneyTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlMoneyTypeMapping() | Edit this page View Source NpgsqlMoneyTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlMoneyTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlMoneyTypeMapping Default { get; } Property Value Type Description NpgsqlMoneyTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides DecimalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMultirangeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMultirangeTypeMapping.html",
    "title": "Class NpgsqlMultirangeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMultirangeTypeMapping The type mapping for PostgreSQL multirange types. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlMultirangeTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMultirangeTypeMapping : RelationalTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Constructors | Edit this page View Source NpgsqlMultirangeTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlMultirangeTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Edit this page View Source NpgsqlMultirangeTypeMapping(string, Type, NpgsqlRangeTypeMapping) Constructs an instance of the NpgsqlRangeTypeMapping class. Declaration public NpgsqlMultirangeTypeMapping(string storeType, Type clrType, NpgsqlRangeTypeMapping rangeMapping) Parameters Type Name Description string storeType The database type to map Type clrType The CLR type to map. NpgsqlRangeTypeMapping rangeMapping The type mapping of the ranges contained in this multirange. Properties | Edit this page View Source NpgsqlDbType The database type used by Npgsql. Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType | Edit this page View Source RangeMapping The relational type mapping of the ranges contained in this multirange. Declaration public virtual NpgsqlRangeTypeMapping RangeMapping { get; } Property Value Type Description NpgsqlRangeTypeMapping | Edit this page View Source SubtypeMapping The relational type mapping of the values contained in this multirange. Declaration public virtual RelationalTypeMapping SubtypeMapping { get; } Property Value Type Description RelationalTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides RelationalTypeMapping.ConfigureParameter(DbParameter) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object, RelationalTypeMapping, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static string GenerateNonNullSqlLiteral(object value, RelationalTypeMapping rangeMapping, string multirangeStoreType) Parameters Type Name Description object value RelationalTypeMapping rangeMapping string multirangeStoreType Returns Type Description string"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlOwnedJsonTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlOwnedJsonTypeMapping.html",
    "title": "Class NpgsqlOwnedJsonTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlOwnedJsonTypeMapping Supports the standard EF JSON support, which relies on owned entity modeling. See NpgsqlJsonTypeMapping for the older Npgsql-specific support, which allows mapping json/jsonb to text, to e.g. JsonElement (weakly-typed mapping) or to arbitrary POCOs (but without them being modeled). Inheritance object CoreTypeMapping RelationalTypeMapping JsonTypeMapping NpgsqlOwnedJsonTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlOwnedJsonTypeMapping : JsonTypeMapping Constructors | Edit this page View Source NpgsqlOwnedJsonTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlOwnedJsonTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Edit this page View Source NpgsqlOwnedJsonTypeMapping(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlOwnedJsonTypeMapping(string storeType) Parameters Type Name Description string storeType Properties | Edit this page View Source NpgsqlDbType The database type used by Npgsql (Json or Jsonb. Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides RelationalTypeMapping.ConfigureParameter(DbParameter) | Edit this page View Source CustomizeDataReaderExpression(Expression) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression CustomizeDataReaderExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression Overrides RelationalTypeMapping.CustomizeDataReaderExpression(Expression) | Edit this page View Source EscapeSqlLiteral(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual string EscapeSqlLiteral(string literal) Parameters Type Name Description string literal Returns Type Description string | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides JsonTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source GetDataReaderMethod() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override MethodInfo GetDataReaderMethod() Returns Type Description MethodInfo Overrides RelationalTypeMapping.GetDataReaderMethod()"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPathTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPathTypeMapping.html",
    "title": "Class NpgsqlPathTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPathTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlPathTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPathTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlPathTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlPathTypeMapping() | Edit this page View Source NpgsqlPathTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlPathTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlPathTypeMapping Default { get; } Property Value Type Description NpgsqlPathTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPgLsnTypeMapping.JsonLogSequenceNumberReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPgLsnTypeMapping.JsonLogSequenceNumberReaderWriter.html",
    "title": "Class NpgsqlPgLsnTypeMapping.JsonLogSequenceNumberReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlPgLsnTypeMapping.JsonLogSequenceNumberReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<NpgsqlLogSequenceNumber> NpgsqlPgLsnTypeMapping.JsonLogSequenceNumberReaderWriter Inherited Members JsonValueReaderWriter<NpgsqlLogSequenceNumber>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<NpgsqlLogSequenceNumber>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<NpgsqlLogSequenceNumber>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlPgLsnTypeMapping.JsonLogSequenceNumberReaderWriter : JsonValueReaderWriter<NpgsqlLogSequenceNumber> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlPgLsnTypeMapping.JsonLogSequenceNumberReaderWriter Instance { get; } Property Value Type Description NpgsqlPgLsnTypeMapping.JsonLogSequenceNumberReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override NpgsqlLogSequenceNumber FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description NpgsqlLogSequenceNumber Overrides JsonValueReaderWriter<NpgsqlLogSequenceNumber>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, NpgsqlLogSequenceNumber) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, NpgsqlLogSequenceNumber value) Parameters Type Name Description Utf8JsonWriter writer NpgsqlLogSequenceNumber value Overrides JsonValueReaderWriter<NpgsqlLogSequenceNumber>.ToJsonTyped(Utf8JsonWriter, NpgsqlLogSequenceNumber)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPgLsnTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPgLsnTypeMapping.html",
    "title": "Class NpgsqlPgLsnTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPgLsnTypeMapping The type mapping for the PostgreSQL pg_lsn type. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlPgLsnTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPgLsnTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/datatype-pg-lsn.html Constructors | Edit this page View Source NpgsqlPgLsnTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlPgLsnTypeMapping() | Edit this page View Source NpgsqlPgLsnTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlPgLsnTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlPgLsnTypeMapping Default { get; } Property Value Type Description NpgsqlPgLsnTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPointTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPointTypeMapping.html",
    "title": "Class NpgsqlPointTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPointTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlPointTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPointTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlPointTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlPointTypeMapping() | Edit this page View Source NpgsqlPointTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlPointTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlPointTypeMapping Default { get; } Property Value Type Description NpgsqlPointTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPolygonTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPolygonTypeMapping.html",
    "title": "Class NpgsqlPolygonTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPolygonTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlPolygonTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPolygonTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlPolygonTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlPolygonTypeMapping() | Edit this page View Source NpgsqlPolygonTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlPolygonTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlPolygonTypeMapping Default { get; } Property Value Type Description NpgsqlPolygonTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRangeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRangeTypeMapping.html",
    "title": "Class NpgsqlRangeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRangeTypeMapping The type mapping for PostgreSQL range types. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlRangeTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRangeTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Constructors | Edit this page View Source NpgsqlRangeTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType, RelationalTypeMapping) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlRangeTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType, RelationalTypeMapping subtypeMapping) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType RelationalTypeMapping subtypeMapping Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlRangeTypeMapping Default { get; } Property Value Type Description NpgsqlRangeTypeMapping | Edit this page View Source SubtypeMapping The relational type mapping of the range's subtype. Declaration public virtual RelationalTypeMapping SubtypeMapping { get; } Property Value Type Description RelationalTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source Clone(NpgsqlDbType, RelationalTypeMapping) This method exists only to support the compiled model. Declaration public virtual NpgsqlRangeTypeMapping Clone(NpgsqlDbType npgsqlDbType, RelationalTypeMapping subtypeTypeMapping) Parameters Type Name Description NpgsqlDbType npgsqlDbType RelationalTypeMapping subtypeTypeMapping Returns Type Description NpgsqlRangeTypeMapping Remarks This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides NpgsqlTypeMapping.ConfigureParameter(DbParameter) | Edit this page View Source CreatBuiltInRangeMapping(string, Type, NpgsqlDbType, RelationalTypeMapping) Constructs an instance of the NpgsqlRangeTypeMapping class for a built-in range type which has a NpgsqlDbType defined. Declaration public static NpgsqlRangeTypeMapping CreatBuiltInRangeMapping(string rangeStoreType, Type rangeClrType, NpgsqlDbType rangeNpgsqlDbType, RelationalTypeMapping subtypeMapping) Parameters Type Name Description string rangeStoreType The database type to map Type rangeClrType The CLR type to map. NpgsqlDbType rangeNpgsqlDbType The NpgsqlDbType of the built-in range. RelationalTypeMapping subtypeMapping The type mapping for the range subtype. Returns Type Description NpgsqlRangeTypeMapping | Edit this page View Source CreatUserDefinedRangeMapping(string, string, Type, RelationalTypeMapping) Constructs an instance of the NpgsqlRangeTypeMapping class for a user-defined range type which doesn't have a NpgsqlDbType defined. Declaration public static NpgsqlRangeTypeMapping CreatUserDefinedRangeMapping(string quotedRangeStoreType, string unquotedRangeStoreType, Type rangeClrType, RelationalTypeMapping subtypeMapping) Parameters Type Name Description string quotedRangeStoreType The database type to map, quoted. string unquotedRangeStoreType The database type to map, unquoted. Type rangeClrType The CLR type to map. RelationalTypeMapping subtypeMapping The type mapping for the range subtype. Returns Type Description NpgsqlRangeTypeMapping | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegconfigTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegconfigTypeMapping.html",
    "title": "Class NpgsqlRegconfigTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRegconfigTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlRegconfigTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRegconfigTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlRegconfigTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRegconfigTypeMapping() | Edit this page View Source NpgsqlRegconfigTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlRegconfigTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlRegconfigTypeMapping Default { get; } Property Value Type Description NpgsqlRegconfigTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegdictionaryTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegdictionaryTypeMapping.html",
    "title": "Class NpgsqlRegdictionaryTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRegdictionaryTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlRegdictionaryTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRegdictionaryTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlRegdictionaryTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRegdictionaryTypeMapping() | Edit this page View Source NpgsqlRegdictionaryTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlRegdictionaryTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlRegdictionaryTypeMapping Default { get; } Property Value Type Description NpgsqlRegdictionaryTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRowValueTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRowValueTypeMapping.html",
    "title": "Class NpgsqlRowValueTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRowValueTypeMapping TODO: Update Every node in the SQL tree must have a type mapping, but row values aren't actual values (in the sense that they can be sent as parameters, or have a literal representation). So we have a dummy type mapping for that. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlRowValueTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRowValueTypeMapping : RelationalTypeMapping Constructors | Edit this page View Source NpgsqlRowValueTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlRowValueTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlRowValueTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRowValueTypeMapping(Type clrType) Parameters Type Name Description Type clrType Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides RelationalTypeMapping.ConfigureParameter(DbParameter) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlStringTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlStringTypeMapping.html",
    "title": "Class NpgsqlStringTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlStringTypeMapping The base class for mapping Npgsql-specific string types. It configures parameters with the NpgsqlDbType provider-specific type enum. Inheritance object CoreTypeMapping RelationalTypeMapping StringTypeMapping NpgsqlStringTypeMapping NpgsqlCharacterStringTypeMapping NpgsqlLTreeTypeMapping Implements INpgsqlTypeMapping Inherited Members StringTypeMapping.EscapeSqlLiteral(string) StringTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStringTypeMapping : StringTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlStringTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlStringTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Edit this page View Source NpgsqlStringTypeMapping(string, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlStringTypeMapping(string storeType, NpgsqlDbType npgsqlDbType) Parameters Type Name Description string storeType NpgsqlDbType npgsqlDbType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlStringTypeMapping Default { get; } Property Value Type Description NpgsqlStringTypeMapping | Edit this page View Source NpgsqlDbType This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides StringTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source Clone(NpgsqlDbType) This method exists only to support the compiled model. Declaration public virtual NpgsqlStringTypeMapping Clone(NpgsqlDbType npgsqlDbType) Parameters Type Name Description NpgsqlDbType npgsqlDbType Returns Type Description NpgsqlStringTypeMapping Remarks This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides RelationalTypeMapping.ConfigureParameter(DbParameter) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTidTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTidTypeMapping.html",
    "title": "Class NpgsqlTidTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTidTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlTidTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTidTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlTidTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTidTypeMapping() | Edit this page View Source NpgsqlTidTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTidTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTidTypeMapping Default { get; } Property Value Type Description NpgsqlTidTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTypeMapping.html",
    "title": "Class NpgsqlTimeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimeTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlTimeTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimeTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlTimeTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTimeTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlTimeTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimeTypeMapping(Type clrType) Parameters Type Name Description Type clrType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTimeTypeMapping Default { get; } Property Value Type Description NpgsqlTimeTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTzTypeMapping.JsonTimeTzReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTzTypeMapping.JsonTimeTzReaderWriter.html",
    "title": "Class NpgsqlTimeTzTypeMapping.JsonTimeTzReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlTimeTzTypeMapping.JsonTimeTzReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<DateTimeOffset> NpgsqlTimeTzTypeMapping.JsonTimeTzReaderWriter Inherited Members JsonValueReaderWriter<DateTimeOffset>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<DateTimeOffset>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<DateTimeOffset>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlTimeTzTypeMapping.JsonTimeTzReaderWriter : JsonValueReaderWriter<DateTimeOffset> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTimeTzTypeMapping.JsonTimeTzReaderWriter Instance { get; } Property Value Type Description NpgsqlTimeTzTypeMapping.JsonTimeTzReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override DateTimeOffset FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description DateTimeOffset Overrides JsonValueReaderWriter<DateTimeOffset>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, DateTimeOffset) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, DateTimeOffset value) Parameters Type Name Description Utf8JsonWriter writer DateTimeOffset value Overrides JsonValueReaderWriter<DateTimeOffset>.ToJsonTyped(Utf8JsonWriter, DateTimeOffset)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTzTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTzTypeMapping.html",
    "title": "Class NpgsqlTimeTzTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimeTzTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlTimeTzTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimeTzTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlTimeTzTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimeTzTypeMapping() | Edit this page View Source NpgsqlTimeTzTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTimeTzTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTimeTzTypeMapping Default { get; } Property Value Type Description NpgsqlTimeTzTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTypeMapping.NpgsqlJsonTimestampReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTypeMapping.NpgsqlJsonTimestampReaderWriter.html",
    "title": "Class NpgsqlTimestampTypeMapping.NpgsqlJsonTimestampReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlTimestampTypeMapping.NpgsqlJsonTimestampReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<DateTime> NpgsqlTimestampTypeMapping.NpgsqlJsonTimestampReaderWriter Inherited Members JsonValueReaderWriter<DateTime>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<DateTime>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<DateTime>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlTimestampTypeMapping.NpgsqlJsonTimestampReaderWriter : JsonValueReaderWriter<DateTime> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTimestampTypeMapping.NpgsqlJsonTimestampReaderWriter Instance { get; } Property Value Type Description NpgsqlTimestampTypeMapping.NpgsqlJsonTimestampReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override DateTime FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description DateTime Overrides JsonValueReaderWriter<DateTime>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, DateTime) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, DateTime value) Parameters Type Name Description Utf8JsonWriter writer DateTime value Overrides JsonValueReaderWriter<DateTime>.ToJsonTyped(Utf8JsonWriter, DateTime)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTypeMapping.html",
    "title": "Class NpgsqlTimestampTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimestampTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlTimestampTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimestampTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlTimestampTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimestampTypeMapping() | Edit this page View Source NpgsqlTimestampTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTimestampTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTimestampTypeMapping Default { get; } Property Value Type Description NpgsqlTimestampTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter.html",
    "title": "Class NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<DateTimeOffset> NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter Inherited Members JsonValueReaderWriter<DateTimeOffset>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<DateTimeOffset>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<DateTimeOffset>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter : JsonValueReaderWriter<DateTimeOffset> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter Instance { get; } Property Value Type Description NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override DateTimeOffset FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description DateTimeOffset Overrides JsonValueReaderWriter<DateTimeOffset>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, DateTimeOffset) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, DateTimeOffset value) Parameters Type Name Description Utf8JsonWriter writer DateTimeOffset value Overrides JsonValueReaderWriter<DateTimeOffset>.ToJsonTyped(Utf8JsonWriter, DateTimeOffset)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeReaderWriter.html",
    "title": "Class NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<DateTime> NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeReaderWriter Inherited Members JsonValueReaderWriter<DateTime>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<DateTime>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<DateTime>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public sealed class NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeReaderWriter : JsonValueReaderWriter<DateTime> Properties | Edit this page View Source Instance This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeReaderWriter Instance { get; } Property Value Type Description NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override DateTime FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager object existingObject Returns Type Description DateTime Overrides JsonValueReaderWriter<DateTime>.FromJsonTyped(ref Utf8JsonReaderManager, object) | Edit this page View Source ToJsonTyped(Utf8JsonWriter, DateTime) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, DateTime value) Parameters Type Name Description Utf8JsonWriter writer DateTime value Overrides JsonValueReaderWriter<DateTime>.ToJsonTyped(Utf8JsonWriter, DateTime)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.html",
    "title": "Class NpgsqlTimestampTzTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimestampTzTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlTimestampTzTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimestampTzTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlTimestampTzTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTimestampTzTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlTimestampTzTypeMapping(Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTimestampTzTypeMapping(Type clrType) Parameters Type Name Description Type clrType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTimestampTzTypeMapping Default { get; } Property Value Type Description NpgsqlTimestampTzTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsQueryTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsQueryTypeMapping.html",
    "title": "Class NpgsqlTsQueryTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlTsQueryTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTsQueryTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlTsQueryTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTsQueryTypeMapping() | Edit this page View Source NpgsqlTsQueryTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTsQueryTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTsQueryTypeMapping Default { get; } Property Value Type Description NpgsqlTsQueryTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsRankingNormalizationTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsRankingNormalizationTypeMapping.html",
    "title": "Class NpgsqlTsRankingNormalizationTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTsRankingNormalizationTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping IntTypeMapping NpgsqlTsRankingNormalizationTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.ConfigureParameter(DbParameter) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTsRankingNormalizationTypeMapping : IntTypeMapping Constructors | Edit this page View Source NpgsqlTsRankingNormalizationTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTsRankingNormalizationTypeMapping() | Edit this page View Source NpgsqlTsRankingNormalizationTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTsRankingNormalizationTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTsRankingNormalizationTypeMapping Default { get; } Property Value Type Description NpgsqlTsRankingNormalizationTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides IntTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsVectorTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsVectorTypeMapping.html",
    "title": "Class NpgsqlTsVectorTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTsVectorTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlTsVectorTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTsVectorTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlTsVectorTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTsVectorTypeMapping() | Edit this page View Source NpgsqlTsVectorTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlTsVectorTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlTsVectorTypeMapping Default { get; } Property Value Type Description NpgsqlTsVectorTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTypeMapping.html",
    "title": "Class NpgsqlTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeMapping The base class for mapping Npgsql-specific types. It configures parameters with the NpgsqlDbType provider-specific type enum. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping DateIntervalMultirangeMapping DateIntervalRangeMapping DateMapping DurationIntervalMapping IntervalMultirangeMapping IntervalRangeMapping LegacyTimestampInstantMapping NpgsqlBigIntegerTypeMapping NpgsqlBitTypeMapping NpgsqlBoxTypeMapping NpgsqlCidrTypeMapping NpgsqlCircleTypeMapping NpgsqlDateOnlyTypeMapping NpgsqlDateTimeDateTypeMapping NpgsqlDecimalTypeMapping NpgsqlHstoreTypeMapping NpgsqlInetTypeMapping NpgsqlIntervalTypeMapping NpgsqlJsonTypeMapping NpgsqlLineSegmentTypeMapping NpgsqlLineTypeMapping NpgsqlMacaddr8TypeMapping NpgsqlMacaddrTypeMapping NpgsqlPathTypeMapping NpgsqlPgLsnTypeMapping NpgsqlPointTypeMapping NpgsqlPolygonTypeMapping NpgsqlRangeTypeMapping NpgsqlRegconfigTypeMapping NpgsqlRegdictionaryTypeMapping NpgsqlTidTypeMapping NpgsqlTimeTypeMapping NpgsqlTimeTzTypeMapping NpgsqlTimestampTypeMapping NpgsqlTimestampTzTypeMapping NpgsqlTsQueryTypeMapping NpgsqlTsVectorTypeMapping NpgsqlUIntTypeMapping NpgsqlULongTypeMapping NpgsqlVarbitTypeMapping PeriodIntervalMapping TimeMapping TimeTzMapping TimestampLocalDateTimeMapping TimestampTzInstantMapping TimestampTzOffsetDateTimeMapping TimestampTzZonedDateTimeMapping Implements INpgsqlTypeMapping Inherited Members RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public abstract class NpgsqlTypeMapping : RelationalTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) Constructs an instance of the NpgsqlTypeMapping class. Declaration protected NpgsqlTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters The parameters for this mapping. NpgsqlDbType npgsqlDbType The database type of the range subtype. | Edit this page View Source NpgsqlTypeMapping(string, Type, NpgsqlDbType, JsonValueReaderWriter?) Constructs an instance of the NpgsqlTypeMapping class. Declaration public NpgsqlTypeMapping(string storeType, Type clrType, NpgsqlDbType npgsqlDbType, JsonValueReaderWriter? jsonValueReaderWriter = null) Parameters Type Name Description string storeType The database type to map. Type clrType The CLR type to map. NpgsqlDbType npgsqlDbType The database type used by Npgsql. JsonValueReaderWriter jsonValueReaderWriter Handles reading and writing JSON values for instances of the mapped type. Properties | Edit this page View Source NpgsqlDbType The database type used by Npgsql. Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType Methods | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides RelationalTypeMapping.ConfigureParameter(DbParameter) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) Generates the SQL representation of a non-null literal value, meant to be embedded in another literal value, e.g. in a range. Declaration protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value The literal value. Returns Type Description string The generated string. | Edit this page View Source GenerateEmbeddedProviderValueSqlLiteral(object?) Generates the SQL representation of a literal value without conversion, meant to be embedded in another literal value, e.g. in a range. Declaration public virtual string GenerateEmbeddedProviderValueSqlLiteral(object? value) Parameters Type Name Description object value The literal value. Returns Type Description string The generated string. | Edit this page View Source GenerateEmbeddedSqlLiteral(object?) Generates the SQL representation of a literal value meant to be embedded in another literal value, e.g. in a range. Declaration public virtual string GenerateEmbeddedSqlLiteral(object? value) Parameters Type Name Description object value The literal value. Returns Type Description string The generated string. Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlUIntTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlUIntTypeMapping.html",
    "title": "Class NpgsqlUIntTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlUIntTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlUIntTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlUIntTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlUIntTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlUIntTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Edit this page View Source NpgsqlUIntTypeMapping(string, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlUIntTypeMapping(string storeType, NpgsqlDbType npgsqlDbType) Parameters Type Name Description string storeType NpgsqlDbType npgsqlDbType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlUIntTypeMapping Default { get; } Property Value Type Description NpgsqlUIntTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlULongTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlULongTypeMapping.html",
    "title": "Class NpgsqlULongTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlULongTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlULongTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GenerateNonNullSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlULongTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlULongTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlULongTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Edit this page View Source NpgsqlULongTypeMapping(string, NpgsqlDbType) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlULongTypeMapping(string storeType, NpgsqlDbType npgsqlDbType) Parameters Type Name Description string storeType NpgsqlDbType npgsqlDbType Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlULongTypeMapping Default { get; } Property Value Type Description NpgsqlULongTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlVarbitTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlVarbitTypeMapping.html",
    "title": "Class NpgsqlVarbitTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlVarbitTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping NpgsqlVarbitTypeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlVarbitTypeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source NpgsqlVarbitTypeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlVarbitTypeMapping() | Edit this page View Source NpgsqlVarbitTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlVarbitTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static NpgsqlVarbitTypeMapping Default { get; } Property Value Type Description NpgsqlVarbitTypeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Classes NpgsqlArrayTypeMapping Type mapping for PostgreSQL arrays. NpgsqlArrayTypeMapping<TCollection, TConcreteCollection, TElement> Type mapping for PostgreSQL arrays. NpgsqlBigIntegerTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlBigIntegerTypeMapping.JsonBigIntegerReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlBitTypeMapping The type mapping for the PostgreSQL bit string type. NpgsqlBoolTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlBoxTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlByteArrayTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlCharacterCharTypeMapping Type mapping for the PostgreSQL 'character' data type. Handles both CLR strings and chars. NpgsqlCharacterStringTypeMapping Type mapping for the PostgreSQL 'character' data type. Handles both CLR strings and chars. NpgsqlCidrTypeMapping The type mapping for the PostgreSQL cidr type. NpgsqlCidrTypeMapping.JsonCidrReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlCircleTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDateOnlyTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDateOnlyTypeMapping.NpgsqlJsonDateOnlyReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDateTimeDateTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDateTimeDateTypeMapping.NpgsqlJsonDateTimeReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDecimalTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDoubleTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlEStringTypeMapping Represents a so-called PostgreSQL E-string literal string, which allows C-style escape sequences. This is a \"virtual\" type mapping which is never returned by NpgsqlTypeMappingSource. It is only used internally by some method translators to produce literal strings. NpgsqlEnumTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlEnumTypeMapping.JsonPgEnumReaderWriter<T> This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlFloatTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlHstoreTypeMapping The type mapping for the PostgreSQL hstore type. Supports both Dictionary<TKey, TValue> and ImmutableDictionary<TKey, TValue> over strings. NpgsqlInetTypeMapping The type mapping for the PostgreSQL inet type. NpgsqlInetTypeMapping.JsonIPAddressReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlInetTypeMapping.JsonNpgsqlInetReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlIntervalTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlIntervalTypeMapping.NpgsqlJsonTimeSpanReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlJsonTypeMapping Supports the older Npgsql-specific JSON mapping, allowing mapping json/jsonb to text, to e.g. JsonElement (weakly-typed mapping) or to arbitrary POCOs (but without them being modeled). For the standard EF JSON support, which relies on owned entity modeling, see NpgsqlOwnedJsonTypeMapping. NpgsqlLTreeTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlLTreeTypeMapping.JsonLTreeReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlLineSegmentTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlLineTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlMacaddr8TypeMapping The type mapping for the PostgreSQL macaddr8 type. NpgsqlMacaddrTypeMapping The type mapping for the PostgreSQL macaddr type. NpgsqlMoneyTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlMultirangeTypeMapping The type mapping for PostgreSQL multirange types. NpgsqlOwnedJsonTypeMapping Supports the standard EF JSON support, which relies on owned entity modeling. See NpgsqlJsonTypeMapping for the older Npgsql-specific support, which allows mapping json/jsonb to text, to e.g. JsonElement (weakly-typed mapping) or to arbitrary POCOs (but without them being modeled). NpgsqlPathTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlPgLsnTypeMapping The type mapping for the PostgreSQL pg_lsn type. NpgsqlPgLsnTypeMapping.JsonLogSequenceNumberReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlPointTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlPolygonTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRangeTypeMapping The type mapping for PostgreSQL range types. NpgsqlRegconfigTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRegdictionaryTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRowValueTypeMapping TODO: Update Every node in the SQL tree must have a type mapping, but row values aren't actual values (in the sense that they can be sent as parameters, or have a literal representation). So we have a dummy type mapping for that. NpgsqlStringTypeMapping The base class for mapping Npgsql-specific string types. It configures parameters with the NpgsqlDbType provider-specific type enum. NpgsqlTidTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimeTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimeTzTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimeTzTypeMapping.JsonTimeTzReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimestampTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimestampTypeMapping.NpgsqlJsonTimestampReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimestampTzTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeReaderWriter This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTsQueryTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTsRankingNormalizationTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTsVectorTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTypeMapping The base class for mapping Npgsql-specific types. It configures parameters with the NpgsqlDbType provider-specific type enum. NpgsqlUIntTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlULongTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlVarbitTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Interfaces INpgsqlTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator.html",
    "title": "Class NpgsqlDatabaseCreator | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseCreator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object RelationalDatabaseCreator NpgsqlDatabaseCreator Implements IRelationalDatabaseCreator IDatabaseCreator Inherited Members RelationalDatabaseCreator.GetCreateTablesCommands(MigrationsSqlGenerationOptions) RelationalDatabaseCreator.EnsureDeleted() RelationalDatabaseCreator.EnsureDeletedAsync(CancellationToken) RelationalDatabaseCreator.EnsureCreated() RelationalDatabaseCreator.EnsureCreatedAsync(CancellationToken) RelationalDatabaseCreator.GenerateCreateScript() RelationalDatabaseCreator.CanConnect() RelationalDatabaseCreator.CanConnectAsync(CancellationToken) RelationalDatabaseCreator.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDatabaseCreator : RelationalDatabaseCreator, IRelationalDatabaseCreator, IDatabaseCreator Constructors | Edit this page View Source NpgsqlDatabaseCreator(RelationalDatabaseCreatorDependencies, INpgsqlRelationalConnection, IRawSqlCommandBuilder) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder) Parameters Type Name Description RelationalDatabaseCreatorDependencies dependencies INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder Properties | Edit this page View Source RetryDelay This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual TimeSpan RetryDelay { get; set; } Property Value Type Description TimeSpan | Edit this page View Source RetryTimeout This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual TimeSpan RetryTimeout { get; set; } Property Value Type Description TimeSpan Methods | Edit this page View Source Create() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void Create() Overrides RelationalDatabaseCreator.Create() | Edit this page View Source CreateAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Task CreateAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task Overrides RelationalDatabaseCreator.CreateAsync(CancellationToken) | Edit this page View Source CreateTables() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void CreateTables() Overrides RelationalDatabaseCreator.CreateTables() | Edit this page View Source CreateTablesAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Task CreateTablesAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task Overrides RelationalDatabaseCreator.CreateTablesAsync(CancellationToken) | Edit this page View Source Delete() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void Delete() Overrides RelationalDatabaseCreator.Delete() | Edit this page View Source DeleteAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Task DeleteAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task Overrides RelationalDatabaseCreator.DeleteAsync(CancellationToken) | Edit this page View Source Exists() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool Exists() Returns Type Description bool Overrides RelationalDatabaseCreator.Exists() | Edit this page View Source ExistsAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Task<bool> ExistsAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task<bool> Overrides RelationalDatabaseCreator.ExistsAsync(CancellationToken) | Edit this page View Source HasTables() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override bool HasTables() Returns Type Description bool Overrides RelationalDatabaseCreator.HasTables() | Edit this page View Source HasTablesAsync(CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Task<bool> HasTablesAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task<bool> Overrides RelationalDatabaseCreator.HasTablesAsync(CancellationToken) Implements IRelationalDatabaseCreator IDatabaseCreator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.html",
    "title": "Class NpgsqlExecutionStrategy | Npgsql Documentation",
    "keywords": "Class NpgsqlExecutionStrategy This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlExecutionStrategy Implements IExecutionStrategy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlExecutionStrategy : IExecutionStrategy Constructors | Edit this page View Source NpgsqlExecutionStrategy(ExecutionStrategyDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlExecutionStrategy(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Properties | Edit this page View Source RetriesOnFailure This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual bool RetriesOnFailure { get; } Property Value Type Description bool Methods | Edit this page View Source ExecuteAsync<TState, TResult>(TState, Func<DbContext, TState, CancellationToken, Task<TResult>>, Func<DbContext, TState, CancellationToken, Task<ExecutionResult<TResult>>>?, CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual Task<TResult> ExecuteAsync<TState, TResult>(TState state, Func<DbContext, TState, CancellationToken, Task<TResult>> operation, Func<DbContext, TState, CancellationToken, Task<ExecutionResult<TResult>>>? verifySucceeded, CancellationToken cancellationToken) Parameters Type Name Description TState state Func<DbContext, TState, CancellationToken, Task<TResult>> operation Func<DbContext, TState, CancellationToken, Task<ExecutionResult<TResult>>> verifySucceeded CancellationToken cancellationToken Returns Type Description Task<TResult> Type Parameters Name Description TState TResult | Edit this page View Source Execute<TState, TResult>(TState, Func<DbContext, TState, TResult>, Func<DbContext, TState, ExecutionResult<TResult>>?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual TResult Execute<TState, TResult>(TState state, Func<DbContext, TState, TResult> operation, Func<DbContext, TState, ExecutionResult<TResult>>? verifySucceeded) Parameters Type Name Description TState state Func<DbContext, TState, TResult> operation Func<DbContext, TState, ExecutionResult<TResult>> verifySucceeded Returns Type Description TResult Type Parameters Name Description TState TResult Implements IExecutionStrategy"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategyFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategyFactory.html",
    "title": "Class NpgsqlExecutionStrategyFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlExecutionStrategyFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object RelationalExecutionStrategyFactory NpgsqlExecutionStrategyFactory Implements IExecutionStrategyFactory Inherited Members RelationalExecutionStrategyFactory.Create() RelationalExecutionStrategyFactory.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlExecutionStrategyFactory : RelationalExecutionStrategyFactory, IExecutionStrategyFactory Constructors | Edit this page View Source NpgsqlExecutionStrategyFactory(ExecutionStrategyDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlExecutionStrategyFactory(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Methods | Edit this page View Source CreateDefaultStrategy(ExecutionStrategyDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Returns Type Description IExecutionStrategy Overrides RelationalExecutionStrategyFactory.CreateDefaultStrategy(ExecutionStrategyDependencies) Implements IExecutionStrategyFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlGeometryTypeMapping-1.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlGeometryTypeMapping-1.html",
    "title": "Class NpgsqlGeometryTypeMapping<TGeometry> | Npgsql Documentation",
    "keywords": "Class NpgsqlGeometryTypeMapping<TGeometry> This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping RelationalGeometryTypeMapping<TGeometry, TGeometry> NpgsqlGeometryTypeMapping<TGeometry> Implements INpgsqlTypeMapping Inherited Members RelationalGeometryTypeMapping<TGeometry, TGeometry>.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalGeometryTypeMapping<TGeometry, TGeometry>.CustomizeDataReaderExpression(Expression) RelationalGeometryTypeMapping<TGeometry, TGeometry>.GenerateCodeLiteral(object) RelationalGeometryTypeMapping<TGeometry, TGeometry>.AsText(object) RelationalGeometryTypeMapping<TGeometry, TGeometry>.GetSrid(object) RelationalGeometryTypeMapping<TGeometry, TGeometry>.SpatialConverter RelationalGeometryTypeMapping<TGeometry, TGeometry>.WktReaderType RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithStoreTypeAndSize(string, int?) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.GenerateCodeLiteral(object) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlGeometryTypeMapping<TGeometry> : RelationalGeometryTypeMapping<TGeometry, TGeometry>, INpgsqlTypeMapping Type Parameters Name Description TGeometry Constructors | Edit this page View Source NpgsqlGeometryTypeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlGeometryTypeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters | Edit this page View Source NpgsqlGeometryTypeMapping(string, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlGeometryTypeMapping(string storeType, bool isGeography) Parameters Type Name Description string storeType bool isGeography Properties | Edit this page View Source NpgsqlDbType The database type used by Npgsql. Declaration public virtual NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType | Edit this page View Source WktReaderType This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Type WktReaderType { get; } Property Value Type Description Type Overrides RelationalGeometryTypeMapping<TGeometry, TGeometry>.WktReaderType Methods | Edit this page View Source AsText(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string AsText(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalGeometryTypeMapping<TGeometry, TGeometry>.AsText(object) | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source ConfigureParameter(DbParameter) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description DbParameter parameter Overrides RelationalTypeMapping.ConfigureParameter(DbParameter) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source GetSrid(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override int GetSrid(object value) Parameters Type Name Description object value Returns Type Description int Overrides RelationalGeometryTypeMapping<TGeometry, TGeometry>.GetSrid(object) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlJsonGeometryWktReaderWriter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlJsonGeometryWktReaderWriter.html",
    "title": "Class NpgsqlJsonGeometryWktReaderWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonGeometryWktReaderWriter Reads and writes JSON using the well-known-text format for NetTopologySuite.Geometries.Geometry values. Inheritance object JsonValueReaderWriter JsonValueReaderWriter<Geometry> NpgsqlJsonGeometryWktReaderWriter Inherited Members JsonValueReaderWriter<Geometry>.FromJson(ref Utf8JsonReaderManager, object) JsonValueReaderWriter<Geometry>.ToJson(Utf8JsonWriter, object) JsonValueReaderWriter<Geometry>.ValueType JsonValueReaderWriter.FromJsonString(string, object) JsonValueReaderWriter.ToJsonString(object) JsonValueReaderWriter.CreateFromType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public sealed class NpgsqlJsonGeometryWktReaderWriter : JsonValueReaderWriter<Geometry> Properties | Edit this page View Source Instance The singleton instance of this stateless reader/writer. Declaration public static NpgsqlJsonGeometryWktReaderWriter Instance { get; } Property Value Type Description NpgsqlJsonGeometryWktReaderWriter Methods | Edit this page View Source FromJsonTyped(ref Utf8JsonReaderManager, object?) Reads the value from JSON. Declaration public override Geometry FromJsonTyped(ref Utf8JsonReaderManager manager, object? existingObject = null) Parameters Type Name Description Utf8JsonReaderManager manager The Utf8JsonReaderManager for the JSON being read. object existingObject Can be used to update an existing object, rather than create a new one. Returns Type Description Geometry The read value. Overrides JsonValueReaderWriter<Geometry>.FromJsonTyped(ref Utf8JsonReaderManager, object) Remarks The CurrentReader is at the node that contains the value to be read. The value should be read as appropriate from the JSON, and then further converted as necessary. Nulls are handled externally to this reader. That is, this method will never be called if the JSON value is \"null\". In most cases, the value is represented in the JSON document as a simple property value--e.g. a number, boolean, or string. However, it could be an array or sub-document. In this case, the Utf8JsonReaderManager should be used to parse the JSON as appropriate. | Edit this page View Source ToJsonTyped(Utf8JsonWriter, Geometry) Writes the value to JSON. Declaration public override void ToJsonTyped(Utf8JsonWriter writer, Geometry value) Parameters Type Name Description Utf8JsonWriter writer The Utf8JsonWriter into which the value should be written. Geometry value The value to write. Overrides JsonValueReaderWriter<Geometry>.ToJsonTyped(Utf8JsonWriter, Geometry)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNetTopologySuiteTypeMappingSourcePlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNetTopologySuiteTypeMappingSourcePlugin.html",
    "title": "Class NpgsqlNetTopologySuiteTypeMappingSourcePlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteTypeMappingSourcePlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNetTopologySuiteTypeMappingSourcePlugin Implements IRelationalTypeMappingSourcePlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteTypeMappingSourcePlugin : IRelationalTypeMappingSourcePlugin Constructors | Edit this page View Source NpgsqlNetTopologySuiteTypeMappingSourcePlugin(INpgsqlNetTopologySuiteOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlNetTopologySuiteTypeMappingSourcePlugin(INpgsqlNetTopologySuiteOptions options) Parameters Type Name Description INpgsqlNetTopologySuiteOptions options Methods | Edit this page View Source FindMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual RelationalTypeMapping? FindMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Edit this page View Source TryParseStoreTypeName(string, out string, out bool, out Type?, out int, out Ordinates) Given a PostGIS store type name (e.g. GEOMETRY, GEOGRAPHY(Point, 4326), GEOMETRY(LineStringM, 4326)), attempts to parse it and return its components. Declaration public static bool TryParseStoreTypeName(string storeTypeName, out string subtypeName, out bool isGeography, out Type? clrType, out int srid, out Ordinates ordinates) Parameters Type Name Description string storeTypeName string subtypeName bool isGeography Type clrType int srid Ordinates ordinates Returns Type Description bool Implements IRelationalTypeMappingSourcePlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNodaTimeTypeMappingSourcePlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNodaTimeTypeMappingSourcePlugin.html",
    "title": "Class NpgsqlNodaTimeTypeMappingSourcePlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeTypeMappingSourcePlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlNodaTimeTypeMappingSourcePlugin Implements IRelationalTypeMappingSourcePlugin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeTypeMappingSourcePlugin : IRelationalTypeMappingSourcePlugin Constructors | Edit this page View Source NpgsqlNodaTimeTypeMappingSourcePlugin(ISqlGenerationHelper) Constructs an instance of the NpgsqlNodaTimeTypeMappingSourcePlugin class. Declaration public NpgsqlNodaTimeTypeMappingSourcePlugin(ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description ISqlGenerationHelper sqlGenerationHelper Properties | Edit this page View Source ClrTypeMappings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ConcurrentDictionary<Type, RelationalTypeMapping> ClrTypeMappings { get; } Property Value Type Description ConcurrentDictionary<Type, RelationalTypeMapping> | Edit this page View Source StoreTypeMappings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ConcurrentDictionary<string, RelationalTypeMapping[]> StoreTypeMappings { get; } Property Value Type Description ConcurrentDictionary<string, RelationalTypeMapping[]> Methods | Edit this page View Source FindBaseMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindBaseMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Edit this page View Source FindMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual RelationalTypeMapping? FindMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping Implements IRelationalTypeMappingSourcePlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlRelationalConnection.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlRelationalConnection.html",
    "title": "Class NpgsqlRelationalConnection | Npgsql Documentation",
    "keywords": "Class NpgsqlRelationalConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object RelationalConnection NpgsqlRelationalConnection Implements ITransactionEnlistmentManager INpgsqlRelationalConnection IRelationalConnection IRelationalTransactionManager IDbContextTransactionManager IResettableService IDisposable IAsyncDisposable Inherited Members RelationalConnection.GetValidatedConnectionString() RelationalConnection.SetDbConnection(DbConnection, bool) RelationalConnection.EnlistTransaction(Transaction) RelationalConnection.ConnectionEnlistTransaction(Transaction) RelationalConnection.RentCommand() RelationalConnection.ReturnCommand(IRelationalCommand) RelationalConnection.BeginTransaction() RelationalConnection.BeginTransactionAsync(CancellationToken) RelationalConnection.BeginTransaction(IsolationLevel) RelationalConnection.ConnectionBeginTransaction(IsolationLevel) RelationalConnection.BeginTransactionAsync(IsolationLevel, CancellationToken) RelationalConnection.ConnectionBeginTransactionAsync(IsolationLevel, CancellationToken) RelationalConnection.UseTransaction(DbTransaction) RelationalConnection.UseTransaction(DbTransaction, Guid) RelationalConnection.UseTransactionAsync(DbTransaction, CancellationToken) RelationalConnection.UseTransactionAsync(DbTransaction, Guid, CancellationToken) RelationalConnection.CommitTransaction() RelationalConnection.CommitTransactionAsync(CancellationToken) RelationalConnection.RollbackTransaction() RelationalConnection.RollbackTransactionAsync(CancellationToken) RelationalConnection.Open(bool) RelationalConnection.OpenAsync(CancellationToken, bool) RelationalConnection.OpenDbConnection(bool) RelationalConnection.OpenDbConnectionAsync(bool, CancellationToken) RelationalConnection.Close() RelationalConnection.CloseDbConnection() RelationalConnection.CloseAsync() RelationalConnection.CloseDbConnectionAsync() RelationalConnection.Dispose() RelationalConnection.DisposeAsync() RelationalConnection.ResetState(bool) RelationalConnection.ResetStateAsync(bool) RelationalConnection.DisposeDbConnection() RelationalConnection.DisposeDbConnectionAsync() RelationalConnection.ConnectionId RelationalConnection.Context RelationalConnection.Dependencies RelationalConnection.CurrentTransaction RelationalConnection.EnlistedTransaction RelationalConnection.CommandTimeout object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRelationalConnection : RelationalConnection, ITransactionEnlistmentManager, INpgsqlRelationalConnection, IRelationalConnection, IRelationalTransactionManager, IDbContextTransactionManager, IResettableService, IDisposable, IAsyncDisposable Constructors | Edit this page View Source NpgsqlRelationalConnection(RelationalConnectionDependencies, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlRelationalConnection(RelationalConnectionDependencies dependencies, INpgsqlSingletonOptions options) Parameters Type Name Description RelationalConnectionDependencies dependencies INpgsqlSingletonOptions options | Edit this page View Source NpgsqlRelationalConnection(RelationalConnectionDependencies, DbDataSource?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected NpgsqlRelationalConnection(RelationalConnectionDependencies dependencies, DbDataSource? dataSource) Parameters Type Name Description RelationalConnectionDependencies dependencies DbDataSource dataSource Properties | Edit this page View Source ConnectionString This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string? ConnectionString { get; set; } Property Value Type Description string Overrides RelationalConnection.ConnectionString | Edit this page View Source CurrentAmbientTransaction This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Transaction? CurrentAmbientTransaction { get; } Property Value Type Description Transaction Overrides RelationalConnection.CurrentAmbientTransaction | Edit this page View Source DbConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlConnection DbConnection { get; set; } Property Value Type Description NpgsqlConnection | Edit this page View Source DbDataSource This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual DbDataSource? DbDataSource { get; set; } Property Value Type Description DbDataSource | Edit this page View Source SupportsAmbientTransactions Indicates whether the store connection supports ambient transactions Declaration protected override bool SupportsAmbientTransactions { get; } Property Value Type Description bool Overrides RelationalConnection.SupportsAmbientTransactions Methods | Edit this page View Source CloneWith(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual NpgsqlRelationalConnection CloneWith(string connectionString) Parameters Type Name Description string connectionString Returns Type Description NpgsqlRelationalConnection | Edit this page View Source CreateAdminConnection() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual INpgsqlRelationalConnection CreateAdminConnection() Returns Type Description INpgsqlRelationalConnection | Edit this page View Source CreateDbConnection() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override DbConnection CreateDbConnection() Returns Type Description DbConnection Overrides RelationalConnection.CreateDbConnection() Implements ITransactionEnlistmentManager INpgsqlRelationalConnection IRelationalConnection IRelationalTransactionManager IDbContextTransactionManager IResettableService IDisposable IAsyncDisposable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlSqlGenerationHelper.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlSqlGenerationHelper.html",
    "title": "Class NpgsqlSqlGenerationHelper | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlGenerationHelper This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object RelationalSqlGenerationHelper NpgsqlSqlGenerationHelper Implements ISqlGenerationHelper Inherited Members RelationalSqlGenerationHelper.GenerateParameterName(string) RelationalSqlGenerationHelper.GenerateParameterName(StringBuilder, string) RelationalSqlGenerationHelper.GenerateParameterNamePlaceholder(string) RelationalSqlGenerationHelper.GenerateParameterNamePlaceholder(StringBuilder, string) RelationalSqlGenerationHelper.EscapeIdentifier(string) RelationalSqlGenerationHelper.EscapeIdentifier(StringBuilder, string) RelationalSqlGenerationHelper.DelimitIdentifier(string, string) RelationalSqlGenerationHelper.DelimitIdentifier(StringBuilder, string, string) RelationalSqlGenerationHelper.GenerateComment(string) RelationalSqlGenerationHelper.GenerateCreateSavepointStatement(string) RelationalSqlGenerationHelper.GenerateRollbackToSavepointStatement(string) RelationalSqlGenerationHelper.GenerateReleaseSavepointStatement(string) RelationalSqlGenerationHelper.Dependencies RelationalSqlGenerationHelper.StatementTerminator RelationalSqlGenerationHelper.BatchTerminator RelationalSqlGenerationHelper.StartTransactionStatement RelationalSqlGenerationHelper.CommitTransactionStatement RelationalSqlGenerationHelper.SingleLineCommentToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlGenerationHelper : RelationalSqlGenerationHelper, ISqlGenerationHelper Constructors | Edit this page View Source NpgsqlSqlGenerationHelper(RelationalSqlGenerationHelperDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies) Parameters Type Name Description RelationalSqlGenerationHelperDependencies dependencies Methods | Edit this page View Source DelimitIdentifier(string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override string DelimitIdentifier(string identifier) Parameters Type Name Description string identifier Returns Type Description string Overrides RelationalSqlGenerationHelper.DelimitIdentifier(string) | Edit this page View Source DelimitIdentifier(StringBuilder, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void DelimitIdentifier(StringBuilder builder, string identifier) Parameters Type Name Description StringBuilder builder string identifier Overrides RelationalSqlGenerationHelper.DelimitIdentifier(StringBuilder, string) Implements ISqlGenerationHelper"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTransientExceptionDetector.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTransientExceptionDetector.html",
    "title": "Class NpgsqlTransientExceptionDetector | Npgsql Documentation",
    "keywords": "Class NpgsqlTransientExceptionDetector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlTransientExceptionDetector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTransientExceptionDetector Methods | Edit this page View Source ShouldRetryOn(Exception?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static bool ShouldRetryOn(Exception? ex) Parameters Type Name Description Exception ex Returns Type Description bool"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTypeMappingSource.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTypeMappingSource.html",
    "title": "Class NpgsqlTypeMappingSource | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeMappingSource This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object TypeMappingSourceBase RelationalTypeMappingSource NpgsqlTypeMappingSource Implements IRelationalTypeMappingSource ITypeMappingSource Inherited Members RelationalTypeMappingSource.FindMapping(in TypeMappingInfo) RelationalTypeMappingSource.FindMapping(IProperty) RelationalTypeMappingSource.FindMapping(IElementType) RelationalTypeMappingSource.FindMapping(Type) RelationalTypeMappingSource.FindMapping(Type, IModel, CoreTypeMapping) RelationalTypeMappingSource.FindMapping(MemberInfo) RelationalTypeMappingSource.FindMapping(string) RelationalTypeMappingSource.FindMapping(Type, string, bool, bool?, int?, bool?, bool?, int?, int?) RelationalTypeMappingSource.RelationalDependencies TypeMappingSourceBase.ValidateMapping(CoreTypeMapping, IProperty) TypeMappingSourceBase.TryFindJsonCollectionMapping(TypeMappingInfo, Type, Type, ref CoreTypeMapping, out ValueComparer, out JsonValueReaderWriter) TypeMappingSourceBase.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTypeMappingSource : RelationalTypeMappingSource, IRelationalTypeMappingSource, ITypeMappingSource Constructors | Edit this page View Source NpgsqlTypeMappingSource(TypeMappingSourceDependencies, RelationalTypeMappingSourceDependencies, ISqlGenerationHelper, INpgsqlSingletonOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper, INpgsqlSingletonOptions options) Parameters Type Name Description TypeMappingSourceDependencies dependencies RelationalTypeMappingSourceDependencies relationalDependencies ISqlGenerationHelper sqlGenerationHelper INpgsqlSingletonOptions options Fields | Edit this page View Source EStringTypeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public readonly NpgsqlEStringTypeMapping EStringTypeMapping Field Value Type Description NpgsqlEStringTypeMapping Properties | Edit this page View Source ClrTypeMappings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual ConcurrentDictionary<Type, RelationalTypeMapping> ClrTypeMappings { get; } Property Value Type Description ConcurrentDictionary<Type, RelationalTypeMapping> | Edit this page View Source StoreTypeMappings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual ConcurrentDictionary<string, RelationalTypeMapping[]> StoreTypeMappings { get; } Property Value Type Description ConcurrentDictionary<string, RelationalTypeMapping[]> Methods | Edit this page View Source FindBaseMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindBaseMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Edit this page View Source FindCollectionMapping(RelationalTypeMappingInfo, Type, Type?, CoreTypeMapping?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping? FindCollectionMapping(RelationalTypeMappingInfo info, Type modelType, Type? providerType, CoreTypeMapping? elementMapping) Parameters Type Name Description RelationalTypeMappingInfo info Type modelType Type providerType CoreTypeMapping elementMapping Returns Type Description RelationalTypeMapping Overrides RelationalTypeMappingSource.FindCollectionMapping(RelationalTypeMappingInfo, Type, Type, CoreTypeMapping) | Edit this page View Source FindContainerMapping(Type, RelationalTypeMapping, IModel) Finds the mapping for a container given its CLR type and its containee's type mapping; this is used when inferring type mappings for arrays and ranges/multiranges. Declaration public virtual RelationalTypeMapping? FindContainerMapping(Type containerClrType, RelationalTypeMapping containeeTypeMapping, IModel model) Parameters Type Name Description Type containerClrType RelationalTypeMapping containeeTypeMapping IModel model Returns Type Description RelationalTypeMapping | Edit this page View Source FindMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping? FindMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping Overrides RelationalTypeMappingSource.FindMapping(in RelationalTypeMappingInfo) | Edit this page View Source FindRowValueMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindRowValueMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Edit this page View Source FindUserRangeMapping(in RelationalTypeMappingInfo) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual RelationalTypeMapping? FindUserRangeMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Edit this page View Source LoadUserDefinedTypeMappings(ISqlGenerationHelper, NpgsqlDataSource?) To be used in case user-defined mappings are added late, after this TypeMappingSource has already been initialized. This is basically only for test usage. Declaration public virtual void LoadUserDefinedTypeMappings(ISqlGenerationHelper sqlGenerationHelper, NpgsqlDataSource? dataSource) Parameters Type Name Description ISqlGenerationHelper sqlGenerationHelper NpgsqlDataSource dataSource | Edit this page View Source ParseStoreTypeName(string?, ref bool?, ref int?, ref int?, ref int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string? ParseStoreTypeName(string? storeTypeName, ref bool? unicode, ref int? size, ref int? precision, ref int? scale) Parameters Type Name Description string storeTypeName bool? unicode int? size int? precision int? scale Returns Type Description string Overrides RelationalTypeMappingSource.ParseStoreTypeName(string, ref bool?, ref int?, ref int?, ref int?) | Edit this page View Source SetupEnumMappings(ISqlGenerationHelper, NpgsqlDataSource?) Gets all global enum mappings from the ADO.NET layer and creates mappings for them Declaration protected virtual void SetupEnumMappings(ISqlGenerationHelper sqlGenerationHelper, NpgsqlDataSource? dataSource) Parameters Type Name Description ISqlGenerationHelper sqlGenerationHelper NpgsqlDataSource dataSource Implements IRelationalTypeMappingSource ITypeMappingSource"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.PeriodIntervalMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.PeriodIntervalMapping.html",
    "title": "Class PeriodIntervalMapping | Npgsql Documentation",
    "keywords": "Class PeriodIntervalMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping PeriodIntervalMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class PeriodIntervalMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source PeriodIntervalMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public PeriodIntervalMapping() | Edit this page View Source PeriodIntervalMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected PeriodIntervalMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static PeriodIntervalMapping Default { get; } Property Value Type Description PeriodIntervalMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeMapping.html",
    "title": "Class TimeMapping | Npgsql Documentation",
    "keywords": "Class TimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping TimeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source TimeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimeMapping() | Edit this page View Source TimeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static TimeMapping Default { get; } Property Value Type Description TimeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeTzMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeTzMapping.html",
    "title": "Class TimeTzMapping | Npgsql Documentation",
    "keywords": "Class TimeTzMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping TimeTzMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimeTzMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source TimeTzMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimeTzMapping() | Edit this page View Source TimeTzMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimeTzMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static TimeTzMapping Default { get; } Property Value Type Description TimeTzMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampLocalDateTimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampLocalDateTimeMapping.html",
    "title": "Class TimestampLocalDateTimeMapping | Npgsql Documentation",
    "keywords": "Class TimestampLocalDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping TimestampLocalDateTimeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampLocalDateTimeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source TimestampLocalDateTimeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimestampLocalDateTimeMapping() | Edit this page View Source TimestampLocalDateTimeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimestampLocalDateTimeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static TimestampLocalDateTimeMapping Default { get; } Property Value Type Description TimestampLocalDateTimeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzInstantMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzInstantMapping.html",
    "title": "Class TimestampTzInstantMapping | Npgsql Documentation",
    "keywords": "Class TimestampTzInstantMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping TimestampTzInstantMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampTzInstantMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source TimestampTzInstantMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimestampTzInstantMapping() | Edit this page View Source TimestampTzInstantMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimestampTzInstantMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static TimestampTzInstantMapping Default { get; } Property Value Type Description TimestampTzInstantMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzOffsetDateTimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzOffsetDateTimeMapping.html",
    "title": "Class TimestampTzOffsetDateTimeMapping | Npgsql Documentation",
    "keywords": "Class TimestampTzOffsetDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping TimestampTzOffsetDateTimeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampTzOffsetDateTimeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source TimestampTzOffsetDateTimeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimestampTzOffsetDateTimeMapping() | Edit this page View Source TimestampTzOffsetDateTimeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimestampTzOffsetDateTimeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static TimestampTzOffsetDateTimeMapping Default { get; } Property Value Type Description TimestampTzOffsetDateTimeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzZonedDateTimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzZonedDateTimeMapping.html",
    "title": "Class TimestampTzZonedDateTimeMapping | Npgsql Documentation",
    "keywords": "Class TimestampTzZonedDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object CoreTypeMapping RelationalTypeMapping NpgsqlTypeMapping TimestampTzZonedDateTimeMapping Implements INpgsqlTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) NpgsqlTypeMapping.GenerateEmbeddedSqlLiteral(object) NpgsqlTypeMapping.GenerateEmbeddedProviderValueSqlLiteral(object) RelationalTypeMapping.NullMapping RelationalTypeMapping.Clone(CoreTypeMapping.CoreTypeMappingParameters) RelationalTypeMapping.WithPrecisionAndScale(int?, int?) RelationalTypeMapping.WithComposedConverter(ValueConverter, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) RelationalTypeMapping.WithTypeMappingInfo(in RelationalTypeMappingInfo) RelationalTypeMapping.Clone(in RelationalTypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter, StoreTypePostfix?) RelationalTypeMapping.CreateParameter(DbCommand, string, object, bool?, ParameterDirection) RelationalTypeMapping.GenerateSqlLiteral(object) RelationalTypeMapping.GenerateProviderValueSqlLiteral(object) RelationalTypeMapping.GetDataReaderMethod() RelationalTypeMapping.GetDataReaderMethod(Type) RelationalTypeMapping.CustomizeDataReaderExpression(Expression) RelationalTypeMapping.Parameters RelationalTypeMapping.StoreTypePostfix RelationalTypeMapping.StoreType RelationalTypeMapping.StoreTypeNameBase RelationalTypeMapping.DbType RelationalTypeMapping.IsUnicode RelationalTypeMapping.Size RelationalTypeMapping.Precision RelationalTypeMapping.Scale RelationalTypeMapping.IsFixedLength RelationalTypeMapping.SqlLiteralFormatString CoreTypeMapping.Clone(in TypeMappingInfo?, Type, ValueConverter, ValueComparer, ValueComparer, ValueComparer, CoreTypeMapping, JsonValueReaderWriter) CoreTypeMapping.ClrType CoreTypeMapping.Converter CoreTypeMapping.ValueGeneratorFactory CoreTypeMapping.Comparer CoreTypeMapping.KeyComparer CoreTypeMapping.ProviderValueComparer CoreTypeMapping.ElementTypeMapping CoreTypeMapping.JsonValueReaderWriter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampTzZonedDateTimeMapping : NpgsqlTypeMapping, INpgsqlTypeMapping Constructors | Edit this page View Source TimestampTzZonedDateTimeMapping() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public TimestampTzZonedDateTimeMapping() | Edit this page View Source TimestampTzZonedDateTimeMapping(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected TimestampTzZonedDateTimeMapping(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Properties | Edit this page View Source Default This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public static TimestampTzZonedDateTimeMapping Default { get; } Property Value Type Description TimestampTzZonedDateTimeMapping Methods | Edit this page View Source Clone(RelationalTypeMappingParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override RelationalTypeMapping Clone(RelationalTypeMapping.RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.Clone(RelationalTypeMapping.RelationalTypeMappingParameters) | Edit this page View Source GenerateCodeLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description object value Returns Type Description Expression Overrides CoreTypeMapping.GenerateCodeLiteral(object) | Edit this page View Source GenerateEmbeddedNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateEmbeddedNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides NpgsqlTypeMapping.GenerateEmbeddedNonNullSqlLiteral(object) | Edit this page View Source GenerateNonNullSqlLiteral(object) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description object value Returns Type Description string Overrides RelationalTypeMapping.GenerateNonNullSqlLiteral(object) | Edit this page View Source ProcessStoreType(RelationalTypeMappingParameters, string, string) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override string ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters parameters, string storeType, string _) Parameters Type Name Description RelationalTypeMapping.RelationalTypeMappingParameters parameters string storeType string _ Returns Type Description string Overrides RelationalTypeMapping.ProcessStoreType(RelationalTypeMapping.RelationalTypeMappingParameters, string, string) | Edit this page View Source WithStoreTypeAndSize(string, int?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override RelationalTypeMapping WithStoreTypeAndSize(string storeType, int? size) Parameters Type Name Description string storeType int? size Returns Type Description RelationalTypeMapping Overrides RelationalTypeMapping.WithStoreTypeAndSize(string, int?) Implements INpgsqlTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Classes DateIntervalMultirangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. DateIntervalRangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. DateMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. DateTimeZoneMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. DurationIntervalMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. IntervalMultirangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. IntervalRangeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. LegacyTimestampInstantMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlDatabaseCreator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlExecutionStrategy This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlExecutionStrategyFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlGeometryTypeMapping<TGeometry> This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlJsonGeometryWktReaderWriter Reads and writes JSON using the well-known-text format for NetTopologySuite.Geometries.Geometry values. NpgsqlNetTopologySuiteTypeMappingSourcePlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlNodaTimeTypeMappingSourcePlugin This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlRelationalConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlSqlGenerationHelper This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTransientExceptionDetector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlTypeMappingSource This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. PeriodIntervalMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimeTzMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimestampLocalDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimestampTzInstantMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimestampTzOffsetDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. TimestampTzZonedDateTimeMapping This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Interfaces INpgsqlRelationalConnection This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlArrayConverter-3.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlArrayConverter-3.html",
    "title": "Class NpgsqlArrayConverter<TModelCollection, TConcreteModelCollection, TProviderCollection> | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayConverter<TModelCollection, TConcreteModelCollection, TProviderCollection> A value converter that can convert between array types; accepts an optional ValueConverter for the element, but can be used without one to convert e.g. from a list to an array. Inheritance object ValueConverter ValueConverter<TModelCollection, TProviderCollection> NpgsqlArrayConverter<TModelCollection, TConcreteModelCollection, TProviderCollection> Inherited Members ValueConverter<TModelCollection, TProviderCollection>.ConvertToProvider ValueConverter<TModelCollection, TProviderCollection>.ConvertFromProvider ValueConverter<TModelCollection, TProviderCollection>.ConvertToProviderTyped ValueConverter<TModelCollection, TProviderCollection>.ConvertFromProviderTyped ValueConverter<TModelCollection, TProviderCollection>.ConvertToProviderExpression ValueConverter<TModelCollection, TProviderCollection>.ConvertFromProviderExpression ValueConverter<TModelCollection, TProviderCollection>.ModelClrType ValueConverter<TModelCollection, TProviderCollection>.ProviderClrType ValueConverter.CheckTypeSupported(Type, Type, params Type[]) ValueConverter.ComposeWith(ValueConverter) ValueConverter.ConvertToProvider ValueConverter.ConvertFromProvider ValueConverter.ConvertToProviderExpression ValueConverter.ConvertFromProviderExpression ValueConverter.ModelClrType ValueConverter.ProviderClrType ValueConverter.MappingHints ValueConverter.ConvertsNulls object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayConverter<TModelCollection, TConcreteModelCollection, TProviderCollection> : ValueConverter<TModelCollection, TProviderCollection> where TModelCollection : IEnumerable where TConcreteModelCollection : IEnumerable where TProviderCollection : IEnumerable Type Parameters Name Description TModelCollection TConcreteModelCollection TProviderCollection Constructors | Edit this page View Source NpgsqlArrayConverter() Constructs a new instance of NpgsqlArrayConverter<TModelCollection, TConcreteModelCollection, TProviderCollection>. Declaration public NpgsqlArrayConverter() | Edit this page View Source NpgsqlArrayConverter(ValueConverter?) Constructs a new instance of NpgsqlArrayConverter<TModelCollection, TConcreteModelCollection, TProviderCollection>. Declaration public NpgsqlArrayConverter(ValueConverter? elementConverter) Parameters Type Name Description ValueConverter elementConverter Properties | Edit this page View Source ElementConverter The value converter for the element type of the array. Declaration public virtual ValueConverter? ElementConverter { get; } Property Value Type Description ValueConverter"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion Classes NpgsqlArrayConverter<TModelCollection, TConcreteModelCollection, TProviderCollection> A value converter that can convert between array types; accepts an optional ValueConverter for the element, but can be used without one to convert e.g. from a list to an array."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommand.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommand.html",
    "title": "Class NpgsqlModificationCommand | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommand This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ModificationCommand NpgsqlModificationCommand Implements IModificationCommand INonTrackedModificationCommand IReadOnlyModificationCommand Inherited Members ModificationCommand.AssertColumnsNotInitialized() ModificationCommand.AddEntry(IUpdateEntry, bool) ModificationCommand.AddColumnModification(in ColumnModificationParameters) ModificationCommand.CreateColumnModification(in ColumnModificationParameters) ModificationCommand.PropagateOutputParameters(DbParameterCollection, int) ModificationCommand.ToString() ModificationCommand.Table ModificationCommand.StoreStoredProcedure ModificationCommand.TableName ModificationCommand.Schema ModificationCommand.Entries ModificationCommand.EntityState ModificationCommand.RowsAffectedColumn ModificationCommand.ColumnModifications object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommand : ModificationCommand, IModificationCommand, INonTrackedModificationCommand, IReadOnlyModificationCommand Constructors | Edit this page View Source NpgsqlModificationCommand(in ModificationCommandParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlModificationCommand(in ModificationCommandParameters modificationCommandParameters) Parameters Type Name Description ModificationCommandParameters modificationCommandParameters | Edit this page View Source NpgsqlModificationCommand(in NonTrackedModificationCommandParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlModificationCommand(in NonTrackedModificationCommandParameters modificationCommandParameters) Parameters Type Name Description NonTrackedModificationCommandParameters modificationCommandParameters Methods | Edit this page View Source ProcessSinglePropertyJsonUpdate(ref ColumnModificationParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void ProcessSinglePropertyJsonUpdate(ref ColumnModificationParameters parameters) Parameters Type Name Description ColumnModificationParameters parameters Overrides ModificationCommand.ProcessSinglePropertyJsonUpdate(ref ColumnModificationParameters) | Edit this page View Source PropagateResults(RelationalDataReader) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void PropagateResults(RelationalDataReader relationalReader) Parameters Type Name Description RelationalDataReader relationalReader Overrides ModificationCommand.PropagateResults(RelationalDataReader) Implements IModificationCommand INonTrackedModificationCommand IReadOnlyModificationCommand"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch.html",
    "title": "Class NpgsqlModificationCommandBatch | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommandBatch The Npgsql-specific implementation for ModificationCommandBatch. Inheritance object ModificationCommandBatch ReaderModificationCommandBatch NpgsqlModificationCommandBatch Inherited Members ReaderModificationCommandBatch.TryAddCommand(IReadOnlyModificationCommand) ReaderModificationCommandBatch.RollbackLastCommand(IReadOnlyModificationCommand) ReaderModificationCommandBatch.SetRequiresTransaction(bool) ReaderModificationCommandBatch.IsValid() ReaderModificationCommandBatch.AddCommand(IReadOnlyModificationCommand) ReaderModificationCommandBatch.Complete(bool) ReaderModificationCommandBatch.AddParameters(IReadOnlyModificationCommand) ReaderModificationCommandBatch.Execute(IRelationalConnection) ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection, CancellationToken) ReaderModificationCommandBatch.Dependencies ReaderModificationCommandBatch.UpdateSqlGenerator ReaderModificationCommandBatch.RelationalCommandBuilder ReaderModificationCommandBatch.SqlBuilder ReaderModificationCommandBatch.ParameterValues ReaderModificationCommandBatch.ModificationCommands ReaderModificationCommandBatch.ResultSetMappings ReaderModificationCommandBatch.StoreCommand ReaderModificationCommandBatch.IsCommandTextEmpty ReaderModificationCommandBatch.RequiresTransaction ReaderModificationCommandBatch.AreMoreBatchesExpected object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommandBatch : ReaderModificationCommandBatch Remarks The usual ModificationCommandBatch implementation is AffectedCountModificationCommandBatch, which selects the number of rows modified via a SQL query. PostgreSQL actually has no way of selecting the modified row count. SQL defines GET DIAGNOSTICS which should provide this, but in PostgreSQL it's only available in PL/pgSQL. See http://www.postgresql.org/docs/9.4/static/unsupported-features-sql-standard.html, identifier F121-01. Instead, the affected row count can be accessed in the PostgreSQL protocol itself, which seems cleaner and more efficient anyway (no additional query). Constructors | Edit this page View Source NpgsqlModificationCommandBatch(ModificationCommandBatchFactoryDependencies, int) Constructs an instance of the NpgsqlModificationCommandBatch class. Declaration public NpgsqlModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, int maxBatchSize) Parameters Type Name Description ModificationCommandBatchFactoryDependencies dependencies int maxBatchSize Properties | Edit this page View Source MaxBatchSize The maximum number of ModificationCommand instances that can be added to a single batch; defaults to 1000. Declaration protected override int MaxBatchSize { get; } Property Value Type Description int Overrides ReaderModificationCommandBatch.MaxBatchSize Methods | Edit this page View Source AddParameter(IColumnModification) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void AddParameter(IColumnModification columnModification) Parameters Type Name Description IColumnModification columnModification Overrides ReaderModificationCommandBatch.AddParameter(IColumnModification) | Edit this page View Source Consume(RelationalDataReader) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override void Consume(RelationalDataReader reader) Parameters Type Name Description RelationalDataReader reader Overrides ReaderModificationCommandBatch.Consume(RelationalDataReader) | Edit this page View Source ConsumeAsync(RelationalDataReader, CancellationToken) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override Task ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken = default) Parameters Type Name Description RelationalDataReader reader CancellationToken cancellationToken Returns Type Description Task Overrides ReaderModificationCommandBatch.ConsumeAsync(RelationalDataReader, CancellationToken) | Edit this page View Source ThrowAggregateUpdateConcurrencyException(RelationalDataReader, int, int, int) Throws an exception indicating the command affected an unexpected number of rows. Declaration protected virtual void ThrowAggregateUpdateConcurrencyException(RelationalDataReader reader, int commandIndex, int expectedRowsAffected, int rowsAffected) Parameters Type Name Description RelationalDataReader reader The data reader. int commandIndex The ordinal of the command. int expectedRowsAffected The expected number of rows affected. int rowsAffected The actual number of rows affected. | Edit this page View Source ThrowAggregateUpdateConcurrencyExceptionAsync(RelationalDataReader, int, int, int, CancellationToken) Throws an exception indicating the command affected an unexpected number of rows. Declaration protected virtual Task ThrowAggregateUpdateConcurrencyExceptionAsync(RelationalDataReader reader, int commandIndex, int expectedRowsAffected, int rowsAffected, CancellationToken cancellationToken) Parameters Type Name Description RelationalDataReader reader The data reader. int commandIndex The ordinal of the command. int expectedRowsAffected The expected number of rows affected. int rowsAffected The actual number of rows affected. CancellationToken cancellationToken A CancellationToken to observe while waiting for the task to complete. Returns Type Description Task A task that represents the asynchronous operation. Exceptions Type Condition OperationCanceledException If the CancellationToken is canceled."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatchFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatchFactory.html",
    "title": "Class NpgsqlModificationCommandBatchFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommandBatchFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlModificationCommandBatchFactory Implements IModificationCommandBatchFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommandBatchFactory : IModificationCommandBatchFactory Constructors | Edit this page View Source NpgsqlModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies, IDbContextOptions) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies dependencies, IDbContextOptions options) Parameters Type Name Description ModificationCommandBatchFactoryDependencies dependencies IDbContextOptions options Methods | Edit this page View Source Create() This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ModificationCommandBatch Create() Returns Type Description ModificationCommandBatch Implements IModificationCommandBatchFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandFactory.html",
    "title": "Class NpgsqlModificationCommandFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommandFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object NpgsqlModificationCommandFactory Implements IModificationCommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommandFactory : IModificationCommandFactory Methods | Edit this page View Source CreateModificationCommand(in ModificationCommandParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual IModificationCommand CreateModificationCommand(in ModificationCommandParameters modificationCommandParameters) Parameters Type Name Description ModificationCommandParameters modificationCommandParameters Returns Type Description IModificationCommand | Edit this page View Source CreateNonTrackedModificationCommand(in NonTrackedModificationCommandParameters) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual INonTrackedModificationCommand CreateNonTrackedModificationCommand(in NonTrackedModificationCommandParameters modificationCommandParameters) Parameters Type Name Description NonTrackedModificationCommandParameters modificationCommandParameters Returns Type Description INonTrackedModificationCommand Implements IModificationCommandFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlUpdateSqlGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlUpdateSqlGenerator.html",
    "title": "Class NpgsqlUpdateSqlGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlUpdateSqlGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object UpdateSqlGenerator NpgsqlUpdateSqlGenerator Implements IUpdateSqlGenerator Inherited Members UpdateSqlGenerator.AppendInsertOperation(StringBuilder, IReadOnlyModificationCommand, int) UpdateSqlGenerator.AppendInsertReturningOperation(StringBuilder, IReadOnlyModificationCommand, int, out bool) UpdateSqlGenerator.AppendUpdateOperation(StringBuilder, IReadOnlyModificationCommand, int) UpdateSqlGenerator.AppendUpdateReturningOperation(StringBuilder, IReadOnlyModificationCommand, int, out bool) UpdateSqlGenerator.AppendDeleteOperation(StringBuilder, IReadOnlyModificationCommand, int) UpdateSqlGenerator.AppendDeleteReturningOperation(StringBuilder, IReadOnlyModificationCommand, int, out bool) UpdateSqlGenerator.AppendInsertCommand(StringBuilder, string, string, IReadOnlyList<IColumnModification>, IReadOnlyList<IColumnModification>) UpdateSqlGenerator.AppendUpdateCommand(StringBuilder, string, string, IReadOnlyList<IColumnModification>, IReadOnlyList<IColumnModification>, IReadOnlyList<IColumnModification>, bool) UpdateSqlGenerator.AppendDeleteCommand(StringBuilder, string, string, IReadOnlyList<IColumnModification>, IReadOnlyList<IColumnModification>, bool) UpdateSqlGenerator.AppendInsertCommandHeader(StringBuilder, string, string, IReadOnlyList<IColumnModification>) UpdateSqlGenerator.AppendDeleteCommandHeader(StringBuilder, string, string) UpdateSqlGenerator.AppendUpdateCommandHeader(StringBuilder, string, string, IReadOnlyList<IColumnModification>) UpdateSqlGenerator.AppendValuesHeader(StringBuilder, IReadOnlyList<IColumnModification>) UpdateSqlGenerator.AppendValues(StringBuilder, string, string, IReadOnlyList<IColumnModification>) UpdateSqlGenerator.AppendReturningClause(StringBuilder, IReadOnlyList<IColumnModification>, string) UpdateSqlGenerator.AppendWhereClause(StringBuilder, IReadOnlyList<IColumnModification>) UpdateSqlGenerator.AppendWhereCondition(StringBuilder, IColumnModification, bool) UpdateSqlGenerator.AppendBatchHeader(StringBuilder) UpdateSqlGenerator.PrependEnsureAutocommit(StringBuilder) UpdateSqlGenerator.GenerateNextSequenceValueOperation(string, string) UpdateSqlGenerator.AppendNextSequenceValueOperation(StringBuilder, string, string) UpdateSqlGenerator.GenerateObtainNextSequenceValueOperation(string, string) UpdateSqlGenerator.AppendSqlLiteral(StringBuilder, IColumnModification, string, string) UpdateSqlGenerator.Dependencies UpdateSqlGenerator.SqlGenerationHelper object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlUpdateSqlGenerator : UpdateSqlGenerator, IUpdateSqlGenerator Constructors | Edit this page View Source NpgsqlUpdateSqlGenerator(UpdateSqlGeneratorDependencies) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlUpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies) Parameters Type Name Description UpdateSqlGeneratorDependencies dependencies Methods | Edit this page View Source AppendDeleteOperation(StringBuilder, IReadOnlyModificationCommand, int, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command int commandPosition bool requiresTransaction Returns Type Description ResultSetMapping Overrides UpdateSqlGenerator.AppendDeleteOperation(StringBuilder, IReadOnlyModificationCommand, int, out bool) | Edit this page View Source AppendInsertCommand(StringBuilder, string, string?, IReadOnlyList<IColumnModification>, IReadOnlyList<IColumnModification>, bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected virtual void AppendInsertCommand(StringBuilder commandStringBuilder, string name, string? schema, IReadOnlyList<IColumnModification> writeOperations, IReadOnlyList<IColumnModification> readOperations, bool overridingSystemValue) Parameters Type Name Description StringBuilder commandStringBuilder string name string schema IReadOnlyList<IColumnModification> writeOperations IReadOnlyList<IColumnModification> readOperations bool overridingSystemValue | Edit this page View Source AppendInsertOperation(StringBuilder, IReadOnlyModificationCommand, int, bool, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, bool overridingSystemValue, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command int commandPosition bool overridingSystemValue bool requiresTransaction Returns Type Description ResultSetMapping | Edit this page View Source AppendInsertOperation(StringBuilder, IReadOnlyModificationCommand, int, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command int commandPosition bool requiresTransaction Returns Type Description ResultSetMapping Overrides UpdateSqlGenerator.AppendInsertOperation(StringBuilder, IReadOnlyModificationCommand, int, out bool) | Edit this page View Source AppendObtainNextSequenceValueOperation(StringBuilder, string, string?) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override void AppendObtainNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string? schema) Parameters Type Name Description StringBuilder commandStringBuilder string name string schema Overrides UpdateSqlGenerator.AppendObtainNextSequenceValueOperation(StringBuilder, string, string) | Edit this page View Source AppendStoredProcedureCall(StringBuilder, IReadOnlyModificationCommand, int, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ResultSetMapping AppendStoredProcedureCall(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command int commandPosition bool requiresTransaction Returns Type Description ResultSetMapping Overrides UpdateSqlGenerator.AppendStoredProcedureCall(StringBuilder, IReadOnlyModificationCommand, int, out bool) | Edit this page View Source AppendUpdateColumnValue(ISqlGenerationHelper, IColumnModification, StringBuilder, string, string?) Appends a SQL fragment representing the value that is assigned to a column which is being updated. Declaration protected override void AppendUpdateColumnValue(ISqlGenerationHelper updateSqlGeneratorHelper, IColumnModification columnModification, StringBuilder stringBuilder, string name, string? schema) Parameters Type Name Description ISqlGenerationHelper updateSqlGeneratorHelper The update sql generator helper. IColumnModification columnModification The operation representing the data to be updated. StringBuilder stringBuilder The builder to which the SQL should be appended. string name The name of the table. string schema The table schema, or null to use the default schema. Overrides UpdateSqlGenerator.AppendUpdateColumnValue(ISqlGenerationHelper, IColumnModification, StringBuilder, string, string) | Edit this page View Source AppendUpdateOperation(StringBuilder, IReadOnlyModificationCommand, int, out bool) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, out bool requiresTransaction) Parameters Type Name Description StringBuilder commandStringBuilder IReadOnlyModificationCommand command int commandPosition bool requiresTransaction Returns Type Description ResultSetMapping Overrides UpdateSqlGenerator.AppendUpdateOperation(StringBuilder, IReadOnlyModificationCommand, int, out bool) Implements IUpdateSqlGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Classes NpgsqlModificationCommand This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlModificationCommandBatch The Npgsql-specific implementation for ModificationCommandBatch. NpgsqlModificationCommandBatchFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlModificationCommandFactory This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlUpdateSqlGenerator This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlSequenceValueGeneratorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlSequenceValueGeneratorFactory.html",
    "title": "Interface INpgsqlSequenceValueGeneratorFactory | Npgsql Documentation",
    "keywords": "Interface INpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlSequenceValueGeneratorFactory Methods | Edit this page View Source Create(IProperty, NpgsqlSequenceValueGeneratorState, INpgsqlRelationalConnection, IRawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration ValueGenerator Create(IProperty property, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger) Parameters Type Name Description IProperty property NpgsqlSequenceValueGeneratorState generatorState INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder IRelationalCommandDiagnosticsLogger commandLogger Returns Type Description ValueGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlValueGeneratorCache.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlValueGeneratorCache.html",
    "title": "Interface INpgsqlValueGeneratorCache | Npgsql Documentation",
    "keywords": "Interface INpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inherited Members IValueGeneratorCache.GetOrAdd(IProperty, ITypeBase, Func<IProperty, ITypeBase, ValueGenerator>) Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlValueGeneratorCache : IValueGeneratorCache Methods | Edit this page View Source GetOrAddSequenceState(IProperty, IRelationalConnection) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration NpgsqlSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection) Parameters Type Name Description IProperty property IRelationalConnection connection Returns Type Description NpgsqlSequenceValueGeneratorState"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceHiLoValueGenerator-1.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceHiLoValueGenerator-1.html",
    "title": "Class NpgsqlSequenceHiLoValueGenerator<TValue> | Npgsql Documentation",
    "keywords": "Class NpgsqlSequenceHiLoValueGenerator<TValue> This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance object ValueGenerator ValueGenerator<TValue> HiLoValueGenerator<TValue> NpgsqlSequenceHiLoValueGenerator<TValue> Inherited Members HiLoValueGenerator<TValue>.Next(EntityEntry) HiLoValueGenerator<TValue>.NextAsync(EntityEntry, CancellationToken) ValueGenerator<TValue>.NextValue(EntityEntry) ValueGenerator<TValue>.NextValueAsync(EntityEntry, CancellationToken) ValueGenerator.WithConverter(ValueConverter) ValueGenerator.GeneratesStableValues object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSequenceHiLoValueGenerator<TValue> : HiLoValueGenerator<TValue> Type Parameters Name Description TValue Constructors | Edit this page View Source NpgsqlSequenceHiLoValueGenerator(IRawSqlCommandBuilder, IUpdateSqlGenerator, NpgsqlSequenceValueGeneratorState, INpgsqlRelationalConnection, IRelationalCommandDiagnosticsLogger) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public NpgsqlSequenceHiLoValueGenerator(IRawSqlCommandBuilder rawSqlCommandBuilder, IUpdateSqlGenerator sqlGenerator, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRelationalCommandDiagnosticsLogger commandLogger) Parameters Type Name Description IRawSqlCommandBuilder rawSqlCommandBuilder IUpdateSqlGenerator sqlGenerator NpgsqlSequenceValueGeneratorState generatorState INpgsqlRelationalConnection connection IRelationalCommandDiagnosticsLogger commandLogger Properties | Edit this page View Source GeneratesTemporaryValues This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public override bool GeneratesTemporaryValues { get; } Property Value Type Description bool Overrides ValueGenerator.GeneratesTemporaryValues Methods | Edit this page View Source GetNewLowValue() This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration protected override long GetNewLowValue() Returns Type Description long Overrides HiLoValueGenerator<TValue>.GetNewLowValue() | Edit this page View Source GetNewLowValueAsync(CancellationToken) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration protected override Task<long> GetNewLowValueAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task<long> Overrides HiLoValueGenerator<TValue>.GetNewLowValueAsync(CancellationToken)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorFactory.html",
    "title": "Class NpgsqlSequenceValueGeneratorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance object NpgsqlSequenceValueGeneratorFactory Implements INpgsqlSequenceValueGeneratorFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSequenceValueGeneratorFactory : INpgsqlSequenceValueGeneratorFactory Constructors | Edit this page View Source NpgsqlSequenceValueGeneratorFactory(IUpdateSqlGenerator) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public NpgsqlSequenceValueGeneratorFactory(IUpdateSqlGenerator sqlGenerator) Parameters Type Name Description IUpdateSqlGenerator sqlGenerator Methods | Edit this page View Source Create(IProperty, NpgsqlSequenceValueGeneratorState, INpgsqlRelationalConnection, IRawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual ValueGenerator Create(IProperty property, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger) Parameters Type Name Description IProperty property NpgsqlSequenceValueGeneratorState generatorState INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder IRelationalCommandDiagnosticsLogger commandLogger Returns Type Description ValueGenerator Implements INpgsqlSequenceValueGeneratorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorState.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorState.html",
    "title": "Class NpgsqlSequenceValueGeneratorState | Npgsql Documentation",
    "keywords": "Class NpgsqlSequenceValueGeneratorState This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance object HiLoValueGeneratorState NpgsqlSequenceValueGeneratorState Implements IDisposable Inherited Members HiLoValueGeneratorState.Next<TValue>(Func<long>) HiLoValueGeneratorState.NextAsync<TValue>(Func<CancellationToken, Task<long>>, CancellationToken) HiLoValueGeneratorState.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSequenceValueGeneratorState : HiLoValueGeneratorState, IDisposable Constructors | Edit this page View Source NpgsqlSequenceValueGeneratorState(ISequence) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public NpgsqlSequenceValueGeneratorState(ISequence sequence) Parameters Type Name Description ISequence sequence Properties | Edit this page View Source Sequence This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual ISequence Sequence { get; } Property Value Type Description ISequence Implements IDisposable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorCache.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorCache.html",
    "title": "Class NpgsqlValueGeneratorCache | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance object ValueGeneratorCache NpgsqlValueGeneratorCache Implements INpgsqlValueGeneratorCache IValueGeneratorCache Inherited Members ValueGeneratorCache.GetOrAdd(IProperty, ITypeBase, Func<IProperty, ITypeBase, ValueGenerator>) ValueGeneratorCache.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGeneratorCache : ValueGeneratorCache, INpgsqlValueGeneratorCache, IValueGeneratorCache Constructors | Edit this page View Source NpgsqlValueGeneratorCache(ValueGeneratorCacheDependencies) Initializes a new instance of the ValueGeneratorCache class. Declaration public NpgsqlValueGeneratorCache(ValueGeneratorCacheDependencies dependencies) Parameters Type Name Description ValueGeneratorCacheDependencies dependencies Parameter object containing dependencies for this service. Methods | Edit this page View Source GetOrAddSequenceState(IProperty, IRelationalConnection) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual NpgsqlSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection) Parameters Type Name Description IProperty property IRelationalConnection connection Returns Type Description NpgsqlSequenceValueGeneratorState Implements INpgsqlValueGeneratorCache IValueGeneratorCache"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorSelector.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorSelector.html",
    "title": "Class NpgsqlValueGeneratorSelector | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGeneratorSelector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance object ValueGeneratorSelector RelationalValueGeneratorSelector NpgsqlValueGeneratorSelector Implements IValueGeneratorSelector Inherited Members ValueGeneratorSelector.Create(IProperty, ITypeBase) ValueGeneratorSelector.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly: Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGeneratorSelector : RelationalValueGeneratorSelector, IValueGeneratorSelector Constructors | Edit this page View Source NpgsqlValueGeneratorSelector(ValueGeneratorSelectorDependencies, INpgsqlSequenceValueGeneratorFactory, INpgsqlRelationalConnection, IRawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public NpgsqlValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies, INpgsqlSequenceValueGeneratorFactory sequenceFactory, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger) Parameters Type Name Description ValueGeneratorSelectorDependencies dependencies INpgsqlSequenceValueGeneratorFactory sequenceFactory INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder IRelationalCommandDiagnosticsLogger commandLogger Properties | Edit this page View Source Cache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual INpgsqlValueGeneratorCache Cache { get; } Property Value Type Description INpgsqlValueGeneratorCache Methods | Edit this page View Source FindForType(IProperty, ITypeBase, Type) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration protected override ValueGenerator? FindForType(IProperty property, ITypeBase typeBase, Type clrType) Parameters Type Name Description IProperty property ITypeBase typeBase Type clrType Returns Type Description ValueGenerator Overrides RelationalValueGeneratorSelector.FindForType(IProperty, ITypeBase, Type) | Edit this page View Source Select(IProperty, ITypeBase) This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Declaration public override ValueGenerator Select(IProperty property, ITypeBase typeBase) Parameters Type Name Description IProperty property ITypeBase typeBase Returns Type Description ValueGenerator Overrides ValueGeneratorSelector.Select(IProperty, ITypeBase) Implements IValueGeneratorSelector"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Classes NpgsqlSequenceHiLoValueGenerator<TValue> This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlSequenceValueGeneratorState This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlValueGeneratorSelector This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Interfaces INpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. INpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL Classes NpgsqlRetryingExecutionStrategy An IExecutionStrategy implementation for retrying failed executions on PostgreSQL."
  },
  "efcore/index.html": {
    "href": "efcore/index.html",
    "title": "Npgsql Entity Framework Core Provider | Npgsql Documentation",
    "keywords": "Npgsql Entity Framework Core Provider Npgsql has an Entity Framework (EF) Core provider. It behaves like other EF Core providers (e.g. SQL Server), so the general EF Core docs apply here as well. If you're just getting started with EF Core, those docs are the best place to start. Development happens in the Npgsql.EntityFrameworkCore.PostgreSQL repository, all issues should be reported there. Configuring the project file To use the Npgsql EF Core provider, add a dependency on Npgsql.EntityFrameworkCore.PostgreSQL. You can follow the instructions in the general EF Core Getting Started docs. Below is a .csproj file for a console application that uses the Npgsql EF Core provider: <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFramework>net8.0</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"8.0.4\" /> </ItemGroup> </Project> Defining a model and a DbContext Let's say you want to store blogs and their posts in their database; you can model these as .NET types as follows: public class Blog { public int BlogId { get; set; } public string Url { get; set; } public List<Post> Posts { get; set; } } public class Post { public int PostId { get; set; } public string Title { get; set; } public string Content { get; set; } public int BlogId { get; set; } public Blog Blog { get; set; } } You then define a DbContext type which you'll use to interact with the database: OnConfiguring DbContext pooling ASP.NET / DI Using OnConfiguring() to configure your context is the easiest way to get started, but is discouraged for most production applications: public class BloggingContext : DbContext { public DbSet<Blog> Blogs { get; set; } public DbSet<Post> Posts { get; set; } protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql(\"<connection string>\"); } // At the point where you need to perform a database operation: using var context = new BloggingContext(); // Use the context... var dbContextFactory = new PooledDbContextFactory<BloggingContext>( new DbContextOptionsBuilder<BloggingContext>() .UseNpgsql(\"<connection string>\") .Options); // At the point where you need to perform a database operation: using var context = dbContextFactory.CreateDbContext(); // Use the context... When using ASP.NET - or any application with dependency injection - the context instance will be injected into your code. Use the following to configure EF with your DI container: var builder = WebApplication.CreateBuilder(args); builder.Services.AddDbContextPool<BloggingContext>(opt => opt.UseNpgsql(builder.Configuration.GetConnectionString(\"BloggingContext\"))); public class BloggingContext(DbContextOptions<BloggingContext> options) : DbContext(options) { public DbSet<Blog> Blogs { get; set; } public DbSet<Post> Posts { get; set; } } For more information on getting started with EF, consult the EF getting started documentation. Additional Npgsql configuration The Npgsql EF provider is built on top of the lower-level Npgsql ADO.NET provider (docs); these two separate components support various options you may want to configure. If you're using EF 9.0 or above, the UseNpgsql() is a single point where you can configure everything related to Npgsql. For example: builder.Services.AddDbContextPool<BloggingContext>(opt => opt.UseNpgsql( builder.Configuration.GetConnectionString(\"BloggingContext\"), o => o .SetPostgresVersion(13, 0) .UseNodaTime() .MapEnum<Mood>(\"mood\"))); The above configures the EF provider to produce SQL for PostgreSQL version 13 (avoiding newer incompatible features), adds a plugin allowing use of NodaTime for date/time type mapping, and maps a .NET enum type. Note that the last two also require configuration at the lower-level ADO.NET layer, which the code above does for you automatically. If you need to configure something at the lower-level ADO.NET layer, use ConfigureDataSource() as follows: builder.Services.AddDbContextPool<BloggingContext>(opt => opt.UseNpgsql( builder.Configuration.GetConnectionString(\"BloggingContext\"), o => o.ConfigureDataSource(dataSourceBuilder => dataSourceBuilder.UseClientCertificate(certificate)))); ConfigureDataSource() provides access to a lower-level NpgsqlDataSourceBuilder which you can use to configure all aspects of the Npgsql ADO.NET provider. Warning The EF provider internally creates an NpgsqlDataSource and uses that; for most configuration (e.g. connection string), the provider knows to switch between NpgsqlDataSources automatically. However, it's not possible to detect configuration differences within the ConfigureDataSource(); as a result, avoid performing varying configuration inside ConfigureDataSource(), since you may get the wrong NpgsqlDataSource. If you find yourself needing to vary Npgsql ADO.NET configuration, create an external NpgsqlDataSource yourself with the desired configuration and pass that to UseNpgsql() as described below. Using an external NpgsqlDataSource If you're using a version of EF prior to 9.0, the above configuration methods aren't available. You can still create an NpgsqlDataSource yourself, and then pass it EF's UseNpgsql(): var dataSourceBuilder = new NpgsqlDataSourceBuilder(builder.Configuration.GetConnectionString(\"BloggingContext\")); dataSourceBuilder.MapEnum<Mood>(); dataSourceBuilder.UseNodaTime(); var dataSource = dataSourceBuilder.Build(); builder.Services.AddDbContextPool<BloggingContext>(opt => opt.UseNpgsql(dataSource)); Using an Existing Database (Database-First) The Npgsql EF Core provider also supports reverse-engineering a code model from an existing PostgreSQL database (\"database-first\"). To do so, use dotnet CLI to execute the following: dotnet ef dbcontext scaffold \"Host=my_host;Database=my_db;Username=my_user;Password=my_pw\" Npgsql.EntityFrameworkCore.PostgreSQL"
  },
  "efcore/mapping/array.html": {
    "href": "efcore/mapping/array.html",
    "title": "Array Type Mapping | Npgsql Documentation",
    "keywords": "Array Type Mapping PostgreSQL has the unique feature of supporting array data types. This allow you to conveniently and efficiently store several values in a single column, where in other database you'd typically resort to concatenating the values in a string or defining another table with a one-to-many relationship. Note Although PostgreSQL supports multidimensional arrays, these aren't yet supported by the EF Core provider. Mapping arrays Simply define a regular .NET array or List<> property: public class Post { public int Id { get; set; } public string Name { get; set; } public string[] Tags { get; set; } public List<string> AlternativeTags { get; set; } } The provider will create text[] columns for the above two properties, and will properly detect changes in them - if you load an array and change one of its elements, calling SaveChanges will automatically update the row in the database accordingly. Operation translation The provider can also translate CLR array operations to the corresponding SQL operation; this allows you to efficiently work with arrays by evaluating operations in the database and avoids pulling all the data. The following table lists the range operations that currently get translated; all these translations work both for .NET arrays (int[]) and for generic Lists (List<int>). If you run into a missing operation, please open an issue. .NET SQL Notes array[0] array[1] array.Length / list.Count cardinality(array) array.Skip(2) array[3,] Added in 8.0 array.Take(2) array[,2] Added in 8.0 array.Skip(1).Take(2) array[2,3] Added in 8.0 array1 == array2 array1 = array2 array1.SequenceEqual(array2) array1 = array2 arrayNonColumn.Contains(element) element = ANY(arrayNonColumn) Can use regular index arrayColumn.Contains(element) arrayColumn @> ARRAY[element] Can use GIN index array.Append(element) array_append(array, element) Added in 6.0 array1.Concat(array2) array1 || array2 Added in 6.0 array.IndexOf(element) array_position(array, element) - 1 Added in 6.0 array.IndexOf(element, startIndex) array_position(array, element, startIndex + 1) - 1 Added in 6.0 String.Join(separator, array) array_to_string(array, separator, '') Added in 6.0 array.Any() cardinality(array) > 0 array1.Intersect(array2).Any() array1 && array2 Added in 8.0 array1.Any(i => array2.Contains(i)) array1 && array2 array1.All(i => array2.Contains(i)) array1 <@ array2 array.Any(s => EF.Functions.Like(string, s)) string LIKE ANY (array) array.Any(s => EF.Functions.ILike(string, s)) string ILIKE ANY (array) array.All(s => EF.Functions.Like(string, s)) string LIKE ALL (array) array.All(s => EF.Functions.ILike(string, s)) string ILIKE ALL (array) EF.Functions.ArrayAgg(values) array_agg(values) Added in 7.0, See Aggregate functions."
  },
  "efcore/mapping/enum.html": {
    "href": "efcore/mapping/enum.html",
    "title": "Enum Type Mapping | Npgsql Documentation",
    "keywords": "Enum Type Mapping By default, any enum properties in your model will be mapped to database integers. EF Core 2.1 also allows you to map these to strings in the database with value converters. However, the Npgsql provider also allows you to map your CLR enums to database enum types. This option, unique to PostgreSQL, provides the best of both worlds: the enum is internally stored in the database as a number (minimal storage), but is handled like a string (more usable, no need to remember numeric values) and has type safety. Setting up your enum with EF Note Enum mapping has changed considerably in EF 9.0. If you're using EF 9.0 or above, simply call MapEnum inside your UseNpgsql invocation. With a connection string With an external NpgsqlDataSource If you're passing a connection string to UseNpgsql, simply add the MapEnum call as follows: builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql( \"<connection string>\", o => o.MapEnum<Mood>(\"mood\"))); This configures all aspects of Npgsql to use your Mood enum - both at the EF and the lower-level Npgsql layer - and ensures that the enum is created in the database in EF migrations. If you're creating an external NpgsqlDataSource and passing it to UseNpgsql, you must make sure to map your enum on that data independently of the EF-level setup: var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"<connection string>\"); dataSourceBuilder.MapEnum<Mood>(); var dataSource = dataSourceBuilder.Build(); builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql( dataSource, o => o.MapEnum<Mood>(\"mood\"))); Older EF versions On versions of EF prior to 9.0, enum setup is more involved and consists of several steps; enum mapping has to be done at the lower-level Npgsql layer, and also requires explicit configuration in the EF model for creation in the database via migrations. Creating your database enum First, you must specify the PostgreSQL enum type on your model, just like you would with tables, sequences or other databases objects: protected override void OnModelCreating(ModelBuilder builder) => builder.HasPostgresEnum<Mood>(); This causes the EF Core provider to create your enum type, mood, with two labels: happy and sad. This will cause the appropriate migration to be created. Mapping your enum Even if your database enum is created, Npgsql has to know about it, and especially about your CLR enum type that should be mapped to it: NpgsqlDataSource Without NpgsqlDatasource Since version 7.0, NpgsqlDataSource is the recommended way to use Npgsql. When using NpgsqlDataSource, map your enum when building your data source: // Call MapEnum() when building your data source: var dataSourceBuilder = new NpgsqlDataSourceBuilder(/* connection string */); dataSourceBuilder.MapEnum<Mood>(); var dataSource = dataSourceBuilder.Build(); builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql(dataSource)); Since version 7.0, NpgsqlDataSource is the recommended way to use Npgsql. However, if you're not yet using NpgsqlDataSource, map enums by adding the following code, before any EF Core operations take place. An appropriate place for this is in the static constructor on your DbContext class: static MyDbContext() => NpgsqlConnection.GlobalTypeMapper.MapEnum<Mood>(); Note If you have multiple context types, all MapEnum invocations must be done before any of them is used; this means that the code cannot be in your static constructors, but must be moved to the program start. This code lets Npgsql know that your CLR enum type, Mood, should be mapped to a database enum called mood. Note that if your enum is in a custom schema (not public), you must specify that schema in the call to MapEnum. Using enum properties Once your enum is properly set up with EF, you can use your CLR enum type just like any other property: public class Blog { public int Id { get; set; } public Mood Mood { get; set; } } using (var ctx = new MyDbContext()) { // Insert ctx.Blogs.Add(new Blog { Mood = Mood.Happy }); ctx.Blogs.SaveChanges(); // Query var blog = ctx.Blogs.Single(b => b.Mood == Mood.Happy); } Altering enum definitions The Npgsql provider only allow adding new values to existing enums, and the appropriate migrations will be automatically created as you add values to your CLR enum type. However, PostgreSQL itself doesn't support removing enum values (since these may be in use), and while renaming values is supported, it isn't automatically done by the provider to avoid using unreliable detection heuristics. Renaming an enum value can be done by including raw SQL in your migrations as follows: migrationBuilder.Sql(\"ALTER TYPE mood RENAME VALUE 'happy' TO 'thrilled';\"); As always, test your migrations carefully before running them on production databases. Scaffolding from an existing database If you're creating your model from an existing database, the provider will recognize enums in your database, and scaffold the appropriate HasPostgresEnum() lines in your model. However, the scaffolding process has no knowledge of your CLR type, and will therefore skip your enum columns (warnings will be logged). You will have to create the CLR type and perform the proper setup as described above. In the future it may be possible to scaffold the actual enum type (and with it the properties), but this isn't supported at the moment."
  },
  "efcore/mapping/full-text-search.html": {
    "href": "efcore/mapping/full-text-search.html",
    "title": "Full Text Search | Npgsql Documentation",
    "keywords": "Full Text Search PostgreSQL has built-in support for full-text search, which allows you to conveniently and efficiently query natural language documents. Mapping PostgreSQL full text search types are mapped onto .NET types built-in to Npgsql. The tsvector type is mapped to NpgsqlTsVector and tsquery is mapped to NpgsqlTsQuery. This means you can use properties of type NpgsqlTsVector directly in your model to create tsvector columns. The NpgsqlTsQuery type on the other hand, is used in LINQ queries. public class Product { public int Id { get; set; } public string Title { get; set; } public string Description { get; set; } public NpgsqlTsVector SearchVector { get; set; } } Setting up and querying a full text search index on an entity As the PostgreSQL documentation explains, full-text search requires an index to run efficiently. This section will show two ways to do this, each having its benefits and drawbacks. Please read the PostgreSQL docs for more information on the two different approaches. Method 1: tsvector column This method adds a tsvector column to your table, that is automatically updated when the row is modified. First, add an NpgsqlTsVector property to your entity: public class Product { public int Id { get; set; } public string Name { get; set; } public string Description { get; set; } public NpgsqlTsVector SearchVector { get; set; } } Setting up the column to be auto-updated depends on your PostgreSQL version. On PostgreSQL 12 and above, the column can be a simple generated column, and version 5.0.0 contains sugar for setting that up. In previous versions, you must manually set up database triggers that update the column instead. PostgreSQL 12+ Older Versions Note The below only works on PostgreSQL 12 and version 5.0.0 of the EF Core provider. The following will set up a generated tsvector column, over which you can easily create an index: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Product>() .HasGeneratedTsVectorColumn( p => p.SearchVector, \"english\", // Text search config p => new { p.Name, p.Description }) // Included properties .HasIndex(p => p.SearchVector) .HasMethod(\"GIN\"); // Index method on the search vector (GIN or GIST) } First, modify the OnModelCreating() of your context class to add an index as follows: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Product>() .HasIndex(p => p.SearchVector) .HasMethod(\"GIN\"); // Index method on the search vector (GIN or GIST) } Now generate a migration (dotnet ef migrations add ....), and open it with your favorite editor, adding the following: public partial class CreateProductTable : Migration { protected override void Up(MigrationBuilder migrationBuilder) { // Migrations for creation of the column and the index will appear here, all we need to do is set up the trigger to update the column: migrationBuilder.Sql( @\"CREATE TRIGGER product_search_vector_update BEFORE INSERT OR UPDATE ON \"\"Products\"\" FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger(\"\"SearchVector\"\", 'pg_catalog.english', \"\"Name\"\", \"\"Description\"\");\"); // If you were adding a tsvector to an existing table, you should populate the column using an UPDATE // migrationBuilder.Sql(\"UPDATE \\\"Products\\\" SET \\\"Name\\\" = \\\"Name\\\";\"); } protected override void Down(MigrationBuilder migrationBuilder) { // Migrations for dropping of the column and the index will appear here, all we need to do is drop the trigger: migrationBuilder.Sql(\"DROP TRIGGER product_search_vector_update\"); } } Once your auto-updated tsvector column is set up, any inserts or updates on the Products table will now update the SearchVector column and maintain it automatically. You can query it as follows: var context = new ProductDbContext(); var npgsql = context.Products .Where(p => p.SearchVector.Matches(\"Npgsql\")) .ToList(); Method 2: Expression index Version 5.0.0 of the provider includes sugar for defining the appropriate expression index; if you're using an older version, you'll have to define a raw SQL migration yourself. Version 5.0.0 Older Versions modelBuilder.Entity<Blog>() .HasIndex(b => new { b.Title, b.Description }) .HasMethod(\"GIN\") .IsTsVectorExpressionIndex(\"english\"); Create a migration which will contain the index creation SQL (dotnet ef migrations add ...). At this point, open the generated migration with your editor and add the following: protected override void Up(MigrationBuilder migrationBuilder) { migrationBuilder.Sql(@\"CREATE INDEX fts_idx ON \"\"Product\"\" USING GIN (to_tsvector('english', \"\"Name\"\" || ' ' || \"\"Description\"\"));\"); } protected override void Down(MigrationBuilder migrationBuilder) migrationBuilder.Sql(@\"DROP INDEX fts_idx;\"); } Once the index is created on the Title and Description columns, you can query as follows: var context = new ProductDbContext(); var npgsql = context.Products .Where(p => EF.Functions.ToTsVector(\"english\", p.Title + \" \" + p.Description) .Matches(\"Npgsql\")) .ToList(); Computed column over JSON columns Starting with 7.0, the provider can also create computed tsvector columns over JSON columns. Simply use HasGeneratedTsVectorColumn() as shown above, and when applied to JSON columns, the provider will automatically generate json_to_tsvector/jsonb_to_tsvector as appropriate. Note that this will pass the filter all to these functions, meaning that all values in the JSON document will be included. To customize the filter - or to create the computed column on older versions of the provider - simply specify the function yourself via HasComputedColumnSql. Operation translation Almost all PostgreSQL full text search functions can be called through LINQ queries. All supported EF Core LINQ methods are defined in extension classes in the Microsoft.EntityFrameworkCore namespace, so simply referencing the Npgsql provider will light up these methods. The following table lists all supported operations; if an operation you need is missing, please open an issue to request for it. .NET SQL EF.Functions.ToTsVector(string) to_tsvector(string) EF.Functions.ToTsVector(\"english\", string) to_tsvector('english'::regconfig, string) EF.Functions.ToTsQuery(string) to_tsquery(string) EF.Functions.ToTsQuery(\"english\", string ) to_tsquery('english'::regconfig, string) EF.Functions.PlainToTsQuery(string) plainto_tsquery(string) EF.Functions.PlainToTsQuery(\"english\", string) plainto_tsquery('english'::regconfig, string) EF.Functions.PhraseToTsQuery(string) phraseto_tsquery(string) EF.Functions.PhraseToTsQuery(\"english\", string) phraseto_tsquery('english'::regconfig, string) EF.Functions.WebSearchToTsQuery(string) websearch_to_tsquery(string) EF.Functions.WebSearchToTsQuery(\"english\", string) websearch_to_tsquery('english'::regconfig, string) EF.functions.ArrayToTsVector(new[] { \"a\", \"b\" }) array_to_tsvector(ARRAY['a', 'b']) NpgsqlTsVector.Parse(string) CAST(string AS tsvector) NpgsqlTsQuery.Parse(string) CAST(queryString AS tsquery) tsvector.Matches(string) tsvector @@ plainto_tsquery(string) tsvector.Matches(tsquery) tsvector @@ tsquery tsquery1.And(tsquery2) tsquery1 && tsquery2 tsquery1.Or(tsquery2) tsquery1 || tsquery2 tsquery.ToNegative() !! tsquery tsquery1.Contains(tsquery2) tsquery1 @> tsquery2 tsquery1.IscontainedIn(tsquery2) tsquery1 <@ tsquery2 tsquery.GetNodeCount() numnode(query) tsquery.GetQueryTree() querytree(query) tsquery.GetResultHeadline(\"a b c\") ts_headline('a b c', query) tsquery.GetResultHeadline(\"a b c\", \"MinWords=1, MaxWords=2\") ts_headline('a b c', query, 'MinWords=1, MaxWords=2') tsquery.Rewrite(targetQuery, substituteQuery) ts_rewrite(to_tsquery(tsquery), to_tsquery(targetQuery), to_tsquery(substituteQuery)) tsquery1.ToPhrase(tsquery2) tsquery_phrase(tsquery1, tsquery2) tsquery1.ToPhrase(tsquery2, distance) tsquery_phrase(tsquery1, tsquery2, distance) tsvector1.Concat(tsvector2) tsvector1 || tsvector2 tsvector.Delete(\"x\") ts_delete(tsvector, 'x') tsvector.Delete(new[] { \"x\", \"y\" }) ts_delete(tsvector, ARRAY['x', 'y']) tsvector.Filter(new[] { \"x\", \"y\" }) ts_filter(tsvector, ARRAY['x', 'y']) tsvector.GetLength() length(tsvector) tsvector.Rank(tsquery) ts_rank(tsvector, tsquery) tsvector.RankCoverDensity(tsquery) ts_rank_cd(tsvector, tsquery) tsvector.SetWeight(NpgsqlTsVector.Lexeme.Weight.A) setweight(tsvector, 'A') tsvector.ToStripped() strip(tsvector) EF.Functions.Unaccent(string) unaccent(string) EF.Functions.Unaccent(regdictionary, string) unaccent(regdictionary, string)"
  },
  "efcore/mapping/general.html": {
    "href": "efcore/mapping/general.html",
    "title": "Type mapping | Npgsql Documentation",
    "keywords": "Type mapping The EF Core provider transparently maps the types supported by Npgsql at the ADO.NET level - see the Npgsql ADO type mapping page. This means that you can use PostgreSQL-specific types, such as inet or circle, directly in your entities. Simply define your properties just as if they were a simple type, such as a string: public class MyEntity { public int Id { get; set; } public string Name { get; set; } public IPAddress IPAddress { get; set; } public NpgsqlCircle Circle { get; set; } public int[] SomeInts { get; set; } } Special types such as arrays and enums have their own documentation pages with more details. PostgreSQL composite types, while supported at the ADO.NET level, aren't yet supported in the EF Core provider. This is tracked by #22. Explicitly specifying data types In some cases, your .NET property type can be mapped to several PostgreSQL data types; a good example is a string, which will be mapped to text by default, but can also be mapped to jsonb. You can use either Data Annotation attributes or the Fluent API to configure the PostgreSQL data type: Data Annotations Fluent API [Column(TypeName=\"jsonb\")] public string SomeStringProperty { get; set; } builder.Entity<Blog>() .Property(b => b.SomeStringProperty) .HasColumnType(\"jsonb\");"
  },
  "efcore/mapping/json.html": {
    "href": "efcore/mapping/json.html",
    "title": "JSON Mapping | Npgsql Documentation",
    "keywords": "JSON Mapping Note Version 8.0 of the Npgsql provider introduced support for EF's JSON columns, using ToJson(). That is the recommended way to map POCOs going forward. PostgreSQL has rich, built-in support for storing JSON columns and efficiently performing complex queries operations on them. Newcomers can read more about the PostgreSQL support on the JSON types page, and on the functions and operators page. Note that the below mapping mechanisms support both the jsonb and json types, although the former is almost always preferred for efficiency reasons. The Npgsql EF Core provider allows you to map PostgreSQL JSON columns in three different ways: As simple strings As EF owned entities As System.Text.Json DOM types (JsonDocument or JsonElement, see docs) As strongly-typed user-defined types (POCOs) (deprecated) String mapping The simplest form of mapping to JSON is via a regular string property, just like an ordinary text column: Data Annotations Fluent API public class SomeEntity { public int Id { get; set; } [Column(TypeName = \"jsonb\")] public string Customer { get; set; } } class MyContext : DbContext { public DbSet<SomeEntity> SomeEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<SomeEntity>() .Property(b => b.Customer) .HasColumnType(\"jsonb\"); } } public class SomeEntity { public int Id { get; set; } public string Customer { get; set; } } With string mapping, the EF Core provider will save and load properties to database JSON columns, but will not do any further serialization or parsing - it's the developer's responsibility to handle the JSON contents, possibly using System.Text.Json to parse them. This mapping approach is more limited compared to the others. POCO mapping If your column JSON contains documents with a stable schema, you can map them to your own .NET types (or POCOs); EF will use System.Text.Json APIs under the hood to serialize instances of your types to JSON documents before sending them to the database, and to deserialize documents coming back from the database. This effectively allows mapping an arbitrary .NET type - or object graph - to a single column in the database. EF 7.0 introduced the \"JSON Columns\" feature, which maps a database JSON column via EF's \"owned entity\" mapping concept, using ToJson(). In this approach, EF fully models the types within the JSON document - just like it models regular tables and columns - and uses that information to perform better queries and updates. Full support for ToJson has been added to version 8.0 of the Npgsql EF provider. As an alternative, prior to version 8.0, the Npgsql EF provider has supported JSON POCO mapping by simply delegating serialization/deserialization to System.Text.Json; in this model, EF itself model the contents of the JSON document, and cannot take that structure into account for queries and updates. This approach can now be considered deprecated as it allows for less powerful mapping and supports less query types; using ToJson() is now the recommended way to map POCOs to JSON. ToJson (owned entity mapping) Npgsql's support for ToJson() is fully aligned with the general EF support; see the EF documentation for more information. To get you started quickly, assume that we have the following Customer type, with a Details property that we want to map to a single JSON column in the database: public class Customer { public int Id { get; set; } public CustomerDetails Details { get; set; } } public class CustomerDetails // Map to a JSON column in the table { public string Name { get; set; } public int Age { get; set; } public List<Order> Orders { get; set; } } public class Order // Part of the JSON column { public decimal Price { get; set; } public string ShippingAddress { get; set; } } To instruct EF to map CustomerDetails - and within it, Order - to a JSON column, configure it as follows: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Customer>() .OwnsOne(c => c.Details, d => { d.ToJson(); d.OwnsMany(d => d.Orders); }); } At this point you can interact with the Customer just like you would normally, and EF will seamlessly serialize and deserialize it to a JSON column in the database. You can also perform LINQ queries which reference properties inside the JSON document, and these will get translated to SQL. Traditional POCO mapping (deprecated) Before version 8.0 introduced support for EF's ToJson (owned entity mapping), the provider had its own support for JSON POCO mapping, by simply delegating serialization/deserialization to System.Text.Json; in this model, EF itself model the contents of the JSON document, and cannot take that structure into account for queries and updates. This approach can now be considered deprecated as it allows for less powerful mapping and supports less query types; using ToJson() is now the recommended way to map POCOs to JSON. To use traditional POCO mapping, configure a property a mapping to map to a jsonb column as follows: Data Annotations Fluent API public class Customer { public int Id { get; set; } [Column(TypeName = \"jsonb\")] public CustomerDetails Details { get; set; } } public class CustomerDetails // Mapped to a JSON column in the table { public string Name { get; set; } public int Age { get; set; } public Order[] Orders { get; set; } } public class Order // Part of the JSON column { public decimal Price { get; set; } public string ShippingAddress { get; set; } } class MyContext : DbContext { public DbSet<SomeEntity> SomeEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<SomeEntity>() .Property(b => b.Customer) .HasColumnType(\"jsonb\"); } } public class SomeEntity // Mapped to a database table { public int Id { get; set; } public Customer Customer { get; set; } } public class Customer // Mapped to a JSON column in the table { public string Name { get; set; } public int Age { get; set; } public Order[] Orders { get; set; } } public class Order // Part of the JSON column { [JsonPropertyName(\"OrderPrice\")] // Controls the JSON property name public decimal Price { get; set; } public string ShippingAddress { get; set; } } Note that when using this mapping, only limited forms of LINQ querying is supported; it's recommended to switch to ToJson() for full LINQ querying capabilities. The querying supported by traditional POCO mapping is documented below. JsonDocument DOM mapping If your column JSON schema isn't stable, a strongly-typed POCO mapping may not be appropriate. The Npgsql provider also allows you to map the DOM document type provided by System.Text.Json APIs. public class SomeEntity : IDisposable { public int Id { get; set; } public JsonDocument Customer { get; set; } public void Dispose() => Customer?.Dispose(); } Note that neither a data annotation nor the fluent API are required, as JsonDocument is automatically recognized and mapped to jsonb. Note also that JsonDocument is disposable, so the entity type is made disposable as well; not dispose the JsonDocument will result in the memory not being returned to the pool, which will increase GC impact across various parts of the framework. Once a document is loaded from the database, you can traverse it: var someEntity = context.Entities.First(); Console.WriteLine(someEntity.Customer.RootElement.GetProperty(\"Orders\")[0].GetProperty(\"Price\").GetInt32()); Note that when using this mapping, only limited forms of LINQ querying is supported; see below for more details. Querying JSON columns (traditional JSON and DOM) Note The below does not apply if you are using ToJson (owned entity mapping). ToJson supports Saving and loading documents these documents wouldn't be much use without the ability to query them. You can express your queries via the same LINQ constructs you are already using in EF Core: Classic POCO Mapping JsonDocument Mapping var joes = context.CustomerEntries .Where(e => e.Customer.Name == \"Joe\") .ToList(); var joes = context.CustomerEntries .Where(e => e.Customer.RootElement.GetProperty(\"Name\").GetString() == \"Joe\") .ToList(); The provider will recognize the traversal of a JSON document, and translate it to the correspond PostgreSQL JSON traversal operator, producing the following PostgreSQL-specific SQL: SELECT c.\"\"Id\"\", c.\"\"Customer\"\" FROM \"\"CustomerEntries\"\" AS c WHERE c.\"\"Customer\"\"->>'Name' = 'Joe' If indexes are set up properly, this can result in very efficient, server evaluation of searches with database JSON documents. The following expression types and functions are translated: POCO Mapping JsonDocument Mapping .NET SQL customer.Name customer->>'Name' customer.Orders[1].Price customer#>>'{Orders,0,Price}'[1] customer.Orders.Length (or Count) jsonb_array_length(customer->'Orders') EF.Functions.JsonContains(customer, @\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\")1 customer @> '{\"Name\": \"Joe\", \"Age\": 25}' EF.Functions.JsonContained(@\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\", e.Customer)1 '{\"Name\": \"Joe\", \"Age\": 25}' <@ customer EF.Functions.JsonExists(e.Customer, \"Age\") customer ? 'Age' EF.Functions.JsonExistsAny(e.Customer, \"Age\", \"Address\") customer ?| ARRAY['Age','Address'] EF.Functions.JsonExistsAll(e.Customer, \"Age\", \"Address\") customer ?& ARRAY['Age','Address'] EF.Functions.JsonTypeof(e.Customer.Age) jsonb_typeof(customer->'Age') .NET SQL customer.RootElement.GetProperty(\"Name\").GetString() customer->>'Name' = 'Joe' customer.RootElement.GetProperty(\"Orders\")[1].GetProperty(\"Price\").GetInt32() customer#>>'{Orders,0,Price}'[1] = 8 customer.RootElement.GetProperty(\"Orders\").GetArrayLength() jsonb_array_length(customer->'Orders' EF.Functions.JsonContains(customer, @\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\")1 customer @> '{\"Name\": \"Joe\", \"Age\": 25}' EF.Functions.JsonContained(@\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\", customer)1 '{\"Name\": \"Joe\", \"Age\": 25}' <@ customer EF.Functions.JsonExists(customer, \"Age\") customer ? 'Age' EF.Functions.JsonExistsAny(customer, \"Age\", \"Address\") customer ?| ARRAY['Age','Address'] EF.Functions.JsonExistsAll(customer, \"Age\", \"Address\") customer ?& ARRAY['Age','Address'] EF.Functions.JsonTypeof(customer.GetProperty(\"Age\")) == \"number\" jsonb_typeof(customer->'Age') = 'number' 1 JSON functions which accept a .NET object will not accept .NET scalar values. For example, to pass a scalar to JsonContains wrap it in a JsonElement or alternatively wrap it in a string. Note: a root level JSON string value requires quotes and escaping @\"\"\"Joe\"\"\", just as any nested JSON string value would. Indexing JSON columns Note A section on indices will be added. In the meantime consult the PostgreSQL documentation and other guides on the Internet."
  },
  "efcore/mapping/nodatime.html": {
    "href": "efcore/mapping/nodatime.html",
    "title": "Date/Time Mapping with NodaTime | Npgsql Documentation",
    "keywords": "Date/Time Mapping with NodaTime What is NodaTime By default, the PostgreSQL date/time types are mapped to the built-in .NET types (DateTime, TimeSpan). Unfortunately, these built-in types are flawed in many ways. The NodaTime library was created to solve many of these problems, and if your application handles dates and times in anything but the most basic way, you should consider using it. To learn more read this blog post by Jon Skeet. Beyond NodaTime's general advantages, some specific advantages NodaTime for PostgreSQL date/time mapping include: NodaTime defines some types which are missing from the BCL, such as LocalDate, LocalTime, and OffsetTime. These cleanly correspond to PostgreSQL date, time and timetz. Period is much more suitable for mapping PostgreSQL interval than TimeSpan. NodaTime types can fully represent PostgreSQL's microsecond precision, and can represent dates outside the BCL's date limit (1AD-9999AD). Setup To set up the NodaTime plugin, add the Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime nuget to your project. Then, configure the NodaTime plugin as follows: EF 9.0, with a connection string With an external NpgsqlDataSource Older EF versions, with a connection string If you're passing a connection string to UseNpgsql, simply add the UseNodaTime call as follows: builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql( \"<connection string>\", o => o.UseNodaTime())); This configures all aspects of Npgsql to use the NodaTime plugin - both at the EF and the lower-level Npgsql layer. If you're creating an external NpgsqlDataSource and passing it to UseNpgsql, you must call UseNodaTime on your NpgsqlDataSourceBuilder independently of the EF-level setup: var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"<connection string>\"); dataSourceBuilder.UseNodaTime(); var dataSource = dataSourceBuilder.Build(); builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql( dataSource, o => o.UseNodaTime())); // Configure UseNodaTime at the ADO.NET level. // This code must be placed at the beginning of your application, before any other Npgsql API is called; an appropriate place for this is in the static constructor on your DbContext class: static MyDbContext() => NpgsqlConnection.GlobalTypeMapper.UseNodaTime(); // Then, when configuring EF Core with UseNpgsql(), call UseNodaTime(): builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql(\"<connection string>\", o => o.UseNodaTime())); The above sets up all the necessary mappings and operation translators. You can now use NodaTime types as regular properties in your entities, and even perform some operations: public class Post { public int Id { get; set; } public string Name { get; set; } public Instant CreationTime { get; set; } } var recentPosts = context.Posts.Where(p => p.CreationTime > someInstant); Operation translation The provider knows how to translate many members and methods on mapped NodaTime types. For example, the following query will be translated to SQL and evaluated server-side: // Get all events which occurred on a Monday var mondayEvents = context.Events.Where(p => p.SomeDate.DayOfWeek == DayOfWeek.Monday); // Get all events which occurred before the year 2000 var oldEvents = context.Events.Where(p => p.SomeDate.Year < 2000); Following is the list of supported NodaTime translations; If an operation you need is missing, please open an issue to request for it. Note Most translations on ZonedDateTime and Period were added in version 6.0 .NET SQL Notes SystemClock.Instance.GetCurrentInstant() now() LocalDateTime.Date date_trunc('day', timestamp) LocalDateTime.Second (also LocalTime, ZonedDateTime) date_part('second', timestamp)::INT LocalDateTime.Minute (also LocalTime, ZonedDateTime) date_part('minute', timestamp)::INT LocalDateTime.Hour (also LocalTime, ZonedDateTime) date_part('hour', timestamp)::INT LocalDateTime.Day, (also LocalDate, ZonedDateTime) date_part('day', timestamp)::INT LocalDateTime.Month (also LocalDate, ZonedDateTime) date_part('month', timestamp)::INT LocalDateTime.Year (also LocalDate, ZonedDateTime) date_part('year', timestamp)::INT LocalDateTime.DayOfWeek (also LocalDate, ZonedDateTime) floor(date_part('dow', timestamp))::INT LocalDateTime.DayOfYear (also LocalDate, ZonedDateTime) date_part('doy', timestamp)::INT Period.Seconds (also Duration) date_part('second', interval)::INT Period.Minutes (also Duration) date_part('minute', interval)::INT Period.Hours (also Duration) date_part('hour', interval)::INT Period.Days (also Duration) date_part('day', interval)::INT Period.Months date_part('month', interval)::INT Period.Years date_part('year', interval)::INT Period.FromSeconds make_interval(seconds => int) Period.FromMinutes make_interval(minutes => int) Period.FromHours make_interval(hours => int) Period.FromDays make_interval(days => int) Period.FromWeeks make_interval(weeks => int) Period.FromMonths make_interval(months => int) Period.FromYears make_interval(years => int) Duration.TotalMilliseconds date_part('epoch', interval) / 0.001 Duration.TotalSeconds date_part('epoch', interval) Duration.TotalMinutes date_part('epoch', interval) / 60.0 Duration.TotalDays date_part('epoch', interval) / 86400.0 Duration.TotalHours date_part('epoch', interval) / 3600.0 ZonedDateTime.LocalDateTime timestamptz AT TIME ZONE 'UTC' Added in 6.0 DateInterval.Length upper(daterange) - lower(daterange) Added in 6.0 DateInterval.Start lower(daterange) Added in 6.0 DateInterval.End upper(daterange) - INTERVAL 'P1D' Added in 6.0 DateInterval.Contains(LocalDate) daterange @> date Added in 6.0 DateInterval.Contains(DateInterval) daterange @> daterange Added in 6.0 DateInterval.Intersection(DateInterval) daterange * daterange Added in 6.0 DateInterval.Union(DateInterval) daterange + daterange Added in 6.0 Instant.InZone(DateTimeZoneProviders.Tzdb[\"Europe/Berlin\"]).LocalDateTime timestamptz AT TIME ZONE 'Europe/Berlin' Added in 6.0 LocalDateTime.InZoneLeniently(DateTimeZoneProviders.Tzdb[\"Europe/Berlin\"]).ToInstant() timestamp AT TIME ZONE 'Europe/Berlin' Added in 6.0 ZonedDateTime.ToInstant No PG operation (.NET-side conversion from ZonedDateTime to Instant only) Added in 6.0 Instant.InUtc No PG operation (.NET-side conversion from Instant to ZonedDateTime only) Added in 6.0 Instant.ToDateTimeUtc No PG operation (.NET-side conversion from Instant to UTC DateTime only) Added in 6.0 EF.Functions.Sum(periods) sum(periods) Added in 7.0, see Aggregate functions. EF.Functions.Sum(durations) sum(durations) Added in 7.0, see Aggregate functions. EF.Functions.Average(periods) avg(durations) Added in 7.0, see Aggregate functions. EF.Functions.Average(durations) avg(durations) Added in 7.0, see Aggregate functions. In addition to the above, most arithmetic operators are also translated (e.g. LocalDate + Period)."
  },
  "efcore/mapping/nts.html": {
    "href": "efcore/mapping/nts.html",
    "title": "Spatial Mapping with NetTopologySuite | Npgsql Documentation",
    "keywords": "Spatial Mapping with NetTopologySuite Note It's recommended that you start by reading the general Entity Framework Core docs on spatial support. PostgreSQL supports spatial data and operations via the PostGIS extension, which is a mature and feature-rich database spatial implementation. .NET doesn't provide a standard spatial library, but NetTopologySuite is a leading spatial library. The Npgsql EF Core provider has a plugin which allows you to map the NTS types to PostGIS columns, allowing seamless reading and writing. This is the recommended way to interact with spatial types in Npgsql. Note that the EF Core NetTopologySuite plugin depends on the Npgsql ADO.NET NetTopology plugin, which provides NetTopologySuite support at the lower level. Setup To use the NetTopologySuite plugin, add the Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite nuget to your project. Then, configure the NetTopologySuite plugin as follows: EF 9.0, with a connection string With an external NpgsqlDataSource Older EF versions, with a connection string If you're passing a connection string to UseNpgsql, simply add the UseNetTopologySuite call as follows: builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql( \"<connection string>\", o => o.UseNetTopologySuite())); This configures all aspects of Npgsql to use the NetTopologySuite plugin - both at the EF and the lower-level Npgsql layer. If you're creating an external NpgsqlDataSource and passing it to UseNpgsql, you must call UseNetTopologySuite on your NpgsqlDataSourceBuilder independently of the EF-level setup: var dataSourceBuilder = new NpgsqlDataSourceBuilder(\"<connection string>\"); dataSourceBuilder.UseNetTopologySuite(); var dataSource = dataSourceBuilder.Build(); builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql( dataSource, o => o.UseNetTopologySuite())); // Configure NetTopologySuite at the ADO.NET level. // This code must be placed at the beginning of your application, before any other Npgsql API is called; an appropriate place for this is in the static constructor on your DbContext class: static MyDbContext() => NpgsqlConnection.GlobalTypeMapper.UseNetTopologySuite(); // Then, when configuring EF Core with UseNpgsql(), call UseNetTopologySuite(): builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql(\"<connection string>\", o => o.UseNetTopologySuite())); The above sets up all the necessary EF mappings and operation translators. If you're using EF 6.0, you also need to make sure that the PostGIS extension is installed in your database (later versions do this automatically). Add the following to your DbContext: protected override void OnModelCreating(ModelBuilder builder) { builder.HasPostgresExtension(\"postgis\"); } At this point spatial support is set up. You can now use NetTopologySuite types as regular properties in your entities, and even perform some operations: public class City { public int Id { get; set; } public string Name { get; set; } public Point Location { get; set; } } var nearbyCities = context.Cities.Where(c => c.Location.Distance(somePoint) < 100); Constraining your type names With the code above, the provider will create a database column of type geometry. This is perfectly fine, but be aware that this type accepts any geometry type (point, polygon...), with any coordinate system (XY, XYZ...). It's good practice to constrain the column to the exact type of data you will be storing, but unfortunately the provider isn't aware of your required coordinate system and therefore can't do that for you. Consider explicitly specifying your column types on your properties as follows: [Column(TypeName=\"geometry (point)\")] public Point Location { get; set; } This will constrain your column to XY points only. The same can be done via the fluent API with HasColumnType(). Geography (geodetic) support PostGIS has two types: geometry (for Cartesian coordinates) and geography (for geodetic or spherical coordinates). You can read about the geometry/geography distinction in the PostGIS docs or in this blog post. In a nutshell, geography is much more accurate when doing calculations over long distances, but is more expensive computationally and supports only a small subset of the spatial operations supported by geometry. The Npgsql provider will be default map all NetTopologySuite types to PostGIS geometry. However, you can instruct it to map certain properties to geography instead: protected override void OnModelCreating(ModelBuilder builder) { builder.Entity<City>().Property(b => b.Location).HasColumnType(\"geography (point)\"); } or via an attribute: public class City { public int Id { get; set; } public string Name { get; set; } [Column(TypeName=\"geography\")] public Point Location { get; set; } } Once you do this, your column will be created as geography, and spatial operations will behave as expected. Operation translation The following table lists NetTopologySuite operations which are translated to PostGIS SQL operations. This allows you to use these NetTopologySuite methods and members efficiently - evaluation will happen on the server side. Since evaluation happens at the server, table data doesn't need to be transferred to the client (saving bandwidth), and in some cases indexes can be used to speed things up. Note that the plugin is far from covering all spatial operations. If an operation you need is missing, please open an issue to request for it. .NET SQL Notes geom.Area() ST_Area(geom) geom.AsBinary() ST_AsBinary(geom) geom.AsText() ST_AsText(geom) geom.Boundary ST_Boundary(geom) geom.Buffer(d) ST_Buffer(geom,d) geom.Centroid ST_Centroid(geom) geom1.Contains(geom2) ST_Contains(geom1, geom2) geomCollection.Count ST_NumGeometries(geom1) linestring.Count ST_NumPoints(linestring) geom1.ConvexHull() ST_ConvexHull(geom1) geom1.Covers(geom2) ST_Covers(geom1, geom2) geom1.CoveredBy(geom2) ST_CoveredBy(geom1, geom2) geom1.Crosses(geom2) ST_Crosses(geom1, geom2) geom1.Difference(geom2) ST_Difference(geom1, geom2) geom1.Dimension ST_Dimension(geom1) geom1.Disjoint(geom2) ST_Disjoint(geom1, geom2) geom1.Distance(geom2) ST_Distance(geom1, geom2) EF.Functions.DistanceKnn(geom1, geom2) geom1 <-> geom2 Added in 6.0 EF.Functions.Distance(geom1, geom2, useSpheriod) ST_Distance(geom1, geom2, useSpheriod) Added in 6.0 geom1.Envelope ST_Envelope(geom1) geom1.ExactEquals(geom2) ST_OrderingEquals(geom1, geom2) lineString.EndPoint ST_EndPoint(lineString) polygon.ExteriorRing ST_ExteriorRing(polygon) geom1.Equals(geom2) geom1 = geom2 geom1.Polygon.EqualsExact(geom2) geom1 = geom2 geom1.EqualsTopologically(geom2) ST_Equals(geom1, geom2) EF.Functions.Force2D ST_Force2D(geom) Added in 6.0 geom.GeometryType GeometryType(geom) geomCollection.GetGeometryN(i) ST_GeometryN(geomCollection, i) linestring.GetPointN(i) ST_PointN(linestring, i) geom1.Intersection(geom2) ST_Intersection(geom1, geom2) geom1.Intersects(geom2) ST_Intersects(geom1, geom2) geom.InteriorPoint ST_PointOnSurface(geom) lineString.IsClosed() ST_IsClosed(lineString) geomCollection.IsEmpty() ST_IsEmpty(geomCollection) linestring.IsRing ST_IsRing(linestring) geom.IsWithinDistance(geom2,d) ST_DWithin(geom1, geom2, d) EF.Functions.IsWithinDistance(geom1, geom2, d, useSpheriod) ST_DWithin(geom1, geom2, d, useSpheriod) Added in 6.0 geom.IsSimple() ST_IsSimple(geom) geom.IsValid() ST_IsValid(geom) lineString.Length ST_Length(lineString) geom.Normalized ST_Normalize(geom) geomCollection.NumGeometries ST_NumGeometries(geomCollection) polygon.NumInteriorRings ST_NumInteriorRings(polygon) lineString.NumPoints ST_NumPoints(lineString) geom1.Overlaps(geom2) ST_Overlaps(geom1, geom2) geom.PointOnSurface ST_PointOnSurface(geom) geom1.Relate(geom2) ST_Relate(geom1, geom2) geom.Reverse() ST_Reverse(geom) geom1.SRID ST_SRID(geom1) lineString.StartPoint ST_StartPoint(lineString) geom1.SymmetricDifference(geom2) ST_SymDifference(geom1, geom2) geom.ToBinary() ST_AsBinary(geom) geom.ToText() ST_AsText(geom) geom1.Touches(geom2) ST_Touches(geom1, geom2) EF.Functions.Transform(geom, srid) ST_Transform(geom, srid) geom1.Union(geom2) ST_Union(geom1, geom2) geom1.Within(geom2) ST_Within(geom1, geom2) point.M ST_M(point) point.X ST_X(point) point.Y ST_Y(point) point.Z ST_Z(point) UnaryUnionOp.Union(geometries) ST_Union(geometries) Added in 7.0, see Aggregate functions. GeometryCombiner.Combine(geometries) ST_Collect(geometries) Added in 7.0, see Aggregate functions. EnvelopeCombiner.CombineAsGeometry(geometries) ST_Extent(geometries)::geometry Added in 7.0, see Aggregate functions. ConvexHull.Create(geometries) ST_ConvexHull(geometries) Added in 7.0, see Aggregate functions."
  },
  "efcore/mapping/range.html": {
    "href": "efcore/mapping/range.html",
    "title": "Ranges and Multiranges | Npgsql Documentation",
    "keywords": "Ranges and Multiranges PostgreSQL has the unique feature of supporting range data types. Ranges represent a range of numbers, dates or other data types, and allow you to easily query ranges which contain a value, perform set operations (e.g. query ranges which contain other ranges), and other similar operations. The range operations supported by PostgreSQL are listed in this page. The Npgsql EF Core provider allows you to seamlessly map PostgreSQL ranges, and even perform operations on them that get translated to SQL for server evaluation. In addition, PostgreSQL 14 introduced multiranges, which are basically sorted arrays of non-overlapping ranges with set-theoretic operations defined over them. Most range operators also work on multiranges, and they have a few functions of their own. Multirange support in the EF Core provider was introduced in version 6.0.0. Ranges Npgsql maps PostgreSQL ranges to the generic CLR type NpgsqlRange<T>: public class Event { public int Id { get; set; } public string Name { get; set; } public NpgsqlRange<DateTime> Duration { get; set; } } This will create a column of type daterange in your database. You can similarly have properties of type NpgsqlRange<int>, NpgsqlRange<long>, etc. User-defined ranges PostgreSQL comes with 6 built-in ranges: int4range, int8range, numrange, tsrange, tstzrange, daterange; these can be used simply by adding the appropriate NpgsqlRange<T> property in your entities as shown above. You can also define your own range types over arbitrary types, and use those in EF Core as well. To make the EF Core type mapper aware of your user-defined range, call the MapRange() method in your context's OnConfiguring() method as follows: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => options.MapRange<float>(\"floatrange\")); This allows you to have properties of type NpgsqlRange<float>, which will be mapped to PostgreSQL floatrange. The above does not create the floatrange type for you. In order to do that, include the following in your context's OnModelCreating(): protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.HasPostgresRange(\"floatrange\", \"real\"); This will cause the appropriate CREATE TYPE ... AS RANGE statement to be generated in your migrations, ensuring that your range is created and ready for use. Note that HasPostgresRange() supports additional parameters as supported by PostgreSQL CREATE TYPE. Multiranges Note This feature was introduced in version 6.0 Npgsql maps arrays or lists of NpgsqlRange<T> to PostgreSQL multiranges: public class Store { public int Id { get; set; } public string Name { get; set; } public NpgsqlRange<DateTime>[] OpeningTimes { get; set; } } Operation translation Ranges can be queried via extensions methods on NpgsqlRange: var events = context.Events.Where(p => p.Duration.Contains(someDate)); This will translate to an SQL operation using the PostgreSQL @> operator, evaluating at the server and saving you from transferring the entire Events table to the client. Note that you can (and probably should) create indexes to make this operation more efficient, see the PostgreSQL docs for more info. The following table lists the range operations that currently get translated. Most operations work on both ranges and multiranges (starting with version 6.0.0); the multirange version is omitted for brevity. If you run into a missing operation, please open an issue. .NET SQL range.LowerBound lower(range) range.UpperBound upper(range) range.LowerBoundIsInclusive lower_inc(range) range.UpperBoundIsInclusive upper_inc(range) range.LowerBoundIsInfinite lower_inf(range) range.UpperBoundIsInfinite upper_inf(range) range.IsEmpty isempty(range) multirange.Any() NOT is_empty(multirange) range.Contains(i) range @> i range1.Contains(range2) range @> range2 range1.ContainedBy(range2) range1 <@ range2 range1.Overlaps(range2) range1 && range2 range1.IsStrictlyLeftOf(range2) range1 << range2 range1.IsStrictlyRightOf(range2) range1 >> range2 range1.DoesNotExtendLeftOf(range2) range1 &> range2 range1.DoesNotExtendRightOf(range2) range1 <& range2 range1.IsAdjacentTo(range2) range1 -|- range2 range1.Union(range2) range1 + range2 range1.Intersect(range2) range1 * range2 range1.Except(range2) range1 - range2 range1.Merge(range2) range_merge(range1, range2) multirange.Merge() range_merge(multirange) ranges.RangeAgg() range_agg(ranges) ranges.RangeIntersectAgg() range_intersect_agg(ranges) multiranges.RangeIntersectAgg() range_intersect_agg(multiranges) Added in 7.0, See Aggregate functions."
  },
  "efcore/mapping/translations.html": {
    "href": "efcore/mapping/translations.html",
    "title": "Translations | Npgsql Documentation",
    "keywords": "Translations Entity Framework Core allows providers to translate query expressions to SQL for database evaluation. For example, PostgreSQL supports regular expression operations, and the Npgsql EF Core provider automatically translates .NET's Regex.IsMatch to use this feature. Since evaluation happens at the server, table data doesn't need to be transferred to the client (saving bandwidth), and in some cases indexes can be used to speed things up. The same C# code on other providers will trigger client evaluation. The Npgsql-specific translations are listed below. Some areas, such as full-text search, have their own pages in this section which list additional translations. String functions .NET SQL Notes EF.Functions.Collate(operand, collation) operand COLLATE collation Added in 5.0 EF.Functions.Like(matchExpression, pattern) matchExpression LIKE pattern EF.Functions.Like(matchExpression, pattern, escapeCharacter) matchExpression LIKE pattern ESCAPE escapeCharacter EF.Functions.ILike(matchExpression, pattern) matchExpression ILIKE pattern EF.Functions.ILike(matchExpression, pattern, escapeCharacter) matchExpression ILIKE pattern ESCAPE escapeCharacter string.Compare(strA, strB) CASE WHEN strA = strB THEN 0 ... END string.Concat(str0, str1) str0 || str1 string.IsNullOrEmpty(value) value IS NULL OR value = '' string.IsNullOrWhiteSpace(value) value IS NULL OR btrim(value, E' \\t\\n\\r') = '' stringValue.CompareTo(strB) CASE WHEN stringValue = strB THEN 0 ... END stringValue.Contains(value) stringValue LIKE %value% stringValue.EndsWith(value) stringValue LIKE '%' || value stringValue.FirstOrDefault() substr(stringValue, 1, 1) Added in 5.0 stringValue.IndexOf(value) strpos(stringValue, value) - 1 stringValue.LastOrDefault() substr(stringValue, length(stringValue), 1) Added in 5.0 stringValue.Length length(stringValue) stringValue.PadLeft(length) lpad(stringValue, length) stringValue.PadLeft(length, char) lpad(stringValue, length, char) stringValue.PadRight(length) rpad(stringValue, length) stringValue.PadRight(length, char) rpad(stringValue, length, char) stringValue.Replace(oldValue, newValue) replace(stringValue, oldValue, newValue) stringValue.StartsWith(value) stringValue LIKE value || '%' stringValue.Substring(startIndex, length) substr(stringValue, startIndex + 1, @length) stringValue.ToLower() lower(stringValue) stringValue.ToUpper() upper(stringValue) stringValue.Trim() btrim(stringValue) stringValue.Trim(trimChar) btrim(stringValue, trimChar) stringValue.TrimEnd() rtrim(stringValue) stringValue.TrimEnd(trimChar) rtrim(stringValue, trimChar) stringValue.TrimStart() ltrim(stringValue) stringValue.TrimStart(trimChar) ltrim(stringValue, trimChar) EF.Functions.Reverse(value) reverse(value) Regex.IsMatch(stringValue, \"^A+\") stringValue ~ '^A+' (with options) Regex.IsMatch(stringValue, \"^A+\", regexOptions) stringValue ~ '^A+' (with options) string.Join(\", \", a, b) concat_ws(', ', a, b) Added in 7.0 (previously array_to_string) string.Join(\", \", array) array_to_string(array, ', ', '') string.Join(\", \", agg_strings) string_agg(agg_strings, ', ') Added in 7.0, see Aggregate functions. EF.Functions.StringToArray(s, \"|\") string_agg(s, '|') Added in 8.0 EF.Functions.StringToArray(s, \"|\", \"FOO\") string_agg(s, '|', 'FOO') Added in 8.0 Date and time functions Note Some of the operations below depend on the concept of a \"local time zone\" (e.g. DateTime.Today). While in .NET this is the machine time zone where .NET is running, the corresponding PostgreSQL translations use the TimeZone connection parameter as the local time zone. Since version 6.0, many of the below DateTime translations are also supported on DateTimeOffset. See also Npgsql's NodaTime support, which is a better and safer way of interacting with date/time data. .NET SQL Notes DateTime.UtcNow (6.0+) now() See 6.0 release notes DateTime.Now (6.0+) now()::timestamp See 6.0 release notes DateTime.Today (6.0+) date_trunc('day', now()::timestamp) See 6.0 release notes DateTime.UtcNow (legacy) now() AT TIME ZONE 'UTC' See 6.0 release notes DateTime.Now (legacy) now() See 6.0 release notes DateTime.Today (legacy) date_trunc('day', now()) See 6.0 release notes dateTime.AddDays(1) dateTime + INTERVAL '1 days' dateTime.AddHours(value) dateTime + INTERVAL '1 hours' dateTime.AddMinutes(1) dateTime + INTERVAL '1 minutes' dateTime.AddMonths(1) dateTime + INTERVAL '1 months' dateTime.AddSeconds(1) dateTime + INTERVAL '1 seconds' dateTime.AddYears(1) dateTime + INTERVAL '1 years' dateTime.Date date_trunc('day', dateTime) dateTime.Day date_part('day', dateTime)::INT dateTime.DayOfWeek floor(date_part('dow', dateTime))::INT dateTime.DayOfYear date_part('doy', dateTime)::INT dateTime.Hour date_part('hour', dateTime)::INT dateTime.Minute date_part('minute', dateTime)::INT dateTime.Month date_part('month', dateTime)::INT dateTime.Second date_part('second', dateTime)::INT dateTime.Year date_part('year', dateTime)::INT dateTime.ToUniversalTime dateTime::timestamptz Added in 6.0 dateTime.ToLocalTime dateTime::timestamp Added in 6.0 dateTimeOffset.DateTime dateTimeOffset AT TIME ZONE 'UTC' Added in 6.0 dateTimeOffset.UtcDateTime No PG operation (.NET-side conversion from DateTimeOffset to DateTime only) Added in 6.0 dateTimeOffset.LocalDateTime dateTimeOffset::timestamp Added in 6.0 timeSpan.Days floor(date_part('day', timeSpan))::INT timeSpan.Hours floor(date_part('hour', timeSpan))::INT timeSpan.Minutes floor(date_part('minute', timeSpan))::INT timeSpan.Seconds floor(date_part('second', timeSpan))::INT timeSpan.Milliseconds floor(date_part('millisecond', timeSpan))::INT timeSpan.Milliseconds floor(date_part('millisecond', timeSpan))::INT timeSpan.TotalMilliseconds date_part('epoch', interval) / 0.001 Added in 6.0 timeSpan.TotalSeconds date_part('epoch', interval) Added in 6.0 timeSpan.TotalMinutes date_part('epoch', interval) / 60.0 Added in 6.0 timeSpan.TotalDays date_part('epoch', interval) / 86400.0 Added in 6.0 timeSpan.TotalHours date_part('epoch', interval) / 3600.0 Added in 6.0 dateTime1 - dateTime2 dateTime1 - dateTime2 TimeZoneInfo.ConvertTimeBySystemTimeZoneId(utcDateTime, timezone) utcDateTime AT TIME ZONE timezone Added in 6.0, only for timestamptz columns TimeZoneInfo.ConvertTimeToUtc(nonUtcDateTime) nonUtcDateTime::timestamptz Added in 6.0, only for timestamp columns DateTime.SpecifyKind(utcDateTime, DateTimeKind.Unspecified) utcDateTime AT TIME ZONE 'UTC' Added in 6.0, only for timestamptz columns DateTime.SpecifyKind(nonUtcDateTime, DateTimeKind.Utc) nonUtcDateTime AT TIME ZONE 'UTC' Added in 6.0, only for timestamp columns new DateTime(year, month, day) make_date(year, month, day) new DateTime(y, m, d, h, m, s) make_timestamp(y, m, d, h, m, s) new DateTime(y, m, d, h, m, s, kind) make_timestamp or make_timestamptz, based on kind Added in 6.0 EF.Functions.Sum(timespans) sum(timespans) Added in 7.0, see Aggregate functions. EF.Functions.Average(timespans) avg(timespans) Added in 7.0, see Aggregate functions. Miscellaneous functions .NET SQL collection.Contains(item) item IN collection enumValue.HasFlag(flag) enumValue & flag = flag Guid.NewGuid() uuid_generate_v4(), or gen_random_uuid() on PostgreSQL 13 with EF Core 5 and above. nullable.GetValueOrDefault() coalesce(nullable, 0) nullable.GetValueOrDefault(defaultValue) coalesce(nullable, defaultValue) Binary functions .NET SQL Notes bytes[i] get_byte(bytes, i) Added in 5.0 bytes.Contains(value) position(value IN bytes) > 0 Added in 5.0 bytes.Length length(@bytes) Added in 5.0 bytes1.SequenceEqual(bytes2) @bytes = @second Added in 5.0 Math functions .NET SQL Notes Math.Abs(value) abs(value) Math.Acos(d) acos(d) Math.Asin(d) asin(d) Math.Atan(d) atan(d) Math.Atan2(y, x) atan2(y, x) Math.Ceiling(d) ceiling(d) Math.Cos(d) cos(d) Math.Exp(d) exp(d) Math.Floor(d) floor(d) Math.Log(d) ln(d) Math.Log10(d) log(d) Math.Max(x, y) greatest(x, y) Math.Min(x, y) least(x, y) Math.Pow(x, y) power(x, y) Math.Round(d) round(d) Math.Round(d, decimals) round(d, decimals) Math.Sin(a) sin(a) Math.Sign(value) sign(value)::int Math.Sqrt(d) sqrt(d) Math.Tan(a) tan(a) Math.Truncate(d) trunc(d) EF.Functions.Random() random() Added in 6.0 See also Aggregate statistics functions. Row value comparisons The following allow expressing comparisons over SQL row values. This are particularly useful for implementing efficient pagination, see the EF Core docs for more information. Note All of the below were introduced in version 7.0 of the provider. .NET SQL EF.Functions.GreaterThan(ValueTuple.Create(a, b), ValueTuple.Create(c, d)) (a, b) > (c, d) EF.Functions.LessThan(ValueTuple.Create(a, b), ValueTuple.Create(c, d)) (a, b) < (c, d) EF.Functions.GreaterThanOrEqual(ValueTuple.Create(a, b), ValueTuple.Create(c, d)) (a, b) >= (c, d) EF.Functions.LessThanOrEqual(ValueTuple.Create(a, b), ValueTuple.Create(c, d)) (a, b) <= (c, d) ValueTuple.Create(a, b).Equals(ValueTuple.Create(c, d)) (a, b) = (c, d) !ValueTuple.Create(a, b).Equals(ValueTuple.Create(c, d)) (a, b) <> (c, d) Network functions Note As of Npgsql 8.0, IPAddress and NpgsqlCidr are implicitly convertible to NpgsqlInet, and so can be used with the functions below which accept inet. .NET SQL IPAddress.Parse(string) CAST(string AS inet) PhysicalAddress.Parse(string) CAST(string AS macaddr) EF.Functions.LessThan(net1, net2) net1 < net2 EF.Functions.LessThanOrEqual(net1, net2) net1 <= net2 EF.Functions.GreaterThan(net1, net2) net1 > net2 EF.Functions.GreaterThanOrEqual(net1, net2) net1 >= net2 EF.Functions.ContainedBy(inet1, inet2) inet1 << inet2 EF.Functions.ContainedByOrEqual(inet1, inet2) inet1 <<= inet2 EF.Functions.Contains(inet1, inet2) inet1 >> inet2 EF.Functions.ContainsOrEqual(inet1, inet2) inet1 >>= inet2 EF.Functions.ContainsOrContainedBy(inet1, inet2) inet1 && inet2 EF.Functions.BitwiseNot(net) ~net1 EF.Functions.BitwiseAnd(net1, net2) net1 & net2 EF.Functions.BitwiseOr(net1, net2) net1 | net2 EF.Functions.Add(inet, int) inet + int EF.Functions.Subtract(inet, int) inet - int EF.Functions.Subtract(inet1, inet2) inet1 - inet2 EF.Functions.Abbreviate(inet) abbrev(inet) EF.Functions.Abbreviate(cidr) abbrev(cidr) EF.Functions.Broadcast(inet) broadcast(inet) EF.Functions.Family(inet) family(inet) EF.Functions.Host(inet) host(inet) EF.Functions.HostMark(inet) hostmask(inet) EF.Functions.MaskLength(inet) masklen(inet) EF.Functions.Netmask(inet) netmask(inet) EF.Functions.Network(inet) network(inet) EF.Functions.SetMaskLength(inet) set_masklen(inet) EF.Functions.SetMaskLength(cidr) set_masklen(cidr) EF.Functions.Text(inet) text(inet) EF.Functions.SameFamily(inet1, inet2) inet_same_family(inet1, inet2) EF.Functions.Merge(inet1, inet2) inet_merge(inet1, inet2) EF.Functions.Truncate(macaddr) trunc(macaddr) EF.Functions.Set7BitMac8(macaddr8) macaddr8_set7bit(macaddr8) Trigram functions The below translations provide functionality for determining the similarity of alphanumeric text based on trigram matching, using the pg_trgm extension which is bundled with standard PostgreSQL distributions. All the below parameters are strings. Note Prior to version 6.0, to use these translations, your project must depend on the Npgsql.EntityFrameworkCore.PostgreSQL.Trigrams package, and call UseTrigrams() in your OnModelConfiguring. .NET SQL EF.Functions.TrigramsShow(s) show_trgm(s) EF.Functions.TrigramsSimilarity(s1, s2) similarity(s1, s2) EF.Functions.TrigramsWordSimilarity(s1, s2) word_similarity(s1, s2) EF.Functions.TrigramsStrictWordSimilarity(s1, s2) strict_word_similarity(s1, s2) EF.Functions.TrigramsAreSimilar(s1, s2) s1 % s2 EF.Functions.TrigramsAreWordSimilar(s1, s2) s1 <% s2 EF.Functions.TrigramsAreNotWordSimilar(s1, s2) s1 %> s2 EF.Functions.TrigramsAreStrictWordSimilar(s1, s2) s1 <<% s2 EF.Functions.TrigramsAreNotStrictWordSimilar(s1, s2) s1 %>> s2 EF.Functions.TrigramsSimilarityDistance(s1, s2) s1 <-> s2 EF.Functions.TrigramsWordSimilarityDistance(s1, s2) s1 <<-> s2 EF.Functions.TrigramsWordSimilarityDistanceInverted(s1, s2) s1 <->> s2 EF.Functions.TrigramsStrictWordSimilarityDistance(s1, s2) s1 <<<-> s2 EF.Functions.TrigramsStrictWordSimilarityDistanceInverted(s1, s2) s1 <->>> s2 LTree functions The below translations are for working with label trees from the PostgreSQL ltree extension. Use the LTree type to represent ltree and invoke methods on it in EF Core LINQ queries. Note LTree support was introduced in version 6.0 of the provider, and requires PostgreSQL 13 or later. .NET SQL ltree1.IsAncestorOf(ltree2) ltree1 @> ltree2 ltree1.IsDescendantOf(ltree2) ltree1 <@ ltree2 ltree.MatchesLQuery(lquery) ltree ~ lquery ltree.MatchesLTxtQuery(ltxtquery) ltree @ ltxtquery lqueries.Any(q => ltree.MatchesLQuery(q)) ltree ? lqueries ltrees.Any(t => t.IsAncestorOf(ltree)) ltrees @> ltree ltrees.Any(t => t.IsDescendantOf(ltree)) ltrees <@ ltree ltrees.Any(t => t.MatchesLQuery(lquery)) ltrees ~ ltree ltrees.Any(t => t.MatchesLTxtQuery(ltxtquery)) ltrees @ ltxtquery ltrees.Any(t => lqueries.Any(q => t.MatchesLQuery(q))) ltrees ? lqueries ltrees.FirstOrDefault(l => l.IsAncestorOf(ltree)) ltrees ?@> ltree ltrees.FirstOrDefault(l => l.IsDescendantOf(ltree)) ltrees ?<@ ltree ltrees.FirstOrDefault(l => l.MatchesLQuery(lquery)) ltrees ?~ ltree ltrees.FirstOrDefault(l => l.MatchesLTxtQuery(ltxtquery)) ltrees ?@ ltree ltree.Subtree(0, 1) subltree(ltree, 0, 1) ltree.Subpath(0, 1) sublpath(ltree, 0, 1) ltree.Subpath(2) sublpath(ltree, 2) ltree.NLevel nlevel(ltree) ltree.Index(subpath) index(ltree, subpath) ltree.Index(subpath, 2) index(ltree, subpath, 2) LTree.LongestCommonAncestor(ltree1, ltree2) lca(index(ltree1, ltree2) Aggregate functions The PostgreSQL aggregate functions are documented here. Note All the below aggregate functions were added in version 7.0. .NET SQL string.Join(\", \", agg_strings) string_agg(agg_strings, ', ') EF.Functions.ArrayAgg(values) array_agg(values) EF.Functions.JsonbAgg(values) jsonb_agg(values) EF.Functions.JsonAgg(values) json_agg(values) EF.Functions.Sum(timespans) sum(timespans) EF.Functions.Average(timespans) avg(timespans) EF.Functions.JsonObjectAgg(tuple_of_2) json_object_agg(tuple_of_2.first, tuple_of_2.second) ranges.RangeAgg() range_agg(ranges) ranges.RangeIntersectAgg() range_intersect_agg(ranges) multiranges.RangeIntersectAgg() range_intersect_agg(multiranges) EF.Functions.StandardDeviationSample(values) stddev_samp(values) EF.Functions.StandardDeviationPopulation(values) stddev_pop(values) EF.Functions.VarianceSample(values) var_samp(values) EF.Functions.VariancePopulation(values) var_pop(values) EF.Functions.Correlation(tuple) corr(tuple_of_2.first, tuple_of_2.second) EF.Functions.CovariancePopulation(tuple) covar_pop(tuple_of_2.first, tuple_of_2.second) EF.Functions.CovarianceSample(tuple) covar_samp(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrAverageX(tuple) regr_avgx(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrAverageY(tuple) regr_avgy(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrCount(tuple) regr_count(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrIntercept(tuple) regr_intercept(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrR2(tuple) regr_r2(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrSlope(tuple) regr_slope(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrSXX(tuple) regr_sxx(tuple_of_2.first, tuple_of_2.second) EF.Functions.RegrSXY(tuple) regr_sxy(tuple_of_2.first, tuple_of_2.second) Aggregate functions can be used as follows: var query = ctx.Set<Customer>() .GroupBy(c => c.City) .Select( g => new { City = g.Key, Companies = EF.Functions.ArrayAgg(g.Select(c => c.ContactName)) }); To use functions accepting a tuple_of_2, project out from the group as follows: var query = ctx.Set<Customer>() .GroupBy(c => c.City) .Select( g => new { City = g.Key, Companies = EF.Functions.JsonObjectAgg(g.Select(c => ValueTuple.Create(c.CompanyName, c.ContactName))) });"
  },
  "efcore/misc/collations-and-case-sensitivity.html": {
    "href": "efcore/misc/collations-and-case-sensitivity.html",
    "title": "Collations and Case Sensitivity | Npgsql Documentation",
    "keywords": "Collations and Case Sensitivity Note This feature is introduced in EF Core 5.0. It's recommended that you start by reading the general Entity Framework Core docs on collations and case sensitivity. PostgreSQL is a case-sensitive database by default, but provides various possibilities for performing case-insensitive operations and working with collations. Unfortunately, full collation support is recent and somewhat incomplete, so you may need to carefully review your options below and pick the one which suits you. PostgreSQL collations While PostgreSQL has supported collations for a long time, supported was limited to \"deterministic\" collations, which did not allow for case-insensitive or accent-insensitive operations. PostgreSQL 12 introduced non-deterministic ICU collations, so it is now possible to use collations in a more flexible way. Read more about PostgreSQL collation support in the documentation. Note It is not yet possible to use pattern matching operators such as LIKE on columns with a non-deterministic collation. Creating a collation In PostgreSQL, collations are first-class, named database objects which can be created and dropped, just like tables. To create a collation, place the following in your context's OnModelCreating: modelBuilder.HasCollation(\"my_collation\", locale: \"en-u-ks-primary\", provider: \"icu\", deterministic: false); This creates a collation with the name my_collation: this is an arbitrary name you can choose, which you will be specifying later when assigning the collation to columns. The rest of the parameters instruct PostgreSQL to create a non-deterministic, case-insensitive ICU collation. ICU collations are very powerful, and allow you to specify precise rules with regards to case, accents and other textual aspects. Consult the ICU docs for more information on supported features and keywords. Column collation Once a collation has been created in your database, you can specify it on columns: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.HasCollation(\"my_collation\", locale: \"en-u-ks-primary\", provider: \"icu\", deterministic: false); modelBuilder.Entity<Customer>().Property(c => c.Name) .UseCollation(\"my_collation\"); } This will cause all textual operators on this column to be case-insensitive. Database collation PostgreSQL also allows you to specify collations at the database level, when it is created: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.UseCollation(\"<collation_name>\"); } Unfortunately, the database collation is quite limited in PostgreSQL; it notably does not support non-deterministic collations (e.g. case-insensitive ones). To work around this limitation, you can use EF Core's pre-convention model configuration feature: protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder) { configurationBuilder.Properties<string>().UseCollation(\"my_collation\"); } All columns created with this configuration will automatically have their collation specified accordingly, and all existing columns will be altered. The end result of the above is very similar to specifying a database collation: instead of telling PostgreSQL to implicit apply a collation to all columns, EF Core will do the same for you in its migrations. The citext type The older PostgreSQL method for performing case-insensitive text operations is the citext type; it is similar to the text type, but operators are functions between citext values are implicitly case-insensitive. The PostgreSQL docs provide more information on this type. citext is available in a PostgreSQL-bundled extension, so you'll first have to install it: modelBuilder.HasPostgresExtension(\"citext\"); Specifying that a column should use citext is simply a matter of setting the column's type: Data Annotations Fluent API public class Blog { public int Id { get; set; } [Column(TypeName = \"citext\")] public string Name { get; set; } } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Blog>().Property(b => b.Name) .HasColumnType(\"citext\"); } Some limitations (others are listed in the PostgreSQL docs): While citext allows case-insensitive comparisons, it doesn't handle other aspects of collations, such as accents. Several PostgreSQL text functions are overloaded to work with citext as expected, but others aren't. Using a function that isn't overloaded will result in a regular, case-sensitive match. Unlike collations, citext does not allow the same column to be compared case-sensitively in some queries, and and insensitively in others. ILIKE ILIKE is a PostgreSQL-specific operator that works just like LIKE, but is case-insensitive. If you only need to perform case-insensitive LIKE pattern matching, then this could be sufficient. The provider exposes this via EF.Functions.ILike: var results = ctx.Blogs .Where(b => EF.Functions.ILike(b.Name, \"a%b\")) .ToList();"
  },
  "efcore/misc/database-creation.html": {
    "href": "efcore/misc/database-creation.html",
    "title": "Database Creation | Npgsql Documentation",
    "keywords": "Database Creation Specifying the administrative db When the Npgsql EF Core provider creates or deletes a database (EnsureCreated(), EnsureDeleted()), it must connect to an administrative database which already exists (with PostgreSQL you always have to be connected to some database, even when creating/deleting another database). Up to now the postgres database was used, which is supposed to always be present. However, there are some PostgreSQL-like databases where the postgres database is not available. For these cases you can specify the administrative database as follows: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => options.UseAdminDatabase(\"my_admin_db\")); Using a database template When creating a new database, PostgreSQL allows specifying another \"template database\" which will be copied as the basis for the new one. This can be useful for including database entities which are not managed by Entity Framework Core. You can trigger this by using HasDatabaseTemplate in your context's OnModelCreating: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseDatabaseTemplate(\"my_template_db\"); Setting a tablespace PostgreSQL allows you to locate your database in different parts of your filesystem, via tablespaces. The Npgsql EF Core provider allows you to specify your database's namespace: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseTablespace(\"my_tablespace\"); You must have created your tablespace prior to this via the CREATE TABLESPACE command - the Npgsql EF Core provider does not do this for you. Note also that specifying a tablespace on specific tables is not supported."
  },
  "efcore/misc/other.html": {
    "href": "efcore/misc/other.html",
    "title": "Other | Npgsql Documentation",
    "keywords": "Other PostgreSQL extensions The Npgsql EF Core provider allows you to specify PostgreSQL extensions that should be set up in your database. Simply use HasPostgresExtension in your context's OnModelCreating method: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.HasPostgresExtension(\"hstore\"); Execution Strategy The Npgsql EF Core provider provides a retrying execution strategy, which will attempt to detect most transient PostgreSQL/network errors and will automatically retry your operation. To enable, place the following code in your context's OnModelConfiguring: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => options.EnableRetryOnFailure()); This strategy relies on the IsTransient property of NpgsqlException. Certificate authentication The Npgsql allows you to provide a callback for verifying the server-provided certificates, and to provide a callback for providing certificates to the server. The latter, if properly set up on the PostgreSQL side, allows you to do client certificate authentication - see the Npgsql docs and also the PostgreSQL docs on setting this up. The Npgsql EF Core provider allows you to set these two callbacks on the DbContextOptionsBuilder as follows: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => { options.RemoteCertificateValidationCallback(MyCallback1); options.ProvideClientCertificatesCallback(MyCallback2); }); You may also consider passing Trust Server Certificate=true in your connection string to make Npgsql accept whatever certificate your PostgreSQL provides (useful for self-signed certificates). Caution When specifying the options via OnConfiguring, make sure that the callbacks you pass in are static methods. Passing in instance methods causes EF Core to create a new service provider for each context instance, which can degrade performance in a significant way. CockroachDB Interleave In Parent If you're using CockroachDB, the Npgsql EF Core provider exposes its \"interleave in parent\" feature. Use the following code: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Customer>() .UseCockroachDbInterleaveInParent( typeof(ParentEntityType), new List<string> { \"prefix_column_1\", \"prefix_column_2\" });"
  },
  "efcore/modeling/concurrency.html": {
    "href": "efcore/modeling/concurrency.html",
    "title": "Concurrency Tokens | Npgsql Documentation",
    "keywords": "Concurrency Tokens Note Please read the general Entity Framework Core docs on concurrency tokens. Entity Framework Core supports the concept of optimistic concurrency - a property on your entity is designated as a concurrency token, and EF Core detects concurrent modifications by checking whether that token has changed since the entity was read. The PostgreSQL xmin system column Although applications can update concurrency tokens themselves, we frequently rely on the database automatically updating a column on update - a \"last modified\" timestamp, an SQL Server rowversion, etc. Unfortunately PostgreSQL doesn't have such auto-updating columns - but there is one feature that can be used for concurrency token. All PostgreSQL tables have a set of implicit and hidden system columns, among which xmin holds the ID of the latest updating transaction. Since this value automatically gets updated every time the row is changed, it is ideal for use as a concurrency token. Starting with version 7.0, you can map a uint property to the PostgreSQL xmin system column using the standard EF Core mechanisms: Data Annotations Fluent API public class SomeEntity { public int Id { get; set; } [Timestamp] public uint Version { get; set; } } class MyContext : DbContext { public DbSet<SomeEntity> SomeEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<SomeEntity>() .Property(b => b.Version) .IsRowVersion(); } } public class SomeEntity { public int Id { get; set; } public uint Version { get; set; } } In older version of the provider, use the following instead: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Blog>().UseXminAsConcurrencyToken(); }"
  },
  "efcore/modeling/generated-properties.html": {
    "href": "efcore/modeling/generated-properties.html",
    "title": "Value Generation | Npgsql Documentation",
    "keywords": "Value Generation Caution In 3.0.0, the default value generation strategy has changed from the older SERIAL columns to the newer IDENTITY columns. Read the information below carefully if you are migrating an existing database. Note It's recommended that you start by reading the general Entity Framework Core docs on generated properties. Identity and serial columns (auto-increment) Introduction Since PostgreSQL 10, the standard way to define auto-incrementing columns is \"identity columns\". Prior to version 10, \"serial columns\" were used, which are less SQL-compliant and generally more difficult to manage. For more information on these, see this blog post. Note that since PostgreSQL 10, both support smallint, integer and bigint as their data type. The Npgsql EF Core provider allows you to choose which of the above you want on a property-by-property basis, or globally on your model. The following \"value generation strategies\" are available: Identity by default: an identity column whose values are by default generated at the database, but you can still override this behavior by providing values from your application. This will generate the clause GENERATED BY DEFAULT AS IDENTITY on your column, and is the default value generation strategy. Identity always: an identity column whose values are always generated at the database - you cannot provide values from your application. This will generate the clause GENERATED ALWAYS AS IDENTITY on your column. Serial: the traditional PostgreSQL serial column. This will create the column with the serial datatype. Recommended only if you are using an older PostgreSQL version. Sequence HiLo: See below The default value generation strategy is \"identity by default\". In other words, when EF decides that an int property should be value generated (e.g. because it's named Id, or because you explicitly specified ValueGeneratedOnAdd on it), the Npgsql provider will automatically map it to an identity column. Defining the default strategy for the entire model You can easily control the value generation strategy for the entire model. For example, to opt out of the change to identity columns, simply place the following in your context's OnModelCreating(): protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseIdentityByDefaultColumns(); Defining the strategy for a single property Regardless of the model default, you can define a value-generation strategy on a property-by-property basis: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>().Property(b => b.Id).UseIdentityAlwaysColumn(); Identity sequence options Identity columns have a standard sequence, managed behind the scenes by PostgreSQL; you can customize the sequence options for these. For example, the following makes the column values start at 100: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>().Property(b => b.Id) .HasIdentityOptions(startValue: 100); This can be especially useful when seeding data. Seeded data must explicitly specify all columns - including database-generated ones - but the backing sequence for identity columns isn't aware that the values are in use, and will generate conflicting values. This technique allows to start your identity sequence at a value higher than all seeded data values. Another strategy is to seed negative values only, allowing your identity column to start at 1. It is not possible to specify sequence options for serial columns, but you can set up a sequence separately and configure the column's default value (see sequence-driven columns). Standard sequence-driven columns While identity and serial columns set up a sequence for you behind the scenes, sometimes you may want to manage sequence creation yourself. For example, you may want to have multiple columns drawing their default values from a single sequence. Adding a sequence to your model is described in the general EF Core documentation; once the sequence is specified, you can simply set a column's default value to extract the next value from that sequence. Note that the SQL used to fetch the next value from a sequence differs across databases (see the PostgreSQL docs). Your models' OnModelCreating should look like this: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.HasSequence<int>(\"OrderNumbers\") .StartsAt(1000) .IncrementsBy(5); modelBuilder.Entity<Order>() .Property(o => o.OrderNo) .HasDefaultValueSql(\"nextval('\\\"OrderNumbers\\\"')\"); } HiLo Autoincrement Generation One disadvantage of database-generated values is that these values must be read back from the database after a row is inserted. If you're saving multiple related entities, this means you must perform multiple round-trips as the first entity's generated key must be read before writing the second one. One solution to this problem is HiLo value generation: rather than relying on the database to generate each and every value, the application \"allocates\" a range of values, which it can then populate directly on new entities without any additional round-trips. When the range is exhausted, a new range is allocated. In practical terms, this uses a sequence that increments by some large value (100 by default), allowing the application to insert 100 rows autonomously. To use HiLo, specify UseHiLo on a property in your model's OnModelCreating: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .Property(b => b.Id) .UseHiLo(); You can also make your model use HiLo everywhere: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseHiLo(); GUID/UUID Generation By default, for GUID key properties, a GUID is generated client-side by the EF provider and sent to the database. From version 9.0 and onwards, these GUIDs are sequential (version 7), which are more optimized for database indexes (before version 9.0, these GUIDs were random). To have the provider generate GUIDs client-side for non-key properties, configure them as follows: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder .Entity<Blog>() .Property(b => b.SomeGuidProperty) .HasValueGenerator<NpgsqlSequentialGuidValueGenerator>(); } If you prefer to generate values in the database instead, you can do so by specifying HasDefaultValueSql on your property, and call the function to generate the value in the SQL expression. Which function to use depends on your PostgreSQL version: PG 13+ Older protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder .Entity<Blog>() .Property(e => e.SomeGuidProperty) .HasDefaultValueSql(\"gen_random_uuid()\"); } Versions of PostgreSQL prior to 13 don't include any GUID/UUID generation functions, but extensions such as uuid-ossp or pgcrypto exist to fill thie gap. This can be done by placing the following code in your model's OnModelCreating: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.HasPostgresExtension(\"uuid-ossp\"); modelBuilder .Entity<Blog>() .Property(e => e.SomeGuidProperty) .HasDefaultValueSql(\"uuid_generate_v4()\"); } See the PostgreSQL docs on UUID for more details. Note Generating Guid values in the database causes an additional network roundtrip when a principal and a dependent are inserted in the same SaveChanges, as the principal's key needs to be fetched before inserting the dependent's. Timestamp generation In many scenarios, it's useful to have a column containing the timestamp when the row was originally created. To do this, add a DateTime property to your entity type (or Instant if using NodaTime) , and configure its default with HasDefaultValueSql as follows: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder .Entity<Blog>() .Property(e => e.SomeDateTimeProperty) .HasDefaultValueSql(\"now()\"); } In other scenarios, a \"last updated\" is needed, which is automatically updated every time is modified. Unfortunately, while PostgreSQL supports generated columns, the use of functions such as now() isn't supported. It's still possible to use database trigger to set this up; triggers can be managed by adding raw SQL to your migrations, as follows: CREATE FUNCTION \"Blogs_Update_Timestamp_Function\"() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN NEW.\"Timestamp\" := now(); RETURN NEW; END; $$; CREATE TRIGGER \"UpdateTimestamp\" BEFORE INSERT OR UPDATE ON \"Blogs\" FOR EACH ROW EXECUTE FUNCTION \"Blogs_Update_Timestamp_Function\"(); Computed Columns Note This feature works only on PostgreSQL 12 or above. PostgreSQL 12 added support for stored generated columns, and Npgsql feature supports that feature as well: Version 5.0 Version 3.x protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Person>() .Property(p => p.DisplayName) .HasComputedColumnSql(@\"\"\"FirstName\"\" || ' ' || \"\"LastName\"\"\", stored: true); } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Person>() .Property(p => p.DisplayName) .HasComputedColumnSql(@\"\"\"FirstName\"\" || ' ' || \"\"LastName\"\"\"); } This will cause the following migration SQL to be generated: ALTER TABLE \"\"Person\"\" ADD \"\"DisplayName\"\" text GENERATED ALWAYS AS (\"\"FirstName\"\" || ' ' || \"\"LastName\"\") STORED; Note that this is a stored column - it is computed once when the row is updated, and takes space on disk. Virtual computed columns, which are computed on each select, are not yet supported by PostgreSQL."
  },
  "efcore/modeling/indexes.html": {
    "href": "efcore/modeling/indexes.html",
    "title": "Indexes | Npgsql Documentation",
    "keywords": "Indexes PostgreSQL and the Npgsql provider support the standard index modeling described in the EF Core docs. This page describes some supported PostgreSQL-specific features. Covering indexes (INCLUDE) PostgreSQL supports covering indexes, which allow you to include \"non-key\" columns in your indexes. This allows you to perform index-only scans and can provide a significant performance boost: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .HasIndex(b => b.Id) .IncludeProperties(b => b.Name); This will create an index for searching on Id, but containing also the column Name, so that reading the latter will not involve accessing the table. The SQL generated is as follows: CREATE INDEX \"IX_Blog_Id\" ON blogs (\"Id\") INCLUDE (\"Name\"); Treating nulls as non-distinct Note This feature was introduced in version 7.0, and is available starting with PostgreSQL 15. By default, when you create a unique index, PostgreSQL treats null values as distinct; this means that a unique index can contain multiple null values in a column. When creating an index, you can also instruct PostgreSQL that nulls should be treated as non-distinct; this causes a unique constraint violation to be raised if a column contains multiple null values: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .IsUnique() .AreNullsDistinct(false); Index methods PostgreSQL supports a number of index methods, or types. These are specified at index creation time via the USING <method> clause, see the PostgreSQL docs for CREATE INDEX and this page for information on the different types. The Npgsql EF Core provider allows you to specify the index method to be used by calling HasMethod() on your index in your context's OnModelCreating method: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .HasIndex(b => b.Url) .HasMethod(\"gin\"); Index operator classes PostgreSQL allows you to specify operator classes on your indexes, to allow tweaking how the index should work. Use the following code to specify an operator class: protected override void OnConfiguring(DbContextOptionsBuilder builder) => modelBuilder.Entity<Blog>() .HasIndex(b => new { b.Id, b.Name }) .HasOperators(null, \"text_pattern_ops\"); Note that each operator class is used for the corresponding index column, by order. In the example above, the text_pattern_ops class will be used for the Name column, while the Id column will use the default class (unspecified), producing the following SQL: CREATE INDEX \"IX_blogs_Id_Name\" ON blogs (\"Id\", \"Name\" text_pattern_ops); Storage parameters PostgreSQL allows configuring indexes with storage parameters, which can tweak their behaviors in various ways; which storage parameters are available depends on the chosen index method. See the PostgreSQL documentation for more information. To configure a storage parameter on an index, use the following code: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .HasIndex(b => b.Url) .HasStorageParameter(\"fillfactor\", 70); Creating indexes concurrently Creating an index can interfere with regular operation of a database. Normally PostgreSQL locks the table to be indexed against writes and performs the entire index build with a single scan of the table. Other transactions can still read the table, but if they try to insert, update, or delete rows in the table they will block until the index build is finished. This could have a severe effect if the system is a live production database. Very large tables can take many hours to be indexed, and even for smaller tables, an index build can lock out writers for periods that are unacceptably long for a production system. The EF provider allows you to specify that an index should be created concurrently, partially mitigating the above issues: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .HasIndex(b => b.Url) .IsCreatedConcurrently(); Caution Do not enable this feature before reading the PostgreSQL documentation and understanding the full implications of concurrent index creation. Note Prior to version 5.0, IsCreatedConcurrently erroneously defaulted to false - explicitly pass true to configure the index for concurrent creation"
  },
  "efcore/modeling/tables.html": {
    "href": "efcore/modeling/tables.html",
    "title": "Tables | Npgsql Documentation",
    "keywords": "Tables Naming By default, EF Core will map to tables and columns named exactly after your .NET classes and properties, so an entity type named BlogPost will be mapped to a PostgreSQL table called BlogPost. While there's nothing wrong with that, the PostgreSQL world tends towards snake_case naming instead. In addition, any upper-case letters in unquoted identifiers are automatically converted to lower-case identifiers, so the Npgsql provider generates quotes around all such identifiers. Starting with 3.0.0, you can use the EFCore.NamingConventions plugin to automatically set all your table and column names to snake_case instead: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder .UseNpgsql(...) .UseSnakeCaseNamingConvention(); public class Customer { public int Id { get; set; } public string FullName { get; set; } } This will cause cleaner SQL such as the following to be generated: CREATE TABLE customers ( id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY, full_name text NULL, CONSTRAINT \"PK_customers\" PRIMARY KEY (id); SELECT c.id, c.full_name FROM customers AS c WHERE c.full_name = 'John Doe'; See the plugin documentation for more details, Storage parameters PostgreSQL allows configuring tables with storage parameters, which can tweak storage behavior in various ways; see the PostgreSQL documentation for more information. To configure a storage parameter on a table, use the following code: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>().HasStorageParameter(\"fillfactor\", 70);"
  },
  "efcore/release-notes/1.1.html": {
    "href": "efcore/release-notes/1.1.html",
    "title": "Migrating to 1.1 | Npgsql Documentation",
    "keywords": "Migrating to 1.1 Version 1.1.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 1.1.0 of Entity Framework Core, and contains some new Npgsql features as well. Note that if you're using the command-line tools, you'll have to modify your tools section as described in the EF Core release post: \"tools\": { \"Microsoft.EntityFrameworkCore.Tools.DotNet\": \"1.0.0-preview3-final\" }, New Features Aside from general EF Core features, version 1.1.0 of the Npgsql provider contains the following: Hilo key generation (#5). This can be a much more efficient way to generate autoincrement key values. PostgreSQL array mapping (#15). This allows you to have plain CLR arrays on your entities, and have those arrays mapped to native PostgreSQL array columns. Optimistic concurrency with PostgreSQL's xmin column (#19). Simply specify .UseXminAsConcurrencyToken() on an entity to start using this, see the EF docs for more details. Cleanup of how serial (autoincrement) and generated GUID/UUID columns are managed. Here's the full list of issues. Please report any problems to https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL. Upgrading from 1.0.x If you've used 1.0.x without migrations, you can simply upgrade and everything should just work. Unfortunately, if you already have migrations from 1.0.x you'll have to do some manual fixups because of some bad decisions that were previously made. If deleting your old migrations and starting over (e.g. non-production database) is an option, you may wish to do so. The following are instructions for fixing up 1.0.x migrations. First, Npgsql 1.0.x used a problematic method to identify serial (autoincrement) columns in migrations. If you look at your migration code you'll see .Annotation(\"Npgsql:ValueGeneratedOnAdd\", true) on various columns. Unfortunately this annotation is also present on non-serial columns, e.g. columns with default values. This causes various issues and has been replaced in 1.1. However, you'll have to manually remove .Annotation(\"Npgsql:ValueGeneratedOnAdd\", true), and replace it with .Annotation(\"Npgsql:ValueGenerationStrategy\", NpgsqlValueGenerationStrategy.SerialColumn) but only on columns which should be serial (e.g. not on columns with defaults). If you attempt to run a migration that has the old annotation, Npgsql will throw an exception and refuse to run your migrations. Unfortunately, this change will cause some incorrect changes the first time you add a migration after the upgrade. To avoid this, simply add a dummy migration right after upgrading to 1.1 and then delete the two new files generated for the dummy migration, but keep the changes made to your ModelSnapshot.cs. From this point on everything should be fine. Make sure you have no pending changes to your model before doing this!. Apologies for this problematic upgrade procedure, it should at least keep things clean going forward. Contributors Thank you very much to the following people who have contributed to the individual 1.1.x. releases. Milestone 1.1.1 Contributor Assigned issues @roji 8 Milestone 1.1.0 Contributor Assigned issues @roji 11"
  },
  "efcore/release-notes/2.0.html": {
    "href": "efcore/release-notes/2.0.html",
    "title": "2.0 Release Notes | Npgsql Documentation",
    "keywords": "2.0 Release Notes Version 2.0.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget.org. This version works with version 2.0.0 of Entity Framework Core, and contains some new Npgsql features as well. New Features Aside from general EF Core features new in 2.0.0, the Npgsql provider contains the following major new features: PostgreSQL array operation translation (#120). While array properties have been supported since 1.1, operations on those arrays where client-evaluated. Version 2.0 will now translate array indexing, .Contains(), .SequenceEquals() and .Length. See the array mapping docs for more details. A retrying execution strategy (#155), which will automatically retry operations on exceptions which are considered transient. PostgreSQL extensions are now included in scaffolded models (#102). More LINQ operations are translated to SQL, and more database scenarios are scaffolded correctly (see the docs). Here's the full list of issues. Please report any problems to https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL. Upgrading from 1.x Previously an Npgsql.EntityFrameworkCore.PostgreSQL.Design nuget package existed alongside the main package. Its contents have been merged into the main Npgsql.EntityFrameworkCore.PostgreSQL and no new version has been released. Specifying versions when specifying PostgreSQL extensions on your model is no longer supported - this was a very rarely-used feature which interfered with extension scaffolding. Contributors Thank you very much to the following people who have contributed to the individual 2.0.x. releases. Milestone 2.0.2 Contributor Assigned issues @roji 4 Milestone 2.0.1 Contributor Assigned issues @roji 5 Milestone 2.0.0 Contributor Assigned issues @roji 16"
  },
  "efcore/release-notes/2.1.html": {
    "href": "efcore/release-notes/2.1.html",
    "title": "2.1 Release Notes | Npgsql Documentation",
    "keywords": "2.1 Release Notes Version 2.1.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 2.1.0 of Entity Framework Core, and contains some new Npgsql features as well. Thanks to @rwasef1830 and @austindrenski for their valuable contributions. New Features Aside from general EF Core features new in 2.1.0, the Npgsql provider contains the following major new features: Improved Spatial Support (PostGIS) Previous versions have allowed basic usage of PostGIS's spatial types via built-in Npgsql types such as NpgsqlPoint, NpgsqlLineString, etc. These types were limited in many ways, and no operation translation was supported. If you want to calculate, say, the distance between two points, you had to drop down to raw SQL. No more! Thanks to a new plugin infrastructure, the EF Core provider now has full-class support for PostGIS. You can now use the NetTopologySuite spatial library to map PostGIS types - NetTopologySuite's types are more complete, and best of all, the provider knows how to translate its operations to SQL. This allows you to write the following code: var nearbyCities = context.Cities.Where(c => c.Location.Distance(somePoint) < 100); See the full documentation for more information. Thanks to @YohDeadfall for implementing support for this at the ADO level. Full text search PostgreSQL has a powerful feature for efficient natural-language search across multiple columns and tables, see the PostgreSQL docs for more info. The EF Core provider now supports full-text search, allowing you to use .NET functions in your LINQ queries which will get translated to efficient PostgreSQL natural-language search queries. Read the full documentation for more information. Many thanks to @rwasef1830 for contributing this feature. NodaTime date/time support NodaTime is a powerful alternative to .NET's built-in date/time types, such as DateTime. The built-in types are flawed in many ways: they have problematic support for timezones, don't have a date-only or time-only types, and promote problematic programming but not making the right distinctions. If your application handles dates and times in anything but the most basic way, you should seriously consider using NodaTime. To learn more read this blog post by Jon Skeet. Thanks to a new plugin infrastructure, it is now possible to set up the EF Core provider to use NodaTime's types instead of the built-in .NET ones; instead of having DateTime properties on your entities, you can now have Instant properties instead. See the full documentation for more information. PostgreSQL 10 IDENTITY columns PostgreSQL 10 introduced a new IDENTITY column as an alternative to traditional SERIAL columns, and these are now supported by the EF Core provider. IDENTITY columns conform to the SQL standard and are in general safer than SERIAL columns, read this blog post for more info. It's recommended that all new projects use IDENTITY, but Npgsql even provides seamless migration of your existing SERIAL-based model!. Read the full documentation for more information. Enum support It is now possible to map your CLR enums to native PostgreSQL enums. This is a unique PostgreSQL feature that provides the best of both worlds: the enum is internally stored in the database as a number (minimal storage), but is handled like a string (more usable, no need to remember numeric values) and has type safety. See the full documentation for more information. Range support PostgreSQL supports native range types, which allow you to represent ranges of dates, ints and other data types in a single column. You can then efficiently perform queries on these types from LINQ, e.g. select all rows where a given date falls in the row's date range. See the full documentation for more information. Many thanks to @austindrenski for contributing the operation translations. Other notable features Several improvements have been made to the way arrays are mapped. For example, you can now map List<T> to PostgreSQL array (previously only T[] was supported) (#392). In addition, change tracking now works for arrays, so EF Core will automatically detect when you change an element's array and will update the corresponding database column when saving. PostgreSQL's built-in range types can now be mapped (#63), head over to the PostgreSQL docs to find out more about range types. Note that user-defined range types are not supported, if you're interested let us know at #329. Properties of type char are now supported and will be mapped to character(1) in PostgreSQL (#374). Identifiers in generated SQL will only be quoted if needed (#327). This should make it much easier to read. You can now use client certificate authentication and provide a server certificate validation callback (#270). See the doc for usage instructions. Added support for PostgreSQL 10 sequences with type int and smallint (#301). You can now specify the tablespace when creating your databases (#332). Here's the full list of issues. Please report any problems on https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL. Breaking changes Caution The provider's classes have been moved from the namespace Microsoft.EntityFrameworkCore to Npgsql.EntityFrameworkCore.PostgreSQL. As a result, any migrations already generated in your project (as well as the mode snapshot) will have to be manually updated to use the new namespace. You will need to add using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata to all the relevant files. Columns of type timestamp with time zone/timestamptz will now be scaffolded as DateTime properties, and not DateTimeOffset properties. The general use of timestamp with time zone/timestamptz is discouraged (this type does not store the timezone in the database), consider using timestamp without time zone/timestamp instead. If you're specifying index methods with ForNpgsqlHasMethod(), then you will have to fix migrations which generate those indexes. In these migrations, you will find code such as .Annotation(\"Npgsql:Npgsql:IndexMethod\", \"gin\"). You must remove the extra Npgsql:, leaving .Annotation(\"Npgsql:IndexMethod\", \"gin\"). Specifying versions when specifying PostgreSQL extensions on your model is no longer supported - this was a very rarely-used feature which interfered with extension scaffolding. If you're still referencing the nuget package Npgsql.EntityFrameworkCore.PostgreSQL.Design, please remove it - it's no longer needed or up to date. Contributors Thank you very much to the following people who have contributed to the individual 2.1.x. releases. Milestone 2.1.2 Contributor Assigned issues @roji 6 @austindrenski 3 @rwasef1830 1 Milestone 2.1.11 Contributor Assigned issues @roji 1 Milestone 2.1.1.1 Contributor Assigned issues @roji 4 Milestone 2.1.1 Contributor Assigned issues @roji 9 Milestone 2.1.0 Contributor Assigned issues @roji 24 @austindrenski 1 @rwasef1830 1"
  },
  "efcore/release-notes/2.2.html": {
    "href": "efcore/release-notes/2.2.html",
    "title": "2.2 Release Notes | Npgsql Documentation",
    "keywords": "2.2 Release Notes Version 2.2.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 2.2.0 of Entity Framework Core, and contains some new Npgsql features as well. This release was result of hard work by @roji, @austindrenski, @yohdeadfall and @khellang. New Features Aside from general EF Core features new in 2.2.0, the Npgsql EF Core provider contains the following major new features: PostgreSQL 11 covering indexes PostgreSQL 11 introduced covering indexes feature, which allow you to include \"non-key\" columns in your indexes. This allows you to perform index-only scans and can provide a significant performance boost. Support has been added in (#697): protected override void OnConfiguring(DbContextOptionsBuilder builder) => modelBuilder.Entity<Blog>() .ForNpgsqlHasIndex(b => b.Id) .ForNpgsqlInclude(b => b.Name); This will create an index for searching on Id, but containing also the column Name, so that reading the latter will not involve accessing the table. See the documentation for more details. Thanks to @khellang for contributing this! PostgreSQL user-defined ranges The provider already supported PostgreSQL range types, but prior to 2.2 that support was limited to the built-in range types which come with PostgreSQL. #329 extends that support to range types which you define: protected override void OnConfiguring(DbContextOptionsBuilder builder) => builder.UseNpgsql(\"...\", b => b.MapRange<float>(\"floatrange\")); protected override void OnModelCreating(ModelBuilder builder) => builder.ForNpgsqlHasRange(\"floatrange\", \"real\"); This will make the provider create a PostgreSQL range called floatrange, over the PostgreSQL type real. Any property with type NpgsqlRange<float> will be seamlessly mapped to it. See the documentation for more details. Seeding for Npgsql-specific types When using some Npgsql-specific types, it wasn't possible to seed values for those types. With EF Core support for seeding any type, #667 allows seeding values for network, bit and range types (more are coming). PostgreSQL index operator classes PostgreSQL allows you to specify operator classes on your indexes, to allow tweaking how the index should work. #481 adds support for managing these. See the documentation for more details. Thanks to @khellang for contributing this! Other features Various issues with enum and range types were fixed, including upper/lower case, quoting and schema management. Many new SQL translations were added, so more of your LINQ expressions can run in the database. We'll be working on our documentation to make these more discoverable. The full list of issues for this release is available here. Contributors Thank you very much to the following people who have contributed to the individual 2.2.x. releases. Milestone 2.2.6 Contributor Assigned issues @roji 5 Milestone 2.2.4 Contributor Assigned issues @roji 3 @austindrenski 1 Milestone 2.2.0 Contributor Assigned issues @austindrenski 15 @roji 8"
  },
  "efcore/release-notes/3.1.html": {
    "href": "efcore/release-notes/3.1.html",
    "title": "3.1 Release Notes | Npgsql Documentation",
    "keywords": "3.1 Release Notes Version 3.1 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 3.1 of Entity Framework Core, and brings new Npgsql features in addition to the general EF Core changes. Caution Use these versions with care and do not deploy to production without thorough testing. Read the breaking changes section below. The full list of issues for this release is available here. New Features Aside from general EF Core features new in 3.1, the Npgsql EF Core provider contains the following major new features: It is now possible to map POCOs to JSON columns and query them, see the docs for more info (#981) PostgreSQL identity columns are now the default - see breaking changes below) (#804) Sequence options can now be managed on identity columns (#819) Support has been added for the upcoming PostgreSQL 12 generated columns feature (#939) A plugin is now available to automatically make all your tables and columns be snake_case! See EFCore.NamingConventions. Index sort options (ascending/descending, null sort order...) can now be specified (#326) Indexes can now be created concurrently (#967) Views are now reverse-engineered (#878) Array value converters help mapping with PostgreSQL arrays (e.g. map enum arrays to integer arrays) (#1031). Breaking changes Default value generation strategy is now IDENTITY Caution This is a major change, and upgrading to 3.1 with an existing database will cause a non-trivial schema migration to be generated. Read the following carefully. The default value generation strategy has changed from the older SERIAL columns to the newer IDENTITY columns, introduced in PostgreSQL 10. When producing a migration with 3.1, the Npgsql provider will attempt to automatically generate SQL to alter your tables and convert serial columns to identity ones. This is a sensitive, one-time migration operation that should be done with care, and carefully tested before deployment to production. If you wish to opt out of using IDENTITY columns and continue using SERIAL columns, set the following on your model: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseSerialColumns(); If you are using a PostgreSQL version older than 10, setting the compatibility mode is a better way to switch the default back to SERIAL columns: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql(\"...\", o => o.SetPostgresVersion(9, 6)); More information is available in the page about generated properties. Contributors Thank you very much to the following people who have contributed to the individual 3.x releases. Milestone 3.1.11 Contributor Assigned issues @roji 5 Milestone 3.1.7 Contributor Assigned issues @roji 4 Milestone 3.1.4 Contributor Assigned issues @roji 4 Milestone 3.1.3 Contributor Assigned issues @roji 1 Milestone 3.1.2 Contributor Assigned issues @roji 3 @grzybsonssg 1 Milestone 3.1.1.2 Contributor Assigned issues @roji 1 Milestone 3.1.1.1 Contributor Assigned issues @roji 1 Milestone 3.1.1 Contributor Assigned issues @roji 6 Milestone 3.1.0 Contributor Assigned issues @roji 15 @austindrenski 1 @ins0mniaque 1 @MarioPrabowo 1 Milestone 3.0.1 Contributor Assigned issues @roji 1 Milestone 3.0.0 Contributor Assigned issues @roji 25 @austindrenski 2 @YohDeadfall 1"
  },
  "efcore/release-notes/5.0.html": {
    "href": "efcore/release-notes/5.0.html",
    "title": "5.0 Release Notes | Npgsql Documentation",
    "keywords": "5.0 Release Notes Version 5.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 5.0 of Entity Framework Core, and brings new Npgsql features in addition to the general EF Core changes. New Features Aside from general EF Core features new in 5.0, here is a non-exhaustive list of features added in the Npgsql EF Core provider: Full support for PostgreSQL collations. See the docs for more info. It is now much easier to create indexes for full-text search (#1097, #1253). See the docs for more info. Sequences are now automatically updated after seeding data to avoid duplicate values (#367). The [JsonPropertyName] attribute is now respected when mapping to JSON (#1419). Improved support for PostgreSQL arrays: Mapping List<T> is now fully supported (#395). Mapping arrays of nullable value types (e.g. int?[]) is now supported (#1025). Query translations: Precise, exhaustive documentation has been added on which functions can be used in LINQ queries. Contains over arrays now uses indexes in various scenarios, improving performance (#1372). Various members of TimeSpan are now translated and can be used in queries (#328). Support for unaccent (#1530). Thanks @cloudlucky. Various translations over byte array properties have been added (#1225, #1226. Improved null semantics for PostgreSQL-specific operations results in tighter and more efficient SQL (#1142). Better support for NodaTime: It is now possible to map NodaTime Duration to PostgreSQL interval, previously only Period could be mapped (#1567. Some additional arithmetic operation are now translated (#1565). It is now possible to add labels to existing enums (but not remove or modify existing ones). The provider will generate the appropriate migrations (#1182). The full list of issues for this release is available here. Breaking changes Please consult the EF Core 5.0 breaking changes page as well - the below lists only changes specific to the Npgsql provider. Computed columns must now explicitly be configured as stored (#1336) Version 3.1 of the provider added support for PostgreSQL generated columns (#939), referred to as computed columns in EF Core. EF Core 5.0 adds support for specifying whether a computed column is virtual (computed when fetched), or stored (persisted on disk and computed when modified). Aligning with most databases, EF Core by default creates virtual computed columns, but these are currently unsupported by PostgreSQL. As a result, you must explicitly specify on all computed columns that they are stored: modelBuilder.Entity<Customer>() .Property(p => p.FullName) .HasComputedColumnSql(\"...\", stored: true); If you have existing migrations which were created with previous versions of EF Core, the column definitions in those also need to be fixed up with stored: true. IsCreatedConcurrently defaults to true (#1212) Previously, when IsCreatedConcurrently was used to configure an index without parameters, the default was false - this has changed to true. Note that indexes are never configured for for concurrent creation unless IsCreatedConcurrently is specified. Contributors A big thank you to all the following people who contributed to the 5.0 release! Milestone 5.0.10 Contributor Assigned issues @roji 3 @dmitrynovik 1 Milestone 5.0.7 Contributor Assigned issues @roji 5 @nathan-c 1 Milestone 5.0.6 Contributor Assigned issues @roji 2 @kakone 1 Milestone 5.0.5.1 Contributor Assigned issues @fsibilla 1 @roji 1 Milestone 5.0.5 Contributor Assigned issues @roji 8 @DanielAdolfsson 1 Milestone 5.0.2 Contributor Assigned issues @roji 6 Milestone 5.0.1 Contributor Assigned issues @roji 4 @akilin 1 Milestone 5.0.0 Contributor Assigned issues @roji 50 @artfulsage 1 @cloudlucky 1 @plamen-i 1 @Quogu 1"
  },
  "efcore/release-notes/6.0.html": {
    "href": "efcore/release-notes/6.0.html",
    "title": "6.0 Release Notes | Npgsql Documentation",
    "keywords": "6.0 Release Notes The release candidate of Npgsql Entity Framework Core provider version 6.0 has been released and is available on nuget. This version works with version 6.0 of Entity Framework Core, and brings new Npgsql features in addition to the general EF Core changes. Npgsql 6.0 brings some major breaking changes and is not a simple in-place upgrade. Carefully read the breaking change notes below and upgrade with care. New features Timestamp rationalization and improvements Support for timestamp with time zone and timestamp without time zone has been rationalized and simplified, and aligned with PostgreSQL best practices. In particular, the \"UTC everywhere\" pattern is much better supported via the PostgreSQL timestamp with time zone type, which is the recommended way to handle timestamps. A detailed explanation is available in this blog post, below is a summary of the main improvements. UTC timestamps have been cleanly separated from non-UTC timestamps, aligning with the PostgreSQL types. The former are represented by timestamp with time zone and DateTime with Kind UTC, the latter by timestamp without time zone and DateTime with Kind Local or Unspecified. It is recommended to use UTC timestamps where possible. Npgsql no longer performs any implicit timezone conversions when reading or writing any timestamp value - the value in the database is what you get, and the machine timezone no longer plays any role when reading/writing values. Npgsql no longer supports date/time representations which cannot be fully round-tripped to the database. If it can't be fully stored as-is, you can't write it. A compatibility switch enables opting out of the new behavior, to maintain backwards compatibility. This change introduces significant breaking changes (see below), although a compatibility flag can be used to opt out and revert to the previous behavior. Other date/time improvements include: Support for the new .NET DateOnly and TimeOnly types. Most DateTimeOffset members and methods are now translated. Many NodaTime translations have been added for ZonedDateTime, Period, DateInterval and others. PostgreSQL tstzrange is now mapped to NodaTime Interval, and PostgreSQL daterange is now mapped to NodaTime DateInterval. Most methods on these types are translated (#1998, #2059). Other new features The provider is now fully annotated for nullable reference types. Full support for the PostgreSQL 14 multirange type, mapped to arrays or lists of NpgsqlRange<T> (#1963). Includes translation of all major operators and functions, see the updated docs. Support for PostgreSQL 14 column compression methods (#2062). Support for the PostgreSQL ltree type, which represents labels of data stored in a hierarchical tree-like structure. Requires PostgreSQL 13 and above. Multiple spatial translations have been added for NetTopologySuite (DistanceKnn, <->, ST_Force2D, ST_Distance and ST_DWithin with spheriod). More translations and better type inference for arrays (#2026). The full list of issues for this release is available here. Breaking changes Major changes to timestamp mapping Note It is possible to opt out of these changes to maintain backwards compatibility, see below. Quick summary In many cases, it makes sense to store UTC timestamps in the database. To do this, migrate your timestamp without time zone columns to timestamp with time zone (see migration notes below), and always use either DateTime with Kind=Utc or DateTimeOffset with offset 0. If using NodaTime (recommended), use either Instant or ZonedDateTime with time zone UTC. To store non-UTC timestamps, use DateTime with Kind=Unspecified and add explicit configuration to your properties to be timestamp without time zone. If using NodaTime (recommended), use LocalDateTime (no explicit column configuration is required). Detailed notes The below notes will use the PostgreSQL aliases timestamptz to refer to timestamp with time zone, and timestamp to refer to timestamp without time zone. Note that timestamp with time zone represents a UTC timestamp and does not store a timezone in the database. DateTime properties now map to timestamptz by default, instead of to timestamp; this follows the recommended practice of storing UTC timestamps by default, but will cause the first migration to change your column type. If the intention is to store point-in-time or UTC timestamps, it's recommended to allow the migration to occur (see migration notes below). If the column really should store non-UTC timestamps (local or unspecified), explicitly set the column type back to timestamp. This is usually discouraged, but can be a temporary solution before transitioning to timestamptz. It is no longer possible to write DateTime with Kinds Local or Unspecified to timestamptz properties (which are the default for DateTime). Previously, Npgsql allowed writing those, performing timezone conversions from local to UTC. To write to timestamptz, provide a UTC DateTime. Similarly, it is no longer possible to write DateTime with Kind UTC to a timestamp column. timestamptz values are now read back as DateTime with Kind=UTC, without any conversions; these were previously returned as local DateTime, converted to the local machine's timezone. When reading timestamptz values as DateTimeOffset, UTC values (offset 0) are always returned. It is no longer possible to write DateTimeOffset with offsets other than 0 (UTC), since these cannot be represented in PostgreSQL. These were previously implicitly converted to UTC before sending. See the Npgsql ADO.NET docs for additional lower-level changes to timestamp handling. NodaTime changes Properties with type Instant are now mapped to timestamptz columns, and not to timestamp, since they represent a universally agreed-upon point in time. This follows the recommended practice, but will cause the first migration to change your column type. If the intention is to store point-in-time or UTC timestamps, it's recommended to allow the migration to occur (see migration notes below). If the column really should store non-UTC timestamps (local or unspecified), change the property's type to LocalDateTime instead; this will maintain the mapping to timestamp. This is usually discouraged, but can be a temporary solution before transitioning to timestamptz. When reading timestamptz as ZonedDateTime or OffsetDateTime, UTC values are always returned. Previously, local values based on the PostgreSQL TimeZone parameter were returned. Migrating columns from timestamp to timestamptz As a result of the above changes, the first migration created after upgrading to 6.0 will alter the columns for all DateTime and Instant properties from timestamp to timestamptz. If these columns are meant to store point-in-time or UTC timestamps (the recommended practice), then it's best to let this migration proceed; but care must be taken. As a starting point, let's assume your existing timestamp column has the timestamp 2020-01-01 12:00:00: SELECT \"CreatedOn\", pg_typeof(\"CreatedOn\") AS type FROM \"Blogs\"; Results in: CreatedOn | type ---------------------+----------------------------- 2020-01-01 12:00:00 | timestamp without time zone The migration generated by version 6.0 will cause the following SQL to be generated: ALTER TABLE \"Blogs\" ALTER COLUMN \"CreatedOn\" TYPE timestamp with time zone; When converting the timestamp without time zone column to timestamp with time zone, PostgreSQL will assume that existing values are local timestamps, and will convert them to UTC based on the TimeZone parameter. Performing the above query will result in something like: CreatedOn | type ------------------------+-------------------------- 2020-01-01 12:00:00+02 | timestamp with time zone This means that your new timestamptz column now contains 10:00 UTC, which is probably not what you want: if the original values were in fact UTC values, you need them to be preserved as-is, changing only the column type. To do this, edit your migration and add the following to the top of your migration's Up and Down methods: migrationBuilder.Sql(\"SET TimeZone='UTC';\"); This will ensure that no time zone conversions will be applied when converting the columns: CreatedOn | type ------------------------+-------------------------- 2020-01-01 14:00:00+02 | timestamp with time zone Changing timestamp seed data When switching from timestamp without time zone to timezone with time zone, you may have have non-UTC timestamp literals in your seeding configuration: modelBuilder.Entity<Blog>().HasData(new Blog { Id = 1, Timestamp = new DateTime(2020, 1, 1, 0, 0, 0) }); If so, you'll have to change these to be UTC. In addition, all migrations code since the change must be modified in the same way, to only seed UTC DateTime into the column; the model snapshot should be changed as well. Opting out of the new timestamp mapping logic The changes described above are far-reaching, and may break applications in various ways. You can upgrade to version 6.0 but opt out of the new mapping by enabling the Npgsql.EnableLegacyTimestampBehavior AppContext switch. To do this and revert to the legacy timestamp behavior, add the following to your context's constructor, before any Npgsql or EF Core operations are invoked: AppContext.SetSwitch(\"Npgsql.EnableLegacyTimestampBehavior\", true); NodaTime: tstzrange and daterange are mapped to Interval and DateInterval by default When using NodaTime, PostgreSQL tstzrange columns are scaffolded as Interval properties instead of NpgsqlRange<Instant> (#4070), and daterange columns are scaffolded as DateInterval properties of NpgsqlRange<LocalDateTime> (#1998). Date/time min/max values are now converted to PostgreSQL infinity values by default PostgreSQL has special infinity and -infinity values for timestamps and dates, which are later and earlier than other value. Npgsql has supported mapping DateTime.MaxValue and MinValue to these infinity values via an Convert Infinity DateTime connection string parameter, which was disabled by default. This behavior is now on by default, since DateTime.MaxValue and MinValue are very rarely used as actual timestamps/dates, and the Convert Infinity DateTime parameter has been removed. To disable infinity conversions, add the following at the start of your application: AppContext.SetSwitch(\"Npgsql.DisableDateTimeInfinityConversions\", true); See the date/time documentation for more details. Value converters for array/list properties need to use a special new API Previously, it was possible to configure value converters for array/list properties with the general EF Core API: modelBuilder.Entity<SomeEntity>.Property(e => e.ValueConvertedArray) .HasConversion(w => w.Select(x => x.Value).ToArray(), v => v.Select(x => new IntWrapper(x)).ToArray()); This is no longer possible and will cause an exception to be thrown. Instead, use the new HasPostgresArrayConversion API, providing conversion lambdas for the array's elements: modelBuilder.Entity<SomeEntity>.Property(e => e.ValueConvertedArray) .HasPostgresArrayConversion(w => w.Value, v => new IntWrapper(v)); Arrays/lists over ranges are mapped to PG14 multiranges PostgreSQL 14 introduced a new multirange type, which is very similar to an array of ranges but supports various range-related operations efficiently. The provider now maps arrays and lists of NpgsqlRange to these new types by default. To map them to old-style arrays over ranges in PostgreSQL, configure the column type explicitly: Data Annotations Fluent API [Column(TypeName = \"int4range[]\")] public NpgsqlRange<int>[] SomeArrayOverIntNpgsqlRange { get; set;} protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder .Entity<Blog>() .Property(e => e.SomeArrayOverIntNpgsqlRange) .HasColumnType(\"int4range[]\"); } Trigrams and FuzzyStringMatch plugins are now built-in The Npgsql.EntityFrameworkCore.PostgreSQL.Trigrams and Npgsql.EntityFrameworkCore.PostgreSQL.FuzzyStringMatch plugins have been integrated into the main provider; as a result, there are no 6.0 versions of these nuget packages - simply remove the package references from your project when upgrading to 6.0.0. Contributors A big thank you to all the following people who contributed to the 6.0 release! Milestone 6.0.8 Contributor Assigned issues @roji 3 Milestone 6.0.7 Contributor Assigned issues @roji 5 Milestone 6.0.6 Contributor Assigned issues @roji 2 Milestone 6.0.5 Contributor Assigned issues @roji 5 Milestone 6.0.4 Contributor Assigned issues @roji 6 @kourosko 1 Milestone 6.0.3 Contributor Assigned issues @roji 8 @rus-art 1 Milestone 6.0.2 Contributor Assigned issues @roji 4 Milestone 6.0.1 Contributor Assigned issues @roji 5 @Brar 1 @vonzshik 1 Milestone 6.0.0 Contributor Assigned issues @roji 56 @vonzshik 2 @arontsang 1 @Isitar 1 @kislovs 1 @pafrench 1 @tiborfsk 1"
  },
  "efcore/release-notes/7.0.html": {
    "href": "efcore/release-notes/7.0.html",
    "title": "7.0 Release Notes | Npgsql Documentation",
    "keywords": "7.0 Release Notes New features ExecuteUpdate and ExecuteDelete Support has been added for the new EF Core 7.0 ExecuteUpdate and ExecuteDelete, which allow expressing arbitrary, efficient updates via LINQ. See the EF What's new section for documentation. Support for DbDataSource Npgsql 7.0 introduced NpgsqlDataSource, a major improvement to how database connections and configuration are managed in System.Data. NpgsqlDataSource enabled rich new configuration APIs, which are also available when using the Npgsql EF provider: // Create a data source with the configuration you want: var dataSourceBuilder = new NpgsqlDataSourceBuilder(builder.Configuration.GetConnectionString(\"MyContext\")); dataSourceBuilder .UseLoggerFactory(loggerFactory) // Configure ADO.NET logging .UsePeriodicPasswordProvider(); // Automatically rotate the password periodically await using var dataSource = dataSourceBuilder.Build(); // Pass your data source to the EF provider: builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql(dataSource); Note that the data source configuration works at the Npgsql ADO.NET layer, and is distinct from EF-level configuration. More improvements are planned in 8.0, to make data source usage more streamlined, especially around type mapping plugins, enums, etc. Extensive support for aggregate function translation EF Core 7.0 added support for translating provider-specific aggregate functions, and EFCore.PG builds on top of that to translate most major aggregate functions that PostgreSQL supports. This unlocks support for: string_agg: pack a column's values into a single string, with or without a delimiter. array_agg: pack a column's values into a PostgreSQL array. This can help with efficient fetching of dependent values, avoiding the so-called \"cartesian explosion\" problem. Statistical functions: standard deviation, variance and many others. Spatial functions: ST_Union, ST_Collect, ST_Extent and ST_ConvexHull. JSON functions: load values from the database as JSON documents with json_agg/jsonb_agg and json_object_agg/jsonb_object_agg. For the PostgreSQL documentation on aggregate functions, see this page. The exact translations supported by the provider are documented in the translations page. Row value expressions The provider now supports translations which make use of row value expressions, which are conceptually similar to tuples. Row values are particularly useful for implementing keyset pagination, which is much more efficient than the common, offset-base pagination. To learn more about pagination techniques, see this documentation page. Here's an example comparing two row values as an implementation of keyset pagination: var nextPage = context.Posts .OrderBy(b => b.Date) .ThenBy(b => b.PostId) .Where(b => EF.Functions.GreaterThan( ValueTuple.Create(b.Date, b.PostId), ValueTuple.Create(lastDate, lastId))) .Take(10) .ToList(); This generates the following SQL: SELECT p.\"PostId\", p.\"Date\" FROM \"Posts\" AS p WHERE (p.\"Date\", p.\"PostId\") > (@__lastDate_1, @__lastId_2) ORDER BY p.\"Date\", p.\"PostId\" LIMIT @__p_3 To the list of row value translations, see the translations page. Other new features Support for PostgreSQL 15 non-distinct NULLs in unique indexes, causing unique constraint violations if a column contains multiple null values. See the documentation for more details. Stored procedure mappings: PostgreSQL support has been added for stored procedure mapping, which is a new feature in EF Core 7.0. See the EF What's new section for documentation. Note that PostgreSQL 14 or above is required to use this feature (for output parameters). Breaking changes Note: version 7.0 of the lower-level Npgsql ADO.NET driver, which is used by the EF provider, also has some breaking changes. It's recommended to read the release notes for that as well. Obsoleted UseXminAsConcurrencyToken Starting with version 7.0, concurrency token properties can be configured via the standard EF means, rather than the PostgreSQL-specific UseXminAsConcurrencyToken; simply configure any uint property with the IsRowVersion() Fluent API or the [Timestamp] Data Annotation. See the documentation for more details. Obsoleted default column collations Versions 6.0 and below had a mechanism that allowed defining a \"default column collation\", which is applied individually to every text column by default; this differed from the database collation, which is applied once to the database at creation time. This mechanism was introduced because in PostgreSQL, the database collation is quite limited, and for example does not allow specifying non-deterministic collations (e.g. case-insensitive ones). However, with the introduction of pre-convention model configuration in EF Core, it's now possible to use that generic mechanism for specifying the default collation. As a result, the Npgsql-specific mechanism has been obsoleted and will be removed in a future version. Default column collations involve the following code: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.UseDefaultColumnCollation(\"<collation_name>\"); } To switch to the standard EF Core API, replace the code above with the following: protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder) { configurationBuilder.Properties<string>().UseCollation(\"<collation_name>\"); } Contributors A big thank you to all the following people who contributed to the 7.0 release! Milestone 7.0.11 Contributor Assigned issues @roji 1 Milestone 7.0.4 Contributor Assigned issues @roji 7 Milestone 7.0.3 Contributor Assigned issues @jhartmann123 1 @roji 1 Milestone 7.0.1 Contributor Assigned issues @roji 3 Milestone 7.0.0 Contributor Assigned issues @roji 35 @midgleyc 1"
  },
  "efcore/release-notes/8.0.html": {
    "href": "efcore/release-notes/8.0.html",
    "title": "8.0 Release Notes | Npgsql Documentation",
    "keywords": "8.0 Release Notes Npgsql.EntityFrameworkCore.PostgreSQL version 8.0 is out and available on nuget.org. Full support for primitive collection querying One of PostgreSQL unique features as a relational database is its rich support for array types, which can be stored just like any other basic data type and queried. The Npgsql EF provider has supported mapping .NET arrays and Lists to PostgreSQL arrays for a very long time; however, with the introducion of rich primitive collection support in EF itself, Npgsql's support for arrays was extended to include full querying capabilities. Column collections On to the code! You can now use any LINQ operator - or chain of operators - on top of a primitive array or list property. For example, the following queries for all blogs who have at least 3 tags starting with \"x\": class Blog { ... public List<string> Tags { get; set; } } var blogs = await ctx.Blogs .Where(b => b.Tags.Count(t => t.StartsWith(\"x\")) > 3) .ToListAsync(); This is now translated to the following SQL: SELECT b.\"Id\", b.\"Tags\" FROM \"Blogs\" AS b WHERE ( SELECT count(*)::int FROM unnest(b.\"Tags\") AS t(value) WHERE t.value LIKE 'x%') > 3 Such complex translations rely on the PostgreSQL unnest function, which allows expanding a PostgreSQL array to a set of rows; once that's done, the array values can be queried with regular SQL. We can go further, querying for all blogs whose tags - or any of their posts' tags - contains a certain value: var blogs = await ctx.Blogs .Where(b => b.Tags.Union(b.Posts.SelectMany(p => p.Tags)) .Contains(\"foo\")) .ToListAsync(); This uses unnest both on the blog's tags on and all its posts' tags (via a lateral join), to then do a UNION On results and check whether the value is contained. SELECT b.\"Id\", b.\"Tags\" FROM \"Blogs\" AS b WHERE 'foo' IN ( SELECT t.value FROM unnest(b.\"Tags\") AS t(value) UNION SELECT t1.value FROM \"Post\" AS p JOIN LATERAL unnest(p.\"Tags\") AS t1(value) ON TRUE WHERE b.\"Id\" = p.\"BlogId\" ) Parameter collections But that's not all... The new primitive collection support works not just on columns, but also on parameterized lists. Previously, special and limited support existed for translating Contains over a parameterized list, as follows: var ids = new[] { 1, 2, 3 }; var blogs = await ctx.Blogs .Where(b => ids.Contains(b.Id)) .ToListAsync(); This has now been extended to allow composing any LINQ operator. For example, the following query queries for any blogs which have at least one tag, where that tag starts with a list of possible prefixes: var prefixes = new[] { \"f\", \"b\" }; var blogs = await ctx.Blogs .Where(b => prefixes.Any(p => b.Tags.Any(t => t.StartsWith(p)))) .ToListAsync(); Complex, I know! This translates to the following SQL: SELECT b.\"Id\", b.\"Tags\" FROM \"Blogs\" AS b WHERE EXISTS ( SELECT 1 FROM unnest(@__prefixes_0) AS p(value) WHERE EXISTS ( SELECT 1 FROM unnest(b.\"Tags\") AS t(value) WHERE p.value IS NOT NULL AND left(t.value, length(p.value)) = p.value)) Note the two usages of unnest here: one is used to expand the Tags column, whereas the other is used to expand the @__prefixes_0 array parameter that EF sends. All this machinery works together to make your LINQ query execute correctly. Inline collections Finally, support was added to inline collections, which are collections specified inside the query. For example, let's say that the list of tag prefixes in the previous query were always the same; in that case, we'd inline the prefixes variable as follows: var blogs = await ctx.Blogs .Where(b => new[] { \"f\", \"b\" }.Any(p => b.Tags.Any(t => t.StartsWith(p)))) .ToListAsync(); This translates to the following: SELECT b.\"Id\", b.\"Tags\" FROM \"Blogs\" AS b WHERE EXISTS ( SELECT 1 FROM (VALUES ('f'::text), ('b')) AS v(\"Value\") WHERE EXISTS ( SELECT 1 FROM unnest(b.\"Tags\") AS t(value) WHERE left(t.value, length(v.\"Value\")) = v.\"Value\")) Note that the unnest over the parameter has been replaced with a standard SQL VALUES construct, which allows constructing a set of rows inline, inside the query. More information Exciting stuff! We hope this helps you use LINQ to model and better interact with your database. The primitive collection section in the EF 8.0 What's New page. .NET Blog post on primitive collections PostgreSQL-specific information on primitive collections, including some specialized translations done for PostgreSQL. EF JSON support via ToJson() Version 8.0 also brings support for EF7's JSON columns feature (ToJson), which allows mapping JSON columns via owned entity types. While the Npgsql EF provider has had POCO JSON mapping for a very long time, the full modeling of the new ToJson() allows for a more powerful mapping strategy, with more query and update features. ToJson is the recommended way to map JSON going forward. You can read more on ToJson in the Npgsql JSON doc page, and in the EF7 what's new docs. Compared to the traditional Npgsql-specific POCO approach, a much wider range of LINQ queries can now be translated. For example, you can now compose LINQ operators over collections within JSON documents: var blogs = await ctx.Customers .Where(b => b.Details.Orders.Any(o => o.Price > 8)) .ToListAsync(); Note that this composes a LINQ operator - Any - on top of Orders, which is a list nested inside a JSON document. This translates to the following SQL: SELECT c.\"Id\", c.\"Details\" FROM \"Customers\" AS c WHERE EXISTS ( SELECT 1 FROM ROWS FROM (jsonb_to_recordset(c.\"Details\" -> 'Orders') AS ( \"Price\" numeric, \"ShippingAddress\" text )) AS o WHERE o.\"Price\" > 8.0) Note the jsonb_to_recordset function, which drills into the JSON document, finds the Orders property, and then expands that out to a set of rows, which can then be queried via regular SQL. Similarly, updates via EF's SaveChanges() are better, and can leverage partial updating to only patch the part of the JSON document which has changed. For example, let's assume that we load some customer with a JSON column, and change a single property within that JSON data: var customer = await ctx.Customers.SingleAsync(c => c.Details.Name == \"Foo\"); customer.Details.Name = \"Bar\"; await ctx.SaveChangesAsync(); Rather than needlessly sending the entire JSON document back to PostgreSQL, the EF provider uses the jsonb_set function to patch the specific property which changed, which is more efficient: UPDATE \"Customers\" SET \"Details\" = jsonb_set(\"Details\", '{Name}', @p0) WHERE \"Id\" = @p1; Other new features Version 8.0 contains many other smaller features and bug fixes, both on the EF side and on the Npgsql provider side. See the 8.0.0 milestone for the full list of Npgsql EF provider issues. Breaking changes Note: version 8.0 of the lower-level Npgsql ADO.NET driver, which is used by the EF provider, also has some breaking changes. It's recommended to read the release notes for that as well. JSON POCO and other dynamic features now require an explicit opt-in Because of the NativeAOT and trimming work done for Npgsql 8.0 (release notes), certain features now require an explicit opt-in, which you must add either on your NpgsqlDataSourceBuilder or on NpgsqlConnection.GlobalTypeMapper: PostgreSQL type Default .NET type JSON POCO mapping, JsonNode and subtypes EnableDynamicJson Unmapped enums, ranges, multiranges EnableUnmappedTypes Read PostgreSQL records as .NET tuples EnableRecordsAsTuples Existing code using the above features will start throwing exceptions after upgrading to version 8.0 of the EF Core provider; the exceptions provide explicit guidance on how to add the opt-ins. Note that EF Core itself is not yet compatible with NativeAOT, and Npgsql can only be used in NativeAOT applications without EF Core. Default PostgreSQL compatibility mode has been bumped from 12 to 14 This means that the provider assumes at least PostgreSQL 14; if you're running against an older version, explicitly specify the PostgreSQL version when configuring your context: optionsBuilder.UseNpgsql(\"<connection string>\", o => o.SetPostgresVersion(12, 0)) Obsoleted HasPostgresArrayConversion With EF 8.0 introducing first-class support for primitive collections, the PostgreSQL driver aligned its PostgreSQL array support to use that. As a result, HasPostgresArrayConversion can no longer be used to configure value-converted arrays; instead, the new standard EF mechanism can be used. For example, the following Npgsql-specific code would configure value conversion for a property of type MyType[] to a PostgreSQL array of strings in EF Core 6 or 7: modelBuilder.Entity<Blog>().Property(b => b.ValueConvertedArray) .HasPostgresArrayConversion(x => x.ToString(), s => MyType.Parse(s)); The same can now achieved with the following standard EF 8 code: modelBuilder.Entity<Blog>().PrimitiveCollection(b => b.ValueConvertedArray) .ElementType() .HasConversion(typeof(MyConverter)); class MyConverter : ValueConverter<MyType, string> { public MyConverter() : base(x => x.ToString(), s => MyType.Parse(s)) { } } cidr now maps to NpgsqlCidr instead of ValueTuple<IPAddress, int> As part of improving Npgsql's support for the PostgreSQL network mappings, the PostgreSQL cidr type now maps to the newly-introduced NpgsqlCidr, and can no longer be mapped to ValueTuple<IPAddress, int>. Contributors A big thank you to all the following people who contributed to the 8.0 release! Milestone 8.0.0 Contributor Assigned issues @roji 34 @zpaks 1"
  },
  "efcore/release-notes/9.0.html": {
    "href": "efcore/release-notes/9.0.html",
    "title": "9.0 Release Notes | Npgsql Documentation",
    "keywords": "9.0 Release Notes Npgsql.EntityFrameworkCore.PostgreSQL version 9.0 is under development; previews are available on nuget.org. Note The following release notes and breaking changes are partial. More will be added nearer to the 9.0 final release. Improved, unified configuration experience The Npgsql EF provider is built on top of the lower-level Npgsql ADO.NET provider; the configuration interface between these two layers was less than ideal, and configuration been more difficult than it should have been. For version 9.0, the configuration experience has been considerably improved. Since version 7, the Npgsql ADO.NET provider has been moving to NpgsqlDataSource as the preferred way of configuration connections and obtaining them. At the EF level, it has been possible to pass an NpgsqlDataSource instance to UseNpgsql(); but this required that the user separately configure a data source and manage it. In addition, features such as plugins and enums require support from both the EF and ADO.NET layers, forcing users to perform multiple setup actions at the different layers. With version 9, UseNpgsql() becomes a single point for configuration, for both the EF and ADO.NET levels. EF can now internally set up an NpgsqlDataSource, automatically applying all the necessary configuration to it, and also exposes an API to allow users to apply arbitrary configuration to it as well: builder.Services.AddDbContextPool<BloggingContext>(opt => opt.UseNpgsql( builder.Configuration.GetConnectionString(\"BloggingContext\"), o => o .SetPostgresVersion(13, 0) .UseNodaTime() .MapEnum<Mood>(\"mood\") .ConfigureDataSource(dataSourceBuilder => dataSourceBuilder.UseClientCertificate(certificate)))); In the above code, the following configuration gestures are performed: SetPostgresVersion() is an EF-only option to produce SQL for PostgreSQL version 13 (avoiding newer incompatible features) UseNodaTime(), adds a plugin allowing use of NodaTime for date/time type mapping. This also requires an ADO.NET NodaTime plugin which needed to be configured separately, but this is now done automatically. MapEnum() maps a .NET enum type. Like UseNodaTime(), this also used to require a separate ADO.NET configuration gesture, but is now done automatically. As an added bonus, doing this now also adds the enum to the model, causing the enum to be created in the database via EF's migrations. ConfigureDataSource() exposes an NpgsqlDataSourceBuilder, which you can use to configure arbitrary ADO.NET options. In this example, the certificate is defined for the TLS authentication process. For more information, see the getting started docs. Improved configuration for enums and plugins Previously, configuration around enums and plugins (NodaTime, NetTopologySuite) was complicated, requiring multiple setup actions at both the EF and the lower-level Npgsql layers. EF 9.0 improves the configuration story, allowing you to configure enums and plugins via a single EF gesture: builder.Services.AddPooledDbContext<MyContext>(options => options.UseNpgsql( \"<connection string>\", o => o.MapEnum<Mood>(\"mood\"))); This takes care of everything - EF configuration, lower-level Npgsql configuration and even the addition of the enum to the EF model, which ensures that the enum is created in the database in EF migrations. See the enum, NodaTime and NetTopologySuite documentation for more details. UUIDv7 GUIDs are generated by default When your entity types have a Guid key, EF Core by default generates key values for new entities client-side - in .NET - before inserting those entity types to the database; this can be better for performance in some situations. Before version 9.0, the provider generated random GUIDs (version 4) by calling the .NET Guid.NewGuid() function. Unfortunately, random GUIDs aren't ideal for database indexing and can cause performance issues. Version 9.0 of the provider now generates the recently standardized version 7 GUIDs, which is a sequential GUID type that's more appropriate for database indexes and improves their performance. This new behavior is on by default and takes effect simply by upgrading the provider version. See this post for more details and performance numbers on random vs. sequential GUIDs. Thanks to @ChrisJollyAU and @Timovzl for contributing this improvement! Breaking changes Enum mappings must now be configured at the EF level Previously, enum configuration involved mapping the enum at the lower-level Npgsql layer (either via NpgsqlDataSourceBuilder.MapEnum or via NpgsqlConnection.GlobalTypeMapper.MapEnum); the EF provider automatically picked this configuration up for the EF-level setup. Unfortunately, this design created numerous issues and bugs. As part of the improved enum configuration story in version 9.0 (see above), enums must now be configured at the EF level; although this is a breaking change for existing applications, it usually results in simplified setup code and fixes various bugs and problematic behavior. If your application calls UseNpgsql with a simple connection string (rather than an NpgsqlDataSource), it simply needs to add a MapEnum call there: builder.Services.AddDbContext<MyContext>(options => options.UseNpgsql( \"<connection string>\", o => o.MapEnum<Mood>(\"mood\"))); All other setup code - the MapEnum call on NpgsqlConnection.GlobalTypeMapper and the HasPostgresEnum call in OnModelCreating - can be removed. If your application passes an NpgsqlDataSource to UseNpgsql, it also needs to add the MapEnum call as above; but the MapEnum call on NpgsqlDataSourceBuilder must also be kept. See the enum documentation for more information. Contributors A big thank you to all the following people who contributed to the 9.0 release! Milestone 9.0.0 Contributor Assigned issues @roji 34 @ChrisJollyAU 1 @Timovzl 1"
  },
  "index.html": {
    "href": "index.html",
    "title": "Npgsql - .NET Access to PostgreSQL | Npgsql Documentation",
    "keywords": "Npgsql - .NET Access to PostgreSQL About Npgsql is an open source ADO.NET Data Provider for PostgreSQL, it allows programs written in C#, Visual Basic, F# to access the PostgreSQL database server. It is implemented in 100% C# code, is free and is open source. An Entity Framework Core provider is also available, and exposes some features unique to the PostgreSQL database to EF Core users. Finally, a legacy Entity Framework 6.x (non-Core) provider is also available, but is no longer being actively maintained. Getting Help The best way to get help for Npgsql is to post a question to Stack Overflow and tag it with the npgsql tag. If you think you've encountered a bug or want to request a feature, open an issue in the appropriate project's github repository. License Npgsql is licensed under the PostgreSQL License, a liberal OSI-approved open source license. Contributors Current active contributors to Npgsql are: Shay Rojansky (@roji) Nikita Kazmin (@vonzshik) Nino Floris (@NinoFloris) Brar Piening (@Brar) Past contributors to Npgsql: Emmanuel André Jon Asher Raif Atef Josh Cooley Yoh Deadfall Austin Drenski Francisco Figueiredo Jr. (@franciscojunior) Npgsql creator and former lead developer for versions 0.xx, 1.xx and 2.xx Federico Di Gregorio Jon Hanna Emil Lenngren Chris Morgan Dave Page Glen Parker Hiroshi Saito Kenji Uno Warcha Thanks A special thanks to Jetbrains for donating licenses to the project."
  }
}